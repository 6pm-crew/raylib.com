
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'audio/audio_sound_loading.data';
    var REMOTE_PACKAGE_BASE = 'audio_sound_loading.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'resources', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_audio/audio_sound_loading.data');

    };
    Module['addRunDependency']('datafile_audio/audio_sound_loading.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 1, "start": 0, "crunched": 0, "end": 6246, "filename": "/resources/weird.wav"}, {"audio": 1, "start": 6246, "crunched": 0, "end": 63574, "filename": "/resources/tanatana.ogg"}], "remote_package_size": 63574, "package_uuid": "cde1b46a-288d-4b12-9e79-fa73e09585bc"});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [function($0, $1) { Module.printErr('bad name in getProcAddress: ' + [Pointer_stringify($0), Pointer_stringify($1)]) }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}



STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 67200;
/* global initializers */  __ATINIT__.push();


/* memory initializer */ allocate([32,3,0,0,194,1,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,32,0,0,176,1,0,0,0,0,0,0,0,0,0,32,37,249,142,0,10,2,0,0,128,190,125,95,244,125,31,160,242,43,74,30,9,82,8,0,64,34,65,80,20,4,16,32,32,41,46,18,8,34,8,0,32,34,65,80,20,4,16,32,32,249,16,76,8,250,62,60,16,34,125,222,247,125,16,32,32,161,232,50,8,34,8,0,8,34,5,16,4,69,16,0,240,163,164,50,8,82,8,0,4,34,5,16,4,69,16,32,32,249,226,94,8,2,0,129,2,62,125,31,244,125,16,0,0,32,0,0,176,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,15,0,192,15,224,247,251,125,126,191,95,232,190,80,0,162,8,8,68,232,47,20,10,133,2,129,80,72,160,80,0,162,40,228,73,40,40,20,10,132,2,129,64,72,160,72,0,190,15,2,16,175,235,247,9,132,62,159,216,79,160,71,0,34,136,228,9,161,42,20,10,132,2,129,80,72,160,72,0,34,40,8,4,160,47,20,10,133,2,129,80,72,162,80,0,190,143,0,0,33,32,244,251,125,126,129,95,232,156,208,7,0,128,0,0,224,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,12,0,130,66,191,223,239,247,251,11,5,5,133,66,191,4,72,0,198,66,161,80,40,20,64,8,5,37,133,66,160,8,168,0,170,70,161,80,40,20,64,8,5,37,133,66,144,16,8,0,146,74,161,95,232,247,67,8,5,37,121,126,136,32,8,0,130,82,161,64,40,1,66,8,137,36,133,64,132,64,8,0,130,98,161,64,42,2,66,8,81,36,133,64,130,128,8,0,130,66,191,192,47,244,67,248,33,252,133,126,191,0,9,62,0,0,0,0,4,0,0,0,0,0,0,0,128,1,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,4,0,32,72,65,0,0,0,0,0,8,0,0,4,4,0,4,60,32,0,65,0,0,0,0,0,8,0,0,240,125,223,247,133,239,75,81,190,239,251,190,239,59,81,4,0,69,65,20,133,40,74,73,170,40,138,162,32,8,81,4,240,69,65,244,157,40,74,71,170,40,138,162,224,11,81,4,16,69,65,20,132,40,74,73,170,40,138,162,0,10,145,2,240,125,223,247,133,47,74,209,170,232,251,190,224,123,31,1,0,0,0,0,4,8,64,0,0,0,8,32,0,0,0,0,0,0,0,0,132,15,96,0,0,0,8,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,36,1,15,0,0,0,0,0,0,0,0,0,6,0,0,0,36,1,15,0,0,0,0,0,0,0,128,16,9,162,40,250,36,1,15,0,0,0,0,0,0,0,0,62,1,42,37,66,34,82,15,0,0,0,0,0,0,0,128,138,3,42,34,34,36,41,15,0,0,0,0,0,0,0,128,10,1,42,37,18,36,1,15,0,0,0,0,0,0,0,128,10,1,190,232,251,36,1,15,0,0,0,0,0,0,0,128,190,14,0,0,2,172,1,15,0,0,0,0,0,0,0,128,4,0,0,224,3,0,0,15,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,14,184,67,132,3,58,32,0,128,160,190,2,32,0,0,240,138,32,82,196,2,43,32,4,34,145,2,248,59,0,240,7,142,56,75,228,2,58,32,2,28,138,30,8,42,233,17,4,224,11,66,244,2,130,36,1,20,4,20,232,186,4,209,5,128,184,195,231,10,58,137,0,28,14,60,40,2,9,80,4,128,0,64,196,2,128,68,0,34,132,32,232,2,0,80,4,0,0,64,128,2,0,32,5,0,142,62,8,2,0,16,4,224,3,64,128,66,0,0,7,0,132,0,248,3,0,240,7,0,0,64,128,34,0,0,4,0,0,0,0,0,0,0,0,0,0,64,128,2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,128,0,194,160,72,24,0,0,1,132,33,9,146,2,66,38,4,1,33,81,0,0,127,63,2,66,2,16,41,0,34,20,192,239,247,251,253,126,9,161,223,239,247,187,187,3,18,15,68,40,20,10,133,66,9,129,64,32,16,16,17,1,8,4,68,40,20,10,133,66,127,129,64,32,16,16,17,1,4,130,199,239,247,251,253,126,9,129,207,231,243,17,17,1,50,169,80,40,20,10,133,66,9,161,64,32,16,16,17,1,64,184,80,40,20,10,133,66,121,191,223,239,247,187,187,3,32,160,31,0,0,0,0,0,0,16,0,0,0,0,0,0,112,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,2,8,131,34,1,0,2,8,67,2,1,0,1,1,124,20,4,132,68,1,0,32,4,132,4,128,8,63,130,0,132,66,191,223,239,247,3,126,161,80,40,20,10,33,0,0,132,70,161,80,40,20,138,82,161,80,40,20,122,161,239,3,158,74,161,80,40,20,82,82,161,80,40,20,74,31,8,2,132,82,161,80,40,20,34,74,161,80,40,244,75,161,239,3,132,98,161,80,40,20,82,74,161,80,40,4,122,161,40,2,124,66,191,223,239,247,139,126,191,223,239,247,11,189,239,3,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,32,0,0,4,132,0,34,129,69,17,16,66,1,0,148,66,81,0,0,8,66,81,148,42,162,32,8,165,80,0,0,0,32,0,0,0,0,0,0,0,5,0,0,0,0,8,190,239,251,254,251,190,239,251,20,145,235,251,190,239,251,0,32,8,130,32,10,162,40,138,20,145,40,138,162,40,138,62,190,239,251,254,11,190,239,251,20,145,40,138,162,40,138,0,162,40,138,34,8,130,32,8,20,145,40,138,162,40,138,8,190,239,251,254,251,190,239,251,20,145,47,250,190,239,251,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,33,0,4,0,0,0,0,0,0,0,0,0,0,0,0,130,80,20,2,20,0,0,0,0,0,0,0,0,0,0,16,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,190,40,138,162,40,34,0,0,0,0,0,0,0,0,0,0,170,40,138,162,232,34,0,0,0,0,0,0,0,0,0,0,170,40,138,162,168,34,0,0,0,0,0,0,0,0,0,0,170,40,138,162,232,34,0,0,0,0,0,0,0,0,0,0,190,239,251,190,47,62,0,0,0,0,0,0,0,0,0,0,4,0,0,0,40,32,0,0,0,0,0,0,0,0,0,0,0,0,0,128,15,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,7,0,0,0,1,0,0,0,5,0,0,0,3,0,0,0,7,0,0,0,3,0,0,0,5,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,9,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,5,0,0,0,255,255,255,255,0,1,0,0,255,255,255,255,0,0,128,191,1,1,0,0,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,27,0,0,0,31,0,0,0,35,0,0,0,43,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,115,0,0,0,131,0,0,0,163,0,0,0,195,0,0,0,227,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,17,0,0,0,25,0,0,0,33,0,0,0,49,0,0,0,65,0,0,0,97,0,0,0,129,0,0,0,193,0,0,0,1,1,0,0,129,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,8,0,0,1,12,0,0,1,16,0,0,1,24,0,0,1,32,0,0,1,48,0,0,1,64,0,0,1,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,0,0,128,63,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,1,0,0,128,0,0,0,86,0,0,0,64,0,0,0,62,180,228,51,9,145,243,51,139,178,1,52,60,32,10,52,35,26,19,52,96,169,28,52,167,215,38,52,75,175,49,52,80,59,61,52,112,135,73,52,35,160,86,52,184,146,100,52,85,109,115,52,136,159,129,52,252,11,138,52,147,4,147,52,105,146,156,52,50,191,166,52,63,149,177,52,147,31,189,52,228,105,201,52,173,128,214,52,54,113,228,52,166,73,243,52,136,140,1,53,192,247,9,53,6,239,18,53,118,123,28,53,192,166,38,53,55,123,49,53,218,3,61,53,94,76,73,53,59,97,86,53,185,79,100,53,252,37,115,53,138,121,129,53,134,227,137,53,124,217,146,53,133,100,156,53,82,142,166,53,51,97,177,53,37,232,188,53,220,46,201,53,206,65,214,53,65,46,228,53,87,2,243,53,143,102,1,54,79,207,9,54,245,195,18,54,152,77,28,54,232,117,38,54,50,71,49,54,116,204,60,54,94,17,73,54,101,34,86,54,206,12,100,54,184,222,114,54,151,83,129,54,28,187,137,54,114,174,146,54,175,54,156,54,129,93,166,54,53,45,177,54,199,176,188,54,228,243,200,54,1,3,214,54,96,235,227,54,30,187,242,54,162,64,1,55,235,166,9,55,241,152,18,55,201,31,28,55,30,69,38,55,61,19,49,55,30,149,60,55,111,214,72,55,162,227,85,55,247,201,99,55,137,151,114,55,175,45,129,55,190,146,137,55,116,131,146,55,230,8,156,55,190,44,166,55,71,249,176,55,121,121,188,55,254,184,200,55,71,196,213,55,146,168,227,55,248,115,242,55,192,26,1,56,147,126,9,56,249,109,18,56,6,242,27,56,98,20,38,56,86,223,48,56,216,93,60,56,146,155,72,56,242,164,85,56,51,135,99,56,110,80,114,56,211,7,129,56,107,106,137,56,130,88,146,56,42,219,155,56,9,252,165,56,104,197,176,56,59,66,188,56,41,126,200,56,160,133,213,56,217,101,227,56,232,44,242,56,233,244,0,57,70,86,9,57,14,67,18,57,81,196,27,57,181,227,37,57,127,171,48,57,162,38,60,57,197,96,72,57,83,102,85,57,131,68,99,57,104,9,114,57,1,226,128,57,36,66,137,57,157,45,146,57,123,173,155,57,99,203,165,57,153,145,176,57,13,11,188,57,102,67,200,57,11,71,213,57,50,35,227,57,237,229,241,57,29,207,0,58,5,46,9,58,48,24,18,58,169,150,27,58,21,179,37,58,183,119,48,58,124,239,59,58,10,38,72,58,199,39,85,58,230,1,99,58,120,194,113,58,59,188,128,58,233,25,137,58,198,2,146,58,219,127,155,58,203,154,165,58,216,93,176,58,239,211,187,58,179,8,200,58,136,8,213,58,159,224,226,58,7,159,241,58,92,169,0,59,208,5,9,59,94,237,17,59,15,105,27,59,132,130,37,59,253,67,48,59,103,184,59,59,97,235,71,59,77,233,84,59,93,191,98,59,156,123,113,59,127,150,128,59,186,241,136,59,249,215,145,59,71,82,155,59,65,106,165,59,39,42,176,59,226,156,187,59,18,206,199,59,23,202,212,59,32,158,226,59,53,88,241,59,166,131,0,60,167,221,8,60,152,194,17,60,130,59,27,60,1,82,37,60,84,16,48,60,97,129,59,60,200,176,71,60,229,170,84,60,232,124,98,60,212,52,113,60,207,112,128,60,150,201,136,60,58,173,145,60,192,36,155,60,197,57,165,60,133,246,175,60,229,101,187,60,130,147,199,60,185,139,212,60,180,91,226,60,121,17,241,60,251,93,0,61,137,181,8,61,223,151,17,61,2,14,27,61,141,33,37,61,185,220,47,61,109,74,59,61,64,118,71,61,145,108,84,61,133,58,98,61,34,238,112,61,42,75,128,61,127,161,136,61,136,130,145,61,72,247,154,61,88,9,165,61,242,194,175,61,248,46,187,61,3,89,199,61,109,77,212,61,92,25,226,61,209,202,240,61,91,56,0,62,119,141,8,62,51,109,17,62,144,224,26,62,39,241,36,62,46,169,47,62,135,19,59,62,202,59,71,62,77,46,84,62,55,248,97,62,132,167,112,62,143,37,128,62,115,121,136,62,226,87,145,62,220,201,154,62,249,216,164,62,109,143,175,62,27,248,186,62,149,30,199,62,51,15,212,62,23,215,225,62,61,132,240,62,198,18,0,63,114,101,8,63,147,66,17,63,43,179,26,63,206,192,36,63,177,117,47,63,178,220,58,63,101,1,71,63,29,240,83,63,251,181,97,63,251,96,112,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,18,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,123,2,1,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,18,0,0,114,97,121,108,105,98,32,91,97,117,100,105,111,93,32,101,120,97,109,112,108,101,32,45,32,115,111,117,110,100,32,108,111,97,100,105,110,103,32,97,110,100,32,112,108,97,121,105,110,103,0,114,101,115,111,117,114,99,101,115,47,119,101,105,114,100,46,119,97,118,0,114,101,115,111,117,114,99,101,115,47,116,97,110,97,116,97,110,97,46,111,103,103,0,80,114,101,115,115,32,83,80,65,67,69,32,116,111,32,80,76,65,89,32,116,104,101,32,87,65,86,32,115,111,117,110,100,33,0,80,114,101,115,115,32,69,78,84,69,82,32,116,111,32,80,76,65,89,32,116,104,101,32,79,71,71,32,115,111,117,110,100,33,0,73,110,105,116,105,97,108,105,122,105,110,103,32,114,97,121,108,105,98,32,40,118,49,46,56,46,49,41,0,35,99,97,110,118,97,115,0,84,97,114,103,101,116,32,116,105,109,101,32,112,101,114,32,102,114,97,109,101,58,32,37,48,50,46,48,51,102,32,109,105,108,108,105,115,101,99,111,110,100,115,0,69,115,99,97,112,101,0,67,97,110,118,97,115,32,115,99,97,108,101,100,32,116,111,32,102,117,108,108,115,99,114,101,101,110,46,32,69,108,101,109,101,110,116,83,105,122,101,58,32,40,37,105,120,37,105,41,44,32,83,99,114,101,101,110,83,105,122,101,40,37,105,120,37,105,41,0,67,97,110,118,97,115,32,115,99,97,108,101,100,32,116,111,32,119,105,110,100,111,119,101,100,46,32,69,108,101,109,101,110,116,83,105,122,101,58,32,40,37,105,120,37,105,41,44,32,83,99,114,101,101,110,83,105,122,101,40,37,105,120,37,105,41,0,91,84,69,88,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,102,111,110,116,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,84,69,88,32,73,68,32,37,105,93,32,80,97,114,97,109,101,116,101,114,115,58,32,37,105,120,37,105,44,32,37,105,32,109,105,112,115,44,32,102,111,114,109,97,116,32,37,105,0,68,88,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,69,84,67,49,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,69,84,67,50,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,80,86,82,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,83,84,67,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,84,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,91,84,69,88,32,73,68,32,37,105,93,32,84,101,120,116,117,114,101,32,99,114,101,97,116,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,120,37,105,41,0,84,101,120,116,117,114,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,99,114,101,97,116,101,100,0,73,109,97,103,101,32,100,97,116,97,32,102,111,114,109,97,116,32,105,115,32,99,111,109,112,114,101,115,115,101,100,44,32,99,97,110,32,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,0,70,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,112,105,120,101,108,32,100,97,116,97,32,114,101,116,114,105,101,118,97,108,0,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,71,76,70,87,0,84,114,121,105,110,103,32,116,111,32,101,110,97,98,108,101,32,77,83,65,65,32,120,52,0,67,108,111,115,101,115,116,32,102,117,108,108,115,99,114,101,101,110,32,118,105,100,101,111,109,111,100,101,58,32,37,105,32,120,32,37,105,0,71,76,70,87,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,87,105,110,100,111,119,0,68,105,115,112,108,97,121,32,100,101,118,105,99,101,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,82,101,110,100,101,114,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,83,99,114,101,101,110,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,86,105,101,119,112,111,114,116,32,111,102,102,115,101,116,115,58,32,37,105,44,32,37,105,0,84,114,121,105,110,103,32,116,111,32,101,110,97,98,108,101,32,86,83,89,78,67,0,71,80,85,58,32,86,101,110,100,111,114,58,32,32,32,37,115,0,71,80,85,58,32,82,101,110,100,101,114,101,114,58,32,37,115,0,71,80,85,58,32,86,101,114,115,105,111,110,58,32,32,37,115,0,71,80,85,58,32,71,76,83,76,58,32,32,32,32,32,37,115,0,32,0,78,117,109,98,101,114,32,111,102,32,115,117,112,112,111,114,116,101,100,32,101,120,116,101,110,115,105,111,110,115,58,32,37,105,0,71,76,95,79,69,83,95,118,101,114,116,101,120,95,97,114,114,97,121,95,111,98,106,101,99,116,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,79,69,83,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,79,69,83,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,79,69,83,0,71,76,95,79,69,83,95,116,101,120,116,117,114,101,95,110,112,111,116,0,79,69,83,95,116,101,120,116,117,114,101,95,102,108,111,97,116,0,71,76,95,69,88,84,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,115,51,116,99,0,71,76,95,87,69,66,71,76,95,99,111,109,112,114,101,115,115,101,100,95,116,101,120,116,117,114,101,95,115,51,116,99,0,71,76,95,87,69,66,75,73,84,95,87,69,66,71,76,95,99,111,109,112,114,101,115,115,101,100,95,116,101,120,116,117,114,101,95,115,51,116,99,0,71,76,95,79,69,83,95,99,111,109,112,114,101,115,115,101,100,95,69,84,67,49,95,82,71,66,56,95,116,101,120,116,117,114,101,0,71,76,95,87,69,66,71,76,95,99,111,109,112,114,101,115,115,101,100,95,116,101,120,116,117,114,101,95,101,116,99,49,0,71,76,95,65,82,66,95,69,83,51,95,99,111,109,112,97,116,105,98,105,108,105,116,121,0,71,76,95,73,77,71,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,112,118,114,116,99,0,71,76,95,75,72,82,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,97,115,116,99,95,104,100,114,0,71,76,95,69,88,84,95,116,101,120,116,117,114,101,95,102,105,108,116,101,114,95,97,110,105,115,111,116,114,111,112,105,99,0,71,76,95,69,88,84,95,116,101,120,116,117,114,101,95,109,105,114,114,111,114,95,99,108,97,109,112,0,91,69,88,84,69,78,83,73,79,78,93,32,86,65,79,32,101,120,116,101,110,115,105,111,110,32,100,101,116,101,99,116,101,100,44,32,86,65,79,32,102,117,110,99,116,105,111,110,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,69,88,84,69,78,83,73,79,78,93,32,86,65,79,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,102,111,117,110,100,44,32,86,65,79,32,117,115,97,103,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,78,80,79,84,32,116,101,120,116,117,114,101,115,32,101,120,116,101,110,115,105,111,110,32,100,101,116,101,99,116,101,100,44,32,102,117,108,108,32,78,80,79,84,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,78,80,79,84,32,116,101,120,116,117,114,101,115,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,102,111,117,110,100,44,32,108,105,109,105,116,101,100,32,78,80,79,84,32,115,117,112,112,111,114,116,32,40,110,111,45,109,105,112,109,97,112,115,44,32,110,111,45,114,101,112,101,97,116,41,0,91,69,88,84,69,78,83,73,79,78,93,32,68,88,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,69,84,67,49,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,69,84,67,50,47,69,65,67,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,80,86,82,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,65,83,84,67,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,65,110,105,115,111,116,114,111,112,105,99,32,116,101,120,116,117,114,101,115,32,102,105,108,116,101,114,105,110,103,32,115,117,112,112,111,114,116,101,100,32,40,109,97,120,58,32,37,46,48,102,88,41,0,91,69,88,84,69,78,83,73,79,78,93,32,67,108,97,109,112,32,109,105,114,114,111,114,32,119,114,97,112,32,116,101,120,116,117,114,101,32,109,111,100,101,32,115,117,112,112,111,114,116,101,100,0,255,255,255,255,91,84,69,88,32,73,68,32,37,105,93,32,66,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,66,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,79,112,101,110,71,76,32,100,101,102,97,117,108,116,32,115,116,97,116,101,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,67,80,85,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,108,105,110,101,115,44,32,116,114,105,97,110,103,108,101,115,44,32,113,117,97,100,115,41,0,91,86,65,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,65,79,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,108,105,110,101,115,41,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,108,105,110,101,115,41,0,91,86,65,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,65,79,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,116,114,105,97,110,103,108,101,115,41,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,116,114,105,97,110,103,108,101,115,41,0,91,86,65,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,65,79,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,113,117,97,100,115,41,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,113,117,97,100,115,41,0,35,118,101,114,115,105,111,110,32,49,48,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,118,101,114,116,101,120,80,111,115,105,116,105,111,110,59,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,118,101,114,116,101,120,84,101,120,67,111,111,114,100,59,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,118,101,114,116,101,120,67,111,108,111,114,59,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,50,32,102,114,97,103,84,101,120,67,111,111,114,100,59,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,52,32,102,114,97,103,67,111,108,111,114,59,32,32,32,32,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,109,97,116,52,32,109,118,112,59,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,118,111,105,100,32,109,97,105,110,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,123,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,32,32,32,32,102,114,97,103,84,101,120,67,111,111,114,100,32,61,32,118,101,114,116,101,120,84,101,120,67,111,111,114,100,59,32,10,32,32,32,32,102,114,97,103,67,111,108,111,114,32,61,32,118,101,114,116,101,120,67,111,108,111,114,59,32,32,32,32,32,32,32,10,32,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,109,118,112,42,118,101,99,52,40,118,101,114,116,101,120,80,111,115,105,116,105,111,110,44,32,49,46,48,41,59,32,10,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,0,35,118,101,114,115,105,111,110,32,49,48,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,32,32,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,50,32,102,114,97,103,84,101,120,67,111,111,114,100,59,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,52,32,102,114,97,103,67,111,108,111,114,59,32,32,32,32,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,48,59,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,118,101,99,52,32,99,111,108,68,105,102,102,117,115,101,59,32,32,32,32,32,32,32,32,32,32,32,10,118,111,105,100,32,109,97,105,110,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,123,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,32,32,32,32,118,101,99,52,32,116,101,120,101,108,67,111,108,111,114,32,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,48,44,32,102,114,97,103,84,101,120,67,111,111,114,100,41,59,32,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,116,101,120,101,108,67,111,108,111,114,42,99,111,108,68,105,102,102,117,115,101,42,102,114,97,103,67,111,108,111,114,59,32,32,32,32,32,32,10,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,0,91,83,72,68,82,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,115,104,97,100,101,114,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,118,101,114,116,101,120,80,111,115,105,116,105,111,110,0,118,101,114,116,101,120,84,101,120,67,111,111,114,100,0,118,101,114,116,101,120,67,111,108,111,114,0,109,118,112,0,99,111,108,68,105,102,102,117,115,101,0,116,101,120,116,117,114,101,48,0,91,83,72,68,82,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,115,104,97,100,101,114,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,118,101,114,116,101,120,78,111,114,109,97,108,0,118,101,114,116,101,120,84,97,110,103,101,110,116,0,118,101,114,116,101,120,84,101,120,67,111,111,114,100,50,0,91,83,72,68,82,32,73,68,32,37,105,93,32,70,97,105,108,101,100,32,116,111,32,108,105,110,107,32,115,104,97,100,101,114,32,112,114,111,103,114,97,109,46,46,46,0,37,115,0,91,83,72,68,82,32,73,68,32,37,105,93,32,83,104,97,100,101,114,32,112,114,111,103,114,97,109,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,83,72,68,82,32,73,68,32,37,105,93,32,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,115,104,97,100,101,114,46,46,46,0,91,83,72,68,82,32,73,68,32,37,105,93,32,83,104,97,100,101,114,32,99,111,109,112,105,108,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,68,79,87,78,83,67,65,76,73,78,71,58,32,82,101,113,117,105,114,101,100,32,115,99,114,101,101,110,32,115,105,122,101,32,40,37,105,120,37,105,41,32,105,115,32,98,105,103,103,101,114,32,116,104,97,110,32,100,105,115,112,108,97,121,32,115,105,122,101,32,40,37,105,120,37,105,41,0,68,111,119,110,115,99,97,108,101,32,109,97,116,114,105,120,32,103,101,110,101,114,97,116,101,100,44,32,99,111,110,116,101,110,116,32,119,105,108,108,32,98,101,32,114,101,110,100,101,114,101,100,32,97,116,58,32,37,105,32,120,32,37,105,0,85,80,83,67,65,76,73,78,71,58,32,82,101,113,117,105,114,101,100,32,115,99,114,101,101,110,32,115,105,122,101,58,32,37,105,32,120,32,37,105,32,45,62,32,68,105,115,112,108,97,121,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,91,71,76,70,87,51,32,69,114,114,111,114,93,32,67,111,100,101,58,32,37,105,32,68,101,99,114,105,112,116,105,111,110,58,32,37,115,0,73,78,70,79,58,32,0,69,82,82,79,82,58,32,0,87,65,82,78,73,78,71,58,32,0,68,69,66,85,71,58,32,0,10,0,87,105,110,100,111,119,32,99,108,111,115,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,84,69,88,32,73,68,32,37,105,93,32,85,110,108,111,97,100,101,100,32,116,101,120,116,117,114,101,32,100,97,116,97,32,40,98,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,41,32,102,114,111,109,32,86,82,65,77,0,91,84,69,88,32,73,68,32,37,105,93,32,85,110,108,111,97,100,101,100,32,116,101,120,116,117,114,101,32,100,97,116,97,32,102,114,111,109,32,86,82,65,77,32,40,71,80,85,41,0,82,69,67,79,82,68,73,78,71,0,77,65,88,95,76,73,78,69,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,77,65,88,95,84,82,73,65,78,71,76,69,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,77,65,88,95,81,85,65,68,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,83,116,97,99,107,32,66,117,102,102,101,114,32,79,118,101,114,102,108,111,119,32,40,77,65,88,32,37,105,32,77,97,116,114,105,120,41,0,91,37,115,93,32,114,82,69,83,32,114,97,121,108,105,98,32,114,101,115,111,117,114,99,101,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,91,37,115,93,32,84,104,105,115,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,114,97,121,108,105,98,32,114,101,115,111,117,114,99,101,32,102,105,108,101,0,91,37,115,93,91,73,68,32,37,105,93,32,82,101,115,111,117,114,99,101,32,100,97,116,97,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,37,115,93,91,73,68,32,37,105,93,32,82,101,113,117,101,115,116,101,100,32,114,101,115,111,117,114,99,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,102,111,117,110,100,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,119,104,105,108,101,32,100,101,99,111,109,112,114,101,115,115,105,110,103,32,100,97,116,97,0,68,97,116,97,32,100,101,99,111,109,112,114,101,115,115,105,111,110,32,102,97,105,108,101,100,0,69,120,112,101,99,116,101,100,32,117,110,99,111,109,112,114,101,115,115,101,100,32,115,105,122,101,32,100,111,32,110,111,116,32,109,97,116,99,104,44,32,100,97,116,97,32,109,97,121,32,98,101,32,99,111,114,114,117,112,116,101,100,0,32,45,45,32,69,120,112,101,99,116,101,100,32,117,110,99,111,109,112,114,101,115,115,101,100], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([32,115,105,122,101,58,32,37,105,0,32,45,45,32,82,101,116,117,114,110,101,100,32,117,110,99,111,109,112,114,101,115,115,101,100,32,115,105,122,101,58,32,37,105,0,68,97,116,97,32,100,101,99,111,109,112,114,101,115,115,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,102,114,111,109,32,37,117,32,98,121,116,101,115,32,116,111,32,37,117,32,98,121,116,101,115,0,5,5,4,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,2,3,7,0,3,3,11,0,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,109,117,116,101,120,32,102,111,114,32,97,117,100,105,111,32,109,105,120,105,110,103,0,65,117,100,105,111,32,100,101,118,105,99,101,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,58,32,37,115,0,65,117,100,105,111,32,98,97,99,107,101,110,100,58,32,37,115,0,65,117,100,105,111,32,102,111,114,109,97,116,58,32,37,115,0,65,117,100,105,111,32,99,104,97,110,110,101,108,115,58,32,37,100,0,65,117,100,105,111,32,115,97,109,112,108,101,32,114,97,116,101,58,32,37,100,0,85,110,107,110,111,119,110,0,56,45,98,105,116,32,85,110,115,105,103,110,101,100,32,73,110,116,101,103,101,114,0,49,54,45,98,105,116,32,83,105,103,110,101,100,32,73,110,116,101,103,101,114,0,50,52,45,98,105,116,32,83,105,103,110,101,100,32,73,110,116,101,103,101,114,32,40,84,105,103,104,116,108,121,32,80,97,99,107,101,100,41,0,51,50,45,98,105,116,32,83,105,103,110,101,100,32,73,110,116,101,103,101,114,0,51,50,45,98,105,116,32,73,69,69,69,32,70,108,111,97,116,105,110,103,32,80,111,105,110,116,0,73,110,118,97,108,105,100,0,78,117,108,108,0,87,65,83,65,80,73,0,68,105,114,101,99,116,83,111,117,110,100,0,87,105,110,77,77,0,65,76,83,65,0,79,83,83,0,79,112,101,110,83,76,124,69,83,0,79,112,101,110,65,76,0,112,68,101,118,105,99,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,101,120,116,101,114,110,97,108,47,109,105,110,105,95,97,108,46,104,0,109,97,108,95,100,101,118,105,99,101,95,117,110,105,110,105,116,95,95,115,100,108,0,109,97,108,95,100,101,118,105,99,101,95,115,116,111,112,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,115,32,40,112,68,101,118,105,99,101,32,61,61,32,78,85,76,76,41,46,0,109,97,108,95,100,101,118,105,99,101,95,115,116,111,112,40,41,32,99,97,108,108,101,100,32,102,111,114,32,97,110,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,100,101,118,105,99,101,46,0,109,97,108,95,100,101,118,105,99,101,95,115,116,111,112,40,41,32,99,97,108,108,101,100,32,119,104,105,108,101,32,97,110,111,116,104,101,114,32,116,104,114,101,97,100,32,105,115,32,97,108,114,101,97,100,121,32,115,116,111,112,112,105,110,103,32,105,116,46,0,109,97,108,95,100,101,118,105,99,101,95,115,116,111,112,40,41,32,99,97,108,108,101,100,32,102,111,114,32,97,32,100,101,118,105,99,101,32,116,104,97,116,39,115,32,97,108,114,101,97,100,121,32,115,116,111,112,112,101,100,46,0,109,97,108,95,100,101,118,105,99,101,95,115,116,111,112,40,41,32,99,97,108,108,101,100,32,119,104,105,108,101,32,97,110,111,116,104,101,114,32,116,104,114,101,97,100,32,105,115,32,105,110,32,116,104,101,32,112,114,111,99,101,115,115,32,111,102,32,115,116,97,114,116,105,110,103,32,105,116,46,0,109,97,108,95,100,101,118,105,99,101,95,95,98,114,101,97,107,95,109,97,105,110,95,108,111,111,112,0,109,97,108,95,100,101,118,105,99,101,95,95,115,116,111,112,95,98,97,99,107,101,110,100,95,95,115,100,108,0,109,97,108,95,100,101,118,105,99,101,95,115,116,97,114,116,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,115,32,40,112,68,101,118,105,99,101,32,61,61,32,78,85,76,76,41,46,0,109,97,108,95,100,101,118,105,99,101,95,115,116,97,114,116,40,41,32,99,97,108,108,101,100,32,102,111,114,32,97,110,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,100,101,118,105,99,101,46,0,109,97,108,95,100,101,118,105,99,101,95,115,116,97,114,116,40,41,32,99,97,108,108,101,100,32,119,104,105,108,101,32,97,110,111,116,104,101,114,32,116,104,114,101,97,100,32,105,115,32,97,108,114,101,97,100,121,32,115,116,97,114,116,105,110,103,32,105,116,46,0,109,97,108,95,100,101,118,105,99,101,95,115,116,97,114,116,40,41,32,99,97,108,108,101,100,32,102,111,114,32,97,32,100,101,118,105,99,101,32,116,104,97,116,39,115,32,97,108,114,101,97,100,121,32,115,116,97,114,116,101,100,46,0,109,97,108,95,100,101,118,105,99,101,95,115,116,97,114,116,40,41,32,99,97,108,108,101,100,32,119,104,105,108,101,32,97,110,111,116,104,101,114,32,116,104,114,101,97,100,32,105,115,32,105,110,32,116,104,101,32,112,114,111,99,101,115,115,32,111,102,32,115,116,111,112,112,105,110,103,32,105,116,46,0,109,97,108,95,100,101,118,105,99,101,95,95,115,116,97,114,116,95,98,97,99,107,101,110,100,95,95,115,100,108,0,109,97,108,95,99,111,110,116,101,120,116,95,117,110,105,110,105,116,0,112,67,111,110,116,101,120,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,109,97,108,95,99,111,110,116,101,120,116,95,117,110,105,110,105,116,95,95,115,100,108,0,112,67,111,110,116,101,120,116,45,62,98,97,99,107,101,110,100,32,61,61,32,109,97,108,95,98,97,99,107,101,110,100,95,115,100,108,0,109,97,108,95,100,101,118,105,99,101,95,105,110,105,116,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,115,32,40,112,68,101,118,105,99,101,32,61,61,32,78,85,76,76,41,46,0,109,97,108,95,100,101,118,105,99,101,95,105,110,105,116,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,115,32,40,112,67,111,110,102,105,103,32,61,61,32,78,85,76,76,41,46,0,87,65,82,78,73,78,71,58,32,109,97,108,95,100,101,118,105,99,101,95,105,110,105,116,40,41,32,99,97,108,108,101,100,32,102,111,114,32,97,32,100,101,118,105,99,101,32,116,104,97,116,32,105,115,32,110,111,116,32,112,114,111,112,101,114,108,121,32,97,108,105,103,110,101,100,46,32,84,104,114,101,97,100,32,115,97,102,101,116,121,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,109,97,108,95,100,101,118,105,99,101,95,105,110,105,116,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,115,32,40,112,67,111,110,116,101,120,116,32,61,61,32,78,85,76,76,41,46,0,109,97,108,95,100,101,118,105,99,101,95,105,110,105,116,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,97,110,32,105,110,118,97,108,105,100,32,99,111,110,102,105,103,46,32,67,104,97,110,110,101,108,32,99,111,117,110,116,32,109,117,115,116,32,98,101,32,103,114,101,97,116,101,114,32,116,104,97,110,32,48,46,0,109,97,108,95,100,101,118,105,99,101,95,105,110,105,116,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,97,110,32,105,110,118,97,108,105,100,32,99,111,110,102,105,103,46,32,67,104,97,110,110,101,108,32,99,111,117,110,116,32,99,97,110,110,111,116,32,101,120,99,101,101,100,32,49,56,46,0,109,97,108,95,100,101,118,105,99,101,95,105,110,105,116,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,97,110,32,105,110,118,97,108,105,100,32,99,111,110,102,105,103,46,32,83,97,109,112,108,101,32,114,97,116,101,32,109,117,115,116,32,98,101,32,103,114,101,97,116,101,114,32,116,104,97,110,32,48,46,0,109,97,108,95,100,101,118,105,99,101,95,105,110,105,116,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,115,46,32,67,104,97,110,110,101,108,32,109,97,112,32,105,115,32,105,110,118,97,108,105,100,46,0,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,109,117,116,101,120,46,0,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,119,111,114,107,101,114,32,116,104,114,101,97,100,32,119,97,107,101,117,112,32,101,118,101,110,116,46,0,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,119,111,114,107,101,114,32,116,104,114,101,97,100,32,115,116,97,114,116,32,101,118,101,110,116,46,0,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,119,111,114,107,101,114,32,116,104,114,101,97,100,32,115,116,111,112,32,101,118,101,110,116,46,0,68,101,102,97,117,108,116,32,80,108,97,121,98,97,99,107,32,68,101,118,105,99,101,0,68,101,102,97,117,108,116,32,67,97,112,116,117,114,101,32,68,101,118,105,99,101,0,80,108,97,121,98,97,99,107,32,68,101,118,105,99,101,0,67,97,112,116,117,114,101,32,68,101,118,105,99,101,0,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,119,111,114,107,101,114,32,116,104,114,101,97,100,46,0,109,97,108,95,100,101,118,105,99,101,95,95,103,101,116,95,115,116,97,116,101,40,112,68,101,118,105,99,101,41,32,61,61,32,49,0,109,97,108,95,100,101,118,105,99,101,95,105,110,105,116,0,109,97,108,95,119,111,114,107,101,114,95,116,104,114,101,97,100,0,109,97,108,95,100,101,118,105,99,101,95,95,103,101,116,95,115,116,97,116,101,40,112,68,101,118,105,99,101,41,32,61,61,32,51,0,109,97,108,95,100,101,118,105,99,101,95,95,109,97,105,110,95,108,111,111,112,0,109,97,108,95,100,101,118,105,99,101,95,95,115,116,97,114,116,95,98,97,99,107,101,110,100,0,109,97,108,95,100,101,118,105,99,101,95,95,115,116,111,112,95,98,97,99,107,101,110,100,0,109,97,108,95,100,101,118,105,99,101,95,95,111,110,95,114,101,97,100,95,102,114,111,109,95,100,101,118,105,99,101,0,112,83,82,67,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,109,97,108,95,115,114,99,95,99,97,99,104,101,95,105,110,105,116,0,112,67,97,99,104,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,112,68,83,80,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,109,97,108,95,100,115,112,95,95,115,114,99,95,111,110,95,114,101,97,100,0,109,97,108,95,100,101,118,105,99,101,95,95,111,110,95,114,101,97,100,95,102,114,111,109,95,99,108,105,101,110,116,0,109,97,108,95,99,111,110,116,101,120,116,95,95,116,114,121,95,103,101,116,95,100,101,118,105,99,101,95,110,97,109,101,95,98,121,95,105,100,0,112,78,97,109,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,109,97,108,95,101,110,117,109,101,114,97,116,101,95,100,101,118,105,99,101,115,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,115,32,40,112,67,111,117,110,116,32,61,61,32,48,41,46,0,109,97,108,95,101,110,117,109,101,114,97,116,101,95,100,101,118,105,99,101,115,0,109,97,108,95,100,101,118,105,99,101,95,105,110,105,116,95,95,115,100,108,0,112,67,111,110,102,105,103,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,98,117,102,102,101,114,83,105,122,101,32,60,61,32,51,50,55,54,56,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,83,68,76,32,100,101,118,105,99,101,46,0,109,97,108,95,97,117,100,105,111,95,99,97,108,108,98,97,99,107,95,95,115,100,108,0,109,97,108,95,100,101,118,105,99,101,95,95,115,101,110,100,95,102,114,97,109,101,115,95,116,111,95,99,108,105,101,110,116,0,102,114,97,109,101,67,111,117,110,116,32,62,32,48,0,112,83,97,109,112,108,101,115,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,112,70,114,97,109,101,115,79,117,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,109,97,108,95,100,115,112,95,109,105,120,95,99,104,97,110,110,101,108,115,95,95,100,101,99,0,99,104,97,110,110,101,108,115,79,117,116,32,62,32,48,0,112,70,114,97,109,101,115,73,110,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,99,104,97,110,110,101,108,115,73,110,32,62,32,48,0,99,104,97,110,110,101,108,115,79,117,116,32,60,32,99,104,97,110,110,101,108,115,73,110,0,109,97,108,95,100,115,112,95,109,105,120,95,99,104,97,110,110,101,108,115,95,95,105,110,99,0,99,104,97,110,110,101,108,115,79,117,116,32,62,32,99,104,97,110,110,101,108,115,73,110,0,109,97,108,95,115,114,99,95,114,101,97,100,95,102,114,97,109,101,115,95,108,105,110,101,97,114,0,109,97,108,95,115,114,99,95,99,97,99,104,101,95,114,101,97,100,95,102,114,97,109,101,115,0,112,67,97,99,104,101,45,62,112,83,82,67,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,112,67,97,99,104,101,45,62,112,83,82,67,45,62,111,110,82,101,97,100,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,109,97,108,95,115,114,99,95,114,101,97,100,95,102,114,97,109,101,115,95,112,97,115,115,116,104,114,111,117,103,104,0,109,97,108,95,100,101,118,105,99,101,95,95,114,101,97,100,95,102,114,97,109,101,115,95,102,114,111,109,95,99,108,105,101,110,116,0,99,104,97,110,110,101,108,115,32,62,32,48,0,109,97,108,95,95,105,115,95,99,104,97,110,110,101,108,95,109,97,112,95,118,97,108,105,100,0,77,105,120,101,100,32,116,111,111,32,109,97,110,121,32,102,114,97,109,101,115,32,102,114,111,109,32,97,117,100,105,111,32,98,117,102,102,101,114,0,80,108,97,121,65,117,100,105,111,66,117,102,102,101,114,40,41,32,58,32,78,111,32,97,117,100,105,111,32,98,117,102,102,101,114,0,98,97,99,107,101,110,100,115,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,109,97,108,95,99,111,110,116,101,120,116,95,105,110,105,116,0,109,97,108,95,99,111,110,116,101,120,116,95,105,110,105,116,95,95,115,100,108,0,67,111,117,108,100,32,110,111,116,32,99,108,111,115,101,32,97,117,100,105,111,32,100,101,118,105,99,101,32,98,101,99,97,117,115,101,32,105,116,32,105,115,32,110,111,116,32,99,117,114,114,101,110,116,108,121,32,105,110,105,116,105,97,108,105,122,101,100,0,65,117,100,105,111,32,100,101,118,105,99,101,32,99,108,111,115,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,67,114,101,97,116,101,65,117,100,105,111,66,117,102,102,101,114,40,41,32,58,32,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,102,111,114,32,97,117,100,105,111,32,98,117,102,102,101,114,0,76,111,97,100,83,111,117,110,100,70,114,111,109,87,97,118,101,40,41,32,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,100,97,116,97,32,99,111,110,118,101,114,115,105,111,110,32,112,105,112,101,108,105,110,101,0,70,114,97,109,101,32,99,117,114,115,111,114,32,112,111,115,105,116,105,111,110,32,109,111,118,101,100,32,116,111,111,32,102,97,114,32,102,111,114,119,97,114,100,32,105,110,32,97,117,100,105,111,32,115,116,114,101,97,109,0,46,119,97,118,0,46,111,103,103,0,46,114,114,101,115,0,91,37,115,93,32,82,101,115,111,117,114,99,101,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,99,111,110,116,97,105,110,32,119,97,118,101,32,100,97,116,97,0,91,37,115,93,32,65,117,100,105,111,32,102,105,108,101,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,44,32,105,116,32,99,97,110,39,116,32,98,101,32,108,111,97,100,101,100,0,87,97,118,101,70,111,114,109,97,116,40,41,32,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,102,114,97,109,101,32,99,111,117,110,116,32,102,111,114,32,102,111,114,109,97,116,32,99,111,110,118,101,114,115,105,111,110,46,0,87,97,118,101,70,111,114,109,97,116,40,41,32,58,32,70,111,114,109,97,116,32,99,111,110,118,101,114,115,105,111,110,32,102,97,105,108,101,100,46,0,112,68,97,116,97,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,109,97,108,95,99,111,110,118,101,114,116,95,102,114,97,109,101,115,95,95,111,110,95,114,101,97,100,0,112,68,97,116,97,45,62,116,111,116,97,108,70,114,97,109,101,67,111,117,110,116,32,62,61,32,112,68,97,116,97,45,62,105,78,101,120,116,70,114,97,109,101,0,91,37,115,93,32,79,71,71,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,91,37,115,93,32,79,103,103,32,97,117,100,105,111,32,108,101,110,103,116,104,32,105,115,32,108,97,114,103,101,114,32,116,104,97,110,32,49,48,32,115,101,99,111,110,100,115,32,40,37,102,41,44,32,116,104,97,116,39,115,32,97,32,98,105,103,32,102,105,108,101,32,105,110,32,109,101,109,111,114,121,44,32,99,111,110,115,105,100,101,114,32,109,117,115,105,99,32,115,116,114,101,97,109,105,110,103,0,91,37,115,93,32,83,97,109,112,108,101,115,32,111,98,116,97,105,110,101,100,58,32,37,105,0,77,111,110,111,0,83,116,101,114,101,111,0,91,37,115,93,32,79,71,71,32,102,105,108,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,32,72,122,44,32,37,105,32,98,105,116,44,32,37,115,41,0,48,0,101,120,116,101,114,110,97,108,47,115,116,98,95,118,111,114,98,105,115,46,99,0,103,101,116,95,119,105,110,100,111,119,0,102,45,62,97,108,108,111,99,46,97,108,108,111,99,95,98,117,102,102,101,114,95,108,101,110,103,116,104,95,105,110,95,98,121,116,101,115,32,61,61,32,102,45,62,116,101,109,112,95,111,102,102,115,101,116,0,118,111,114,98,105,115,95,100,101,99,111,100,101,95,112,97,99,107,101,116,95,114,101,115,116,0,102,45,62,98,121,116,101,115,95,105,110,95,115,101,103,32,62,32,48,0,103,101,116,56,95,112,97,99,107,101,116,95,114,97,119,0,102,45,62,98,121,116,101,115,95,105,110,95,115,101,103,32,61,61,32,48,0,110,101,120,116,95,115,101,103,109,101,110,116,0,118,32,61,61,32,98,117,102,50,0,105,110,118,101,114,115,101,95,109,100,99,116,0,40,110,32,38,32,51,41,32,61,61,32,48,0,105,109,100,99,116,95,115,116,101,112,51,95,105,116,101,114,48,95,108,111,111,112,0,122,32,60,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,115,116,97,114,116,0,33,99,45,62,115,112,97,114,115,101,32,124,124,32,122,32,60,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,100,101,105,110,116,101,114,108,101,97,118,101,95,114,101,112,101,97,116,0,33,99,45,62,115,112,97,114,115,101,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,115,99,97,108,97,114,95,114,97,119,0,0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,118,111,114,98,105,115,95,100,101,99,111,100,101,95,105,110,105,116,105,97,108,0,98,117,102,95,99,32,61,61,32,50,0,99,111,110,118,101,114,116,95,99,104,97,110,110,101,108,115,95,115,104,111,114,116,95,105,110,116,101,114,108,101,97,118,101,100,0,0,0,0,0,0,0,7,0,0,0,0,0,3,5,0,0,0,0,3,7,5,0,0,0,3,5,3,5,0,0,3,7,5,3,5,0,3,7,5,3,5,7,79,103,103,83,114,98,0,102,45,62,116,101,109,112,95,111,102,102,115,101,116,32,61,61,32,102,45,62,97,108,108,111,99,46,97,108,108,111,99,95,98,117,102,102,101,114,95,108,101,110,103,116,104,95,105,110,95,98,121,116,101,115,0,115,116,97,114,116,95,100,101,99,111,100,101,114,0,112,111,119,40,40,102,108,111,97,116,41,32,114,43,49,44,32,100,105,109,41,32,62,32,101,110,116,114,105,101,115,0,108,111,111,107,117,112,49,95,118,97,108,117,101,115,0,40,105,110,116,41,32,102,108,111,111,114,40,112,111,119,40,40,102,108,111,97,116,41,32,114,44,32,100,105,109,41,41,32,60,61,32,101,110,116,114,105,101,115,0,107,32,61,61,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,99,111,109,112,117,116,101,95,115,111,114,116,101,100,95,104,117,102,102,109,97,110,0,99,45,62,115,111,114,116,101,100,95,99,111,100,101,119,111,114,100,115,91,120,93,32,61,61,32,99,111,100,101,0,108,101,110,32,33,61,32,78,79,95,67,79,68,69,0,105,110,99,108,117,100,101,95,105,110,95,115,111,114,116,0,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,32,61,61,32,48,0,99,111,109,112,117,116,101,95,99,111,100,101,119,111,114,100,115,0,122,32,62,61,32,48,32,38,38,32,122,32,60,32,51,50,0,108,101,110,91,105,93,32,62,61,32,48,32,38,38,32,108,101,110,91,105,93,32,60,32,51,50,0,97,118,97,105,108,97,98,108,101,91,121,93,32,61,61,32,48,0,118,111,114,98,105,115,91,37,115,93,32,87,65,86,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,82,73,70,70,0,87,65,86,69,0,91,37,115,93,32,73,110,118,97,108,105,100,32,82,73,70,70,32,111,114,32,87,65,86,69,32,72,101,97,100,101,114,0,91,37,115,93,32,73,110,118,97,108,105,100,32,87,97,118,101,32,102,111,114,109,97,116,0,91,37,115,93,32,73,110,118,97,108,105,100,32,100,97,116,97,32,104,101,97,100,101,114,0,91,37,115,93,32,87,65,86,32,115,97,109,112,108,101,32,115,105,122,101,32,40,37,105,98,105,116,41,32,110,111,116,32,115,117,112,112,111,114,116,101,100,44,32,99,111,110,118,101,114,116,101,100,32,116,111,32,49,54,98,105,116,0,91,37,115,93,32,87,65,86,32,99,104,97,110,110,101,108,115,32,110,117,109,98,101,114,32,40,37,105,41,32,110,111,116,32,115,117,112,112,111,114,116,101,100,44,32,99,111,110,118,101,114,116,101,100,32,116,111,32,50,32,99,104,97,110,110,101,108,115,0,91,37,115,93,32,87,65,86,32,102,105,108,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,32,72,122,44,32,37,105,32,98,105,116,44,32,37,115,41,0,85,110,108,111,97,100,101,100,32,119,97,118,101,32,100,97,116,97,32,102,114,111,109,32,82,65,77,0,76,111,97,100,83,111,117,110,100,70,114,111,109,87,97,118,101,40,41,32,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,102,114,97,109,101,32,99,111,117,110,116,32,102,111,114,32,102,111,114,109,97,116,32,99,111,110,118,101,114,115,105,111,110,0,76,111,97,100,83,111,117,110,100,70,114,111,109,87,97,118,101,40,41,32,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,97,117,100,105,111,32,98,117,102,102,101,114,0,76,111,97,100,83,111,117,110,100,70,114,111,109,87,97,118,101,40,41,32,58,32,70,111,114,109,97,116,32,99,111,110,118,101,114,115,105,111,110,32,102,97,105,108,101,100,0,91,83,78,68,32,73,68,32,37,105,93,91,66,85,70,82,32,73,68,32,37,105,93,32,85,110,108,111,97,100,101,100,32,115,111,117,110,100,32,100,97,116,97,32,102,114,111,109,32,82,65,77,0,69,88,84,0,65,82,66,0,79,69,83,0,65,78,71,76,69,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,0,103,108,85,115,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,103,108,85,115,101,80,114,111,103,114,97,109,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,79,98,106,101,99,116,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,0,103,108,65,116,116,97,99,104,79,98,106,101,99,116,0,103,108,65,116,116,97,99,104,83,104,97,100,101,114,0,103,108,68,101,116,97,99,104,79,98,106,101,99,116,0,103,108,68,101,116,97,99,104,83,104,97,100,101,114,0,103,108,80,105,120,101,108,83,116,111,114,101,105,0,103,108,71,101,116,83,116,114,105,110,103,0,103,108,71,101,116,73,110,116,101,103,101,114,118,0,103,108,71,101,116,70,108,111,97,116,118,0,103,108,71,101,116,66,111,111,108,101,97,110,118,0,103,108,71,101,110,84,101,120,116,117,114,101,115,0,103,108,68,101,108,101,116,101,84,101,120,116,117,114,101,115,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,73,109,97,103,101,50,68,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,84,101,120,73,109,97,103,101,50,68,0,103,108,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,82,101,97,100,80,105,120,101,108,115,0,103,108,66,105,110,100,84,101,120,116,117,114,101,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,84,101,120,116,117,114,101,0,103,108,71,101,110,66,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,66,117,102,102,101,114,115,0,103,108,71,101,116,66,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,103,108,66,117,102,102,101,114,68,97,116,97,0,103,108,66,117,102,102,101,114,83,117,98,68,97,116,97,0,103,108,73,115,66,117,102,102,101,114,0,103,108,71,101,110,82,101,110,100,101,114,98,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,82,101,110,100,101,114,98,117,102,102,101,114,115,0,103,108,66,105,110,100,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,71,101,116,82,101,110,100,101,114,98,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,71,101,116,85,110,105,102,111,114,109,102,118,0,103,108,71,101,116,85,110,105,102,111,114,109,105,118,0,103,108,71,101,116,85,110,105,102,111,114,109,76,111,99,97,116,105,111,110,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,102,118,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,105,118,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,118,0,103,108,71,101,116,65,99,116,105,118,101,85,110,105,102,111,114,109,0,103,108,85,110,105,102,111,114,109,49,102,0,103,108,85,110,105,102,111,114,109,50,102,0,103,108,85,110,105,102,111,114,109,51,102,0,103,108,85,110,105,102,111,114,109,52,102,0,103,108,85,110,105,102,111,114,109,49,105,0,103,108,85,110,105,102,111,114,109,50,105,0,103,108,85,110,105,102,111,114,109,51,105,0,103,108,85,110,105,102,111,114,109,52,105,0,103,108,85,110,105,102,111,114,109,49,105,118,0,103,108,85,110,105,102,111,114,109,50,105,118,0,103,108,85,110,105,102,111,114,109,51,105,118,0,103,108,85,110,105,102,111,114,109,52,105,118,0,103,108,85,110,105,102,111,114,109,49,102,118,0,103,108,85,110,105,102,111,114,109,50,102,118,0,103,108,85,110,105,102,111,114,109,51,102,118,0,103,108,85,110,105,102,111,114,109,52,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,50,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,51,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,52,102,118,0,103,108,66,105,110,100,66,117,102,102,101,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,118,0,103,108,71,101,116,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,103,108,71,101,116,65,99,116,105,118,101,65,116,116,114,105,98,0,103,108,68,101,108,101,116,101,83,104,97,100,101,114,0,103,108,71,101,116,65,116,116,97,99,104,101,100,83,104,97,100,101,114,115,0,103,108,83,104,97,100,101,114,83,111,117,114,99,101,0,103,108,71,101,116,83,104,97,100,101,114,83,111,117,114,99,101,0,103,108,67,111,109,112,105,108,101,83,104,97,100,101,114,0,103,108,71,101,116,83,104,97,100,101,114,73,110,102,111,76,111,103,0,103,108,71,101,116,83,104,97,100,101,114,105,118,0,103,108,71,101,116,80,114,111,103,114,97,109,105,118,0,103,108,73,115,83,104,97,100,101,114,0,103,108,68,101,108,101,116,101,80,114,111,103,114,97,109,0,103,108,71,101,116,83,104,97,100,101,114,80,114,101,99,105,115,105,111,110,70,111,114,109,97,116,0,103,108,76,105,110,107,80,114,111,103,114,97,109,0,103,108,71,101,116,80,114,111,103,114,97,109,73,110,102,111,76,111,103,0,103,108,86,97,108,105,100,97,116,101,80,114,111,103,114,97,109,0,103,108,73,115,80,114,111,103,114,97,109,0,103,108,66,105,110,100,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,103,108,66,105,110,100,70,114,97,109,101,98,117,102,102,101,114,0,103,108,71,101,110,70,114,97,109,101,98,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,70,114,97,109,101,98,117,102,102,101,114,115,0,103,108,70,114,97,109,101,98,117,102,102,101,114,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,70,114,97,109,101,98,117,102,102,101,114,84,101,120,116,117,114,101,50,68,0,103,108,71,101,116,70,114,97,109,101,98,117,102,102,101,114,65,116,116,97,99,104,109,101,110,116,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,70,114,97,109,101,98,117,102,102,101,114,0,103,108,68,101,108,101,116,101,79,98,106,101,99,116,0,103,108,71,101,116,79,98,106,101,99,116,80,97,114,97,109,101,116,101,114,105,118,0,103,108,71,101,116,73,110,102,111,76,111,103,0,103,108,66,105,110,100,80,114,111,103,114,97,109,0,103,108,71,101,116,80,111,105,110,116,101,114,118,0,103,108,68,114,97,119,82,97,110,103,101,69,108,101,109,101,110,116,115,0,103,108,69,110,97,98,108,101,67,108,105,101,110,116,83,116,97,116,101,0,103,108,86,101,114,116,101,120,80,111,105,110,116,101,114,0,103,108,84,101,120,67,111,111,114,100,80,111,105,110,116,101,114,0,103,108,78,111,114,109,97,108,80,111,105,110,116,101,114,0,103,108,67,111,108,111,114,80,111,105,110,116,101,114,0,103,108,67,108,105,101,110,116,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,0,103,108,77,97,116,114,105,120,77,111,100,101,0,103,108,76,111,97,100,73,100,101,110,116,105,116,121,0,103,108,76,111,97,100,77,97,116,114,105,120,102,0,103,108,70,114,117,115,116,117,109,0,103,108,82,111,116,97,116,101,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,0,103,108,69,110,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,103,108,68,105,115,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,103,108,68,114,97,119,65,114,114,97,121,115,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,0,103,108,83,104,97,100,101,114,66,105,110,97,114,121,0,103,108,82,101,108,101,97,115,101,83,104,97,100,101,114,67,111,109,112,105,108,101,114,0,103,108,71,101,116,69,114,114,111,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,68,105,118,105,115,111,114,0,103,108,68,114,97,119,65,114,114,97,121,115,73,110,115,116,97,110,99,101,100,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,73,110,115,116,97,110,99,101,100,0,103,108,70,105,110,105,115,104,0,103,108,70,108,117,115,104,0,103,108,67,108,101,97,114,68,101,112,116,104,0,103,108,67,108,101,97,114,68,101,112,116,104,102,0,103,108,68,101,112,116,104,70,117,110,99,0,103,108,69,110,97,98,108,101,0,103,108,68,105,115,97,98,108,101,0,103,108,70,114,111,110,116,70,97,99,101,0,103,108,67,117,108,108,70,97,99,101,0,103,108,67,108,101,97,114,0,103,108,76,105,110,101,87,105,100,116,104,0,103,108,67,108,101,97,114,83,116,101,110,99,105,108,0,103,108,68,101,112,116,104,77,97,115,107,0,103,108,83,116,101,110,99,105,108,77,97,115,107,0,103,108,67,104,101,99,107,70,114,97,109,101,98,117,102,102,101,114,83,116,97,116,117,115,0,103,108,71,101,110,101,114,97,116,101,77,105,112,109,97,112,0,103,108,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,0,103,108,73,115,69,110,97,98,108,101,100,0,103,108,66,108,101,110,100,70,117,110,99,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,83,101,112,97,114,97,116,101,0,103,108,68,101,112,116,104,82,97,110,103,101,0,103,108,68,101,112,116,104,82,97,110,103,101,102,0,103,108,83,116,101,110,99,105,108,77,97,115,107,83,101,112,97,114,97,116,101,0,103,108,72,105,110,116,0,103,108,80,111,108,121,103,111,110,79,102,102,115,101,116,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,0,103,108,83,97,109,112,108,101,67,111,118,101,114,97,103,101,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,0,103,108,83,116,101,110,99,105,108,70,117,110,99,0,103,108,83,116,101,110,99,105,108,79,112,0,103,108,86,105,101,119,112,111,114,116,0,103,108,67,108,101,97,114,67,111,108,111,114,0,103,108,83,99,105,115,115,111,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,0,103,108,67,111,108,111,114,77,97,115,107,0,103,108,82,101,110,100,101,114,98,117,102,102,101,114,83,116,111,114,97,103,101,0,103,108,66,108,101,110,100,70,117,110,99,83,101,112,97,114,97,116,101,0,103,108,66,108,101,110,100,67,111,108,111,114,0,103,108,83,116,101,110,99,105,108,70,117,110,99,83,101,112,97,114,97,116,101,0,103,108,83,116,101,110,99,105,108,79,112,83,101,112,97,114,97,116,101,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,0,103,108,67,111,112,121,84,101,120,73,109,97,103,101,50,68,0,103,108,67,111,112,121,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,68,114,97,119,66,117,102,102,101,114,115,0,77,111,100,117,108,101,46,112,114,105,110,116,69,114,114,40,39,98,97,100,32,110,97,109,101,32,105,110,32,103,101,116,80,114,111,99,65,100,100,114,101,115,115,58,32,39,32,43,32,91,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,41,44,32,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,49,41,93,41,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},tempFixedLengthArray:[],packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        // For functions such as glDrawBuffers, glInvalidateFramebuffer and glInvalidateSubFramebuffer that need to pass a short array to the WebGL API,
        // create a set of short fixed-length arrays to avoid having to generate any garbage when calling those functions.
        for (var i = 0; i < 32; i++) {
          GL.tempFixedLengthArray.push(new Array(i));
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes['majorVersion'] === 'undefined' && typeof webGLContextAttributes['minorVersion'] === 'undefined') {
          webGLContextAttributes['majorVersion'] = 1;
          webGLContextAttributes['minorVersion'] = 0;
        }
  
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes['majorVersion'] == 1 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes['majorVersion'] == 2 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes['majorVersion'],
          GLctx: ctx
        };
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes['enableExtensionsByDefault']) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod", "EXT_color_buffer_float"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc != null)
          {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }

   

  
  
  function _emscripten_get_now() { abort() }
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              window.postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else window.postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        Module['dynCall_vii'](GLFW.active.charFunc, GLFW.active.id, charCode);
      },onKeyChanged:function (keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        Module['dynCall_viiiii'](GLFW.active.keyFunc, GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function (event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function (event) {
        GLFW.refreshJoysticks();
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function (event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        Module['dynCall_vidd'](GLFW.active.cursorPosFunc, GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function (event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Module['dynCall_vii'](GLFW.active.cursorEnterFunc, GLFW.active.id, 1);
      },onMouseleave:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Module['dynCall_vii'](GLFW.active.cursorEnterFunc, GLFW.active.id, 0);
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        Module['dynCall_viiii'](GLFW.active.mouseButtonFunc, GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        Module['dynCall_vidd'](GLFW.active.scrollFunc, GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function (width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requestiong fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        Module['dynCall_viii'](GLFW.active.windowSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        Module['dynCall_viii'](GLFW.active.framebufferSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },requestFullscreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },requestFullScreen:function () {
        Module.printErr('GLFW.requestFullScreen() is deprecated. Please call GLFW.requestFullscreen instead.');
        GLFW.requestFullScreen = function() {
          return GLFW.requestFullscreen();
        }
        return GLFW.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        Module.printErr('GLFW.cancelFullScreen() is deprecated. Please call GLFW.exitFullscreen instead.');
        GLFW.cancelFullScreen = function() {
          return GLFW.exitFullscreen();
        }
        return GLFW.exitFullscreen();
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function (cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function () {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setDropCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.dropFunc = cbfun;
      },onDrop:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = allocate(new Array(event.dataTransfer.files.length*4), 'i8*', ALLOC_NORMAL);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = function(e) {
            if (reader.readyState != 2) { // not DONE
              ++written;
              console.log('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data), { encoding: 'binary' });
            if (++written === count) {
              Module['dynCall_viii'](GLFW.active.dropFunc, GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocate(intArrayFromString(path), 'i8', ALLOC_NORMAL);
          filenamesArray.push(filename);
          setValue(filenames + i*4, filename, 'i8*');
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
       
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },onClickRequestPointerLock:function (e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function (winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullscreen();
          } else {
            GLFW.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        Module['dynCall_viii'](win.windowSizeFunc, win.id, width, height);
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS 
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          Module['dynCall_vi'](win.windowCloseFunc, win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwGetVideoModes(monitor, count) {
      setValue(count, 0, 'i32');
      return 0;
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glUniform3iv(location, count, value) {
  
  
      GLctx.uniform3iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*12)>>2));
    }

  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _pthread_mutex_init() {}

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      GLFW.setScrollCallback(winid, cbfun);
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glFrustum() {
  Module['printErr']('missing function: emscripten_glFrustum'); abort(-1);
  }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  var DLFCN={error:null,errorMsg:null,loadedLibs:{},loadedLibNames:{}};function _dlclose(handle) {
      // int dlclose(void *handle);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlclose.html
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlclose() unopened handle: ' + handle;
        return 1;
      } else {
        var lib_record = DLFCN.loadedLibs[handle];
        if (--lib_record.refcount == 0) {
          if (lib_record.module.cleanups) {
            lib_record.module.cleanups.forEach(function(cleanup) { cleanup() });
          }
          delete DLFCN.loadedLibNames[lib_record.name];
          delete DLFCN.loadedLibs[handle];
        }
        return 0;
      }
    }

  
  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,lastGamepadState:null,lastGamepadStateFrame:null,numGamepadsConnected:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,staticInit:function () {
        if (typeof window !== 'undefined') {
          window.addEventListener("gamepadconnected", function() { ++JSEvents.numGamepadsConnected; });
          window.addEventListener("gamepaddisconnected", function() { --JSEvents.numGamepadsConnected; });
          
          // Chromium does not fire the gamepadconnected event on reload, so we need to get the number of gamepads here as a workaround.
          // See https://bugs.chromium.org/p/chromium/issues/detail?id=502824
          var firstState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null);
          if (firstState) {
            JSEvents.numGamepadsConnected = firstState.length;
          }
        }
      },registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
        __ATEXIT__.push(function() {
            for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
              JSEvents._removeHandler(i);
            }
           });
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        if (target) {
          if (typeof target == "number") {
            target = Pointer_stringify(target);
          }
          if (target == '#window') return window;
          else if (target == '#document') return document;
          else if (target == '#screen') return window.screen;
          else if (target == '#canvas') return Module['canvas'];
  
          if (typeof target == 'string') return document.getElementById(target);
          else return target;
        } else {
          // The sensible target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          return window;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
          JSEvents.keyEvent = _malloc( 164 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
          stringToUTF8(e.key ? e.key : "", JSEvents.keyEvent + 0, 32);
          stringToUTF8(e.code ? e.code : "", JSEvents.keyEvent + 32, 32);
          HEAP32[(((JSEvents.keyEvent)+(64))>>2)]=e.location;
          HEAP32[(((JSEvents.keyEvent)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((JSEvents.keyEvent)+(72))>>2)]=e.shiftKey;
          HEAP32[(((JSEvents.keyEvent)+(76))>>2)]=e.altKey;
          HEAP32[(((JSEvents.keyEvent)+(80))>>2)]=e.metaKey;
          HEAP32[(((JSEvents.keyEvent)+(84))>>2)]=e.repeat;
          stringToUTF8(e.locale ? e.locale : "", JSEvents.keyEvent + 88, 32);
          stringToUTF8(e.char ? e.char : "", JSEvents.keyEvent + 120, 32);
          HEAP32[(((JSEvents.keyEvent)+(152))>>2)]=e.charCode;
          HEAP32[(((JSEvents.keyEvent)+(156))>>2)]=e.keyCode;
          HEAP32[(((JSEvents.keyEvent)+(160))>>2)]=e.which;
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.keyEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;        
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/kripken/emscripten/pull/4997
        // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
        if (e.type !== 'wheel' && e.type !== 'mousewheel') {
          JSEvents.previousScreenX = e.screenX;
          JSEvents.previousScreenY = e.screenY;
        }
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
          JSEvents.mouseEvent = _malloc( 72 );
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.mouseEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
          JSEvents.wheelEvent = _malloc( 104 );
        }
        target = JSEvents.findEventTarget(target);
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=e["deltaMode"];
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"] || 0;
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-(e["wheelDeltaY"] ? e["wheelDeltaY"] : e["wheelDelta"]) /* 1. Invert to unify direction with the DOM Level 3 wheel event. 2. MSIE does not provide wheelDeltaY, so wheelDelta is used as a fallback. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
          JSEvents.uiEvent = _malloc( 36 );
        }
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
          HEAP32[((JSEvents.uiEvent)>>2)]=e.detail;
          HEAP32[(((JSEvents.uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((JSEvents.uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((JSEvents.uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((JSEvents.uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((JSEvents.uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((JSEvents.uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((JSEvents.uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((JSEvents.uiEvent)+(32))>>2)]=scrollPos[1];
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.uiEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
          JSEvents.focusEvent = _malloc( 256 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
          stringToUTF8(nodeName, JSEvents.focusEvent + 0, 128);
          stringToUTF8(id, JSEvents.focusEvent + 128, 128);
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.focusEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
          JSEvents.deviceOrientationEvent = _malloc( 40 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(8))>>3)]=e.alpha;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(16))>>3)]=e.beta;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(24))>>3)]=e.gamma;
          HEAP32[(((JSEvents.deviceOrientationEvent)+(32))>>2)]=e.absolute;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceOrientationEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
          JSEvents.deviceMotionEvent = _malloc( 80 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceMotionEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceMotionEvent)+(8))>>3)]=e.acceleration.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(16))>>3)]=e.acceleration.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(24))>>3)]=e.acceleration.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(32))>>3)]=e.accelerationIncludingGravity.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(40))>>3)]=e.accelerationIncludingGravity.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(48))>>3)]=e.accelerationIncludingGravity.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(56))>>3)]=e.rotationRate.alpha;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(64))>>3)]=e.rotationRate.beta;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(72))>>3)]=e.rotationRate.gamma;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceMotionEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
          JSEvents.orientationChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.orientationChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        stringToUTF8(nodeName, eventStruct + 8, 128);
        stringToUTF8(id, eventStruct + 136, 128);
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
          JSEvents.fullscreenChangeEvent = _malloc( 280 );
        }
  
        if (!target) {
          target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.fullscreenChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          target.width = cssWidth * dpiScale;
          target.height = cssHeight * dpiScale;
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Module['dynCall_iiii'](strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        stringToUTF8(nodeName, eventStruct + 4, 128);
        stringToUTF8(id, eventStruct + 132, 128);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
          JSEvents.pointerlockChangeEvent = _malloc( 260 );
        }
  
        if (!target) {
          target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.pointerlockChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerPointerlockErrorEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = document; // Pointer lock events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
          JSEvents.visibilityChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.visibilityChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
          JSEvents.touchEvent = _malloc( 1684 );
        }
  
        target = JSEvents.findEventTarget(target);
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
          
          var ptr = JSEvents.touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((JSEvents.touchEvent)>>2)]=numTouches;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.touchEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        stringToUTF8(e.id, eventStruct + 1304, 64);
        stringToUTF8(e.mapping, eventStruct + 1368, 64);
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
          JSEvents.gamepadEvent = _malloc( 1432 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.gamepadEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var confirmationMessage = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
          JSEvents.batteryEvent = _malloc( 32 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.batteryEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = Module['canvas'];
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};function __emscripten_sample_gamepad_data() {
      // Polling gamepads generates garbage, so don't do it when we know there are no gamepads connected.
      if (!JSEvents.numGamepadsConnected) return;
  
      // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
      if (Browser.mainLoop.currentFrameNumber !== JSEvents.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
        JSEvents.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
        JSEvents.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
      }
    }function _emscripten_get_gamepad_status(index, gamepadState) {
      __emscripten_sample_gamepad_data();
      if (!JSEvents.lastGamepadState) return -1;
  
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      JSEvents.fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    }

  var _llvm_pow_f64=Math_pow;

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  
  
  
  
  
  
  
  
  function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = SDL.makeFontString(h, fontData.name);
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      // use bottom alligment, because it works 
      // same in all browsers, more info here:
      // https://bugzilla.mozilla.org/show_bug.cgi?id=737852
      surfData.ctx.textBaseline = 'bottom';
      surfData.ctx.fillText(text, 0, h|0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Module['dynCall_v'](SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        var cleanup = function() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        }
        var addCleanup = function(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        var callStbImage = function(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 2) {
            // grayscale + alpha
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var gray = HEAPU8[((sourcePtr++)>>0)];
              var alpha = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = gray;
              data[destPtr++] = gray;
              data[destPtr++] = gray;
              data[destPtr++] = alpha;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,eventHandlerTemp:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39,224:1251},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
        // Canvas screens are always RGBA.
        var format = HEAP32[((fmt)>>2)];
        if (format != -2042224636) {
          Runtime.warnOnce('Unsupported pixel format!');
        }
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0),
          alpha: (SDL.glAttributes[3 /*SDL_GL_ALPHA_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (firstTouch) {
              if (event.type == 'touchstart') {
                SDL.DOMButtons[0] = 1;
              }
              var mouseEventType;
              switch(event.type) {
                case 'touchstart': mouseEventType = 'mousedown'; break;
                case 'touchmove': mouseEventType = 'mousemove'; break;
              }
              var mouseEvent = {
                type: mouseEventType,
                button: 0,
                pageX: firstTouch.clientX,
                pageY: firstTouch.clientY
              };
              SDL.events.push(mouseEvent);
            }
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullscreen'](/*lockPointer=*/true, /*resizeCanvas=*/true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        while (SDL.pollEvent(SDL.eventHandlerTemp)) {
          Module['dynCall_iii'](SDL.eventHandler, SDL.eventHandlerContext, SDL.eventHandlerTemp);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },makeFontString:function (height, fontName) {
        if (fontName.charAt(0) != "'" && fontName.charAt(0) != '"') {
          // https://developer.mozilla.org/ru/docs/Web/CSS/font-family
          // Font family names containing whitespace should be quoted.
          // BTW, quote all font names is easier than searching spaces
          fontName = '"' + fontName + '"';
        }
        return height + 'px ' + fontName + ', serif';
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = SDL.makeFontString(h, fontData.name);
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          // avoid Chrome bug
          // If posz = 0, the sound will come from only the right.
          // By posz = -0.5 (slightly ahead), the sound will come from right and left correctly.
          audio.webAudioPannerNode["setPosition"](0, 0, -.5);
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop(0); // 0 is a default parameter, but WebKit is confused by it #3861
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button['pressed'];
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // If joystick was removed, state returns null.
          if (typeof state === 'undefined') return;
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Make sure value is properly clamped
        value = Math.min(1, Math.max(value, -1));
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }

  function _pthread_cond_wait() { return 0; }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glGetObjectParameterivARB() {
  Module['printErr']('missing function: emscripten_glGetObjectParameterivARB'); abort(-1);
  }

  function _emscripten_glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

   

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _emscripten_glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

   

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _emscripten_set_touchcancel_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel");
      return 0;
    }

  function ___lock() {}

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }

  function _emscripten_glNormalPointer() {
  Module['printErr']('missing function: emscripten_glNormalPointer'); abort(-1);
  }

  
  var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,stringCache:{},setErrorCode:function (code) {
        EGL.errorCode = code;
      },chooseConfig:function (display, attribList, config, config_size, numConfigs) { 
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
        // TODO: read attribList.
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)]=1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAP32[((config)>>2)]=62002; 
        }
        
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_get_pointerlock_status(pointerlockStatus) {
      if (pointerlockStatus) JSEvents.fillPointerlockChangeEventData(pointerlockStatus);
      if (!document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
      return 0;
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glfwGetPrimaryMonitor() {
      return 1;
    }

  
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)]=data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          case 'FloatToInteger': HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'FloatToInteger': HEAP32[(((params)+(i*4))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'Float');
    }

  function _emscripten_set_touchstart_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart");
      return 0;
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glVertexPointer(){ throw 'Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'FloatToInteger');
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _emscripten_glEnableClientState() {
  Module['printErr']('missing function: emscripten_glEnableClientState'); abort(-1);
  }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

   

   

  function _SDL_QuitSubSystem(flags) {
      Module.print('SDL_QuitSubSystem called (and ignored)');
    }

  function _emscripten_set_touchend_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend");
      return 0;
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }

  function _emscripten_glFinish() { GLctx['finish']() }

  function _emscripten_glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _emscripten_get_num_gamepads() {
      // Polling gamepads generates garbage, so don't do it when we know there are no gamepads connected.
      if (!JSEvents.numGamepadsConnected) return 0;
  
      __emscripten_sample_gamepad_data();
      if (!JSEvents.lastGamepadState) return -1;
      return JSEvents.lastGamepadState.length;
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glUniform4iv(location, count, value) {
  
  
      GLctx.uniform4iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*16)>>2));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glLoadIdentity(){ throw 'Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glUniform3fv(location, count, value) {
  
  
      var view;
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _emscripten_glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
    }function _glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
      if (!target) target = '#canvas';
      target = JSEvents.findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock && !target.mozRequestPointerLock && !target.webkitRequestPointerLock && !target.msRequestPointerLock) {
        return -1;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents.requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return JSEvents.requestPointerLock(target);
    }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _emscripten_glColorPointer() {
  Module['printErr']('missing function: emscripten_glColorPointer'); abort(-1);
  }

  function _glfwDefaultWindowHints() {
      GLFW.hints = GLFW.defaultHints;
    }

  function _emscripten_glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _pthread_mutex_destroy() {}

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _emscripten_glCullFace(x0) { GLctx['cullFace'](x0) }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _emscripten_glHint(x0, x1) { GLctx['hint'](x0, x1) }

  function _emscripten_glUniform2fv(location, count, value) {
  
  
      var view;
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glMatrixMode(){ throw 'Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _abort() {
      Module['abort']();
    }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glUniform2iv(location, count, value) {
  
  
      GLctx.uniform2iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*8)>>2));
    }

  function _emscripten_glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  var _emscripten_asm_const_int=true;

  function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Integer');
    }

  function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }


  function _emscripten_glGetPointerv() {
  Module['printErr']('missing function: emscripten_glGetPointerv'); abort(-1);
  }

  function _emscripten_glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDepthRange(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_set_fullscreenchange_callback(target, userData, useCapture, callbackfunc) {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      if (!target) target = document;
      else {
        target = JSEvents.findEventTarget(target);
        if (!target) return -4;
      }
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange");
      return 0;
    }

  function _pthread_join() {}

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glUniform1fv(location, count, value) {
  
  
      var view;
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_set_gamepaddisconnected_callback(userData, useCapture, callbackfunc) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 27, "gamepaddisconnected");
      return 0;
   }

  function _emscripten_glBindProgramARB() {
  Module['printErr']('missing function: emscripten_glBindProgramARB'); abort(-1);
  }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glLineWidth(x0) { GLctx['lineWidth'](x0) }

  function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _emscripten_glRotatef() {
  Module['printErr']('missing function: emscripten_glRotatef'); abort(-1);
  }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats.length;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else if (result instanceof WebGLBuffer ||
                       result instanceof WebGLProgram ||
                       result instanceof WebGLFramebuffer ||
                       result instanceof WebGLRenderbuffer ||
                       result instanceof WebGLTexture) {
              ret = result.name | 0;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      HEAP32[((params)>>2)]=result;
    }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _emscripten_glClientActiveTexture() {
  Module['printErr']('missing function: emscripten_glClientActiveTexture'); abort(-1);
  }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx['isEnabled'](x0) }

  function _glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

   

  function _emscripten_glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Float');
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          var program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          var program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _emscripten_exit_pointerlock() {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(JSEvents.requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else if (document.msExitPointerLock) {
        document.msExitPointerLock();
      } else if (document.mozExitPointerLock) {
        document.mozExitPointerLock();
      } else if (document.webkitExitPointerLock) {
        document.webkitExitPointerLock();
      } else {
        return -1;
      }
      return 0;
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        assert(id !== -1, 'shader not bound to local id');
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _emscripten_glUniform1iv(location, count, value) {
  
  
      GLctx.uniform1iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*4)>>2));
    }

  function _emscripten_glTexCoordPointer() {
  Module['printErr']('missing function: emscripten_glTexCoordPointer'); abort(-1);
  }

  function _emscripten_glGetInfoLogARB() {
  Module['printErr']('missing function: emscripten_glGetInfoLogARB'); abort(-1);
  }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _glfwSetCursorPosCallback(winid, cbfun) {
      GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glIsProgram(program) {
      var program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

   

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  
  
      var view;
      if (9*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }

  function _emscripten_glUniform4fv(location, count, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _glfwSetWindowIconifyCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.windowIconifyFunc = cbfun;
    }

  function _emscripten_glDrawRangeElements() {
  Module['printErr']('missing function: emscripten_glDrawRangeElements'); abort(-1);
  }

  function _emscripten_glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glDeleteObjectARB() {
  Module['printErr']('missing function: emscripten_glDeleteObjectARB'); abort(-1);
  }

  function _emscripten_set_touchmove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove");
      return 0;
    }

  function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _pthread_create() {
      return 11;
    }

  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glClearDepth(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_set_keypress_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress");
      return 0;
    }

  function _glfwSetCharCallback(winid, cbfun) {
      GLFW.setCharCallback(winid, cbfun);
    }

  function _emscripten_glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _SDL_InitSubSystem(flags) { return 0 }

  function _emscripten_glEnable(x0) { GLctx['enable'](x0) }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.cursorEnterFunc = cbfun;
    }

   

  function _glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_glDrawBuffers(n, bufs) {
  
      var bufArray = GL.tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }

   

  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _emscripten_glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

   

  function _pthread_cond_signal() { return 0; }


  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      if (bufSize > 0 && source) {
        var numBytesWrittenExclNull = stringToUTF8(result, source, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

   

  function _emscripten_set_click_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click");
      return 0;
    }

  function _SDL_OpenAudio(desired, obtained) {
      try {
        SDL.audio = {
          freq: HEAPU32[((desired)>>2)],
          format: HEAPU16[(((desired)+(4))>>1)],
          channels: HEAPU8[(((desired)+(6))>>0)],
          samples: HEAPU16[(((desired)+(8))>>1)], // Samples in the CB buffer per single sound channel.
          callback: HEAPU32[(((desired)+(16))>>2)],
          userdata: HEAPU32[(((desired)+(20))>>2)],
          paused: true,
          timer: null
        };
        // The .silence field tells the constant sample value that corresponds to the safe un-skewed silence value for the wave data.
        if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
          SDL.audio.silence = 128; // Audio ranges in [0, 255], so silence is half-way in between.
        } else if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
          SDL.audio.silence = 0; // Signed data in range [-32768, 32767], silence is 0.
        } else {
          throw 'Invalid SDL audio format ' + SDL.audio.format + '!';
        }
        // Round the desired audio frequency up to the next 'common' frequency value.
        // Web Audio API spec states 'An implementation must support sample-rates in at least the range 22050 to 96000.'
        if (SDL.audio.freq <= 0) {
          throw 'Unsupported sound frequency ' + SDL.audio.freq + '!';
        } else if (SDL.audio.freq <= 22050) {
          SDL.audio.freq = 22050; // Take it safe and clamp everything lower than 22kHz to that.
        } else if (SDL.audio.freq <= 32000) {
          SDL.audio.freq = 32000;
        } else if (SDL.audio.freq <= 44100) {
          SDL.audio.freq = 44100;
        } else if (SDL.audio.freq <= 48000) {
          SDL.audio.freq = 48000;
        } else if (SDL.audio.freq <= 96000) {
          SDL.audio.freq = 96000;
        } else {
          throw 'Unsupported sound frequency ' + SDL.audio.freq + '!';
        }
        if (SDL.audio.channels == 0) {
          SDL.audio.channels = 1; // In SDL both 0 and 1 mean mono.
        } else if (SDL.audio.channels < 0 || SDL.audio.channels > 32) {
          throw 'Unsupported number of audio channels for SDL audio: ' + SDL.audio.channels + '!';
        } else if (SDL.audio.channels != 1 && SDL.audio.channels != 2) { // Unsure what SDL audio spec supports. Web Audio spec supports up to 32 channels.
          console.log('Warning: Using untested number of audio channels ' + SDL.audio.channels);
        }
        if (SDL.audio.samples < 128 || SDL.audio.samples > 524288 /* arbitrary cap */) {
          throw 'Unsupported audio callback buffer size ' + SDL.audio.samples + '!';
        } else if ((SDL.audio.samples & (SDL.audio.samples-1)) != 0) {
          throw 'Audio callback buffer size ' + SDL.audio.samples + ' must be a power-of-two!';
        }
        
        var totalSamples = SDL.audio.samples*SDL.audio.channels;
        SDL.audio.bytesPerSample = (SDL.audio.format == 0x0008 /*AUDIO_U8*/ || SDL.audio.format == 0x8008 /*AUDIO_S8*/) ? 1 : 2;
        SDL.audio.bufferSize = totalSamples*SDL.audio.bytesPerSample;
        SDL.audio.bufferDurationSecs = SDL.audio.bufferSize / SDL.audio.bytesPerSample / SDL.audio.channels / SDL.audio.freq; // Duration of a single queued buffer in seconds.
        SDL.audio.bufferingDelay = 50 / 1000; // Audio samples are played with a constant delay of this many seconds to account for browser and jitter.
        SDL.audio.buffer = _malloc(SDL.audio.bufferSize);
        
        // To account for jittering in frametimes, always have multiple audio buffers queued up for the audio output device.
        // This helps that we won't starve that easily if a frame takes long to complete.
        SDL.audio.numSimultaneouslyQueuedBuffers = Module['SDL_numSimultaneouslyQueuedBuffers'] || 5;
  
        // Pulls and queues new audio data if appropriate. This function gets "over-called" in both requestAnimationFrames and
        // setTimeouts to ensure that we get the finest granularity possible and as many chances from the browser to fill
        // new audio data. This is because setTimeouts alone have very poor granularity for audio streaming purposes, but also
        // the application might not be using emscripten_set_main_loop to drive the main loop, so we cannot rely on that alone.
        SDL.audio.queueNewAudioData = function SDL_queueNewAudioData() {
          if (!SDL.audio) return;
  
          for(var i = 0; i < SDL.audio.numSimultaneouslyQueuedBuffers; ++i) {
            // Only queue new data if we don't have enough audio data already in queue. Otherwise skip this time slot
            // and wait to queue more in the next time the callback is run.
            var secsUntilNextPlayStart = SDL.audio.nextPlayTime - SDL.audioContext['currentTime'];
            if (secsUntilNextPlayStart >= SDL.audio.bufferingDelay + SDL.audio.bufferDurationSecs*SDL.audio.numSimultaneouslyQueuedBuffers) return;
  
            // Ask SDL audio data from the user code.
            Module['dynCall_viii'](SDL.audio.callback, SDL.audio.userdata, SDL.audio.buffer, SDL.audio.bufferSize);
            // And queue it to be played after the currently playing audio stream.
            SDL.audio.pushAudio(SDL.audio.buffer, SDL.audio.bufferSize);
          }
        } 
  
  
        // Create a callback function that will be routinely called to ask more audio data from the user application.
        SDL.audio.caller = function SDL_audioCaller() {
          if (!SDL.audio) return;
  
          --SDL.audio.numAudioTimersPending;
  
          SDL.audio.queueNewAudioData();
  
          // Queue this callback function to be called again later to pull more audio data.
          var secsUntilNextPlayStart = SDL.audio.nextPlayTime - SDL.audioContext['currentTime'];
  
          // Queue the next audio frame push to be performed half-way when the previously queued buffer has finished playing.
          var preemptBufferFeedSecs = SDL.audio.bufferDurationSecs/2.0;
  
          if (SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
            ++SDL.audio.numAudioTimersPending;
            SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, Math.max(0.0, 1000.0*(secsUntilNextPlayStart-preemptBufferFeedSecs)));
  
            // If we are risking starving, immediately queue an extra buffer.
            if (SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
              ++SDL.audio.numAudioTimersPending;
              Browser.safeSetTimeout(SDL.audio.caller, 1.0);
            }
          }
        };
        
        SDL.audio.audioOutput = new Audio();
  
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        SDL.openAudioContext();
        if (!SDL.audioContext) throw 'Web Audio API is not available!';
        SDL.audio.nextPlayTime = 0; // Time in seconds when the next audio block is due to start.
        
        // The pushAudio function with a new audio buffer whenever there is new audio data to schedule to be played back on the device.
        SDL.audio.pushAudio=function(ptr,sizeBytes) {
          try {
            if (SDL.audio.paused) return;
  
            var sizeSamples = sizeBytes / SDL.audio.bytesPerSample; // How many samples fit in the callback buffer?
            var sizeSamplesPerChannel = sizeSamples / SDL.audio.channels; // How many samples per a single channel fit in the cb buffer?
            if (sizeSamplesPerChannel != SDL.audio.samples) {
              throw 'Received mismatching audio buffer size!';
            }
            // Allocate new sound buffer to be played.
            var source = SDL.audioContext['createBufferSource']();
            var soundBuffer = SDL.audioContext['createBuffer'](SDL.audio.channels,sizeSamplesPerChannel,SDL.audio.freq);
            source['connect'](SDL.audioContext['destination']);
  
            SDL.fillWebAudioBufferFromHeap(ptr, sizeSamplesPerChannel, soundBuffer);
            // Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=883675 by setting the buffer only after filling. The order is important here!
            source['buffer'] = soundBuffer;
            
            // Schedule the generated sample buffer to be played out at the correct time right after the previously scheduled
            // sample buffer has finished.
            var curtime = SDL.audioContext['currentTime'];
            if (curtime > SDL.audio.nextPlayTime && SDL.audio.nextPlayTime != 0) {
              console.log('warning: Audio callback had starved sending audio by ' + (curtime - SDL.audio.nextPlayTime) + ' seconds.');
            }
            // Don't ever start buffer playbacks earlier from current time than a given constant 'SDL.audio.bufferingDelay', since a browser 
            // may not be able to mix that audio clip in immediately, and there may be subsequent jitter that might cause the stream to starve.
            var playtime = Math.max(curtime + SDL.audio.bufferingDelay, SDL.audio.nextPlayTime);
            if (typeof source['start'] !== 'undefined') {
              source['start'](playtime); // New Web Audio API: sound sources are started with a .start() call.
            } else if (typeof source['noteOn'] !== 'undefined') {
              source['noteOn'](playtime); // Support old Web Audio API specification which had the .noteOn() API.
            }
            /*
            // Uncomment to debug SDL buffer feed starves.
            if (SDL.audio.curBufferEnd) {
              var thisBufferStart = Math.round(playtime * SDL.audio.freq);
              if (thisBufferStart != SDL.audio.curBufferEnd) console.log('SDL starved ' + (thisBufferStart - SDL.audio.curBufferEnd) + ' samples!');
            }
            SDL.audio.curBufferEnd = Math.round(playtime * SDL.audio.freq + sizeSamplesPerChannel);
            */
            
            SDL.audio.nextPlayTime = playtime + SDL.audio.bufferDurationSecs;
          } catch(e) {
            console.log('Web Audio API error playing back audio: ' + e.toString());
          }
        }
  
        if (obtained) {
          // Report back the initialized audio parameters.
          HEAP32[((obtained)>>2)]=SDL.audio.freq;
          HEAP16[(((obtained)+(4))>>1)]=SDL.audio.format;
          HEAP8[(((obtained)+(6))>>0)]=SDL.audio.channels;
          HEAP8[(((obtained)+(7))>>0)]=SDL.audio.silence;
          HEAP16[(((obtained)+(8))>>1)]=SDL.audio.samples;
          HEAP32[(((obtained)+(16))>>2)]=SDL.audio.callback;
          HEAP32[(((obtained)+(20))>>2)]=SDL.audio.userdata;
        }
        SDL.allocateChannels(32);
  
      } catch(e) {
        console.log('Initializing SDL audio threw an exception: "' + e.toString() + '"! Continuing without audio.');
        SDL.audio = null;
        SDL.allocateChannels(0);
        if (obtained) {
          HEAP32[((obtained)>>2)]=0;
          HEAP16[(((obtained)+(4))>>1)]=0;
          HEAP8[(((obtained)+(6))>>0)]=0;
          HEAP8[(((obtained)+(7))>>0)]=0;
          HEAP16[(((obtained)+(8))>>1)]=0;
          HEAP32[(((obtained)+(16))>>2)]=0;
          HEAP32[(((obtained)+(20))>>2)]=0;
        }
      }
      if (!SDL.audio) {
        return -1;
      }
      return 0;
    }

  function _glfwSetKeyCallback(winid, cbfun) {
      GLFW.setKeyCallback(winid, cbfun);
    }

  function _emscripten_set_gamepadconnected_callback(userData, useCapture, callbackfunc) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 26, "gamepadconnected");
      return 0;
    }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _pthread_cond_destroy() { return 0; }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _emscripten_glLoadMatrixf() {
  Module['printErr']('missing function: emscripten_glLoadMatrixf'); abort(-1);
  }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          var program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          var program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function ___unlock() {}

  function _emscripten_glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  function _glfwDestroyWindow(winid) {
      return GLFW.destroyWindow(winid);
    }

  function _emscripten_glFlush() { GLctx['flush']() }

  function _glfwSetErrorCallback(cbfun) {
      GLFW.errorFunc = cbfun;
    }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _pthread_cond_init() { return 0; }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glGenVertexArrays(n, arrays) {
  
      for (var i = 0; i < n; i++) {
        var vao = GLctx['createVertexArray']();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
var GLctx; GL.init();
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
JSEvents.staticInit();;
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vd(x) { Module["printErr"]("Invalid function pointer called with signature 'vd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddd(x) { Module["printErr"]("Invalid function pointer called with signature 'viddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdi(x) { Module["printErr"]("Invalid function pointer called with signature 'vdi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vd(index,a1) {
  try {
    Module["dynCall_vd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vdi(index,a1,a2) {
  try {
    Module["dynCall_vdi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_vdddddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vdddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vdddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vdd(index,a1,a2) {
  try {
    Module["dynCall_vdd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vd": nullFunc_vd, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viddd": nullFunc_viddd, "nullFunc_vidd": nullFunc_vidd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_vidddd": nullFunc_vidddd, "nullFunc_vdi": nullFunc_vdi, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_vdddddd": nullFunc_vdddddd, "nullFunc_vdddd": nullFunc_vdddd, "nullFunc_vdd": nullFunc_vdd, "nullFunc_v": nullFunc_v, "nullFunc_viid": nullFunc_viid, "nullFunc_viiii": nullFunc_viiii, "invoke_viiiii": invoke_viiiii, "invoke_vd": invoke_vd, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viddd": invoke_viddd, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viii": invoke_viii, "invoke_vidddd": invoke_vidddd, "invoke_vdi": invoke_vdi, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_iii": invoke_iii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_vdddddd": invoke_vdddddd, "invoke_vdddd": invoke_vdddd, "invoke_vdd": invoke_vdd, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_viiii": invoke_viiii, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_glUseProgram": _glUseProgram, "_IMG_Load": _IMG_Load, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_glfwCreateWindow": _glfwCreateWindow, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glCullFace": _emscripten_glCullFace, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glViewport": _emscripten_glViewport, "_glReadPixels": _glReadPixels, "_emscripten_glFrontFace": _emscripten_glFrontFace, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_glBindBuffer": _glBindBuffer, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_emscripten_set_fullscreenchange_callback": _emscripten_set_fullscreenchange_callback, "_emscripten_set_touchmove_callback": _emscripten_set_touchmove_callback, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_glDisable": _glDisable, "_glBlendFunc": _glBlendFunc, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_glGetAttribLocation": _glGetAttribLocation, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_Mix_PlayChannel": _Mix_PlayChannel, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_glfwDestroyWindow": _glfwDestroyWindow, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glVertexPointer": _emscripten_glVertexPointer, "_emscripten_set_touchstart_callback": _emscripten_set_touchstart_callback, "_SDL_InitSubSystem": _SDL_InitSubSystem, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "___syscall221": ___syscall221, "_glUniform4f": _glUniform4f, "_llvm_stacksave": _llvm_stacksave, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glFrustum": _emscripten_glFrustum, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_glfwInit": _glfwInit, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "_Mix_PlayMusic": _Mix_PlayMusic, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB, "_Mix_HaltMusic": _Mix_HaltMusic, "_TTF_FontHeight": _TTF_FontHeight, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "___syscall140": ___syscall140, "_glfwSetErrorCallback": _glfwSetErrorCallback, "_glfwDefaultWindowHints": _glfwDefaultWindowHints, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "___syscall146": ___syscall146, "_SDL_RWFromFile": _SDL_RWFromFile, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glColorPointer": _emscripten_glColorPointer, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_glVertexAttribPointer": _glVertexAttribPointer, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_SDL_QuitSubSystem": _SDL_QuitSubSystem, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_glfwSetScrollCallback": _glfwSetScrollCallback, "_SDL_GetTicks": _SDL_GetTicks, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_llvm_stackrestore": _llvm_stackrestore, "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_emscripten_glClear": _emscripten_glClear, "_glDrawElements": _glDrawElements, "_glBufferSubData": _glBufferSubData, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_SDL_LockSurface": _SDL_LockSurface, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_glViewport": _glViewport, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "___setErrNo": ___setErrNo, "_eglGetProcAddress": _eglGetProcAddress, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_glDeleteTextures": _glDeleteTextures, "_glDepthFunc": _glDepthFunc, "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_glGetFloatv": _glGetFloatv, "_emscripten_glRotatef": _emscripten_glRotatef, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_glEnable": _glEnable, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glMatrixMode": _emscripten_glMatrixMode, "_glGetString": _glGetString, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "emscriptenWebGLGet": emscriptenWebGLGet, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_emscripten_get_now": _emscripten_get_now, "_emscripten_glNormalPointer": _emscripten_glNormalPointer, "_glAttachShader": _glAttachShader, "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer, "_emscripten_glFinish": _emscripten_glFinish, "_glCreateProgram": _glCreateProgram, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_emscripten_glClearDepth": _emscripten_glClearDepth, "___lock": ___lock, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___syscall145": ___syscall145, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_time": _time, "_glDetachShader": _glDetachShader, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_exit": _exit, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_putenv": _putenv, "_pthread_join": _pthread_join, "_glCullFace": _glCullFace, "_llvm_pow_f64": _llvm_pow_f64, "_emscripten_set_keypress_callback": _emscripten_set_keypress_callback, "__emscripten_sample_gamepad_data": __emscripten_sample_gamepad_data, "_emscripten_get_gamepad_status": _emscripten_get_gamepad_status, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_glfwGetVideoModes": _glfwGetVideoModes, "___unlock": ___unlock, "_emscripten_set_click_callback": _emscripten_set_click_callback, "_dlclose": _dlclose, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_get_num_gamepads": _emscripten_get_num_gamepads, "___buildEnvironment": ___buildEnvironment, "_glCompressedTexImage2D": _glCompressedTexImage2D, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_glClearDepthf": _glClearDepthf, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "_glfwSetWindowShouldClose": _glfwSetWindowShouldClose, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_glBindTexture": _glBindTexture, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glDisable": _emscripten_glDisable, "_glfwSetCharCallback": _glfwSetCharCallback, "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib, "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_glDrawArrays": _glDrawArrays, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_glCreateShader": _glCreateShader, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_pthread_cond_signal": _pthread_cond_signal, "_emscripten_glEnableClientState": _emscripten_glEnableClientState, "_emscripten_get_pointerlock_status": _emscripten_get_pointerlock_status, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glHint": _emscripten_glHint, "_getenv": _getenv, "_emscripten_glDepthRange": _emscripten_glDepthRange, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_SDL_UpperBlit": _SDL_UpperBlit, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_glActiveTexture": _glActiveTexture, "_emscripten_request_pointerlock": _emscripten_request_pointerlock, "_emscripten_set_gamepaddisconnected_callback": _emscripten_set_gamepaddisconnected_callback, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_glfwSetWindowIconifyCallback": _glfwSetWindowIconifyCallback, "_emscripten_glDrawBuffers": _emscripten_glDrawBuffers, "_glfwTerminate": _glfwTerminate, "_glFrontFace": _glFrontFace, "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB, "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock, "_glfwSwapInterval": _glfwSwapInterval, "_glUniform1i": _glUniform1i, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_abort": _abort, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "_glDeleteBuffers": _glDeleteBuffers, "_glBufferData": _glBufferData, "_glTexImage2D": _glTexImage2D, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_emscripten_glEnable": _emscripten_glEnable, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glGetPointerv": _emscripten_glGetPointerv, "_pthread_cond_wait": _pthread_cond_wait, "_glDeleteShader": _glDeleteShader, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_glGetProgramiv": _glGetProgramiv, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_glfwGetTime": _glfwGetTime, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_set_gamepadconnected_callback": _emscripten_set_gamepadconnected_callback, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_SDL_CloseAudio": _SDL_CloseAudio, "_SDL_OpenAudio": _SDL_OpenAudio, "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "_emscripten_set_touchcancel_callback": _emscripten_set_touchcancel_callback, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_usleep": _usleep, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_glfwGetPrimaryMonitor": _glfwGetPrimaryMonitor, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "_emscripten_set_touchend_callback": _emscripten_set_touchend_callback, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_SDL_FreeRW": _SDL_FreeRW, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_SDL_PauseAudio": _SDL_PauseAudio, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_glGetUniformLocation": _glGetUniformLocation, "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_glClear": _glClear, "___syscall54": ___syscall54, "_glGenTextures": _glGenTextures, "_Mix_FreeChunk": _Mix_FreeChunk, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "__exit": __exit, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_glBindAttribLocation": _glBindAttribLocation, "_glPixelStorei": _glPixelStorei, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_glGetShaderiv": _glGetShaderiv, "_glfwSwapBuffers": _glfwSwapBuffers, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_glCompileShader": _glCompileShader, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_TTF_SizeText": _TTF_SizeText, "_glfwGetCursorPos": _glfwGetCursorPos, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements, "_pthread_mutex_init": _pthread_mutex_init, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_glLinkProgram": _glLinkProgram, "_IMG_Load_RW": _IMG_Load_RW, "_pthread_create": _pthread_create, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_glfwWindowHint": _glfwWindowHint, "_pthread_cond_init": _pthread_cond_init, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "_emscripten_glIsShader": _emscripten_glIsShader, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_glTexParameteri": _glTexParameteri, "_pthread_cond_destroy": _pthread_cond_destroy, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_glClearColor": _glClearColor, "_glfwSetCursorPosCallback": _glfwSetCursorPosCallback, "_glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vd=env.nullFunc_vd;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viddd=env.nullFunc_viddd;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_vidddd=env.nullFunc_vidddd;
  var nullFunc_vdi=env.nullFunc_vdi;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_vdddddd=env.nullFunc_vdddddd;
  var nullFunc_vdddd=env.nullFunc_vdddd;
  var nullFunc_vdd=env.nullFunc_vdd;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vd=env.invoke_vd;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viddd=env.invoke_viddd;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_vidddd=env.invoke_vidddd;
  var invoke_vdi=env.invoke_vdi;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_vdddddd=env.invoke_vdddddd;
  var invoke_vdddd=env.invoke_vdddd;
  var invoke_vdd=env.invoke_vdd;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_viiii=env.invoke_viiii;
  var _emscripten_glGetTexParameterfv=env._emscripten_glGetTexParameterfv;
  var _glUseProgram=env._glUseProgram;
  var _IMG_Load=env._IMG_Load;
  var _emscripten_glShaderSource=env._emscripten_glShaderSource;
  var _glfwCreateWindow=env._glfwCreateWindow;
  var _emscripten_glReleaseShaderCompiler=env._emscripten_glReleaseShaderCompiler;
  var _emscripten_glBlendFuncSeparate=env._emscripten_glBlendFuncSeparate;
  var _emscripten_glVertexAttribPointer=env._emscripten_glVertexAttribPointer;
  var _emscripten_glGetIntegerv=env._emscripten_glGetIntegerv;
  var _emscripten_glCullFace=env._emscripten_glCullFace;
  var _emscripten_glIsProgram=env._emscripten_glIsProgram;
  var _emscripten_glStencilMaskSeparate=env._emscripten_glStencilMaskSeparate;
  var _emscripten_glViewport=env._emscripten_glViewport;
  var _glReadPixels=env._glReadPixels;
  var _emscripten_glFrontFace=env._emscripten_glFrontFace;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var _emscripten_glUniform3fv=env._emscripten_glUniform3fv;
  var _emscripten_glPolygonOffset=env._emscripten_glPolygonOffset;
  var _emscripten_glUseProgram=env._emscripten_glUseProgram;
  var _emscripten_glBlendColor=env._emscripten_glBlendColor;
  var _glBindBuffer=env._glBindBuffer;
  var _emscripten_glDepthFunc=env._emscripten_glDepthFunc;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _emscripten_set_fullscreenchange_callback=env._emscripten_set_fullscreenchange_callback;
  var _emscripten_set_touchmove_callback=env._emscripten_set_touchmove_callback;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _glDisable=env._glDisable;
  var _glBlendFunc=env._glBlendFunc;
  var _emscripten_glDisableVertexAttribArray=env._emscripten_glDisableVertexAttribArray;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var _glfwDestroyWindow=env._glfwDestroyWindow;
  var _emscripten_glSampleCoverage=env._emscripten_glSampleCoverage;
  var _emscripten_glVertexPointer=env._emscripten_glVertexPointer;
  var _emscripten_set_touchstart_callback=env._emscripten_set_touchstart_callback;
  var _SDL_InitSubSystem=env._SDL_InitSubSystem;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var _emscripten_glGetBooleanv=env._emscripten_glGetBooleanv;
  var ___syscall221=env.___syscall221;
  var _glUniform4f=env._glUniform4f;
  var _llvm_stacksave=env._llvm_stacksave;
  var _emscripten_glUniform1i=env._emscripten_glUniform1i;
  var _emscripten_glStencilFuncSeparate=env._emscripten_glStencilFuncSeparate;
  var _emscripten_glFrustum=env._emscripten_glFrustum;
  var _emscripten_glGenBuffers=env._emscripten_glGenBuffers;
  var _emscripten_glDeleteObjectARB=env._emscripten_glDeleteObjectARB;
  var _emscripten_glTexImage2D=env._emscripten_glTexImage2D;
  var _emscripten_glGetShaderPrecisionFormat=env._emscripten_glGetShaderPrecisionFormat;
  var _glfwInit=env._glfwInit;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var _emscripten_glGetString=env._emscripten_glGetString;
  var _emscripten_glIsFramebuffer=env._emscripten_glIsFramebuffer;
  var _emscripten_glIsEnabled=env._emscripten_glIsEnabled;
  var _emscripten_glScissor=env._emscripten_glScissor;
  var _emscripten_glVertexAttrib4fv=env._emscripten_glVertexAttrib4fv;
  var _emscripten_glFramebufferTexture2D=env._emscripten_glFramebufferTexture2D;
  var _emscripten_glTexParameteriv=env._emscripten_glTexParameteriv;
  var _emscripten_glBindProgramARB=env._emscripten_glBindProgramARB;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var _emscripten_glFramebufferRenderbuffer=env._emscripten_glFramebufferRenderbuffer;
  var ___syscall140=env.___syscall140;
  var _glfwSetErrorCallback=env._glfwSetErrorCallback;
  var _glfwDefaultWindowHints=env._glfwDefaultWindowHints;
  var _emscripten_glIsBuffer=env._emscripten_glIsBuffer;
  var ___syscall146=env.___syscall146;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var _emscripten_glGetActiveAttrib=env._emscripten_glGetActiveAttrib;
  var _emscripten_glColorPointer=env._emscripten_glColorPointer;
  var _emscripten_glAttachShader=env._emscripten_glAttachShader;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _emscripten_glUniform2i=env._emscripten_glUniform2i;
  var _emscripten_glUniform2f=env._emscripten_glUniform2f;
  var _SDL_QuitSubSystem=env._SDL_QuitSubSystem;
  var _emscripten_glTexParameterfv=env._emscripten_glTexParameterfv;
  var _emscripten_glUniformMatrix2fv=env._emscripten_glUniformMatrix2fv;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _glfwSetScrollCallback=env._glfwSetScrollCallback;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var _emscripten_glGetAttachedShaders=env._emscripten_glGetAttachedShaders;
  var _emscripten_glGenTextures=env._emscripten_glGenTextures;
  var _emscripten_glTexParameteri=env._emscripten_glTexParameteri;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _emscripten_glLoadIdentity=env._emscripten_glLoadIdentity;
  var _glfwMakeContextCurrent=env._glfwMakeContextCurrent;
  var _emscripten_glClear=env._emscripten_glClear;
  var _glDrawElements=env._glDrawElements;
  var _glBufferSubData=env._glBufferSubData;
  var _emscripten_glValidateProgram=env._emscripten_glValidateProgram;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var _emscripten_glVertexAttrib2fv=env._emscripten_glVertexAttrib2fv;
  var _glViewport=env._glViewport;
  var _emscripten_glUniform4iv=env._emscripten_glUniform4iv;
  var _emscripten_glGetTexParameteriv=env._emscripten_glGetTexParameteriv;
  var ___setErrNo=env.___setErrNo;
  var _eglGetProcAddress=env._eglGetProcAddress;
  var _emscripten_glBindAttribLocation=env._emscripten_glBindAttribLocation;
  var _glDeleteTextures=env._glDeleteTextures;
  var _glDepthFunc=env._glDepthFunc;
  var _emscripten_glClientActiveTexture=env._emscripten_glClientActiveTexture;
  var _emscripten_glVertexAttrib2f=env._emscripten_glVertexAttrib2f;
  var _emscripten_glFlush=env._emscripten_glFlush;
  var _emscripten_glCheckFramebufferStatus=env._emscripten_glCheckFramebufferStatus;
  var _emscripten_glGenerateMipmap=env._emscripten_glGenerateMipmap;
  var _emscripten_glGetError=env._emscripten_glGetError;
  var _emscripten_glClearDepthf=env._emscripten_glClearDepthf;
  var _emscripten_glBufferData=env._emscripten_glBufferData;
  var _emscripten_glUniform3i=env._emscripten_glUniform3i;
  var _glGetFloatv=env._glGetFloatv;
  var _emscripten_glRotatef=env._emscripten_glRotatef;
  var _emscripten_glDeleteShader=env._emscripten_glDeleteShader;
  var _glEnable=env._glEnable;
  var _emscripten_glReadPixels=env._emscripten_glReadPixels;
  var _emscripten_glMatrixMode=env._emscripten_glMatrixMode;
  var _glGetString=env._glGetString;
  var _emscripten_glClearStencil=env._emscripten_glClearStencil;
  var _emscripten_glGetUniformLocation=env._emscripten_glGetUniformLocation;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var _emscripten_glEnableVertexAttribArray=env._emscripten_glEnableVertexAttribArray;
  var _emscripten_glGetAttribLocation=env._emscripten_glGetAttribLocation;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_glNormalPointer=env._emscripten_glNormalPointer;
  var _glAttachShader=env._glAttachShader;
  var _emscripten_glTexCoordPointer=env._emscripten_glTexCoordPointer;
  var _emscripten_glFinish=env._emscripten_glFinish;
  var _glCreateProgram=env._glCreateProgram;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _emscripten_glClearDepth=env._emscripten_glClearDepth;
  var ___lock=env.___lock;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___syscall145=env.___syscall145;
  var _emscripten_glVertexAttrib3f=env._emscripten_glVertexAttrib3f;
  var _time=env._time;
  var _glDetachShader=env._glDetachShader;
  var _emscripten_glVertexAttrib1f=env._emscripten_glVertexAttrib1f;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var _emscripten_glBlendEquationSeparate=env._emscripten_glBlendEquationSeparate;
  var _exit=env._exit;
  var _emscripten_glStencilOpSeparate=env._emscripten_glStencilOpSeparate;
  var _emscripten_glUniform4i=env._emscripten_glUniform4i;
  var _putenv=env._putenv;
  var _pthread_join=env._pthread_join;
  var _glCullFace=env._glCullFace;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _emscripten_set_keypress_callback=env._emscripten_set_keypress_callback;
  var __emscripten_sample_gamepad_data=env.__emscripten_sample_gamepad_data;
  var _emscripten_get_gamepad_status=env._emscripten_get_gamepad_status;
  var _emscripten_glUniform4f=env._emscripten_glUniform4f;
  var _emscripten_glUniform2fv=env._emscripten_glUniform2fv;
  var _glfwGetVideoModes=env._glfwGetVideoModes;
  var ___unlock=env.___unlock;
  var _emscripten_set_click_callback=env._emscripten_set_click_callback;
  var _dlclose=env._dlclose;
  var _emscripten_glShaderBinary=env._emscripten_glShaderBinary;
  var _emscripten_glDrawElements=env._emscripten_glDrawElements;
  var _emscripten_glBlendFunc=env._emscripten_glBlendFunc;
  var _emscripten_get_num_gamepads=env._emscripten_get_num_gamepads;
  var ___buildEnvironment=env.___buildEnvironment;
  var _glCompressedTexImage2D=env._glCompressedTexImage2D;
  var _emscripten_glUniform1iv=env._emscripten_glUniform1iv;
  var _emscripten_glGetVertexAttribPointerv=env._emscripten_glGetVertexAttribPointerv;
  var _glClearDepthf=env._glClearDepthf;
  var _emscripten_glCompressedTexSubImage2D=env._emscripten_glCompressedTexSubImage2D;
  var emscriptenWebGLGetUniform=env.emscriptenWebGLGetUniform;
  var _emscripten_glGenRenderbuffers=env._emscripten_glGenRenderbuffers;
  var _emscripten_glDeleteVertexArrays=env._emscripten_glDeleteVertexArrays;
  var _glfwSetWindowShouldClose=env._glfwSetWindowShouldClose;
  var _emscripten_glUniform1fv=env._emscripten_glUniform1fv;
  var _emscripten_glGetActiveUniform=env._emscripten_glGetActiveUniform;
  var _glBindTexture=env._glBindTexture;
  var _emscripten_glUniform3iv=env._emscripten_glUniform3iv;
  var _emscripten_glUniform2iv=env._emscripten_glUniform2iv;
  var _emscripten_glDisable=env._emscripten_glDisable;
  var _glfwSetCharCallback=env._glfwSetCharCallback;
  var emscriptenWebGLGetVertexAttrib=env.emscriptenWebGLGetVertexAttrib;
  var _emscripten_glLoadMatrixf=env._emscripten_glLoadMatrixf;
  var _emscripten_glDeleteProgram=env._emscripten_glDeleteProgram;
  var _emscripten_glDeleteRenderbuffers=env._emscripten_glDeleteRenderbuffers;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_glDrawElementsInstanced=env._emscripten_glDrawElementsInstanced;
  var _emscripten_glVertexAttrib4f=env._emscripten_glVertexAttrib4f;
  var _glDrawArrays=env._glDrawArrays;
  var _emscripten_glTexSubImage2D=env._emscripten_glTexSubImage2D;
  var _glCreateShader=env._glCreateShader;
  var _emscripten_glPixelStorei=env._emscripten_glPixelStorei;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _emscripten_glEnableClientState=env._emscripten_glEnableClientState;
  var _emscripten_get_pointerlock_status=env._emscripten_get_pointerlock_status;
  var _pthread_mutex_destroy=env._pthread_mutex_destroy;
  var _emscripten_glUniformMatrix3fv=env._emscripten_glUniformMatrix3fv;
  var _emscripten_glHint=env._emscripten_glHint;
  var _getenv=env._getenv;
  var _emscripten_glDepthRange=env._emscripten_glDepthRange;
  var _emscripten_glCompressedTexImage2D=env._emscripten_glCompressedTexImage2D;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _emscripten_glGetBufferParameteriv=env._emscripten_glGetBufferParameteriv;
  var _glActiveTexture=env._glActiveTexture;
  var _emscripten_request_pointerlock=env._emscripten_request_pointerlock;
  var _emscripten_set_gamepaddisconnected_callback=env._emscripten_set_gamepaddisconnected_callback;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_glDepthMask=env._emscripten_glDepthMask;
  var _glfwSetWindowIconifyCallback=env._glfwSetWindowIconifyCallback;
  var _emscripten_glDrawBuffers=env._emscripten_glDrawBuffers;
  var _glfwTerminate=env._glfwTerminate;
  var _glFrontFace=env._glFrontFace;
  var _emscripten_glGetObjectParameterivARB=env._emscripten_glGetObjectParameterivARB;
  var _emscripten_exit_pointerlock=env._emscripten_exit_pointerlock;
  var _glfwSwapInterval=env._glfwSwapInterval;
  var _glUniform1i=env._glUniform1i;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _emscripten_glStencilFunc=env._emscripten_glStencilFunc;
  var _abort=env._abort;
  var _emscripten_glGetUniformiv=env._emscripten_glGetUniformiv;
  var _emscripten_glGenVertexArrays=env._emscripten_glGenVertexArrays;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glBufferData=env._glBufferData;
  var _glTexImage2D=env._glTexImage2D;
  var _emscripten_glGetShaderiv=env._emscripten_glGetShaderiv;
  var _emscripten_glEnable=env._emscripten_glEnable;
  var _emscripten_glGenFramebuffers=env._emscripten_glGenFramebuffers;
  var _emscripten_glUniformMatrix4fv=env._emscripten_glUniformMatrix4fv;
  var _emscripten_glGetPointerv=env._emscripten_glGetPointerv;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _glDeleteShader=env._glDeleteShader;
  var _emscripten_glTexParameterf=env._emscripten_glTexParameterf;
  var _emscripten_glUniform1f=env._emscripten_glUniform1f;
  var _glGetProgramiv=env._glGetProgramiv;
  var _emscripten_glBindFramebuffer=env._emscripten_glBindFramebuffer;
  var _emscripten_glIsRenderbuffer=env._emscripten_glIsRenderbuffer;
  var _glfwGetTime=env._glfwGetTime;
  var _emscripten_glRenderbufferStorage=env._emscripten_glRenderbufferStorage;
  var _emscripten_set_gamepadconnected_callback=env._emscripten_set_gamepadconnected_callback;
  var _emscripten_glGetVertexAttribiv=env._emscripten_glGetVertexAttribiv;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var _SDL_OpenAudio=env._SDL_OpenAudio;
  var _emscripten_glBindVertexArray=env._emscripten_glBindVertexArray;
  var _emscripten_glDrawArraysInstanced=env._emscripten_glDrawArraysInstanced;
  var _emscripten_set_touchcancel_callback=env._emscripten_set_touchcancel_callback;
  var _emscripten_glCreateShader=env._emscripten_glCreateShader;
  var _emscripten_glStencilMask=env._emscripten_glStencilMask;
  var _emscripten_glGetFramebufferAttachmentParameteriv=env._emscripten_glGetFramebufferAttachmentParameteriv;
  var _usleep=env._usleep;
  var _emscripten_glDeleteTextures=env._emscripten_glDeleteTextures;
  var _emscripten_glBindRenderbuffer=env._emscripten_glBindRenderbuffer;
  var _glfwGetPrimaryMonitor=env._glfwGetPrimaryMonitor;
  var _emscripten_glBufferSubData=env._emscripten_glBufferSubData;
  var _emscripten_glVertexAttribDivisor=env._emscripten_glVertexAttribDivisor;
  var _emscripten_set_touchend_callback=env._emscripten_set_touchend_callback;
  var _emscripten_glGetUniformfv=env._emscripten_glGetUniformfv;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var _emscripten_glGetVertexAttribfv=env._emscripten_glGetVertexAttribfv;
  var _emscripten_glGetRenderbufferParameteriv=env._emscripten_glGetRenderbufferParameteriv;
  var _emscripten_glDeleteFramebuffers=env._emscripten_glDeleteFramebuffers;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _emscripten_glVertexAttrib3fv=env._emscripten_glVertexAttrib3fv;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _emscripten_glGetInfoLogARB=env._emscripten_glGetInfoLogARB;
  var _emscripten_glCompileShader=env._emscripten_glCompileShader;
  var _glClear=env._glClear;
  var ___syscall54=env.___syscall54;
  var _glGenTextures=env._glGenTextures;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var _emscripten_glDepthRangef=env._emscripten_glDepthRangef;
  var __exit=env.__exit;
  var _emscripten_glLineWidth=env._emscripten_glLineWidth;
  var _emscripten_glUniform3f=env._emscripten_glUniform3f;
  var _emscripten_glGetShaderInfoLog=env._emscripten_glGetShaderInfoLog;
  var _emscripten_glStencilOp=env._emscripten_glStencilOp;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var _glPixelStorei=env._glPixelStorei;
  var _emscripten_glColorMask=env._emscripten_glColorMask;
  var _emscripten_glLinkProgram=env._emscripten_glLinkProgram;
  var _glGetShaderiv=env._glGetShaderiv;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _emscripten_glIsTexture=env._emscripten_glIsTexture;
  var _emscripten_glGetProgramiv=env._emscripten_glGetProgramiv;
  var _glCompileShader=env._glCompileShader;
  var _emscripten_glVertexAttrib1fv=env._emscripten_glVertexAttrib1fv;
  var _emscripten_glBindTexture=env._emscripten_glBindTexture;
  var _TTF_SizeText=env._TTF_SizeText;
  var _glfwGetCursorPos=env._glfwGetCursorPos;
  var _emscripten_glActiveTexture=env._emscripten_glActiveTexture;
  var _emscripten_glDrawRangeElements=env._emscripten_glDrawRangeElements;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _emscripten_glDeleteBuffers=env._emscripten_glDeleteBuffers;
  var _glLinkProgram=env._glLinkProgram;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var _pthread_create=env._pthread_create;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _glfwSetMouseButtonCallback=env._glfwSetMouseButtonCallback;
  var _emscripten_glGetProgramInfoLog=env._emscripten_glGetProgramInfoLog;
  var _glfwWindowHint=env._glfwWindowHint;
  var _pthread_cond_init=env._pthread_cond_init;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var _emscripten_glIsShader=env._emscripten_glIsShader;
  var _emscripten_glUniform4fv=env._emscripten_glUniform4fv;
  var _emscripten_glBlendEquation=env._emscripten_glBlendEquation;
  var _emscripten_glDrawArrays=env._emscripten_glDrawArrays;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _emscripten_glClearColor=env._emscripten_glClearColor;
  var _emscripten_glGetShaderSource=env._emscripten_glGetShaderSource;
  var _emscripten_glCreateProgram=env._emscripten_glCreateProgram;
  var _emscripten_glCopyTexSubImage2D=env._emscripten_glCopyTexSubImage2D;
  var _glTexParameteri=env._glTexParameteri;
  var _pthread_cond_destroy=env._pthread_cond_destroy;
  var _emscripten_glBindBuffer=env._emscripten_glBindBuffer;
  var _emscripten_glGetFloatv=env._emscripten_glGetFloatv;
  var _emscripten_glDetachShader=env._emscripten_glDetachShader;
  var _glClearColor=env._glClearColor;
  var _glfwSetCursorPosCallback=env._glfwSetCursorPosCallback;
  var _glfwSetCursorEnterCallback=env._glfwSetCursorEnterCallback;
  var _emscripten_glCopyTexImage2D=env._emscripten_glCopyTexImage2D;
  var _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $fxOgg$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $fxOgg$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = HEAP32[2]|0;
 $3 = HEAP32[3]|0;
 _InitWindow($2,$3,4976);
 _InitAudioDevice();
 _LoadSound($0,5027);
 ;HEAP32[21576>>2]=HEAP32[$0>>2]|0;HEAP32[21576+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[21576+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[21576+12>>2]=HEAP32[$0+12>>2]|0;
 _LoadSound($1,5047);
 ;HEAP32[21592>>2]=HEAP32[$1>>2]|0;HEAP32[21592+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[21592+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[21592+12>>2]=HEAP32[$1+12>>2]|0;
 _emscripten_set_main_loop((1|0),0,1);
 ;HEAP32[$fxOgg$byval_copy>>2]=HEAP32[21576>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[21576+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[21576+8>>2]|0;HEAP32[$fxOgg$byval_copy+12>>2]=HEAP32[21576+12>>2]|0;
 _UnloadSound($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy>>2]=HEAP32[21592>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[21592+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[21592+8>>2]|0;HEAP32[$fxOgg$byval_copy+12>>2]=HEAP32[21592+12>>2]|0;
 _UnloadSound($fxOgg$byval_copy);
 _CloseAudioDevice();
 _CloseWindow();
 STACKTOP = sp;return 0;
}
function _UpdateDrawFrame() {
 var $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy2 = sp;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = (_IsKeyPressed(32)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  ;HEAP32[$$byval_copy2>>2]=HEAP32[21576>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[21576+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[21576+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[21576+12>>2]|0;
  _PlaySound($$byval_copy2);
 }
 $5 = (_IsKeyPressed(257)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  ;HEAP32[$$byval_copy2>>2]=HEAP32[21592>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[21592+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[21592+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[21592+12>>2]|0;
  _PlaySound($$byval_copy2);
 }
 _BeginDrawing();
 HEAP8[$0>>0] = -11;
 $7 = ((($0)) + 1|0);
 HEAP8[$7>>0] = -11;
 $8 = ((($0)) + 2|0);
 HEAP8[$8>>0] = -11;
 $9 = ((($0)) + 3|0);
 HEAP8[$9>>0] = -1;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$0+3>>0]|0;
 _ClearBackground($$byval_copy2);
 HEAP8[$1>>0] = -56;
 $10 = ((($1)) + 1|0);
 HEAP8[$10>>0] = -56;
 $11 = ((($1)) + 2|0);
 HEAP8[$11>>0] = -56;
 $12 = ((($1)) + 3|0);
 HEAP8[$12>>0] = -1;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$1+3>>0]|0;
 _DrawText(5070,200,180,20,$$byval_copy2);
 HEAP8[$2>>0] = -56;
 $13 = ((($2)) + 1|0);
 HEAP8[$13>>0] = -56;
 $14 = ((($2)) + 2|0);
 HEAP8[$14>>0] = -56;
 $15 = ((($2)) + 3|0);
 HEAP8[$15>>0] = -1;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$2+3>>0]|0;
 _DrawText(5105,200,220,20,$$byval_copy2);
 _EndDrawing();
 STACKTOP = sp;return;
}
function _Vector2Distance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$0>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 - $3;
 $5 = +HEAPF32[$0>>2];
 $6 = +HEAPF32[$1>>2];
 $7 = $5 - $6;
 $8 = $4 * $7;
 $9 = ((($0)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($1)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $10 - $12;
 $14 = ((($0)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = ((($1)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $15 - $17;
 $19 = $13 * $18;
 $20 = $8 + $19;
 $21 = (+Math_sqrt((+$20)));
 return (+$21);
}
function _Vector2Angle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($1)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($0)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $4 - $6;
 $8 = +HEAPF32[$1>>2];
 $9 = +HEAPF32[$0>>2];
 $10 = $8 - $9;
 $11 = (+Math_atan2((+$7),(+$10)));
 $12 = $11 * 57.2957763671875;
 HEAPF32[$2>>2] = $12;
 $13 = +HEAPF32[$2>>2];
 $14 = $13 < 0.0;
 if (!($14)) {
  $17 = +HEAPF32[$2>>2];
  STACKTOP = sp;return (+$17);
 }
 $15 = +HEAPF32[$2>>2];
 $16 = $15 + 360.0;
 HEAPF32[$2>>2] = $16;
 $17 = +HEAPF32[$2>>2];
 STACKTOP = sp;return (+$17);
}
function _Vector3Zero($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$0>>2] = 0.0;
 $1 = ((($0)) + 4|0);
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($0)) + 8|0);
 HEAPF32[$2>>2] = 0.0;
 return;
}
function _Vector3Length($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[$0>>2];
 $2 = +HEAPF32[$0>>2];
 $3 = $1 * $2;
 $4 = ((($0)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = ((($0)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $5 * $7;
 $9 = $3 + $8;
 $10 = ((($0)) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = ((($0)) + 8|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $11 * $13;
 $15 = $9 + $14;
 $16 = (+Math_sqrt((+$15)));
 return (+$16);
}
function _Vector3Normalize($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0.0;
 var $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$1>>2] = $0;
 $4 = HEAP32[$1>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$4+8>>2]|0;
 $5 = (+_Vector3Length($$byval_copy));
 HEAPF32[$2>>2] = $5;
 $6 = +HEAPF32[$2>>2];
 $7 = $6 == 0.0;
 if ($7) {
  HEAPF32[$2>>2] = 1.0;
 }
 $8 = +HEAPF32[$2>>2];
 $9 = 1.0 / $8;
 HEAPF32[$3>>2] = $9;
 $10 = +HEAPF32[$3>>2];
 $11 = HEAP32[$1>>2]|0;
 $12 = +HEAPF32[$11>>2];
 $13 = $12 * $10;
 HEAPF32[$11>>2] = $13;
 $14 = +HEAPF32[$3>>2];
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 * $14;
 HEAPF32[$16>>2] = $18;
 $19 = +HEAPF32[$3>>2];
 $20 = HEAP32[$1>>2]|0;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $22 * $19;
 HEAPF32[$21>>2] = $23;
 STACKTOP = sp;return;
}
function _Vector3Transform($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$2>>2] = $0;
 $6 = HEAP32[$2>>2]|0;
 $7 = +HEAPF32[$6>>2];
 HEAPF32[$3>>2] = $7;
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 HEAPF32[$4>>2] = $10;
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF32[$12>>2];
 HEAPF32[$5>>2] = $13;
 $14 = +HEAPF32[$1>>2];
 $15 = +HEAPF32[$3>>2];
 $16 = $14 * $15;
 $17 = ((($1)) + 4|0);
 $18 = +HEAPF32[$17>>2];
 $19 = +HEAPF32[$4>>2];
 $20 = $18 * $19;
 $21 = $16 + $20;
 $22 = ((($1)) + 8|0);
 $23 = +HEAPF32[$22>>2];
 $24 = +HEAPF32[$5>>2];
 $25 = $23 * $24;
 $26 = $21 + $25;
 $27 = ((($1)) + 12|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $26 + $28;
 $30 = HEAP32[$2>>2]|0;
 HEAPF32[$30>>2] = $29;
 $31 = ((($1)) + 16|0);
 $32 = +HEAPF32[$31>>2];
 $33 = +HEAPF32[$3>>2];
 $34 = $32 * $33;
 $35 = ((($1)) + 20|0);
 $36 = +HEAPF32[$35>>2];
 $37 = +HEAPF32[$4>>2];
 $38 = $36 * $37;
 $39 = $34 + $38;
 $40 = ((($1)) + 24|0);
 $41 = +HEAPF32[$40>>2];
 $42 = +HEAPF32[$5>>2];
 $43 = $41 * $42;
 $44 = $39 + $43;
 $45 = ((($1)) + 28|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $44 + $46;
 $48 = HEAP32[$2>>2]|0;
 $49 = ((($48)) + 4|0);
 HEAPF32[$49>>2] = $47;
 $50 = ((($1)) + 32|0);
 $51 = +HEAPF32[$50>>2];
 $52 = +HEAPF32[$3>>2];
 $53 = $51 * $52;
 $54 = ((($1)) + 36|0);
 $55 = +HEAPF32[$54>>2];
 $56 = +HEAPF32[$4>>2];
 $57 = $55 * $56;
 $58 = $53 + $57;
 $59 = ((($1)) + 40|0);
 $60 = +HEAPF32[$59>>2];
 $61 = +HEAPF32[$5>>2];
 $62 = $60 * $61;
 $63 = $58 + $62;
 $64 = ((($1)) + 44|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $63 + $65;
 $67 = HEAP32[$2>>2]|0;
 $68 = ((($67)) + 8|0);
 HEAPF32[$68>>2] = $66;
 STACKTOP = sp;return;
}
function _MatrixIdentity($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp;
 dest=$1; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAPF32[$1>>2] = 1.0;
 $2 = ((($1)) + 20|0);
 HEAPF32[$2>>2] = 1.0;
 $3 = ((($1)) + 40|0);
 HEAPF32[$3>>2] = 1.0;
 $4 = ((($1)) + 60|0);
 HEAPF32[$4>>2] = 1.0;
 dest=$0; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixTranslate($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 72|0;
 $5 = sp + 68|0;
 $6 = sp + 64|0;
 $7 = sp;
 HEAPF32[$4>>2] = $1;
 HEAPF32[$5>>2] = $2;
 HEAPF32[$6>>2] = $3;
 HEAPF32[$7>>2] = 1.0;
 $8 = ((($7)) + 4|0);
 HEAPF32[$8>>2] = 0.0;
 $9 = ((($7)) + 8|0);
 HEAPF32[$9>>2] = 0.0;
 $10 = ((($7)) + 12|0);
 $11 = +HEAPF32[$4>>2];
 HEAPF32[$10>>2] = $11;
 $12 = ((($7)) + 16|0);
 HEAPF32[$12>>2] = 0.0;
 $13 = ((($7)) + 20|0);
 HEAPF32[$13>>2] = 1.0;
 $14 = ((($7)) + 24|0);
 HEAPF32[$14>>2] = 0.0;
 $15 = ((($7)) + 28|0);
 $16 = +HEAPF32[$5>>2];
 HEAPF32[$15>>2] = $16;
 $17 = ((($7)) + 32|0);
 HEAPF32[$17>>2] = 0.0;
 $18 = ((($7)) + 36|0);
 HEAPF32[$18>>2] = 0.0;
 $19 = ((($7)) + 40|0);
 HEAPF32[$19>>2] = 1.0;
 $20 = ((($7)) + 44|0);
 $21 = +HEAPF32[$6>>2];
 HEAPF32[$20>>2] = $21;
 $22 = ((($7)) + 48|0);
 HEAPF32[$22>>2] = 0.0;
 $23 = ((($7)) + 52|0);
 HEAPF32[$23>>2] = 0.0;
 $24 = ((($7)) + 56|0);
 HEAPF32[$24>>2] = 0.0;
 $25 = ((($7)) + 60|0);
 HEAPF32[$25>>2] = 1.0;
 dest=$0; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixRotate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0.0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0;
 var $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0;
 var $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0;
 var $98 = 0.0, $99 = 0.0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp + 240|0;
 $4 = sp + 176|0;
 $5 = sp + 112|0;
 $6 = sp + 108|0;
 $7 = sp + 104|0;
 $8 = sp + 100|0;
 $9 = sp + 96|0;
 $10 = sp + 92|0;
 $11 = sp + 88|0;
 $12 = sp + 84|0;
 $13 = sp + 80|0;
 $14 = sp + 76|0;
 $15 = sp + 72|0;
 $16 = sp + 68|0;
 $17 = sp + 64|0;
 $18 = sp + 60|0;
 $19 = sp + 56|0;
 $20 = sp + 52|0;
 $21 = sp + 48|0;
 $22 = sp + 44|0;
 $23 = sp + 40|0;
 $24 = sp + 36|0;
 $25 = sp + 32|0;
 $26 = sp + 28|0;
 $27 = sp + 24|0;
 $28 = sp + 20|0;
 $29 = sp + 16|0;
 $30 = sp + 12|0;
 $31 = sp + 8|0;
 $32 = sp + 4|0;
 $33 = sp;
 HEAPF32[$3>>2] = $2;
 _MatrixIdentity($5);
 $34 = +HEAPF32[$1>>2];
 HEAPF32[$6>>2] = $34;
 $35 = ((($1)) + 4|0);
 $36 = +HEAPF32[$35>>2];
 HEAPF32[$7>>2] = $36;
 $37 = ((($1)) + 8|0);
 $38 = +HEAPF32[$37>>2];
 HEAPF32[$8>>2] = $38;
 $39 = +HEAPF32[$6>>2];
 $40 = +HEAPF32[$6>>2];
 $41 = $39 * $40;
 $42 = +HEAPF32[$7>>2];
 $43 = +HEAPF32[$7>>2];
 $44 = $42 * $43;
 $45 = $41 + $44;
 $46 = +HEAPF32[$8>>2];
 $47 = +HEAPF32[$8>>2];
 $48 = $46 * $47;
 $49 = $45 + $48;
 $50 = (+Math_sqrt((+$49)));
 HEAPF32[$9>>2] = $50;
 $51 = +HEAPF32[$9>>2];
 $52 = $51 != 1.0;
 $53 = +HEAPF32[$9>>2];
 $54 = $53 != 0.0;
 $or$cond = $52 & $54;
 if ($or$cond) {
  $55 = +HEAPF32[$9>>2];
  $56 = 1.0 / $55;
  HEAPF32[$9>>2] = $56;
  $57 = +HEAPF32[$9>>2];
  $58 = +HEAPF32[$6>>2];
  $59 = $58 * $57;
  HEAPF32[$6>>2] = $59;
  $60 = +HEAPF32[$9>>2];
  $61 = +HEAPF32[$7>>2];
  $62 = $61 * $60;
  HEAPF32[$7>>2] = $62;
  $63 = +HEAPF32[$9>>2];
  $64 = +HEAPF32[$8>>2];
  $65 = $64 * $63;
  HEAPF32[$8>>2] = $65;
 }
 $66 = +HEAPF32[$3>>2];
 $67 = (+Math_sin((+$66)));
 HEAPF32[$10>>2] = $67;
 $68 = +HEAPF32[$3>>2];
 $69 = (+Math_cos((+$68)));
 HEAPF32[$11>>2] = $69;
 $70 = +HEAPF32[$11>>2];
 $71 = 1.0 - $70;
 HEAPF32[$12>>2] = $71;
 $72 = +HEAPF32[$5>>2];
 HEAPF32[$13>>2] = $72;
 $73 = ((($5)) + 16|0);
 $74 = +HEAPF32[$73>>2];
 HEAPF32[$14>>2] = $74;
 $75 = ((($5)) + 32|0);
 $76 = +HEAPF32[$75>>2];
 HEAPF32[$15>>2] = $76;
 $77 = ((($5)) + 48|0);
 $78 = +HEAPF32[$77>>2];
 HEAPF32[$16>>2] = $78;
 $79 = ((($5)) + 4|0);
 $80 = +HEAPF32[$79>>2];
 HEAPF32[$17>>2] = $80;
 $81 = ((($5)) + 20|0);
 $82 = +HEAPF32[$81>>2];
 HEAPF32[$18>>2] = $82;
 $83 = ((($5)) + 36|0);
 $84 = +HEAPF32[$83>>2];
 HEAPF32[$19>>2] = $84;
 $85 = ((($5)) + 52|0);
 $86 = +HEAPF32[$85>>2];
 HEAPF32[$20>>2] = $86;
 $87 = ((($5)) + 8|0);
 $88 = +HEAPF32[$87>>2];
 HEAPF32[$21>>2] = $88;
 $89 = ((($5)) + 24|0);
 $90 = +HEAPF32[$89>>2];
 HEAPF32[$22>>2] = $90;
 $91 = ((($5)) + 40|0);
 $92 = +HEAPF32[$91>>2];
 HEAPF32[$23>>2] = $92;
 $93 = ((($5)) + 56|0);
 $94 = +HEAPF32[$93>>2];
 HEAPF32[$24>>2] = $94;
 $95 = +HEAPF32[$6>>2];
 $96 = +HEAPF32[$6>>2];
 $97 = $95 * $96;
 $98 = +HEAPF32[$12>>2];
 $99 = $97 * $98;
 $100 = +HEAPF32[$11>>2];
 $101 = $99 + $100;
 HEAPF32[$25>>2] = $101;
 $102 = +HEAPF32[$7>>2];
 $103 = +HEAPF32[$6>>2];
 $104 = $102 * $103;
 $105 = +HEAPF32[$12>>2];
 $106 = $104 * $105;
 $107 = +HEAPF32[$8>>2];
 $108 = +HEAPF32[$10>>2];
 $109 = $107 * $108;
 $110 = $106 + $109;
 HEAPF32[$26>>2] = $110;
 $111 = +HEAPF32[$8>>2];
 $112 = +HEAPF32[$6>>2];
 $113 = $111 * $112;
 $114 = +HEAPF32[$12>>2];
 $115 = $113 * $114;
 $116 = +HEAPF32[$7>>2];
 $117 = +HEAPF32[$10>>2];
 $118 = $116 * $117;
 $119 = $115 - $118;
 HEAPF32[$27>>2] = $119;
 $120 = +HEAPF32[$6>>2];
 $121 = +HEAPF32[$7>>2];
 $122 = $120 * $121;
 $123 = +HEAPF32[$12>>2];
 $124 = $122 * $123;
 $125 = +HEAPF32[$8>>2];
 $126 = +HEAPF32[$10>>2];
 $127 = $125 * $126;
 $128 = $124 - $127;
 HEAPF32[$28>>2] = $128;
 $129 = +HEAPF32[$7>>2];
 $130 = +HEAPF32[$7>>2];
 $131 = $129 * $130;
 $132 = +HEAPF32[$12>>2];
 $133 = $131 * $132;
 $134 = +HEAPF32[$11>>2];
 $135 = $133 + $134;
 HEAPF32[$29>>2] = $135;
 $136 = +HEAPF32[$8>>2];
 $137 = +HEAPF32[$7>>2];
 $138 = $136 * $137;
 $139 = +HEAPF32[$12>>2];
 $140 = $138 * $139;
 $141 = +HEAPF32[$6>>2];
 $142 = +HEAPF32[$10>>2];
 $143 = $141 * $142;
 $144 = $140 + $143;
 HEAPF32[$30>>2] = $144;
 $145 = +HEAPF32[$6>>2];
 $146 = +HEAPF32[$8>>2];
 $147 = $145 * $146;
 $148 = +HEAPF32[$12>>2];
 $149 = $147 * $148;
 $150 = +HEAPF32[$7>>2];
 $151 = +HEAPF32[$10>>2];
 $152 = $150 * $151;
 $153 = $149 + $152;
 HEAPF32[$31>>2] = $153;
 $154 = +HEAPF32[$7>>2];
 $155 = +HEAPF32[$8>>2];
 $156 = $154 * $155;
 $157 = +HEAPF32[$12>>2];
 $158 = $156 * $157;
 $159 = +HEAPF32[$6>>2];
 $160 = +HEAPF32[$10>>2];
 $161 = $159 * $160;
 $162 = $158 - $161;
 HEAPF32[$32>>2] = $162;
 $163 = +HEAPF32[$8>>2];
 $164 = +HEAPF32[$8>>2];
 $165 = $163 * $164;
 $166 = +HEAPF32[$12>>2];
 $167 = $165 * $166;
 $168 = +HEAPF32[$11>>2];
 $169 = $167 + $168;
 HEAPF32[$33>>2] = $169;
 $170 = +HEAPF32[$13>>2];
 $171 = +HEAPF32[$25>>2];
 $172 = $170 * $171;
 $173 = +HEAPF32[$17>>2];
 $174 = +HEAPF32[$26>>2];
 $175 = $173 * $174;
 $176 = $172 + $175;
 $177 = +HEAPF32[$21>>2];
 $178 = +HEAPF32[$27>>2];
 $179 = $177 * $178;
 $180 = $176 + $179;
 HEAPF32[$4>>2] = $180;
 $181 = +HEAPF32[$14>>2];
 $182 = +HEAPF32[$25>>2];
 $183 = $181 * $182;
 $184 = +HEAPF32[$18>>2];
 $185 = +HEAPF32[$26>>2];
 $186 = $184 * $185;
 $187 = $183 + $186;
 $188 = +HEAPF32[$22>>2];
 $189 = +HEAPF32[$27>>2];
 $190 = $188 * $189;
 $191 = $187 + $190;
 $192 = ((($4)) + 16|0);
 HEAPF32[$192>>2] = $191;
 $193 = +HEAPF32[$15>>2];
 $194 = +HEAPF32[$25>>2];
 $195 = $193 * $194;
 $196 = +HEAPF32[$19>>2];
 $197 = +HEAPF32[$26>>2];
 $198 = $196 * $197;
 $199 = $195 + $198;
 $200 = +HEAPF32[$23>>2];
 $201 = +HEAPF32[$27>>2];
 $202 = $200 * $201;
 $203 = $199 + $202;
 $204 = ((($4)) + 32|0);
 HEAPF32[$204>>2] = $203;
 $205 = +HEAPF32[$16>>2];
 $206 = +HEAPF32[$25>>2];
 $207 = $205 * $206;
 $208 = +HEAPF32[$20>>2];
 $209 = +HEAPF32[$26>>2];
 $210 = $208 * $209;
 $211 = $207 + $210;
 $212 = +HEAPF32[$24>>2];
 $213 = +HEAPF32[$27>>2];
 $214 = $212 * $213;
 $215 = $211 + $214;
 $216 = ((($4)) + 48|0);
 HEAPF32[$216>>2] = $215;
 $217 = +HEAPF32[$13>>2];
 $218 = +HEAPF32[$28>>2];
 $219 = $217 * $218;
 $220 = +HEAPF32[$17>>2];
 $221 = +HEAPF32[$29>>2];
 $222 = $220 * $221;
 $223 = $219 + $222;
 $224 = +HEAPF32[$21>>2];
 $225 = +HEAPF32[$30>>2];
 $226 = $224 * $225;
 $227 = $223 + $226;
 $228 = ((($4)) + 4|0);
 HEAPF32[$228>>2] = $227;
 $229 = +HEAPF32[$14>>2];
 $230 = +HEAPF32[$28>>2];
 $231 = $229 * $230;
 $232 = +HEAPF32[$18>>2];
 $233 = +HEAPF32[$29>>2];
 $234 = $232 * $233;
 $235 = $231 + $234;
 $236 = +HEAPF32[$22>>2];
 $237 = +HEAPF32[$30>>2];
 $238 = $236 * $237;
 $239 = $235 + $238;
 $240 = ((($4)) + 20|0);
 HEAPF32[$240>>2] = $239;
 $241 = +HEAPF32[$15>>2];
 $242 = +HEAPF32[$28>>2];
 $243 = $241 * $242;
 $244 = +HEAPF32[$19>>2];
 $245 = +HEAPF32[$29>>2];
 $246 = $244 * $245;
 $247 = $243 + $246;
 $248 = +HEAPF32[$23>>2];
 $249 = +HEAPF32[$30>>2];
 $250 = $248 * $249;
 $251 = $247 + $250;
 $252 = ((($4)) + 36|0);
 HEAPF32[$252>>2] = $251;
 $253 = +HEAPF32[$16>>2];
 $254 = +HEAPF32[$28>>2];
 $255 = $253 * $254;
 $256 = +HEAPF32[$20>>2];
 $257 = +HEAPF32[$29>>2];
 $258 = $256 * $257;
 $259 = $255 + $258;
 $260 = +HEAPF32[$24>>2];
 $261 = +HEAPF32[$30>>2];
 $262 = $260 * $261;
 $263 = $259 + $262;
 $264 = ((($4)) + 52|0);
 HEAPF32[$264>>2] = $263;
 $265 = +HEAPF32[$13>>2];
 $266 = +HEAPF32[$31>>2];
 $267 = $265 * $266;
 $268 = +HEAPF32[$17>>2];
 $269 = +HEAPF32[$32>>2];
 $270 = $268 * $269;
 $271 = $267 + $270;
 $272 = +HEAPF32[$21>>2];
 $273 = +HEAPF32[$33>>2];
 $274 = $272 * $273;
 $275 = $271 + $274;
 $276 = ((($4)) + 8|0);
 HEAPF32[$276>>2] = $275;
 $277 = +HEAPF32[$14>>2];
 $278 = +HEAPF32[$31>>2];
 $279 = $277 * $278;
 $280 = +HEAPF32[$18>>2];
 $281 = +HEAPF32[$32>>2];
 $282 = $280 * $281;
 $283 = $279 + $282;
 $284 = +HEAPF32[$22>>2];
 $285 = +HEAPF32[$33>>2];
 $286 = $284 * $285;
 $287 = $283 + $286;
 $288 = ((($4)) + 24|0);
 HEAPF32[$288>>2] = $287;
 $289 = +HEAPF32[$15>>2];
 $290 = +HEAPF32[$31>>2];
 $291 = $289 * $290;
 $292 = +HEAPF32[$19>>2];
 $293 = +HEAPF32[$32>>2];
 $294 = $292 * $293;
 $295 = $291 + $294;
 $296 = +HEAPF32[$23>>2];
 $297 = +HEAPF32[$33>>2];
 $298 = $296 * $297;
 $299 = $295 + $298;
 $300 = ((($4)) + 40|0);
 HEAPF32[$300>>2] = $299;
 $301 = +HEAPF32[$16>>2];
 $302 = +HEAPF32[$31>>2];
 $303 = $301 * $302;
 $304 = +HEAPF32[$20>>2];
 $305 = +HEAPF32[$32>>2];
 $306 = $304 * $305;
 $307 = $303 + $306;
 $308 = +HEAPF32[$24>>2];
 $309 = +HEAPF32[$33>>2];
 $310 = $308 * $309;
 $311 = $307 + $310;
 $312 = ((($4)) + 56|0);
 HEAPF32[$312>>2] = $311;
 $313 = ((($5)) + 12|0);
 $314 = +HEAPF32[$313>>2];
 $315 = ((($4)) + 12|0);
 HEAPF32[$315>>2] = $314;
 $316 = ((($5)) + 28|0);
 $317 = +HEAPF32[$316>>2];
 $318 = ((($4)) + 28|0);
 HEAPF32[$318>>2] = $317;
 $319 = ((($5)) + 44|0);
 $320 = +HEAPF32[$319>>2];
 $321 = ((($4)) + 44|0);
 HEAPF32[$321>>2] = $320;
 $322 = ((($5)) + 60|0);
 $323 = +HEAPF32[$322>>2];
 $324 = ((($4)) + 60|0);
 HEAPF32[$324>>2] = $323;
 dest=$0; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixScale($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 72|0;
 $5 = sp + 68|0;
 $6 = sp + 64|0;
 $7 = sp;
 HEAPF32[$4>>2] = $1;
 HEAPF32[$5>>2] = $2;
 HEAPF32[$6>>2] = $3;
 dest=$7; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $8 = +HEAPF32[$4>>2];
 HEAPF32[$7>>2] = $8;
 $9 = ((($7)) + 20|0);
 $10 = +HEAPF32[$5>>2];
 HEAPF32[$9>>2] = $10;
 $11 = ((($7)) + 40|0);
 $12 = +HEAPF32[$6>>2];
 HEAPF32[$11>>2] = $12;
 $13 = ((($7)) + 60|0);
 HEAPF32[$13>>2] = 1.0;
 dest=$0; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixMultiply($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0.0;
 var $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0.0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0;
 var $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0, $28 = 0.0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $3 = 0, $30 = 0.0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0.0;
 var $317 = 0.0, $318 = 0, $319 = 0.0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0, $334 = 0.0;
 var $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0.0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0;
 var $353 = 0.0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0.0;
 var $371 = 0.0, $372 = 0, $373 = 0.0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0;
 var $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = +HEAPF32[$1>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $4 * $5;
 $7 = ((($1)) + 16|0);
 $8 = +HEAPF32[$7>>2];
 $9 = ((($2)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $8 * $10;
 $12 = $6 + $11;
 $13 = ((($1)) + 32|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($2)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $14 * $16;
 $18 = $12 + $17;
 $19 = ((($1)) + 48|0);
 $20 = +HEAPF32[$19>>2];
 $21 = ((($2)) + 12|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $20 * $22;
 $24 = $18 + $23;
 HEAPF32[$3>>2] = $24;
 $25 = +HEAPF32[$1>>2];
 $26 = ((($2)) + 16|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $25 * $27;
 $29 = ((($1)) + 16|0);
 $30 = +HEAPF32[$29>>2];
 $31 = ((($2)) + 20|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $30 * $32;
 $34 = $28 + $33;
 $35 = ((($1)) + 32|0);
 $36 = +HEAPF32[$35>>2];
 $37 = ((($2)) + 24|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $36 * $38;
 $40 = $34 + $39;
 $41 = ((($1)) + 48|0);
 $42 = +HEAPF32[$41>>2];
 $43 = ((($2)) + 28|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $42 * $44;
 $46 = $40 + $45;
 $47 = ((($3)) + 16|0);
 HEAPF32[$47>>2] = $46;
 $48 = +HEAPF32[$1>>2];
 $49 = ((($2)) + 32|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $48 * $50;
 $52 = ((($1)) + 16|0);
 $53 = +HEAPF32[$52>>2];
 $54 = ((($2)) + 36|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $53 * $55;
 $57 = $51 + $56;
 $58 = ((($1)) + 32|0);
 $59 = +HEAPF32[$58>>2];
 $60 = ((($2)) + 40|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $59 * $61;
 $63 = $57 + $62;
 $64 = ((($1)) + 48|0);
 $65 = +HEAPF32[$64>>2];
 $66 = ((($2)) + 44|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $65 * $67;
 $69 = $63 + $68;
 $70 = ((($3)) + 32|0);
 HEAPF32[$70>>2] = $69;
 $71 = +HEAPF32[$1>>2];
 $72 = ((($2)) + 48|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $71 * $73;
 $75 = ((($1)) + 16|0);
 $76 = +HEAPF32[$75>>2];
 $77 = ((($2)) + 52|0);
 $78 = +HEAPF32[$77>>2];
 $79 = $76 * $78;
 $80 = $74 + $79;
 $81 = ((($1)) + 32|0);
 $82 = +HEAPF32[$81>>2];
 $83 = ((($2)) + 56|0);
 $84 = +HEAPF32[$83>>2];
 $85 = $82 * $84;
 $86 = $80 + $85;
 $87 = ((($1)) + 48|0);
 $88 = +HEAPF32[$87>>2];
 $89 = ((($2)) + 60|0);
 $90 = +HEAPF32[$89>>2];
 $91 = $88 * $90;
 $92 = $86 + $91;
 $93 = ((($3)) + 48|0);
 HEAPF32[$93>>2] = $92;
 $94 = ((($1)) + 4|0);
 $95 = +HEAPF32[$94>>2];
 $96 = +HEAPF32[$2>>2];
 $97 = $95 * $96;
 $98 = ((($1)) + 20|0);
 $99 = +HEAPF32[$98>>2];
 $100 = ((($2)) + 4|0);
 $101 = +HEAPF32[$100>>2];
 $102 = $99 * $101;
 $103 = $97 + $102;
 $104 = ((($1)) + 36|0);
 $105 = +HEAPF32[$104>>2];
 $106 = ((($2)) + 8|0);
 $107 = +HEAPF32[$106>>2];
 $108 = $105 * $107;
 $109 = $103 + $108;
 $110 = ((($1)) + 52|0);
 $111 = +HEAPF32[$110>>2];
 $112 = ((($2)) + 12|0);
 $113 = +HEAPF32[$112>>2];
 $114 = $111 * $113;
 $115 = $109 + $114;
 $116 = ((($3)) + 4|0);
 HEAPF32[$116>>2] = $115;
 $117 = ((($1)) + 4|0);
 $118 = +HEAPF32[$117>>2];
 $119 = ((($2)) + 16|0);
 $120 = +HEAPF32[$119>>2];
 $121 = $118 * $120;
 $122 = ((($1)) + 20|0);
 $123 = +HEAPF32[$122>>2];
 $124 = ((($2)) + 20|0);
 $125 = +HEAPF32[$124>>2];
 $126 = $123 * $125;
 $127 = $121 + $126;
 $128 = ((($1)) + 36|0);
 $129 = +HEAPF32[$128>>2];
 $130 = ((($2)) + 24|0);
 $131 = +HEAPF32[$130>>2];
 $132 = $129 * $131;
 $133 = $127 + $132;
 $134 = ((($1)) + 52|0);
 $135 = +HEAPF32[$134>>2];
 $136 = ((($2)) + 28|0);
 $137 = +HEAPF32[$136>>2];
 $138 = $135 * $137;
 $139 = $133 + $138;
 $140 = ((($3)) + 20|0);
 HEAPF32[$140>>2] = $139;
 $141 = ((($1)) + 4|0);
 $142 = +HEAPF32[$141>>2];
 $143 = ((($2)) + 32|0);
 $144 = +HEAPF32[$143>>2];
 $145 = $142 * $144;
 $146 = ((($1)) + 20|0);
 $147 = +HEAPF32[$146>>2];
 $148 = ((($2)) + 36|0);
 $149 = +HEAPF32[$148>>2];
 $150 = $147 * $149;
 $151 = $145 + $150;
 $152 = ((($1)) + 36|0);
 $153 = +HEAPF32[$152>>2];
 $154 = ((($2)) + 40|0);
 $155 = +HEAPF32[$154>>2];
 $156 = $153 * $155;
 $157 = $151 + $156;
 $158 = ((($1)) + 52|0);
 $159 = +HEAPF32[$158>>2];
 $160 = ((($2)) + 44|0);
 $161 = +HEAPF32[$160>>2];
 $162 = $159 * $161;
 $163 = $157 + $162;
 $164 = ((($3)) + 36|0);
 HEAPF32[$164>>2] = $163;
 $165 = ((($1)) + 4|0);
 $166 = +HEAPF32[$165>>2];
 $167 = ((($2)) + 48|0);
 $168 = +HEAPF32[$167>>2];
 $169 = $166 * $168;
 $170 = ((($1)) + 20|0);
 $171 = +HEAPF32[$170>>2];
 $172 = ((($2)) + 52|0);
 $173 = +HEAPF32[$172>>2];
 $174 = $171 * $173;
 $175 = $169 + $174;
 $176 = ((($1)) + 36|0);
 $177 = +HEAPF32[$176>>2];
 $178 = ((($2)) + 56|0);
 $179 = +HEAPF32[$178>>2];
 $180 = $177 * $179;
 $181 = $175 + $180;
 $182 = ((($1)) + 52|0);
 $183 = +HEAPF32[$182>>2];
 $184 = ((($2)) + 60|0);
 $185 = +HEAPF32[$184>>2];
 $186 = $183 * $185;
 $187 = $181 + $186;
 $188 = ((($3)) + 52|0);
 HEAPF32[$188>>2] = $187;
 $189 = ((($1)) + 8|0);
 $190 = +HEAPF32[$189>>2];
 $191 = +HEAPF32[$2>>2];
 $192 = $190 * $191;
 $193 = ((($1)) + 24|0);
 $194 = +HEAPF32[$193>>2];
 $195 = ((($2)) + 4|0);
 $196 = +HEAPF32[$195>>2];
 $197 = $194 * $196;
 $198 = $192 + $197;
 $199 = ((($1)) + 40|0);
 $200 = +HEAPF32[$199>>2];
 $201 = ((($2)) + 8|0);
 $202 = +HEAPF32[$201>>2];
 $203 = $200 * $202;
 $204 = $198 + $203;
 $205 = ((($1)) + 56|0);
 $206 = +HEAPF32[$205>>2];
 $207 = ((($2)) + 12|0);
 $208 = +HEAPF32[$207>>2];
 $209 = $206 * $208;
 $210 = $204 + $209;
 $211 = ((($3)) + 8|0);
 HEAPF32[$211>>2] = $210;
 $212 = ((($1)) + 8|0);
 $213 = +HEAPF32[$212>>2];
 $214 = ((($2)) + 16|0);
 $215 = +HEAPF32[$214>>2];
 $216 = $213 * $215;
 $217 = ((($1)) + 24|0);
 $218 = +HEAPF32[$217>>2];
 $219 = ((($2)) + 20|0);
 $220 = +HEAPF32[$219>>2];
 $221 = $218 * $220;
 $222 = $216 + $221;
 $223 = ((($1)) + 40|0);
 $224 = +HEAPF32[$223>>2];
 $225 = ((($2)) + 24|0);
 $226 = +HEAPF32[$225>>2];
 $227 = $224 * $226;
 $228 = $222 + $227;
 $229 = ((($1)) + 56|0);
 $230 = +HEAPF32[$229>>2];
 $231 = ((($2)) + 28|0);
 $232 = +HEAPF32[$231>>2];
 $233 = $230 * $232;
 $234 = $228 + $233;
 $235 = ((($3)) + 24|0);
 HEAPF32[$235>>2] = $234;
 $236 = ((($1)) + 8|0);
 $237 = +HEAPF32[$236>>2];
 $238 = ((($2)) + 32|0);
 $239 = +HEAPF32[$238>>2];
 $240 = $237 * $239;
 $241 = ((($1)) + 24|0);
 $242 = +HEAPF32[$241>>2];
 $243 = ((($2)) + 36|0);
 $244 = +HEAPF32[$243>>2];
 $245 = $242 * $244;
 $246 = $240 + $245;
 $247 = ((($1)) + 40|0);
 $248 = +HEAPF32[$247>>2];
 $249 = ((($2)) + 40|0);
 $250 = +HEAPF32[$249>>2];
 $251 = $248 * $250;
 $252 = $246 + $251;
 $253 = ((($1)) + 56|0);
 $254 = +HEAPF32[$253>>2];
 $255 = ((($2)) + 44|0);
 $256 = +HEAPF32[$255>>2];
 $257 = $254 * $256;
 $258 = $252 + $257;
 $259 = ((($3)) + 40|0);
 HEAPF32[$259>>2] = $258;
 $260 = ((($1)) + 8|0);
 $261 = +HEAPF32[$260>>2];
 $262 = ((($2)) + 48|0);
 $263 = +HEAPF32[$262>>2];
 $264 = $261 * $263;
 $265 = ((($1)) + 24|0);
 $266 = +HEAPF32[$265>>2];
 $267 = ((($2)) + 52|0);
 $268 = +HEAPF32[$267>>2];
 $269 = $266 * $268;
 $270 = $264 + $269;
 $271 = ((($1)) + 40|0);
 $272 = +HEAPF32[$271>>2];
 $273 = ((($2)) + 56|0);
 $274 = +HEAPF32[$273>>2];
 $275 = $272 * $274;
 $276 = $270 + $275;
 $277 = ((($1)) + 56|0);
 $278 = +HEAPF32[$277>>2];
 $279 = ((($2)) + 60|0);
 $280 = +HEAPF32[$279>>2];
 $281 = $278 * $280;
 $282 = $276 + $281;
 $283 = ((($3)) + 56|0);
 HEAPF32[$283>>2] = $282;
 $284 = ((($1)) + 12|0);
 $285 = +HEAPF32[$284>>2];
 $286 = +HEAPF32[$2>>2];
 $287 = $285 * $286;
 $288 = ((($1)) + 28|0);
 $289 = +HEAPF32[$288>>2];
 $290 = ((($2)) + 4|0);
 $291 = +HEAPF32[$290>>2];
 $292 = $289 * $291;
 $293 = $287 + $292;
 $294 = ((($1)) + 44|0);
 $295 = +HEAPF32[$294>>2];
 $296 = ((($2)) + 8|0);
 $297 = +HEAPF32[$296>>2];
 $298 = $295 * $297;
 $299 = $293 + $298;
 $300 = ((($1)) + 60|0);
 $301 = +HEAPF32[$300>>2];
 $302 = ((($2)) + 12|0);
 $303 = +HEAPF32[$302>>2];
 $304 = $301 * $303;
 $305 = $299 + $304;
 $306 = ((($3)) + 12|0);
 HEAPF32[$306>>2] = $305;
 $307 = ((($1)) + 12|0);
 $308 = +HEAPF32[$307>>2];
 $309 = ((($2)) + 16|0);
 $310 = +HEAPF32[$309>>2];
 $311 = $308 * $310;
 $312 = ((($1)) + 28|0);
 $313 = +HEAPF32[$312>>2];
 $314 = ((($2)) + 20|0);
 $315 = +HEAPF32[$314>>2];
 $316 = $313 * $315;
 $317 = $311 + $316;
 $318 = ((($1)) + 44|0);
 $319 = +HEAPF32[$318>>2];
 $320 = ((($2)) + 24|0);
 $321 = +HEAPF32[$320>>2];
 $322 = $319 * $321;
 $323 = $317 + $322;
 $324 = ((($1)) + 60|0);
 $325 = +HEAPF32[$324>>2];
 $326 = ((($2)) + 28|0);
 $327 = +HEAPF32[$326>>2];
 $328 = $325 * $327;
 $329 = $323 + $328;
 $330 = ((($3)) + 28|0);
 HEAPF32[$330>>2] = $329;
 $331 = ((($1)) + 12|0);
 $332 = +HEAPF32[$331>>2];
 $333 = ((($2)) + 32|0);
 $334 = +HEAPF32[$333>>2];
 $335 = $332 * $334;
 $336 = ((($1)) + 28|0);
 $337 = +HEAPF32[$336>>2];
 $338 = ((($2)) + 36|0);
 $339 = +HEAPF32[$338>>2];
 $340 = $337 * $339;
 $341 = $335 + $340;
 $342 = ((($1)) + 44|0);
 $343 = +HEAPF32[$342>>2];
 $344 = ((($2)) + 40|0);
 $345 = +HEAPF32[$344>>2];
 $346 = $343 * $345;
 $347 = $341 + $346;
 $348 = ((($1)) + 60|0);
 $349 = +HEAPF32[$348>>2];
 $350 = ((($2)) + 44|0);
 $351 = +HEAPF32[$350>>2];
 $352 = $349 * $351;
 $353 = $347 + $352;
 $354 = ((($3)) + 44|0);
 HEAPF32[$354>>2] = $353;
 $355 = ((($1)) + 12|0);
 $356 = +HEAPF32[$355>>2];
 $357 = ((($2)) + 48|0);
 $358 = +HEAPF32[$357>>2];
 $359 = $356 * $358;
 $360 = ((($1)) + 28|0);
 $361 = +HEAPF32[$360>>2];
 $362 = ((($2)) + 52|0);
 $363 = +HEAPF32[$362>>2];
 $364 = $361 * $363;
 $365 = $359 + $364;
 $366 = ((($1)) + 44|0);
 $367 = +HEAPF32[$366>>2];
 $368 = ((($2)) + 56|0);
 $369 = +HEAPF32[$368>>2];
 $370 = $367 * $369;
 $371 = $365 + $370;
 $372 = ((($1)) + 60|0);
 $373 = +HEAPF32[$372>>2];
 $374 = ((($2)) + 60|0);
 $375 = +HEAPF32[$374>>2];
 $376 = $373 * $375;
 $377 = $371 + $376;
 $378 = ((($3)) + 60|0);
 HEAPF32[$378>>2] = $377;
 dest=$0; src=$3; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixOrtho($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $7 = sp + 40|0;
 $8 = sp + 32|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $11 = sp + 8|0;
 $12 = sp;
 $13 = sp + 64|0;
 $14 = sp + 56|0;
 $15 = sp + 52|0;
 $16 = sp + 48|0;
 HEAPF64[$7>>3] = $1;
 HEAPF64[$8>>3] = $2;
 HEAPF64[$9>>3] = $3;
 HEAPF64[$10>>3] = $4;
 HEAPF64[$11>>3] = $5;
 HEAPF64[$12>>3] = $6;
 $17 = +HEAPF64[$8>>3];
 $18 = +HEAPF64[$7>>3];
 $19 = $17 - $18;
 $20 = $19;
 HEAPF32[$14>>2] = $20;
 $21 = +HEAPF64[$10>>3];
 $22 = +HEAPF64[$9>>3];
 $23 = $21 - $22;
 $24 = $23;
 HEAPF32[$15>>2] = $24;
 $25 = +HEAPF64[$12>>3];
 $26 = +HEAPF64[$11>>3];
 $27 = $25 - $26;
 $28 = $27;
 HEAPF32[$16>>2] = $28;
 $29 = +HEAPF32[$14>>2];
 $30 = 2.0 / $29;
 HEAPF32[$13>>2] = $30;
 $31 = ((($13)) + 16|0);
 HEAPF32[$31>>2] = 0.0;
 $32 = ((($13)) + 32|0);
 HEAPF32[$32>>2] = 0.0;
 $33 = ((($13)) + 48|0);
 HEAPF32[$33>>2] = 0.0;
 $34 = ((($13)) + 4|0);
 HEAPF32[$34>>2] = 0.0;
 $35 = +HEAPF32[$15>>2];
 $36 = 2.0 / $35;
 $37 = ((($13)) + 20|0);
 HEAPF32[$37>>2] = $36;
 $38 = ((($13)) + 36|0);
 HEAPF32[$38>>2] = 0.0;
 $39 = ((($13)) + 52|0);
 HEAPF32[$39>>2] = 0.0;
 $40 = ((($13)) + 8|0);
 HEAPF32[$40>>2] = 0.0;
 $41 = ((($13)) + 24|0);
 HEAPF32[$41>>2] = 0.0;
 $42 = +HEAPF32[$16>>2];
 $43 = -2.0 / $42;
 $44 = ((($13)) + 40|0);
 HEAPF32[$44>>2] = $43;
 $45 = ((($13)) + 56|0);
 HEAPF32[$45>>2] = 0.0;
 $46 = +HEAPF64[$7>>3];
 $47 = +HEAPF64[$8>>3];
 $48 = $46 + $47;
 $49 = -$48;
 $50 = +HEAPF32[$14>>2];
 $51 = $50;
 $52 = $49 / $51;
 $53 = $52;
 $54 = ((($13)) + 12|0);
 HEAPF32[$54>>2] = $53;
 $55 = +HEAPF64[$10>>3];
 $56 = +HEAPF64[$9>>3];
 $57 = $55 + $56;
 $58 = -$57;
 $59 = +HEAPF32[$15>>2];
 $60 = $59;
 $61 = $58 / $60;
 $62 = $61;
 $63 = ((($13)) + 28|0);
 HEAPF32[$63>>2] = $62;
 $64 = +HEAPF64[$12>>3];
 $65 = +HEAPF64[$11>>3];
 $66 = $64 + $65;
 $67 = -$66;
 $68 = +HEAPF32[$16>>2];
 $69 = $68;
 $70 = $67 / $69;
 $71 = $70;
 $72 = ((($13)) + 44|0);
 HEAPF32[$72>>2] = $71;
 $73 = ((($13)) + 60|0);
 HEAPF32[$73>>2] = 1.0;
 dest=$0; src=$13; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixToFloat($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[$0>>2];
 HEAPF32[5403] = $1;
 $2 = ((($0)) + 16|0);
 $3 = +HEAPF32[$2>>2];
 HEAPF32[(21616)>>2] = $3;
 $4 = ((($0)) + 32|0);
 $5 = +HEAPF32[$4>>2];
 HEAPF32[(21620)>>2] = $5;
 $6 = ((($0)) + 48|0);
 $7 = +HEAPF32[$6>>2];
 HEAPF32[(21624)>>2] = $7;
 $8 = ((($0)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 HEAPF32[(21628)>>2] = $9;
 $10 = ((($0)) + 20|0);
 $11 = +HEAPF32[$10>>2];
 HEAPF32[(21632)>>2] = $11;
 $12 = ((($0)) + 36|0);
 $13 = +HEAPF32[$12>>2];
 HEAPF32[(21636)>>2] = $13;
 $14 = ((($0)) + 52|0);
 $15 = +HEAPF32[$14>>2];
 HEAPF32[(21640)>>2] = $15;
 $16 = ((($0)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 HEAPF32[(21644)>>2] = $17;
 $18 = ((($0)) + 24|0);
 $19 = +HEAPF32[$18>>2];
 HEAPF32[(21648)>>2] = $19;
 $20 = ((($0)) + 40|0);
 $21 = +HEAPF32[$20>>2];
 HEAPF32[(21652)>>2] = $21;
 $22 = ((($0)) + 56|0);
 $23 = +HEAPF32[$22>>2];
 HEAPF32[(21656)>>2] = $23;
 $24 = ((($0)) + 12|0);
 $25 = +HEAPF32[$24>>2];
 HEAPF32[(21660)>>2] = $25;
 $26 = ((($0)) + 28|0);
 $27 = +HEAPF32[$26>>2];
 HEAPF32[(21664)>>2] = $27;
 $28 = ((($0)) + 44|0);
 $29 = +HEAPF32[$28>>2];
 HEAPF32[(21668)>>2] = $29;
 $30 = ((($0)) + 60|0);
 $31 = +HEAPF32[$30>>2];
 HEAPF32[(21672)>>2] = $31;
 return (21612|0);
}
function _ProcessGestureEvent($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink10 = 0, $$sink11 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0;
 var $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0;
 var $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $moveDownPosition$byval_copy22 = 0, $moveDownPosition2$byval_copy23 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $moveDownPosition2$byval_copy23 = sp + 32|0;
 $moveDownPosition$byval_copy22 = sp + 24|0;
 $1 = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[5420] = $5;
 $6 = HEAP32[5420]|0;
 $7 = ($6|0)<(2);
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)==(1);
 if (!($7)) {
  if ($9) {
   $89 = ((($0)) + 24|0);
   ;HEAP32[21688>>2]=HEAP32[$89>>2]|0;HEAP32[21688+4>>2]=HEAP32[$89+4>>2]|0;
   $90 = ((($0)) + 24|0);
   $91 = ((($90)) + 8|0);
   ;HEAP32[21748>>2]=HEAP32[$91>>2]|0;HEAP32[21748+4>>2]=HEAP32[$91+4>>2]|0;
   $92 = +HEAPF32[5437];
   $93 = +HEAPF32[5422];
   $94 = $92 - $93;
   HEAPF32[5439] = $94;
   $95 = +HEAPF32[(21752)>>2];
   $96 = +HEAPF32[(21692)>>2];
   $97 = $95 - $96;
   HEAPF32[(21760)>>2] = $97;
   HEAP32[5419] = 4;
   $98 = (+_GetCurrentTime());
   HEAPF64[2689] = $98;
   STACKTOP = sp;return;
  }
  $99 = HEAP32[$0>>2]|0;
  $100 = ($99|0)==(2);
  if (!($100)) {
   $122 = HEAP32[$0>>2]|0;
   $123 = ($122|0)==(0);
   if (!($123)) {
    STACKTOP = sp;return;
   }
   HEAPF32[5443] = 0.0;
   HEAPF32[5444] = 0.0;
   HEAPF32[$3>>2] = 0.0;
   $124 = ((($3)) + 4|0);
   HEAPF32[$124>>2] = 0.0;
   ;HEAP32[21756>>2]=HEAP32[$3>>2]|0;HEAP32[21756+4>>2]=HEAP32[$3+4>>2]|0;
   HEAP32[5420] = 0;
   HEAP32[5419] = 0;
   STACKTOP = sp;return;
  }
  ;HEAP32[$moveDownPosition$byval_copy22>>2]=HEAP32[21736>>2]|0;HEAP32[$moveDownPosition$byval_copy22+4>>2]=HEAP32[21736+4>>2]|0;
  ;HEAP32[$moveDownPosition2$byval_copy23>>2]=HEAP32[21764>>2]|0;HEAP32[$moveDownPosition2$byval_copy23+4>>2]=HEAP32[21764+4>>2]|0;
  $101 = (+_Vector2Distance($moveDownPosition$byval_copy22,$moveDownPosition2$byval_copy23));
  HEAPF32[5443] = $101;
  ;HEAP32[21688>>2]=HEAP32[21736>>2]|0;HEAP32[21688+4>>2]=HEAP32[21736+4>>2]|0;
  ;HEAP32[21748>>2]=HEAP32[21764>>2]|0;HEAP32[21748+4>>2]=HEAP32[21764+4>>2]|0;
  $102 = ((($0)) + 24|0);
  ;HEAP32[21736>>2]=HEAP32[$102>>2]|0;HEAP32[21736+4>>2]=HEAP32[$102+4>>2]|0;
  $103 = ((($0)) + 24|0);
  $104 = ((($103)) + 8|0);
  ;HEAP32[21764>>2]=HEAP32[$104>>2]|0;HEAP32[21764+4>>2]=HEAP32[$104+4>>2]|0;
  $105 = +HEAPF32[5441];
  $106 = +HEAPF32[5434];
  $107 = $105 - $106;
  HEAPF32[5439] = $107;
  $108 = +HEAPF32[(21768)>>2];
  $109 = +HEAPF32[(21740)>>2];
  $110 = $108 - $109;
  HEAPF32[(21760)>>2] = $110;
  ;HEAP32[$moveDownPosition$byval_copy22>>2]=HEAP32[21688>>2]|0;HEAP32[$moveDownPosition$byval_copy22+4>>2]=HEAP32[21688+4>>2]|0;
  ;HEAP32[$moveDownPosition2$byval_copy23>>2]=HEAP32[21736>>2]|0;HEAP32[$moveDownPosition2$byval_copy23+4>>2]=HEAP32[21736+4>>2]|0;
  $111 = (+_Vector2Distance($moveDownPosition$byval_copy22,$moveDownPosition2$byval_copy23));
  $112 = $111 >= 0.004999999888241291;
  if ($112) {
   label = 36;
  } else {
   ;HEAP32[$moveDownPosition$byval_copy22>>2]=HEAP32[21748>>2]|0;HEAP32[$moveDownPosition$byval_copy22+4>>2]=HEAP32[21748+4>>2]|0;
   ;HEAP32[$moveDownPosition2$byval_copy23>>2]=HEAP32[21764>>2]|0;HEAP32[$moveDownPosition2$byval_copy23+4>>2]=HEAP32[21764+4>>2]|0;
   $113 = (+_Vector2Distance($moveDownPosition$byval_copy22,$moveDownPosition2$byval_copy23));
   $114 = $113 >= 0.004999999888241291;
   if ($114) {
    label = 36;
   } else {
    HEAP32[5419] = 4;
    $119 = (+_GetCurrentTime());
    HEAPF64[2689] = $119;
   }
  }
  if ((label|0) == 36) {
   ;HEAP32[$moveDownPosition$byval_copy22>>2]=HEAP32[21736>>2]|0;HEAP32[$moveDownPosition$byval_copy22+4>>2]=HEAP32[21736+4>>2]|0;
   ;HEAP32[$moveDownPosition2$byval_copy23>>2]=HEAP32[21764>>2]|0;HEAP32[$moveDownPosition2$byval_copy23+4>>2]=HEAP32[21764+4>>2]|0;
   $115 = (+_Vector2Distance($moveDownPosition$byval_copy22,$moveDownPosition2$byval_copy23));
   $116 = +HEAPF32[5443];
   $117 = $115 - $116;
   $118 = $117 < 0.0;
   $$sink11 = $118 ? 256 : 512;
   HEAP32[5419] = $$sink11;
  }
  ;HEAP32[$moveDownPosition$byval_copy22>>2]=HEAP32[21736>>2]|0;HEAP32[$moveDownPosition$byval_copy22+4>>2]=HEAP32[21736+4>>2]|0;
  ;HEAP32[$moveDownPosition2$byval_copy23>>2]=HEAP32[21764>>2]|0;HEAP32[$moveDownPosition2$byval_copy23+4>>2]=HEAP32[21764+4>>2]|0;
  $120 = (+_Vector2Angle($moveDownPosition$byval_copy22,$moveDownPosition2$byval_copy23));
  $121 = 360.0 - $120;
  HEAPF32[5444] = $121;
  STACKTOP = sp;return;
 }
 if ($9) {
  $10 = HEAP32[5421]|0;
  $11 = (($10) + 1)|0;
  HEAP32[5421] = $11;
  $12 = HEAP32[5419]|0;
  $13 = ($12|0)==(0);
  $14 = HEAP32[5421]|0;
  $15 = ($14|0)>=(2);
  $or$cond = $13 & $15;
  if ($or$cond) {
   $16 = (+_GetCurrentTime());
   $17 = +HEAPF64[2687];
   $18 = $16 - $17;
   $19 = $18 < 300.0;
   if ($19) {
    $20 = ((($0)) + 24|0);
    ;HEAP32[$moveDownPosition$byval_copy22>>2]=HEAP32[21688>>2]|0;HEAP32[$moveDownPosition$byval_copy22+4>>2]=HEAP32[21688+4>>2]|0;
    ;HEAP32[$moveDownPosition2$byval_copy23>>2]=HEAP32[$20>>2]|0;HEAP32[$moveDownPosition2$byval_copy23+4>>2]=HEAP32[$20+4>>2]|0;
    $21 = (+_Vector2Distance($moveDownPosition$byval_copy22,$moveDownPosition2$byval_copy23));
    $22 = $21 < 0.029999999329447746;
    if ($22) {
     HEAP32[5419] = 2;
     HEAP32[5421] = 0;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   HEAP32[5421] = 1;
   HEAP32[5419] = 1;
  }
  $23 = ((($0)) + 24|0);
  ;HEAP32[21688>>2]=HEAP32[$23>>2]|0;HEAP32[21688+4>>2]=HEAP32[$23+4>>2]|0;
  $24 = ((($0)) + 24|0);
  ;HEAP32[21696>>2]=HEAP32[$24>>2]|0;HEAP32[21696+4>>2]=HEAP32[$24+4>>2]|0;
  ;HEAP32[21704>>2]=HEAP32[21688>>2]|0;HEAP32[21704+4>>2]=HEAP32[21688+4>>2]|0;
  $25 = (+_GetCurrentTime());
  HEAPF64[2687] = $25;
  $26 = ((($0)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[4] = $27;
  HEAPF32[$1>>2] = 0.0;
  $28 = ((($1)) + 4|0);
  HEAPF32[$28>>2] = 0.0;
  ;HEAP32[21712>>2]=HEAP32[$1>>2]|0;HEAP32[21712+4>>2]=HEAP32[$1+4>>2]|0;
  STACKTOP = sp;return;
 }
 $29 = HEAP32[$0>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = HEAP32[5419]|0;
  $32 = ($31|0)==(8);
  if ($32) {
   $33 = ((($0)) + 24|0);
   ;HEAP32[21704>>2]=HEAP32[$33>>2]|0;HEAP32[21704+4>>2]=HEAP32[$33+4>>2]|0;
  }
  ;HEAP32[$moveDownPosition$byval_copy22>>2]=HEAP32[21688>>2]|0;HEAP32[$moveDownPosition$byval_copy22+4>>2]=HEAP32[21688+4>>2]|0;
  ;HEAP32[$moveDownPosition2$byval_copy23>>2]=HEAP32[21704>>2]|0;HEAP32[$moveDownPosition2$byval_copy23+4>>2]=HEAP32[21704+4>>2]|0;
  $34 = (+_Vector2Distance($moveDownPosition$byval_copy22,$moveDownPosition2$byval_copy23));
  HEAPF32[5430] = $34;
  $35 = +HEAPF32[5430];
  $36 = (+_GetCurrentTime());
  $37 = +HEAPF64[2688];
  $38 = $36 - $37;
  $39 = $38;
  $40 = $35 / $39;
  HEAPF32[5431] = $40;
  HEAP32[5432] = 0;
  $41 = +HEAPF32[5431];
  $42 = $41 > 5.0000002374872565E-4;
  if ($42) {
   $43 = HEAP32[4]|0;
   $44 = ((($0)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($43|0)==($45|0);
   if ($46) {
    ;HEAP32[$moveDownPosition$byval_copy22>>2]=HEAP32[21688>>2]|0;HEAP32[$moveDownPosition$byval_copy22+4>>2]=HEAP32[21688+4>>2]|0;
    ;HEAP32[$moveDownPosition2$byval_copy23>>2]=HEAP32[21704>>2]|0;HEAP32[$moveDownPosition2$byval_copy23+4>>2]=HEAP32[21704+4>>2]|0;
    $47 = (+_Vector2Angle($moveDownPosition$byval_copy22,$moveDownPosition2$byval_copy23));
    $48 = 360.0 - $47;
    HEAPF32[5433] = $48;
    $49 = +HEAPF32[5433];
    $50 = $49 < 30.0;
    $51 = +HEAPF32[5433];
    $52 = $51 > 330.0;
    $or$cond3 = $50 | $52;
    if ($or$cond3) {
     $$sink10 = 16;
    } else {
     $53 = +HEAPF32[5433];
     $54 = $53 > 30.0;
     $55 = +HEAPF32[5433];
     $56 = $55 < 120.0;
     $or$cond5 = $54 & $56;
     if ($or$cond5) {
      $$sink10 = 64;
     } else {
      $57 = +HEAPF32[5433];
      $58 = $57 > 120.0;
      $59 = +HEAPF32[5433];
      $60 = $59 < 210.0;
      $or$cond7 = $58 & $60;
      if ($or$cond7) {
       $$sink10 = 32;
      } else {
       $61 = +HEAPF32[5433];
       $62 = $61 > 210.0;
       $63 = +HEAPF32[5433];
       $64 = $63 < 300.0;
       $or$cond9 = $62 & $64;
       $$sink = $or$cond9 ? 128 : 0;
       $$sink10 = $$sink;
      }
     }
    }
   } else {
    label = 18;
   }
  } else {
   label = 18;
  }
  if ((label|0) == 18) {
   HEAPF32[5430] = 0.0;
   HEAPF32[5431] = 0.0;
   HEAPF32[5433] = 0.0;
   $$sink10 = 0;
  }
  HEAP32[5419] = $$sink10;
  HEAPF32[$2>>2] = 0.0;
  $65 = ((($2)) + 4|0);
  HEAPF32[$65>>2] = 0.0;
  ;HEAP32[21696>>2]=HEAP32[$2>>2]|0;HEAP32[21696+4>>2]=HEAP32[$2+4>>2]|0;
  HEAP32[5420] = 0;
  STACKTOP = sp;return;
 }
 $66 = HEAP32[$0>>2]|0;
 $67 = ($66|0)==(2);
 if (!($67)) {
  STACKTOP = sp;return;
 }
 $68 = HEAP32[5419]|0;
 $69 = ($68|0)==(8);
 if ($69) {
  $70 = (+_GetCurrentTime());
  HEAPF64[2687] = $70;
 }
 $71 = HEAP32[5432]|0;
 $72 = ($71|0)!=(0);
 if (!($72)) {
  $73 = (+_GetCurrentTime());
  HEAPF64[2688] = $73;
  HEAP32[5432] = 1;
 }
 $74 = ((($0)) + 24|0);
 ;HEAP32[21736>>2]=HEAP32[$74>>2]|0;HEAP32[21736+4>>2]=HEAP32[$74+4>>2]|0;
 $75 = HEAP32[5419]|0;
 $76 = ($75|0)==(4);
 if ($76) {
  $77 = HEAP32[5436]|0;
  $78 = ($77|0)!=(0);
  if ($78) {
   $79 = ((($0)) + 24|0);
   ;HEAP32[21688>>2]=HEAP32[$79>>2]|0;HEAP32[21688+4>>2]=HEAP32[$79+4>>2]|0;
  }
  HEAP32[5436] = 0;
  ;HEAP32[$moveDownPosition$byval_copy22>>2]=HEAP32[21688>>2]|0;HEAP32[$moveDownPosition$byval_copy22+4>>2]=HEAP32[21688+4>>2]|0;
  ;HEAP32[$moveDownPosition2$byval_copy23>>2]=HEAP32[21736>>2]|0;HEAP32[$moveDownPosition2$byval_copy23+4>>2]=HEAP32[21736+4>>2]|0;
  $80 = (+_Vector2Distance($moveDownPosition$byval_copy22,$moveDownPosition2$byval_copy23));
  $81 = $80 >= 0.014999999664723873;
  if ($81) {
   $82 = (+_GetCurrentTime());
   HEAPF64[2687] = $82;
   HEAP32[5419] = 8;
  }
 }
 $83 = +HEAPF32[5434];
 $84 = +HEAPF32[5424];
 $85 = $83 - $84;
 HEAPF32[5428] = $85;
 $86 = +HEAPF32[(21740)>>2];
 $87 = +HEAPF32[(21700)>>2];
 $88 = $86 - $87;
 HEAPF32[(21716)>>2] = $88;
 STACKTOP = sp;return;
}
function _GetCurrentTime() {
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 HEAPF64[$0>>3] = 0.0;
 $1 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$1);
}
function _UpdateGestures() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5419]|0;
 $1 = ($0|0)==(1);
 $2 = HEAP32[5419]|0;
 $3 = ($2|0)==(2);
 $or$cond = $1 | $3;
 $4 = HEAP32[5420]|0;
 $5 = ($4|0)<(2);
 $or$cond3 = $or$cond & $5;
 if ($or$cond3) {
  HEAP32[5419] = 4;
  $6 = (+_GetCurrentTime());
  HEAPF64[2689] = $6;
 }
 $7 = (+_GetCurrentTime());
 $8 = +HEAPF64[2687];
 $9 = $7 - $8;
 $10 = $9 > 300.0;
 $11 = HEAP32[5419]|0;
 $12 = ($11|0)==(8);
 $or$cond5 = $10 & $12;
 $13 = HEAP32[5420]|0;
 $14 = ($13|0)<(2);
 $or$cond7 = $or$cond5 & $14;
 if ($or$cond7) {
  HEAP32[5419] = 4;
  $15 = (+_GetCurrentTime());
  HEAPF64[2689] = $15;
  HEAP32[5436] = 1;
 }
 $16 = HEAP32[5419]|0;
 $17 = ($16|0)==(16);
 $18 = HEAP32[5419]|0;
 $19 = ($18|0)==(64);
 $or$cond9 = $17 | $19;
 $20 = HEAP32[5419]|0;
 $21 = ($20|0)==(32);
 $or$cond11 = $or$cond9 | $21;
 $22 = HEAP32[5419]|0;
 $23 = ($22|0)==(128);
 $or$cond13 = $or$cond11 | $23;
 if (!($or$cond13)) {
  return;
 }
 HEAP32[5419] = 0;
 return;
}
function _GetMousePosition($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[21792>>2]|0;HEAP32[$0+4>>2]=HEAP32[21792+4>>2]|0;
 return;
}
function _GifWriteFrame($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1328|0);
 $6 = sp + 1312|0;
 $7 = sp + 1308|0;
 $8 = sp + 1304|0;
 $9 = sp + 1300|0;
 $10 = sp + 1296|0;
 $11 = sp + 1292|0;
 $12 = sp + 1288|0;
 $13 = sp + 1284|0;
 $14 = sp;
 HEAP32[$7>>2] = $0;
 HEAP32[$8>>2] = $1;
 HEAP32[$9>>2] = $2;
 HEAP32[$10>>2] = $3;
 HEAP32[$11>>2] = $4;
 HEAP32[$12>>2] = $5;
 $15 = HEAP32[5450]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  HEAP32[$6>>2] = 0;
  $39 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($39|0);
 }
 $17 = HEAP32[5402]|0;
 HEAP32[$13>>2] = $17;
 $18 = HEAP32[$12>>2]|0;
 $19 = ($18|0)!=(0);
 $20 = HEAP32[$13>>2]|0;
 $21 = $19 ? 0 : $20;
 $22 = HEAP32[$7>>2]|0;
 $23 = HEAP32[$8>>2]|0;
 $24 = HEAP32[$9>>2]|0;
 $25 = HEAP32[$11>>2]|0;
 $26 = HEAP32[$12>>2]|0;
 _GifMakePalette($21,$22,$23,$24,$25,$26,$14);
 $27 = HEAP32[$12>>2]|0;
 $28 = ($27|0)!=(0);
 $29 = HEAP32[$13>>2]|0;
 $30 = HEAP32[$7>>2]|0;
 $31 = HEAP32[5402]|0;
 $32 = HEAP32[$8>>2]|0;
 $33 = HEAP32[$9>>2]|0;
 if ($28) {
  _GifDitherImage($29,$30,$31,$32,$33,$14);
 } else {
  _GifThresholdImage($29,$30,$31,$32,$33,$14);
 }
 $34 = HEAP32[5450]|0;
 $35 = HEAP32[5402]|0;
 $36 = HEAP32[$8>>2]|0;
 $37 = HEAP32[$9>>2]|0;
 $38 = HEAP32[$10>>2]|0;
 _GifWriteLzwImage($34,$35,0,0,$36,$37,$38,$14);
 HEAP32[$6>>2] = 1;
 $39 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($39|0);
}
function _GifMakePalette($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 48|0;
 $8 = sp + 44|0;
 $9 = sp + 40|0;
 $10 = sp + 36|0;
 $11 = sp + 32|0;
 $12 = sp + 28|0;
 $13 = sp + 24|0;
 $14 = sp + 20|0;
 $15 = sp + 16|0;
 $16 = sp + 12|0;
 $17 = sp + 8|0;
 $18 = sp + 4|0;
 $19 = sp;
 HEAP32[$7>>2] = $0;
 HEAP32[$8>>2] = $1;
 HEAP32[$9>>2] = $2;
 HEAP32[$10>>2] = $3;
 HEAP32[$11>>2] = $4;
 HEAP32[$12>>2] = $5;
 HEAP32[$13>>2] = $6;
 $20 = HEAP32[$11>>2]|0;
 $21 = HEAP32[$13>>2]|0;
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[$9>>2]|0;
 $23 = HEAP32[$10>>2]|0;
 $24 = Math_imul($22, $23)|0;
 $25 = $24<<2;
 $26 = $25;
 HEAP32[$14>>2] = $26;
 $27 = HEAP32[$14>>2]|0;
 $28 = (_malloc($27)|0);
 HEAP32[$15>>2] = $28;
 $29 = HEAP32[$15>>2]|0;
 $30 = HEAP32[$8>>2]|0;
 $31 = HEAP32[$14>>2]|0;
 _memcpy(($29|0),($30|0),($31|0))|0;
 $32 = HEAP32[$9>>2]|0;
 $33 = HEAP32[$10>>2]|0;
 $34 = Math_imul($32, $33)|0;
 HEAP32[$16>>2] = $34;
 $35 = HEAP32[$7>>2]|0;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = HEAP32[$7>>2]|0;
  $38 = HEAP32[$15>>2]|0;
  $39 = HEAP32[$16>>2]|0;
  $40 = (_GifPickChangedPixels($37,$38,$39)|0);
  HEAP32[$16>>2] = $40;
 }
 $41 = HEAP32[$11>>2]|0;
 $42 = 1 << $41;
 HEAP32[$17>>2] = $42;
 $43 = HEAP32[$17>>2]|0;
 $44 = (($43|0) / 2)&-1;
 HEAP32[$18>>2] = $44;
 $45 = HEAP32[$18>>2]|0;
 $46 = (($45|0) / 2)&-1;
 HEAP32[$19>>2] = $46;
 $47 = HEAP32[$15>>2]|0;
 $48 = HEAP32[$16>>2]|0;
 $49 = HEAP32[$17>>2]|0;
 $50 = HEAP32[$18>>2]|0;
 $51 = HEAP32[$19>>2]|0;
 $52 = HEAP32[$12>>2]|0;
 $53 = HEAP32[$13>>2]|0;
 _GifSplitPalette($47,$48,1,$49,$50,$51,1,$52,$53);
 $54 = HEAP32[$15>>2]|0;
 _free($54);
 $55 = HEAP32[$13>>2]|0;
 $56 = ((($55)) + 1027|0);
 $57 = HEAP32[$11>>2]|0;
 $58 = (($57) - 1)|0;
 $59 = 1 << $58;
 $60 = (($56) + ($59)|0);
 HEAP8[$60>>0] = 0;
 $61 = HEAP32[$13>>2]|0;
 $62 = ((($61)) + 772|0);
 $63 = HEAP32[$11>>2]|0;
 $64 = (($63) - 1)|0;
 $65 = 1 << $64;
 $66 = (($62) + ($65)|0);
 HEAP8[$66>>0] = 0;
 $67 = HEAP32[$13>>2]|0;
 $68 = ((($67)) + 516|0);
 HEAP8[$68>>0] = 0;
 $69 = HEAP32[$13>>2]|0;
 $70 = ((($69)) + 260|0);
 HEAP8[$70>>0] = 0;
 $71 = HEAP32[$13>>2]|0;
 $72 = ((($71)) + 4|0);
 HEAP8[$72>>0] = 0;
 STACKTOP = sp;return;
}
function _GifDitherImage($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = sp + 120|0;
 $7 = sp + 116|0;
 $8 = sp + 112|0;
 $9 = sp + 108|0;
 $10 = sp + 104|0;
 $11 = sp + 100|0;
 $12 = sp + 96|0;
 $13 = sp + 92|0;
 $14 = sp + 88|0;
 $15 = sp + 124|0;
 $16 = sp + 84|0;
 $17 = sp + 80|0;
 $18 = sp + 76|0;
 $19 = sp + 72|0;
 $20 = sp + 68|0;
 $21 = sp + 64|0;
 $22 = sp + 60|0;
 $23 = sp + 56|0;
 $24 = sp + 52|0;
 $25 = sp + 48|0;
 $26 = sp + 44|0;
 $27 = sp + 40|0;
 $28 = sp + 36|0;
 $29 = sp + 32|0;
 $30 = sp + 28|0;
 $31 = sp + 24|0;
 $32 = sp + 20|0;
 $33 = sp + 16|0;
 $34 = sp + 12|0;
 $35 = sp + 8|0;
 $36 = sp + 4|0;
 $37 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 HEAP32[$11>>2] = $5;
 $38 = HEAP32[$9>>2]|0;
 $39 = HEAP32[$10>>2]|0;
 $40 = Math_imul($38, $39)|0;
 HEAP32[$12>>2] = $40;
 $41 = HEAP32[$12>>2]|0;
 $42 = $41<<2;
 $43 = $42<<2;
 $44 = (_malloc($43)|0);
 HEAP32[$13>>2] = $44;
 HEAP32[$14>>2] = 0;
 while(1) {
  $45 = HEAP32[$14>>2]|0;
  $46 = HEAP32[$12>>2]|0;
  $47 = $46<<2;
  $48 = ($45|0)<($47|0);
  if (!($48)) {
   break;
  }
  $49 = HEAP32[$7>>2]|0;
  $50 = HEAP32[$14>>2]|0;
  $51 = (($49) + ($50)|0);
  $52 = HEAP8[$51>>0]|0;
  HEAP8[$15>>0] = $52;
  $53 = HEAP8[$15>>0]|0;
  $54 = $53&255;
  $55 = $54<<8;
  HEAP32[$16>>2] = $55;
  $56 = HEAP32[$16>>2]|0;
  $57 = HEAP32[$13>>2]|0;
  $58 = HEAP32[$14>>2]|0;
  $59 = (($57) + ($58<<2)|0);
  HEAP32[$59>>2] = $56;
  $60 = HEAP32[$14>>2]|0;
  $61 = (($60) + 1)|0;
  HEAP32[$14>>2] = $61;
 }
 HEAP32[$17>>2] = 0;
 while(1) {
  $62 = HEAP32[$17>>2]|0;
  $63 = HEAP32[$10>>2]|0;
  $64 = ($62>>>0)<($63>>>0);
  if (!($64)) {
   break;
  }
  HEAP32[$18>>2] = 0;
  while(1) {
   $65 = HEAP32[$18>>2]|0;
   $66 = HEAP32[$9>>2]|0;
   $67 = ($65>>>0)<($66>>>0);
   if (!($67)) {
    break;
   }
   $68 = HEAP32[$13>>2]|0;
   $69 = HEAP32[$17>>2]|0;
   $70 = HEAP32[$9>>2]|0;
   $71 = Math_imul($69, $70)|0;
   $72 = HEAP32[$18>>2]|0;
   $73 = (($71) + ($72))|0;
   $74 = $73<<2;
   $75 = (($68) + ($74<<2)|0);
   HEAP32[$19>>2] = $75;
   $76 = HEAP32[$6>>2]|0;
   $77 = ($76|0)!=(0|0);
   if ($77) {
    $78 = HEAP32[$6>>2]|0;
    $79 = HEAP32[$17>>2]|0;
    $80 = HEAP32[$9>>2]|0;
    $81 = Math_imul($79, $80)|0;
    $82 = HEAP32[$18>>2]|0;
    $83 = (($81) + ($82))|0;
    $84 = $83<<2;
    $85 = (($78) + ($84)|0);
    $86 = $85;
   } else {
    $86 = 0;
   }
   HEAP32[$20>>2] = $86;
   $87 = HEAP32[$19>>2]|0;
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) + 127)|0;
   $90 = (($89|0) / 256)&-1;
   HEAP32[$21>>2] = $90;
   $91 = HEAP32[$19>>2]|0;
   $92 = ((($91)) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + 127)|0;
   $95 = (($94|0) / 256)&-1;
   HEAP32[$22>>2] = $95;
   $96 = HEAP32[$19>>2]|0;
   $97 = ((($96)) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + 127)|0;
   $100 = (($99|0) / 256)&-1;
   HEAP32[$23>>2] = $100;
   $101 = HEAP32[$6>>2]|0;
   $102 = ($101|0)!=(0|0);
   if ($102) {
    $103 = HEAP32[$20>>2]|0;
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = HEAP32[$21>>2]|0;
    $107 = ($105|0)==($106|0);
    if ($107) {
     $108 = HEAP32[$20>>2]|0;
     $109 = ((($108)) + 1|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = $110&255;
     $112 = HEAP32[$22>>2]|0;
     $113 = ($111|0)==($112|0);
     if ($113) {
      $114 = HEAP32[$20>>2]|0;
      $115 = ((($114)) + 2|0);
      $116 = HEAP8[$115>>0]|0;
      $117 = $116&255;
      $118 = HEAP32[$23>>2]|0;
      $119 = ($117|0)==($118|0);
      if ($119) {
       $120 = HEAP32[$21>>2]|0;
       $121 = HEAP32[$19>>2]|0;
       HEAP32[$121>>2] = $120;
       $122 = HEAP32[$22>>2]|0;
       $123 = HEAP32[$19>>2]|0;
       $124 = ((($123)) + 4|0);
       HEAP32[$124>>2] = $122;
       $125 = HEAP32[$23>>2]|0;
       $126 = HEAP32[$19>>2]|0;
       $127 = ((($126)) + 8|0);
       HEAP32[$127>>2] = $125;
       $128 = HEAP32[$19>>2]|0;
       $129 = ((($128)) + 12|0);
       HEAP32[$129>>2] = 0;
      } else {
       label = 15;
      }
     } else {
      label = 15;
     }
    } else {
     label = 15;
    }
   } else {
    label = 15;
   }
   if ((label|0) == 15) {
    label = 0;
    HEAP32[$24>>2] = 1000000;
    HEAP32[$25>>2] = 0;
    $130 = HEAP32[$11>>2]|0;
    $131 = HEAP32[$21>>2]|0;
    $132 = HEAP32[$22>>2]|0;
    $133 = HEAP32[$23>>2]|0;
    _GifGetClosestPaletteColor($130,$131,$132,$133,$25,$24,1);
    $134 = HEAP32[$19>>2]|0;
    $135 = HEAP32[$134>>2]|0;
    $136 = HEAP32[$11>>2]|0;
    $137 = ((($136)) + 4|0);
    $138 = HEAP32[$25>>2]|0;
    $139 = (($137) + ($138)|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = $140&255;
    $142 = $141<<8;
    $143 = (($135) - ($142))|0;
    HEAP32[$26>>2] = $143;
    $144 = HEAP32[$19>>2]|0;
    $145 = ((($144)) + 4|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = HEAP32[$11>>2]|0;
    $148 = ((($147)) + 260|0);
    $149 = HEAP32[$25>>2]|0;
    $150 = (($148) + ($149)|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = $151&255;
    $153 = $152<<8;
    $154 = (($146) - ($153))|0;
    HEAP32[$27>>2] = $154;
    $155 = HEAP32[$19>>2]|0;
    $156 = ((($155)) + 8|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = HEAP32[$11>>2]|0;
    $159 = ((($158)) + 516|0);
    $160 = HEAP32[$25>>2]|0;
    $161 = (($159) + ($160)|0);
    $162 = HEAP8[$161>>0]|0;
    $163 = $162&255;
    $164 = $163<<8;
    $165 = (($157) - ($164))|0;
    HEAP32[$28>>2] = $165;
    $166 = HEAP32[$11>>2]|0;
    $167 = ((($166)) + 4|0);
    $168 = HEAP32[$25>>2]|0;
    $169 = (($167) + ($168)|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $170&255;
    $172 = HEAP32[$19>>2]|0;
    HEAP32[$172>>2] = $171;
    $173 = HEAP32[$11>>2]|0;
    $174 = ((($173)) + 260|0);
    $175 = HEAP32[$25>>2]|0;
    $176 = (($174) + ($175)|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = $177&255;
    $179 = HEAP32[$19>>2]|0;
    $180 = ((($179)) + 4|0);
    HEAP32[$180>>2] = $178;
    $181 = HEAP32[$11>>2]|0;
    $182 = ((($181)) + 516|0);
    $183 = HEAP32[$25>>2]|0;
    $184 = (($182) + ($183)|0);
    $185 = HEAP8[$184>>0]|0;
    $186 = $185&255;
    $187 = HEAP32[$19>>2]|0;
    $188 = ((($187)) + 8|0);
    HEAP32[$188>>2] = $186;
    $189 = HEAP32[$25>>2]|0;
    $190 = HEAP32[$19>>2]|0;
    $191 = ((($190)) + 12|0);
    HEAP32[$191>>2] = $189;
    $192 = HEAP32[$17>>2]|0;
    $193 = HEAP32[$9>>2]|0;
    $194 = Math_imul($192, $193)|0;
    $195 = HEAP32[$18>>2]|0;
    $196 = (($194) + ($195))|0;
    $197 = (($196) + 1)|0;
    HEAP32[$29>>2] = $197;
    $198 = HEAP32[$17>>2]|0;
    $199 = HEAP32[$9>>2]|0;
    $200 = Math_imul($198, $199)|0;
    $201 = HEAP32[$9>>2]|0;
    $202 = (($200) + ($201))|0;
    $203 = HEAP32[$18>>2]|0;
    $204 = (($202) + ($203))|0;
    $205 = (($204) - 1)|0;
    HEAP32[$30>>2] = $205;
    $206 = HEAP32[$17>>2]|0;
    $207 = HEAP32[$9>>2]|0;
    $208 = Math_imul($206, $207)|0;
    $209 = HEAP32[$9>>2]|0;
    $210 = (($208) + ($209))|0;
    $211 = HEAP32[$18>>2]|0;
    $212 = (($210) + ($211))|0;
    HEAP32[$31>>2] = $212;
    $213 = HEAP32[$17>>2]|0;
    $214 = HEAP32[$9>>2]|0;
    $215 = Math_imul($213, $214)|0;
    $216 = HEAP32[$9>>2]|0;
    $217 = (($215) + ($216))|0;
    $218 = HEAP32[$18>>2]|0;
    $219 = (($217) + ($218))|0;
    $220 = (($219) + 1)|0;
    HEAP32[$32>>2] = $220;
    $221 = HEAP32[$29>>2]|0;
    $222 = HEAP32[$12>>2]|0;
    $223 = ($221|0)<($222|0);
    if ($223) {
     $224 = HEAP32[$13>>2]|0;
     $225 = HEAP32[$29>>2]|0;
     $226 = $225<<2;
     $227 = (($224) + ($226<<2)|0);
     HEAP32[$33>>2] = $227;
     $228 = HEAP32[$33>>2]|0;
     $229 = HEAP32[$228>>2]|0;
     $230 = (0 - ($229))|0;
     $231 = HEAP32[$26>>2]|0;
     $232 = ($231*7)|0;
     $233 = (($232|0) / 16)&-1;
     $234 = ($230|0)>($233|0);
     if ($234) {
      $235 = HEAP32[$33>>2]|0;
      $236 = HEAP32[$235>>2]|0;
      $237 = (0 - ($236))|0;
      $244 = $237;
     } else {
      $238 = HEAP32[$26>>2]|0;
      $239 = ($238*7)|0;
      $240 = (($239|0) / 16)&-1;
      $244 = $240;
     }
     $241 = HEAP32[$33>>2]|0;
     $242 = HEAP32[$241>>2]|0;
     $243 = (($242) + ($244))|0;
     HEAP32[$241>>2] = $243;
     $245 = HEAP32[$33>>2]|0;
     $246 = ((($245)) + 4|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = (0 - ($247))|0;
     $249 = HEAP32[$27>>2]|0;
     $250 = ($249*7)|0;
     $251 = (($250|0) / 16)&-1;
     $252 = ($248|0)>($251|0);
     if ($252) {
      $253 = HEAP32[$33>>2]|0;
      $254 = ((($253)) + 4|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = (0 - ($255))|0;
      $264 = $256;
     } else {
      $257 = HEAP32[$27>>2]|0;
      $258 = ($257*7)|0;
      $259 = (($258|0) / 16)&-1;
      $264 = $259;
     }
     $260 = HEAP32[$33>>2]|0;
     $261 = ((($260)) + 4|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = (($262) + ($264))|0;
     HEAP32[$261>>2] = $263;
     $265 = HEAP32[$33>>2]|0;
     $266 = ((($265)) + 8|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = (0 - ($267))|0;
     $269 = HEAP32[$28>>2]|0;
     $270 = ($269*7)|0;
     $271 = (($270|0) / 16)&-1;
     $272 = ($268|0)>($271|0);
     if ($272) {
      $273 = HEAP32[$33>>2]|0;
      $274 = ((($273)) + 8|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = (0 - ($275))|0;
      $284 = $276;
     } else {
      $277 = HEAP32[$28>>2]|0;
      $278 = ($277*7)|0;
      $279 = (($278|0) / 16)&-1;
      $284 = $279;
     }
     $280 = HEAP32[$33>>2]|0;
     $281 = ((($280)) + 8|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = (($282) + ($284))|0;
     HEAP32[$281>>2] = $283;
    }
    $285 = HEAP32[$30>>2]|0;
    $286 = HEAP32[$12>>2]|0;
    $287 = ($285|0)<($286|0);
    if ($287) {
     $288 = HEAP32[$13>>2]|0;
     $289 = HEAP32[$30>>2]|0;
     $290 = $289<<2;
     $291 = (($288) + ($290<<2)|0);
     HEAP32[$34>>2] = $291;
     $292 = HEAP32[$34>>2]|0;
     $293 = HEAP32[$292>>2]|0;
     $294 = (0 - ($293))|0;
     $295 = HEAP32[$26>>2]|0;
     $296 = ($295*3)|0;
     $297 = (($296|0) / 16)&-1;
     $298 = ($294|0)>($297|0);
     if ($298) {
      $299 = HEAP32[$34>>2]|0;
      $300 = HEAP32[$299>>2]|0;
      $301 = (0 - ($300))|0;
      $308 = $301;
     } else {
      $302 = HEAP32[$26>>2]|0;
      $303 = ($302*3)|0;
      $304 = (($303|0) / 16)&-1;
      $308 = $304;
     }
     $305 = HEAP32[$34>>2]|0;
     $306 = HEAP32[$305>>2]|0;
     $307 = (($306) + ($308))|0;
     HEAP32[$305>>2] = $307;
     $309 = HEAP32[$34>>2]|0;
     $310 = ((($309)) + 4|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = (0 - ($311))|0;
     $313 = HEAP32[$27>>2]|0;
     $314 = ($313*3)|0;
     $315 = (($314|0) / 16)&-1;
     $316 = ($312|0)>($315|0);
     if ($316) {
      $317 = HEAP32[$34>>2]|0;
      $318 = ((($317)) + 4|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = (0 - ($319))|0;
      $328 = $320;
     } else {
      $321 = HEAP32[$27>>2]|0;
      $322 = ($321*3)|0;
      $323 = (($322|0) / 16)&-1;
      $328 = $323;
     }
     $324 = HEAP32[$34>>2]|0;
     $325 = ((($324)) + 4|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = (($326) + ($328))|0;
     HEAP32[$325>>2] = $327;
     $329 = HEAP32[$34>>2]|0;
     $330 = ((($329)) + 8|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = (0 - ($331))|0;
     $333 = HEAP32[$28>>2]|0;
     $334 = ($333*3)|0;
     $335 = (($334|0) / 16)&-1;
     $336 = ($332|0)>($335|0);
     if ($336) {
      $337 = HEAP32[$34>>2]|0;
      $338 = ((($337)) + 8|0);
      $339 = HEAP32[$338>>2]|0;
      $340 = (0 - ($339))|0;
      $348 = $340;
     } else {
      $341 = HEAP32[$28>>2]|0;
      $342 = ($341*3)|0;
      $343 = (($342|0) / 16)&-1;
      $348 = $343;
     }
     $344 = HEAP32[$34>>2]|0;
     $345 = ((($344)) + 8|0);
     $346 = HEAP32[$345>>2]|0;
     $347 = (($346) + ($348))|0;
     HEAP32[$345>>2] = $347;
    }
    $349 = HEAP32[$31>>2]|0;
    $350 = HEAP32[$12>>2]|0;
    $351 = ($349|0)<($350|0);
    if ($351) {
     $352 = HEAP32[$13>>2]|0;
     $353 = HEAP32[$31>>2]|0;
     $354 = $353<<2;
     $355 = (($352) + ($354<<2)|0);
     HEAP32[$35>>2] = $355;
     $356 = HEAP32[$35>>2]|0;
     $357 = HEAP32[$356>>2]|0;
     $358 = (0 - ($357))|0;
     $359 = HEAP32[$26>>2]|0;
     $360 = ($359*5)|0;
     $361 = (($360|0) / 16)&-1;
     $362 = ($358|0)>($361|0);
     if ($362) {
      $363 = HEAP32[$35>>2]|0;
      $364 = HEAP32[$363>>2]|0;
      $365 = (0 - ($364))|0;
      $372 = $365;
     } else {
      $366 = HEAP32[$26>>2]|0;
      $367 = ($366*5)|0;
      $368 = (($367|0) / 16)&-1;
      $372 = $368;
     }
     $369 = HEAP32[$35>>2]|0;
     $370 = HEAP32[$369>>2]|0;
     $371 = (($370) + ($372))|0;
     HEAP32[$369>>2] = $371;
     $373 = HEAP32[$35>>2]|0;
     $374 = ((($373)) + 4|0);
     $375 = HEAP32[$374>>2]|0;
     $376 = (0 - ($375))|0;
     $377 = HEAP32[$27>>2]|0;
     $378 = ($377*5)|0;
     $379 = (($378|0) / 16)&-1;
     $380 = ($376|0)>($379|0);
     if ($380) {
      $381 = HEAP32[$35>>2]|0;
      $382 = ((($381)) + 4|0);
      $383 = HEAP32[$382>>2]|0;
      $384 = (0 - ($383))|0;
      $392 = $384;
     } else {
      $385 = HEAP32[$27>>2]|0;
      $386 = ($385*5)|0;
      $387 = (($386|0) / 16)&-1;
      $392 = $387;
     }
     $388 = HEAP32[$35>>2]|0;
     $389 = ((($388)) + 4|0);
     $390 = HEAP32[$389>>2]|0;
     $391 = (($390) + ($392))|0;
     HEAP32[$389>>2] = $391;
     $393 = HEAP32[$35>>2]|0;
     $394 = ((($393)) + 8|0);
     $395 = HEAP32[$394>>2]|0;
     $396 = (0 - ($395))|0;
     $397 = HEAP32[$28>>2]|0;
     $398 = ($397*5)|0;
     $399 = (($398|0) / 16)&-1;
     $400 = ($396|0)>($399|0);
     if ($400) {
      $401 = HEAP32[$35>>2]|0;
      $402 = ((($401)) + 8|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = (0 - ($403))|0;
      $412 = $404;
     } else {
      $405 = HEAP32[$28>>2]|0;
      $406 = ($405*5)|0;
      $407 = (($406|0) / 16)&-1;
      $412 = $407;
     }
     $408 = HEAP32[$35>>2]|0;
     $409 = ((($408)) + 8|0);
     $410 = HEAP32[$409>>2]|0;
     $411 = (($410) + ($412))|0;
     HEAP32[$409>>2] = $411;
    }
    $413 = HEAP32[$32>>2]|0;
    $414 = HEAP32[$12>>2]|0;
    $415 = ($413|0)<($414|0);
    if ($415) {
     $416 = HEAP32[$13>>2]|0;
     $417 = HEAP32[$32>>2]|0;
     $418 = $417<<2;
     $419 = (($416) + ($418<<2)|0);
     HEAP32[$36>>2] = $419;
     $420 = HEAP32[$36>>2]|0;
     $421 = HEAP32[$420>>2]|0;
     $422 = (0 - ($421))|0;
     $423 = HEAP32[$26>>2]|0;
     $424 = (($423|0) / 16)&-1;
     $425 = ($422|0)>($424|0);
     if ($425) {
      $426 = HEAP32[$36>>2]|0;
      $427 = HEAP32[$426>>2]|0;
      $428 = (0 - ($427))|0;
      $434 = $428;
     } else {
      $429 = HEAP32[$26>>2]|0;
      $430 = (($429|0) / 16)&-1;
      $434 = $430;
     }
     $431 = HEAP32[$36>>2]|0;
     $432 = HEAP32[$431>>2]|0;
     $433 = (($432) + ($434))|0;
     HEAP32[$431>>2] = $433;
     $435 = HEAP32[$36>>2]|0;
     $436 = ((($435)) + 4|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = (0 - ($437))|0;
     $439 = HEAP32[$27>>2]|0;
     $440 = (($439|0) / 16)&-1;
     $441 = ($438|0)>($440|0);
     if ($441) {
      $442 = HEAP32[$36>>2]|0;
      $443 = ((($442)) + 4|0);
      $444 = HEAP32[$443>>2]|0;
      $445 = (0 - ($444))|0;
      $452 = $445;
     } else {
      $446 = HEAP32[$27>>2]|0;
      $447 = (($446|0) / 16)&-1;
      $452 = $447;
     }
     $448 = HEAP32[$36>>2]|0;
     $449 = ((($448)) + 4|0);
     $450 = HEAP32[$449>>2]|0;
     $451 = (($450) + ($452))|0;
     HEAP32[$449>>2] = $451;
     $453 = HEAP32[$36>>2]|0;
     $454 = ((($453)) + 8|0);
     $455 = HEAP32[$454>>2]|0;
     $456 = (0 - ($455))|0;
     $457 = HEAP32[$28>>2]|0;
     $458 = (($457|0) / 16)&-1;
     $459 = ($456|0)>($458|0);
     if ($459) {
      $460 = HEAP32[$36>>2]|0;
      $461 = ((($460)) + 8|0);
      $462 = HEAP32[$461>>2]|0;
      $463 = (0 - ($462))|0;
      $470 = $463;
     } else {
      $464 = HEAP32[$28>>2]|0;
      $465 = (($464|0) / 16)&-1;
      $470 = $465;
     }
     $466 = HEAP32[$36>>2]|0;
     $467 = ((($466)) + 8|0);
     $468 = HEAP32[$467>>2]|0;
     $469 = (($468) + ($470))|0;
     HEAP32[$467>>2] = $469;
    }
   }
   $471 = HEAP32[$18>>2]|0;
   $472 = (($471) + 1)|0;
   HEAP32[$18>>2] = $472;
  }
  $473 = HEAP32[$17>>2]|0;
  $474 = (($473) + 1)|0;
  HEAP32[$17>>2] = $474;
 }
 HEAP32[$37>>2] = 0;
 while(1) {
  $475 = HEAP32[$37>>2]|0;
  $476 = HEAP32[$12>>2]|0;
  $477 = $476<<2;
  $478 = ($475|0)<($477|0);
  $479 = HEAP32[$13>>2]|0;
  if (!($478)) {
   break;
  }
  $480 = HEAP32[$37>>2]|0;
  $481 = (($479) + ($480<<2)|0);
  $482 = HEAP32[$481>>2]|0;
  $483 = $482&255;
  $484 = HEAP32[$8>>2]|0;
  $485 = HEAP32[$37>>2]|0;
  $486 = (($484) + ($485)|0);
  HEAP8[$486>>0] = $483;
  $487 = HEAP32[$37>>2]|0;
  $488 = (($487) + 1)|0;
  HEAP32[$37>>2] = $488;
 }
 _free($479);
 STACKTOP = sp;return;
}
function _GifThresholdImage($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 36|0;
 $7 = sp + 32|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 20|0;
 $11 = sp + 16|0;
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $15 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 HEAP32[$11>>2] = $5;
 $16 = HEAP32[$9>>2]|0;
 $17 = HEAP32[$10>>2]|0;
 $18 = Math_imul($16, $17)|0;
 HEAP32[$12>>2] = $18;
 HEAP32[$13>>2] = 0;
 while(1) {
  $19 = HEAP32[$13>>2]|0;
  $20 = HEAP32[$12>>2]|0;
  $21 = ($19>>>0)<($20>>>0);
  if (!($21)) {
   break;
  }
  $22 = HEAP32[$6>>2]|0;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = HEAP32[$6>>2]|0;
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = HEAP32[$7>>2]|0;
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = ($26|0)==($29|0);
   if ($30) {
    $31 = HEAP32[$6>>2]|0;
    $32 = ((($31)) + 1|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = HEAP32[$7>>2]|0;
    $36 = ((($35)) + 1|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = ($34|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$6>>2]|0;
     $41 = ((($40)) + 2|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $42&255;
     $44 = HEAP32[$7>>2]|0;
     $45 = ((($44)) + 2|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = ($43|0)==($47|0);
     if ($48) {
      $49 = HEAP32[$6>>2]|0;
      $50 = HEAP8[$49>>0]|0;
      $51 = HEAP32[$8>>2]|0;
      HEAP8[$51>>0] = $50;
      $52 = HEAP32[$6>>2]|0;
      $53 = ((($52)) + 1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = HEAP32[$8>>2]|0;
      $56 = ((($55)) + 1|0);
      HEAP8[$56>>0] = $54;
      $57 = HEAP32[$6>>2]|0;
      $58 = ((($57)) + 2|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = HEAP32[$8>>2]|0;
      $61 = ((($60)) + 2|0);
      HEAP8[$61>>0] = $59;
      $62 = HEAP32[$8>>2]|0;
      $$sink = 0;$$sink2 = $62;
     } else {
      label = 8;
     }
    } else {
     label = 8;
    }
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   HEAP32[$14>>2] = 1000000;
   HEAP32[$15>>2] = 1;
   $63 = HEAP32[$11>>2]|0;
   $64 = HEAP32[$7>>2]|0;
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = HEAP32[$7>>2]|0;
   $68 = ((($67)) + 1|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $71 = HEAP32[$7>>2]|0;
   $72 = ((($71)) + 2|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = $73&255;
   _GifGetClosestPaletteColor($63,$66,$70,$74,$15,$14,1);
   $75 = HEAP32[$11>>2]|0;
   $76 = ((($75)) + 4|0);
   $77 = HEAP32[$15>>2]|0;
   $78 = (($76) + ($77)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = HEAP32[$8>>2]|0;
   HEAP8[$80>>0] = $79;
   $81 = HEAP32[$11>>2]|0;
   $82 = ((($81)) + 260|0);
   $83 = HEAP32[$15>>2]|0;
   $84 = (($82) + ($83)|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = HEAP32[$8>>2]|0;
   $87 = ((($86)) + 1|0);
   HEAP8[$87>>0] = $85;
   $88 = HEAP32[$11>>2]|0;
   $89 = ((($88)) + 516|0);
   $90 = HEAP32[$15>>2]|0;
   $91 = (($89) + ($90)|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = HEAP32[$8>>2]|0;
   $94 = ((($93)) + 2|0);
   HEAP8[$94>>0] = $92;
   $95 = HEAP32[$15>>2]|0;
   $96 = $95&255;
   $97 = HEAP32[$8>>2]|0;
   $$sink = $96;$$sink2 = $97;
  }
  $98 = ((($$sink2)) + 3|0);
  HEAP8[$98>>0] = $$sink;
  $99 = HEAP32[$6>>2]|0;
  $100 = ($99|0)!=(0|0);
  if ($100) {
   $101 = HEAP32[$6>>2]|0;
   $102 = ((($101)) + 4|0);
   HEAP32[$6>>2] = $102;
  }
  $103 = HEAP32[$8>>2]|0;
  $104 = ((($103)) + 4|0);
  HEAP32[$8>>2] = $104;
  $105 = HEAP32[$7>>2]|0;
  $106 = ((($105)) + 4|0);
  HEAP32[$7>>2] = $106;
  $107 = HEAP32[$13>>2]|0;
  $108 = (($107) + 1)|0;
  HEAP32[$13>>2] = $108;
 }
 STACKTOP = sp;return;
}
function _GifWriteLzwImage($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $8 = sp + 324|0;
 $9 = sp + 320|0;
 $10 = sp + 316|0;
 $11 = sp + 312|0;
 $12 = sp + 308|0;
 $13 = sp + 304|0;
 $14 = sp + 300|0;
 $15 = sp + 296|0;
 $16 = sp + 292|0;
 $17 = sp + 288|0;
 $18 = sp + 284|0;
 $19 = sp + 280|0;
 $20 = sp + 276|0;
 $21 = sp + 272|0;
 $22 = sp + 8|0;
 $23 = sp + 4|0;
 $24 = sp;
 $25 = sp + 328|0;
 HEAP32[$8>>2] = $0;
 HEAP32[$9>>2] = $1;
 HEAP32[$10>>2] = $2;
 HEAP32[$11>>2] = $3;
 HEAP32[$12>>2] = $4;
 HEAP32[$13>>2] = $5;
 HEAP32[$14>>2] = $6;
 HEAP32[$15>>2] = $7;
 $26 = HEAP32[$8>>2]|0;
 (_fputc(33,$26)|0);
 $27 = HEAP32[$8>>2]|0;
 (_fputc(249,$27)|0);
 $28 = HEAP32[$8>>2]|0;
 (_fputc(4,$28)|0);
 $29 = HEAP32[$8>>2]|0;
 (_fputc(5,$29)|0);
 $30 = HEAP32[$14>>2]|0;
 $31 = $30 & 255;
 $32 = HEAP32[$8>>2]|0;
 (_fputc($31,$32)|0);
 $33 = HEAP32[$14>>2]|0;
 $34 = $33 >>> 8;
 $35 = $34 & 255;
 $36 = HEAP32[$8>>2]|0;
 (_fputc($35,$36)|0);
 $37 = HEAP32[$8>>2]|0;
 (_fputc(0,$37)|0);
 $38 = HEAP32[$8>>2]|0;
 (_fputc(0,$38)|0);
 $39 = HEAP32[$8>>2]|0;
 (_fputc(44,$39)|0);
 $40 = HEAP32[$10>>2]|0;
 $41 = $40 & 255;
 $42 = HEAP32[$8>>2]|0;
 (_fputc($41,$42)|0);
 $43 = HEAP32[$10>>2]|0;
 $44 = $43 >>> 8;
 $45 = $44 & 255;
 $46 = HEAP32[$8>>2]|0;
 (_fputc($45,$46)|0);
 $47 = HEAP32[$11>>2]|0;
 $48 = $47 & 255;
 $49 = HEAP32[$8>>2]|0;
 (_fputc($48,$49)|0);
 $50 = HEAP32[$11>>2]|0;
 $51 = $50 >>> 8;
 $52 = $51 & 255;
 $53 = HEAP32[$8>>2]|0;
 (_fputc($52,$53)|0);
 $54 = HEAP32[$12>>2]|0;
 $55 = $54 & 255;
 $56 = HEAP32[$8>>2]|0;
 (_fputc($55,$56)|0);
 $57 = HEAP32[$12>>2]|0;
 $58 = $57 >>> 8;
 $59 = $58 & 255;
 $60 = HEAP32[$8>>2]|0;
 (_fputc($59,$60)|0);
 $61 = HEAP32[$13>>2]|0;
 $62 = $61 & 255;
 $63 = HEAP32[$8>>2]|0;
 (_fputc($62,$63)|0);
 $64 = HEAP32[$13>>2]|0;
 $65 = $64 >>> 8;
 $66 = $65 & 255;
 $67 = HEAP32[$8>>2]|0;
 (_fputc($66,$67)|0);
 $68 = HEAP32[$15>>2]|0;
 $69 = HEAP32[$68>>2]|0;
 $70 = (128 + ($69))|0;
 $71 = (($70) - 1)|0;
 $72 = HEAP32[$8>>2]|0;
 (_fputc($71,$72)|0);
 $73 = HEAP32[$15>>2]|0;
 $74 = HEAP32[$8>>2]|0;
 _GifWritePalette($73,$74);
 $75 = HEAP32[$15>>2]|0;
 $76 = HEAP32[$75>>2]|0;
 HEAP32[$16>>2] = $76;
 $77 = HEAP32[$15>>2]|0;
 $78 = HEAP32[$77>>2]|0;
 $79 = 1 << $78;
 HEAP32[$17>>2] = $79;
 $80 = HEAP32[$16>>2]|0;
 $81 = HEAP32[$8>>2]|0;
 (_fputc($80,$81)|0);
 $82 = (_malloc(2097152)|0);
 HEAP32[$18>>2] = $82;
 $83 = HEAP32[$18>>2]|0;
 _memset(($83|0),0,2097152)|0;
 HEAP32[$19>>2] = -1;
 $84 = HEAP32[$16>>2]|0;
 $85 = (($84) + 1)|0;
 HEAP32[$20>>2] = $85;
 $86 = HEAP32[$17>>2]|0;
 $87 = (($86) + 1)|0;
 HEAP32[$21>>2] = $87;
 $88 = ((($22)) + 1|0);
 HEAP8[$88>>0] = 0;
 HEAP8[$22>>0] = 0;
 $89 = ((($22)) + 4|0);
 HEAP32[$89>>2] = 0;
 $90 = HEAP32[$8>>2]|0;
 $91 = HEAP32[$17>>2]|0;
 $92 = HEAP32[$20>>2]|0;
 _GifWriteCode($90,$22,$91,$92);
 HEAP32[$23>>2] = 0;
 while(1) {
  $93 = HEAP32[$23>>2]|0;
  $94 = HEAP32[$13>>2]|0;
  $95 = ($93>>>0)<($94>>>0);
  if (!($95)) {
   break;
  }
  HEAP32[$24>>2] = 0;
  while(1) {
   $96 = HEAP32[$24>>2]|0;
   $97 = HEAP32[$12>>2]|0;
   $98 = ($96>>>0)<($97>>>0);
   if (!($98)) {
    break;
   }
   $99 = HEAP32[$9>>2]|0;
   $100 = HEAP32[$23>>2]|0;
   $101 = HEAP32[$12>>2]|0;
   $102 = Math_imul($100, $101)|0;
   $103 = HEAP32[$24>>2]|0;
   $104 = (($102) + ($103))|0;
   $105 = $104<<2;
   $106 = (($105) + 3)|0;
   $107 = (($99) + ($106)|0);
   $108 = HEAP8[$107>>0]|0;
   HEAP8[$25>>0] = $108;
   $109 = HEAP32[$19>>2]|0;
   $110 = ($109|0)<(0);
   do {
    if ($110) {
     $111 = HEAP8[$25>>0]|0;
     $112 = $111&255;
     HEAP32[$19>>2] = $112;
    } else {
     $113 = HEAP32[$18>>2]|0;
     $114 = HEAP32[$19>>2]|0;
     $115 = (($113) + ($114<<9)|0);
     $116 = HEAP8[$25>>0]|0;
     $117 = $116&255;
     $118 = (($115) + ($117<<1)|0);
     $119 = HEAP16[$118>>1]|0;
     $120 = ($119<<16>>16)!=(0);
     if ($120) {
      $121 = HEAP32[$18>>2]|0;
      $122 = HEAP32[$19>>2]|0;
      $123 = (($121) + ($122<<9)|0);
      $124 = HEAP8[$25>>0]|0;
      $125 = $124&255;
      $126 = (($123) + ($125<<1)|0);
      $127 = HEAP16[$126>>1]|0;
      $128 = $127&65535;
      HEAP32[$19>>2] = $128;
      break;
     }
     $129 = HEAP32[$8>>2]|0;
     $130 = HEAP32[$19>>2]|0;
     $131 = HEAP32[$20>>2]|0;
     _GifWriteCode($129,$22,$130,$131);
     $132 = HEAP32[$21>>2]|0;
     $133 = (($132) + 1)|0;
     HEAP32[$21>>2] = $133;
     $134 = $133&65535;
     $135 = HEAP32[$18>>2]|0;
     $136 = HEAP32[$19>>2]|0;
     $137 = (($135) + ($136<<9)|0);
     $138 = HEAP8[$25>>0]|0;
     $139 = $138&255;
     $140 = (($137) + ($139<<1)|0);
     HEAP16[$140>>1] = $134;
     $141 = HEAP32[$21>>2]|0;
     $142 = HEAP32[$20>>2]|0;
     $143 = 1 << $142;
     $144 = ($141>>>0)>=($143>>>0);
     if ($144) {
      $145 = HEAP32[$20>>2]|0;
      $146 = (($145) + 1)|0;
      HEAP32[$20>>2] = $146;
     }
     $147 = HEAP32[$21>>2]|0;
     $148 = ($147|0)==(4095);
     if ($148) {
      $149 = HEAP32[$8>>2]|0;
      $150 = HEAP32[$17>>2]|0;
      $151 = HEAP32[$20>>2]|0;
      _GifWriteCode($149,$22,$150,$151);
      $152 = HEAP32[$18>>2]|0;
      _memset(($152|0),0,2097152)|0;
      HEAP32[$19>>2] = -1;
      $153 = HEAP32[$16>>2]|0;
      $154 = (($153) + 1)|0;
      HEAP32[$20>>2] = $154;
      $155 = HEAP32[$17>>2]|0;
      $156 = (($155) + 1)|0;
      HEAP32[$21>>2] = $156;
     }
     $157 = HEAP8[$25>>0]|0;
     $158 = $157&255;
     HEAP32[$19>>2] = $158;
    }
   } while(0);
   $159 = HEAP32[$24>>2]|0;
   $160 = (($159) + 1)|0;
   HEAP32[$24>>2] = $160;
  }
  $161 = HEAP32[$23>>2]|0;
  $162 = (($161) + 1)|0;
  HEAP32[$23>>2] = $162;
 }
 $163 = HEAP32[$8>>2]|0;
 $164 = HEAP32[$19>>2]|0;
 $165 = HEAP32[$20>>2]|0;
 _GifWriteCode($163,$22,$164,$165);
 $166 = HEAP32[$8>>2]|0;
 $167 = HEAP32[$17>>2]|0;
 $168 = HEAP32[$20>>2]|0;
 _GifWriteCode($166,$22,$167,$168);
 $169 = HEAP32[$8>>2]|0;
 $170 = HEAP32[$17>>2]|0;
 $171 = (($170) + 1)|0;
 $172 = HEAP32[$16>>2]|0;
 $173 = (($172) + 1)|0;
 _GifWriteCode($169,$22,$171,$173);
 while(1) {
  $174 = HEAP8[$22>>0]|0;
  $175 = ($174<<24>>24)!=(0);
  if (!($175)) {
   break;
  }
  _GifWriteBit($22,0);
 }
 $176 = ((($22)) + 4|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = ($177|0)!=(0);
 if (!($178)) {
  $180 = HEAP32[$8>>2]|0;
  (_fputc(0,$180)|0);
  $181 = HEAP32[$18>>2]|0;
  _free($181);
  STACKTOP = sp;return;
 }
 $179 = HEAP32[$8>>2]|0;
 _GifWriteChunk($179,$22);
 $180 = HEAP32[$8>>2]|0;
 (_fputc(0,$180)|0);
 $181 = HEAP32[$18>>2]|0;
 _free($181);
 STACKTOP = sp;return;
}
function _GifWritePalette($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $8 = HEAP32[$3>>2]|0;
 (_fputc(0,$8)|0);
 $9 = HEAP32[$3>>2]|0;
 (_fputc(0,$9)|0);
 $10 = HEAP32[$3>>2]|0;
 (_fputc(0,$10)|0);
 HEAP32[$4>>2] = 1;
 while(1) {
  $11 = HEAP32[$4>>2]|0;
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = 1 << $13;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[$2>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$4>>2]|0;
  $19 = (($17) + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  HEAP32[$5>>2] = $21;
  $22 = HEAP32[$2>>2]|0;
  $23 = ((($22)) + 260|0);
  $24 = HEAP32[$4>>2]|0;
  $25 = (($23) + ($24)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  HEAP32[$6>>2] = $27;
  $28 = HEAP32[$2>>2]|0;
  $29 = ((($28)) + 516|0);
  $30 = HEAP32[$4>>2]|0;
  $31 = (($29) + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  HEAP32[$7>>2] = $33;
  $34 = HEAP32[$5>>2]|0;
  $35 = HEAP32[$3>>2]|0;
  (_fputc($34,$35)|0);
  $36 = HEAP32[$6>>2]|0;
  $37 = HEAP32[$3>>2]|0;
  (_fputc($36,$37)|0);
  $38 = HEAP32[$7>>2]|0;
  $39 = HEAP32[$3>>2]|0;
  (_fputc($38,$39)|0);
  $40 = HEAP32[$4>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$4>>2] = $41;
 }
 STACKTOP = sp;return;
}
function _GifWriteCode($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 HEAP32[$8>>2] = 0;
 while(1) {
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$7>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$5>>2]|0;
  $13 = HEAP32[$6>>2]|0;
  _GifWriteBit($12,$13);
  $14 = HEAP32[$6>>2]|0;
  $15 = $14 >>> 1;
  HEAP32[$6>>2] = $15;
  $16 = HEAP32[$5>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(255);
  if ($19) {
   $20 = HEAP32[$4>>2]|0;
   $21 = HEAP32[$5>>2]|0;
   _GifWriteChunk($20,$21);
  }
  $22 = HEAP32[$8>>2]|0;
  $23 = (($22) + 1)|0;
  HEAP32[$8>>2] = $23;
 }
 STACKTOP = sp;return;
}
function _GifWriteBit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $6 << $9;
 HEAP32[$3>>2] = $10;
 $11 = HEAP32[$3>>2]|0;
 $12 = HEAP32[$2>>2]|0;
 $13 = ((($12)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 | $11;
 $17 = $16&255;
 HEAP8[$13>>0] = $17;
 $18 = HEAP32[$2>>2]|0;
 $19 = HEAP8[$18>>0]|0;
 $20 = (($19) + 1)<<24>>24;
 HEAP8[$18>>0] = $20;
 $21 = HEAP32[$2>>2]|0;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ($23|0)>(7);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = HEAP32[$2>>2]|0;
 $26 = ((($25)) + 1|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = HEAP32[$2>>2]|0;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$2>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[$31>>2] = $33;
 $34 = (($29) + ($32)|0);
 HEAP8[$34>>0] = $27;
 $35 = HEAP32[$2>>2]|0;
 HEAP8[$35>>0] = 0;
 $36 = HEAP32[$2>>2]|0;
 $37 = ((($36)) + 1|0);
 HEAP8[$37>>0] = 0;
 STACKTOP = sp;return;
}
function _GifWriteChunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 (_fputc($6,$7)|0);
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$3>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 (_fwrite($9,1,$12,$13)|0);
 $14 = HEAP32[$3>>2]|0;
 HEAP8[$14>>0] = 0;
 $15 = HEAP32[$3>>2]|0;
 $16 = ((($15)) + 1|0);
 HEAP8[$16>>0] = 0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = 0;
 STACKTOP = sp;return;
}
function _GifGetClosestPaletteColor($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = sp + 64|0;
 $8 = sp + 60|0;
 $9 = sp + 56|0;
 $10 = sp + 52|0;
 $11 = sp + 48|0;
 $12 = sp + 44|0;
 $13 = sp + 40|0;
 $14 = sp + 36|0;
 $15 = sp + 32|0;
 $16 = sp + 28|0;
 $17 = sp + 24|0;
 $18 = sp + 20|0;
 $19 = sp + 8|0;
 $20 = sp + 4|0;
 $21 = sp;
 HEAP32[$7>>2] = $0;
 HEAP32[$8>>2] = $1;
 HEAP32[$9>>2] = $2;
 HEAP32[$10>>2] = $3;
 HEAP32[$11>>2] = $4;
 HEAP32[$12>>2] = $5;
 HEAP32[$13>>2] = $6;
 $22 = HEAP32[$13>>2]|0;
 $23 = HEAP32[$7>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = 1 << $24;
 $26 = (($25) - 1)|0;
 $27 = ($22|0)>($26|0);
 if ($27) {
  $28 = HEAP32[$13>>2]|0;
  $29 = HEAP32[$7>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = 1 << $30;
  $32 = (($28) - ($31))|0;
  HEAP32[$14>>2] = $32;
  $33 = HEAP32[$14>>2]|0;
  $34 = ($33|0)==(0);
  if ($34) {
   STACKTOP = sp;return;
  }
  $35 = HEAP32[$8>>2]|0;
  $36 = HEAP32[$7>>2]|0;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$14>>2]|0;
  $39 = (($37) + ($38)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = (($35) - ($41))|0;
  HEAP32[$15>>2] = $42;
  $43 = HEAP32[$9>>2]|0;
  $44 = HEAP32[$7>>2]|0;
  $45 = ((($44)) + 260|0);
  $46 = HEAP32[$14>>2]|0;
  $47 = (($45) + ($46)|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = (($43) - ($49))|0;
  HEAP32[$16>>2] = $50;
  $51 = HEAP32[$10>>2]|0;
  $52 = HEAP32[$7>>2]|0;
  $53 = ((($52)) + 516|0);
  $54 = HEAP32[$14>>2]|0;
  $55 = (($53) + ($54)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = (($51) - ($57))|0;
  HEAP32[$17>>2] = $58;
  $59 = HEAP32[$15>>2]|0;
  $60 = ($59|0)<(0);
  $61 = HEAP32[$15>>2]|0;
  $62 = (0 - ($61))|0;
  $63 = $60 ? $62 : $61;
  $64 = HEAP32[$16>>2]|0;
  $65 = ($64|0)<(0);
  $66 = HEAP32[$16>>2]|0;
  $67 = (0 - ($66))|0;
  $68 = $65 ? $67 : $66;
  $69 = (($63) + ($68))|0;
  $70 = HEAP32[$17>>2]|0;
  $71 = ($70|0)<(0);
  $72 = HEAP32[$17>>2]|0;
  $73 = (0 - ($72))|0;
  $74 = $71 ? $73 : $72;
  $75 = (($69) + ($74))|0;
  HEAP32[$18>>2] = $75;
  $76 = HEAP32[$18>>2]|0;
  $77 = HEAP32[$12>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  $79 = ($76|0)<($78|0);
  if (!($79)) {
   STACKTOP = sp;return;
  }
  $80 = HEAP32[$14>>2]|0;
  $81 = HEAP32[$11>>2]|0;
  HEAP32[$81>>2] = $80;
  $82 = HEAP32[$18>>2]|0;
  $83 = HEAP32[$12>>2]|0;
  HEAP32[$83>>2] = $82;
  STACKTOP = sp;return;
 }
 $84 = HEAP32[$8>>2]|0;
 HEAP32[$19>>2] = $84;
 $85 = HEAP32[$9>>2]|0;
 $86 = ((($19)) + 4|0);
 HEAP32[$86>>2] = $85;
 $87 = HEAP32[$10>>2]|0;
 $88 = ((($19)) + 8|0);
 HEAP32[$88>>2] = $87;
 $89 = HEAP32[$7>>2]|0;
 $90 = ((($89)) + 772|0);
 $91 = HEAP32[$13>>2]|0;
 $92 = (($90) + ($91)|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = (($19) + ($94<<2)|0);
 $96 = HEAP32[$95>>2]|0;
 HEAP32[$20>>2] = $96;
 $97 = HEAP32[$7>>2]|0;
 $98 = ((($97)) + 1027|0);
 $99 = HEAP32[$13>>2]|0;
 $100 = (($98) + ($99)|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 HEAP32[$21>>2] = $102;
 $103 = HEAP32[$21>>2]|0;
 $104 = HEAP32[$20>>2]|0;
 $105 = ($103|0)>($104|0);
 $106 = HEAP32[$7>>2]|0;
 $107 = HEAP32[$8>>2]|0;
 $108 = HEAP32[$9>>2]|0;
 $109 = HEAP32[$10>>2]|0;
 $110 = HEAP32[$11>>2]|0;
 $111 = HEAP32[$12>>2]|0;
 $112 = HEAP32[$13>>2]|0;
 $113 = $112<<1;
 if ($105) {
  _GifGetClosestPaletteColor($106,$107,$108,$109,$110,$111,$113);
  $114 = HEAP32[$12>>2]|0;
  $115 = HEAP32[$114>>2]|0;
  $116 = HEAP32[$21>>2]|0;
  $117 = HEAP32[$20>>2]|0;
  $118 = (($116) - ($117))|0;
  $119 = ($115|0)>($118|0);
  if (!($119)) {
   STACKTOP = sp;return;
  }
  $120 = HEAP32[$7>>2]|0;
  $121 = HEAP32[$8>>2]|0;
  $122 = HEAP32[$9>>2]|0;
  $123 = HEAP32[$10>>2]|0;
  $124 = HEAP32[$11>>2]|0;
  $125 = HEAP32[$12>>2]|0;
  $126 = HEAP32[$13>>2]|0;
  $127 = $126<<1;
  $128 = (($127) + 1)|0;
  _GifGetClosestPaletteColor($120,$121,$122,$123,$124,$125,$128);
  STACKTOP = sp;return;
 } else {
  $129 = (($113) + 1)|0;
  _GifGetClosestPaletteColor($106,$107,$108,$109,$110,$111,$129);
  $130 = HEAP32[$12>>2]|0;
  $131 = HEAP32[$130>>2]|0;
  $132 = HEAP32[$20>>2]|0;
  $133 = HEAP32[$21>>2]|0;
  $134 = (($132) - ($133))|0;
  $135 = ($131|0)>($134|0);
  if (!($135)) {
   STACKTOP = sp;return;
  }
  $136 = HEAP32[$7>>2]|0;
  $137 = HEAP32[$8>>2]|0;
  $138 = HEAP32[$9>>2]|0;
  $139 = HEAP32[$10>>2]|0;
  $140 = HEAP32[$11>>2]|0;
  $141 = HEAP32[$12>>2]|0;
  $142 = HEAP32[$13>>2]|0;
  $143 = $142<<1;
  _GifGetClosestPaletteColor($136,$137,$138,$139,$140,$141,$143);
  STACKTOP = sp;return;
 }
}
function _GifPickChangedPixels($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$6>>2] = 0;
 $9 = HEAP32[$4>>2]|0;
 HEAP32[$7>>2] = $9;
 HEAP32[$8>>2] = 0;
 while(1) {
  $10 = HEAP32[$8>>2]|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[$3>>2]|0;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = HEAP32[$4>>2]|0;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($15|0)!=($18|0);
  if ($19) {
   label = 6;
  } else {
   $20 = HEAP32[$3>>2]|0;
   $21 = ((($20)) + 1|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = HEAP32[$4>>2]|0;
   $25 = ((($24)) + 1|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = ($23|0)!=($27|0);
   if ($28) {
    label = 6;
   } else {
    $29 = HEAP32[$3>>2]|0;
    $30 = ((($29)) + 2|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = HEAP32[$4>>2]|0;
    $34 = ((($33)) + 2|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = ($32|0)!=($36|0);
    if ($37) {
     label = 6;
    }
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $38 = HEAP32[$4>>2]|0;
   $39 = HEAP8[$38>>0]|0;
   $40 = HEAP32[$7>>2]|0;
   HEAP8[$40>>0] = $39;
   $41 = HEAP32[$4>>2]|0;
   $42 = ((($41)) + 1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = HEAP32[$7>>2]|0;
   $45 = ((($44)) + 1|0);
   HEAP8[$45>>0] = $43;
   $46 = HEAP32[$4>>2]|0;
   $47 = ((($46)) + 2|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = HEAP32[$7>>2]|0;
   $50 = ((($49)) + 2|0);
   HEAP8[$50>>0] = $48;
   $51 = HEAP32[$6>>2]|0;
   $52 = (($51) + 1)|0;
   HEAP32[$6>>2] = $52;
   $53 = HEAP32[$7>>2]|0;
   $54 = ((($53)) + 4|0);
   HEAP32[$7>>2] = $54;
  }
  $55 = HEAP32[$3>>2]|0;
  $56 = ((($55)) + 4|0);
  HEAP32[$3>>2] = $56;
  $57 = HEAP32[$4>>2]|0;
  $58 = ((($57)) + 4|0);
  HEAP32[$4>>2] = $58;
  $59 = HEAP32[$8>>2]|0;
  $60 = (($59) + 1)|0;
  HEAP32[$8>>2] = $60;
 }
 $61 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($61|0);
}
function _GifSplitPalette($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $9 = sp + 156|0;
 $10 = sp + 152|0;
 $11 = sp + 148|0;
 $12 = sp + 144|0;
 $13 = sp + 140|0;
 $14 = sp + 136|0;
 $15 = sp + 132|0;
 $16 = sp + 128|0;
 $17 = sp + 124|0;
 $18 = sp + 120|0;
 $19 = sp + 116|0;
 $20 = sp + 112|0;
 $21 = sp + 108|0;
 $22 = sp + 104|0;
 $23 = sp + 100|0;
 $24 = sp + 96|0;
 $25 = sp + 92|0;
 $26 = sp + 16|0;
 $27 = sp + 8|0;
 $28 = sp;
 $29 = sp + 88|0;
 $30 = sp + 84|0;
 $31 = sp + 80|0;
 $32 = sp + 76|0;
 $33 = sp + 72|0;
 $34 = sp + 68|0;
 $35 = sp + 64|0;
 $36 = sp + 60|0;
 $37 = sp + 56|0;
 $38 = sp + 52|0;
 $39 = sp + 48|0;
 $40 = sp + 44|0;
 $41 = sp + 40|0;
 $42 = sp + 36|0;
 $43 = sp + 32|0;
 $44 = sp + 28|0;
 $45 = sp + 24|0;
 HEAP32[$9>>2] = $0;
 HEAP32[$10>>2] = $1;
 HEAP32[$11>>2] = $2;
 HEAP32[$12>>2] = $3;
 HEAP32[$13>>2] = $4;
 HEAP32[$14>>2] = $5;
 HEAP32[$15>>2] = $6;
 HEAP32[$16>>2] = $7;
 HEAP32[$17>>2] = $8;
 $46 = HEAP32[$12>>2]|0;
 $47 = HEAP32[$11>>2]|0;
 $48 = ($46|0)<=($47|0);
 $49 = HEAP32[$10>>2]|0;
 $50 = ($49|0)==(0);
 $or$cond = $48 | $50;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $51 = HEAP32[$12>>2]|0;
 $52 = HEAP32[$11>>2]|0;
 $53 = (($52) + 1)|0;
 $54 = ($51|0)==($53|0);
 if (!($54)) {
  HEAP32[$30>>2] = 255;
  HEAP32[$31>>2] = 0;
  HEAP32[$32>>2] = 255;
  HEAP32[$33>>2] = 0;
  HEAP32[$34>>2] = 255;
  HEAP32[$35>>2] = 0;
  HEAP32[$36>>2] = 0;
  while(1) {
   $417 = HEAP32[$36>>2]|0;
   $418 = HEAP32[$10>>2]|0;
   $419 = ($417|0)<($418|0);
   if (!($419)) {
    break;
   }
   $420 = HEAP32[$9>>2]|0;
   $421 = HEAP32[$36>>2]|0;
   $422 = $421<<2;
   $423 = (($422) + 0)|0;
   $424 = (($420) + ($423)|0);
   $425 = HEAP8[$424>>0]|0;
   $426 = $425&255;
   HEAP32[$37>>2] = $426;
   $427 = HEAP32[$9>>2]|0;
   $428 = HEAP32[$36>>2]|0;
   $429 = $428<<2;
   $430 = (($429) + 1)|0;
   $431 = (($427) + ($430)|0);
   $432 = HEAP8[$431>>0]|0;
   $433 = $432&255;
   HEAP32[$38>>2] = $433;
   $434 = HEAP32[$9>>2]|0;
   $435 = HEAP32[$36>>2]|0;
   $436 = $435<<2;
   $437 = (($436) + 2)|0;
   $438 = (($434) + ($437)|0);
   $439 = HEAP8[$438>>0]|0;
   $440 = $439&255;
   HEAP32[$39>>2] = $440;
   $441 = HEAP32[$37>>2]|0;
   $442 = HEAP32[$31>>2]|0;
   $443 = ($441|0)>($442|0);
   if ($443) {
    $444 = HEAP32[$37>>2]|0;
    HEAP32[$31>>2] = $444;
   }
   $445 = HEAP32[$37>>2]|0;
   $446 = HEAP32[$30>>2]|0;
   $447 = ($445|0)<($446|0);
   if ($447) {
    $448 = HEAP32[$37>>2]|0;
    HEAP32[$30>>2] = $448;
   }
   $449 = HEAP32[$38>>2]|0;
   $450 = HEAP32[$33>>2]|0;
   $451 = ($449|0)>($450|0);
   if ($451) {
    $452 = HEAP32[$38>>2]|0;
    HEAP32[$33>>2] = $452;
   }
   $453 = HEAP32[$38>>2]|0;
   $454 = HEAP32[$32>>2]|0;
   $455 = ($453|0)<($454|0);
   if ($455) {
    $456 = HEAP32[$38>>2]|0;
    HEAP32[$32>>2] = $456;
   }
   $457 = HEAP32[$39>>2]|0;
   $458 = HEAP32[$35>>2]|0;
   $459 = ($457|0)>($458|0);
   if ($459) {
    $460 = HEAP32[$39>>2]|0;
    HEAP32[$35>>2] = $460;
   }
   $461 = HEAP32[$39>>2]|0;
   $462 = HEAP32[$34>>2]|0;
   $463 = ($461|0)<($462|0);
   if ($463) {
    $464 = HEAP32[$39>>2]|0;
    HEAP32[$34>>2] = $464;
   }
   $465 = HEAP32[$36>>2]|0;
   $466 = (($465) + 1)|0;
   HEAP32[$36>>2] = $466;
  }
  $467 = HEAP32[$31>>2]|0;
  $468 = HEAP32[$30>>2]|0;
  $469 = (($467) - ($468))|0;
  HEAP32[$40>>2] = $469;
  $470 = HEAP32[$33>>2]|0;
  $471 = HEAP32[$32>>2]|0;
  $472 = (($470) - ($471))|0;
  HEAP32[$41>>2] = $472;
  $473 = HEAP32[$35>>2]|0;
  $474 = HEAP32[$34>>2]|0;
  $475 = (($473) - ($474))|0;
  HEAP32[$42>>2] = $475;
  HEAP32[$43>>2] = 1;
  $476 = HEAP32[$42>>2]|0;
  $477 = HEAP32[$41>>2]|0;
  $478 = ($476|0)>($477|0);
  $$ = $478 ? 2 : 1;
  HEAP32[$43>>2] = $$;
  $479 = HEAP32[$40>>2]|0;
  $480 = HEAP32[$42>>2]|0;
  $481 = ($479|0)>($480|0);
  if ($481) {
   $482 = HEAP32[$40>>2]|0;
   $483 = HEAP32[$41>>2]|0;
   $484 = ($482|0)>($483|0);
   if ($484) {
    HEAP32[$43>>2] = 0;
   }
  }
  $485 = HEAP32[$10>>2]|0;
  $486 = HEAP32[$13>>2]|0;
  $487 = HEAP32[$11>>2]|0;
  $488 = (($486) - ($487))|0;
  $489 = Math_imul($485, $488)|0;
  $490 = HEAP32[$12>>2]|0;
  $491 = HEAP32[$11>>2]|0;
  $492 = (($490) - ($491))|0;
  $493 = (($489|0) / ($492|0))&-1;
  HEAP32[$44>>2] = $493;
  $494 = HEAP32[$10>>2]|0;
  $495 = HEAP32[$44>>2]|0;
  $496 = (($494) - ($495))|0;
  HEAP32[$45>>2] = $496;
  $497 = HEAP32[$9>>2]|0;
  $498 = HEAP32[$10>>2]|0;
  $499 = HEAP32[$43>>2]|0;
  $500 = HEAP32[$44>>2]|0;
  _GifPartitionByMedian($497,0,$498,$499,$500);
  $501 = HEAP32[$43>>2]|0;
  $502 = $501&255;
  $503 = HEAP32[$17>>2]|0;
  $504 = ((($503)) + 772|0);
  $505 = HEAP32[$15>>2]|0;
  $506 = (($504) + ($505)|0);
  HEAP8[$506>>0] = $502;
  $507 = HEAP32[$9>>2]|0;
  $508 = HEAP32[$44>>2]|0;
  $509 = $508<<2;
  $510 = HEAP32[$43>>2]|0;
  $511 = (($509) + ($510))|0;
  $512 = (($507) + ($511)|0);
  $513 = HEAP8[$512>>0]|0;
  $514 = HEAP32[$17>>2]|0;
  $515 = ((($514)) + 1027|0);
  $516 = HEAP32[$15>>2]|0;
  $517 = (($515) + ($516)|0);
  HEAP8[$517>>0] = $513;
  $518 = HEAP32[$9>>2]|0;
  $519 = HEAP32[$44>>2]|0;
  $520 = HEAP32[$11>>2]|0;
  $521 = HEAP32[$13>>2]|0;
  $522 = HEAP32[$13>>2]|0;
  $523 = HEAP32[$14>>2]|0;
  $524 = (($522) - ($523))|0;
  $525 = HEAP32[$14>>2]|0;
  $526 = (($525|0) / 2)&-1;
  $527 = HEAP32[$15>>2]|0;
  $528 = $527<<1;
  $529 = HEAP32[$16>>2]|0;
  $530 = HEAP32[$17>>2]|0;
  _GifSplitPalette($518,$519,$520,$521,$524,$526,$528,$529,$530);
  $531 = HEAP32[$9>>2]|0;
  $532 = HEAP32[$44>>2]|0;
  $533 = $532<<2;
  $534 = (($531) + ($533)|0);
  $535 = HEAP32[$45>>2]|0;
  $536 = HEAP32[$13>>2]|0;
  $537 = HEAP32[$12>>2]|0;
  $538 = HEAP32[$13>>2]|0;
  $539 = HEAP32[$14>>2]|0;
  $540 = (($538) + ($539))|0;
  $541 = HEAP32[$14>>2]|0;
  $542 = (($541|0) / 2)&-1;
  $543 = HEAP32[$15>>2]|0;
  $544 = $543<<1;
  $545 = (($544) + 1)|0;
  $546 = HEAP32[$16>>2]|0;
  $547 = HEAP32[$17>>2]|0;
  _GifSplitPalette($534,$535,$536,$537,$540,$542,$545,$546,$547);
  STACKTOP = sp;return;
 }
 $55 = HEAP32[$16>>2]|0;
 $56 = ($55|0)!=(0);
 if ($56) {
  $57 = HEAP32[$11>>2]|0;
  $58 = ($57|0)==(1);
  if ($58) {
   HEAP32[$18>>2] = 255;
   HEAP32[$19>>2] = 255;
   HEAP32[$20>>2] = 255;
   HEAP32[$21>>2] = 0;
   while(1) {
    $59 = HEAP32[$21>>2]|0;
    $60 = HEAP32[$10>>2]|0;
    $61 = ($59|0)<($60|0);
    $62 = HEAP32[$18>>2]|0;
    if (!($61)) {
     break;
    }
    $63 = HEAP32[$9>>2]|0;
    $64 = HEAP32[$21>>2]|0;
    $65 = $64<<2;
    $66 = (($65) + 0)|0;
    $67 = (($63) + ($66)|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68&255;
    $70 = ($62>>>0)<($69>>>0);
    if ($70) {
     $71 = HEAP32[$18>>2]|0;
     $79 = $71;
    } else {
     $72 = HEAP32[$9>>2]|0;
     $73 = HEAP32[$21>>2]|0;
     $74 = $73<<2;
     $75 = (($74) + 0)|0;
     $76 = (($72) + ($75)|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77&255;
     $79 = $78;
    }
    HEAP32[$18>>2] = $79;
    $80 = HEAP32[$19>>2]|0;
    $81 = HEAP32[$9>>2]|0;
    $82 = HEAP32[$21>>2]|0;
    $83 = $82<<2;
    $84 = (($83) + 1)|0;
    $85 = (($81) + ($84)|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = $86&255;
    $88 = ($80>>>0)<($87>>>0);
    if ($88) {
     $89 = HEAP32[$19>>2]|0;
     $97 = $89;
    } else {
     $90 = HEAP32[$9>>2]|0;
     $91 = HEAP32[$21>>2]|0;
     $92 = $91<<2;
     $93 = (($92) + 1)|0;
     $94 = (($90) + ($93)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = $95&255;
     $97 = $96;
    }
    HEAP32[$19>>2] = $97;
    $98 = HEAP32[$20>>2]|0;
    $99 = HEAP32[$9>>2]|0;
    $100 = HEAP32[$21>>2]|0;
    $101 = $100<<2;
    $102 = (($101) + 2)|0;
    $103 = (($99) + ($102)|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = ($98>>>0)<($105>>>0);
    if ($106) {
     $107 = HEAP32[$20>>2]|0;
     $115 = $107;
    } else {
     $108 = HEAP32[$9>>2]|0;
     $109 = HEAP32[$21>>2]|0;
     $110 = $109<<2;
     $111 = (($110) + 2)|0;
     $112 = (($108) + ($111)|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = $113&255;
     $115 = $114;
    }
    HEAP32[$20>>2] = $115;
    $116 = HEAP32[$21>>2]|0;
    $117 = (($116) + 1)|0;
    HEAP32[$21>>2] = $117;
   }
   $118 = $62&255;
   $119 = HEAP32[$17>>2]|0;
   $120 = ((($119)) + 4|0);
   $121 = HEAP32[$11>>2]|0;
   $122 = (($120) + ($121)|0);
   HEAP8[$122>>0] = $118;
   $123 = HEAP32[$19>>2]|0;
   $124 = $123&255;
   $125 = HEAP32[$17>>2]|0;
   $126 = ((($125)) + 260|0);
   $127 = HEAP32[$11>>2]|0;
   $128 = (($126) + ($127)|0);
   HEAP8[$128>>0] = $124;
   $129 = HEAP32[$20>>2]|0;
   $130 = $129&255;
   $131 = HEAP32[$17>>2]|0;
   $132 = ((($131)) + 516|0);
   $133 = HEAP32[$11>>2]|0;
   $134 = (($132) + ($133)|0);
   HEAP8[$134>>0] = $130;
   STACKTOP = sp;return;
  }
  $135 = HEAP32[$11>>2]|0;
  $136 = HEAP32[$17>>2]|0;
  $137 = HEAP32[$136>>2]|0;
  $138 = 1 << $137;
  $139 = (($138) - 1)|0;
  $140 = ($135|0)==($139|0);
  if ($140) {
   HEAP32[$22>>2] = 0;
   HEAP32[$23>>2] = 0;
   HEAP32[$24>>2] = 0;
   HEAP32[$25>>2] = 0;
   while(1) {
    $141 = HEAP32[$25>>2]|0;
    $142 = HEAP32[$10>>2]|0;
    $143 = ($141|0)<($142|0);
    $144 = HEAP32[$22>>2]|0;
    if (!($143)) {
     break;
    }
    $145 = HEAP32[$9>>2]|0;
    $146 = HEAP32[$25>>2]|0;
    $147 = $146<<2;
    $148 = (($147) + 0)|0;
    $149 = (($145) + ($148)|0);
    $150 = HEAP8[$149>>0]|0;
    $151 = $150&255;
    $152 = ($144>>>0)>($151>>>0);
    if ($152) {
     $153 = HEAP32[$22>>2]|0;
     $161 = $153;
    } else {
     $154 = HEAP32[$9>>2]|0;
     $155 = HEAP32[$25>>2]|0;
     $156 = $155<<2;
     $157 = (($156) + 0)|0;
     $158 = (($154) + ($157)|0);
     $159 = HEAP8[$158>>0]|0;
     $160 = $159&255;
     $161 = $160;
    }
    HEAP32[$22>>2] = $161;
    $162 = HEAP32[$23>>2]|0;
    $163 = HEAP32[$9>>2]|0;
    $164 = HEAP32[$25>>2]|0;
    $165 = $164<<2;
    $166 = (($165) + 1)|0;
    $167 = (($163) + ($166)|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = $168&255;
    $170 = ($162>>>0)>($169>>>0);
    if ($170) {
     $171 = HEAP32[$23>>2]|0;
     $179 = $171;
    } else {
     $172 = HEAP32[$9>>2]|0;
     $173 = HEAP32[$25>>2]|0;
     $174 = $173<<2;
     $175 = (($174) + 1)|0;
     $176 = (($172) + ($175)|0);
     $177 = HEAP8[$176>>0]|0;
     $178 = $177&255;
     $179 = $178;
    }
    HEAP32[$23>>2] = $179;
    $180 = HEAP32[$24>>2]|0;
    $181 = HEAP32[$9>>2]|0;
    $182 = HEAP32[$25>>2]|0;
    $183 = $182<<2;
    $184 = (($183) + 2)|0;
    $185 = (($181) + ($184)|0);
    $186 = HEAP8[$185>>0]|0;
    $187 = $186&255;
    $188 = ($180>>>0)>($187>>>0);
    if ($188) {
     $189 = HEAP32[$24>>2]|0;
     $197 = $189;
    } else {
     $190 = HEAP32[$9>>2]|0;
     $191 = HEAP32[$25>>2]|0;
     $192 = $191<<2;
     $193 = (($192) + 2)|0;
     $194 = (($190) + ($193)|0);
     $195 = HEAP8[$194>>0]|0;
     $196 = $195&255;
     $197 = $196;
    }
    HEAP32[$24>>2] = $197;
    $198 = HEAP32[$25>>2]|0;
    $199 = (($198) + 1)|0;
    HEAP32[$25>>2] = $199;
   }
   $200 = $144&255;
   $201 = HEAP32[$17>>2]|0;
   $202 = ((($201)) + 4|0);
   $203 = HEAP32[$11>>2]|0;
   $204 = (($202) + ($203)|0);
   HEAP8[$204>>0] = $200;
   $205 = HEAP32[$23>>2]|0;
   $206 = $205&255;
   $207 = HEAP32[$17>>2]|0;
   $208 = ((($207)) + 260|0);
   $209 = HEAP32[$11>>2]|0;
   $210 = (($208) + ($209)|0);
   HEAP8[$210>>0] = $206;
   $211 = HEAP32[$24>>2]|0;
   $212 = $211&255;
   $213 = HEAP32[$17>>2]|0;
   $214 = ((($213)) + 516|0);
   $215 = HEAP32[$11>>2]|0;
   $216 = (($214) + ($215)|0);
   HEAP8[$216>>0] = $212;
   STACKTOP = sp;return;
  }
 }
 $217 = $26;
 $218 = $217;
 HEAP32[$218>>2] = 0;
 $219 = (($217) + 4)|0;
 $220 = $219;
 HEAP32[$220>>2] = 0;
 $221 = $27;
 $222 = $221;
 HEAP32[$222>>2] = 0;
 $223 = (($221) + 4)|0;
 $224 = $223;
 HEAP32[$224>>2] = 0;
 $225 = $28;
 $226 = $225;
 HEAP32[$226>>2] = 0;
 $227 = (($225) + 4)|0;
 $228 = $227;
 HEAP32[$228>>2] = 0;
 HEAP32[$29>>2] = 0;
 while(1) {
  $229 = HEAP32[$29>>2]|0;
  $230 = HEAP32[$10>>2]|0;
  $231 = ($229|0)<($230|0);
  if (!($231)) {
   break;
  }
  $232 = HEAP32[$9>>2]|0;
  $233 = HEAP32[$29>>2]|0;
  $234 = $233<<2;
  $235 = (($234) + 0)|0;
  $236 = (($232) + ($235)|0);
  $237 = HEAP8[$236>>0]|0;
  $238 = $237&255;
  $239 = $26;
  $240 = $239;
  $241 = HEAP32[$240>>2]|0;
  $242 = (($239) + 4)|0;
  $243 = $242;
  $244 = HEAP32[$243>>2]|0;
  $245 = (_i64Add(($241|0),($244|0),($238|0),0)|0);
  $246 = tempRet0;
  $247 = $26;
  $248 = $247;
  HEAP32[$248>>2] = $245;
  $249 = (($247) + 4)|0;
  $250 = $249;
  HEAP32[$250>>2] = $246;
  $251 = HEAP32[$9>>2]|0;
  $252 = HEAP32[$29>>2]|0;
  $253 = $252<<2;
  $254 = (($253) + 1)|0;
  $255 = (($251) + ($254)|0);
  $256 = HEAP8[$255>>0]|0;
  $257 = $256&255;
  $258 = $27;
  $259 = $258;
  $260 = HEAP32[$259>>2]|0;
  $261 = (($258) + 4)|0;
  $262 = $261;
  $263 = HEAP32[$262>>2]|0;
  $264 = (_i64Add(($260|0),($263|0),($257|0),0)|0);
  $265 = tempRet0;
  $266 = $27;
  $267 = $266;
  HEAP32[$267>>2] = $264;
  $268 = (($266) + 4)|0;
  $269 = $268;
  HEAP32[$269>>2] = $265;
  $270 = HEAP32[$9>>2]|0;
  $271 = HEAP32[$29>>2]|0;
  $272 = $271<<2;
  $273 = (($272) + 2)|0;
  $274 = (($270) + ($273)|0);
  $275 = HEAP8[$274>>0]|0;
  $276 = $275&255;
  $277 = $28;
  $278 = $277;
  $279 = HEAP32[$278>>2]|0;
  $280 = (($277) + 4)|0;
  $281 = $280;
  $282 = HEAP32[$281>>2]|0;
  $283 = (_i64Add(($279|0),($282|0),($276|0),0)|0);
  $284 = tempRet0;
  $285 = $28;
  $286 = $285;
  HEAP32[$286>>2] = $283;
  $287 = (($285) + 4)|0;
  $288 = $287;
  HEAP32[$288>>2] = $284;
  $289 = HEAP32[$29>>2]|0;
  $290 = (($289) + 1)|0;
  HEAP32[$29>>2] = $290;
 }
 $291 = HEAP32[$10>>2]|0;
 $292 = (($291|0) / 2)&-1;
 $293 = ($292|0)<(0);
 $294 = $293 << 31 >> 31;
 $295 = $26;
 $296 = $295;
 $297 = HEAP32[$296>>2]|0;
 $298 = (($295) + 4)|0;
 $299 = $298;
 $300 = HEAP32[$299>>2]|0;
 $301 = (_i64Add(($297|0),($300|0),($292|0),($294|0))|0);
 $302 = tempRet0;
 $303 = $26;
 $304 = $303;
 HEAP32[$304>>2] = $301;
 $305 = (($303) + 4)|0;
 $306 = $305;
 HEAP32[$306>>2] = $302;
 $307 = HEAP32[$10>>2]|0;
 $308 = (($307|0) / 2)&-1;
 $309 = ($308|0)<(0);
 $310 = $309 << 31 >> 31;
 $311 = $27;
 $312 = $311;
 $313 = HEAP32[$312>>2]|0;
 $314 = (($311) + 4)|0;
 $315 = $314;
 $316 = HEAP32[$315>>2]|0;
 $317 = (_i64Add(($313|0),($316|0),($308|0),($310|0))|0);
 $318 = tempRet0;
 $319 = $27;
 $320 = $319;
 HEAP32[$320>>2] = $317;
 $321 = (($319) + 4)|0;
 $322 = $321;
 HEAP32[$322>>2] = $318;
 $323 = HEAP32[$10>>2]|0;
 $324 = (($323|0) / 2)&-1;
 $325 = ($324|0)<(0);
 $326 = $325 << 31 >> 31;
 $327 = $28;
 $328 = $327;
 $329 = HEAP32[$328>>2]|0;
 $330 = (($327) + 4)|0;
 $331 = $330;
 $332 = HEAP32[$331>>2]|0;
 $333 = (_i64Add(($329|0),($332|0),($324|0),($326|0))|0);
 $334 = tempRet0;
 $335 = $28;
 $336 = $335;
 HEAP32[$336>>2] = $333;
 $337 = (($335) + 4)|0;
 $338 = $337;
 HEAP32[$338>>2] = $334;
 $339 = HEAP32[$10>>2]|0;
 $340 = ($339|0)<(0);
 $341 = $340 << 31 >> 31;
 $342 = $26;
 $343 = $342;
 $344 = HEAP32[$343>>2]|0;
 $345 = (($342) + 4)|0;
 $346 = $345;
 $347 = HEAP32[$346>>2]|0;
 $348 = (___udivdi3(($344|0),($347|0),($339|0),($341|0))|0);
 $349 = tempRet0;
 $350 = $26;
 $351 = $350;
 HEAP32[$351>>2] = $348;
 $352 = (($350) + 4)|0;
 $353 = $352;
 HEAP32[$353>>2] = $349;
 $354 = HEAP32[$10>>2]|0;
 $355 = ($354|0)<(0);
 $356 = $355 << 31 >> 31;
 $357 = $27;
 $358 = $357;
 $359 = HEAP32[$358>>2]|0;
 $360 = (($357) + 4)|0;
 $361 = $360;
 $362 = HEAP32[$361>>2]|0;
 $363 = (___udivdi3(($359|0),($362|0),($354|0),($356|0))|0);
 $364 = tempRet0;
 $365 = $27;
 $366 = $365;
 HEAP32[$366>>2] = $363;
 $367 = (($365) + 4)|0;
 $368 = $367;
 HEAP32[$368>>2] = $364;
 $369 = HEAP32[$10>>2]|0;
 $370 = ($369|0)<(0);
 $371 = $370 << 31 >> 31;
 $372 = $28;
 $373 = $372;
 $374 = HEAP32[$373>>2]|0;
 $375 = (($372) + 4)|0;
 $376 = $375;
 $377 = HEAP32[$376>>2]|0;
 $378 = (___udivdi3(($374|0),($377|0),($369|0),($371|0))|0);
 $379 = tempRet0;
 $380 = $28;
 $381 = $380;
 HEAP32[$381>>2] = $378;
 $382 = (($380) + 4)|0;
 $383 = $382;
 HEAP32[$383>>2] = $379;
 $384 = $26;
 $385 = $384;
 $386 = HEAP32[$385>>2]|0;
 $387 = (($384) + 4)|0;
 $388 = $387;
 $389 = HEAP32[$388>>2]|0;
 $390 = $386&255;
 $391 = HEAP32[$17>>2]|0;
 $392 = ((($391)) + 4|0);
 $393 = HEAP32[$11>>2]|0;
 $394 = (($392) + ($393)|0);
 HEAP8[$394>>0] = $390;
 $395 = $27;
 $396 = $395;
 $397 = HEAP32[$396>>2]|0;
 $398 = (($395) + 4)|0;
 $399 = $398;
 $400 = HEAP32[$399>>2]|0;
 $401 = $397&255;
 $402 = HEAP32[$17>>2]|0;
 $403 = ((($402)) + 260|0);
 $404 = HEAP32[$11>>2]|0;
 $405 = (($403) + ($404)|0);
 HEAP8[$405>>0] = $401;
 $406 = $28;
 $407 = $406;
 $408 = HEAP32[$407>>2]|0;
 $409 = (($406) + 4)|0;
 $410 = $409;
 $411 = HEAP32[$410>>2]|0;
 $412 = $408&255;
 $413 = HEAP32[$17>>2]|0;
 $414 = ((($413)) + 516|0);
 $415 = HEAP32[$11>>2]|0;
 $416 = (($414) + ($415)|0);
 HEAP8[$416>>0] = $412;
 STACKTOP = sp;return;
}
function _GifPartitionByMedian($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $11 = HEAP32[$6>>2]|0;
 $12 = HEAP32[$7>>2]|0;
 $13 = (($12) - 1)|0;
 $14 = ($11|0)<($13|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[$6>>2]|0;
 $16 = HEAP32[$7>>2]|0;
 $17 = HEAP32[$6>>2]|0;
 $18 = (($16) - ($17))|0;
 $19 = (($18|0) / 2)&-1;
 $20 = (($15) + ($19))|0;
 HEAP32[$10>>2] = $20;
 $21 = HEAP32[$5>>2]|0;
 $22 = HEAP32[$6>>2]|0;
 $23 = HEAP32[$7>>2]|0;
 $24 = HEAP32[$8>>2]|0;
 $25 = HEAP32[$10>>2]|0;
 $26 = (_GifPartition($21,$22,$23,$24,$25)|0);
 HEAP32[$10>>2] = $26;
 $27 = HEAP32[$10>>2]|0;
 $28 = HEAP32[$9>>2]|0;
 $29 = ($27|0)>($28|0);
 if ($29) {
  $30 = HEAP32[$5>>2]|0;
  $31 = HEAP32[$6>>2]|0;
  $32 = HEAP32[$10>>2]|0;
  $33 = HEAP32[$8>>2]|0;
  $34 = HEAP32[$9>>2]|0;
  _GifPartitionByMedian($30,$31,$32,$33,$34);
 }
 $35 = HEAP32[$10>>2]|0;
 $36 = HEAP32[$9>>2]|0;
 $37 = ($35|0)<($36|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$5>>2]|0;
 $39 = HEAP32[$10>>2]|0;
 $40 = (($39) + 1)|0;
 $41 = HEAP32[$7>>2]|0;
 $42 = HEAP32[$8>>2]|0;
 $43 = HEAP32[$9>>2]|0;
 _GifPartitionByMedian($38,$40,$41,$42,$43);
 STACKTOP = sp;return;
}
function _GifPartition($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 36|0;
 $6 = sp + 32|0;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 20|0;
 $10 = sp + 16|0;
 $11 = sp + 12|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $15 = HEAP32[$5>>2]|0;
 $16 = HEAP32[$9>>2]|0;
 $17 = $16<<2;
 $18 = HEAP32[$8>>2]|0;
 $19 = (($17) + ($18))|0;
 $20 = (($15) + ($19)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 HEAP32[$10>>2] = $22;
 $23 = HEAP32[$5>>2]|0;
 $24 = HEAP32[$9>>2]|0;
 $25 = HEAP32[$7>>2]|0;
 $26 = (($25) - 1)|0;
 _GifSwapPixels($23,$24,$26);
 $27 = HEAP32[$6>>2]|0;
 HEAP32[$11>>2] = $27;
 HEAP32[$12>>2] = 0;
 $28 = HEAP32[$6>>2]|0;
 HEAP32[$13>>2] = $28;
 while(1) {
  $29 = HEAP32[$13>>2]|0;
  $30 = HEAP32[$7>>2]|0;
  $31 = (($30) - 1)|0;
  $32 = ($29|0)<($31|0);
  $33 = HEAP32[$5>>2]|0;
  if (!($32)) {
   break;
  }
  $34 = HEAP32[$13>>2]|0;
  $35 = $34<<2;
  $36 = HEAP32[$8>>2]|0;
  $37 = (($35) + ($36))|0;
  $38 = (($33) + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  HEAP32[$14>>2] = $40;
  $41 = HEAP32[$14>>2]|0;
  $42 = HEAP32[$10>>2]|0;
  $43 = ($41|0)<($42|0);
  if ($43) {
   $44 = HEAP32[$5>>2]|0;
   $45 = HEAP32[$13>>2]|0;
   $46 = HEAP32[$11>>2]|0;
   _GifSwapPixels($44,$45,$46);
   $47 = HEAP32[$11>>2]|0;
   $48 = (($47) + 1)|0;
   HEAP32[$11>>2] = $48;
  } else {
   $49 = HEAP32[$14>>2]|0;
   $50 = HEAP32[$10>>2]|0;
   $51 = ($49|0)==($50|0);
   if ($51) {
    $52 = HEAP32[$12>>2]|0;
    $53 = ($52|0)!=(0);
    if ($53) {
     $54 = HEAP32[$5>>2]|0;
     $55 = HEAP32[$13>>2]|0;
     $56 = HEAP32[$11>>2]|0;
     _GifSwapPixels($54,$55,$56);
     $57 = HEAP32[$11>>2]|0;
     $58 = (($57) + 1)|0;
     HEAP32[$11>>2] = $58;
    }
    $59 = HEAP32[$12>>2]|0;
    $60 = ($59|0)!=(0);
    $61 = $60 ^ 1;
    $62 = $61&1;
    HEAP32[$12>>2] = $62;
   }
  }
  $63 = HEAP32[$13>>2]|0;
  $64 = (($63) + 1)|0;
  HEAP32[$13>>2] = $64;
 }
 $65 = HEAP32[$11>>2]|0;
 $66 = HEAP32[$7>>2]|0;
 $67 = (($66) - 1)|0;
 _GifSwapPixels($33,$65,$67);
 $68 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($68|0);
}
function _GifSwapPixels($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = sp + 19|0;
 $7 = sp + 18|0;
 $8 = sp + 17|0;
 $9 = sp + 16|0;
 $10 = sp + 15|0;
 $11 = sp + 14|0;
 $12 = sp + 13|0;
 $13 = sp + 12|0;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $14 = HEAP32[$3>>2]|0;
 $15 = HEAP32[$4>>2]|0;
 $16 = $15<<2;
 $17 = (($14) + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 HEAP8[$6>>0] = $18;
 $19 = HEAP32[$3>>2]|0;
 $20 = HEAP32[$4>>2]|0;
 $21 = $20<<2;
 $22 = (($21) + 1)|0;
 $23 = (($19) + ($22)|0);
 $24 = HEAP8[$23>>0]|0;
 HEAP8[$7>>0] = $24;
 $25 = HEAP32[$3>>2]|0;
 $26 = HEAP32[$4>>2]|0;
 $27 = $26<<2;
 $28 = (($27) + 2)|0;
 $29 = (($25) + ($28)|0);
 $30 = HEAP8[$29>>0]|0;
 HEAP8[$8>>0] = $30;
 $31 = HEAP32[$3>>2]|0;
 $32 = HEAP32[$4>>2]|0;
 $33 = $32<<2;
 $34 = (($33) + 3)|0;
 $35 = (($31) + ($34)|0);
 $36 = HEAP8[$35>>0]|0;
 HEAP8[$9>>0] = $36;
 $37 = HEAP32[$3>>2]|0;
 $38 = HEAP32[$5>>2]|0;
 $39 = $38<<2;
 $40 = (($37) + ($39)|0);
 $41 = HEAP8[$40>>0]|0;
 HEAP8[$10>>0] = $41;
 $42 = HEAP32[$3>>2]|0;
 $43 = HEAP32[$5>>2]|0;
 $44 = $43<<2;
 $45 = (($44) + 1)|0;
 $46 = (($42) + ($45)|0);
 $47 = HEAP8[$46>>0]|0;
 HEAP8[$11>>0] = $47;
 $48 = HEAP32[$3>>2]|0;
 $49 = HEAP32[$5>>2]|0;
 $50 = $49<<2;
 $51 = (($50) + 2)|0;
 $52 = (($48) + ($51)|0);
 $53 = HEAP8[$52>>0]|0;
 HEAP8[$12>>0] = $53;
 $54 = HEAP32[$3>>2]|0;
 $55 = HEAP32[$4>>2]|0;
 $56 = $55<<2;
 $57 = (($56) + 3)|0;
 $58 = (($54) + ($57)|0);
 $59 = HEAP8[$58>>0]|0;
 HEAP8[$13>>0] = $59;
 $60 = HEAP8[$10>>0]|0;
 $61 = HEAP32[$3>>2]|0;
 $62 = HEAP32[$4>>2]|0;
 $63 = $62<<2;
 $64 = (($61) + ($63)|0);
 HEAP8[$64>>0] = $60;
 $65 = HEAP8[$11>>0]|0;
 $66 = HEAP32[$3>>2]|0;
 $67 = HEAP32[$4>>2]|0;
 $68 = $67<<2;
 $69 = (($68) + 1)|0;
 $70 = (($66) + ($69)|0);
 HEAP8[$70>>0] = $65;
 $71 = HEAP8[$12>>0]|0;
 $72 = HEAP32[$3>>2]|0;
 $73 = HEAP32[$4>>2]|0;
 $74 = $73<<2;
 $75 = (($74) + 2)|0;
 $76 = (($72) + ($75)|0);
 HEAP8[$76>>0] = $71;
 $77 = HEAP8[$13>>0]|0;
 $78 = HEAP32[$3>>2]|0;
 $79 = HEAP32[$4>>2]|0;
 $80 = $79<<2;
 $81 = (($80) + 3)|0;
 $82 = (($78) + ($81)|0);
 HEAP8[$82>>0] = $77;
 $83 = HEAP8[$6>>0]|0;
 $84 = HEAP32[$3>>2]|0;
 $85 = HEAP32[$5>>2]|0;
 $86 = $85<<2;
 $87 = (($84) + ($86)|0);
 HEAP8[$87>>0] = $83;
 $88 = HEAP8[$7>>0]|0;
 $89 = HEAP32[$3>>2]|0;
 $90 = HEAP32[$5>>2]|0;
 $91 = $90<<2;
 $92 = (($91) + 1)|0;
 $93 = (($89) + ($92)|0);
 HEAP8[$93>>0] = $88;
 $94 = HEAP8[$8>>0]|0;
 $95 = HEAP32[$3>>2]|0;
 $96 = HEAP32[$5>>2]|0;
 $97 = $96<<2;
 $98 = (($97) + 2)|0;
 $99 = (($95) + ($98)|0);
 HEAP8[$99>>0] = $94;
 $100 = HEAP8[$9>>0]|0;
 $101 = HEAP32[$3>>2]|0;
 $102 = HEAP32[$5>>2]|0;
 $103 = $102<<2;
 $104 = (($103) + 3)|0;
 $105 = (($101) + ($104)|0);
 HEAP8[$105>>0] = $100;
 STACKTOP = sp;return;
}
function _GifEnd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 $1 = HEAP32[5450]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[5450]|0;
  (_fputc(59,$3)|0);
  $4 = HEAP32[5450]|0;
  (_fclose($4)|0);
  $5 = HEAP32[5402]|0;
  _free($5);
  HEAP32[5450] = 0;
  HEAP32[5402] = 0;
  HEAP32[$0>>2] = 1;
  $6 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($6|0);
 } else {
  HEAP32[$0>>2] = 0;
  $6 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function _InitWindow($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 _TraceLog(0,5140,$vararg_buffer);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[5451] = $6;
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[$4>>2]|0;
 _InitGraphicsDevice($7,$8);
 _LoadDefaultFont();
 _InitTimer();
 (_emscripten_set_fullscreenchange_callback((0|0),(0|0),1,(3|0))|0);
 (_emscripten_set_keypress_callback((5169|0),(0|0),1,(4|0))|0);
 (_emscripten_set_click_callback((5169|0),(0|0),1,(5|0))|0);
 (_emscripten_set_touchstart_callback((5169|0),(0|0),1,(6|0))|0);
 (_emscripten_set_touchend_callback((5169|0),(0|0),1,(6|0))|0);
 (_emscripten_set_touchmove_callback((5169|0),(0|0),1,(6|0))|0);
 (_emscripten_set_touchcancel_callback((5169|0),(0|0),1,(6|0))|0);
 (_emscripten_set_gamepadconnected_callback((0|0),1,(7|0))|0);
 (_emscripten_set_gamepaddisconnected_callback((0|0),1,(7|0))|0);
 $9 = HEAP32[5452]|0;
 $10 = (+($9|0));
 $11 = $10 / 2.0;
 HEAPF32[5448] = $11;
 $12 = HEAP32[5453]|0;
 $13 = (+($12|0));
 $14 = $13 / 2.0;
 HEAPF32[(21796)>>2] = $14;
 $15 = HEAP32[5454]|0;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 _SetTargetFPS(60);
 _LogoAnimation();
 STACKTOP = sp;return;
}
function _TraceLog($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 HEAP32[$4>>2] = 0;
 $6 = HEAP32[$2>>2]|0;
 switch ($6|0) {
 case 0:  {
  (_strcpy(65267,9598)|0);
  break;
 }
 case 2:  {
  (_strcpy(65267,9605)|0);
  break;
 }
 case 1:  {
  (_strcpy(65267,9613)|0);
  break;
 }
 case 3:  {
  (_strcpy(65267,9623)|0);
  break;
 }
 default: {
 }
 }
 $7 = HEAP32[$3>>2]|0;
 (_strcat(65267,$7)|0);
 (_strcat(65267,9631)|0);
 HEAP32[$5>>2] = $varargs;
 $8 = HEAP32[$2>>2]|0;
 $9 = ($8|0)!=(3);
 if ($9) {
  label = 8;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = ($10|0)==(3);
  $12 = HEAP32[$4>>2]|0;
  $13 = ($12|0)!=(0);
  $or$cond = $11 & $13;
  if ($or$cond) {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  (_vprintf(65267,$5)|0);
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = ($14|0)==(2);
 if ($15) {
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _InitGraphicsDevice($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $$byval_copy = sp + 156|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 148|0;
 $3 = sp + 144|0;
 $4 = sp + 80|0;
 $5 = sp + 76|0;
 $6 = sp + 72|0;
 $7 = sp + 68|0;
 $8 = sp + 152|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[5452] = $9;
 $10 = HEAP32[$3>>2]|0;
 HEAP32[5453] = $10;
 _MatrixIdentity($4);
 dest=21912; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 (_glfwSetErrorCallback((1|0))|0);
 $11 = (_glfwInit()|0);
 $12 = ($11|0)!=(0);
 if (!($12)) {
  _TraceLog(2,5890,$vararg_buffer);
 }
 $13 = HEAP32[5452]|0;
 HEAP32[5494] = $13;
 $14 = HEAP32[5453]|0;
 HEAP32[5495] = $14;
 _glfwDefaultWindowHints();
 $15 = HEAP8[64748]|0;
 $16 = $15 << 24 >> 24;
 $17 = $16 & 4;
 $18 = ($17|0)!=(0);
 if ($18) {
  _glfwWindowHint(131075,1);
 } else {
  _glfwWindowHint(131075,0);
 }
 $19 = HEAP8[64748]|0;
 $20 = $19 << 24 >> 24;
 $21 = $20 & 8;
 $22 = ($21|0)!=(0);
 if ($22) {
  _glfwWindowHint(131077,1);
 }
 $23 = HEAP8[64748]|0;
 $24 = $23 << 24 >> 24;
 $25 = $24 & 32;
 $26 = ($25|0)!=(0);
 if ($26) {
  _glfwWindowHint(135181,4);
  _TraceLog(0,5916,$vararg_buffer1);
 }
 $27 = (_rlGetVersion()|0);
 $28 = ($27|0)==(2);
 if ($28) {
  _glfwWindowHint(139266,2);
  _glfwWindowHint(139267,1);
 } else {
  $29 = (_rlGetVersion()|0);
  $30 = ($29|0)==(3);
  if ($30) {
   _glfwWindowHint(139266,3);
   _glfwWindowHint(139267,3);
   _glfwWindowHint(139272,204801);
   _glfwWindowHint(139270,0);
  }
 }
 $31 = HEAP32[5496]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = (_glfwGetPrimaryMonitor()|0);
  $34 = (_glfwGetVideoModes(($33|0),($5|0))|0);
  HEAP32[$6>>2] = $34;
  HEAP32[$7>>2] = 0;
  while(1) {
   $35 = HEAP32[$7>>2]|0;
   $36 = HEAP32[$5>>2]|0;
   $37 = ($35|0)<($36|0);
   if (!($37)) {
    break;
   }
   $38 = HEAP32[$6>>2]|0;
   $39 = HEAP32[$7>>2]|0;
   $40 = (($38) + (($39*24)|0)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[5452]|0;
   $43 = ($41|0)>=($42|0);
   if ($43) {
    $44 = HEAP32[$6>>2]|0;
    $45 = HEAP32[$7>>2]|0;
    $46 = (($44) + (($45*24)|0)|0);
    $47 = ((($46)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = HEAP32[5453]|0;
    $50 = ($48|0)>=($49|0);
    if ($50) {
     label = 19;
     break;
    }
   }
   $60 = HEAP32[$7>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[$7>>2] = $61;
  }
  if ((label|0) == 19) {
   $51 = HEAP32[$6>>2]|0;
   $52 = HEAP32[$7>>2]|0;
   $53 = (($51) + (($52*24)|0)|0);
   $54 = HEAP32[$53>>2]|0;
   HEAP32[5494] = $54;
   $55 = HEAP32[$6>>2]|0;
   $56 = HEAP32[$7>>2]|0;
   $57 = (($55) + (($56*24)|0)|0);
   $58 = ((($57)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   HEAP32[5495] = $59;
  }
  $62 = HEAP32[5494]|0;
  $63 = HEAP32[5495]|0;
  HEAP32[$vararg_buffer3>>2] = $62;
  $vararg_ptr5 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $63;
  _TraceLog(1,5941,$vararg_buffer3);
  $64 = HEAP32[5494]|0;
  $65 = HEAP32[5495]|0;
  _SetupFramebufferSize($64,$65);
  $66 = HEAP32[5494]|0;
  $67 = HEAP32[5495]|0;
  $68 = HEAP32[5451]|0;
  $69 = (_glfwGetPrimaryMonitor()|0);
  $70 = (_glfwCreateWindow(($66|0),($67|0),($68|0),($69|0),(0|0))|0);
  HEAP32[5446] = $70;
 } else {
  $71 = HEAP32[5452]|0;
  $72 = HEAP32[5453]|0;
  $73 = HEAP32[5451]|0;
  $74 = (_glfwCreateWindow(($71|0),($72|0),($73|0),(0|0),(0|0))|0);
  HEAP32[5446] = $74;
  $75 = HEAP32[5452]|0;
  HEAP32[5497] = $75;
  $76 = HEAP32[5453]|0;
  HEAP32[5498] = $76;
 }
 $77 = HEAP32[5446]|0;
 $78 = ($77|0)!=(0|0);
 if ($78) {
  _TraceLog(0,6012,$vararg_buffer8);
  $79 = HEAP32[5497]|0;
  $80 = HEAP32[5498]|0;
  HEAP32[$vararg_buffer10>>2] = $79;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $80;
  _TraceLog(0,6052,$vararg_buffer10);
  $81 = HEAP32[5452]|0;
  $82 = HEAP32[5453]|0;
  HEAP32[$vararg_buffer14>>2] = $81;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $82;
  _TraceLog(0,6073,$vararg_buffer14);
  $83 = HEAP32[5499]|0;
  $84 = HEAP32[5500]|0;
  HEAP32[$vararg_buffer18>>2] = $83;
  $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
  HEAP32[$vararg_ptr21>>2] = $84;
  _TraceLog(0,6094,$vararg_buffer18);
 } else {
  _glfwTerminate();
  _TraceLog(2,5979,$vararg_buffer6);
 }
 $85 = HEAP32[5446]|0;
 (_glfwSetWindowSizeCallback(($85|0),(1|0))|0);
 $86 = HEAP32[5446]|0;
 (_glfwSetCursorEnterCallback(($86|0),(2|0))|0);
 $87 = HEAP32[5446]|0;
 (_glfwSetKeyCallback(($87|0),(1|0))|0);
 $88 = HEAP32[5446]|0;
 (_glfwSetMouseButtonCallback(($88|0),(1|0))|0);
 $89 = HEAP32[5446]|0;
 (_glfwSetCursorPosCallback(($89|0),(1|0))|0);
 $90 = HEAP32[5446]|0;
 (_glfwSetCharCallback(($90|0),(3|0))|0);
 $91 = HEAP32[5446]|0;
 (_glfwSetScrollCallback(($91|0),(2|0))|0);
 $92 = HEAP32[5446]|0;
 (_glfwSetWindowIconifyCallback(($92|0),(4|0))|0);
 $93 = HEAP32[5446]|0;
 _glfwMakeContextCurrent(($93|0));
 _glfwSwapInterval(0);
 $94 = HEAP8[64748]|0;
 $95 = $94 << 24 >> 24;
 $96 = $95 & 64;
 $97 = ($96|0)!=(0);
 if (!($97)) {
  $98 = HEAP32[5452]|0;
  $99 = HEAP32[5453]|0;
  _rlglInit($98,$99);
  _SetupViewport();
  _rlMatrixMode(5889);
  _rlLoadIdentity();
  $100 = HEAP32[5497]|0;
  $101 = HEAP32[5499]|0;
  $102 = (($100) - ($101))|0;
  $103 = (+($102|0));
  $104 = HEAP32[5498]|0;
  $105 = HEAP32[5500]|0;
  $106 = (($104) - ($105))|0;
  $107 = (+($106|0));
  _rlOrtho(0.0,$103,$107,0.0,0.0,1.0);
  _rlMatrixMode(5888);
  _rlLoadIdentity();
  HEAP8[$8>>0] = -11;
  $108 = ((($8)) + 1|0);
  HEAP8[$108>>0] = -11;
  $109 = ((($8)) + 2|0);
  HEAP8[$109>>0] = -11;
  $110 = ((($8)) + 3|0);
  HEAP8[$110>>0] = -1;
  ;HEAP8[$$byval_copy>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$8+3>>0]|0;
  _ClearBackground($$byval_copy);
  STACKTOP = sp;return;
 }
 _glfwSwapInterval(1);
 _TraceLog(0,6119,$vararg_buffer22);
 $98 = HEAP32[5452]|0;
 $99 = HEAP32[5453]|0;
 _rlglInit($98,$99);
 _SetupViewport();
 _rlMatrixMode(5889);
 _rlLoadIdentity();
 $100 = HEAP32[5497]|0;
 $101 = HEAP32[5499]|0;
 $102 = (($100) - ($101))|0;
 $103 = (+($102|0));
 $104 = HEAP32[5498]|0;
 $105 = HEAP32[5500]|0;
 $106 = (($104) - ($105))|0;
 $107 = (+($106|0));
 _rlOrtho(0.0,$103,$107,0.0,0.0,1.0);
 _rlMatrixMode(5888);
 _rlLoadIdentity();
 HEAP8[$8>>0] = -11;
 $108 = ((($8)) + 1|0);
 HEAP8[$108>>0] = -11;
 $109 = ((($8)) + 2|0);
 HEAP8[$109>>0] = -11;
 $110 = ((($8)) + 3|0);
 HEAP8[$110>>0] = -1;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$8+3>>0]|0;
 _ClearBackground($$byval_copy);
 STACKTOP = sp;return;
}
function _LoadDefaultFont() {
 var $$ = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3072|0);
 $$byval_copy1 = sp + 3040|0;
 $vararg_buffer = sp;
 $0 = sp + 992|0;
 $1 = sp + 988|0;
 $2 = sp + 984|0;
 $3 = sp + 88|0;
 $4 = sp + 84|0;
 $5 = sp + 80|0;
 $6 = sp + 76|0;
 $7 = sp + 72|0;
 $8 = sp + 3064|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 3060|0;
 $13 = sp + 40|0;
 $14 = sp + 20|0;
 $15 = sp + 16|0;
 $16 = sp + 12|0;
 $17 = sp + 8|0;
 $18 = sp + 4|0;
 HEAP32[(21876)>>2] = 224;
 _memcpy(($0|0),(20|0),2048)|0;
 HEAP32[$1>>2] = 10;
 HEAP32[$2>>2] = 1;
 _memcpy(($3|0),(2068|0),896)|0;
 HEAP32[$4>>2] = 128;
 HEAP32[$5>>2] = 128;
 $19 = HEAP32[$4>>2]|0;
 $20 = HEAP32[$5>>2]|0;
 $21 = Math_imul($19, $20)|0;
 $22 = $21<<2;
 $23 = (_malloc($22)|0);
 HEAP32[$6>>2] = $23;
 HEAP32[$7>>2] = 0;
 while(1) {
  $24 = HEAP32[$7>>2]|0;
  $25 = HEAP32[$4>>2]|0;
  $26 = HEAP32[$5>>2]|0;
  $27 = Math_imul($25, $26)|0;
  $28 = ($24|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = HEAP32[$6>>2]|0;
  $30 = HEAP32[$7>>2]|0;
  $31 = (($29) + ($30<<2)|0);
  HEAP8[$8>>0] = 0;
  $32 = ((($8)) + 1|0);
  HEAP8[$32>>0] = 0;
  $33 = ((($8)) + 2|0);
  HEAP8[$33>>0] = 0;
  $34 = ((($8)) + 3|0);
  HEAP8[$34>>0] = 0;
  ;HEAP8[$31>>0]=HEAP8[$8>>0]|0;HEAP8[$31+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$8+3>>0]|0;
  $35 = HEAP32[$7>>2]|0;
  $36 = (($35) + 1)|0;
  HEAP32[$7>>2] = $36;
 }
 HEAP32[$9>>2] = 0;
 HEAP32[$10>>2] = 0;
 while(1) {
  $37 = HEAP32[$10>>2]|0;
  $38 = HEAP32[$4>>2]|0;
  $39 = HEAP32[$5>>2]|0;
  $40 = Math_imul($38, $39)|0;
  $41 = ($37|0)<($40|0);
  if (!($41)) {
   break;
  }
  HEAP32[$11>>2] = 31;
  while(1) {
   $42 = HEAP32[$11>>2]|0;
   $43 = ($42|0)>=(0);
   $44 = HEAP32[$9>>2]|0;
   if (!($43)) {
    break;
   }
   $45 = (($0) + ($44<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = HEAP32[$11>>2]|0;
   $48 = 1 << $47;
   $49 = $46 & $48;
   $50 = ($49|0)!=(0);
   if ($50) {
    $51 = HEAP32[$6>>2]|0;
    $52 = HEAP32[$10>>2]|0;
    $53 = HEAP32[$11>>2]|0;
    $54 = (($52) + ($53))|0;
    $55 = (($51) + ($54<<2)|0);
    HEAP8[$12>>0] = -1;
    $56 = ((($12)) + 1|0);
    HEAP8[$56>>0] = -1;
    $57 = ((($12)) + 2|0);
    HEAP8[$57>>0] = -1;
    $58 = ((($12)) + 3|0);
    HEAP8[$58>>0] = -1;
    ;HEAP8[$55>>0]=HEAP8[$12>>0]|0;HEAP8[$55+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$12+3>>0]|0;
   }
   $59 = HEAP32[$11>>2]|0;
   $60 = (($59) + -1)|0;
   HEAP32[$11>>2] = $60;
  }
  $61 = (($44) + 1)|0;
  HEAP32[$9>>2] = $61;
  $62 = HEAP32[$9>>2]|0;
  $63 = ($62|0)>(512);
  $$ = $63 ? 0 : $61;
  HEAP32[$9>>2] = $$;
  $64 = HEAP32[$10>>2]|0;
  $65 = (($64) + 32)|0;
  HEAP32[$10>>2] = $65;
 }
 $66 = HEAP32[$6>>2]|0;
 $67 = HEAP32[$4>>2]|0;
 $68 = HEAP32[$5>>2]|0;
 _LoadImageEx($13,$66,$67,$68);
 _ImageFormat($13,2);
 $69 = HEAP32[$6>>2]|0;
 _free($69);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$13+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$13+16>>2]|0;
 _LoadTextureFromImage($14,$$byval_copy1);
 ;HEAP32[21852>>2]=HEAP32[$14>>2]|0;HEAP32[21852+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[21852+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[21852+12>>2]=HEAP32[$14+12>>2]|0;HEAP32[21852+16>>2]=HEAP32[$14+16>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$13+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$13+16>>2]|0;
 _UnloadImage($$byval_copy1);
 $70 = HEAP32[(21876)>>2]|0;
 $71 = $70<<5;
 $72 = (_malloc($71)|0);
 HEAP32[(21880)>>2] = $72;
 HEAP32[$15>>2] = 0;
 $73 = HEAP32[$2>>2]|0;
 HEAP32[$16>>2] = $73;
 $74 = HEAP32[$2>>2]|0;
 HEAP32[$17>>2] = $74;
 HEAP32[$18>>2] = 0;
 while(1) {
  $75 = HEAP32[$18>>2]|0;
  $76 = HEAP32[(21876)>>2]|0;
  $77 = ($75|0)<($76|0);
  if (!($77)) {
   break;
  }
  $78 = HEAP32[$18>>2]|0;
  $79 = (32 + ($78))|0;
  $80 = HEAP32[(21880)>>2]|0;
  $81 = HEAP32[$18>>2]|0;
  $82 = (($80) + ($81<<5)|0);
  HEAP32[$82>>2] = $79;
  $83 = HEAP32[$16>>2]|0;
  $84 = HEAP32[(21880)>>2]|0;
  $85 = HEAP32[$18>>2]|0;
  $86 = (($84) + ($85<<5)|0);
  $87 = ((($86)) + 4|0);
  HEAP32[$87>>2] = $83;
  $88 = HEAP32[$2>>2]|0;
  $89 = HEAP32[$15>>2]|0;
  $90 = HEAP32[$1>>2]|0;
  $91 = HEAP32[$2>>2]|0;
  $92 = (($90) + ($91))|0;
  $93 = Math_imul($89, $92)|0;
  $94 = (($88) + ($93))|0;
  $95 = HEAP32[(21880)>>2]|0;
  $96 = HEAP32[$18>>2]|0;
  $97 = (($95) + ($96<<5)|0);
  $98 = ((($97)) + 4|0);
  $99 = ((($98)) + 4|0);
  HEAP32[$99>>2] = $94;
  $100 = HEAP32[$18>>2]|0;
  $101 = (($3) + ($100<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = HEAP32[(21880)>>2]|0;
  $104 = HEAP32[$18>>2]|0;
  $105 = (($103) + ($104<<5)|0);
  $106 = ((($105)) + 4|0);
  $107 = ((($106)) + 8|0);
  HEAP32[$107>>2] = $102;
  $108 = HEAP32[$1>>2]|0;
  $109 = HEAP32[(21880)>>2]|0;
  $110 = HEAP32[$18>>2]|0;
  $111 = (($109) + ($110<<5)|0);
  $112 = ((($111)) + 4|0);
  $113 = ((($112)) + 12|0);
  HEAP32[$113>>2] = $108;
  $114 = HEAP32[(21880)>>2]|0;
  $115 = HEAP32[$18>>2]|0;
  $116 = (($114) + ($115<<5)|0);
  $117 = ((($116)) + 4|0);
  $118 = ((($117)) + 8|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = HEAP32[$2>>2]|0;
  $121 = (($119) + ($120))|0;
  $122 = HEAP32[$17>>2]|0;
  $123 = (($122) + ($121))|0;
  HEAP32[$17>>2] = $123;
  $124 = HEAP32[$17>>2]|0;
  $125 = HEAP32[(21856)>>2]|0;
  $126 = ($124|0)>=($125|0);
  if ($126) {
   $127 = HEAP32[$15>>2]|0;
   $128 = (($127) + 1)|0;
   HEAP32[$15>>2] = $128;
   $129 = HEAP32[$2>>2]|0;
   $130 = $129<<1;
   $131 = HEAP32[$18>>2]|0;
   $132 = (($3) + ($131<<2)|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (($130) + ($133))|0;
   HEAP32[$16>>2] = $134;
   $135 = HEAP32[$16>>2]|0;
   HEAP32[$17>>2] = $135;
   $136 = HEAP32[$2>>2]|0;
   $137 = HEAP32[(21880)>>2]|0;
   $138 = HEAP32[$18>>2]|0;
   $139 = (($137) + ($138<<5)|0);
   $140 = ((($139)) + 4|0);
   HEAP32[$140>>2] = $136;
   $141 = HEAP32[$2>>2]|0;
   $142 = HEAP32[$15>>2]|0;
   $143 = HEAP32[$1>>2]|0;
   $144 = HEAP32[$2>>2]|0;
   $145 = (($143) + ($144))|0;
   $146 = Math_imul($142, $145)|0;
   $147 = (($141) + ($146))|0;
   $148 = HEAP32[(21880)>>2]|0;
   $149 = HEAP32[$18>>2]|0;
   $150 = (($148) + ($149<<5)|0);
   $151 = ((($150)) + 4|0);
   $152 = ((($151)) + 4|0);
   HEAP32[$152>>2] = $147;
  } else {
   $153 = HEAP32[$17>>2]|0;
   HEAP32[$16>>2] = $153;
  }
  $154 = HEAP32[(21880)>>2]|0;
  $155 = HEAP32[$18>>2]|0;
  $156 = (($154) + ($155<<5)|0);
  $157 = ((($156)) + 20|0);
  HEAP32[$157>>2] = 0;
  $158 = HEAP32[(21880)>>2]|0;
  $159 = HEAP32[$18>>2]|0;
  $160 = (($158) + ($159<<5)|0);
  $161 = ((($160)) + 24|0);
  HEAP32[$161>>2] = 0;
  $162 = HEAP32[(21880)>>2]|0;
  $163 = HEAP32[$18>>2]|0;
  $164 = (($162) + ($163<<5)|0);
  $165 = ((($164)) + 28|0);
  HEAP32[$165>>2] = 0;
  $166 = HEAP32[$18>>2]|0;
  $167 = (($166) + 1)|0;
  HEAP32[$18>>2] = $167;
 }
 $168 = HEAP32[(21880)>>2]|0;
 $169 = ((($168)) + 4|0);
 $170 = ((($169)) + 12|0);
 $171 = HEAP32[$170>>2]|0;
 HEAP32[(21872)>>2] = $171;
 $172 = HEAP32[5463]|0;
 HEAP32[$vararg_buffer>>2] = $172;
 _TraceLog(0,5364,$vararg_buffer);
 STACKTOP = sp;return;
}
function _InitTimer() {
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_time((0|0))|0);
 _srand($0);
 $1 = (+_GetTime());
 HEAPF64[2691] = $1;
 return;
}
function _EmscriptenFullscreenChangeCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 $9 = HEAP32[$4>>2]|0;
 $10 = ((($9)) + 264|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = ((($12)) + 268|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$4>>2]|0;
 $16 = ((($15)) + 272|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$4>>2]|0;
 $19 = ((($18)) + 276|0);
 $20 = HEAP32[$19>>2]|0;
 if ($8) {
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $17;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $20;
  _TraceLog(0,5228,$vararg_buffer);
  STACKTOP = sp;return 0;
 } else {
  HEAP32[$vararg_buffer4>>2] = $11;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $14;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $17;
  $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = $20;
  _TraceLog(0,5297,$vararg_buffer4);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _EmscriptenKeyboardCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[$3>>2]|0;
 $7 = ($6|0)==(1);
 if (!($7)) {
  STACKTOP = sp;return 0;
 }
 $8 = HEAP32[$4>>2]|0;
 $9 = ((($8)) + 32|0);
 $10 = (_strcmp($9,5221)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  STACKTOP = sp;return 0;
 }
 (_emscripten_exit_pointerlock()|0);
 STACKTOP = sp;return 0;
}
function _EmscriptenMouseCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $3 = sp + 268|0;
 $4 = sp + 264|0;
 $5 = sp + 260|0;
 $6 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)==(4);
 $9 = HEAP32[5445]|0;
 $10 = ($9|0)!=(0);
 $or$cond = $8 & $10;
 if (!($or$cond)) {
  STACKTOP = sp;return 0;
 }
 (_emscripten_get_pointerlock_status(($6|0))|0);
 $11 = HEAP32[$6>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  (_emscripten_exit_pointerlock()|0);
  (_emscripten_get_pointerlock_status(($6|0))|0);
 } else {
  (_emscripten_request_pointerlock((0|0),1)|0);
 }
 HEAP32[5445] = 0;
 STACKTOP = sp;return 0;
}
function _EmscriptenTouchCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0;
 var $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 88|0;
 $3 = sp + 80|0;
 $4 = sp + 76|0;
 $5 = sp + 72|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $9 = HEAP32[$3>>2]|0;
 $10 = ($9|0)==(22);
 if ($10) {
  $$sink = 1;
  label = 4;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = ($11|0)==(23);
  if ($12) {
   $$sink = 0;
   label = 4;
  } else {
   $13 = HEAP32[$3>>2]|0;
   $14 = ($13|0)==(24);
   if ($14) {
    $$sink = 2;
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  HEAP32[$6>>2] = $$sink;
 }
 $15 = HEAP32[$4>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($6)) + 4|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$4>>2]|0;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($6)) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[$4>>2]|0;
 $23 = ((($22)) + 20|0);
 $24 = ((($23)) + 52|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($6)) + 8|0);
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = $25;
 $28 = ((($6)) + 24|0);
 $29 = HEAP32[$4>>2]|0;
 $30 = ((($29)) + 20|0);
 $31 = ((($30)) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (+($32|0));
 HEAPF32[$7>>2] = $33;
 $34 = ((($7)) + 4|0);
 $35 = HEAP32[$4>>2]|0;
 $36 = ((($35)) + 20|0);
 $37 = ((($36)) + 40|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (+($38|0));
 HEAPF32[$34>>2] = $39;
 ;HEAP32[$28>>2]=HEAP32[$7>>2]|0;HEAP32[$28+4>>2]=HEAP32[$7+4>>2]|0;
 $40 = ((($6)) + 24|0);
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$4>>2]|0;
 $43 = ((($42)) + 20|0);
 $44 = ((($43)) + 52|0);
 $45 = ((($44)) + 36|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (+($46|0));
 HEAPF32[$8>>2] = $47;
 $48 = ((($8)) + 4|0);
 $49 = HEAP32[$4>>2]|0;
 $50 = ((($49)) + 20|0);
 $51 = ((($50)) + 52|0);
 $52 = ((($51)) + 40|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (+($53|0));
 HEAPF32[$48>>2] = $54;
 ;HEAP32[$41>>2]=HEAP32[$8>>2]|0;HEAP32[$41+4>>2]=HEAP32[$8+4>>2]|0;
 $55 = ((($6)) + 24|0);
 ;HEAP32[21836>>2]=HEAP32[$55>>2]|0;HEAP32[21836+4>>2]=HEAP32[$55+4>>2]|0;
 $56 = ((($6)) + 24|0);
 $57 = ((($56)) + 8|0);
 ;HEAP32[(21844)>>2]=HEAP32[$57>>2]|0;HEAP32[(21844)+4>>2]=HEAP32[$57+4>>2]|0;
 $58 = (_GetScreenWidth()|0);
 $59 = (+($58|0));
 $60 = ((($6)) + 24|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $61 / $59;
 HEAPF32[$60>>2] = $62;
 $63 = (_GetScreenHeight()|0);
 $64 = (+($63|0));
 $65 = ((($6)) + 24|0);
 $66 = ((($65)) + 4|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $67 / $64;
 HEAPF32[$66>>2] = $68;
 $69 = (_GetScreenWidth()|0);
 $70 = (+($69|0));
 $71 = ((($6)) + 24|0);
 $72 = ((($71)) + 8|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $73 / $70;
 HEAPF32[$72>>2] = $74;
 $75 = (_GetScreenHeight()|0);
 $76 = (+($75|0));
 $77 = ((($6)) + 24|0);
 $78 = ((($77)) + 8|0);
 $79 = ((($78)) + 4|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $80 / $76;
 HEAPF32[$79>>2] = $81;
 dest=$$byval_copy; src=$6; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _ProcessGestureEvent($$byval_copy);
 STACKTOP = sp;return 1;
}
function _EmscriptenGamepadCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 1296|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[$4>>2]|0;
  $11 = ((($10)) + 1300|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)<(4);
  if ($13) {
   $14 = HEAP32[$4>>2]|0;
   $$sink = 1;$$sink4 = $14;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $15 = HEAP32[$4>>2]|0;
  $$sink = 0;$$sink4 = $15;
 }
 $16 = ((($$sink4)) + 1300|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (21820 + ($17<<2)|0);
 HEAP32[$18>>2] = $$sink;
 STACKTOP = sp;return 0;
}
function _SetTargetFPS($0) {
 $0 = $0|0;
 var $$sink = 0.0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(1);
 if ($3) {
  $$sink = 0.0;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (+($4|0));
  $6 = 1.0 / $5;
  $$sink = $6;
 }
 HEAPF64[2690] = $$sink;
 $7 = +HEAPF64[2690];
 $8 = $7;
 $9 = $8 * 1000.0;
 $10 = $9;
 HEAPF64[$vararg_buffer>>3] = $10;
 _TraceLog(0,5177,$vararg_buffer);
 STACKTOP = sp;return;
}
function _LogoAnimation() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[5454] = 0;
 return;
}
function _GetScreenWidth() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5452]|0;
 return ($0|0);
}
function _GetScreenHeight() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5453]|0;
 return ($0|0);
}
function _GetTime() {
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_glfwGetTime());
 return (+$0);
}
function _LoadImageEx($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$6>>2] = $3;
 HEAP32[$7>>2] = 0;
 $10 = HEAP32[$5>>2]|0;
 $11 = ((($7)) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[$6>>2]|0;
 $13 = ((($7)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($7)) + 12|0);
 HEAP32[$14>>2] = 1;
 $15 = ((($7)) + 16|0);
 HEAP32[$15>>2] = 7;
 HEAP32[$8>>2] = 0;
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($7)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($17, $19)|0;
 $21 = $20<<2;
 $22 = $21;
 $23 = (_malloc($22)|0);
 HEAP32[$7>>2] = $23;
 HEAP32[$9>>2] = 0;
 while(1) {
  $24 = HEAP32[$9>>2]|0;
  $25 = ((($7)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($7)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = Math_imul($26, $28)|0;
  $30 = $29<<2;
  $31 = ($24|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = HEAP32[$4>>2]|0;
  $33 = HEAP32[$8>>2]|0;
  $34 = (($32) + ($33<<2)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = HEAP32[$7>>2]|0;
  $37 = HEAP32[$9>>2]|0;
  $38 = (($36) + ($37)|0);
  HEAP8[$38>>0] = $35;
  $39 = HEAP32[$4>>2]|0;
  $40 = HEAP32[$8>>2]|0;
  $41 = (($39) + ($40<<2)|0);
  $42 = ((($41)) + 1|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = HEAP32[$7>>2]|0;
  $45 = HEAP32[$9>>2]|0;
  $46 = (($45) + 1)|0;
  $47 = (($44) + ($46)|0);
  HEAP8[$47>>0] = $43;
  $48 = HEAP32[$4>>2]|0;
  $49 = HEAP32[$8>>2]|0;
  $50 = (($48) + ($49<<2)|0);
  $51 = ((($50)) + 2|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = HEAP32[$7>>2]|0;
  $54 = HEAP32[$9>>2]|0;
  $55 = (($54) + 2)|0;
  $56 = (($53) + ($55)|0);
  HEAP8[$56>>0] = $52;
  $57 = HEAP32[$4>>2]|0;
  $58 = HEAP32[$8>>2]|0;
  $59 = (($57) + ($58<<2)|0);
  $60 = ((($59)) + 3|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = HEAP32[$7>>2]|0;
  $63 = HEAP32[$9>>2]|0;
  $64 = (($63) + 3)|0;
  $65 = (($62) + ($64)|0);
  HEAP8[$65>>0] = $61;
  $66 = HEAP32[$8>>2]|0;
  $67 = (($66) + 1)|0;
  HEAP32[$8>>2] = $67;
  $68 = HEAP32[$9>>2]|0;
  $69 = (($68) + 4)|0;
  HEAP32[$9>>2] = $69;
 }
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$7+16>>2]|0;
 STACKTOP = sp;return;
}
function _ImageFormat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0;
 var $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0.0;
 var $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0.0;
 var $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0;
 var $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 48|0;
 $vararg_buffer = sp;
 $2 = sp + 44|0;
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 24|0;
 $8 = sp + 78|0;
 $9 = sp + 77|0;
 $10 = sp + 76|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = sp + 75|0;
 $14 = sp + 74|0;
 $15 = sp + 73|0;
 $16 = sp + 72|0;
 $17 = sp + 12|0;
 $18 = sp + 71|0;
 $19 = sp + 70|0;
 $20 = sp + 69|0;
 $21 = sp + 68|0;
 $22 = sp + 8|0;
 $23 = sp + 4|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $24 = HEAP32[$2>>2]|0;
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$3>>2]|0;
 $28 = ($26|0)!=($27|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = HEAP32[$2>>2]|0;
 $30 = ((($29)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)<(9);
 $33 = HEAP32[$3>>2]|0;
 $34 = ($33|0)<(9);
 $or$cond = $32 & $34;
 if (!($or$cond)) {
  _TraceLog(1,5790,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $35 = HEAP32[$2>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$35+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$35+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$35+16>>2]|0;
 $36 = (_GetImageData($$byval_copy)|0);
 HEAP32[$4>>2] = $36;
 $37 = HEAP32[$2>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 _free($38);
 $39 = HEAP32[$3>>2]|0;
 $40 = HEAP32[$2>>2]|0;
 $41 = ((($40)) + 16|0);
 HEAP32[$41>>2] = $39;
 HEAP32[$5>>2] = 0;
 $42 = HEAP32[$2>>2]|0;
 $43 = ((($42)) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 L8: do {
  switch ($44|0) {
  case 1:  {
   $45 = HEAP32[$2>>2]|0;
   $46 = ((($45)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = HEAP32[$2>>2]|0;
   $49 = ((($48)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = Math_imul($47, $50)|0;
   $52 = $51;
   $53 = (_malloc($52)|0);
   $54 = HEAP32[$2>>2]|0;
   HEAP32[$54>>2] = $53;
   HEAP32[$6>>2] = 0;
   while(1) {
    $55 = HEAP32[$6>>2]|0;
    $56 = HEAP32[$2>>2]|0;
    $57 = ((($56)) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = HEAP32[$2>>2]|0;
    $60 = ((($59)) + 8|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = Math_imul($58, $61)|0;
    $63 = ($55|0)<($62|0);
    if (!($63)) {
     break L8;
    }
    $64 = HEAP32[$4>>2]|0;
    $65 = HEAP32[$6>>2]|0;
    $66 = (($64) + ($65<<2)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = (+($67&255));
    $69 = $68 * 0.29899999499320984;
    $70 = HEAP32[$4>>2]|0;
    $71 = HEAP32[$6>>2]|0;
    $72 = (($70) + ($71<<2)|0);
    $73 = ((($72)) + 1|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = (+($74&255));
    $76 = $75 * 0.58700001239776611;
    $77 = $69 + $76;
    $78 = HEAP32[$4>>2]|0;
    $79 = HEAP32[$6>>2]|0;
    $80 = (($78) + ($79<<2)|0);
    $81 = ((($80)) + 2|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = (+($82&255));
    $84 = $83 * 0.11400000005960464;
    $85 = $77 + $84;
    $86 = (~~(($85))&255);
    $87 = HEAP32[$2>>2]|0;
    $88 = HEAP32[$87>>2]|0;
    $89 = HEAP32[$6>>2]|0;
    $90 = (($88) + ($89)|0);
    HEAP8[$90>>0] = $86;
    $91 = HEAP32[$6>>2]|0;
    $92 = (($91) + 1)|0;
    HEAP32[$6>>2] = $92;
   }
   break;
  }
  case 2:  {
   $93 = HEAP32[$2>>2]|0;
   $94 = ((($93)) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = HEAP32[$2>>2]|0;
   $97 = ((($96)) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = Math_imul($95, $98)|0;
   $100 = $99<<1;
   $101 = $100;
   $102 = (_malloc($101)|0);
   $103 = HEAP32[$2>>2]|0;
   HEAP32[$103>>2] = $102;
   HEAP32[$7>>2] = 0;
   while(1) {
    $104 = HEAP32[$7>>2]|0;
    $105 = HEAP32[$2>>2]|0;
    $106 = ((($105)) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = HEAP32[$2>>2]|0;
    $109 = ((($108)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = Math_imul($107, $110)|0;
    $112 = $111<<1;
    $113 = ($104|0)<($112|0);
    if (!($113)) {
     break L8;
    }
    $114 = HEAP32[$4>>2]|0;
    $115 = HEAP32[$5>>2]|0;
    $116 = (($114) + ($115<<2)|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = (+($117&255));
    $119 = $118 * 0.29899999499320984;
    $120 = HEAP32[$4>>2]|0;
    $121 = HEAP32[$5>>2]|0;
    $122 = (($120) + ($121<<2)|0);
    $123 = ((($122)) + 1|0);
    $124 = HEAP8[$123>>0]|0;
    $125 = (+($124&255));
    $126 = $125 * 0.58700001239776611;
    $127 = $119 + $126;
    $128 = HEAP32[$4>>2]|0;
    $129 = HEAP32[$5>>2]|0;
    $130 = (($128) + ($129<<2)|0);
    $131 = ((($130)) + 2|0);
    $132 = HEAP8[$131>>0]|0;
    $133 = (+($132&255));
    $134 = $133 * 0.11400000005960464;
    $135 = $127 + $134;
    $136 = (~~(($135))&255);
    $137 = HEAP32[$2>>2]|0;
    $138 = HEAP32[$137>>2]|0;
    $139 = HEAP32[$7>>2]|0;
    $140 = (($138) + ($139)|0);
    HEAP8[$140>>0] = $136;
    $141 = HEAP32[$4>>2]|0;
    $142 = HEAP32[$5>>2]|0;
    $143 = (($141) + ($142<<2)|0);
    $144 = ((($143)) + 3|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = HEAP32[$2>>2]|0;
    $147 = HEAP32[$146>>2]|0;
    $148 = HEAP32[$7>>2]|0;
    $149 = (($148) + 1)|0;
    $150 = (($147) + ($149)|0);
    HEAP8[$150>>0] = $145;
    $151 = HEAP32[$5>>2]|0;
    $152 = (($151) + 1)|0;
    HEAP32[$5>>2] = $152;
    $153 = HEAP32[$7>>2]|0;
    $154 = (($153) + 2)|0;
    HEAP32[$7>>2] = $154;
   }
   break;
  }
  case 3:  {
   $155 = HEAP32[$2>>2]|0;
   $156 = ((($155)) + 4|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = HEAP32[$2>>2]|0;
   $159 = ((($158)) + 8|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = Math_imul($157, $160)|0;
   $162 = $161<<1;
   $163 = (_malloc($162)|0);
   $164 = HEAP32[$2>>2]|0;
   HEAP32[$164>>2] = $163;
   HEAP8[$8>>0] = 0;
   HEAP8[$9>>0] = 0;
   HEAP8[$10>>0] = 0;
   HEAP32[$11>>2] = 0;
   while(1) {
    $165 = HEAP32[$11>>2]|0;
    $166 = HEAP32[$2>>2]|0;
    $167 = ((($166)) + 4|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = HEAP32[$2>>2]|0;
    $170 = ((($169)) + 8|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = Math_imul($168, $171)|0;
    $173 = ($165|0)<($172|0);
    if (!($173)) {
     break L8;
    }
    $174 = HEAP32[$4>>2]|0;
    $175 = HEAP32[$11>>2]|0;
    $176 = (($174) + ($175<<2)|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = (+($177&255));
    $179 = $178 * 31.0;
    $180 = $179 / 255.0;
    $181 = $180;
    $182 = (+_round((+$181)));
    $183 = (~~(($182))&255);
    HEAP8[$8>>0] = $183;
    $184 = HEAP32[$4>>2]|0;
    $185 = HEAP32[$11>>2]|0;
    $186 = (($184) + ($185<<2)|0);
    $187 = ((($186)) + 1|0);
    $188 = HEAP8[$187>>0]|0;
    $189 = (+($188&255));
    $190 = $189 * 63.0;
    $191 = $190 / 255.0;
    $192 = $191;
    $193 = (+_round((+$192)));
    $194 = (~~(($193))&255);
    HEAP8[$9>>0] = $194;
    $195 = HEAP32[$4>>2]|0;
    $196 = HEAP32[$11>>2]|0;
    $197 = (($195) + ($196<<2)|0);
    $198 = ((($197)) + 2|0);
    $199 = HEAP8[$198>>0]|0;
    $200 = (+($199&255));
    $201 = $200 * 31.0;
    $202 = $201 / 255.0;
    $203 = $202;
    $204 = (+_round((+$203)));
    $205 = (~~(($204))&255);
    HEAP8[$10>>0] = $205;
    $206 = HEAP8[$8>>0]|0;
    $207 = $206&255;
    $208 = $207&65535;
    $209 = $208 << 11;
    $210 = HEAP8[$9>>0]|0;
    $211 = $210&255;
    $212 = $211&65535;
    $213 = $212 << 5;
    $214 = $209 | $213;
    $215 = HEAP8[$10>>0]|0;
    $216 = $215&255;
    $217 = $216&65535;
    $218 = $214 | $217;
    $219 = $218&65535;
    $220 = HEAP32[$2>>2]|0;
    $221 = HEAP32[$220>>2]|0;
    $222 = HEAP32[$11>>2]|0;
    $223 = (($221) + ($222<<1)|0);
    HEAP16[$223>>1] = $219;
    $224 = HEAP32[$11>>2]|0;
    $225 = (($224) + 1)|0;
    HEAP32[$11>>2] = $225;
   }
   break;
  }
  case 4:  {
   $226 = HEAP32[$2>>2]|0;
   $227 = ((($226)) + 4|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = HEAP32[$2>>2]|0;
   $230 = ((($229)) + 8|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = Math_imul($228, $231)|0;
   $233 = ($232*3)|0;
   $234 = $233;
   $235 = (_malloc($234)|0);
   $236 = HEAP32[$2>>2]|0;
   HEAP32[$236>>2] = $235;
   HEAP32[$12>>2] = 0;
   while(1) {
    $237 = HEAP32[$12>>2]|0;
    $238 = HEAP32[$2>>2]|0;
    $239 = ((($238)) + 4|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = HEAP32[$2>>2]|0;
    $242 = ((($241)) + 8|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = Math_imul($240, $243)|0;
    $245 = ($244*3)|0;
    $246 = ($237|0)<($245|0);
    if (!($246)) {
     break L8;
    }
    $247 = HEAP32[$4>>2]|0;
    $248 = HEAP32[$5>>2]|0;
    $249 = (($247) + ($248<<2)|0);
    $250 = HEAP8[$249>>0]|0;
    $251 = HEAP32[$2>>2]|0;
    $252 = HEAP32[$251>>2]|0;
    $253 = HEAP32[$12>>2]|0;
    $254 = (($252) + ($253)|0);
    HEAP8[$254>>0] = $250;
    $255 = HEAP32[$4>>2]|0;
    $256 = HEAP32[$5>>2]|0;
    $257 = (($255) + ($256<<2)|0);
    $258 = ((($257)) + 1|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = HEAP32[$2>>2]|0;
    $261 = HEAP32[$260>>2]|0;
    $262 = HEAP32[$12>>2]|0;
    $263 = (($262) + 1)|0;
    $264 = (($261) + ($263)|0);
    HEAP8[$264>>0] = $259;
    $265 = HEAP32[$4>>2]|0;
    $266 = HEAP32[$5>>2]|0;
    $267 = (($265) + ($266<<2)|0);
    $268 = ((($267)) + 2|0);
    $269 = HEAP8[$268>>0]|0;
    $270 = HEAP32[$2>>2]|0;
    $271 = HEAP32[$270>>2]|0;
    $272 = HEAP32[$12>>2]|0;
    $273 = (($272) + 2)|0;
    $274 = (($271) + ($273)|0);
    HEAP8[$274>>0] = $269;
    $275 = HEAP32[$5>>2]|0;
    $276 = (($275) + 1)|0;
    HEAP32[$5>>2] = $276;
    $277 = HEAP32[$12>>2]|0;
    $278 = (($277) + 3)|0;
    HEAP32[$12>>2] = $278;
   }
   break;
  }
  case 5:  {
   $279 = HEAP32[$2>>2]|0;
   $280 = ((($279)) + 4|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = HEAP32[$2>>2]|0;
   $283 = ((($282)) + 8|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = Math_imul($281, $284)|0;
   $286 = $285<<1;
   $287 = (_malloc($286)|0);
   $288 = HEAP32[$2>>2]|0;
   HEAP32[$288>>2] = $287;
   HEAP8[$13>>0] = 0;
   HEAP8[$14>>0] = 0;
   HEAP8[$15>>0] = 0;
   HEAP8[$16>>0] = 0;
   HEAP32[$17>>2] = 0;
   while(1) {
    $289 = HEAP32[$17>>2]|0;
    $290 = HEAP32[$2>>2]|0;
    $291 = ((($290)) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = HEAP32[$2>>2]|0;
    $294 = ((($293)) + 8|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = Math_imul($292, $295)|0;
    $297 = ($289|0)<($296|0);
    if (!($297)) {
     break L8;
    }
    $298 = HEAP32[$4>>2]|0;
    $299 = HEAP32[$17>>2]|0;
    $300 = (($298) + ($299<<2)|0);
    $301 = HEAP8[$300>>0]|0;
    $302 = (+($301&255));
    $303 = $302 * 31.0;
    $304 = $303 / 255.0;
    $305 = $304;
    $306 = (+_round((+$305)));
    $307 = (~~(($306))&255);
    HEAP8[$13>>0] = $307;
    $308 = HEAP32[$4>>2]|0;
    $309 = HEAP32[$17>>2]|0;
    $310 = (($308) + ($309<<2)|0);
    $311 = ((($310)) + 1|0);
    $312 = HEAP8[$311>>0]|0;
    $313 = (+($312&255));
    $314 = $313 * 31.0;
    $315 = $314 / 255.0;
    $316 = $315;
    $317 = (+_round((+$316)));
    $318 = (~~(($317))&255);
    HEAP8[$14>>0] = $318;
    $319 = HEAP32[$4>>2]|0;
    $320 = HEAP32[$17>>2]|0;
    $321 = (($319) + ($320<<2)|0);
    $322 = ((($321)) + 2|0);
    $323 = HEAP8[$322>>0]|0;
    $324 = (+($323&255));
    $325 = $324 * 31.0;
    $326 = $325 / 255.0;
    $327 = $326;
    $328 = (+_round((+$327)));
    $329 = (~~(($328))&255);
    HEAP8[$15>>0] = $329;
    $330 = HEAP32[$4>>2]|0;
    $331 = HEAP32[$17>>2]|0;
    $332 = (($330) + ($331<<2)|0);
    $333 = ((($332)) + 3|0);
    $334 = HEAP8[$333>>0]|0;
    $335 = $334&255;
    $336 = ($335|0)>(50);
    $337 = $336 ? 1 : 0;
    $338 = $337&255;
    HEAP8[$16>>0] = $338;
    $339 = HEAP8[$13>>0]|0;
    $340 = $339&255;
    $341 = $340&65535;
    $342 = $341 << 11;
    $343 = HEAP8[$14>>0]|0;
    $344 = $343&255;
    $345 = $344&65535;
    $346 = $345 << 6;
    $347 = $342 | $346;
    $348 = HEAP8[$15>>0]|0;
    $349 = $348&255;
    $350 = $349&65535;
    $351 = $350 << 1;
    $352 = $347 | $351;
    $353 = HEAP8[$16>>0]|0;
    $354 = $353&255;
    $355 = $354&65535;
    $356 = $352 | $355;
    $357 = $356&65535;
    $358 = HEAP32[$2>>2]|0;
    $359 = HEAP32[$358>>2]|0;
    $360 = HEAP32[$17>>2]|0;
    $361 = (($359) + ($360<<1)|0);
    HEAP16[$361>>1] = $357;
    $362 = HEAP32[$17>>2]|0;
    $363 = (($362) + 1)|0;
    HEAP32[$17>>2] = $363;
   }
   break;
  }
  case 6:  {
   $364 = HEAP32[$2>>2]|0;
   $365 = ((($364)) + 4|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = HEAP32[$2>>2]|0;
   $368 = ((($367)) + 8|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = Math_imul($366, $369)|0;
   $371 = $370<<1;
   $372 = (_malloc($371)|0);
   $373 = HEAP32[$2>>2]|0;
   HEAP32[$373>>2] = $372;
   HEAP8[$18>>0] = 0;
   HEAP8[$19>>0] = 0;
   HEAP8[$20>>0] = 0;
   HEAP8[$21>>0] = 0;
   HEAP32[$22>>2] = 0;
   while(1) {
    $374 = HEAP32[$22>>2]|0;
    $375 = HEAP32[$2>>2]|0;
    $376 = ((($375)) + 4|0);
    $377 = HEAP32[$376>>2]|0;
    $378 = HEAP32[$2>>2]|0;
    $379 = ((($378)) + 8|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = Math_imul($377, $380)|0;
    $382 = ($374|0)<($381|0);
    if (!($382)) {
     break L8;
    }
    $383 = HEAP32[$4>>2]|0;
    $384 = HEAP32[$22>>2]|0;
    $385 = (($383) + ($384<<2)|0);
    $386 = HEAP8[$385>>0]|0;
    $387 = (+($386&255));
    $388 = $387 * 15.0;
    $389 = $388 / 255.0;
    $390 = $389;
    $391 = (+_round((+$390)));
    $392 = (~~(($391))&255);
    HEAP8[$18>>0] = $392;
    $393 = HEAP32[$4>>2]|0;
    $394 = HEAP32[$22>>2]|0;
    $395 = (($393) + ($394<<2)|0);
    $396 = ((($395)) + 1|0);
    $397 = HEAP8[$396>>0]|0;
    $398 = (+($397&255));
    $399 = $398 * 15.0;
    $400 = $399 / 255.0;
    $401 = $400;
    $402 = (+_round((+$401)));
    $403 = (~~(($402))&255);
    HEAP8[$19>>0] = $403;
    $404 = HEAP32[$4>>2]|0;
    $405 = HEAP32[$22>>2]|0;
    $406 = (($404) + ($405<<2)|0);
    $407 = ((($406)) + 2|0);
    $408 = HEAP8[$407>>0]|0;
    $409 = (+($408&255));
    $410 = $409 * 15.0;
    $411 = $410 / 255.0;
    $412 = $411;
    $413 = (+_round((+$412)));
    $414 = (~~(($413))&255);
    HEAP8[$20>>0] = $414;
    $415 = HEAP32[$4>>2]|0;
    $416 = HEAP32[$22>>2]|0;
    $417 = (($415) + ($416<<2)|0);
    $418 = ((($417)) + 3|0);
    $419 = HEAP8[$418>>0]|0;
    $420 = (+($419&255));
    $421 = $420 * 15.0;
    $422 = $421 / 255.0;
    $423 = $422;
    $424 = (+_round((+$423)));
    $425 = (~~(($424))&255);
    HEAP8[$21>>0] = $425;
    $426 = HEAP8[$18>>0]|0;
    $427 = $426&255;
    $428 = $427&65535;
    $429 = $428 << 12;
    $430 = HEAP8[$19>>0]|0;
    $431 = $430&255;
    $432 = $431&65535;
    $433 = $432 << 8;
    $434 = $429 | $433;
    $435 = HEAP8[$20>>0]|0;
    $436 = $435&255;
    $437 = $436&65535;
    $438 = $437 << 4;
    $439 = $434 | $438;
    $440 = HEAP8[$21>>0]|0;
    $441 = $440&255;
    $442 = $441&65535;
    $443 = $439 | $442;
    $444 = $443&65535;
    $445 = HEAP32[$2>>2]|0;
    $446 = HEAP32[$445>>2]|0;
    $447 = HEAP32[$22>>2]|0;
    $448 = (($446) + ($447<<1)|0);
    HEAP16[$448>>1] = $444;
    $449 = HEAP32[$22>>2]|0;
    $450 = (($449) + 1)|0;
    HEAP32[$22>>2] = $450;
   }
   break;
  }
  case 7:  {
   $451 = HEAP32[$2>>2]|0;
   $452 = ((($451)) + 4|0);
   $453 = HEAP32[$452>>2]|0;
   $454 = HEAP32[$2>>2]|0;
   $455 = ((($454)) + 8|0);
   $456 = HEAP32[$455>>2]|0;
   $457 = Math_imul($453, $456)|0;
   $458 = $457<<2;
   $459 = $458;
   $460 = (_malloc($459)|0);
   $461 = HEAP32[$2>>2]|0;
   HEAP32[$461>>2] = $460;
   HEAP32[$23>>2] = 0;
   while(1) {
    $462 = HEAP32[$23>>2]|0;
    $463 = HEAP32[$2>>2]|0;
    $464 = ((($463)) + 4|0);
    $465 = HEAP32[$464>>2]|0;
    $466 = HEAP32[$2>>2]|0;
    $467 = ((($466)) + 8|0);
    $468 = HEAP32[$467>>2]|0;
    $469 = Math_imul($465, $468)|0;
    $470 = $469<<2;
    $471 = ($462|0)<($470|0);
    if (!($471)) {
     break L8;
    }
    $472 = HEAP32[$4>>2]|0;
    $473 = HEAP32[$5>>2]|0;
    $474 = (($472) + ($473<<2)|0);
    $475 = HEAP8[$474>>0]|0;
    $476 = HEAP32[$2>>2]|0;
    $477 = HEAP32[$476>>2]|0;
    $478 = HEAP32[$23>>2]|0;
    $479 = (($477) + ($478)|0);
    HEAP8[$479>>0] = $475;
    $480 = HEAP32[$4>>2]|0;
    $481 = HEAP32[$5>>2]|0;
    $482 = (($480) + ($481<<2)|0);
    $483 = ((($482)) + 1|0);
    $484 = HEAP8[$483>>0]|0;
    $485 = HEAP32[$2>>2]|0;
    $486 = HEAP32[$485>>2]|0;
    $487 = HEAP32[$23>>2]|0;
    $488 = (($487) + 1)|0;
    $489 = (($486) + ($488)|0);
    HEAP8[$489>>0] = $484;
    $490 = HEAP32[$4>>2]|0;
    $491 = HEAP32[$5>>2]|0;
    $492 = (($490) + ($491<<2)|0);
    $493 = ((($492)) + 2|0);
    $494 = HEAP8[$493>>0]|0;
    $495 = HEAP32[$2>>2]|0;
    $496 = HEAP32[$495>>2]|0;
    $497 = HEAP32[$23>>2]|0;
    $498 = (($497) + 2)|0;
    $499 = (($496) + ($498)|0);
    HEAP8[$499>>0] = $494;
    $500 = HEAP32[$4>>2]|0;
    $501 = HEAP32[$5>>2]|0;
    $502 = (($500) + ($501<<2)|0);
    $503 = ((($502)) + 3|0);
    $504 = HEAP8[$503>>0]|0;
    $505 = HEAP32[$2>>2]|0;
    $506 = HEAP32[$505>>2]|0;
    $507 = HEAP32[$23>>2]|0;
    $508 = (($507) + 3)|0;
    $509 = (($506) + ($508)|0);
    HEAP8[$509>>0] = $504;
    $510 = HEAP32[$5>>2]|0;
    $511 = (($510) + 1)|0;
    HEAP32[$5>>2] = $511;
    $512 = HEAP32[$23>>2]|0;
    $513 = (($512) + 4)|0;
    HEAP32[$23>>2] = $513;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $514 = HEAP32[$4>>2]|0;
 _free($514);
 STACKTOP = sp;return;
}
function _LoadTextureFromImage($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $2 = sp + 20|0;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_rlLoadTexture($3,$5,$7,$9,$11)|0);
 HEAP32[$2>>2] = $12;
 $13 = ((($1)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($2)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($2)) + 8|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($2)) + 12|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($1)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($2)) + 16|0);
 HEAP32[$24>>2] = $23;
 $25 = HEAP32[$2>>2]|0;
 $26 = ((($2)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($2)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($2)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($2)) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$vararg_buffer>>2] = $25;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $27;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $29;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $31;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $33;
 _TraceLog(3,5409,$vararg_buffer);
 ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;
 STACKTOP = sp;return;
}
function _UnloadImage($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 _free($3);
 return;
}
function _rlLoadTexture($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer28 = sp + 64|0;
 $vararg_buffer24 = sp + 48|0;
 $vararg_buffer22 = sp + 40|0;
 $vararg_buffer20 = sp + 32|0;
 $vararg_buffer18 = sp + 24|0;
 $vararg_buffer16 = sp + 16|0;
 $vararg_buffer14 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 92|0;
 $6 = sp + 88|0;
 $7 = sp + 84|0;
 $8 = sp + 80|0;
 $9 = sp + 76|0;
 $10 = sp + 72|0;
 $11 = sp + 68|0;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 _glBindTexture(3553,0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[5471]|0;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $14 = HEAP32[$9>>2]|0;
  $15 = ($14|0)==(9);
  $16 = HEAP32[$9>>2]|0;
  $17 = ($16|0)==(10);
  $or$cond = $15 | $17;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($18|0)==(11);
  $or$cond3 = $or$cond | $19;
  $20 = HEAP32[$9>>2]|0;
  $21 = ($20|0)==(12);
  $or$cond5 = $or$cond3 | $21;
  if ($or$cond5) {
   _TraceLog(1,5459,$vararg_buffer);
   $22 = HEAP32[$11>>2]|0;
   HEAP32[$5>>2] = $22;
   $151 = HEAP32[$5>>2]|0;
   STACKTOP = sp;return ($151|0);
  }
 }
 $23 = HEAP32[5472]|0;
 $24 = ($23|0)==(0);
 $25 = HEAP32[$9>>2]|0;
 $26 = ($25|0)==(13);
 $or$cond7 = $24 & $26;
 if ($or$cond7) {
  _TraceLog(1,5503,$vararg_buffer14);
  $27 = HEAP32[$11>>2]|0;
  HEAP32[$5>>2] = $27;
  $151 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($151|0);
 }
 $28 = HEAP32[5473]|0;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $30 = HEAP32[$9>>2]|0;
  $31 = ($30|0)==(14);
  $32 = HEAP32[$9>>2]|0;
  $33 = ($32|0)==(15);
  $or$cond9 = $31 | $33;
  if ($or$cond9) {
   _TraceLog(1,5548,$vararg_buffer16);
   $34 = HEAP32[$11>>2]|0;
   HEAP32[$5>>2] = $34;
   $151 = HEAP32[$5>>2]|0;
   STACKTOP = sp;return ($151|0);
  }
 }
 $35 = HEAP32[5474]|0;
 $36 = ($35|0)!=(0);
 if (!($36)) {
  $37 = HEAP32[$9>>2]|0;
  $38 = ($37|0)==(16);
  $39 = HEAP32[$9>>2]|0;
  $40 = ($39|0)==(17);
  $or$cond11 = $38 | $40;
  if ($or$cond11) {
   _TraceLog(1,5593,$vararg_buffer18);
   $41 = HEAP32[$11>>2]|0;
   HEAP32[$5>>2] = $41;
   $151 = HEAP32[$5>>2]|0;
   STACKTOP = sp;return ($151|0);
  }
 }
 $42 = HEAP32[5475]|0;
 $43 = ($42|0)!=(0);
 if (!($43)) {
  $44 = HEAP32[$9>>2]|0;
  $45 = ($44|0)==(18);
  $46 = HEAP32[$9>>2]|0;
  $47 = ($46|0)==(19);
  $or$cond13 = $45 | $47;
  if ($or$cond13) {
   _TraceLog(1,5638,$vararg_buffer20);
   $48 = HEAP32[$11>>2]|0;
   HEAP32[$5>>2] = $48;
   $151 = HEAP32[$5>>2]|0;
   STACKTOP = sp;return ($151|0);
  }
 }
 _glGenTextures(1,($11|0));
 $49 = HEAP32[$11>>2]|0;
 _glBindTexture(3553,($49|0));
 $50 = HEAP32[$9>>2]|0;
 do {
  switch ($50|0) {
  case 1:  {
   $51 = HEAP32[$7>>2]|0;
   $52 = HEAP32[$8>>2]|0;
   $53 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6409,($51|0),($52|0),0,6409,5121,($53|0));
   break;
  }
  case 2:  {
   $54 = HEAP32[$7>>2]|0;
   $55 = HEAP32[$8>>2]|0;
   $56 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6410,($54|0),($55|0),0,6410,5121,($56|0));
   break;
  }
  case 3:  {
   $57 = HEAP32[$7>>2]|0;
   $58 = HEAP32[$8>>2]|0;
   $59 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6407,($57|0),($58|0),0,6407,33635,($59|0));
   break;
  }
  case 4:  {
   $60 = HEAP32[$7>>2]|0;
   $61 = HEAP32[$8>>2]|0;
   $62 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6407,($60|0),($61|0),0,6407,5121,($62|0));
   break;
  }
  case 5:  {
   $63 = HEAP32[$7>>2]|0;
   $64 = HEAP32[$8>>2]|0;
   $65 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6408,($63|0),($64|0),0,6408,32820,($65|0));
   break;
  }
  case 6:  {
   $66 = HEAP32[$7>>2]|0;
   $67 = HEAP32[$8>>2]|0;
   $68 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6408,($66|0),($67|0),0,6408,32819,($68|0));
   break;
  }
  case 7:  {
   $69 = HEAP32[$7>>2]|0;
   $70 = HEAP32[$8>>2]|0;
   $71 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6408,($69|0),($70|0),0,6408,5121,($71|0));
   break;
  }
  case 8:  {
   $72 = HEAP32[5476]|0;
   $73 = ($72|0)!=(0);
   if ($73) {
    $74 = HEAP32[$7>>2]|0;
    $75 = HEAP32[$8>>2]|0;
    $76 = HEAP32[$6>>2]|0;
    _glTexImage2D(3553,0,6407,($74|0),($75|0),0,6407,5126,($76|0));
   }
   break;
  }
  case 9:  {
   $77 = HEAP32[5471]|0;
   $78 = ($77|0)!=(0);
   if ($78) {
    $79 = HEAP32[$6>>2]|0;
    $80 = HEAP32[$7>>2]|0;
    $81 = HEAP32[$8>>2]|0;
    $82 = HEAP32[$10>>2]|0;
    _LoadTextureCompressed($79,$80,$81,33776,$82);
   }
   break;
  }
  case 10:  {
   $83 = HEAP32[5471]|0;
   $84 = ($83|0)!=(0);
   if ($84) {
    $85 = HEAP32[$6>>2]|0;
    $86 = HEAP32[$7>>2]|0;
    $87 = HEAP32[$8>>2]|0;
    $88 = HEAP32[$10>>2]|0;
    _LoadTextureCompressed($85,$86,$87,33777,$88);
   }
   break;
  }
  case 11:  {
   $89 = HEAP32[5471]|0;
   $90 = ($89|0)!=(0);
   if ($90) {
    $91 = HEAP32[$6>>2]|0;
    $92 = HEAP32[$7>>2]|0;
    $93 = HEAP32[$8>>2]|0;
    $94 = HEAP32[$10>>2]|0;
    _LoadTextureCompressed($91,$92,$93,33778,$94);
   }
   break;
  }
  case 12:  {
   $95 = HEAP32[5471]|0;
   $96 = ($95|0)!=(0);
   if ($96) {
    $97 = HEAP32[$6>>2]|0;
    $98 = HEAP32[$7>>2]|0;
    $99 = HEAP32[$8>>2]|0;
    $100 = HEAP32[$10>>2]|0;
    _LoadTextureCompressed($97,$98,$99,33779,$100);
   }
   break;
  }
  case 13:  {
   $101 = HEAP32[5472]|0;
   $102 = ($101|0)!=(0);
   if ($102) {
    $103 = HEAP32[$6>>2]|0;
    $104 = HEAP32[$7>>2]|0;
    $105 = HEAP32[$8>>2]|0;
    $106 = HEAP32[$10>>2]|0;
    _LoadTextureCompressed($103,$104,$105,36196,$106);
   }
   break;
  }
  case 14:  {
   $107 = HEAP32[5473]|0;
   $108 = ($107|0)!=(0);
   if ($108) {
    $109 = HEAP32[$6>>2]|0;
    $110 = HEAP32[$7>>2]|0;
    $111 = HEAP32[$8>>2]|0;
    $112 = HEAP32[$10>>2]|0;
    _LoadTextureCompressed($109,$110,$111,37492,$112);
   }
   break;
  }
  case 15:  {
   $113 = HEAP32[5473]|0;
   $114 = ($113|0)!=(0);
   if ($114) {
    $115 = HEAP32[$6>>2]|0;
    $116 = HEAP32[$7>>2]|0;
    $117 = HEAP32[$8>>2]|0;
    $118 = HEAP32[$10>>2]|0;
    _LoadTextureCompressed($115,$116,$117,37496,$118);
   }
   break;
  }
  case 16:  {
   $119 = HEAP32[5474]|0;
   $120 = ($119|0)!=(0);
   if ($120) {
    $121 = HEAP32[$6>>2]|0;
    $122 = HEAP32[$7>>2]|0;
    $123 = HEAP32[$8>>2]|0;
    $124 = HEAP32[$10>>2]|0;
    _LoadTextureCompressed($121,$122,$123,35840,$124);
   }
   break;
  }
  case 17:  {
   $125 = HEAP32[5474]|0;
   $126 = ($125|0)!=(0);
   if ($126) {
    $127 = HEAP32[$6>>2]|0;
    $128 = HEAP32[$7>>2]|0;
    $129 = HEAP32[$8>>2]|0;
    $130 = HEAP32[$10>>2]|0;
    _LoadTextureCompressed($127,$128,$129,35842,$130);
   }
   break;
  }
  case 18:  {
   $131 = HEAP32[5475]|0;
   $132 = ($131|0)!=(0);
   if ($132) {
    $133 = HEAP32[$6>>2]|0;
    $134 = HEAP32[$7>>2]|0;
    $135 = HEAP32[$8>>2]|0;
    $136 = HEAP32[$10>>2]|0;
    _LoadTextureCompressed($133,$134,$135,37808,$136);
   }
   break;
  }
  case 19:  {
   $137 = HEAP32[5475]|0;
   $138 = ($137|0)!=(0);
   if ($138) {
    $139 = HEAP32[$6>>2]|0;
    $140 = HEAP32[$7>>2]|0;
    $141 = HEAP32[$8>>2]|0;
    $142 = HEAP32[$10>>2]|0;
    _LoadTextureCompressed($139,$140,$141,37815,$142);
   }
   break;
  }
  default: {
   _TraceLog(1,5683,$vararg_buffer22);
  }
  }
 } while(0);
 $143 = HEAP32[5477]|0;
 $144 = ($143|0)!=(0);
 if ($144) {
  _glTexParameteri(3553,10242,10497);
  _glTexParameteri(3553,10243,10497);
 } else {
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
 }
 _glTexParameteri(3553,10240,9728);
 _glTexParameteri(3553,10241,9728);
 _glBindTexture(3553,0);
 $145 = HEAP32[$11>>2]|0;
 $146 = ($145>>>0)>(0);
 if ($146) {
  $147 = HEAP32[$11>>2]|0;
  $148 = HEAP32[$7>>2]|0;
  $149 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer24>>2] = $147;
  $vararg_ptr26 = ((($vararg_buffer24)) + 4|0);
  HEAP32[$vararg_ptr26>>2] = $148;
  $vararg_ptr27 = ((($vararg_buffer24)) + 8|0);
  HEAP32[$vararg_ptr27>>2] = $149;
  _TraceLog(0,5712,$vararg_buffer24);
 } else {
  _TraceLog(1,5761,$vararg_buffer28);
 }
 $150 = HEAP32[$11>>2]|0;
 HEAP32[$5>>2] = $150;
 $151 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($151|0);
}
function _LoadTextureCompressed($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 24|0;
 $8 = sp + 20|0;
 $9 = sp + 16|0;
 $10 = sp + 12|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 _glPixelStorei(3317,1);
 HEAP32[$10>>2] = 0;
 HEAP32[$11>>2] = 0;
 $14 = HEAP32[$8>>2]|0;
 $15 = ($14|0)==(33776);
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)==(33777);
 $or$cond = $15 | $17;
 $18 = HEAP32[$8>>2]|0;
 $19 = ($18|0)==(36196);
 $or$cond3 = $or$cond | $19;
 $20 = HEAP32[$8>>2]|0;
 $21 = ($20|0)==(37492);
 $or$cond5 = $or$cond3 | $21;
 if ($or$cond5) {
  HEAP32[$10>>2] = 8;
 } else {
  HEAP32[$10>>2] = 16;
 }
 HEAP32[$12>>2] = 0;
 while(1) {
  $22 = HEAP32[$12>>2]|0;
  $23 = HEAP32[$9>>2]|0;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   label = 12;
   break;
  }
  $25 = HEAP32[$6>>2]|0;
  $26 = ($25|0)!=(0);
  $27 = HEAP32[$7>>2]|0;
  $28 = ($27|0)!=(0);
  $29 = $26 ? 1 : $28;
  if (!($29)) {
   label = 12;
   break;
  }
  HEAP32[$13>>2] = 0;
  $30 = HEAP32[$6>>2]|0;
  $31 = (($30) + 3)|0;
  $32 = (($31|0) / 4)&-1;
  $33 = HEAP32[$7>>2]|0;
  $34 = (($33) + 3)|0;
  $35 = (($34|0) / 4)&-1;
  $36 = Math_imul($32, $35)|0;
  $37 = HEAP32[$10>>2]|0;
  $38 = Math_imul($36, $37)|0;
  HEAP32[$13>>2] = $38;
  $39 = HEAP32[$12>>2]|0;
  $40 = HEAP32[$8>>2]|0;
  $41 = HEAP32[$6>>2]|0;
  $42 = HEAP32[$7>>2]|0;
  $43 = HEAP32[$13>>2]|0;
  $44 = HEAP32[$5>>2]|0;
  $45 = HEAP32[$11>>2]|0;
  $46 = (($44) + ($45)|0);
  _glCompressedTexImage2D(3553,($39|0),($40|0),($41|0),($42|0),0,($43|0),($46|0));
  $47 = HEAP32[$13>>2]|0;
  $48 = HEAP32[$11>>2]|0;
  $49 = (($48) + ($47))|0;
  HEAP32[$11>>2] = $49;
  $50 = HEAP32[$6>>2]|0;
  $51 = (($50|0) / 2)&-1;
  HEAP32[$6>>2] = $51;
  $52 = HEAP32[$7>>2]|0;
  $53 = (($52|0) / 2)&-1;
  HEAP32[$7>>2] = $53;
  $54 = HEAP32[$6>>2]|0;
  $55 = ($54|0)<(1);
  if ($55) {
   HEAP32[$6>>2] = 1;
  }
  $56 = HEAP32[$7>>2]|0;
  $57 = ($56|0)<(1);
  if ($57) {
   HEAP32[$7>>2] = 1;
  }
  $58 = HEAP32[$12>>2]|0;
  $59 = (($58) + 1)|0;
  HEAP32[$12>>2] = $59;
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _GetImageData($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp + 20|0;
 $5 = sp + 18|0;
 $6 = sp + 16|0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = Math_imul($8, $10)|0;
 $12 = $11<<2;
 $13 = (_malloc($12)|0);
 HEAP32[$1>>2] = $13;
 HEAP32[$2>>2] = 0;
 HEAP32[$3>>2] = 0;
 while(1) {
  $14 = HEAP32[$3>>2]|0;
  $15 = ((($0)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = Math_imul($16, $18)|0;
  $20 = ($14|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = ((($0)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  switch ($22|0) {
  case 1:  {
   $23 = HEAP32[$0>>2]|0;
   $24 = HEAP32[$2>>2]|0;
   $25 = (($23) + ($24)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = HEAP32[$1>>2]|0;
   $28 = HEAP32[$3>>2]|0;
   $29 = (($27) + ($28<<2)|0);
   HEAP8[$29>>0] = $26;
   $30 = HEAP32[$0>>2]|0;
   $31 = HEAP32[$2>>2]|0;
   $32 = (($30) + ($31)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = HEAP32[$1>>2]|0;
   $35 = HEAP32[$3>>2]|0;
   $36 = (($34) + ($35<<2)|0);
   $37 = ((($36)) + 1|0);
   HEAP8[$37>>0] = $33;
   $38 = HEAP32[$0>>2]|0;
   $39 = HEAP32[$2>>2]|0;
   $40 = (($38) + ($39)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = HEAP32[$1>>2]|0;
   $43 = HEAP32[$3>>2]|0;
   $44 = (($42) + ($43<<2)|0);
   $45 = ((($44)) + 2|0);
   HEAP8[$45>>0] = $41;
   $46 = HEAP32[$1>>2]|0;
   $47 = HEAP32[$3>>2]|0;
   $48 = (($46) + ($47<<2)|0);
   $49 = ((($48)) + 3|0);
   HEAP8[$49>>0] = -1;
   $50 = HEAP32[$2>>2]|0;
   $51 = (($50) + 1)|0;
   HEAP32[$2>>2] = $51;
   break;
  }
  case 2:  {
   $52 = HEAP32[$0>>2]|0;
   $53 = HEAP32[$2>>2]|0;
   $54 = (($52) + ($53)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = HEAP32[$1>>2]|0;
   $57 = HEAP32[$3>>2]|0;
   $58 = (($56) + ($57<<2)|0);
   HEAP8[$58>>0] = $55;
   $59 = HEAP32[$0>>2]|0;
   $60 = HEAP32[$2>>2]|0;
   $61 = (($59) + ($60)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = HEAP32[$1>>2]|0;
   $64 = HEAP32[$3>>2]|0;
   $65 = (($63) + ($64<<2)|0);
   $66 = ((($65)) + 1|0);
   HEAP8[$66>>0] = $62;
   $67 = HEAP32[$0>>2]|0;
   $68 = HEAP32[$2>>2]|0;
   $69 = (($67) + ($68)|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = HEAP32[$1>>2]|0;
   $72 = HEAP32[$3>>2]|0;
   $73 = (($71) + ($72<<2)|0);
   $74 = ((($73)) + 2|0);
   HEAP8[$74>>0] = $70;
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = (($76) + 1)|0;
   $78 = (($75) + ($77)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = HEAP32[$1>>2]|0;
   $81 = HEAP32[$3>>2]|0;
   $82 = (($80) + ($81<<2)|0);
   $83 = ((($82)) + 3|0);
   HEAP8[$83>>0] = $79;
   $84 = HEAP32[$2>>2]|0;
   $85 = (($84) + 2)|0;
   HEAP32[$2>>2] = $85;
   break;
  }
  case 5:  {
   $86 = HEAP32[$0>>2]|0;
   $87 = HEAP32[$2>>2]|0;
   $88 = (($86) + ($87<<1)|0);
   $89 = HEAP16[$88>>1]|0;
   HEAP16[$4>>1] = $89;
   $90 = HEAP16[$4>>1]|0;
   $91 = $90&65535;
   $92 = $91 & 63488;
   $93 = $92 >> 11;
   $94 = (+($93|0));
   $95 = $94 * 8.0;
   $96 = (~~(($95))&255);
   $97 = HEAP32[$1>>2]|0;
   $98 = HEAP32[$3>>2]|0;
   $99 = (($97) + ($98<<2)|0);
   HEAP8[$99>>0] = $96;
   $100 = HEAP16[$4>>1]|0;
   $101 = $100&65535;
   $102 = $101 & 1984;
   $103 = $102 >> 6;
   $104 = (+($103|0));
   $105 = $104 * 8.0;
   $106 = (~~(($105))&255);
   $107 = HEAP32[$1>>2]|0;
   $108 = HEAP32[$3>>2]|0;
   $109 = (($107) + ($108<<2)|0);
   $110 = ((($109)) + 1|0);
   HEAP8[$110>>0] = $106;
   $111 = HEAP16[$4>>1]|0;
   $112 = $111&65535;
   $113 = $112 & 62;
   $114 = $113 >> 1;
   $115 = (+($114|0));
   $116 = $115 * 8.0;
   $117 = (~~(($116))&255);
   $118 = HEAP32[$1>>2]|0;
   $119 = HEAP32[$3>>2]|0;
   $120 = (($118) + ($119<<2)|0);
   $121 = ((($120)) + 2|0);
   HEAP8[$121>>0] = $117;
   $122 = HEAP16[$4>>1]|0;
   $123 = $122&65535;
   $124 = $123 & 1;
   $125 = ($124*255)|0;
   $126 = $125&255;
   $127 = HEAP32[$1>>2]|0;
   $128 = HEAP32[$3>>2]|0;
   $129 = (($127) + ($128<<2)|0);
   $130 = ((($129)) + 3|0);
   HEAP8[$130>>0] = $126;
   $131 = HEAP32[$2>>2]|0;
   $132 = (($131) + 1)|0;
   HEAP32[$2>>2] = $132;
   break;
  }
  case 3:  {
   $133 = HEAP32[$0>>2]|0;
   $134 = HEAP32[$2>>2]|0;
   $135 = (($133) + ($134<<1)|0);
   $136 = HEAP16[$135>>1]|0;
   HEAP16[$5>>1] = $136;
   $137 = HEAP16[$5>>1]|0;
   $138 = $137&65535;
   $139 = $138 & 63488;
   $140 = $139 >> 11;
   $141 = (+($140|0));
   $142 = $141 * 8.0;
   $143 = (~~(($142))&255);
   $144 = HEAP32[$1>>2]|0;
   $145 = HEAP32[$3>>2]|0;
   $146 = (($144) + ($145<<2)|0);
   HEAP8[$146>>0] = $143;
   $147 = HEAP16[$5>>1]|0;
   $148 = $147&65535;
   $149 = $148 & 2016;
   $150 = $149 >> 5;
   $151 = (+($150|0));
   $152 = $151 * 4.0;
   $153 = (~~(($152))&255);
   $154 = HEAP32[$1>>2]|0;
   $155 = HEAP32[$3>>2]|0;
   $156 = (($154) + ($155<<2)|0);
   $157 = ((($156)) + 1|0);
   HEAP8[$157>>0] = $153;
   $158 = HEAP16[$5>>1]|0;
   $159 = $158&65535;
   $160 = $159 & 31;
   $161 = (+($160|0));
   $162 = $161 * 8.0;
   $163 = (~~(($162))&255);
   $164 = HEAP32[$1>>2]|0;
   $165 = HEAP32[$3>>2]|0;
   $166 = (($164) + ($165<<2)|0);
   $167 = ((($166)) + 2|0);
   HEAP8[$167>>0] = $163;
   $168 = HEAP32[$1>>2]|0;
   $169 = HEAP32[$3>>2]|0;
   $170 = (($168) + ($169<<2)|0);
   $171 = ((($170)) + 3|0);
   HEAP8[$171>>0] = -1;
   $172 = HEAP32[$2>>2]|0;
   $173 = (($172) + 1)|0;
   HEAP32[$2>>2] = $173;
   break;
  }
  case 6:  {
   $174 = HEAP32[$0>>2]|0;
   $175 = HEAP32[$2>>2]|0;
   $176 = (($174) + ($175<<1)|0);
   $177 = HEAP16[$176>>1]|0;
   HEAP16[$6>>1] = $177;
   $178 = HEAP16[$6>>1]|0;
   $179 = $178&65535;
   $180 = $179 & 61440;
   $181 = $180 >> 12;
   $182 = (+($181|0));
   $183 = $182 * 17.0;
   $184 = (~~(($183))&255);
   $185 = HEAP32[$1>>2]|0;
   $186 = HEAP32[$3>>2]|0;
   $187 = (($185) + ($186<<2)|0);
   HEAP8[$187>>0] = $184;
   $188 = HEAP16[$6>>1]|0;
   $189 = $188&65535;
   $190 = $189 & 3840;
   $191 = $190 >> 8;
   $192 = (+($191|0));
   $193 = $192 * 17.0;
   $194 = (~~(($193))&255);
   $195 = HEAP32[$1>>2]|0;
   $196 = HEAP32[$3>>2]|0;
   $197 = (($195) + ($196<<2)|0);
   $198 = ((($197)) + 1|0);
   HEAP8[$198>>0] = $194;
   $199 = HEAP16[$6>>1]|0;
   $200 = $199&65535;
   $201 = $200 & 240;
   $202 = $201 >> 4;
   $203 = (+($202|0));
   $204 = $203 * 17.0;
   $205 = (~~(($204))&255);
   $206 = HEAP32[$1>>2]|0;
   $207 = HEAP32[$3>>2]|0;
   $208 = (($206) + ($207<<2)|0);
   $209 = ((($208)) + 2|0);
   HEAP8[$209>>0] = $205;
   $210 = HEAP16[$6>>1]|0;
   $211 = $210&65535;
   $212 = $211 & 15;
   $213 = (+($212|0));
   $214 = $213 * 17.0;
   $215 = (~~(($214))&255);
   $216 = HEAP32[$1>>2]|0;
   $217 = HEAP32[$3>>2]|0;
   $218 = (($216) + ($217<<2)|0);
   $219 = ((($218)) + 3|0);
   HEAP8[$219>>0] = $215;
   $220 = HEAP32[$2>>2]|0;
   $221 = (($220) + 1)|0;
   HEAP32[$2>>2] = $221;
   break;
  }
  case 7:  {
   $222 = HEAP32[$0>>2]|0;
   $223 = HEAP32[$2>>2]|0;
   $224 = (($222) + ($223)|0);
   $225 = HEAP8[$224>>0]|0;
   $226 = HEAP32[$1>>2]|0;
   $227 = HEAP32[$3>>2]|0;
   $228 = (($226) + ($227<<2)|0);
   HEAP8[$228>>0] = $225;
   $229 = HEAP32[$0>>2]|0;
   $230 = HEAP32[$2>>2]|0;
   $231 = (($230) + 1)|0;
   $232 = (($229) + ($231)|0);
   $233 = HEAP8[$232>>0]|0;
   $234 = HEAP32[$1>>2]|0;
   $235 = HEAP32[$3>>2]|0;
   $236 = (($234) + ($235<<2)|0);
   $237 = ((($236)) + 1|0);
   HEAP8[$237>>0] = $233;
   $238 = HEAP32[$0>>2]|0;
   $239 = HEAP32[$2>>2]|0;
   $240 = (($239) + 2)|0;
   $241 = (($238) + ($240)|0);
   $242 = HEAP8[$241>>0]|0;
   $243 = HEAP32[$1>>2]|0;
   $244 = HEAP32[$3>>2]|0;
   $245 = (($243) + ($244<<2)|0);
   $246 = ((($245)) + 2|0);
   HEAP8[$246>>0] = $242;
   $247 = HEAP32[$0>>2]|0;
   $248 = HEAP32[$2>>2]|0;
   $249 = (($248) + 3)|0;
   $250 = (($247) + ($249)|0);
   $251 = HEAP8[$250>>0]|0;
   $252 = HEAP32[$1>>2]|0;
   $253 = HEAP32[$3>>2]|0;
   $254 = (($252) + ($253<<2)|0);
   $255 = ((($254)) + 3|0);
   HEAP8[$255>>0] = $251;
   $256 = HEAP32[$2>>2]|0;
   $257 = (($256) + 4)|0;
   HEAP32[$2>>2] = $257;
   break;
  }
  case 4:  {
   $258 = HEAP32[$0>>2]|0;
   $259 = HEAP32[$2>>2]|0;
   $260 = (($258) + ($259)|0);
   $261 = HEAP8[$260>>0]|0;
   $262 = HEAP32[$1>>2]|0;
   $263 = HEAP32[$3>>2]|0;
   $264 = (($262) + ($263<<2)|0);
   HEAP8[$264>>0] = $261;
   $265 = HEAP32[$0>>2]|0;
   $266 = HEAP32[$2>>2]|0;
   $267 = (($266) + 1)|0;
   $268 = (($265) + ($267)|0);
   $269 = HEAP8[$268>>0]|0;
   $270 = HEAP32[$1>>2]|0;
   $271 = HEAP32[$3>>2]|0;
   $272 = (($270) + ($271<<2)|0);
   $273 = ((($272)) + 1|0);
   HEAP8[$273>>0] = $269;
   $274 = HEAP32[$0>>2]|0;
   $275 = HEAP32[$2>>2]|0;
   $276 = (($275) + 2)|0;
   $277 = (($274) + ($276)|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = HEAP32[$1>>2]|0;
   $280 = HEAP32[$3>>2]|0;
   $281 = (($279) + ($280<<2)|0);
   $282 = ((($281)) + 2|0);
   HEAP8[$282>>0] = $278;
   $283 = HEAP32[$1>>2]|0;
   $284 = HEAP32[$3>>2]|0;
   $285 = (($283) + ($284<<2)|0);
   $286 = ((($285)) + 3|0);
   HEAP8[$286>>0] = -1;
   $287 = HEAP32[$2>>2]|0;
   $288 = (($287) + 3)|0;
   HEAP32[$2>>2] = $288;
   break;
  }
  default: {
   _TraceLog(1,5844,$vararg_buffer);
  }
  }
  $289 = HEAP32[$3>>2]|0;
  $290 = (($289) + 1)|0;
  HEAP32[$3>>2] = $290;
 }
 $291 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($291|0);
}
function _ErrorCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 _TraceLog(1,9560,$vararg_buffer);
 STACKTOP = sp;return;
}
function _rlGetVersion() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function _SetupFramebufferSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0;
 var $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer6 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 128|0;
 $3 = sp + 124|0;
 $4 = sp + 120|0;
 $5 = sp + 116|0;
 $6 = sp + 112|0;
 $7 = sp + 48|0;
 $8 = sp + 44|0;
 $9 = sp + 40|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $10 = HEAP32[5452]|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = ($10|0)>($11|0);
 if (!($12)) {
  $13 = HEAP32[5453]|0;
  $14 = HEAP32[$3>>2]|0;
  $15 = ($13|0)>($14|0);
  if (!($15)) {
   $67 = HEAP32[5452]|0;
   $68 = HEAP32[$2>>2]|0;
   $69 = ($67|0)<($68|0);
   if ($69) {
    label = 9;
   } else {
    $70 = HEAP32[5453]|0;
    $71 = HEAP32[$3>>2]|0;
    $72 = ($70|0)<($71|0);
    if ($72) {
     label = 9;
    } else {
     $112 = HEAP32[5452]|0;
     HEAP32[5497] = $112;
     $113 = HEAP32[5453]|0;
     HEAP32[5498] = $113;
     HEAP32[5499] = 0;
     $$sink2 = 0;
    }
   }
   do {
    if ((label|0) == 9) {
     $73 = HEAP32[5452]|0;
     $74 = HEAP32[5453]|0;
     $75 = HEAP32[$2>>2]|0;
     $76 = HEAP32[$3>>2]|0;
     HEAP32[$vararg_buffer10>>2] = $73;
     $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
     HEAP32[$vararg_ptr13>>2] = $74;
     $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
     HEAP32[$vararg_ptr14>>2] = $75;
     $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
     HEAP32[$vararg_ptr15>>2] = $76;
     _TraceLog(0,9494,$vararg_buffer10);
     $77 = HEAP32[$2>>2]|0;
     $78 = (+($77|0));
     $79 = HEAP32[$3>>2]|0;
     $80 = (+($79|0));
     $81 = $78 / $80;
     HEAPF32[$8>>2] = $81;
     $82 = HEAP32[5452]|0;
     $83 = (+($82|0));
     $84 = HEAP32[5453]|0;
     $85 = (+($84|0));
     $86 = $83 / $85;
     HEAPF32[$9>>2] = $86;
     $87 = +HEAPF32[$8>>2];
     $88 = +HEAPF32[$9>>2];
     $89 = $87 <= $88;
     if ($89) {
      $90 = HEAP32[5452]|0;
      HEAP32[5497] = $90;
      $91 = HEAP32[5452]|0;
      $92 = (+($91|0));
      $93 = +HEAPF32[$8>>2];
      $94 = $92 / $93;
      $95 = $94;
      $96 = (+_round((+$95)));
      $97 = (~~(($96)));
      HEAP32[5498] = $97;
      HEAP32[5499] = 0;
      $98 = HEAP32[5498]|0;
      $99 = HEAP32[5453]|0;
      $100 = (($98) - ($99))|0;
      $$sink2 = $100;
      break;
     } else {
      $101 = HEAP32[5453]|0;
      $102 = (+($101|0));
      $103 = +HEAPF32[$8>>2];
      $104 = $102 * $103;
      $105 = $104;
      $106 = (+_round((+$105)));
      $107 = (~~(($106)));
      HEAP32[5497] = $107;
      $108 = HEAP32[5453]|0;
      HEAP32[5498] = $108;
      $109 = HEAP32[5497]|0;
      $110 = HEAP32[5452]|0;
      $111 = (($109) - ($110))|0;
      HEAP32[5499] = $111;
      $$sink2 = 0;
      break;
     }
    }
   } while(0);
   HEAP32[5500] = $$sink2;
   STACKTOP = sp;return;
  }
 }
 $16 = HEAP32[5452]|0;
 $17 = HEAP32[5453]|0;
 $18 = HEAP32[$2>>2]|0;
 $19 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $16;
 $vararg_ptr3 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $17;
 $vararg_ptr4 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr4>>2] = $18;
 $vararg_ptr5 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr5>>2] = $19;
 _TraceLog(1,9351,$vararg_buffer);
 $20 = HEAP32[$2>>2]|0;
 $21 = (+($20|0));
 $22 = HEAP32[5452]|0;
 $23 = (+($22|0));
 $24 = $21 / $23;
 HEAPF32[$4>>2] = $24;
 $25 = HEAP32[$3>>2]|0;
 $26 = (+($25|0));
 $27 = HEAP32[5453]|0;
 $28 = (+($27|0));
 $29 = $26 / $28;
 HEAPF32[$5>>2] = $29;
 $30 = +HEAPF32[$4>>2];
 $31 = +HEAPF32[$5>>2];
 $32 = $30 <= $31;
 if ($32) {
  $33 = HEAP32[$2>>2]|0;
  HEAP32[5497] = $33;
  $34 = HEAP32[5453]|0;
  $35 = (+($34|0));
  $36 = +HEAPF32[$4>>2];
  $37 = $35 * $36;
  $38 = $37;
  $39 = (+_round((+$38)));
  $40 = (~~(($39)));
  HEAP32[5498] = $40;
  HEAP32[5499] = 0;
  $41 = HEAP32[$3>>2]|0;
  $42 = HEAP32[5498]|0;
  $43 = (($41) - ($42))|0;
  $$sink = $43;
 } else {
  $44 = HEAP32[5452]|0;
  $45 = (+($44|0));
  $46 = +HEAPF32[$5>>2];
  $47 = $45 * $46;
  $48 = $47;
  $49 = (+_round((+$48)));
  $50 = (~~(($49)));
  HEAP32[5497] = $50;
  $51 = HEAP32[$3>>2]|0;
  HEAP32[5498] = $51;
  $52 = HEAP32[$2>>2]|0;
  $53 = HEAP32[5497]|0;
  $54 = (($52) - ($53))|0;
  HEAP32[5499] = $54;
  $$sink = 0;
 }
 HEAP32[5500] = $$sink;
 $55 = HEAP32[5497]|0;
 $56 = (+($55|0));
 $57 = HEAP32[5452]|0;
 $58 = (+($57|0));
 $59 = $56 / $58;
 HEAPF32[$6>>2] = $59;
 $60 = +HEAPF32[$6>>2];
 $61 = +HEAPF32[$6>>2];
 $62 = +HEAPF32[$6>>2];
 _MatrixScale($7,$60,$61,$62);
 dest=21912; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $63 = HEAP32[$2>>2]|0;
 HEAP32[5497] = $63;
 $64 = HEAP32[$3>>2]|0;
 HEAP32[5498] = $64;
 $65 = HEAP32[5497]|0;
 $66 = HEAP32[5498]|0;
 HEAP32[$vararg_buffer6>>2] = $65;
 $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $66;
 _TraceLog(1,9429,$vararg_buffer6);
 STACKTOP = sp;return;
}
function _WindowSizeCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 _rlViewport(0,0,$6,$7);
 _rlMatrixMode(5889);
 _rlLoadIdentity();
 $8 = HEAP32[$4>>2]|0;
 $9 = (+($8|0));
 $10 = HEAP32[$5>>2]|0;
 $11 = (+($10|0));
 _rlOrtho(0.0,$9,$11,0.0,0.0,1.0);
 _rlMatrixMode(5888);
 _rlLoadIdentity();
 _rlClearScreenBuffers();
 $12 = HEAP32[$4>>2]|0;
 HEAP32[5452] = $12;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[5453] = $13;
 $14 = HEAP32[$4>>2]|0;
 HEAP32[5497] = $14;
 $15 = HEAP32[$5>>2]|0;
 HEAP32[5498] = $15;
 STACKTOP = sp;return;
}
function _CursorEnterCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 $$sink = $5 ? 1 : 0;
 HEAP32[5911] = $$sink;
 STACKTOP = sp;return;
}
function _KeyCallback($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $10 = HEAP32[$6>>2]|0;
 $11 = HEAP32[742]|0;
 $12 = ($10|0)==($11|0);
 $13 = HEAP32[$8>>2]|0;
 $14 = ($13|0)==(1);
 $or$cond = $12 & $14;
 if ($or$cond) {
  $15 = HEAP32[$5>>2]|0;
  _glfwSetWindowShouldClose(($15|0),1);
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$8>>2]|0;
 $17 = $16&255;
 $18 = HEAP32[$6>>2]|0;
 $19 = (64755 + ($18)|0);
 HEAP8[$19>>0] = $17;
 $20 = HEAP32[$8>>2]|0;
 $21 = ($20|0)==(1);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = HEAP32[$6>>2]|0;
 HEAP32[741] = $22;
 STACKTOP = sp;return;
}
function _MouseButtonCallback($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 80|0;
 $4 = sp + 76|0;
 $5 = sp + 72|0;
 $6 = sp + 68|0;
 $7 = sp + 64|0;
 $8 = sp + 8|0;
 $9 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $10 = HEAP32[$6>>2]|0;
 $11 = $10&255;
 $12 = HEAP32[$5>>2]|0;
 $13 = (64749 + ($12)|0);
 HEAP8[$13>>0] = $11;
 $14 = (_IsMouseButtonPressed(0)|0);
 $15 = ($14|0)!=(0);
 if ($15) {
  $$sink = 1;
  label = 3;
 } else {
  $16 = (_IsMouseButtonReleased(0)|0);
  $17 = ($16|0)!=(0);
  if ($17) {
   $$sink = 0;
   label = 3;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$8>>2] = $$sink;
 }
 $18 = ((($8)) + 8|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($8)) + 4|0);
 HEAP32[$19>>2] = 1;
 $20 = ((($8)) + 24|0);
 _GetMousePosition($9);
 ;HEAP32[$20>>2]=HEAP32[$9>>2]|0;HEAP32[$20+4>>2]=HEAP32[$9+4>>2]|0;
 $21 = (_GetScreenWidth()|0);
 $22 = (+($21|0));
 $23 = ((($8)) + 24|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $24 / $22;
 HEAPF32[$23>>2] = $25;
 $26 = (_GetScreenHeight()|0);
 $27 = (+($26|0));
 $28 = ((($8)) + 24|0);
 $29 = ((($28)) + 4|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $30 / $27;
 HEAPF32[$29>>2] = $31;
 dest=$$byval_copy; src=$8; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _ProcessGestureEvent($$byval_copy);
 STACKTOP = sp;return;
}
function _MouseCursorPosCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 88|0;
 $3 = sp + 80|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 HEAP32[$3>>2] = $0;
 HEAPF64[$4>>3] = $1;
 HEAPF64[$5>>3] = $2;
 HEAP32[$6>>2] = 2;
 $8 = ((($6)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 4|0);
 HEAP32[$9>>2] = 1;
 $10 = ((($6)) + 24|0);
 $11 = +HEAPF64[$4>>3];
 $12 = $11;
 HEAPF32[$7>>2] = $12;
 $13 = ((($7)) + 4|0);
 $14 = +HEAPF64[$5>>3];
 $15 = $14;
 HEAPF32[$13>>2] = $15;
 ;HEAP32[$10>>2]=HEAP32[$7>>2]|0;HEAP32[$10+4>>2]=HEAP32[$7+4>>2]|0;
 $16 = ((($6)) + 24|0);
 ;HEAP32[21836>>2]=HEAP32[$16>>2]|0;HEAP32[21836+4>>2]=HEAP32[$16+4>>2]|0;
 $17 = (_GetScreenWidth()|0);
 $18 = (+($17|0));
 $19 = ((($6)) + 24|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $20 / $18;
 HEAPF32[$19>>2] = $21;
 $22 = (_GetScreenHeight()|0);
 $23 = (+($22|0));
 $24 = ((($6)) + 24|0);
 $25 = ((($24)) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $26 / $23;
 HEAPF32[$25>>2] = $27;
 dest=$$byval_copy; src=$6; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _ProcessGestureEvent($$byval_copy);
 STACKTOP = sp;return;
}
function _CharCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[741] = $4;
 STACKTOP = sp;return;
}
function _ScrollCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAPF64[$4>>3] = $1;
 HEAPF64[$5>>3] = $2;
 $6 = +HEAPF64[$5>>3];
 $7 = (~~(($6)));
 HEAP32[5910] = $7;
 STACKTOP = sp;return;
}
function _WindowIconifyCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 $$sink = $5 ? 1 : 0;
 HEAP32[5909] = $$sink;
 STACKTOP = sp;return;
}
function _rlglInit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer6 = 0;
 var $vararg_buffer9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2592|0);
 $vararg_buffer43 = sp + 144|0;
 $vararg_buffer41 = sp + 136|0;
 $vararg_buffer38 = sp + 128|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer29 = sp + 96|0;
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer25 = sp + 80|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 2576|0;
 $3 = sp + 2572|0;
 $4 = sp + 2568|0;
 $5 = sp + 2564|0;
 $6 = sp + 2560|0;
 $7 = sp + 2556|0;
 $8 = sp + 2552|0;
 $9 = sp + 504|0;
 $10 = sp + 500|0;
 $11 = sp + 2580|0;
 $12 = sp + 368|0;
 $13 = sp + 364|0;
 $14 = sp + 352|0;
 $15 = sp + 348|0;
 $16 = sp + 344|0;
 $17 = sp + 280|0;
 $18 = sp + 216|0;
 $19 = sp + 152|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $20 = (_glGetString(7936)|0);
 HEAP32[$vararg_buffer>>2] = $20;
 _TraceLog(0,6142,$vararg_buffer);
 $21 = (_glGetString(7937)|0);
 HEAP32[$vararg_buffer3>>2] = $21;
 _TraceLog(0,6160,$vararg_buffer3);
 $22 = (_glGetString(7938)|0);
 HEAP32[$vararg_buffer6>>2] = $22;
 _TraceLog(0,6178,$vararg_buffer6);
 $23 = (_glGetString(35724)|0);
 HEAP32[$vararg_buffer9>>2] = $23;
 _TraceLog(0,6196,$vararg_buffer9);
 HEAP32[$4>>2] = 0;
 $24 = (_glGetString(7939)|0);
 HEAP32[$5>>2] = $24;
 $25 = HEAP32[$5>>2]|0;
 $26 = (_strlen($25)|0);
 $27 = (($26) + 1)|0;
 HEAP32[$7>>2] = $27;
 $28 = HEAP32[$7>>2]|0;
 $29 = (_malloc($28)|0);
 HEAP32[$8>>2] = $29;
 $30 = HEAP32[$8>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  HEAP32[$6>>2] = 0;
 }
 $32 = HEAP32[$8>>2]|0;
 $33 = HEAP32[$5>>2]|0;
 $34 = HEAP32[$7>>2]|0;
 _memcpy(($32|0),($33|0),($34|0))|0;
 HEAP32[$6>>2] = $32;
 $35 = HEAP32[$6>>2]|0;
 $36 = (_strtok($35,6214)|0);
 $37 = HEAP32[$4>>2]|0;
 $$sink = $36;$$sink2 = $37;
 while(1) {
  $38 = (($9) + ($$sink2<<2)|0);
  HEAP32[$38>>2] = $$sink;
  $39 = HEAP32[$4>>2]|0;
  $40 = (($9) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0|0);
  if (!($42)) {
   break;
  }
  $43 = HEAP32[$4>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$4>>2] = $44;
  $45 = (_strtok(0,6214)|0);
  $46 = HEAP32[$4>>2]|0;
  $$sink = $45;$$sink2 = $46;
 }
 $47 = HEAP32[$6>>2]|0;
 _free($47);
 $48 = HEAP32[$4>>2]|0;
 $49 = (($48) - 1)|0;
 HEAP32[$4>>2] = $49;
 $50 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer12>>2] = $50;
 _TraceLog(0,6216,$vararg_buffer12);
 HEAP32[$10>>2] = 0;
 while(1) {
  $51 = HEAP32[$10>>2]|0;
  $52 = HEAP32[$4>>2]|0;
  $53 = ($51|0)<($52|0);
  if (!($53)) {
   break;
  }
  $54 = HEAP32[$10>>2]|0;
  $55 = (($9) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (_strcmp($56,6251)|0);
  $58 = ($57|0)==(0);
  if ($58) {
   HEAP32[5535] = 1;
   $59 = (_eglGetProcAddress((6278|0))|0);
   HEAP32[5536] = $59;
   $60 = (_eglGetProcAddress((6299|0))|0);
   HEAP32[5537] = $60;
   $61 = (_eglGetProcAddress((6320|0))|0);
   HEAP32[5538] = $61;
  }
  $62 = HEAP32[$10>>2]|0;
  $63 = (($9) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (_strcmp($64,6344)|0);
  $66 = ($65|0)==(0);
  if ($66) {
   HEAP32[5477] = 1;
  }
  $67 = HEAP32[$10>>2]|0;
  $68 = (($9) + ($67<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (_strcmp($69,6364)|0);
  $71 = ($70|0)==(0);
  if ($71) {
   HEAP32[5476] = 1;
  }
  $72 = HEAP32[$10>>2]|0;
  $73 = (($9) + ($72<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (_strcmp($74,6382)|0);
  $76 = ($75|0)==(0);
  if ($76) {
   label = 17;
  } else {
   $77 = HEAP32[$10>>2]|0;
   $78 = (($9) + ($77<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (_strcmp($79,6414)|0);
   $81 = ($80|0)==(0);
   if ($81) {
    label = 17;
   } else {
    $82 = HEAP32[$10>>2]|0;
    $83 = (($9) + ($82<<2)|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (_strcmp($84,6447)|0);
    $86 = ($85|0)==(0);
    if ($86) {
     label = 17;
    }
   }
  }
  if ((label|0) == 17) {
   label = 0;
   HEAP32[5471] = 1;
  }
  $87 = HEAP32[$10>>2]|0;
  $88 = (($9) + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (_strcmp($89,6487)|0);
  $91 = ($90|0)==(0);
  if ($91) {
   label = 20;
  } else {
   $92 = HEAP32[$10>>2]|0;
   $93 = (($9) + ($92<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (_strcmp($94,6523)|0);
   $96 = ($95|0)==(0);
   if ($96) {
    label = 20;
   }
  }
  if ((label|0) == 20) {
   label = 0;
   HEAP32[5472] = 1;
  }
  $97 = HEAP32[$10>>2]|0;
  $98 = (($9) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (_strcmp($99,6556)|0);
  $101 = ($100|0)==(0);
  if ($101) {
   HEAP32[5473] = 1;
  }
  $102 = HEAP32[$10>>2]|0;
  $103 = (($9) + ($102<<2)|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (_strcmp($104,6581)|0);
  $106 = ($105|0)==(0);
  if ($106) {
   HEAP32[5474] = 1;
  }
  $107 = HEAP32[$10>>2]|0;
  $108 = (($9) + ($107<<2)|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (_strcmp($109,6614)|0);
  $111 = ($110|0)==(0);
  if ($111) {
   HEAP32[5475] = 1;
  }
  $112 = HEAP32[$10>>2]|0;
  $113 = (($9) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (_strcmp($114,6650)|0);
  $116 = ($115|0)==(0);
  if ($116) {
   HEAP32[5539] = 1;
   _glGetFloatv(34047,(22160|0));
  }
  $117 = HEAP32[$10>>2]|0;
  $118 = (($9) + ($117<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (_strcmp($119,6684)|0);
  $121 = ($120|0)==(0);
  if ($121) {
   HEAP32[5541] = 1;
  }
  $122 = HEAP32[$10>>2]|0;
  $123 = (($122) + 1)|0;
  HEAP32[$10>>2] = $123;
 }
 $124 = HEAP32[5535]|0;
 $125 = ($124|0)!=(0);
 if ($125) {
  _TraceLog(0,6712,$vararg_buffer15);
 } else {
  _TraceLog(1,6787,$vararg_buffer17);
 }
 $126 = HEAP32[5477]|0;
 $127 = ($126|0)!=(0);
 if ($127) {
  _TraceLog(0,6848,$vararg_buffer19);
 } else {
  _TraceLog(1,6923,$vararg_buffer21);
 }
 $128 = HEAP32[5471]|0;
 $129 = ($128|0)!=(0);
 if ($129) {
  _TraceLog(0,7015,$vararg_buffer23);
 }
 $130 = HEAP32[5472]|0;
 $131 = ($130|0)!=(0);
 if ($131) {
  _TraceLog(0,7061,$vararg_buffer25);
 }
 $132 = HEAP32[5473]|0;
 $133 = ($132|0)!=(0);
 if ($133) {
  _TraceLog(0,7108,$vararg_buffer27);
 }
 $134 = HEAP32[5474]|0;
 $135 = ($134|0)!=(0);
 if ($135) {
  _TraceLog(0,7159,$vararg_buffer29);
 }
 $136 = HEAP32[5475]|0;
 $137 = ($136|0)!=(0);
 if ($137) {
  _TraceLog(0,7206,$vararg_buffer31);
 }
 $138 = HEAP32[5539]|0;
 $139 = ($138|0)!=(0);
 if ($139) {
  $140 = +HEAPF32[5540];
  $141 = $140;
  HEAPF64[$vararg_buffer33>>3] = $141;
  _TraceLog(0,7253,$vararg_buffer33);
 }
 $142 = HEAP32[5541]|0;
 $143 = ($142|0)!=(0);
 if ($143) {
  _TraceLog(0,7319,$vararg_buffer36);
 }
 ;HEAP8[$11>>0]=HEAP8[7372>>0]|0;HEAP8[$11+1>>0]=HEAP8[7372+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[7372+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[7372+3>>0]|0;
 $144 = (_rlLoadTexture($11,1,1,7,1)|0);
 HEAP32[5542] = $144;
 $145 = HEAP32[5542]|0;
 $146 = ($145|0)!=(0);
 if ($146) {
  $147 = HEAP32[5542]|0;
  HEAP32[$vararg_buffer38>>2] = $147;
  _TraceLog(0,7376,$vararg_buffer38);
 } else {
  _TraceLog(1,7427,$vararg_buffer41);
 }
 _LoadShaderDefault($12);
 _memcpy((22172|0),($12|0),132)|0;
 _memcpy((22304|0),(22172|0),132)|0;
 _LoadBuffersDefault();
 $148 = (_malloc(49152)|0);
 HEAP32[5609] = $148;
 HEAP32[$13>>2] = 0;
 while(1) {
  $149 = HEAP32[$13>>2]|0;
  $150 = ($149|0)<(4096);
  if (!($150)) {
   break;
  }
  $151 = HEAP32[5609]|0;
  $152 = HEAP32[$13>>2]|0;
  $153 = (($151) + (($152*12)|0)|0);
  _Vector3Zero($14);
  ;HEAP32[$153>>2]=HEAP32[$14>>2]|0;HEAP32[$153+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$153+8>>2]=HEAP32[$14+8>>2]|0;
  $154 = HEAP32[$13>>2]|0;
  $155 = (($154) + 1)|0;
  HEAP32[$13>>2] = $155;
 }
 $156 = (_malloc(36864)|0);
 HEAP32[5610] = $156;
 HEAP32[$15>>2] = 0;
 while(1) {
  $157 = HEAP32[$15>>2]|0;
  $158 = ($157|0)<(256);
  if (!($158)) {
   break;
  }
  $159 = HEAP32[5610]|0;
  $160 = HEAP32[$15>>2]|0;
  $161 = (($159) + (($160*144)|0)|0);
  $162 = ((($161)) + 8|0);
  HEAP32[$162>>2] = 0;
  $163 = HEAP32[5610]|0;
  $164 = HEAP32[$15>>2]|0;
  $165 = (($163) + (($164*144)|0)|0);
  HEAP32[$165>>2] = 0;
  $166 = HEAP32[$15>>2]|0;
  $167 = (($166) + 1)|0;
  HEAP32[$15>>2] = $167;
 }
 HEAP32[5611] = 1;
 $168 = HEAP32[5542]|0;
 $169 = HEAP32[5610]|0;
 $170 = HEAP32[5611]|0;
 $171 = (($170) - 1)|0;
 $172 = (($169) + (($171*144)|0)|0);
 $173 = ((($172)) + 8|0);
 HEAP32[$173>>2] = $168;
 HEAP32[5612] = 4;
 HEAP32[$16>>2] = 0;
 while(1) {
  $174 = HEAP32[$16>>2]|0;
  $175 = ($174|0)<(16);
  if (!($175)) {
   break;
  }
  $176 = HEAP32[$16>>2]|0;
  $177 = (22452 + ($176<<6)|0);
  _MatrixIdentity($17);
  dest=$177; src=$17; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $178 = HEAP32[$16>>2]|0;
  $179 = (($178) + 1)|0;
  HEAP32[$16>>2] = $179;
 }
 _MatrixIdentity($18);
 dest=22008; src=$18; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($19);
 dest=22072; src=$19; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[5501] = 22072;
 _glDepthFunc(515);
 _glDisable(2929);
 _glBlendFunc(770,771);
 _glEnable(3042);
 _glCullFace(1029);
 _glFrontFace(2305);
 _glEnable(2884);
 _glClearColor(0.0,0.0,0.0,1.0);
 _glClearDepthf(1.0);
 _glClear(16640);
 $180 = HEAP32[$2>>2]|0;
 HEAP32[5869] = $180;
 $181 = HEAP32[$3>>2]|0;
 HEAP32[5870] = $181;
 _TraceLog(0,7466,$vararg_buffer43);
 STACKTOP = sp;return;
}
function _SetupViewport() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5499]|0;
 $1 = (($0|0) / 2)&-1;
 $2 = HEAP32[5500]|0;
 $3 = (($2|0) / 2)&-1;
 $4 = HEAP32[5497]|0;
 $5 = HEAP32[5499]|0;
 $6 = (($4) - ($5))|0;
 $7 = HEAP32[5498]|0;
 $8 = HEAP32[5500]|0;
 $9 = (($7) - ($8))|0;
 _rlViewport($1,$3,$6,$9);
 return;
}
function _rlMatrixMode($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $modelview$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(5889);
 if ($3) {
  $modelview$sink = 22008;
  label = 3;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = ($4|0)==(5888);
  if ($5) {
   $modelview$sink = 22072;
   label = 3;
  }
 }
 if ((label|0) == 3) {
  HEAP32[5501] = $modelview$sink;
 }
 $6 = HEAP32[$1>>2]|0;
 HEAP32[5534] = $6;
 STACKTOP = sp;return;
}
function _rlLoadIdentity() {
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $0 = sp;
 $1 = HEAP32[5501]|0;
 _MatrixIdentity($0);
 dest=$1; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlOrtho($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $$byval_copy1 = sp + 240|0;
 $$byval_copy = sp + 176|0;
 $6 = sp + 40|0;
 $7 = sp + 32|0;
 $8 = sp + 24|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $12 = sp + 112|0;
 $13 = sp + 48|0;
 HEAPF64[$6>>3] = $0;
 HEAPF64[$7>>3] = $1;
 HEAPF64[$8>>3] = $2;
 HEAPF64[$9>>3] = $3;
 HEAPF64[$10>>3] = $4;
 HEAPF64[$11>>3] = $5;
 $14 = +HEAPF64[$6>>3];
 $15 = +HEAPF64[$7>>3];
 $16 = +HEAPF64[$8>>3];
 $17 = +HEAPF64[$9>>3];
 $18 = +HEAPF64[$10>>3];
 $19 = +HEAPF64[$11>>3];
 _MatrixOrtho($12,$14,$15,$16,$17,$18,$19);
 $20 = HEAP32[5501]|0;
 $21 = HEAP32[5501]|0;
 dest=$$byval_copy; src=$21; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy1; src=$12; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($13,$$byval_copy,$$byval_copy1);
 dest=$20; src=$13; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _ClearBackground($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ((($0)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($0)) + 2|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ((($0)) + 3|0);
 $7 = HEAP8[$6>>0]|0;
 _rlClearColor($1,$3,$5,$7);
 return;
}
function _rlClearColor($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 19|0;
 $5 = sp + 18|0;
 $6 = sp + 17|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP8[$4>>0] = $0;
 HEAP8[$5>>0] = $1;
 HEAP8[$6>>0] = $2;
 HEAP8[$7>>0] = $3;
 $12 = HEAP8[$4>>0]|0;
 $13 = (+($12&255));
 $14 = $13 / 255.0;
 HEAPF32[$8>>2] = $14;
 $15 = HEAP8[$5>>0]|0;
 $16 = (+($15&255));
 $17 = $16 / 255.0;
 HEAPF32[$9>>2] = $17;
 $18 = HEAP8[$6>>0]|0;
 $19 = (+($18&255));
 $20 = $19 / 255.0;
 HEAPF32[$10>>2] = $20;
 $21 = HEAP8[$7>>0]|0;
 $22 = (+($21&255));
 $23 = $22 / 255.0;
 HEAPF32[$11>>2] = $23;
 $24 = +HEAPF32[$8>>2];
 $25 = +HEAPF32[$9>>2];
 $26 = +HEAPF32[$10>>2];
 $27 = +HEAPF32[$11>>2];
 _glClearColor((+$24),(+$25),(+$26),(+$27));
 STACKTOP = sp;return;
}
function _rlViewport($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $8 = HEAP32[$4>>2]|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = HEAP32[$6>>2]|0;
 $11 = HEAP32[$7>>2]|0;
 _glViewport(($8|0),($9|0),($10|0),($11|0));
 STACKTOP = sp;return;
}
function _LoadShaderDefault($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1072|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 589|0;
 $4 = sp + 148|0;
 _memset(($1|0),0,132)|0;
 HEAP32[$2>>2] = 0;
 while(1) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ($5|0)<(32);
  if (!($6)) {
   break;
  }
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$2>>2]|0;
  $9 = (($7) + ($8<<2)|0);
  HEAP32[$9>>2] = -1;
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$2>>2] = $11;
 }
 _memcpy(($3|0),(8042|0),483)|0;
 _memcpy(($4|0),(8525|0),441)|0;
 $12 = (_CompileShader($3,35633)|0);
 HEAP32[5907] = $12;
 $13 = (_CompileShader($4,35632)|0);
 HEAP32[5908] = $13;
 $14 = HEAP32[5907]|0;
 $15 = HEAP32[5908]|0;
 $16 = (_LoadShaderProgram($14,$15)|0);
 HEAP32[$1>>2] = $16;
 $17 = HEAP32[$1>>2]|0;
 $18 = ($17>>>0)>(0);
 $19 = HEAP32[$1>>2]|0;
 if ($18) {
  HEAP32[$vararg_buffer>>2] = $19;
  _TraceLog(0,8966,$vararg_buffer);
  $20 = HEAP32[$1>>2]|0;
  $21 = (_glGetAttribLocation(($20|0),(9014|0))|0);
  $22 = ((($1)) + 4|0);
  HEAP32[$22>>2] = $21;
  $23 = HEAP32[$1>>2]|0;
  $24 = (_glGetAttribLocation(($23|0),(9029|0))|0);
  $25 = ((($1)) + 4|0);
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = $24;
  $27 = HEAP32[$1>>2]|0;
  $28 = (_glGetAttribLocation(($27|0),(9044|0))|0);
  $29 = ((($1)) + 4|0);
  $30 = ((($29)) + 20|0);
  HEAP32[$30>>2] = $28;
  $31 = HEAP32[$1>>2]|0;
  $32 = (_glGetUniformLocation(($31|0),(9056|0))|0);
  $33 = ((($1)) + 4|0);
  $34 = ((($33)) + 24|0);
  HEAP32[$34>>2] = $32;
  $35 = HEAP32[$1>>2]|0;
  $36 = (_glGetUniformLocation(($35|0),(9060|0))|0);
  $37 = ((($1)) + 4|0);
  $38 = ((($37)) + 44|0);
  HEAP32[$38>>2] = $36;
  $39 = HEAP32[$1>>2]|0;
  $40 = (_glGetUniformLocation(($39|0),(9071|0))|0);
  $41 = ((($1)) + 4|0);
  $42 = ((($41)) + 56|0);
  HEAP32[$42>>2] = $40;
  _memcpy(($0|0),($1|0),132)|0;
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer1>>2] = $19;
  _TraceLog(1,9080,$vararg_buffer1);
  _memcpy(($0|0),($1|0),132)|0;
  STACKTOP = sp;return;
 }
}
function _LoadBuffersDefault() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 96|0;
 $1 = sp + 92|0;
 $2 = sp + 88|0;
 $3 = sp + 84|0;
 $4 = sp + 80|0;
 $5 = sp + 76|0;
 $6 = sp + 72|0;
 $7 = sp + 68|0;
 $8 = sp + 64|0;
 $9 = (_malloc(24576)|0);
 HEAP32[(23496)>>2] = $9;
 $10 = (_malloc(8192)|0);
 HEAP32[(23504)>>2] = $10;
 HEAP32[(23500)>>2] = 0;
 HEAP32[(23508)>>2] = 0;
 HEAP32[$0>>2] = 0;
 while(1) {
  $11 = HEAP32[$0>>2]|0;
  $12 = ($11|0)<(6144);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[(23496)>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) + ($14<<2)|0);
  HEAPF32[$15>>2] = 0.0;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$0>>2] = $17;
 }
 HEAP32[$1>>2] = 0;
 while(1) {
  $18 = HEAP32[$1>>2]|0;
  $19 = ($18|0)<(8192);
  if (!($19)) {
   break;
  }
  $20 = HEAP32[(23504)>>2]|0;
  $21 = HEAP32[$1>>2]|0;
  $22 = (($20) + ($21)|0);
  HEAP8[$22>>0] = 0;
  $23 = HEAP32[$1>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$1>>2] = $24;
 }
 HEAP32[5871] = 0;
 HEAP32[(23492)>>2] = 0;
 HEAP32[(23488)>>2] = 0;
 $25 = (_malloc(73728)|0);
 HEAP32[(23544)>>2] = $25;
 $26 = (_malloc(24576)|0);
 HEAP32[(23552)>>2] = $26;
 HEAP32[(23548)>>2] = 0;
 HEAP32[(23556)>>2] = 0;
 HEAP32[$2>>2] = 0;
 while(1) {
  $27 = HEAP32[$2>>2]|0;
  $28 = ($27|0)<(18432);
  if (!($28)) {
   break;
  }
  $29 = HEAP32[(23544)>>2]|0;
  $30 = HEAP32[$2>>2]|0;
  $31 = (($29) + ($30<<2)|0);
  HEAPF32[$31>>2] = 0.0;
  $32 = HEAP32[$2>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$2>>2] = $33;
 }
 HEAP32[$3>>2] = 0;
 while(1) {
  $34 = HEAP32[$3>>2]|0;
  $35 = ($34|0)<(24576);
  if (!($35)) {
   break;
  }
  $36 = HEAP32[(23552)>>2]|0;
  $37 = HEAP32[$3>>2]|0;
  $38 = (($36) + ($37)|0);
  HEAP8[$38>>0] = 0;
  $39 = HEAP32[$3>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$3>>2] = $40;
 }
 HEAP32[5883] = 0;
 HEAP32[(23540)>>2] = 0;
 HEAP32[(23536)>>2] = 0;
 $41 = (_malloc(49152)|0);
 HEAP32[(23592)>>2] = $41;
 $42 = (_malloc(32768)|0);
 HEAP32[(23596)>>2] = $42;
 $43 = (_malloc(16384)|0);
 HEAP32[(23600)>>2] = $43;
 $44 = (_malloc(12288)|0);
 HEAP32[(23604)>>2] = $44;
 HEAP32[$4>>2] = 0;
 while(1) {
  $45 = HEAP32[$4>>2]|0;
  $46 = ($45|0)<(12288);
  if (!($46)) {
   break;
  }
  $47 = HEAP32[(23592)>>2]|0;
  $48 = HEAP32[$4>>2]|0;
  $49 = (($47) + ($48<<2)|0);
  HEAPF32[$49>>2] = 0.0;
  $50 = HEAP32[$4>>2]|0;
  $51 = (($50) + 1)|0;
  HEAP32[$4>>2] = $51;
 }
 HEAP32[$5>>2] = 0;
 while(1) {
  $52 = HEAP32[$5>>2]|0;
  $53 = ($52|0)<(8192);
  if (!($53)) {
   break;
  }
  $54 = HEAP32[(23596)>>2]|0;
  $55 = HEAP32[$5>>2]|0;
  $56 = (($54) + ($55<<2)|0);
  HEAPF32[$56>>2] = 0.0;
  $57 = HEAP32[$5>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$5>>2] = $58;
 }
 HEAP32[$6>>2] = 0;
 while(1) {
  $59 = HEAP32[$6>>2]|0;
  $60 = ($59|0)<(16384);
  if (!($60)) {
   break;
  }
  $61 = HEAP32[(23600)>>2]|0;
  $62 = HEAP32[$6>>2]|0;
  $63 = (($61) + ($62)|0);
  HEAP8[$63>>0] = 0;
  $64 = HEAP32[$6>>2]|0;
  $65 = (($64) + 1)|0;
  HEAP32[$6>>2] = $65;
 }
 HEAP32[$7>>2] = 0;
 HEAP32[$8>>2] = 0;
 while(1) {
  $66 = HEAP32[$8>>2]|0;
  $67 = ($66|0)<(6144);
  if (!($67)) {
   break;
  }
  $68 = HEAP32[$7>>2]|0;
  $69 = $68<<2;
  $70 = $69&65535;
  $71 = HEAP32[(23604)>>2]|0;
  $72 = HEAP32[$8>>2]|0;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = $70;
  $74 = HEAP32[$7>>2]|0;
  $75 = $74<<2;
  $76 = (($75) + 1)|0;
  $77 = $76&65535;
  $78 = HEAP32[(23604)>>2]|0;
  $79 = HEAP32[$8>>2]|0;
  $80 = (($79) + 1)|0;
  $81 = (($78) + ($80<<1)|0);
  HEAP16[$81>>1] = $77;
  $82 = HEAP32[$7>>2]|0;
  $83 = $82<<2;
  $84 = (($83) + 2)|0;
  $85 = $84&65535;
  $86 = HEAP32[(23604)>>2]|0;
  $87 = HEAP32[$8>>2]|0;
  $88 = (($87) + 2)|0;
  $89 = (($86) + ($88<<1)|0);
  HEAP16[$89>>1] = $85;
  $90 = HEAP32[$7>>2]|0;
  $91 = $90<<2;
  $92 = $91&65535;
  $93 = HEAP32[(23604)>>2]|0;
  $94 = HEAP32[$8>>2]|0;
  $95 = (($94) + 3)|0;
  $96 = (($93) + ($95<<1)|0);
  HEAP16[$96>>1] = $92;
  $97 = HEAP32[$7>>2]|0;
  $98 = $97<<2;
  $99 = (($98) + 2)|0;
  $100 = $99&65535;
  $101 = HEAP32[(23604)>>2]|0;
  $102 = HEAP32[$8>>2]|0;
  $103 = (($102) + 4)|0;
  $104 = (($101) + ($103<<1)|0);
  HEAP16[$104>>1] = $100;
  $105 = HEAP32[$7>>2]|0;
  $106 = $105<<2;
  $107 = (($106) + 3)|0;
  $108 = $107&65535;
  $109 = HEAP32[(23604)>>2]|0;
  $110 = HEAP32[$8>>2]|0;
  $111 = (($110) + 5)|0;
  $112 = (($109) + ($111<<1)|0);
  HEAP16[$112>>1] = $108;
  $113 = HEAP32[$7>>2]|0;
  $114 = (($113) + 1)|0;
  HEAP32[$7>>2] = $114;
  $115 = HEAP32[$8>>2]|0;
  $116 = (($115) + 6)|0;
  HEAP32[$8>>2] = $116;
 }
 HEAP32[5895] = 0;
 HEAP32[(23584)>>2] = 0;
 HEAP32[(23588)>>2] = 0;
 _TraceLog(0,7513,$vararg_buffer);
 $117 = HEAP32[5535]|0;
 $118 = ($117|0)!=(0);
 if ($118) {
  $119 = HEAP32[5536]|0;
  FUNCTION_TABLE_vii[$119 & 63](1,(23512));
  $120 = HEAP32[5537]|0;
  $121 = HEAP32[(23512)>>2]|0;
  FUNCTION_TABLE_vi[$120 & 31]($121);
 }
 _glGenBuffers(2,((23516)|0));
 $122 = HEAP32[(23516)>>2]|0;
 _glBindBuffer(34962,($122|0));
 $123 = HEAP32[(23496)>>2]|0;
 _glBufferData(34962,24576,($123|0),35048);
 $124 = HEAP32[(22308)>>2]|0;
 _glEnableVertexAttribArray(($124|0));
 $125 = HEAP32[(22308)>>2]|0;
 _glVertexAttribPointer(($125|0),3,5126,0,0,(0|0));
 _glGenBuffers(2,((23520)|0));
 $126 = HEAP32[(23520)>>2]|0;
 _glBindBuffer(34962,($126|0));
 $127 = HEAP32[(23504)>>2]|0;
 _glBufferData(34962,8192,($127|0),35048);
 $128 = HEAP32[(22328)>>2]|0;
 _glEnableVertexAttribArray(($128|0));
 $129 = HEAP32[(22328)>>2]|0;
 _glVertexAttribPointer(($129|0),4,5121,1,0,(0|0));
 $130 = HEAP32[5535]|0;
 $131 = ($130|0)!=(0);
 if ($131) {
  $132 = HEAP32[(23512)>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $132;
  _TraceLog(0,7586,$vararg_buffer1);
 } else {
  $133 = HEAP32[(23516)>>2]|0;
  $134 = HEAP32[(23520)>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $133;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $134;
  _TraceLog(0,7651,$vararg_buffer3);
 }
 $135 = HEAP32[5535]|0;
 $136 = ($135|0)!=(0);
 if ($136) {
  $137 = HEAP32[5536]|0;
  FUNCTION_TABLE_vii[$137 & 63](1,(23560));
  $138 = HEAP32[5537]|0;
  $139 = HEAP32[(23560)>>2]|0;
  FUNCTION_TABLE_vi[$138 & 31]($139);
 }
 _glGenBuffers(1,((23564)|0));
 $140 = HEAP32[(23564)>>2]|0;
 _glBindBuffer(34962,($140|0));
 $141 = HEAP32[(23544)>>2]|0;
 _glBufferData(34962,73728,($141|0),35048);
 $142 = HEAP32[(22308)>>2]|0;
 _glEnableVertexAttribArray(($142|0));
 $143 = HEAP32[(22308)>>2]|0;
 _glVertexAttribPointer(($143|0),3,5126,0,0,(0|0));
 _glGenBuffers(1,((23568)|0));
 $144 = HEAP32[(23568)>>2]|0;
 _glBindBuffer(34962,($144|0));
 $145 = HEAP32[(23552)>>2]|0;
 _glBufferData(34962,24576,($145|0),35048);
 $146 = HEAP32[(22328)>>2]|0;
 _glEnableVertexAttribArray(($146|0));
 $147 = HEAP32[(22328)>>2]|0;
 _glVertexAttribPointer(($147|0),4,5121,1,0,(0|0));
 $148 = HEAP32[5535]|0;
 $149 = ($148|0)!=(0);
 if ($149) {
  $150 = HEAP32[(23560)>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $150;
  _TraceLog(0,7728,$vararg_buffer7);
 } else {
  $151 = HEAP32[(23564)>>2]|0;
  $152 = HEAP32[(23568)>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $151;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $152;
  _TraceLog(0,7797,$vararg_buffer10);
 }
 $153 = HEAP32[5535]|0;
 $154 = ($153|0)!=(0);
 if ($154) {
  $155 = HEAP32[5536]|0;
  FUNCTION_TABLE_vii[$155 & 63](1,(23608));
  $156 = HEAP32[5537]|0;
  $157 = HEAP32[(23608)>>2]|0;
  FUNCTION_TABLE_vi[$156 & 31]($157);
 }
 _glGenBuffers(1,((23612)|0));
 $158 = HEAP32[(23612)>>2]|0;
 _glBindBuffer(34962,($158|0));
 $159 = HEAP32[(23592)>>2]|0;
 _glBufferData(34962,49152,($159|0),35048);
 $160 = HEAP32[(22308)>>2]|0;
 _glEnableVertexAttribArray(($160|0));
 $161 = HEAP32[(22308)>>2]|0;
 _glVertexAttribPointer(($161|0),3,5126,0,0,(0|0));
 _glGenBuffers(1,((23616)|0));
 $162 = HEAP32[(23616)>>2]|0;
 _glBindBuffer(34962,($162|0));
 $163 = HEAP32[(23596)>>2]|0;
 _glBufferData(34962,32768,($163|0),35048);
 $164 = HEAP32[(22312)>>2]|0;
 _glEnableVertexAttribArray(($164|0));
 $165 = HEAP32[(22312)>>2]|0;
 _glVertexAttribPointer(($165|0),2,5126,0,0,(0|0));
 _glGenBuffers(1,((23620)|0));
 $166 = HEAP32[(23620)>>2]|0;
 _glBindBuffer(34962,($166|0));
 $167 = HEAP32[(23600)>>2]|0;
 _glBufferData(34962,16384,($167|0),35048);
 $168 = HEAP32[(22328)>>2]|0;
 _glEnableVertexAttribArray(($168|0));
 $169 = HEAP32[(22328)>>2]|0;
 _glVertexAttribPointer(($169|0),4,5121,1,0,(0|0));
 _glGenBuffers(1,((23624)|0));
 $170 = HEAP32[(23624)>>2]|0;
 _glBindBuffer(34963,($170|0));
 $171 = HEAP32[(23604)>>2]|0;
 _glBufferData(34963,12288,($171|0),35044);
 $172 = HEAP32[5535]|0;
 $173 = ($172|0)!=(0);
 if ($173) {
  $174 = HEAP32[(23608)>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $174;
  _TraceLog(0,7878,$vararg_buffer14);
 } else {
  $175 = HEAP32[(23612)>>2]|0;
  $176 = HEAP32[(23616)>>2]|0;
  $177 = HEAP32[(23620)>>2]|0;
  $178 = HEAP32[(23624)>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $175;
  $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
  HEAP32[$vararg_ptr20>>2] = $176;
  $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
  HEAP32[$vararg_ptr21>>2] = $177;
  $vararg_ptr22 = ((($vararg_buffer17)) + 12|0);
  HEAP32[$vararg_ptr22>>2] = $178;
  _TraceLog(0,7943,$vararg_buffer17);
 }
 $179 = HEAP32[5535]|0;
 $180 = ($179|0)!=(0);
 if (!($180)) {
  STACKTOP = sp;return;
 }
 $181 = HEAP32[5537]|0;
 FUNCTION_TABLE_vi[$181 & 31](0);
 STACKTOP = sp;return;
}
function _CompileShader($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 44|0;
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 24|0;
 $8 = sp + 20|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $9 = HEAP32[$3>>2]|0;
 $10 = (_glCreateShader(($9|0))|0);
 HEAP32[$4>>2] = $10;
 $11 = HEAP32[$4>>2]|0;
 _glShaderSource(($11|0),1,($2|0),(0|0));
 HEAP32[$5>>2] = 0;
 $12 = HEAP32[$4>>2]|0;
 _glCompileShader(($12|0));
 $13 = HEAP32[$4>>2]|0;
 _glGetShaderiv(($13|0),35713,($5|0));
 $14 = HEAP32[$5>>2]|0;
 $15 = ($14|0)!=(1);
 $16 = HEAP32[$4>>2]|0;
 if ($15) {
  HEAP32[$vararg_buffer>>2] = $16;
  _TraceLog(1,9268,$vararg_buffer);
  HEAP32[$6>>2] = 0;
  $17 = HEAP32[$4>>2]|0;
  _glGetShaderiv(($17|0),35716,($6|0));
  $18 = HEAP32[$6>>2]|0;
  $19 = (_llvm_stacksave()|0);
  HEAP32[$8>>2] = $19;
  $$alloca_mul = $18;
  $20 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
  $21 = HEAP32[$4>>2]|0;
  $22 = HEAP32[$6>>2]|0;
  _glGetShaderInfoLog(($21|0),($22|0),($7|0),($20|0));
  HEAP32[$vararg_buffer1>>2] = $20;
  _TraceLog(0,9217,$vararg_buffer1);
  $23 = HEAP32[$8>>2]|0;
  _llvm_stackrestore(($23|0));
  $24 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($24|0);
 } else {
  HEAP32[$vararg_buffer4>>2] = $16;
  _TraceLog(0,9309,$vararg_buffer4);
  $24 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _LoadShaderProgram($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 44|0;
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 24|0;
 $8 = sp + 20|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 HEAP32[$4>>2] = 0;
 HEAP32[$5>>2] = 0;
 $9 = (_glCreateProgram()|0);
 HEAP32[$4>>2] = $9;
 $10 = HEAP32[$4>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 _glAttachShader(($10|0),($11|0));
 $12 = HEAP32[$4>>2]|0;
 $13 = HEAP32[$3>>2]|0;
 _glAttachShader(($12|0),($13|0));
 $14 = HEAP32[$4>>2]|0;
 _glBindAttribLocation(($14|0),0,(9014|0));
 $15 = HEAP32[$4>>2]|0;
 _glBindAttribLocation(($15|0),1,(9029|0));
 $16 = HEAP32[$4>>2]|0;
 _glBindAttribLocation(($16|0),2,(9128|0));
 $17 = HEAP32[$4>>2]|0;
 _glBindAttribLocation(($17|0),3,(9044|0));
 $18 = HEAP32[$4>>2]|0;
 _glBindAttribLocation(($18|0),4,(9141|0));
 $19 = HEAP32[$4>>2]|0;
 _glBindAttribLocation(($19|0),5,(9155|0));
 $20 = HEAP32[$4>>2]|0;
 _glLinkProgram(($20|0));
 $21 = HEAP32[$4>>2]|0;
 _glGetProgramiv(($21|0),35714,($5|0));
 $22 = HEAP32[$5>>2]|0;
 $23 = ($22|0)==(0);
 $24 = HEAP32[$4>>2]|0;
 if ($23) {
  HEAP32[$vararg_buffer>>2] = $24;
  _TraceLog(1,9171,$vararg_buffer);
  HEAP32[$6>>2] = 0;
  $25 = HEAP32[$4>>2]|0;
  _glGetProgramiv(($25|0),35716,($6|0));
  $26 = HEAP32[$6>>2]|0;
  $27 = (_llvm_stacksave()|0);
  HEAP32[$8>>2] = $27;
  $$alloca_mul = $26;
  $28 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
  $29 = HEAP32[$4>>2]|0;
  $30 = HEAP32[$6>>2]|0;
  _glGetProgramInfoLog(($29|0),($30|0),($7|0),($28|0));
  HEAP32[$vararg_buffer1>>2] = $28;
  _TraceLog(0,9217,$vararg_buffer1);
  $31 = HEAP32[$4>>2]|0;
  _glDeleteProgram(($31|0));
  HEAP32[$4>>2] = 0;
  $32 = HEAP32[$8>>2]|0;
  _llvm_stackrestore(($32|0));
  $33 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($33|0);
 } else {
  HEAP32[$vararg_buffer4>>2] = $24;
  _TraceLog(0,9220,$vararg_buffer4);
  $33 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _IsMouseButtonPressed($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (64749 + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = HEAP32[$1>>2]|0;
 $8 = (64752 + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($6|0)!=($10|0);
 if ($11) {
  $12 = HEAP32[$1>>2]|0;
  $13 = (64749 + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)==(1);
  if ($16) {
   HEAP32[$2>>2] = 1;
  }
 }
 $17 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _IsMouseButtonReleased($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (64749 + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = HEAP32[$1>>2]|0;
 $8 = (64752 + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($6|0)!=($10|0);
 if ($11) {
  $12 = HEAP32[$1>>2]|0;
  $13 = (64749 + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)==(0);
  if ($16) {
   HEAP32[$2>>2] = 1;
  }
 }
 $17 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _rlClearScreenBuffers() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _glClear(16640);
 return;
}
function _CloseWindow() {
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[5912]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  (_GifEnd()|0);
  HEAP32[5912] = 0;
 }
 _UnloadDefaultFont();
 _rlglClose();
 $2 = HEAP32[5446]|0;
 _glfwDestroyWindow(($2|0));
 _glfwTerminate();
 _TraceLog(0,9633,$vararg_buffer);
 STACKTOP = sp;return;
}
function _UnloadDefaultFont() {
 var $$byval_copy = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 ;HEAP32[$$byval_copy>>2]=HEAP32[21852>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[21852+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[21852+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[21852+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[21852+16>>2]|0;
 _UnloadTexture($$byval_copy);
 $0 = HEAP32[(21880)>>2]|0;
 _free($0);
 STACKTOP = sp;return;
}
function _rlglClose() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _UnloadShaderDefault();
 _UnloadBuffersDefault();
 _glDeleteTextures(1,(22168|0));
 $0 = HEAP32[5542]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 _TraceLog(0,9660,$vararg_buffer);
 $1 = HEAP32[5610]|0;
 _free($1);
 STACKTOP = sp;return;
}
function _UnloadShaderDefault() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _glUseProgram(0);
 $0 = HEAP32[5543]|0;
 $1 = HEAP32[5907]|0;
 _glDetachShader(($0|0),($1|0));
 $2 = HEAP32[5543]|0;
 $3 = HEAP32[5908]|0;
 _glDetachShader(($2|0),($3|0));
 $4 = HEAP32[5907]|0;
 _glDeleteShader(($4|0));
 $5 = HEAP32[5908]|0;
 _glDeleteShader(($5|0));
 $6 = HEAP32[5543]|0;
 _glDeleteProgram(($6|0));
 return;
}
function _UnloadBuffersDefault() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5535]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[5537]|0;
  FUNCTION_TABLE_vi[$2 & 31](0);
 }
 _glDisableVertexAttribArray(0);
 _glDisableVertexAttribArray(1);
 _glDisableVertexAttribArray(2);
 _glDisableVertexAttribArray(3);
 _glBindBuffer(34962,0);
 _glBindBuffer(34963,0);
 _glDeleteBuffers(1,((23516)|0));
 _glDeleteBuffers(1,((23520)|0));
 _glDeleteBuffers(1,((23564)|0));
 _glDeleteBuffers(1,((23568)|0));
 _glDeleteBuffers(1,((23612)|0));
 _glDeleteBuffers(1,((23616)|0));
 _glDeleteBuffers(1,((23620)|0));
 _glDeleteBuffers(1,((23624)|0));
 $3 = HEAP32[5535]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[5538]|0;
  FUNCTION_TABLE_vii[$5 & 63](1,(23512));
  $6 = HEAP32[5538]|0;
  FUNCTION_TABLE_vii[$6 & 63](1,(23560));
  $7 = HEAP32[5538]|0;
  FUNCTION_TABLE_vii[$7 & 63](1,(23608));
 }
 $8 = HEAP32[(23496)>>2]|0;
 _free($8);
 $9 = HEAP32[(23504)>>2]|0;
 _free($9);
 $10 = HEAP32[(23544)>>2]|0;
 _free($10);
 $11 = HEAP32[(23552)>>2]|0;
 _free($11);
 $12 = HEAP32[(23592)>>2]|0;
 _free($12);
 $13 = HEAP32[(23596)>>2]|0;
 _free($13);
 $14 = HEAP32[(23600)>>2]|0;
 _free($14);
 $15 = HEAP32[(23604)>>2]|0;
 _free($15);
 return;
}
function _UnloadTexture($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 _rlDeleteTextures($3);
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 _TraceLog(0,9725,$vararg_buffer);
 STACKTOP = sp;return;
}
function _rlDeleteTextures($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)>(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 _glDeleteTextures(1,($1|0));
 STACKTOP = sp;return;
}
function _BeginDrawing() {
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $downscaleView$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $downscaleView$byval_copy = sp;
 $0 = (+_GetTime());
 HEAPF64[2692] = $0;
 $1 = +HEAPF64[2692];
 $2 = +HEAPF64[2691];
 $3 = $1 - $2;
 HEAPF64[2693] = $3;
 $4 = +HEAPF64[2692];
 HEAPF64[2691] = $4;
 _rlClearScreenBuffers();
 _rlLoadIdentity();
 dest=$downscaleView$byval_copy; src=21912; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $5 = (_MatrixToFloat($downscaleView$byval_copy)|0);
 _rlMultMatrixf($5);
 STACKTOP = sp;return;
}
function _rlMultMatrixf($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $$byval_copy1 = sp + 200|0;
 $$byval_copy = sp + 136|0;
 $1 = sp + 128|0;
 $2 = sp + 64|0;
 $3 = sp;
 HEAP32[$1>>2] = $0;
 $4 = HEAP32[$1>>2]|0;
 $5 = +HEAPF32[$4>>2];
 HEAPF32[$2>>2] = $5;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = +HEAPF32[$8>>2];
 HEAPF32[$6>>2] = $9;
 $10 = ((($2)) + 8|0);
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($11)) + 32|0);
 $13 = +HEAPF32[$12>>2];
 HEAPF32[$10>>2] = $13;
 $14 = ((($2)) + 12|0);
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 48|0);
 $17 = +HEAPF32[$16>>2];
 HEAPF32[$14>>2] = $17;
 $18 = ((($2)) + 16|0);
 $19 = HEAP32[$1>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = +HEAPF32[$20>>2];
 HEAPF32[$18>>2] = $21;
 $22 = ((($2)) + 20|0);
 $23 = HEAP32[$1>>2]|0;
 $24 = ((($23)) + 20|0);
 $25 = +HEAPF32[$24>>2];
 HEAPF32[$22>>2] = $25;
 $26 = ((($2)) + 24|0);
 $27 = HEAP32[$1>>2]|0;
 $28 = ((($27)) + 36|0);
 $29 = +HEAPF32[$28>>2];
 HEAPF32[$26>>2] = $29;
 $30 = ((($2)) + 28|0);
 $31 = HEAP32[$1>>2]|0;
 $32 = ((($31)) + 52|0);
 $33 = +HEAPF32[$32>>2];
 HEAPF32[$30>>2] = $33;
 $34 = ((($2)) + 32|0);
 $35 = HEAP32[$1>>2]|0;
 $36 = ((($35)) + 8|0);
 $37 = +HEAPF32[$36>>2];
 HEAPF32[$34>>2] = $37;
 $38 = ((($2)) + 36|0);
 $39 = HEAP32[$1>>2]|0;
 $40 = ((($39)) + 24|0);
 $41 = +HEAPF32[$40>>2];
 HEAPF32[$38>>2] = $41;
 $42 = ((($2)) + 40|0);
 $43 = HEAP32[$1>>2]|0;
 $44 = ((($43)) + 40|0);
 $45 = +HEAPF32[$44>>2];
 HEAPF32[$42>>2] = $45;
 $46 = ((($2)) + 44|0);
 $47 = HEAP32[$1>>2]|0;
 $48 = ((($47)) + 56|0);
 $49 = +HEAPF32[$48>>2];
 HEAPF32[$46>>2] = $49;
 $50 = ((($2)) + 48|0);
 $51 = HEAP32[$1>>2]|0;
 $52 = ((($51)) + 12|0);
 $53 = +HEAPF32[$52>>2];
 HEAPF32[$50>>2] = $53;
 $54 = ((($2)) + 52|0);
 $55 = HEAP32[$1>>2]|0;
 $56 = ((($55)) + 28|0);
 $57 = +HEAPF32[$56>>2];
 HEAPF32[$54>>2] = $57;
 $58 = ((($2)) + 56|0);
 $59 = HEAP32[$1>>2]|0;
 $60 = ((($59)) + 44|0);
 $61 = +HEAPF32[$60>>2];
 HEAPF32[$58>>2] = $61;
 $62 = ((($2)) + 60|0);
 $63 = HEAP32[$1>>2]|0;
 $64 = ((($63)) + 60|0);
 $65 = +HEAPF32[$64>>2];
 HEAPF32[$62>>2] = $65;
 $66 = HEAP32[5501]|0;
 $67 = HEAP32[5501]|0;
 dest=$$byval_copy; src=$67; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy1; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($3,$$byval_copy,$$byval_copy1);
 dest=$66; src=$3; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _EndDrawing() {
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 20|0;
 $0 = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp;
 _rlglDraw();
 $4 = HEAP32[5912]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[5913]|0;
  $7 = (($6) + 1)|0;
  HEAP32[5913] = $7;
  $8 = HEAP32[5913]|0;
  $9 = (($8|0) % 10)&-1;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = HEAP32[5452]|0;
   $12 = HEAP32[5453]|0;
   $13 = (_rlReadScreenPixels($11,$12)|0);
   HEAP32[$0>>2] = $13;
   $14 = HEAP32[$0>>2]|0;
   $15 = HEAP32[5452]|0;
   $16 = HEAP32[5453]|0;
   (_GifWriteFrame($14,$15,$16,10,8,0)|0);
   $17 = HEAP32[$0>>2]|0;
   _free($17);
  }
  $18 = HEAP32[5913]|0;
  $19 = (($18|0) / 15)&-1;
  $20 = (($19|0) % 2)&-1;
  $21 = ($20|0)==(1);
  if ($21) {
   $22 = HEAP32[5453]|0;
   $23 = (($22) - 20)|0;
   HEAP8[$1>>0] = -26;
   $24 = ((($1)) + 1|0);
   HEAP8[$24>>0] = 41;
   $25 = ((($1)) + 2|0);
   HEAP8[$25>>0] = 55;
   $26 = ((($1)) + 3|0);
   HEAP8[$26>>0] = -1;
   ;HEAP8[$$byval_copy1>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$1+3>>0]|0;
   _DrawCircle(30,$23,10.0,$$byval_copy1);
   $27 = HEAP32[5453]|0;
   $28 = (($27) - 25)|0;
   HEAP8[$2>>0] = -66;
   $29 = ((($2)) + 1|0);
   HEAP8[$29>>0] = 33;
   $30 = ((($2)) + 2|0);
   HEAP8[$30>>0] = 55;
   $31 = ((($2)) + 3|0);
   HEAP8[$31>>0] = -1;
   ;HEAP8[$$byval_copy1>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$2+3>>0]|0;
   _DrawText(9775,50,$28,10,$$byval_copy1);
  }
  _rlglDraw();
 }
 _SwapBuffers();
 _PollInputEvents();
 $32 = (+_GetTime());
 HEAPF64[2692] = $32;
 $33 = +HEAPF64[2692];
 $34 = +HEAPF64[2691];
 $35 = $33 - $34;
 HEAPF64[2694] = $35;
 $36 = +HEAPF64[2692];
 HEAPF64[2691] = $36;
 $37 = +HEAPF64[2693];
 $38 = +HEAPF64[2694];
 $39 = $37 + $38;
 HEAPF64[2695] = $39;
 $40 = +HEAPF64[2695];
 $41 = +HEAPF64[2690];
 $42 = $40 < $41;
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $43 = +HEAPF64[2690];
 $44 = +HEAPF64[2695];
 $45 = $43 - $44;
 $46 = $45 * 1000.0;
 $47 = $46;
 _Wait($47);
 $48 = (+_GetTime());
 HEAPF64[2692] = $48;
 $49 = +HEAPF64[2692];
 $50 = +HEAPF64[2691];
 $51 = $49 - $50;
 HEAPF64[$3>>3] = $51;
 $52 = +HEAPF64[2692];
 HEAPF64[2691] = $52;
 $53 = +HEAPF64[$3>>3];
 $54 = +HEAPF64[2695];
 $55 = $54 + $53;
 HEAPF64[2695] = $55;
 STACKTOP = sp;return;
}
function _rlglDraw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _UpdateBuffersDefault();
 _DrawBuffersDefault();
 return;
}
function _rlReadScreenPixels($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$3>>2]|0;
 $10 = Math_imul($8, $9)|0;
 $11 = $10<<2;
 $12 = (_calloc($11,1)|0);
 HEAP32[$4>>2] = $12;
 $13 = HEAP32[$2>>2]|0;
 $14 = HEAP32[$3>>2]|0;
 $15 = HEAP32[$4>>2]|0;
 _glReadPixels(0,0,($13|0),($14|0),6408,5121,($15|0));
 $16 = HEAP32[$2>>2]|0;
 $17 = HEAP32[$3>>2]|0;
 $18 = Math_imul($16, $17)|0;
 $19 = $18;
 $20 = $19<<2;
 $21 = (_malloc($20)|0);
 HEAP32[$5>>2] = $21;
 $22 = HEAP32[$3>>2]|0;
 $23 = (($22) - 1)|0;
 HEAP32[$6>>2] = $23;
 while(1) {
  $24 = HEAP32[$6>>2]|0;
  $25 = ($24|0)>=(0);
  if (!($25)) {
   break;
  }
  HEAP32[$7>>2] = 0;
  while(1) {
   $26 = HEAP32[$7>>2]|0;
   $27 = HEAP32[$2>>2]|0;
   $28 = $27<<2;
   $29 = ($26|0)<($28|0);
   if (!($29)) {
    break;
   }
   $30 = HEAP32[$4>>2]|0;
   $31 = HEAP32[$6>>2]|0;
   $32 = HEAP32[$2>>2]|0;
   $33 = Math_imul($31, $32)|0;
   $34 = $33<<2;
   $35 = HEAP32[$7>>2]|0;
   $36 = (($34) + ($35))|0;
   $37 = (($30) + ($36)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = HEAP32[$5>>2]|0;
   $40 = HEAP32[$3>>2]|0;
   $41 = (($40) - 1)|0;
   $42 = HEAP32[$6>>2]|0;
   $43 = (($41) - ($42))|0;
   $44 = HEAP32[$2>>2]|0;
   $45 = Math_imul($43, $44)|0;
   $46 = $45<<2;
   $47 = HEAP32[$7>>2]|0;
   $48 = (($46) + ($47))|0;
   $49 = (($39) + ($48)|0);
   HEAP8[$49>>0] = $38;
   $50 = HEAP32[$7>>2]|0;
   $51 = (($50) + 1)|0;
   $52 = (($51|0) % 4)&-1;
   $53 = ($52|0)==(0);
   if ($53) {
    $54 = HEAP32[$5>>2]|0;
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) - 1)|0;
    $57 = HEAP32[$6>>2]|0;
    $58 = (($56) - ($57))|0;
    $59 = HEAP32[$2>>2]|0;
    $60 = Math_imul($58, $59)|0;
    $61 = $60<<2;
    $62 = HEAP32[$7>>2]|0;
    $63 = (($61) + ($62))|0;
    $64 = (($54) + ($63)|0);
    HEAP8[$64>>0] = -1;
   }
   $65 = HEAP32[$7>>2]|0;
   $66 = (($65) + 1)|0;
   HEAP32[$7>>2] = $66;
  }
  $67 = HEAP32[$6>>2]|0;
  $68 = (($67) + -1)|0;
  HEAP32[$6>>2] = $68;
 }
 $69 = HEAP32[$4>>2]|0;
 _free($69);
 $70 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($70|0);
}
function _DrawCircle($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy1 = sp + 32|0;
 $$byval_copy = sp + 24|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAPF32[$6>>2] = $2;
 $8 = HEAP32[$4>>2]|0;
 $9 = (+($8|0));
 HEAPF32[$7>>2] = $9;
 $10 = ((($7)) + 4|0);
 $11 = HEAP32[$5>>2]|0;
 $12 = (+($11|0));
 HEAPF32[$10>>2] = $12;
 $13 = +HEAPF32[$6>>2];
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$3+3>>0]|0;
 _DrawCircleV($$byval_copy,$13,$$byval_copy1);
 STACKTOP = sp;return;
}
function _DrawText($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 128|0;
 $$byval_copy = sp + 96|0;
 $5 = sp + 92|0;
 $6 = sp + 88|0;
 $7 = sp + 84|0;
 $8 = sp + 80|0;
 $9 = sp + 48|0;
 $10 = sp + 40|0;
 $11 = sp + 36|0;
 $12 = sp + 32|0;
 $13 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 _GetDefaultFont($9);
 $14 = HEAP32[$9>>2]|0;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$6>>2]|0;
 $17 = (+($16|0));
 HEAPF32[$10>>2] = $17;
 $18 = ((($10)) + 4|0);
 $19 = HEAP32[$7>>2]|0;
 $20 = (+($19|0));
 HEAPF32[$18>>2] = $20;
 HEAP32[$11>>2] = 10;
 $21 = HEAP32[$8>>2]|0;
 $22 = HEAP32[$11>>2]|0;
 $23 = ($21|0)<($22|0);
 if ($23) {
  $24 = HEAP32[$11>>2]|0;
  HEAP32[$8>>2] = $24;
 }
 $25 = HEAP32[$8>>2]|0;
 $26 = HEAP32[$11>>2]|0;
 $27 = (($25|0) / ($26|0))&-1;
 HEAP32[$12>>2] = $27;
 _GetDefaultFont($13);
 $28 = HEAP32[$5>>2]|0;
 $29 = HEAP32[$8>>2]|0;
 $30 = (+($29|0));
 $31 = HEAP32[$12>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$13+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$13+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$13+20>>2]|0;HEAP32[$$byval_copy+24>>2]=HEAP32[$13+24>>2]|0;HEAP32[$$byval_copy+28>>2]=HEAP32[$13+28>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$10+4>>2]|0;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$4+3>>0]|0;
 _DrawTextEx($$byval_copy,$28,$$byval_copy1,$30,$31,$$byval_copy2);
 STACKTOP = sp;return;
}
function _SwapBuffers() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5446]|0;
 _glfwSwapBuffers(($0|0));
 return;
}
function _PollInputEvents() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1488|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1488|0);
 $0 = sp + 1440|0;
 $1 = sp + 1432|0;
 $2 = sp + 1476|0;
 $3 = sp + 1472|0;
 $4 = sp + 1468|0;
 $5 = sp + 1464|0;
 $6 = sp + 1460|0;
 $7 = sp;
 $8 = sp + 1456|0;
 $9 = sp + 1452|0;
 $10 = sp + 1448|0;
 _UpdateGestures();
 HEAP32[741] = -1;
 HEAP32[743] = -1;
 HEAP32[5914] = 0;
 $11 = HEAP32[5446]|0;
 _glfwGetCursorPos(($11|0),($0|0),($1|0));
 $12 = +HEAPF64[$0>>3];
 $13 = $12;
 HEAPF32[5448] = $13;
 $14 = +HEAPF64[$1>>3];
 $15 = $14;
 HEAPF32[(21796)>>2] = $15;
 HEAP32[$2>>2] = 0;
 while(1) {
  $16 = HEAP32[$2>>2]|0;
  $17 = ($16|0)<(512);
  if (!($17)) {
   break;
  }
  $18 = HEAP32[$2>>2]|0;
  $19 = (64755 + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = HEAP32[$2>>2]|0;
  $22 = (65395 + ($21)|0);
  HEAP8[$22>>0] = $20;
  $23 = HEAP32[$2>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$2>>2] = $24;
 }
 HEAP32[$3>>2] = 0;
 while(1) {
  $25 = HEAP32[$3>>2]|0;
  $26 = ($25|0)<(3);
  if (!($26)) {
   break;
  }
  $27 = HEAP32[$3>>2]|0;
  $28 = (64749 + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = HEAP32[$3>>2]|0;
  $31 = (64752 + ($30)|0);
  HEAP8[$31>>0] = $29;
  $32 = HEAP32[$3>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$3>>2] = $33;
 }
 $34 = HEAP32[5910]|0;
 HEAP32[5447] = $34;
 HEAP32[5910] = 0;
 $35 = (_emscripten_get_num_gamepads()|0);
 HEAP32[$4>>2] = $35;
 HEAP32[$5>>2] = 0;
 while(1) {
  $36 = HEAP32[$5>>2]|0;
  $37 = HEAP32[$4>>2]|0;
  $38 = ($36|0)<($37|0);
  $39 = HEAP32[$5>>2]|0;
  $40 = ($39|0)<(4);
  $41 = $38 ? $40 : 0;
  if (!($41)) {
   break;
  }
  HEAP32[$6>>2] = 0;
  while(1) {
   $42 = HEAP32[$6>>2]|0;
   $43 = ($42|0)<(32);
   $44 = HEAP32[$5>>2]|0;
   if (!($43)) {
    break;
   }
   $45 = (65907 + ($44<<5)|0);
   $46 = HEAP32[$6>>2]|0;
   $47 = (($45) + ($46)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = HEAP32[$5>>2]|0;
   $50 = (66035 + ($49<<5)|0);
   $51 = HEAP32[$6>>2]|0;
   $52 = (($50) + ($51)|0);
   HEAP8[$52>>0] = $48;
   $53 = HEAP32[$6>>2]|0;
   $54 = (($53) + 1)|0;
   HEAP32[$6>>2] = $54;
  }
  $55 = (_emscripten_get_gamepad_status(($44|0),($7|0))|0);
  HEAP32[$8>>2] = $55;
  $56 = HEAP32[$8>>2]|0;
  $57 = ($56|0)==(0);
  if ($57) {
   HEAP32[$9>>2] = 0;
   while(1) {
    $58 = HEAP32[$9>>2]|0;
    $59 = ((($7)) + 12|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($58|0)<($60|0);
    $62 = HEAP32[$9>>2]|0;
    $63 = ($62|0)<(32);
    $64 = $61 ? $63 : 0;
    if (!($64)) {
     break;
    }
    $65 = ((($7)) + 1040|0);
    $66 = HEAP32[$9>>2]|0;
    $67 = (($65) + ($66<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ($68|0)==(1);
    $70 = HEAP32[$5>>2]|0;
    $71 = (65907 + ($70<<5)|0);
    $72 = HEAP32[$9>>2]|0;
    $73 = (($71) + ($72)|0);
    if ($69) {
     HEAP8[$73>>0] = 1;
     $74 = HEAP32[$9>>2]|0;
     HEAP32[743] = $74;
    } else {
     HEAP8[$73>>0] = 0;
    }
    $75 = HEAP32[$9>>2]|0;
    $76 = (($75) + 1)|0;
    HEAP32[$9>>2] = $76;
   }
   HEAP32[$10>>2] = 0;
   while(1) {
    $77 = HEAP32[$10>>2]|0;
    $78 = ((($7)) + 8|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ($77|0)<($79|0);
    $81 = HEAP32[$10>>2]|0;
    $82 = ($81|0)<(8);
    $83 = $80 ? $82 : 0;
    if (!($83)) {
     break;
    }
    $84 = ((($7)) + 16|0);
    $85 = HEAP32[$10>>2]|0;
    $86 = (($84) + ($85<<3)|0);
    $87 = +HEAPF64[$86>>3];
    $88 = $87;
    $89 = HEAP32[$5>>2]|0;
    $90 = (23660 + ($89<<5)|0);
    $91 = HEAP32[$10>>2]|0;
    $92 = (($90) + ($91<<2)|0);
    HEAPF32[$92>>2] = $88;
    $93 = HEAP32[$10>>2]|0;
    $94 = (($93) + 1)|0;
    HEAP32[$10>>2] = $94;
   }
   $95 = ((($7)) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   HEAP32[5914] = $96;
  }
  $97 = HEAP32[$5>>2]|0;
  $98 = (($97) + 1)|0;
  HEAP32[$5>>2] = $98;
 }
 STACKTOP = sp;return;
}
function _Wait($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 HEAPF32[$1>>2] = $0;
 $4 = (+_GetTime());
 HEAPF64[$2>>3] = $4;
 HEAPF64[$3>>3] = 0.0;
 while(1) {
  $5 = +HEAPF64[$3>>3];
  $6 = +HEAPF64[$2>>3];
  $7 = $5 - $6;
  $8 = +HEAPF32[$1>>2];
  $9 = $8 / 1000.0;
  $10 = $9;
  $11 = $7 < $10;
  if (!($11)) {
   break;
  }
  $12 = (+_GetTime());
  HEAPF64[$3>>3] = $12;
 }
 STACKTOP = sp;return;
}
function _GetDefaultFont($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[21852>>2]|0;HEAP32[$0+4>>2]=HEAP32[21852+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[21852+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[21852+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[21852+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[21852+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[21852+24>>2]|0;HEAP32[$0+28>>2]=HEAP32[21852+28>>2]|0;
 return;
}
function _DrawTextEx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $$byval_copy7 = sp + 120|0;
 $$byval_copy6 = sp + 112|0;
 $$byval_copy5 = sp + 96|0;
 $$byval_copy4 = sp + 80|0;
 $$byval_copy3 = sp + 60|0;
 $6 = sp + 56|0;
 $7 = sp + 52|0;
 $8 = sp + 48|0;
 $9 = sp + 44|0;
 $10 = sp + 40|0;
 $11 = sp + 36|0;
 $12 = sp + 32|0;
 $13 = sp + 152|0;
 $14 = sp + 28|0;
 $15 = sp + 24|0;
 $16 = sp + 8|0;
 $17 = sp;
 HEAP32[$6>>2] = $1;
 HEAPF32[$7>>2] = $3;
 HEAP32[$8>>2] = $4;
 $18 = HEAP32[$6>>2]|0;
 $19 = (_strlen($18)|0);
 HEAP32[$9>>2] = $19;
 HEAP32[$10>>2] = 0;
 HEAP32[$11>>2] = 0;
 $20 = +HEAPF32[$7>>2];
 $21 = ((($0)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (+($22|0));
 $24 = $20 / $23;
 HEAPF32[$12>>2] = $24;
 HEAP32[$15>>2] = 0;
 while(1) {
  $25 = HEAP32[$15>>2]|0;
  $26 = HEAP32[$9>>2]|0;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = HEAP32[$6>>2]|0;
  $29 = HEAP32[$15>>2]|0;
  $30 = (($28) + ($29)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = ($32|0)==(10);
  do {
   if ($33) {
    $34 = ((($0)) + 20|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($0)) + 20|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37|0) / 2)&-1;
    $39 = (($35) + ($38))|0;
    $40 = (+($39|0));
    $41 = +HEAPF32[$12>>2];
    $42 = $40 * $41;
    $43 = (~~(($42)));
    $44 = HEAP32[$11>>2]|0;
    $45 = (($44) + ($43))|0;
    HEAP32[$11>>2] = $45;
    HEAP32[$10>>2] = 0;
   } else {
    $46 = HEAP32[$6>>2]|0;
    $47 = HEAP32[$15>>2]|0;
    $48 = (($46) + ($47)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = ($50|0)==(194);
    $52 = HEAP32[$6>>2]|0;
    $53 = HEAP32[$15>>2]|0;
    do {
     if ($51) {
      $54 = (($53) + 1)|0;
      $55 = (($52) + ($54)|0);
      $56 = HEAP8[$55>>0]|0;
      HEAP8[$13>>0] = $56;
      $57 = HEAP8[$13>>0]|0;
      $58 = $57&255;
      ;HEAP32[$$byval_copy7>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy7+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy7+20>>2]=HEAP32[$0+20>>2]|0;HEAP32[$$byval_copy7+24>>2]=HEAP32[$0+24>>2]|0;HEAP32[$$byval_copy7+28>>2]=HEAP32[$0+28>>2]|0;
      $59 = (_GetCharIndex($$byval_copy7,$58)|0);
      HEAP32[$14>>2] = $59;
      $60 = HEAP32[$15>>2]|0;
      $61 = (($60) + 1)|0;
      HEAP32[$15>>2] = $61;
     } else {
      $62 = (($52) + ($53)|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = $63&255;
      $65 = ($64|0)==(195);
      $66 = HEAP32[$6>>2]|0;
      $67 = HEAP32[$15>>2]|0;
      if ($65) {
       $68 = (($67) + 1)|0;
       $69 = (($66) + ($68)|0);
       $70 = HEAP8[$69>>0]|0;
       HEAP8[$13>>0] = $70;
       $71 = HEAP8[$13>>0]|0;
       $72 = $71&255;
       $73 = (($72) + 64)|0;
       ;HEAP32[$$byval_copy7>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy7+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy7+20>>2]=HEAP32[$0+20>>2]|0;HEAP32[$$byval_copy7+24>>2]=HEAP32[$0+24>>2]|0;HEAP32[$$byval_copy7+28>>2]=HEAP32[$0+28>>2]|0;
       $74 = (_GetCharIndex($$byval_copy7,$73)|0);
       HEAP32[$14>>2] = $74;
       $75 = HEAP32[$15>>2]|0;
       $76 = (($75) + 1)|0;
       HEAP32[$15>>2] = $76;
       break;
      } else {
       $77 = (($66) + ($67)|0);
       $78 = HEAP8[$77>>0]|0;
       $79 = $78&255;
       ;HEAP32[$$byval_copy7>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy7+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy7+20>>2]=HEAP32[$0+20>>2]|0;HEAP32[$$byval_copy7+24>>2]=HEAP32[$0+24>>2]|0;HEAP32[$$byval_copy7+28>>2]=HEAP32[$0+28>>2]|0;
       $80 = (_GetCharIndex($$byval_copy7,$79)|0);
       HEAP32[$14>>2] = $80;
       break;
      }
     }
    } while(0);
    $81 = ((($0)) + 28|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = HEAP32[$14>>2]|0;
    $84 = (($82) + ($83<<5)|0);
    $85 = ((($84)) + 4|0);
    $86 = +HEAPF32[$2>>2];
    $87 = HEAP32[$10>>2]|0;
    $88 = (+($87|0));
    $89 = $86 + $88;
    $90 = ((($0)) + 28|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = HEAP32[$14>>2]|0;
    $93 = (($91) + ($92<<5)|0);
    $94 = ((($93)) + 20|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (+($95|0));
    $97 = +HEAPF32[$12>>2];
    $98 = $96 * $97;
    $99 = $89 + $98;
    $100 = (~~(($99)));
    HEAP32[$16>>2] = $100;
    $101 = ((($16)) + 4|0);
    $102 = ((($2)) + 4|0);
    $103 = +HEAPF32[$102>>2];
    $104 = HEAP32[$11>>2]|0;
    $105 = (+($104|0));
    $106 = $103 + $105;
    $107 = ((($0)) + 28|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = HEAP32[$14>>2]|0;
    $110 = (($108) + ($109<<5)|0);
    $111 = ((($110)) + 24|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (+($112|0));
    $114 = +HEAPF32[$12>>2];
    $115 = $113 * $114;
    $116 = $106 + $115;
    $117 = (~~(($116)));
    HEAP32[$101>>2] = $117;
    $118 = ((($16)) + 8|0);
    $119 = ((($0)) + 28|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = HEAP32[$14>>2]|0;
    $122 = (($120) + ($121<<5)|0);
    $123 = ((($122)) + 4|0);
    $124 = ((($123)) + 8|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (+($125|0));
    $127 = +HEAPF32[$12>>2];
    $128 = $126 * $127;
    $129 = (~~(($128)));
    HEAP32[$118>>2] = $129;
    $130 = ((($16)) + 12|0);
    $131 = ((($0)) + 28|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = HEAP32[$14>>2]|0;
    $134 = (($132) + ($133<<5)|0);
    $135 = ((($134)) + 4|0);
    $136 = ((($135)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (+($137|0));
    $139 = +HEAPF32[$12>>2];
    $140 = $138 * $139;
    $141 = (~~(($140)));
    HEAP32[$130>>2] = $141;
    HEAPF32[$17>>2] = 0.0;
    $142 = ((($17)) + 4|0);
    HEAPF32[$142>>2] = 0.0;
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy3+16>>2]=HEAP32[$0+16>>2]|0;
    ;HEAP32[$$byval_copy4>>2]=HEAP32[$85>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$85+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$85+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$85+12>>2]|0;
    ;HEAP32[$$byval_copy5>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$16+12>>2]|0;
    ;HEAP32[$$byval_copy6>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$17+4>>2]|0;
    ;HEAP8[$$byval_copy7>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy7+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy7+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy7+3>>0]=HEAP8[$5+3>>0]|0;
    _DrawTexturePro($$byval_copy3,$$byval_copy4,$$byval_copy5,$$byval_copy6,0.0,$$byval_copy7);
    $143 = ((($0)) + 28|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = HEAP32[$14>>2]|0;
    $146 = (($144) + ($145<<5)|0);
    $147 = ((($146)) + 28|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0);
    $150 = ((($0)) + 28|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = HEAP32[$14>>2]|0;
    $153 = (($151) + ($152<<5)|0);
    if ($149) {
     $154 = ((($153)) + 4|0);
     $155 = ((($154)) + 8|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = (+($156|0));
     $158 = +HEAPF32[$12>>2];
     $159 = $157 * $158;
     $160 = HEAP32[$8>>2]|0;
     $161 = (+($160|0));
     $162 = $159 + $161;
     $163 = (~~(($162)));
     $164 = HEAP32[$10>>2]|0;
     $165 = (($164) + ($163))|0;
     HEAP32[$10>>2] = $165;
     break;
    } else {
     $166 = ((($153)) + 28|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = (+($167|0));
     $169 = +HEAPF32[$12>>2];
     $170 = $168 * $169;
     $171 = HEAP32[$8>>2]|0;
     $172 = (+($171|0));
     $173 = $170 + $172;
     $174 = (~~(($173)));
     $175 = HEAP32[$10>>2]|0;
     $176 = (($175) + ($174))|0;
     HEAP32[$10>>2] = $176;
     break;
    }
   }
  } while(0);
  $177 = HEAP32[$15>>2]|0;
  $178 = (($177) + 1)|0;
  HEAP32[$15>>2] = $178;
 }
 STACKTOP = sp;return;
}
function _GetCharIndex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $1;
 HEAP32[$3>>2] = 0;
 HEAP32[$4>>2] = 0;
 while(1) {
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = ((($0)) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$4>>2]|0;
  $12 = (($10) + ($11<<5)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$2>>2]|0;
  $15 = ($13|0)==($14|0);
  $16 = HEAP32[$4>>2]|0;
  if ($15) {
   break;
  }
  $17 = (($16) + 1)|0;
  HEAP32[$4>>2] = $17;
 }
 if ((label|0) == 6) {
  $18 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($18|0);
 }
 HEAP32[$3>>2] = $16;
 $18 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($18|0);
}
function _DrawTexturePro($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $50 = 0;
 var $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 HEAPF32[$6>>2] = $4;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7>>>0)>(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = ((($1)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 if ($11) {
  $12 = ((($1)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) - ($13))|0;
  HEAP32[$1>>2] = $15;
 }
 $16 = ((($1)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)<(0);
 if ($18) {
  $19 = ((($1)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($1)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) - ($20))|0;
  HEAP32[$21>>2] = $23;
 }
 $24 = HEAP32[$0>>2]|0;
 _rlEnableTexture($24);
 _rlPushMatrix();
 $25 = HEAP32[$2>>2]|0;
 $26 = (+($25|0));
 $27 = ((($2)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (+($28|0));
 _rlTranslatef($26,$29,0.0);
 $30 = +HEAPF32[$6>>2];
 _rlRotatef($30,0.0,0.0,1.0);
 $31 = +HEAPF32[$3>>2];
 $32 = -$31;
 $33 = ((($3)) + 4|0);
 $34 = +HEAPF32[$33>>2];
 $35 = -$34;
 _rlTranslatef($32,$35,0.0);
 _rlBegin(7);
 $36 = HEAP8[$5>>0]|0;
 $37 = ((($5)) + 1|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ((($5)) + 2|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = ((($5)) + 3|0);
 $42 = HEAP8[$41>>0]|0;
 _rlColor4ub($36,$38,$40,$42);
 _rlNormal3f(0.0,0.0,1.0);
 $43 = HEAP32[$1>>2]|0;
 $44 = (+($43|0));
 $45 = ((($0)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (+($46|0));
 $48 = $44 / $47;
 $49 = ((($1)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (+($50|0));
 $52 = ((($0)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (+($53|0));
 $55 = $51 / $54;
 _rlTexCoord2f($48,$55);
 _rlVertex2f(0.0,0.0);
 $56 = HEAP32[$1>>2]|0;
 $57 = (+($56|0));
 $58 = ((($0)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (+($59|0));
 $61 = $57 / $60;
 $62 = ((($1)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($1)) + 12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($63) + ($65))|0;
 $67 = (+($66|0));
 $68 = ((($0)) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (+($69|0));
 $71 = $67 / $70;
 _rlTexCoord2f($61,$71);
 $72 = ((($2)) + 12|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (+($73|0));
 _rlVertex2f(0.0,$74);
 $75 = HEAP32[$1>>2]|0;
 $76 = ((($1)) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($75) + ($77))|0;
 $79 = (+($78|0));
 $80 = ((($0)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (+($81|0));
 $83 = $79 / $82;
 $84 = ((($1)) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ((($1)) + 12|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + ($87))|0;
 $89 = (+($88|0));
 $90 = ((($0)) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (+($91|0));
 $93 = $89 / $92;
 _rlTexCoord2f($83,$93);
 $94 = ((($2)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (+($95|0));
 $97 = ((($2)) + 12|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (+($98|0));
 _rlVertex2f($96,$99);
 $100 = HEAP32[$1>>2]|0;
 $101 = ((($1)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($100) + ($102))|0;
 $104 = (+($103|0));
 $105 = ((($0)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (+($106|0));
 $108 = $104 / $107;
 $109 = ((($1)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (+($110|0));
 $112 = ((($0)) + 8|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = (+($113|0));
 $115 = $111 / $114;
 _rlTexCoord2f($108,$115);
 $116 = ((($2)) + 8|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (+($117|0));
 _rlVertex2f($118,0.0);
 _rlEnd();
 _rlPopMatrix();
 _rlDisableTexture();
 STACKTOP = sp;return;
}
function _rlEnableTexture($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[5610]|0;
 $3 = HEAP32[5611]|0;
 $4 = (($3) - 1)|0;
 $5 = (($2) + (($4*144)|0)|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = ($7|0)!=($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[5610]|0;
 $11 = HEAP32[5611]|0;
 $12 = (($11) - 1)|0;
 $13 = (($10) + (($12*144)|0)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 if ($15) {
  $16 = HEAP32[5611]|0;
  $17 = (($16) + 1)|0;
  HEAP32[5611] = $17;
 }
 $18 = HEAP32[5611]|0;
 $19 = ($18|0)>=(256);
 if ($19) {
  _rlglDraw();
  HEAP32[5611] = 1;
 }
 $20 = HEAP32[$1>>2]|0;
 $21 = HEAP32[5610]|0;
 $22 = HEAP32[5611]|0;
 $23 = (($22) - 1)|0;
 $24 = (($21) + (($23*144)|0)|0);
 $25 = ((($24)) + 8|0);
 HEAP32[$25>>2] = $20;
 $26 = HEAP32[5610]|0;
 $27 = HEAP32[5611]|0;
 $28 = (($27) - 1)|0;
 $29 = (($26) + (($28*144)|0)|0);
 HEAP32[$29>>2] = 0;
 STACKTOP = sp;return;
}
function _rlPushMatrix() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[5947]|0;
 $1 = ($0|0)==(15);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = 16;
  _TraceLog(2,9864,$vararg_buffer);
 }
 $2 = HEAP32[5947]|0;
 $3 = (22452 + ($2<<6)|0);
 $4 = HEAP32[5501]|0;
 dest=$3; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _rlLoadIdentity();
 $5 = HEAP32[5947]|0;
 $6 = (($5) + 1)|0;
 HEAP32[5947] = $6;
 $7 = HEAP32[5534]|0;
 $8 = ($7|0)==(5888);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[5948] = 1;
 STACKTOP = sp;return;
}
function _rlTranslatef($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $$byval_copy1 = sp + 208|0;
 $$byval_copy = sp + 144|0;
 $3 = sp + 136|0;
 $4 = sp + 132|0;
 $5 = sp + 128|0;
 $6 = sp + 64|0;
 $7 = sp;
 HEAPF32[$3>>2] = $0;
 HEAPF32[$4>>2] = $1;
 HEAPF32[$5>>2] = $2;
 $8 = +HEAPF32[$3>>2];
 $9 = +HEAPF32[$4>>2];
 $10 = +HEAPF32[$5>>2];
 _MatrixTranslate($6,$8,$9,$10);
 $11 = HEAP32[5501]|0;
 $12 = HEAP32[5501]|0;
 dest=$$byval_copy; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy1; src=$12; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($7,$$byval_copy,$$byval_copy1);
 dest=$11; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlRotatef($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy2 = sp + 288|0;
 $$byval_copy1 = sp + 224|0;
 $4 = sp + 220|0;
 $5 = sp + 216|0;
 $6 = sp + 212|0;
 $7 = sp + 208|0;
 $8 = sp + 144|0;
 $9 = sp + 128|0;
 $10 = sp + 64|0;
 $11 = sp;
 HEAPF32[$4>>2] = $0;
 HEAPF32[$5>>2] = $1;
 HEAPF32[$6>>2] = $2;
 HEAPF32[$7>>2] = $3;
 _MatrixIdentity($8);
 $12 = +HEAPF32[$5>>2];
 HEAPF32[$9>>2] = $12;
 $13 = ((($9)) + 4|0);
 $14 = +HEAPF32[$6>>2];
 HEAPF32[$13>>2] = $14;
 $15 = ((($9)) + 8|0);
 $16 = +HEAPF32[$7>>2];
 HEAPF32[$15>>2] = $16;
 _Vector3Normalize($9);
 $17 = +HEAPF32[$4>>2];
 $18 = $17 * 0.01745329238474369;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$9+8>>2]|0;
 _MatrixRotate($10,$$byval_copy2,$18);
 dest=$8; src=$10; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $19 = HEAP32[5501]|0;
 $20 = HEAP32[5501]|0;
 dest=$$byval_copy1; src=$8; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy2; src=$20; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($11,$$byval_copy1,$$byval_copy2);
 dest=$19; src=$11; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlBegin($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[5612] = $2;
 STACKTOP = sp;return;
}
function _rlColor4ub($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink10 = 0, $$sink3 = 0, $$sink9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 3|0;
 $5 = sp + 2|0;
 $6 = sp + 1|0;
 $7 = sp;
 HEAP8[$4>>0] = $0;
 HEAP8[$5>>0] = $1;
 HEAP8[$6>>0] = $2;
 HEAP8[$7>>0] = $3;
 $8 = HEAP32[5612]|0;
 switch ($8|0) {
 case 1:  {
  $9 = HEAP8[$4>>0]|0;
  $10 = HEAP32[(23504)>>2]|0;
  $11 = HEAP32[(23492)>>2]|0;
  $12 = $11<<2;
  $13 = (($10) + ($12)|0);
  HEAP8[$13>>0] = $9;
  $14 = HEAP8[$5>>0]|0;
  $15 = HEAP32[(23504)>>2]|0;
  $16 = HEAP32[(23492)>>2]|0;
  $17 = $16<<2;
  $18 = (($17) + 1)|0;
  $19 = (($15) + ($18)|0);
  HEAP8[$19>>0] = $14;
  $20 = HEAP8[$6>>0]|0;
  $21 = HEAP32[(23504)>>2]|0;
  $22 = HEAP32[(23492)>>2]|0;
  $23 = $22<<2;
  $24 = (($23) + 2)|0;
  $25 = (($21) + ($24)|0);
  HEAP8[$25>>0] = $20;
  $26 = HEAP8[$7>>0]|0;
  $$sink10 = (23504);$$sink3 = $26;$$sink9 = (23492);
  break;
 }
 case 4:  {
  $27 = HEAP8[$4>>0]|0;
  $28 = HEAP32[(23552)>>2]|0;
  $29 = HEAP32[(23540)>>2]|0;
  $30 = $29<<2;
  $31 = (($28) + ($30)|0);
  HEAP8[$31>>0] = $27;
  $32 = HEAP8[$5>>0]|0;
  $33 = HEAP32[(23552)>>2]|0;
  $34 = HEAP32[(23540)>>2]|0;
  $35 = $34<<2;
  $36 = (($35) + 1)|0;
  $37 = (($33) + ($36)|0);
  HEAP8[$37>>0] = $32;
  $38 = HEAP8[$6>>0]|0;
  $39 = HEAP32[(23552)>>2]|0;
  $40 = HEAP32[(23540)>>2]|0;
  $41 = $40<<2;
  $42 = (($41) + 2)|0;
  $43 = (($39) + ($42)|0);
  HEAP8[$43>>0] = $38;
  $44 = HEAP8[$7>>0]|0;
  $$sink10 = (23552);$$sink3 = $44;$$sink9 = (23540);
  break;
 }
 case 7:  {
  $45 = HEAP8[$4>>0]|0;
  $46 = HEAP32[(23600)>>2]|0;
  $47 = HEAP32[(23588)>>2]|0;
  $48 = $47<<2;
  $49 = (($46) + ($48)|0);
  HEAP8[$49>>0] = $45;
  $50 = HEAP8[$5>>0]|0;
  $51 = HEAP32[(23600)>>2]|0;
  $52 = HEAP32[(23588)>>2]|0;
  $53 = $52<<2;
  $54 = (($53) + 1)|0;
  $55 = (($51) + ($54)|0);
  HEAP8[$55>>0] = $50;
  $56 = HEAP8[$6>>0]|0;
  $57 = HEAP32[(23600)>>2]|0;
  $58 = HEAP32[(23588)>>2]|0;
  $59 = $58<<2;
  $60 = (($59) + 2)|0;
  $61 = (($57) + ($60)|0);
  HEAP8[$61>>0] = $56;
  $62 = HEAP8[$7>>0]|0;
  $$sink10 = (23600);$$sink3 = $62;$$sink9 = (23588);
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $63 = HEAP32[$$sink10>>2]|0;
 $64 = HEAP32[$$sink9>>2]|0;
 $65 = $64<<2;
 $66 = (($65) + 3)|0;
 $67 = (($63) + ($66)|0);
 HEAP8[$67>>0] = $$sink3;
 $68 = HEAP32[$$sink9>>2]|0;
 $69 = (($68) + 1)|0;
 HEAP32[$$sink9>>2] = $69;
 STACKTOP = sp;return;
}
function _rlNormal3f($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAPF32[$3>>2] = $0;
 HEAPF32[$4>>2] = $1;
 HEAPF32[$5>>2] = $2;
 STACKTOP = sp;return;
}
function _rlTexCoord2f($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAPF32[$2>>2] = $0;
 HEAPF32[$3>>2] = $1;
 $4 = HEAP32[5612]|0;
 $5 = ($4|0)==(7);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = +HEAPF32[$2>>2];
 $7 = HEAP32[(23596)>>2]|0;
 $8 = HEAP32[(23584)>>2]|0;
 $9 = $8<<1;
 $10 = (($7) + ($9<<2)|0);
 HEAPF32[$10>>2] = $6;
 $11 = +HEAPF32[$3>>2];
 $12 = HEAP32[(23596)>>2]|0;
 $13 = HEAP32[(23584)>>2]|0;
 $14 = $13<<1;
 $15 = (($14) + 1)|0;
 $16 = (($12) + ($15<<2)|0);
 HEAPF32[$16>>2] = $11;
 $17 = HEAP32[(23584)>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[(23584)>>2] = $18;
 STACKTOP = sp;return;
}
function _rlVertex2f($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAPF32[$2>>2] = $0;
 HEAPF32[$3>>2] = $1;
 $4 = +HEAPF32[$2>>2];
 $5 = +HEAPF32[$3>>2];
 $6 = +HEAPF32[744];
 _rlVertex3f($4,$5,$6);
 STACKTOP = sp;return;
}
function _rlEnd() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 40|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 $10 = HEAP32[5948]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  HEAP32[$0>>2] = 0;
  while(1) {
   $12 = HEAP32[$0>>2]|0;
   $13 = HEAP32[5949]|0;
   $14 = ($12|0)<($13|0);
   if (!($14)) {
    break;
   }
   $15 = HEAP32[5609]|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = (($15) + (($16*12)|0)|0);
   $18 = HEAP32[5501]|0;
   dest=$$byval_copy; src=$18; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   _Vector3Transform($17,$$byval_copy);
   $19 = HEAP32[$0>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[$0>>2] = $20;
  }
  HEAP32[5948] = 0;
  HEAP32[$1>>2] = 0;
  while(1) {
   $21 = HEAP32[$1>>2]|0;
   $22 = HEAP32[5949]|0;
   $23 = ($21|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = HEAP32[5609]|0;
   $25 = HEAP32[$1>>2]|0;
   $26 = (($24) + (($25*12)|0)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = HEAP32[5609]|0;
   $29 = HEAP32[$1>>2]|0;
   $30 = (($28) + (($29*12)|0)|0);
   $31 = ((($30)) + 4|0);
   $32 = +HEAPF32[$31>>2];
   $33 = HEAP32[5609]|0;
   $34 = HEAP32[$1>>2]|0;
   $35 = (($33) + (($34*12)|0)|0);
   $36 = ((($35)) + 8|0);
   $37 = +HEAPF32[$36>>2];
   _rlVertex3f($27,$32,$37);
   $38 = HEAP32[$1>>2]|0;
   $39 = (($38) + 1)|0;
   HEAP32[$1>>2] = $39;
  }
  HEAP32[5949] = 0;
 }
 $40 = HEAP32[5612]|0;
 switch ($40|0) {
 case 1:  {
  $41 = HEAP32[5871]|0;
  $42 = HEAP32[(23492)>>2]|0;
  $43 = ($41|0)!=($42|0);
  if (!($43)) {
   $231 = +HEAPF32[744];
   $232 = $231 + 4.9999998736893758E-5;
   HEAPF32[744] = $232;
   STACKTOP = sp;return;
  }
  $44 = HEAP32[5871]|0;
  $45 = HEAP32[(23492)>>2]|0;
  $46 = (($44) - ($45))|0;
  HEAP32[$2>>2] = $46;
  HEAP32[$3>>2] = 0;
  while(1) {
   $47 = HEAP32[$3>>2]|0;
   $48 = HEAP32[$2>>2]|0;
   $49 = ($47|0)<($48|0);
   if (!($49)) {
    break;
   }
   $50 = HEAP32[(23504)>>2]|0;
   $51 = HEAP32[(23492)>>2]|0;
   $52 = $51<<2;
   $53 = (($52) - 4)|0;
   $54 = (($50) + ($53)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = HEAP32[(23504)>>2]|0;
   $57 = HEAP32[(23492)>>2]|0;
   $58 = $57<<2;
   $59 = (($56) + ($58)|0);
   HEAP8[$59>>0] = $55;
   $60 = HEAP32[(23504)>>2]|0;
   $61 = HEAP32[(23492)>>2]|0;
   $62 = $61<<2;
   $63 = (($62) - 3)|0;
   $64 = (($60) + ($63)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = HEAP32[(23504)>>2]|0;
   $67 = HEAP32[(23492)>>2]|0;
   $68 = $67<<2;
   $69 = (($68) + 1)|0;
   $70 = (($66) + ($69)|0);
   HEAP8[$70>>0] = $65;
   $71 = HEAP32[(23504)>>2]|0;
   $72 = HEAP32[(23492)>>2]|0;
   $73 = $72<<2;
   $74 = (($73) - 2)|0;
   $75 = (($71) + ($74)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = HEAP32[(23504)>>2]|0;
   $78 = HEAP32[(23492)>>2]|0;
   $79 = $78<<2;
   $80 = (($79) + 2)|0;
   $81 = (($77) + ($80)|0);
   HEAP8[$81>>0] = $76;
   $82 = HEAP32[(23504)>>2]|0;
   $83 = HEAP32[(23492)>>2]|0;
   $84 = $83<<2;
   $85 = (($84) - 1)|0;
   $86 = (($82) + ($85)|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = HEAP32[(23504)>>2]|0;
   $89 = HEAP32[(23492)>>2]|0;
   $90 = $89<<2;
   $91 = (($90) + 3)|0;
   $92 = (($88) + ($91)|0);
   HEAP8[$92>>0] = $87;
   $93 = HEAP32[(23492)>>2]|0;
   $94 = (($93) + 1)|0;
   HEAP32[(23492)>>2] = $94;
   $95 = HEAP32[$3>>2]|0;
   $96 = (($95) + 1)|0;
   HEAP32[$3>>2] = $96;
  }
  $231 = +HEAPF32[744];
  $232 = $231 + 4.9999998736893758E-5;
  HEAPF32[744] = $232;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $97 = HEAP32[5883]|0;
  $98 = HEAP32[(23540)>>2]|0;
  $99 = ($97|0)!=($98|0);
  if (!($99)) {
   $231 = +HEAPF32[744];
   $232 = $231 + 4.9999998736893758E-5;
   HEAPF32[744] = $232;
   STACKTOP = sp;return;
  }
  $100 = HEAP32[5883]|0;
  $101 = HEAP32[(23540)>>2]|0;
  $102 = (($100) - ($101))|0;
  HEAP32[$4>>2] = $102;
  HEAP32[$5>>2] = 0;
  while(1) {
   $103 = HEAP32[$5>>2]|0;
   $104 = HEAP32[$4>>2]|0;
   $105 = ($103|0)<($104|0);
   if (!($105)) {
    break;
   }
   $106 = HEAP32[(23552)>>2]|0;
   $107 = HEAP32[(23540)>>2]|0;
   $108 = $107<<2;
   $109 = (($108) - 4)|0;
   $110 = (($106) + ($109)|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = HEAP32[(23552)>>2]|0;
   $113 = HEAP32[(23540)>>2]|0;
   $114 = $113<<2;
   $115 = (($112) + ($114)|0);
   HEAP8[$115>>0] = $111;
   $116 = HEAP32[(23552)>>2]|0;
   $117 = HEAP32[(23540)>>2]|0;
   $118 = $117<<2;
   $119 = (($118) - 3)|0;
   $120 = (($116) + ($119)|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = HEAP32[(23552)>>2]|0;
   $123 = HEAP32[(23540)>>2]|0;
   $124 = $123<<2;
   $125 = (($124) + 1)|0;
   $126 = (($122) + ($125)|0);
   HEAP8[$126>>0] = $121;
   $127 = HEAP32[(23552)>>2]|0;
   $128 = HEAP32[(23540)>>2]|0;
   $129 = $128<<2;
   $130 = (($129) - 2)|0;
   $131 = (($127) + ($130)|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = HEAP32[(23552)>>2]|0;
   $134 = HEAP32[(23540)>>2]|0;
   $135 = $134<<2;
   $136 = (($135) + 2)|0;
   $137 = (($133) + ($136)|0);
   HEAP8[$137>>0] = $132;
   $138 = HEAP32[(23552)>>2]|0;
   $139 = HEAP32[(23540)>>2]|0;
   $140 = $139<<2;
   $141 = (($140) - 1)|0;
   $142 = (($138) + ($141)|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = HEAP32[(23552)>>2]|0;
   $145 = HEAP32[(23540)>>2]|0;
   $146 = $145<<2;
   $147 = (($146) + 3)|0;
   $148 = (($144) + ($147)|0);
   HEAP8[$148>>0] = $143;
   $149 = HEAP32[(23540)>>2]|0;
   $150 = (($149) + 1)|0;
   HEAP32[(23540)>>2] = $150;
   $151 = HEAP32[$5>>2]|0;
   $152 = (($151) + 1)|0;
   HEAP32[$5>>2] = $152;
  }
  $231 = +HEAPF32[744];
  $232 = $231 + 4.9999998736893758E-5;
  HEAPF32[744] = $232;
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $153 = HEAP32[5895]|0;
  $154 = HEAP32[(23588)>>2]|0;
  $155 = ($153|0)!=($154|0);
  L30: do {
   if ($155) {
    $156 = HEAP32[5895]|0;
    $157 = HEAP32[(23588)>>2]|0;
    $158 = (($156) - ($157))|0;
    HEAP32[$6>>2] = $158;
    HEAP32[$7>>2] = 0;
    while(1) {
     $159 = HEAP32[$7>>2]|0;
     $160 = HEAP32[$6>>2]|0;
     $161 = ($159|0)<($160|0);
     if (!($161)) {
      break L30;
     }
     $162 = HEAP32[(23600)>>2]|0;
     $163 = HEAP32[(23588)>>2]|0;
     $164 = $163<<2;
     $165 = (($164) - 4)|0;
     $166 = (($162) + ($165)|0);
     $167 = HEAP8[$166>>0]|0;
     $168 = HEAP32[(23600)>>2]|0;
     $169 = HEAP32[(23588)>>2]|0;
     $170 = $169<<2;
     $171 = (($168) + ($170)|0);
     HEAP8[$171>>0] = $167;
     $172 = HEAP32[(23600)>>2]|0;
     $173 = HEAP32[(23588)>>2]|0;
     $174 = $173<<2;
     $175 = (($174) - 3)|0;
     $176 = (($172) + ($175)|0);
     $177 = HEAP8[$176>>0]|0;
     $178 = HEAP32[(23600)>>2]|0;
     $179 = HEAP32[(23588)>>2]|0;
     $180 = $179<<2;
     $181 = (($180) + 1)|0;
     $182 = (($178) + ($181)|0);
     HEAP8[$182>>0] = $177;
     $183 = HEAP32[(23600)>>2]|0;
     $184 = HEAP32[(23588)>>2]|0;
     $185 = $184<<2;
     $186 = (($185) - 2)|0;
     $187 = (($183) + ($186)|0);
     $188 = HEAP8[$187>>0]|0;
     $189 = HEAP32[(23600)>>2]|0;
     $190 = HEAP32[(23588)>>2]|0;
     $191 = $190<<2;
     $192 = (($191) + 2)|0;
     $193 = (($189) + ($192)|0);
     HEAP8[$193>>0] = $188;
     $194 = HEAP32[(23600)>>2]|0;
     $195 = HEAP32[(23588)>>2]|0;
     $196 = $195<<2;
     $197 = (($196) - 1)|0;
     $198 = (($194) + ($197)|0);
     $199 = HEAP8[$198>>0]|0;
     $200 = HEAP32[(23600)>>2]|0;
     $201 = HEAP32[(23588)>>2]|0;
     $202 = $201<<2;
     $203 = (($202) + 3)|0;
     $204 = (($200) + ($203)|0);
     HEAP8[$204>>0] = $199;
     $205 = HEAP32[(23588)>>2]|0;
     $206 = (($205) + 1)|0;
     HEAP32[(23588)>>2] = $206;
     $207 = HEAP32[$7>>2]|0;
     $208 = (($207) + 1)|0;
     HEAP32[$7>>2] = $208;
    }
   }
  } while(0);
  $209 = HEAP32[5895]|0;
  $210 = HEAP32[(23584)>>2]|0;
  $211 = ($209|0)!=($210|0);
  if (!($211)) {
   $231 = +HEAPF32[744];
   $232 = $231 + 4.9999998736893758E-5;
   HEAPF32[744] = $232;
   STACKTOP = sp;return;
  }
  $212 = HEAP32[5895]|0;
  $213 = HEAP32[(23584)>>2]|0;
  $214 = (($212) - ($213))|0;
  HEAP32[$8>>2] = $214;
  HEAP32[$9>>2] = 0;
  while(1) {
   $215 = HEAP32[$9>>2]|0;
   $216 = HEAP32[$8>>2]|0;
   $217 = ($215|0)<($216|0);
   if (!($217)) {
    break;
   }
   $218 = HEAP32[(23596)>>2]|0;
   $219 = HEAP32[(23584)>>2]|0;
   $220 = $219<<1;
   $221 = (($218) + ($220<<2)|0);
   HEAPF32[$221>>2] = 0.0;
   $222 = HEAP32[(23596)>>2]|0;
   $223 = HEAP32[(23584)>>2]|0;
   $224 = $223<<1;
   $225 = (($224) + 1)|0;
   $226 = (($222) + ($225<<2)|0);
   HEAPF32[$226>>2] = 0.0;
   $227 = HEAP32[(23584)>>2]|0;
   $228 = (($227) + 1)|0;
   HEAP32[(23584)>>2] = $228;
   $229 = HEAP32[$9>>2]|0;
   $230 = (($229) + 1)|0;
   HEAP32[$9>>2] = $230;
  }
  $231 = +HEAPF32[744];
  $232 = $231 + 4.9999998736893758E-5;
  HEAPF32[744] = $232;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $231 = +HEAPF32[744];
  $232 = $231 + 4.9999998736893758E-5;
  HEAPF32[744] = $232;
  STACKTOP = sp;return;
 }
 }
}
function _rlPopMatrix() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $0 = sp;
 $1 = HEAP32[5947]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[5947]|0;
 $4 = (($3) - 1)|0;
 $5 = (22452 + ($4<<6)|0);
 dest=$0; src=$5; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = HEAP32[5501]|0;
 dest=$6; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $7 = HEAP32[5947]|0;
 $8 = (($7) + -1)|0;
 HEAP32[5947] = $8;
 STACKTOP = sp;return;
}
function _rlDisableTexture() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5895]|0;
 $1 = (($0|0) / 4)&-1;
 $2 = ($1|0)>=(1024);
 if (!($2)) {
  return;
 }
 _rlglDraw();
 return;
}
function _rlVertex3f($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 HEAPF32[$3>>2] = $0;
 HEAPF32[$4>>2] = $1;
 HEAPF32[$5>>2] = $2;
 $6 = HEAP32[5948]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = +HEAPF32[$3>>2];
  $9 = HEAP32[5609]|0;
  $10 = HEAP32[5949]|0;
  $11 = (($9) + (($10*12)|0)|0);
  HEAPF32[$11>>2] = $8;
  $12 = +HEAPF32[$4>>2];
  $13 = HEAP32[5609]|0;
  $14 = HEAP32[5949]|0;
  $15 = (($13) + (($14*12)|0)|0);
  $16 = ((($15)) + 4|0);
  HEAPF32[$16>>2] = $12;
  $17 = +HEAPF32[$5>>2];
  $18 = HEAP32[5609]|0;
  $19 = HEAP32[5949]|0;
  $20 = (($18) + (($19*12)|0)|0);
  $21 = ((($20)) + 8|0);
  HEAPF32[$21>>2] = $17;
  $22 = HEAP32[5949]|0;
  $23 = (($22) + 1)|0;
  HEAP32[5949] = $23;
  STACKTOP = sp;return;
 }
 $24 = HEAP32[5612]|0;
 switch ($24|0) {
 case 1:  {
  $25 = HEAP32[5871]|0;
  $26 = (($25|0) / 2)&-1;
  $27 = ($26|0)<(1024);
  if ($27) {
   $28 = +HEAPF32[$3>>2];
   $29 = HEAP32[(23496)>>2]|0;
   $30 = HEAP32[5871]|0;
   $31 = ($30*3)|0;
   $32 = (($29) + ($31<<2)|0);
   HEAPF32[$32>>2] = $28;
   $33 = +HEAPF32[$4>>2];
   $34 = HEAP32[(23496)>>2]|0;
   $35 = HEAP32[5871]|0;
   $36 = ($35*3)|0;
   $37 = (($36) + 1)|0;
   $38 = (($34) + ($37<<2)|0);
   HEAPF32[$38>>2] = $33;
   $39 = +HEAPF32[$5>>2];
   $40 = HEAP32[(23496)>>2]|0;
   $41 = HEAP32[5871]|0;
   $42 = ($41*3)|0;
   $43 = (($42) + 2)|0;
   $44 = (($40) + ($43<<2)|0);
   HEAPF32[$44>>2] = $39;
   $45 = HEAP32[5871]|0;
   $46 = (($45) + 1)|0;
   HEAP32[5871] = $46;
   STACKTOP = sp;return;
  } else {
   _TraceLog(2,9785,$vararg_buffer);
   STACKTOP = sp;return;
  }
  break;
 }
 case 4:  {
  $47 = HEAP32[5883]|0;
  $48 = (($47|0) / 3)&-1;
  $49 = ($48|0)<(2048);
  if ($49) {
   $50 = +HEAPF32[$3>>2];
   $51 = HEAP32[(23544)>>2]|0;
   $52 = HEAP32[5883]|0;
   $53 = ($52*3)|0;
   $54 = (($51) + ($53<<2)|0);
   HEAPF32[$54>>2] = $50;
   $55 = +HEAPF32[$4>>2];
   $56 = HEAP32[(23544)>>2]|0;
   $57 = HEAP32[5883]|0;
   $58 = ($57*3)|0;
   $59 = (($58) + 1)|0;
   $60 = (($56) + ($59<<2)|0);
   HEAPF32[$60>>2] = $55;
   $61 = +HEAPF32[$5>>2];
   $62 = HEAP32[(23544)>>2]|0;
   $63 = HEAP32[5883]|0;
   $64 = ($63*3)|0;
   $65 = (($64) + 2)|0;
   $66 = (($62) + ($65<<2)|0);
   HEAPF32[$66>>2] = $61;
   $67 = HEAP32[5883]|0;
   $68 = (($67) + 1)|0;
   HEAP32[5883] = $68;
   STACKTOP = sp;return;
  } else {
   _TraceLog(2,9810,$vararg_buffer1);
   STACKTOP = sp;return;
  }
  break;
 }
 case 7:  {
  $69 = HEAP32[5895]|0;
  $70 = (($69|0) / 4)&-1;
  $71 = ($70|0)<(1024);
  if ($71) {
   $72 = +HEAPF32[$3>>2];
   $73 = HEAP32[(23592)>>2]|0;
   $74 = HEAP32[5895]|0;
   $75 = ($74*3)|0;
   $76 = (($73) + ($75<<2)|0);
   HEAPF32[$76>>2] = $72;
   $77 = +HEAPF32[$4>>2];
   $78 = HEAP32[(23592)>>2]|0;
   $79 = HEAP32[5895]|0;
   $80 = ($79*3)|0;
   $81 = (($80) + 1)|0;
   $82 = (($78) + ($81<<2)|0);
   HEAPF32[$82>>2] = $77;
   $83 = +HEAPF32[$5>>2];
   $84 = HEAP32[(23592)>>2]|0;
   $85 = HEAP32[5895]|0;
   $86 = ($85*3)|0;
   $87 = (($86) + 2)|0;
   $88 = (($84) + ($87<<2)|0);
   HEAPF32[$88>>2] = $83;
   $89 = HEAP32[5895]|0;
   $90 = (($89) + 1)|0;
   HEAP32[5895] = $90;
   $91 = HEAP32[5610]|0;
   $92 = HEAP32[5611]|0;
   $93 = (($92) - 1)|0;
   $94 = (($91) + (($93*144)|0)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + 1)|0;
   HEAP32[$94>>2] = $96;
   STACKTOP = sp;return;
  } else {
   _TraceLog(2,9839,$vararg_buffer3);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _DrawCircleV($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0;
 var $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0;
 var $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAPF32[$3>>2] = $1;
 $7 = (_rlGetVersion()|0);
 $8 = ($7|0)==(1);
 if ($8) {
  _rlBegin(4);
  HEAP32[$4>>2] = 0;
  while(1) {
   $9 = HEAP32[$4>>2]|0;
   $10 = ($9|0)<(360);
   if (!($10)) {
    break;
   }
   $11 = HEAP8[$2>>0]|0;
   $12 = ((($2)) + 1|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ((($2)) + 2|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ((($2)) + 3|0);
   $17 = HEAP8[$16>>0]|0;
   _rlColor4ub($11,$13,$15,$17);
   $18 = +HEAPF32[$0>>2];
   $19 = ((($0)) + 4|0);
   $20 = +HEAPF32[$19>>2];
   _rlVertex2f($18,$20);
   $21 = +HEAPF32[$0>>2];
   $22 = HEAP32[$4>>2]|0;
   $23 = (+($22|0));
   $24 = 0.01745329238474369 * $23;
   $25 = (+Math_sin((+$24)));
   $26 = +HEAPF32[$3>>2];
   $27 = $25 * $26;
   $28 = $21 + $27;
   $29 = ((($0)) + 4|0);
   $30 = +HEAPF32[$29>>2];
   $31 = HEAP32[$4>>2]|0;
   $32 = (+($31|0));
   $33 = 0.01745329238474369 * $32;
   $34 = (+Math_cos((+$33)));
   $35 = +HEAPF32[$3>>2];
   $36 = $34 * $35;
   $37 = $30 + $36;
   _rlVertex2f($28,$37);
   $38 = +HEAPF32[$0>>2];
   $39 = HEAP32[$4>>2]|0;
   $40 = (($39) + 10)|0;
   $41 = (+($40|0));
   $42 = 0.01745329238474369 * $41;
   $43 = (+Math_sin((+$42)));
   $44 = +HEAPF32[$3>>2];
   $45 = $43 * $44;
   $46 = $38 + $45;
   $47 = ((($0)) + 4|0);
   $48 = +HEAPF32[$47>>2];
   $49 = HEAP32[$4>>2]|0;
   $50 = (($49) + 10)|0;
   $51 = (+($50|0));
   $52 = 0.01745329238474369 * $51;
   $53 = (+Math_cos((+$52)));
   $54 = +HEAPF32[$3>>2];
   $55 = $53 * $54;
   $56 = $48 + $55;
   _rlVertex2f($46,$56);
   $57 = HEAP32[$4>>2]|0;
   $58 = (($57) + 10)|0;
   HEAP32[$4>>2] = $58;
  }
  _rlEnd();
  STACKTOP = sp;return;
 }
 $59 = (_rlGetVersion()|0);
 $60 = ($59|0)==(2);
 if (!($60)) {
  $61 = (_rlGetVersion()|0);
  $62 = ($61|0)==(3);
  if (!($62)) {
   $63 = (_rlGetVersion()|0);
   $64 = ($63|0)==(4);
   if (!($64)) {
    STACKTOP = sp;return;
   }
  }
 }
 _GetTextureDefault($5);
 $65 = HEAP32[$5>>2]|0;
 _rlEnableTexture($65);
 _rlBegin(7);
 HEAP32[$6>>2] = 0;
 while(1) {
  $66 = HEAP32[$6>>2]|0;
  $67 = ($66|0)<(360);
  if (!($67)) {
   break;
  }
  $68 = HEAP8[$2>>0]|0;
  $69 = ((($2)) + 1|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = ((($2)) + 2|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = ((($2)) + 3|0);
  $74 = HEAP8[$73>>0]|0;
  _rlColor4ub($68,$70,$72,$74);
  $75 = +HEAPF32[$0>>2];
  $76 = ((($0)) + 4|0);
  $77 = +HEAPF32[$76>>2];
  _rlVertex2f($75,$77);
  $78 = +HEAPF32[$0>>2];
  $79 = HEAP32[$6>>2]|0;
  $80 = (+($79|0));
  $81 = 0.01745329238474369 * $80;
  $82 = (+Math_sin((+$81)));
  $83 = +HEAPF32[$3>>2];
  $84 = $82 * $83;
  $85 = $78 + $84;
  $86 = ((($0)) + 4|0);
  $87 = +HEAPF32[$86>>2];
  $88 = HEAP32[$6>>2]|0;
  $89 = (+($88|0));
  $90 = 0.01745329238474369 * $89;
  $91 = (+Math_cos((+$90)));
  $92 = +HEAPF32[$3>>2];
  $93 = $91 * $92;
  $94 = $87 + $93;
  _rlVertex2f($85,$94);
  $95 = +HEAPF32[$0>>2];
  $96 = HEAP32[$6>>2]|0;
  $97 = (($96) + 10)|0;
  $98 = (+($97|0));
  $99 = 0.01745329238474369 * $98;
  $100 = (+Math_sin((+$99)));
  $101 = +HEAPF32[$3>>2];
  $102 = $100 * $101;
  $103 = $95 + $102;
  $104 = ((($0)) + 4|0);
  $105 = +HEAPF32[$104>>2];
  $106 = HEAP32[$6>>2]|0;
  $107 = (($106) + 10)|0;
  $108 = (+($107|0));
  $109 = 0.01745329238474369 * $108;
  $110 = (+Math_cos((+$109)));
  $111 = +HEAPF32[$3>>2];
  $112 = $110 * $111;
  $113 = $105 + $112;
  _rlVertex2f($103,$113);
  $114 = +HEAPF32[$0>>2];
  $115 = HEAP32[$6>>2]|0;
  $116 = (($115) + 20)|0;
  $117 = (+($116|0));
  $118 = 0.01745329238474369 * $117;
  $119 = (+Math_sin((+$118)));
  $120 = +HEAPF32[$3>>2];
  $121 = $119 * $120;
  $122 = $114 + $121;
  $123 = ((($0)) + 4|0);
  $124 = +HEAPF32[$123>>2];
  $125 = HEAP32[$6>>2]|0;
  $126 = (($125) + 20)|0;
  $127 = (+($126|0));
  $128 = 0.01745329238474369 * $127;
  $129 = (+Math_cos((+$128)));
  $130 = +HEAPF32[$3>>2];
  $131 = $129 * $130;
  $132 = $124 + $131;
  _rlVertex2f($122,$132);
  $133 = HEAP32[$6>>2]|0;
  $134 = (($133) + 20)|0;
  HEAP32[$6>>2] = $134;
 }
 _rlEnd();
 _rlDisableTexture();
 STACKTOP = sp;return;
}
function _GetTextureDefault($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $2 = HEAP32[5542]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 1;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 1;
 $6 = ((($1)) + 16|0);
 HEAP32[$6>>2] = 7;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$1+16>>2]|0;
 STACKTOP = sp;return;
}
function _UpdateBuffersDefault() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5871]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[5535]|0;
  $3 = ($2|0)!=(0);
  if ($3) {
   $4 = HEAP32[5537]|0;
   $5 = HEAP32[(23512)>>2]|0;
   FUNCTION_TABLE_vi[$4 & 31]($5);
  }
  $6 = HEAP32[(23516)>>2]|0;
  _glBindBuffer(34962,($6|0));
  $7 = HEAP32[5871]|0;
  $8 = ($7*12)|0;
  $9 = HEAP32[(23496)>>2]|0;
  _glBufferSubData(34962,0,($8|0),($9|0));
  $10 = HEAP32[(23520)>>2]|0;
  _glBindBuffer(34962,($10|0));
  $11 = HEAP32[(23492)>>2]|0;
  $12 = $11<<2;
  $13 = HEAP32[(23504)>>2]|0;
  _glBufferSubData(34962,0,($12|0),($13|0));
 }
 $14 = HEAP32[5883]|0;
 $15 = ($14|0)>(0);
 if ($15) {
  $16 = HEAP32[5535]|0;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = HEAP32[5537]|0;
   $19 = HEAP32[(23560)>>2]|0;
   FUNCTION_TABLE_vi[$18 & 31]($19);
  }
  $20 = HEAP32[(23564)>>2]|0;
  _glBindBuffer(34962,($20|0));
  $21 = HEAP32[5883]|0;
  $22 = ($21*12)|0;
  $23 = HEAP32[(23544)>>2]|0;
  _glBufferSubData(34962,0,($22|0),($23|0));
  $24 = HEAP32[(23568)>>2]|0;
  _glBindBuffer(34962,($24|0));
  $25 = HEAP32[(23540)>>2]|0;
  $26 = $25<<2;
  $27 = HEAP32[(23552)>>2]|0;
  _glBufferSubData(34962,0,($26|0),($27|0));
 }
 $28 = HEAP32[5895]|0;
 $29 = ($28|0)>(0);
 if ($29) {
  $30 = HEAP32[5535]|0;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = HEAP32[5537]|0;
   $33 = HEAP32[(23608)>>2]|0;
   FUNCTION_TABLE_vi[$32 & 31]($33);
  }
  $34 = HEAP32[(23612)>>2]|0;
  _glBindBuffer(34962,($34|0));
  $35 = HEAP32[5895]|0;
  $36 = ($35*12)|0;
  $37 = HEAP32[(23592)>>2]|0;
  _glBufferSubData(34962,0,($36|0),($37|0));
  $38 = HEAP32[(23616)>>2]|0;
  _glBindBuffer(34962,($38|0));
  $39 = HEAP32[5895]|0;
  $40 = $39<<3;
  $41 = HEAP32[(23596)>>2]|0;
  _glBufferSubData(34962,0,($40|0),($41|0));
  $42 = HEAP32[(23620)>>2]|0;
  _glBindBuffer(34962,($42|0));
  $43 = HEAP32[5895]|0;
  $44 = $43<<2;
  $45 = HEAP32[(23600)>>2]|0;
  _glBufferSubData(34962,0,($44|0),($45|0));
 }
 $46 = HEAP32[5535]|0;
 $47 = ($46|0)!=(0);
 if (!($47)) {
  return;
 }
 $48 = HEAP32[5537]|0;
 FUNCTION_TABLE_vi[$48 & 31](0);
 return;
}
function _DrawBuffersDefault() {
 var $$ = 0, $$byval_copy5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $modelview$byval_copy = 0, $or$cond = 0;
 var $or$cond3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy5 = sp + 280|0;
 $modelview$byval_copy = sp + 152|0;
 $0 = sp + 216|0;
 $1 = sp + 88|0;
 $2 = sp + 84|0;
 $3 = sp + 80|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 dest=$0; src=22008; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$1; src=22072; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$2>>2] = 1;
 $9 = HEAP32[5950]|0;
 $10 = ($9|0)!=(0);
 $$ = $10 ? 2 : 1;
 HEAP32[$2>>2] = $$;
 HEAP32[$3>>2] = 0;
 while(1) {
  $11 = HEAP32[$3>>2]|0;
  $12 = HEAP32[$2>>2]|0;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = HEAP32[$2>>2]|0;
  $15 = ($14|0)==(2);
  if ($15) {
   $16 = HEAP32[$3>>2]|0;
   dest=$modelview$byval_copy; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   dest=$$byval_copy5; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   _SetStereoView($16,$modelview$byval_copy,$$byval_copy5);
  }
  $17 = HEAP32[5871]|0;
  $18 = ($17|0)>(0);
  $19 = HEAP32[5883]|0;
  $20 = ($19|0)>(0);
  $or$cond = $18 | $20;
  $21 = HEAP32[5895]|0;
  $22 = ($21|0)>(0);
  $or$cond3 = $or$cond | $22;
  if ($or$cond3) {
   $23 = HEAP32[5576]|0;
   _glUseProgram(($23|0));
   dest=$modelview$byval_copy; src=22072; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   dest=$$byval_copy5; src=22008; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   _MatrixMultiply($4,$modelview$byval_copy,$$byval_copy5);
   $24 = HEAP32[(22332)>>2]|0;
   dest=$$byval_copy5; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $25 = (_MatrixToFloat($$byval_copy5)|0);
   _glUniformMatrix4fv(($24|0),1,0,($25|0));
   $26 = HEAP32[(22352)>>2]|0;
   _glUniform4f(($26|0),1.0,1.0,1.0,1.0);
   $27 = HEAP32[(22364)>>2]|0;
   _glUniform1i(($27|0),0);
  }
  $28 = HEAP32[5871]|0;
  $29 = ($28|0)>(0);
  if ($29) {
   _glActiveTexture(33984);
   $30 = HEAP32[5542]|0;
   _glBindTexture(3553,($30|0));
   $31 = HEAP32[5535]|0;
   $32 = ($31|0)!=(0);
   if ($32) {
    $33 = HEAP32[5537]|0;
    $34 = HEAP32[(23512)>>2]|0;
    FUNCTION_TABLE_vi[$33 & 31]($34);
   } else {
    $35 = HEAP32[(23516)>>2]|0;
    _glBindBuffer(34962,($35|0));
    $36 = HEAP32[(22308)>>2]|0;
    _glVertexAttribPointer(($36|0),3,5126,0,0,(0|0));
    $37 = HEAP32[(22308)>>2]|0;
    _glEnableVertexAttribArray(($37|0));
    $38 = HEAP32[(23520)>>2]|0;
    _glBindBuffer(34962,($38|0));
    $39 = HEAP32[(22328)>>2]|0;
    _glVertexAttribPointer(($39|0),4,5121,1,0,(0|0));
    $40 = HEAP32[(22328)>>2]|0;
    _glEnableVertexAttribArray(($40|0));
   }
   $41 = HEAP32[5871]|0;
   _glDrawArrays(1,0,($41|0));
   $42 = HEAP32[5535]|0;
   $43 = ($42|0)!=(0);
   if (!($43)) {
    _glBindBuffer(34962,0);
   }
   _glBindTexture(3553,0);
  }
  $44 = HEAP32[5883]|0;
  $45 = ($44|0)>(0);
  if ($45) {
   _glActiveTexture(33984);
   $46 = HEAP32[5542]|0;
   _glBindTexture(3553,($46|0));
   $47 = HEAP32[5535]|0;
   $48 = ($47|0)!=(0);
   if ($48) {
    $49 = HEAP32[5537]|0;
    $50 = HEAP32[(23560)>>2]|0;
    FUNCTION_TABLE_vi[$49 & 31]($50);
   } else {
    $51 = HEAP32[(23564)>>2]|0;
    _glBindBuffer(34962,($51|0));
    $52 = HEAP32[(22308)>>2]|0;
    _glVertexAttribPointer(($52|0),3,5126,0,0,(0|0));
    $53 = HEAP32[(22308)>>2]|0;
    _glEnableVertexAttribArray(($53|0));
    $54 = HEAP32[(23568)>>2]|0;
    _glBindBuffer(34962,($54|0));
    $55 = HEAP32[(22328)>>2]|0;
    _glVertexAttribPointer(($55|0),4,5121,1,0,(0|0));
    $56 = HEAP32[(22328)>>2]|0;
    _glEnableVertexAttribArray(($56|0));
   }
   $57 = HEAP32[5883]|0;
   _glDrawArrays(4,0,($57|0));
   $58 = HEAP32[5535]|0;
   $59 = ($58|0)!=(0);
   if (!($59)) {
    _glBindBuffer(34962,0);
   }
   _glBindTexture(3553,0);
  }
  $60 = HEAP32[5895]|0;
  $61 = ($60|0)>(0);
  if ($61) {
   HEAP32[$5>>2] = 0;
   HEAP32[$6>>2] = 0;
   HEAP32[$7>>2] = 0;
   $62 = HEAP32[5535]|0;
   $63 = ($62|0)!=(0);
   if ($63) {
    $64 = HEAP32[5537]|0;
    $65 = HEAP32[(23608)>>2]|0;
    FUNCTION_TABLE_vi[$64 & 31]($65);
   } else {
    $66 = HEAP32[(23612)>>2]|0;
    _glBindBuffer(34962,($66|0));
    $67 = HEAP32[(22308)>>2]|0;
    _glVertexAttribPointer(($67|0),3,5126,0,0,(0|0));
    $68 = HEAP32[(22308)>>2]|0;
    _glEnableVertexAttribArray(($68|0));
    $69 = HEAP32[(23616)>>2]|0;
    _glBindBuffer(34962,($69|0));
    $70 = HEAP32[(22312)>>2]|0;
    _glVertexAttribPointer(($70|0),2,5126,0,0,(0|0));
    $71 = HEAP32[(22312)>>2]|0;
    _glEnableVertexAttribArray(($71|0));
    $72 = HEAP32[(23620)>>2]|0;
    _glBindBuffer(34962,($72|0));
    $73 = HEAP32[(22328)>>2]|0;
    _glVertexAttribPointer(($73|0),4,5121,1,0,(0|0));
    $74 = HEAP32[(22328)>>2]|0;
    _glEnableVertexAttribArray(($74|0));
    $75 = HEAP32[(23624)>>2]|0;
    _glBindBuffer(34963,($75|0));
   }
   HEAP32[$8>>2] = 0;
   while(1) {
    $76 = HEAP32[$8>>2]|0;
    $77 = HEAP32[5611]|0;
    $78 = ($76|0)<($77|0);
    if (!($78)) {
     break;
    }
    $79 = HEAP32[5610]|0;
    $80 = HEAP32[$8>>2]|0;
    $81 = (($79) + (($80*144)|0)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($82|0) / 4)&-1;
    HEAP32[$5>>2] = $83;
    $84 = HEAP32[$5>>2]|0;
    $85 = ($84*6)|0;
    HEAP32[$6>>2] = $85;
    _glActiveTexture(33984);
    $86 = HEAP32[5610]|0;
    $87 = HEAP32[$8>>2]|0;
    $88 = (($86) + (($87*144)|0)|0);
    $89 = ((($88)) + 8|0);
    $90 = HEAP32[$89>>2]|0;
    _glBindTexture(3553,($90|0));
    $91 = HEAP32[$6>>2]|0;
    $92 = HEAP32[$7>>2]|0;
    $93 = $92<<1;
    $94 = $93;
    _glDrawElements(4,($91|0),5123,($94|0));
    $95 = HEAP32[5610]|0;
    $96 = HEAP32[$8>>2]|0;
    $97 = (($95) + (($96*144)|0)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($98|0) / 4)&-1;
    $100 = ($99*6)|0;
    $101 = HEAP32[$7>>2]|0;
    $102 = (($101) + ($100))|0;
    HEAP32[$7>>2] = $102;
    $103 = HEAP32[$8>>2]|0;
    $104 = (($103) + 1)|0;
    HEAP32[$8>>2] = $104;
   }
   $105 = HEAP32[5535]|0;
   $106 = ($105|0)!=(0);
   if (!($106)) {
    _glBindBuffer(34962,0);
    _glBindBuffer(34963,0);
   }
   _glBindTexture(3553,0);
  }
  $107 = HEAP32[5535]|0;
  $108 = ($107|0)!=(0);
  if ($108) {
   $109 = HEAP32[5537]|0;
   FUNCTION_TABLE_vi[$109 & 31](0);
  }
  _glUseProgram(0);
  $110 = HEAP32[$3>>2]|0;
  $111 = (($110) + 1)|0;
  HEAP32[$3>>2] = $111;
 }
 HEAP32[5611] = 1;
 $112 = HEAP32[5542]|0;
 $113 = HEAP32[5610]|0;
 $114 = ((($113)) + 8|0);
 HEAP32[$114>>2] = $112;
 $115 = HEAP32[5610]|0;
 HEAP32[$115>>2] = 0;
 HEAP32[5871] = 0;
 HEAP32[(23492)>>2] = 0;
 HEAP32[5883] = 0;
 HEAP32[(23540)>>2] = 0;
 HEAP32[5895] = 0;
 HEAP32[(23584)>>2] = 0;
 HEAP32[(23588)>>2] = 0;
 HEAPF32[744] = -1.0;
 dest=22008; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=22072; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _SetStereoView($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $$byval_copy3 = sp + 264|0;
 $$byval_copy = sp + 192|0;
 $3 = sp + 256|0;
 $4 = sp + 128|0;
 $5 = sp + 64|0;
 $6 = sp;
 HEAP32[$3>>2] = $0;
 dest=$4; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$5; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[5869]|0;
 $9 = Math_imul($7, $8)|0;
 $10 = (($9|0) / 2)&-1;
 $11 = HEAP32[5869]|0;
 $12 = (($11|0) / 2)&-1;
 $13 = HEAP32[5870]|0;
 _rlViewport($10,0,$12,$13);
 $14 = HEAP32[$3>>2]|0;
 $15 = ((24140) + ($14<<6)|0);
 dest=$$byval_copy; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy3; src=$15; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($6,$$byval_copy,$$byval_copy3);
 dest=$5; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $16 = HEAP32[$3>>2]|0;
 $17 = ((24012) + ($16<<6)|0);
 dest=$4; src=$17; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy3; src=$5; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _SetMatrixModelview($$byval_copy3);
 dest=$$byval_copy3; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _SetMatrixProjection($$byval_copy3);
 STACKTOP = sp;return;
}
function _SetMatrixModelview($0) {
 $0 = $0|0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=22072; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _SetMatrixProjection($0) {
 $0 = $0|0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=22008; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _IsFileExtension($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 HEAP32[$4>>2] = 0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (_strrchr($6,46)|0);
 HEAP32[$5>>2] = $7;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = HEAP32[$5>>2]|0;
  $10 = HEAP32[$3>>2]|0;
  $11 = (_strcmp($9,$10)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   HEAP32[$4>>2] = 1;
  }
 }
 $13 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _IsKeyPressed($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (64755 + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = HEAP32[$1>>2]|0;
 $8 = (65395 + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($6|0)!=($10|0);
 if ($11) {
  $12 = HEAP32[$1>>2]|0;
  $13 = (64755 + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)==(1);
  if ($16) {
   HEAP32[$2>>2] = 1;
   $17 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($17|0);
  }
 }
 HEAP32[$2>>2] = 0;
 $17 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _LoadResource($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 96|0;
 $3 = sp + 92|0;
 $4 = sp + 88|0;
 $5 = sp + 104|0;
 $6 = sp + 56|0;
 $7 = sp + 48|0;
 $8 = sp + 44|0;
 $9 = sp + 40|0;
 $10 = sp + 36|0;
 $11 = sp + 32|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 HEAP32[$4>>2] = 0;
 $12 = HEAP32[$2>>2]|0;
 $13 = (_fopen($12,15164)|0);
 HEAP32[$7>>2] = $13;
 $14 = HEAP32[$7>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer>>2] = $16;
  _TraceLog(1,9902,$vararg_buffer);
  $143 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($143|0);
 }
 $17 = HEAP32[$7>>2]|0;
 (_fread($5,1,1,$17)|0);
 $18 = ((($5)) + 1|0);
 $19 = HEAP32[$7>>2]|0;
 (_fread($18,1,1,$19)|0);
 $20 = ((($5)) + 2|0);
 $21 = HEAP32[$7>>2]|0;
 (_fread($20,1,1,$21)|0);
 $22 = ((($5)) + 3|0);
 $23 = HEAP32[$7>>2]|0;
 (_fread($22,1,1,$23)|0);
 $24 = ((($5)) + 4|0);
 $25 = HEAP32[$7>>2]|0;
 (_fread($24,2,1,$25)|0);
 $26 = ((($5)) + 6|0);
 $27 = HEAP32[$7>>2]|0;
 (_fread($26,2,1,$27)|0);
 $28 = HEAP8[$5>>0]|0;
 $29 = $28 << 24 >> 24;
 $30 = ($29|0)!=(114);
 if ($30) {
  $31 = ((($5)) + 1|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  $34 = ($33|0)!=(82);
  if ($34) {
   $35 = ((($5)) + 2|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36 << 24 >> 24;
   $38 = ($37|0)!=(69);
   if ($38) {
    $39 = ((($5)) + 3|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $42 = ($41|0)!=(83);
    if ($42) {
     $43 = HEAP32[$2>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $43;
     _TraceLog(1,9953,$vararg_buffer1);
    } else {
     label = 8;
    }
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  HEAP32[$8>>2] = 0;
  while(1) {
   $44 = HEAP32[$8>>2]|0;
   $45 = ((($5)) + 6|0);
   $46 = HEAP16[$45>>1]|0;
   $47 = $46&65535;
   $48 = ($44|0)<($47|0);
   if (!($48)) {
    break;
   }
   $49 = HEAP32[$7>>2]|0;
   (_fread($6,32,1,$49)|0);
   $50 = HEAP32[$6>>2]|0;
   $51 = HEAP32[$3>>2]|0;
   $52 = ($50|0)==($51|0);
   L15: do {
    if ($52) {
     $53 = ((($6)) + 7|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54&255;
     $56 = ($55*24)|0;
     $57 = (_malloc($56)|0);
     HEAP32[$4>>2] = $57;
     HEAP32[$9>>2] = 0;
     while(1) {
      $58 = HEAP32[$9>>2]|0;
      $59 = ((($6)) + 7|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = $60&255;
      $62 = ($58|0)<($61|0);
      if (!($62)) {
       break L15;
      }
      $63 = ((($6)) + 4|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = $64&255;
      $66 = HEAP32[$4>>2]|0;
      $67 = HEAP32[$9>>2]|0;
      $68 = (($66) + (($67*24)|0)|0);
      HEAP32[$68>>2] = $65;
      $69 = ((($6)) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = HEAP32[$4>>2]|0;
      $72 = HEAP32[$9>>2]|0;
      $73 = (($71) + (($72*24)|0)|0);
      $74 = ((($73)) + 4|0);
      HEAP32[$74>>2] = $70;
      $75 = ((($6)) + 20|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = HEAP32[$4>>2]|0;
      $78 = HEAP32[$9>>2]|0;
      $79 = (($77) + (($78*24)|0)|0);
      $80 = ((($79)) + 8|0);
      HEAP32[$80>>2] = $76;
      $81 = ((($6)) + 24|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = HEAP32[$4>>2]|0;
      $84 = HEAP32[$9>>2]|0;
      $85 = (($83) + (($84*24)|0)|0);
      $86 = ((($85)) + 12|0);
      HEAP32[$86>>2] = $82;
      $87 = ((($6)) + 28|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = HEAP32[$4>>2]|0;
      $90 = HEAP32[$9>>2]|0;
      $91 = (($89) + (($90*24)|0)|0);
      $92 = ((($91)) + 16|0);
      HEAP32[$92>>2] = $88;
      $93 = ((($6)) + 8|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = (_malloc($94)|0);
      HEAP32[$10>>2] = $95;
      $96 = HEAP32[$10>>2]|0;
      $97 = ((($6)) + 8|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = HEAP32[$7>>2]|0;
      (_fread($96,$98,1,$99)|0);
      $100 = ((($6)) + 5|0);
      $101 = HEAP8[$100>>0]|0;
      $102 = $101&255;
      $103 = ($102|0)==(1);
      $104 = HEAP32[$10>>2]|0;
      if ($103) {
       $105 = ((($6)) + 8|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ((($6)) + 12|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (_DecompressData($104,$106,$108)|0);
       HEAP32[$11>>2] = $109;
       $110 = HEAP32[$11>>2]|0;
       $111 = HEAP32[$4>>2]|0;
       $112 = HEAP32[$9>>2]|0;
       $113 = (($111) + (($112*24)|0)|0);
       $114 = ((($113)) + 20|0);
       HEAP32[$114>>2] = $110;
       $115 = HEAP32[$10>>2]|0;
       _free($115);
      } else {
       $116 = HEAP32[$4>>2]|0;
       $117 = HEAP32[$9>>2]|0;
       $118 = (($116) + (($117*24)|0)|0);
       $119 = ((($118)) + 20|0);
       HEAP32[$119>>2] = $104;
      }
      $120 = HEAP32[$4>>2]|0;
      $121 = HEAP32[$9>>2]|0;
      $122 = (($120) + (($121*24)|0)|0);
      $123 = ((($122)) + 20|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)!=(0|0);
      if ($125) {
       $126 = HEAP32[$2>>2]|0;
       $127 = HEAP32[$6>>2]|0;
       HEAP32[$vararg_buffer4>>2] = $126;
       $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
       HEAP32[$vararg_ptr7>>2] = $127;
       _TraceLog(0,9999,$vararg_buffer4);
      }
      $128 = HEAP32[$7>>2]|0;
      (_fread($6,32,1,$128)|0);
      $129 = HEAP32[$9>>2]|0;
      $130 = (($129) + 1)|0;
      HEAP32[$9>>2] = $130;
     }
    } else {
     $131 = HEAP32[$7>>2]|0;
     $132 = ((($6)) + 8|0);
     $133 = HEAP32[$132>>2]|0;
     (_fseek($131,$133,1)|0);
    }
   } while(0);
   $134 = HEAP32[$8>>2]|0;
   $135 = (($134) + 1)|0;
   HEAP32[$8>>2] = $135;
  }
  $136 = HEAP32[$4>>2]|0;
  $137 = ((($136)) + 20|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138|0)==(0|0);
  if ($139) {
   $140 = HEAP32[$2>>2]|0;
   $141 = HEAP32[$3>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $140;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $141;
   _TraceLog(1,10045,$vararg_buffer8);
  }
 }
 $142 = HEAP32[$7>>2]|0;
 (_fclose($142)|0);
 $143 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($143|0);
}
function _UnloadResource($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 STACKTOP = sp;return;
}
function _DecompressData($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 64|0;
 $4 = sp + 60|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 48|0;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $8 = HEAP32[$5>>2]|0;
 $9 = (_malloc($8)|0);
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$7>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  _TraceLog(1,10095,$vararg_buffer);
  $27 = HEAP32[$7>>2]|0;
  STACKTOP = sp;return ($27|0);
 }
 $12 = HEAP32[$7>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 $14 = HEAP32[$3>>2]|0;
 $15 = HEAP32[$4>>2]|0;
 $16 = (_tinfl_decompress_mem_to_mem($12,$13,$14,$15,1)|0);
 HEAP32[$6>>2] = $16;
 $17 = HEAP32[$6>>2]|0;
 $18 = ($17|0)==(-1);
 if ($18) {
  _TraceLog(1,10134,$vararg_buffer1);
  $19 = HEAP32[$7>>2]|0;
  _free($19);
 }
 $20 = HEAP32[$5>>2]|0;
 $21 = HEAP32[$6>>2]|0;
 $22 = ($20|0)!=($21|0);
 if ($22) {
  _TraceLog(1,10160,$vararg_buffer3);
  $23 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $23;
  _TraceLog(1,10223,$vararg_buffer5);
  $24 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $24;
  _TraceLog(1,10258,$vararg_buffer7);
 }
 $25 = HEAP32[$4>>2]|0;
 $26 = HEAP32[$6>>2]|0;
 HEAP32[$vararg_buffer10>>2] = $25;
 $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
 HEAP32[$vararg_ptr13>>2] = $26;
 _TraceLog(0,10293,$vararg_buffer10);
 $27 = HEAP32[$7>>2]|0;
 STACKTOP = sp;return ($27|0);
}
function _tinfl_decompress_mem_to_mem($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 11024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(11024|0);
 $5 = sp + 11016|0;
 $6 = sp + 11012|0;
 $7 = sp + 11008|0;
 $8 = sp + 11004|0;
 $9 = sp + 11000|0;
 $10 = sp + 8|0;
 $11 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 HEAP32[$10>>2] = 0;
 $12 = HEAP32[$7>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 $15 = HEAP32[$9>>2]|0;
 $16 = $15 & -3;
 $17 = $16 | 4;
 $18 = (_tinfl_decompress($10,$12,$8,$13,$14,$6,$17)|0);
 HEAP32[$11>>2] = $18;
 $19 = HEAP32[$11>>2]|0;
 $20 = ($19|0)!=(0);
 $21 = HEAP32[$6>>2]|0;
 $22 = $20 ? -1 : $21;
 STACKTOP = sp;return ($22|0);
}
function _tinfl_decompress($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sink11 = 0, $$sink12 = 0, $$sink13 = 0, $$sink16 = 0, $$sink17 = 0, $$sink20 = 0, $$sink21 = 0, $$sink29 = 0, $$sink3 = 0, $$sink31 = 0, $$sink5 = 0, $$sink9 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0;
 var $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0;
 var $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0;
 var $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0;
 var $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0;
 var $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0;
 var $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0;
 var $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0;
 var $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0;
 var $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0;
 var $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0;
 var $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0;
 var $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0;
 var $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0;
 var $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0;
 var $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0;
 var $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0;
 var $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0;
 var $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0;
 var $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0;
 var $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0;
 var $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0;
 var $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0;
 var $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0;
 var $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0;
 var $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0;
 var $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0;
 var $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0;
 var $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0;
 var $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0;
 var $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0;
 var $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0;
 var $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0;
 var $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0;
 var $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0;
 var $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0;
 var $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0;
 var $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0;
 var $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0;
 var $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0;
 var $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0;
 var $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0;
 var $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0;
 var $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0;
 var $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0;
 var $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0;
 var $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0;
 var $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0;
 var $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0;
 var $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0;
 var $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0;
 var $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0;
 var $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0;
 var $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0;
 var $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0;
 var $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0;
 var $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0;
 var $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0;
 var $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond24 = 0, $or$cond28 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $7 = sp + 408|0;
 $8 = sp + 404|0;
 $9 = sp + 400|0;
 $10 = sp + 396|0;
 $11 = sp + 392|0;
 $12 = sp + 388|0;
 $13 = sp + 384|0;
 $14 = sp + 380|0;
 $15 = sp + 376|0;
 $16 = sp + 372|0;
 $17 = sp + 368|0;
 $18 = sp + 364|0;
 $19 = sp + 360|0;
 $20 = sp + 356|0;
 $21 = sp + 352|0;
 $22 = sp + 348|0;
 $23 = sp + 344|0;
 $24 = sp + 340|0;
 $25 = sp + 336|0;
 $26 = sp + 332|0;
 $27 = sp + 328|0;
 $28 = sp + 324|0;
 $29 = sp + 320|0;
 $30 = sp + 316|0;
 $31 = sp + 312|0;
 $32 = sp + 308|0;
 $33 = sp + 304|0;
 $34 = sp + 300|0;
 $35 = sp + 296|0;
 $36 = sp + 292|0;
 $37 = sp + 288|0;
 $38 = sp + 284|0;
 $39 = sp + 280|0;
 $40 = sp + 276|0;
 $41 = sp + 272|0;
 $42 = sp + 268|0;
 $43 = sp + 264|0;
 $44 = sp + 260|0;
 $45 = sp + 192|0;
 $46 = sp + 128|0;
 $47 = sp + 120|0;
 $48 = sp + 116|0;
 $49 = sp + 112|0;
 $50 = sp + 108|0;
 $51 = sp + 412|0;
 $52 = sp + 104|0;
 $53 = sp + 100|0;
 $54 = sp + 96|0;
 $55 = sp + 92|0;
 $56 = sp + 88|0;
 $57 = sp + 84|0;
 $58 = sp + 80|0;
 $59 = sp + 76|0;
 $60 = sp + 72|0;
 $61 = sp + 68|0;
 $62 = sp + 64|0;
 $63 = sp + 60|0;
 $64 = sp + 56|0;
 $65 = sp + 52|0;
 $66 = sp + 48|0;
 $67 = sp + 44|0;
 $68 = sp + 40|0;
 $69 = sp + 36|0;
 $70 = sp + 32|0;
 $71 = sp + 28|0;
 $72 = sp + 24|0;
 $73 = sp + 20|0;
 $74 = sp + 16|0;
 $75 = sp + 12|0;
 $76 = sp + 8|0;
 $77 = sp + 4|0;
 $78 = sp;
 HEAP32[$8>>2] = $0;
 HEAP32[$9>>2] = $1;
 HEAP32[$10>>2] = $2;
 HEAP32[$11>>2] = $3;
 HEAP32[$12>>2] = $4;
 HEAP32[$13>>2] = $5;
 HEAP32[$14>>2] = $6;
 HEAP32[$15>>2] = -1;
 $79 = HEAP32[$9>>2]|0;
 HEAP32[$21>>2] = $79;
 $80 = HEAP32[$9>>2]|0;
 $81 = HEAP32[$10>>2]|0;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($80) + ($82)|0);
 HEAP32[$22>>2] = $83;
 $84 = HEAP32[$12>>2]|0;
 HEAP32[$23>>2] = $84;
 $85 = HEAP32[$12>>2]|0;
 $86 = HEAP32[$13>>2]|0;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + ($87)|0);
 HEAP32[$24>>2] = $88;
 $89 = HEAP32[$14>>2]|0;
 $90 = $89 & 4;
 $91 = ($90|0)!=(0);
 if ($91) {
  $101 = -1;
 } else {
  $92 = HEAP32[$12>>2]|0;
  $93 = HEAP32[$11>>2]|0;
  $94 = $92;
  $95 = $93;
  $96 = (($94) - ($95))|0;
  $97 = HEAP32[$13>>2]|0;
  $98 = HEAP32[$97>>2]|0;
  $99 = (($96) + ($98))|0;
  $100 = (($99) - 1)|0;
  $101 = $100;
 }
 HEAP32[$25>>2] = $101;
 $102 = HEAP32[$25>>2]|0;
 $103 = (($102) + 1)|0;
 $104 = HEAP32[$25>>2]|0;
 $105 = $103 & $104;
 $106 = ($105|0)!=(0);
 if (!($106)) {
  $107 = HEAP32[$12>>2]|0;
  $108 = HEAP32[$11>>2]|0;
  $109 = ($107>>>0)<($108>>>0);
  if (!($109)) {
   $112 = HEAP32[$8>>2]|0;
   $113 = ((($112)) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   HEAP32[$16>>2] = $114;
   $115 = HEAP32[$8>>2]|0;
   $116 = ((($115)) + 56|0);
   $117 = HEAP32[$116>>2]|0;
   HEAP32[$20>>2] = $117;
   $118 = HEAP32[$8>>2]|0;
   $119 = ((($118)) + 32|0);
   $120 = HEAP32[$119>>2]|0;
   HEAP32[$17>>2] = $120;
   $121 = HEAP32[$8>>2]|0;
   $122 = ((($121)) + 36|0);
   $123 = HEAP32[$122>>2]|0;
   HEAP32[$18>>2] = $123;
   $124 = HEAP32[$8>>2]|0;
   $125 = ((($124)) + 40|0);
   $126 = HEAP32[$125>>2]|0;
   HEAP32[$19>>2] = $126;
   $127 = HEAP32[$8>>2]|0;
   $128 = ((($127)) + 60|0);
   $129 = HEAP32[$128>>2]|0;
   HEAP32[$26>>2] = $129;
   $130 = HEAP32[$8>>2]|0;
   $131 = HEAP32[$130>>2]|0;
   do {
    switch ($131|0) {
    case 0:  {
     $132 = HEAP32[$8>>2]|0;
     $133 = ((($132)) + 12|0);
     HEAP32[$133>>2] = 0;
     $134 = HEAP32[$8>>2]|0;
     $135 = ((($134)) + 8|0);
     HEAP32[$135>>2] = 0;
     HEAP32[$19>>2] = 0;
     HEAP32[$18>>2] = 0;
     HEAP32[$17>>2] = 0;
     HEAP32[$16>>2] = 0;
     HEAP32[$20>>2] = 0;
     $136 = HEAP32[$8>>2]|0;
     $137 = ((($136)) + 28|0);
     HEAP32[$137>>2] = 1;
     $138 = HEAP32[$8>>2]|0;
     $139 = ((($138)) + 16|0);
     HEAP32[$139>>2] = 1;
     $140 = HEAP32[$14>>2]|0;
     $141 = $140 & 1;
     $142 = ($141|0)!=(0);
     if ($142) {
      $143 = HEAP32[$21>>2]|0;
      $144 = HEAP32[$22>>2]|0;
      $145 = ($143>>>0)>=($144>>>0);
      if ($145) {
       label = 9;
      } else {
       $159 = HEAP32[$21>>2]|0;
       $160 = ((($159)) + 1|0);
       HEAP32[$21>>2] = $160;
       $161 = HEAP8[$159>>0]|0;
       $162 = $161&255;
       $163 = HEAP32[$8>>2]|0;
       $$sink3 = $162;$$sink5 = $163;
       label = 15;
      }
     } else {
      label = 31;
     }
     break;
    }
    case 1:  {
     $150 = HEAP32[$21>>2]|0;
     $151 = HEAP32[$22>>2]|0;
     $152 = ($150>>>0)<($151>>>0);
     if ($152) {
      $153 = HEAP32[$21>>2]|0;
      $154 = ((($153)) + 1|0);
      HEAP32[$21>>2] = $154;
      $155 = HEAP8[$153>>0]|0;
      $156 = $155&255;
      $157 = HEAP32[$8>>2]|0;
      $$sink3 = $156;$$sink5 = $157;
      label = 15;
     } else {
      label = 9;
     }
     break;
    }
    case 2:  {
     $172 = HEAP32[$21>>2]|0;
     $173 = HEAP32[$22>>2]|0;
     $174 = ($172>>>0)<($173>>>0);
     if ($174) {
      $175 = HEAP32[$21>>2]|0;
      $176 = ((($175)) + 1|0);
      HEAP32[$21>>2] = $176;
      $177 = HEAP8[$175>>0]|0;
      $178 = $177&255;
      $179 = HEAP32[$8>>2]|0;
      $$sink11 = $179;$$sink9 = $178;
      label = 22;
     } else {
      label = 16;
     }
     break;
    }
    case 36:  {
     label = 30;
     break;
    }
    case 3:  {
     $244 = HEAP32[$21>>2]|0;
     $245 = HEAP32[$22>>2]|0;
     $246 = ($244>>>0)<($245>>>0);
     if ($246) {
      $247 = HEAP32[$21>>2]|0;
      $248 = ((($247)) + 1|0);
      HEAP32[$21>>2] = $248;
      $249 = HEAP8[$247>>0]|0;
      $250 = $249&255;
      HEAP32[$27>>2] = $250;
      label = 39;
     } else {
      label = 33;
     }
     break;
    }
    case 5:  {
     $293 = HEAP32[$21>>2]|0;
     $294 = HEAP32[$22>>2]|0;
     $295 = ($293>>>0)<($294>>>0);
     if ($295) {
      $296 = HEAP32[$21>>2]|0;
      $297 = ((($296)) + 1|0);
      HEAP32[$21>>2] = $297;
      $298 = HEAP8[$296>>0]|0;
      $299 = $298&255;
      HEAP32[$28>>2] = $299;
      label = 49;
     } else {
      label = 43;
     }
     break;
    }
    case 6:  {
     $336 = HEAP32[$21>>2]|0;
     $337 = HEAP32[$22>>2]|0;
     $338 = ($336>>>0)<($337>>>0);
     if ($338) {
      $339 = HEAP32[$21>>2]|0;
      $340 = ((($339)) + 1|0);
      HEAP32[$21>>2] = $340;
      $341 = HEAP8[$339>>0]|0;
      $342 = $341&255;
      HEAP32[$29>>2] = $342;
      label = 61;
     } else {
      label = 55;
     }
     break;
    }
    case 7:  {
     $374 = HEAP32[$21>>2]|0;
     $375 = HEAP32[$22>>2]|0;
     $376 = ($374>>>0)<($375>>>0);
     if ($376) {
      $377 = HEAP32[$21>>2]|0;
      $378 = ((($377)) + 1|0);
      HEAP32[$21>>2] = $378;
      $379 = HEAP8[$377>>0]|0;
      $380 = HEAP32[$8>>2]|0;
      $381 = ((($380)) + 10528|0);
      $382 = HEAP32[$18>>2]|0;
      $383 = (($381) + ($382)|0);
      $$sink12 = $379;$$sink13 = $383;
      label = 69;
     } else {
      label = 64;
     }
     break;
    }
    case 39:  {
     label = 73;
     break;
    }
    case 51:  {
     $437 = HEAP32[$21>>2]|0;
     $438 = HEAP32[$22>>2]|0;
     $439 = ($437>>>0)<($438>>>0);
     if ($439) {
      $440 = HEAP32[$21>>2]|0;
      $441 = ((($440)) + 1|0);
      HEAP32[$21>>2] = $441;
      $442 = HEAP8[$440>>0]|0;
      $443 = $442&255;
      HEAP32[$30>>2] = $443;
      label = 83;
     } else {
      label = 77;
     }
     break;
    }
    case 52:  {
     label = 85;
     break;
    }
    case 9:  {
     label = 89;
     break;
    }
    case 38:  {
     label = 91;
     break;
    }
    case 40:  {
     label = 94;
     break;
    }
    case 10:  {
     label = 100;
     break;
    }
    case 11:  {
     $597 = HEAP32[$21>>2]|0;
     $598 = HEAP32[$22>>2]|0;
     $599 = ($597>>>0)<($598>>>0);
     if ($599) {
      $600 = HEAP32[$21>>2]|0;
      $601 = ((($600)) + 1|0);
      HEAP32[$21>>2] = $601;
      $602 = HEAP8[$600>>0]|0;
      $603 = $602&255;
      HEAP32[$34>>2] = $603;
      label = 121;
     } else {
      label = 115;
     }
     break;
    }
    case 14:  {
     $674 = HEAP32[$21>>2]|0;
     $675 = HEAP32[$22>>2]|0;
     $676 = ($674>>>0)<($675>>>0);
     if ($676) {
      $677 = HEAP32[$21>>2]|0;
      $678 = ((($677)) + 1|0);
      HEAP32[$21>>2] = $678;
      $679 = HEAP8[$677>>0]|0;
      $680 = $679&255;
      HEAP32[$36>>2] = $680;
      label = 133;
     } else {
      label = 127;
     }
     break;
    }
    case 35:  {
     label = 144;
     break;
    }
    case 16:  {
     $961 = HEAP32[$21>>2]|0;
     $962 = HEAP32[$22>>2]|0;
     $963 = ($961>>>0)<($962>>>0);
     if ($963) {
      $964 = HEAP32[$21>>2]|0;
      $965 = ((($964)) + 1|0);
      HEAP32[$21>>2] = $965;
      $966 = HEAP8[$964>>0]|0;
      $967 = $966&255;
      HEAP32[$55>>2] = $967;
      label = 185;
     } else {
      label = 179;
     }
     break;
    }
    case 17:  {
     label = 194;
     break;
    }
    case 18:  {
     $1066 = HEAP32[$21>>2]|0;
     $1067 = HEAP32[$22>>2]|0;
     $1068 = ($1066>>>0)<($1067>>>0);
     if ($1068) {
      $1069 = HEAP32[$21>>2]|0;
      $1070 = ((($1069)) + 1|0);
      HEAP32[$21>>2] = $1070;
      $1071 = HEAP8[$1069>>0]|0;
      $1072 = $1071&255;
      HEAP32[$56>>2] = $1072;
      label = 203;
     } else {
      label = 197;
     }
     break;
    }
    case 21:  {
     label = 208;
     break;
    }
    case 23:  {
     $1227 = HEAP32[$21>>2]|0;
     $1228 = HEAP32[$22>>2]|0;
     $1229 = ($1227>>>0)<($1228>>>0);
     if ($1229) {
      $1230 = HEAP32[$21>>2]|0;
      $1231 = ((($1230)) + 1|0);
      HEAP32[$21>>2] = $1231;
      $1232 = HEAP8[$1230>>0]|0;
      $1233 = $1232&255;
      HEAP32[$60>>2] = $1233;
      label = 231;
     } else {
      label = 225;
     }
     break;
    }
    case 24:  {
     label = 238;
     break;
    }
    case 25:  {
     $1458 = HEAP32[$21>>2]|0;
     $1459 = HEAP32[$22>>2]|0;
     $1460 = ($1458>>>0)<($1459>>>0);
     if ($1460) {
      $1461 = HEAP32[$21>>2]|0;
      $1462 = ((($1461)) + 1|0);
      HEAP32[$21>>2] = $1462;
      $1463 = HEAP8[$1461>>0]|0;
      $1464 = $1463&255;
      HEAP32[$64>>2] = $1464;
      label = 267;
     } else {
      label = 261;
     }
     break;
    }
    case 26:  {
     $1551 = HEAP32[$21>>2]|0;
     $1552 = HEAP32[$22>>2]|0;
     $1553 = ($1551>>>0)<($1552>>>0);
     if ($1553) {
      $1554 = HEAP32[$21>>2]|0;
      $1555 = ((($1554)) + 1|0);
      HEAP32[$21>>2] = $1555;
      $1556 = HEAP8[$1554>>0]|0;
      $1557 = $1556&255;
      HEAP32[$67>>2] = $1557;
      label = 286;
     } else {
      label = 280;
     }
     break;
    }
    case 27:  {
     $1646 = HEAP32[$21>>2]|0;
     $1647 = HEAP32[$22>>2]|0;
     $1648 = ($1646>>>0)<($1647>>>0);
     if ($1648) {
      $1649 = HEAP32[$21>>2]|0;
      $1650 = ((($1649)) + 1|0);
      HEAP32[$21>>2] = $1650;
      $1651 = HEAP8[$1649>>0]|0;
      $1652 = $1651&255;
      HEAP32[$69>>2] = $1652;
      label = 301;
     } else {
      label = 295;
     }
     break;
    }
    case 37:  {
     label = 305;
     break;
    }
    case 53:  {
     label = 308;
     break;
    }
    case 32:  {
     $1783 = HEAP32[$21>>2]|0;
     $1784 = HEAP32[$22>>2]|0;
     $1785 = ($1783>>>0)<($1784>>>0);
     if ($1785) {
      $1786 = HEAP32[$21>>2]|0;
      $1787 = ((($1786)) + 1|0);
      HEAP32[$21>>2] = $1787;
      $1788 = HEAP8[$1786>>0]|0;
      $1789 = $1788&255;
      HEAP32[$70>>2] = $1789;
      label = 326;
     } else {
      label = 320;
     }
     break;
    }
    case 41:  {
     $1826 = HEAP32[$21>>2]|0;
     $1827 = HEAP32[$22>>2]|0;
     $1828 = ($1826>>>0)<($1827>>>0);
     if ($1828) {
      $1829 = HEAP32[$21>>2]|0;
      $1830 = ((($1829)) + 1|0);
      HEAP32[$21>>2] = $1830;
      $1831 = HEAP8[$1829>>0]|0;
      $1832 = $1831&255;
      HEAP32[$72>>2] = $1832;
      label = 338;
     } else {
      label = 332;
     }
     break;
    }
    case 42:  {
     $1859 = HEAP32[$21>>2]|0;
     $1860 = HEAP32[$22>>2]|0;
     $1861 = ($1859>>>0)<($1860>>>0);
     if ($1861) {
      $1862 = HEAP32[$21>>2]|0;
      $1863 = ((($1862)) + 1|0);
      HEAP32[$21>>2] = $1863;
      $1864 = HEAP8[$1862>>0]|0;
      $1865 = $1864&255;
      HEAP32[$71>>2] = $1865;
      label = 347;
     } else {
      label = 341;
     }
     break;
    }
    case 34:  {
     label = 348;
     break;
    }
    default: {
     label = 350;
    }
    }
   } while(0);
   do {
    if ((label|0) == 9) {
     $146 = HEAP32[$14>>2]|0;
     $147 = $146 & 2;
     $148 = ($147|0)!=(0);
     if ($148) {
      HEAP32[$15>>2] = 1;
      $149 = HEAP32[$8>>2]|0;
      $$sink29 = 1;$$sink31 = $149;
      label = 349;
      break;
     } else {
      $158 = HEAP32[$8>>2]|0;
      $$sink3 = 0;$$sink5 = $158;
      label = 15;
      break;
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $164 = ((($$sink5)) + 8|0);
    HEAP32[$164>>2] = $$sink3;
    $165 = HEAP32[$21>>2]|0;
    $166 = HEAP32[$22>>2]|0;
    $167 = ($165>>>0)>=($166>>>0);
    if ($167) {
     label = 16;
    } else {
     $181 = HEAP32[$21>>2]|0;
     $182 = ((($181)) + 1|0);
     HEAP32[$21>>2] = $182;
     $183 = HEAP8[$181>>0]|0;
     $184 = $183&255;
     $185 = HEAP32[$8>>2]|0;
     $$sink11 = $185;$$sink9 = $184;
     label = 22;
    }
   }
   do {
    if ((label|0) == 16) {
     $168 = HEAP32[$14>>2]|0;
     $169 = $168 & 2;
     $170 = ($169|0)!=(0);
     if ($170) {
      HEAP32[$15>>2] = 1;
      $171 = HEAP32[$8>>2]|0;
      $$sink29 = 2;$$sink31 = $171;
      label = 349;
      break;
     } else {
      $180 = HEAP32[$8>>2]|0;
      $$sink11 = $180;$$sink9 = 0;
      label = 22;
      break;
     }
    }
   } while(0);
   if ((label|0) == 22) {
    $186 = ((($$sink11)) + 12|0);
    HEAP32[$186>>2] = $$sink9;
    $187 = HEAP32[$8>>2]|0;
    $188 = ((($187)) + 8|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = $189<<8;
    $191 = HEAP32[$8>>2]|0;
    $192 = ((($191)) + 12|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (($190) + ($193))|0;
    $195 = (($194>>>0) % 31)&-1;
    $196 = ($195|0)!=(0);
    if ($196) {
     $208 = 1;
    } else {
     $197 = HEAP32[$8>>2]|0;
     $198 = ((($197)) + 12|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = $199 & 32;
     $201 = ($200|0)!=(0);
     if ($201) {
      $208 = 1;
     } else {
      $202 = HEAP32[$8>>2]|0;
      $203 = ((($202)) + 8|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = $204 & 15;
      $206 = ($205|0)!=(8);
      $208 = $206;
     }
    }
    $207 = $208&1;
    HEAP32[$18>>2] = $207;
    $209 = HEAP32[$14>>2]|0;
    $210 = $209 & 4;
    $211 = ($210|0)!=(0);
    if (!($211)) {
     $212 = HEAP32[$8>>2]|0;
     $213 = ((($212)) + 8|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = $214 >>> 4;
     $216 = (8 + ($215))|0;
     $217 = 1 << $216;
     $218 = ($217>>>0)>(32768);
     if ($218) {
      $229 = 1;
     } else {
      $219 = HEAP32[$25>>2]|0;
      $220 = (($219) + 1)|0;
      $221 = HEAP32[$8>>2]|0;
      $222 = ((($221)) + 8|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = $223 >>> 4;
      $225 = (8 + ($224))|0;
      $226 = 1 << $225;
      $227 = ($220>>>0)<($226>>>0);
      $229 = $227;
     }
     $228 = $229&1;
     $230 = HEAP32[$18>>2]|0;
     $231 = $230 | $228;
     HEAP32[$18>>2] = $231;
    }
    $232 = HEAP32[$18>>2]|0;
    $233 = ($232|0)!=(0);
    if ($233) {
     label = 30;
    } else {
     label = 31;
    }
   }
   if ((label|0) == 30) {
    HEAP32[$15>>2] = -1;
    $234 = HEAP32[$8>>2]|0;
    $$sink29 = 36;$$sink31 = $234;
    label = 349;
   }
   L74: while(1) {
    switch (label|0) {
     case 31: {
      label = 0;
      $235 = HEAP32[$16>>2]|0;
      $236 = ($235>>>0)<(3);
      if ($236) {
       label = 32;
      } else {
       label = 40;
      }
      break;
     }
     case 33: {
      label = 0;
      $240 = HEAP32[$14>>2]|0;
      $241 = $240 & 2;
      $242 = ($241|0)!=(0);
      if ($242) {
       HEAP32[$15>>2] = 1;
       $243 = HEAP32[$8>>2]|0;
       $$sink29 = 3;$$sink31 = $243;
       label = 349;
       continue L74;
      } else {
       HEAP32[$27>>2] = 0;
       label = 39;
       continue L74;
      }
      break;
     }
     case 39: {
      label = 0;
      $255 = HEAP32[$27>>2]|0;
      $256 = HEAP32[$16>>2]|0;
      $257 = $255 << $256;
      $258 = HEAP32[$20>>2]|0;
      $259 = $258 | $257;
      HEAP32[$20>>2] = $259;
      $260 = HEAP32[$16>>2]|0;
      $261 = (($260) + 8)|0;
      HEAP32[$16>>2] = $261;
      $262 = HEAP32[$16>>2]|0;
      $263 = ($262>>>0)<(3);
      if ($263) {
       label = 32;
      } else {
       label = 40;
      }
      break;
     }
     case 43: {
      label = 0;
      $289 = HEAP32[$14>>2]|0;
      $290 = $289 & 2;
      $291 = ($290|0)!=(0);
      if ($291) {
       HEAP32[$15>>2] = 1;
       $292 = HEAP32[$8>>2]|0;
       $$sink29 = 5;$$sink31 = $292;
       label = 349;
       continue L74;
      } else {
       HEAP32[$28>>2] = 0;
       label = 49;
       continue L74;
      }
      break;
     }
     case 49: {
      label = 0;
      $304 = HEAP32[$28>>2]|0;
      $305 = HEAP32[$16>>2]|0;
      $306 = $304 << $305;
      $307 = HEAP32[$20>>2]|0;
      $308 = $307 | $306;
      HEAP32[$20>>2] = $308;
      $309 = HEAP32[$16>>2]|0;
      $310 = (($309) + 8)|0;
      HEAP32[$16>>2] = $310;
      $311 = HEAP32[$16>>2]|0;
      $312 = HEAP32[$16>>2]|0;
      $313 = $312 & 7;
      $314 = ($311>>>0)<($313>>>0);
      if ($314) {
       label = 42;
      } else {
       label = 50;
      }
      break;
     }
     case 55: {
      label = 0;
      $332 = HEAP32[$14>>2]|0;
      $333 = $332 & 2;
      $334 = ($333|0)!=(0);
      if ($334) {
       HEAP32[$15>>2] = 1;
       $335 = HEAP32[$8>>2]|0;
       $$sink29 = 6;$$sink31 = $335;
       label = 349;
       continue L74;
      } else {
       HEAP32[$29>>2] = 0;
       label = 61;
       continue L74;
      }
      break;
     }
     case 61: {
      label = 0;
      $347 = HEAP32[$29>>2]|0;
      $348 = HEAP32[$16>>2]|0;
      $349 = $347 << $348;
      $350 = HEAP32[$20>>2]|0;
      $351 = $350 | $349;
      HEAP32[$20>>2] = $351;
      $352 = HEAP32[$16>>2]|0;
      $353 = (($352) + 8)|0;
      HEAP32[$16>>2] = $353;
      $354 = HEAP32[$16>>2]|0;
      $355 = ($354>>>0)<(8);
      if ($355) {
       label = 54;
      } else {
       label = 62;
      }
      break;
     }
     case 64: {
      label = 0;
      $370 = HEAP32[$14>>2]|0;
      $371 = $370 & 2;
      $372 = ($371|0)!=(0);
      if ($372) {
       HEAP32[$15>>2] = 1;
       $373 = HEAP32[$8>>2]|0;
       $$sink29 = 7;$$sink31 = $373;
       label = 349;
       continue L74;
      } else {
       $384 = HEAP32[$8>>2]|0;
       $385 = ((($384)) + 10528|0);
       $386 = HEAP32[$18>>2]|0;
       $387 = (($385) + ($386)|0);
       $$sink12 = 0;$$sink13 = $387;
       label = 69;
       continue L74;
      }
      break;
     }
     case 69: {
      label = 0;
      HEAP8[$$sink13>>0] = $$sink12;
      label = 71;
      break;
     }
     case 73: {
      label = 0;
      HEAP32[$15>>2] = -1;
      $422 = HEAP32[$8>>2]|0;
      $$sink29 = 39;$$sink31 = $422;
      label = 349;
      continue L74;
      break;
     }
     case 77: {
      label = 0;
      $433 = HEAP32[$14>>2]|0;
      $434 = $433 & 2;
      $435 = ($434|0)!=(0);
      if ($435) {
       HEAP32[$15>>2] = 1;
       $436 = HEAP32[$8>>2]|0;
       $$sink29 = 51;$$sink31 = $436;
       label = 349;
       continue L74;
      } else {
       HEAP32[$30>>2] = 0;
       label = 83;
       continue L74;
      }
      break;
     }
     case 83: {
      label = 0;
      $448 = HEAP32[$30>>2]|0;
      $449 = HEAP32[$16>>2]|0;
      $450 = $448 << $449;
      $451 = HEAP32[$20>>2]|0;
      $452 = $451 | $450;
      HEAP32[$20>>2] = $452;
      $453 = HEAP32[$16>>2]|0;
      $454 = (($453) + 8)|0;
      HEAP32[$16>>2] = $454;
      $455 = HEAP32[$16>>2]|0;
      $456 = ($455>>>0)<(8);
      if ($456) {
       label = 76;
      } else {
       label = 84;
      }
      break;
     }
     case 85: {
      label = 0;
      $463 = HEAP32[$23>>2]|0;
      $464 = HEAP32[$24>>2]|0;
      $465 = ($463>>>0)>=($464>>>0);
      if ($465) {
       HEAP32[$15>>2] = 2;
       $466 = HEAP32[$8>>2]|0;
       $$sink29 = 52;$$sink31 = $466;
       label = 349;
       continue L74;
      } else {
       $467 = HEAP32[$17>>2]|0;
       $468 = $467&255;
       $469 = HEAP32[$23>>2]|0;
       $470 = ((($469)) + 1|0);
       HEAP32[$23>>2] = $470;
       HEAP8[$469>>0] = $468;
       $471 = HEAP32[$18>>2]|0;
       $472 = (($471) + -1)|0;
       HEAP32[$18>>2] = $472;
       label = 74;
       break;
      }
      break;
     }
     case 89: {
      label = 0;
      $475 = HEAP32[$23>>2]|0;
      $476 = HEAP32[$24>>2]|0;
      $477 = ($475>>>0)>=($476>>>0);
      if (!($477)) {
       label = 91;
       continue L74;
      }
      HEAP32[$15>>2] = 2;
      $478 = HEAP32[$8>>2]|0;
      $$sink29 = 9;$$sink31 = $478;
      label = 349;
      continue L74;
      break;
     }
     case 91: {
      label = 0;
      $479 = HEAP32[$21>>2]|0;
      $480 = HEAP32[$22>>2]|0;
      $481 = ($479>>>0)>=($480>>>0);
      if ($481) {
       $482 = HEAP32[$14>>2]|0;
       $483 = $482 & 2;
       $484 = ($483|0)!=(0);
       if (!($484)) {
        label = 94;
        continue L74;
       }
       HEAP32[$15>>2] = 1;
       $485 = HEAP32[$8>>2]|0;
       $$sink29 = 38;$$sink31 = $485;
       label = 349;
       continue L74;
      }
      $487 = HEAP32[$24>>2]|0;
      $488 = HEAP32[$23>>2]|0;
      $489 = $487;
      $490 = $488;
      $491 = (($489) - ($490))|0;
      $492 = HEAP32[$22>>2]|0;
      $493 = HEAP32[$21>>2]|0;
      $494 = $492;
      $495 = $493;
      $496 = (($494) - ($495))|0;
      $497 = ($491>>>0)<($496>>>0);
      $498 = HEAP32[$22>>2]|0;
      $499 = HEAP32[$21>>2]|0;
      $500 = HEAP32[$24>>2]|0;
      $501 = HEAP32[$23>>2]|0;
      $$sink17 = $497 ? $500 : $498;
      $$sink16 = $497 ? $501 : $499;
      $502 = $$sink17;
      $503 = $$sink16;
      $504 = (($502) - ($503))|0;
      $505 = HEAP32[$18>>2]|0;
      $506 = ($504>>>0)<($505>>>0);
      if ($506) {
       $507 = HEAP32[$24>>2]|0;
       $508 = HEAP32[$23>>2]|0;
       $509 = $507;
       $510 = $508;
       $511 = (($509) - ($510))|0;
       $512 = HEAP32[$22>>2]|0;
       $513 = HEAP32[$21>>2]|0;
       $514 = $512;
       $515 = $513;
       $516 = (($514) - ($515))|0;
       $517 = ($511>>>0)<($516>>>0);
       $518 = HEAP32[$22>>2]|0;
       $519 = HEAP32[$21>>2]|0;
       $520 = HEAP32[$24>>2]|0;
       $521 = HEAP32[$23>>2]|0;
       $$sink21 = $517 ? $520 : $518;
       $$sink20 = $517 ? $521 : $519;
       $522 = $$sink21;
       $523 = $$sink20;
       $524 = (($522) - ($523))|0;
       $526 = $524;
      } else {
       $525 = HEAP32[$18>>2]|0;
       $526 = $525;
      }
      HEAP32[$31>>2] = $526;
      $527 = HEAP32[$23>>2]|0;
      $528 = HEAP32[$21>>2]|0;
      $529 = HEAP32[$31>>2]|0;
      _memcpy(($527|0),($528|0),($529|0))|0;
      $530 = HEAP32[$31>>2]|0;
      $531 = HEAP32[$21>>2]|0;
      $532 = (($531) + ($530)|0);
      HEAP32[$21>>2] = $532;
      $533 = HEAP32[$31>>2]|0;
      $534 = HEAP32[$23>>2]|0;
      $535 = (($534) + ($533)|0);
      HEAP32[$23>>2] = $535;
      $536 = HEAP32[$31>>2]|0;
      $537 = HEAP32[$18>>2]|0;
      $538 = (($537) - ($536))|0;
      HEAP32[$18>>2] = $538;
      label = 88;
      break;
     }
     case 94: {
      label = 0;
      HEAP32[$15>>2] = -1;
      $486 = HEAP32[$8>>2]|0;
      $$sink29 = 40;$$sink31 = $486;
      label = 349;
      continue L74;
      break;
     }
     case 100: {
      label = 0;
      HEAP32[$15>>2] = -1;
      $543 = HEAP32[$8>>2]|0;
      $$sink29 = 10;$$sink31 = $543;
      label = 349;
      continue L74;
      break;
     }
     case 115: {
      label = 0;
      $593 = HEAP32[$14>>2]|0;
      $594 = $593 & 2;
      $595 = ($594|0)!=(0);
      if ($595) {
       HEAP32[$15>>2] = 1;
       $596 = HEAP32[$8>>2]|0;
       $$sink29 = 11;$$sink31 = $596;
       label = 349;
       continue L74;
      } else {
       HEAP32[$34>>2] = 0;
       label = 121;
       continue L74;
      }
      break;
     }
     case 121: {
      label = 0;
      $608 = HEAP32[$34>>2]|0;
      $609 = HEAP32[$16>>2]|0;
      $610 = $608 << $609;
      $611 = HEAP32[$20>>2]|0;
      $612 = $611 | $610;
      HEAP32[$20>>2] = $612;
      $613 = HEAP32[$16>>2]|0;
      $614 = (($613) + 8)|0;
      HEAP32[$16>>2] = $614;
      $615 = HEAP32[$16>>2]|0;
      $616 = HEAP32[$18>>2]|0;
      $617 = (10350 + ($616)|0);
      $618 = HEAP8[$617>>0]|0;
      $619 = $618 << 24 >> 24;
      $620 = ($615>>>0)<($619>>>0);
      if ($620) {
       label = 114;
      } else {
       label = 122;
      }
      break;
     }
     case 127: {
      label = 0;
      $670 = HEAP32[$14>>2]|0;
      $671 = $670 & 2;
      $672 = ($671|0)!=(0);
      if ($672) {
       HEAP32[$15>>2] = 1;
       $673 = HEAP32[$8>>2]|0;
       $$sink29 = 14;$$sink31 = $673;
       label = 349;
       continue L74;
      } else {
       HEAP32[$36>>2] = 0;
       label = 133;
       continue L74;
      }
      break;
     }
     case 133: {
      label = 0;
      $685 = HEAP32[$36>>2]|0;
      $686 = HEAP32[$16>>2]|0;
      $687 = $685 << $686;
      $688 = HEAP32[$20>>2]|0;
      $689 = $688 | $687;
      HEAP32[$20>>2] = $689;
      $690 = HEAP32[$16>>2]|0;
      $691 = (($690) + 8)|0;
      HEAP32[$16>>2] = $691;
      $692 = HEAP32[$16>>2]|0;
      $693 = ($692>>>0)<(3);
      if ($693) {
       label = 126;
      } else {
       label = 134;
      }
      break;
     }
     case 144: {
      label = 0;
      HEAP32[$15>>2] = -1;
      $771 = HEAP32[$8>>2]|0;
      $$sink29 = 35;$$sink31 = $771;
      label = 349;
      continue L74;
      break;
     }
     case 179: {
      label = 0;
      $957 = HEAP32[$14>>2]|0;
      $958 = $957 & 2;
      $959 = ($958|0)!=(0);
      if ($959) {
       HEAP32[$15>>2] = 1;
       $960 = HEAP32[$8>>2]|0;
       $$sink29 = 16;$$sink31 = $960;
       label = 349;
       continue L74;
      } else {
       HEAP32[$55>>2] = 0;
       label = 185;
       continue L74;
      }
      break;
     }
     case 185: {
      label = 0;
      $972 = HEAP32[$55>>2]|0;
      $973 = HEAP32[$16>>2]|0;
      $974 = $972 << $973;
      $975 = HEAP32[$20>>2]|0;
      $976 = $975 | $974;
      HEAP32[$20>>2] = $976;
      $977 = HEAP32[$16>>2]|0;
      $978 = (($977) + 8)|0;
      HEAP32[$16>>2] = $978;
      $979 = HEAP32[$16>>2]|0;
      $980 = ($979>>>0)<(15);
      if ($980) {
       label = 170;
      } else {
       label = 187;
      }
      break;
     }
     case 194: {
      label = 0;
      HEAP32[$15>>2] = -1;
      $1050 = HEAP32[$8>>2]|0;
      $$sink29 = 17;$$sink31 = $1050;
      label = 349;
      continue L74;
      break;
     }
     case 197: {
      label = 0;
      $1062 = HEAP32[$14>>2]|0;
      $1063 = $1062 & 2;
      $1064 = ($1063|0)!=(0);
      if ($1064) {
       HEAP32[$15>>2] = 1;
       $1065 = HEAP32[$8>>2]|0;
       $$sink29 = 18;$$sink31 = $1065;
       label = 349;
       continue L74;
      } else {
       HEAP32[$56>>2] = 0;
       label = 203;
       continue L74;
      }
      break;
     }
     case 203: {
      label = 0;
      $1077 = HEAP32[$56>>2]|0;
      $1078 = HEAP32[$16>>2]|0;
      $1079 = $1077 << $1078;
      $1080 = HEAP32[$20>>2]|0;
      $1081 = $1080 | $1079;
      HEAP32[$20>>2] = $1081;
      $1082 = HEAP32[$16>>2]|0;
      $1083 = (($1082) + 8)|0;
      HEAP32[$16>>2] = $1083;
      $1084 = HEAP32[$16>>2]|0;
      $1085 = HEAP32[$19>>2]|0;
      $1086 = ($1084>>>0)<($1085>>>0);
      if ($1086) {
       label = 196;
      } else {
       label = 204;
      }
      break;
     }
     case 208: {
      label = 0;
      HEAP32[$15>>2] = -1;
      $1134 = HEAP32[$8>>2]|0;
      $$sink29 = 21;$$sink31 = $1134;
      label = 349;
      continue L74;
      break;
     }
     case 225: {
      label = 0;
      $1223 = HEAP32[$14>>2]|0;
      $1224 = $1223 & 2;
      $1225 = ($1224|0)!=(0);
      if ($1225) {
       HEAP32[$15>>2] = 1;
       $1226 = HEAP32[$8>>2]|0;
       $$sink29 = 23;$$sink31 = $1226;
       label = 349;
       continue L74;
      } else {
       HEAP32[$60>>2] = 0;
       label = 231;
       continue L74;
      }
      break;
     }
     case 231: {
      label = 0;
      $1238 = HEAP32[$60>>2]|0;
      $1239 = HEAP32[$16>>2]|0;
      $1240 = $1238 << $1239;
      $1241 = HEAP32[$20>>2]|0;
      $1242 = $1241 | $1240;
      HEAP32[$20>>2] = $1242;
      $1243 = HEAP32[$16>>2]|0;
      $1244 = (($1243) + 8)|0;
      HEAP32[$16>>2] = $1244;
      $1245 = HEAP32[$16>>2]|0;
      $1246 = ($1245>>>0)<(15);
      if ($1246) {
       label = 216;
      } else {
       label = 233;
      }
      break;
     }
     case 238: {
      label = 0;
      $1304 = HEAP32[$23>>2]|0;
      $1305 = HEAP32[$24>>2]|0;
      $1306 = ($1304>>>0)>=($1305>>>0);
      if ($1306) {
       HEAP32[$15>>2] = 2;
       $1307 = HEAP32[$8>>2]|0;
       $$sink29 = 24;$$sink31 = $1307;
       label = 349;
       continue L74;
      } else {
       $1308 = HEAP32[$18>>2]|0;
       $1309 = $1308&255;
       $1310 = HEAP32[$23>>2]|0;
       $1311 = ((($1310)) + 1|0);
       HEAP32[$23>>2] = $1311;
       HEAP8[$1310>>0] = $1309;
       label = 212;
       break;
      }
      break;
     }
     case 261: {
      label = 0;
      $1454 = HEAP32[$14>>2]|0;
      $1455 = $1454 & 2;
      $1456 = ($1455|0)!=(0);
      if ($1456) {
       HEAP32[$15>>2] = 1;
       $1457 = HEAP32[$8>>2]|0;
       $$sink29 = 25;$$sink31 = $1457;
       label = 349;
       continue L74;
      } else {
       HEAP32[$64>>2] = 0;
       label = 267;
       continue L74;
      }
      break;
     }
     case 267: {
      label = 0;
      $1469 = HEAP32[$64>>2]|0;
      $1470 = HEAP32[$16>>2]|0;
      $1471 = $1469 << $1470;
      $1472 = HEAP32[$20>>2]|0;
      $1473 = $1472 | $1471;
      HEAP32[$20>>2] = $1473;
      $1474 = HEAP32[$16>>2]|0;
      $1475 = (($1474) + 8)|0;
      HEAP32[$16>>2] = $1475;
      $1476 = HEAP32[$16>>2]|0;
      $1477 = HEAP32[$19>>2]|0;
      $1478 = ($1476>>>0)<($1477>>>0);
      if ($1478) {
       label = 260;
      } else {
       label = 268;
      }
      break;
     }
     case 280: {
      label = 0;
      $1547 = HEAP32[$14>>2]|0;
      $1548 = $1547 & 2;
      $1549 = ($1548|0)!=(0);
      if ($1549) {
       HEAP32[$15>>2] = 1;
       $1550 = HEAP32[$8>>2]|0;
       $$sink29 = 26;$$sink31 = $1550;
       label = 349;
       continue L74;
      } else {
       HEAP32[$67>>2] = 0;
       label = 286;
       continue L74;
      }
      break;
     }
     case 286: {
      label = 0;
      $1562 = HEAP32[$67>>2]|0;
      $1563 = HEAP32[$16>>2]|0;
      $1564 = $1562 << $1563;
      $1565 = HEAP32[$20>>2]|0;
      $1566 = $1565 | $1564;
      HEAP32[$20>>2] = $1566;
      $1567 = HEAP32[$16>>2]|0;
      $1568 = (($1567) + 8)|0;
      HEAP32[$16>>2] = $1568;
      $1569 = HEAP32[$16>>2]|0;
      $1570 = ($1569>>>0)<(15);
      if ($1570) {
       label = 271;
      } else {
       label = 288;
      }
      break;
     }
     case 295: {
      label = 0;
      $1642 = HEAP32[$14>>2]|0;
      $1643 = $1642 & 2;
      $1644 = ($1643|0)!=(0);
      if ($1644) {
       HEAP32[$15>>2] = 1;
       $1645 = HEAP32[$8>>2]|0;
       $$sink29 = 27;$$sink31 = $1645;
       label = 349;
       continue L74;
      } else {
       HEAP32[$69>>2] = 0;
       label = 301;
       continue L74;
      }
      break;
     }
     case 301: {
      label = 0;
      $1657 = HEAP32[$69>>2]|0;
      $1658 = HEAP32[$16>>2]|0;
      $1659 = $1657 << $1658;
      $1660 = HEAP32[$20>>2]|0;
      $1661 = $1660 | $1659;
      HEAP32[$20>>2] = $1661;
      $1662 = HEAP32[$16>>2]|0;
      $1663 = (($1662) + 8)|0;
      HEAP32[$16>>2] = $1663;
      $1664 = HEAP32[$16>>2]|0;
      $1665 = HEAP32[$19>>2]|0;
      $1666 = ($1664>>>0)<($1665>>>0);
      if ($1666) {
       label = 294;
      } else {
       label = 302;
      }
      break;
     }
     case 305: {
      label = 0;
      HEAP32[$15>>2] = -1;
      $1692 = HEAP32[$8>>2]|0;
      $$sink29 = 37;$$sink31 = $1692;
      label = 349;
      continue L74;
      break;
     }
     case 308: {
      label = 0;
      $1713 = HEAP32[$23>>2]|0;
      $1714 = HEAP32[$24>>2]|0;
      $1715 = ($1713>>>0)>=($1714>>>0);
      if ($1715) {
       HEAP32[$15>>2] = 2;
       $1716 = HEAP32[$8>>2]|0;
       $$sink29 = 53;$$sink31 = $1716;
       label = 349;
       continue L74;
      } else {
       $1717 = HEAP32[$11>>2]|0;
       $1718 = HEAP32[$26>>2]|0;
       $1719 = (($1718) + 1)|0;
       HEAP32[$26>>2] = $1719;
       $1720 = HEAP32[$17>>2]|0;
       $1721 = (($1718) - ($1720))|0;
       $1722 = HEAP32[$25>>2]|0;
       $1723 = $1721 & $1722;
       $1724 = (($1717) + ($1723)|0);
       $1725 = HEAP8[$1724>>0]|0;
       $1726 = HEAP32[$23>>2]|0;
       $1727 = ((($1726)) + 1|0);
       HEAP32[$23>>2] = $1727;
       HEAP8[$1726>>0] = $1725;
       label = 307;
       break;
      }
      break;
     }
     case 320: {
      label = 0;
      $1779 = HEAP32[$14>>2]|0;
      $1780 = $1779 & 2;
      $1781 = ($1780|0)!=(0);
      if ($1781) {
       HEAP32[$15>>2] = 1;
       $1782 = HEAP32[$8>>2]|0;
       $$sink29 = 32;$$sink31 = $1782;
       label = 349;
       continue L74;
      } else {
       HEAP32[$70>>2] = 0;
       label = 326;
       continue L74;
      }
      break;
     }
     case 326: {
      label = 0;
      $1794 = HEAP32[$70>>2]|0;
      $1795 = HEAP32[$16>>2]|0;
      $1796 = $1794 << $1795;
      $1797 = HEAP32[$20>>2]|0;
      $1798 = $1797 | $1796;
      HEAP32[$20>>2] = $1798;
      $1799 = HEAP32[$16>>2]|0;
      $1800 = (($1799) + 8)|0;
      HEAP32[$16>>2] = $1800;
      $1801 = HEAP32[$16>>2]|0;
      $1802 = HEAP32[$16>>2]|0;
      $1803 = $1802 & 7;
      $1804 = ($1801>>>0)<($1803>>>0);
      if ($1804) {
       label = 319;
      } else {
       label = 327;
      }
      break;
     }
     case 332: {
      label = 0;
      $1822 = HEAP32[$14>>2]|0;
      $1823 = $1822 & 2;
      $1824 = ($1823|0)!=(0);
      if ($1824) {
       HEAP32[$15>>2] = 1;
       $1825 = HEAP32[$8>>2]|0;
       $$sink29 = 41;$$sink31 = $1825;
       label = 349;
       continue L74;
      } else {
       HEAP32[$72>>2] = 0;
       label = 338;
       continue L74;
      }
      break;
     }
     case 338: {
      label = 0;
      $1837 = HEAP32[$72>>2]|0;
      $1838 = HEAP32[$16>>2]|0;
      $1839 = $1837 << $1838;
      $1840 = HEAP32[$20>>2]|0;
      $1841 = $1840 | $1839;
      HEAP32[$20>>2] = $1841;
      $1842 = HEAP32[$16>>2]|0;
      $1843 = (($1842) + 8)|0;
      HEAP32[$16>>2] = $1843;
      $1844 = HEAP32[$16>>2]|0;
      $1845 = ($1844>>>0)<(8);
      if ($1845) {
       label = 331;
      } else {
       label = 339;
      }
      break;
     }
     case 341: {
      label = 0;
      $1855 = HEAP32[$14>>2]|0;
      $1856 = $1855 & 2;
      $1857 = ($1856|0)!=(0);
      if ($1857) {
       HEAP32[$15>>2] = 1;
       $1858 = HEAP32[$8>>2]|0;
       $$sink29 = 42;$$sink31 = $1858;
       label = 349;
       continue L74;
      } else {
       HEAP32[$71>>2] = 0;
       label = 347;
       continue L74;
      }
      break;
     }
     case 347: {
      label = 0;
      $1870 = HEAP32[$8>>2]|0;
      $1871 = ((($1870)) + 16|0);
      $1872 = HEAP32[$1871>>2]|0;
      $1873 = $1872 << 8;
      $1874 = HEAP32[$71>>2]|0;
      $1875 = $1873 | $1874;
      $1876 = HEAP32[$8>>2]|0;
      $1877 = ((($1876)) + 16|0);
      HEAP32[$1877>>2] = $1875;
      $1878 = HEAP32[$18>>2]|0;
      $1879 = (($1878) + 1)|0;
      HEAP32[$18>>2] = $1879;
      label = 328;
      break;
     }
     case 348: {
      label = 0;
      HEAP32[$15>>2] = 0;
      $1880 = HEAP32[$8>>2]|0;
      $$sink29 = 34;$$sink31 = $1880;
      label = 349;
      continue L74;
      break;
     }
     case 349: {
      label = 0;
      HEAP32[$$sink31>>2] = $$sink29;
      label = 350;
      continue L74;
      break;
     }
     case 350: {
      label = 0;
      $1881 = HEAP32[$16>>2]|0;
      $1882 = HEAP32[$8>>2]|0;
      $1883 = ((($1882)) + 4|0);
      HEAP32[$1883>>2] = $1881;
      $1884 = HEAP32[$20>>2]|0;
      $1885 = HEAP32[$8>>2]|0;
      $1886 = ((($1885)) + 56|0);
      HEAP32[$1886>>2] = $1884;
      $1887 = HEAP32[$17>>2]|0;
      $1888 = HEAP32[$8>>2]|0;
      $1889 = ((($1888)) + 32|0);
      HEAP32[$1889>>2] = $1887;
      $1890 = HEAP32[$18>>2]|0;
      $1891 = HEAP32[$8>>2]|0;
      $1892 = ((($1891)) + 36|0);
      HEAP32[$1892>>2] = $1890;
      $1893 = HEAP32[$19>>2]|0;
      $1894 = HEAP32[$8>>2]|0;
      $1895 = ((($1894)) + 40|0);
      HEAP32[$1895>>2] = $1893;
      $1896 = HEAP32[$26>>2]|0;
      $1897 = HEAP32[$8>>2]|0;
      $1898 = ((($1897)) + 60|0);
      HEAP32[$1898>>2] = $1896;
      $1899 = HEAP32[$21>>2]|0;
      $1900 = HEAP32[$9>>2]|0;
      $1901 = $1899;
      $1902 = $1900;
      $1903 = (($1901) - ($1902))|0;
      $1904 = HEAP32[$10>>2]|0;
      HEAP32[$1904>>2] = $1903;
      $1905 = HEAP32[$23>>2]|0;
      $1906 = HEAP32[$12>>2]|0;
      $1907 = $1905;
      $1908 = $1906;
      $1909 = (($1907) - ($1908))|0;
      $1910 = HEAP32[$13>>2]|0;
      HEAP32[$1910>>2] = $1909;
      $1911 = HEAP32[$14>>2]|0;
      $1912 = $1911 & 9;
      $1913 = ($1912|0)!=(0);
      $1914 = HEAP32[$15>>2]|0;
      $1915 = ($1914|0)>=(0);
      $or$cond28 = $1913 & $1915;
      if ($or$cond28) {
       label = 351;
       break L74;
      } else {
       break L74;
      }
      break;
     }
    }
    if ((label|0) == 32) {
     label = 0;
     $237 = HEAP32[$21>>2]|0;
     $238 = HEAP32[$22>>2]|0;
     $239 = ($237>>>0)>=($238>>>0);
     if ($239) {
      label = 33;
      continue;
     }
     $251 = HEAP32[$21>>2]|0;
     $252 = ((($251)) + 1|0);
     HEAP32[$21>>2] = $252;
     $253 = HEAP8[$251>>0]|0;
     $254 = $253&255;
     HEAP32[$27>>2] = $254;
     label = 39;
     continue;
    }
    L193: do {
     if ((label|0) == 40) {
      label = 0;
      $264 = HEAP32[$20>>2]|0;
      $265 = $264 & 7;
      $266 = HEAP32[$8>>2]|0;
      $267 = ((($266)) + 20|0);
      HEAP32[$267>>2] = $265;
      $268 = HEAP32[$20>>2]|0;
      $269 = $268 >>> 3;
      HEAP32[$20>>2] = $269;
      $270 = HEAP32[$16>>2]|0;
      $271 = (($270) - 3)|0;
      HEAP32[$16>>2] = $271;
      $272 = HEAP32[$8>>2]|0;
      $273 = ((($272)) + 20|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = $274 >>> 1;
      $276 = HEAP32[$8>>2]|0;
      $277 = ((($276)) + 24|0);
      HEAP32[$277>>2] = $275;
      $278 = HEAP32[$8>>2]|0;
      $279 = ((($278)) + 24|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = ($280|0)==(0);
      if ($281) {
       $282 = HEAP32[$16>>2]|0;
       $283 = HEAP32[$16>>2]|0;
       $284 = $283 & 7;
       $285 = ($282>>>0)<($284>>>0);
       if ($285) {
        label = 42;
        break;
       } else {
        label = 50;
        break;
       }
      }
      $539 = HEAP32[$8>>2]|0;
      $540 = ((($539)) + 24|0);
      $541 = HEAP32[$540>>2]|0;
      $542 = ($541|0)==(3);
      if ($542) {
       label = 100;
       continue L74;
      }
      $544 = HEAP32[$8>>2]|0;
      $545 = ((($544)) + 24|0);
      $546 = HEAP32[$545>>2]|0;
      $547 = ($546|0)==(1);
      if (!($547)) {
       HEAP32[$18>>2] = 0;
       label = 112;
       break;
      }
      $548 = HEAP32[$8>>2]|0;
      $549 = ((($548)) + 64|0);
      HEAP32[$32>>2] = $549;
      $550 = HEAP32[$8>>2]|0;
      $551 = ((($550)) + 44|0);
      HEAP32[$551>>2] = 288;
      $552 = HEAP32[$8>>2]|0;
      $553 = ((($552)) + 44|0);
      $554 = ((($553)) + 4|0);
      HEAP32[$554>>2] = 32;
      $555 = HEAP32[$8>>2]|0;
      $556 = ((($555)) + 64|0);
      $557 = ((($556)) + 3488|0);
      ;HEAP32[$557>>2]=84215045|0;HEAP32[$557+4>>2]=84215045|0;HEAP32[$557+8>>2]=84215045|0;HEAP32[$557+12>>2]=84215045|0;HEAP32[$557+16>>2]=84215045|0;HEAP32[$557+20>>2]=84215045|0;HEAP32[$557+24>>2]=84215045|0;HEAP32[$557+28>>2]=84215045|0;
      HEAP32[$33>>2] = 0;
      while(1) {
       $558 = HEAP32[$33>>2]|0;
       $559 = ($558>>>0)<=(143);
       if (!($559)) {
        break;
       }
       $560 = HEAP32[$32>>2]|0;
       $561 = ((($560)) + 1|0);
       HEAP32[$32>>2] = $561;
       HEAP8[$560>>0] = 8;
       $562 = HEAP32[$33>>2]|0;
       $563 = (($562) + 1)|0;
       HEAP32[$33>>2] = $563;
      }
      while(1) {
       $564 = HEAP32[$33>>2]|0;
       $565 = ($564>>>0)<=(255);
       if (!($565)) {
        break;
       }
       $566 = HEAP32[$32>>2]|0;
       $567 = ((($566)) + 1|0);
       HEAP32[$32>>2] = $567;
       HEAP8[$566>>0] = 9;
       $568 = HEAP32[$33>>2]|0;
       $569 = (($568) + 1)|0;
       HEAP32[$33>>2] = $569;
      }
      while(1) {
       $570 = HEAP32[$33>>2]|0;
       $571 = ($570>>>0)<=(279);
       if (!($571)) {
        break;
       }
       $572 = HEAP32[$32>>2]|0;
       $573 = ((($572)) + 1|0);
       HEAP32[$32>>2] = $573;
       HEAP8[$572>>0] = 7;
       $574 = HEAP32[$33>>2]|0;
       $575 = (($574) + 1)|0;
       HEAP32[$33>>2] = $575;
      }
      while(1) {
       $576 = HEAP32[$33>>2]|0;
       $577 = ($576>>>0)<=(287);
       if (!($577)) {
        label = 136;
        break L193;
       }
       $578 = HEAP32[$32>>2]|0;
       $579 = ((($578)) + 1|0);
       HEAP32[$32>>2] = $579;
       HEAP8[$578>>0] = 8;
       $580 = HEAP32[$33>>2]|0;
       $581 = (($580) + 1)|0;
       HEAP32[$33>>2] = $581;
      }
     }
    } while(0);
    if ((label|0) == 42) {
     label = 0;
     $286 = HEAP32[$21>>2]|0;
     $287 = HEAP32[$22>>2]|0;
     $288 = ($286>>>0)>=($287>>>0);
     if ($288) {
      label = 43;
      continue;
     }
     $300 = HEAP32[$21>>2]|0;
     $301 = ((($300)) + 1|0);
     HEAP32[$21>>2] = $301;
     $302 = HEAP8[$300>>0]|0;
     $303 = $302&255;
     HEAP32[$28>>2] = $303;
     label = 49;
     continue;
    }
    else if ((label|0) == 50) {
     label = 0;
     $315 = HEAP32[$16>>2]|0;
     $316 = $315 & 7;
     $317 = HEAP32[$20>>2]|0;
     $318 = $317 >>> $316;
     HEAP32[$20>>2] = $318;
     $319 = HEAP32[$16>>2]|0;
     $320 = $319 & 7;
     $321 = HEAP32[$16>>2]|0;
     $322 = (($321) - ($320))|0;
     HEAP32[$16>>2] = $322;
     HEAP32[$18>>2] = 0;
     label = 51;
    }
    L218: while(1) {
     switch (label|0) {
      case 51: {
       label = 0;
       $323 = HEAP32[$18>>2]|0;
       $324 = ($323>>>0)<(4);
       if (!($324)) {
        $397 = HEAP32[$8>>2]|0;
        $398 = ((($397)) + 10528|0);
        $399 = HEAP8[$398>>0]|0;
        $400 = $399&255;
        $401 = HEAP32[$8>>2]|0;
        $402 = ((($401)) + 10528|0);
        $403 = ((($402)) + 1|0);
        $404 = HEAP8[$403>>0]|0;
        $405 = $404&255;
        $406 = $405 << 8;
        $407 = $400 | $406;
        HEAP32[$18>>2] = $407;
        $408 = HEAP32[$8>>2]|0;
        $409 = ((($408)) + 10528|0);
        $410 = ((($409)) + 2|0);
        $411 = HEAP8[$410>>0]|0;
        $412 = $411&255;
        $413 = HEAP32[$8>>2]|0;
        $414 = ((($413)) + 10528|0);
        $415 = ((($414)) + 3|0);
        $416 = HEAP8[$415>>0]|0;
        $417 = $416&255;
        $418 = $417 << 8;
        $419 = $412 | $418;
        $420 = 65535 ^ $419;
        $421 = ($407|0)!=($420|0);
        if ($421) {
         label = 73;
         continue L74;
        } else {
         label = 74;
         continue L218;
        }
       }
       $325 = HEAP32[$16>>2]|0;
       $326 = ($325|0)!=(0);
       if ($326) {
        $327 = HEAP32[$16>>2]|0;
        $328 = ($327>>>0)<(8);
        if ($328) {
         label = 54;
         continue L218;
        } else {
         label = 62;
         continue L218;
        }
       }
       $367 = HEAP32[$21>>2]|0;
       $368 = HEAP32[$22>>2]|0;
       $369 = ($367>>>0)>=($368>>>0);
       if ($369) {
        label = 64;
        continue L74;
       }
       $388 = HEAP32[$21>>2]|0;
       $389 = ((($388)) + 1|0);
       HEAP32[$21>>2] = $389;
       $390 = HEAP8[$388>>0]|0;
       $391 = HEAP32[$8>>2]|0;
       $392 = ((($391)) + 10528|0);
       $393 = HEAP32[$18>>2]|0;
       $394 = (($392) + ($393)|0);
       HEAP8[$394>>0] = $390;
       label = 71;
       continue L218;
       break;
      }
      case 54: {
       label = 0;
       $329 = HEAP32[$21>>2]|0;
       $330 = HEAP32[$22>>2]|0;
       $331 = ($329>>>0)>=($330>>>0);
       if ($331) {
        label = 55;
        continue L74;
       } else {
        label = 60;
        break L218;
       }
       break;
      }
      case 62: {
       label = 0;
       $356 = HEAP32[$20>>2]|0;
       $357 = $356 & 255;
       $358 = $357&255;
       $359 = HEAP32[$8>>2]|0;
       $360 = ((($359)) + 10528|0);
       $361 = HEAP32[$18>>2]|0;
       $362 = (($360) + ($361)|0);
       HEAP8[$362>>0] = $358;
       $363 = HEAP32[$20>>2]|0;
       $364 = $363 >>> 8;
       HEAP32[$20>>2] = $364;
       $365 = HEAP32[$16>>2]|0;
       $366 = (($365) - 8)|0;
       HEAP32[$16>>2] = $366;
       label = 71;
       continue L218;
       break;
      }
      case 71: {
       label = 0;
       $395 = HEAP32[$18>>2]|0;
       $396 = (($395) + 1)|0;
       HEAP32[$18>>2] = $396;
       label = 51;
       continue L218;
       break;
      }
      case 74: {
       label = 0;
       $423 = HEAP32[$18>>2]|0;
       $424 = ($423|0)!=(0);
       $425 = HEAP32[$16>>2]|0;
       $426 = ($425|0)!=(0);
       $427 = $424 ? $426 : 0;
       if (!($427)) {
        label = 88;
        continue L218;
       }
       $428 = HEAP32[$16>>2]|0;
       $429 = ($428>>>0)<(8);
       if ($429) {
        label = 76;
        continue L218;
       } else {
        label = 84;
        continue L218;
       }
       break;
      }
      case 76: {
       label = 0;
       $430 = HEAP32[$21>>2]|0;
       $431 = HEAP32[$22>>2]|0;
       $432 = ($430>>>0)>=($431>>>0);
       if ($432) {
        label = 77;
        continue L74;
       } else {
        label = 82;
        break L218;
       }
       break;
      }
      case 84: {
       label = 0;
       $457 = HEAP32[$20>>2]|0;
       $458 = $457 & 255;
       HEAP32[$17>>2] = $458;
       $459 = HEAP32[$20>>2]|0;
       $460 = $459 >>> 8;
       HEAP32[$20>>2] = $460;
       $461 = HEAP32[$16>>2]|0;
       $462 = (($461) - 8)|0;
       HEAP32[$16>>2] = $462;
       label = 85;
       continue L74;
       break;
      }
      case 88: {
       label = 0;
       $473 = HEAP32[$18>>2]|0;
       $474 = ($473|0)!=(0);
       if ($474) {
        label = 89;
        continue L74;
       } else {
        label = 316;
       }
       break;
      }
      case 112: {
       label = 0;
       $582 = HEAP32[$18>>2]|0;
       $583 = ($582>>>0)<(3);
       if ($583) {
        $584 = HEAP32[$16>>2]|0;
        $585 = HEAP32[$18>>2]|0;
        $586 = (10350 + ($585)|0);
        $587 = HEAP8[$586>>0]|0;
        $588 = $587 << 24 >> 24;
        $589 = ($584>>>0)<($588>>>0);
        if ($589) {
         label = 114;
         continue L218;
        } else {
         label = 122;
         continue L218;
        }
       } else {
        $656 = HEAP32[$8>>2]|0;
        $657 = ((($656)) + 64|0);
        $658 = ((($657)) + 6976|0);
        _memset(($658|0),0,288)|0;
        HEAP32[$18>>2] = 0;
        label = 124;
        break;
       }
       break;
      }
      case 114: {
       label = 0;
       $590 = HEAP32[$21>>2]|0;
       $591 = HEAP32[$22>>2]|0;
       $592 = ($590>>>0)>=($591>>>0);
       if ($592) {
        label = 115;
        continue L74;
       } else {
        label = 120;
        break L218;
       }
       break;
      }
      case 122: {
       label = 0;
       $621 = HEAP32[$20>>2]|0;
       $622 = HEAP32[$18>>2]|0;
       $623 = (10350 + ($622)|0);
       $624 = HEAP8[$623>>0]|0;
       $625 = $624 << 24 >> 24;
       $626 = 1 << $625;
       $627 = (($626) - 1)|0;
       $628 = $621 & $627;
       $629 = HEAP32[$8>>2]|0;
       $630 = ((($629)) + 44|0);
       $631 = HEAP32[$18>>2]|0;
       $632 = (($630) + ($631<<2)|0);
       HEAP32[$632>>2] = $628;
       $633 = HEAP32[$18>>2]|0;
       $634 = (10350 + ($633)|0);
       $635 = HEAP8[$634>>0]|0;
       $636 = $635 << 24 >> 24;
       $637 = HEAP32[$20>>2]|0;
       $638 = $637 >>> $636;
       HEAP32[$20>>2] = $638;
       $639 = HEAP32[$18>>2]|0;
       $640 = (10350 + ($639)|0);
       $641 = HEAP8[$640>>0]|0;
       $642 = $641 << 24 >> 24;
       $643 = HEAP32[$16>>2]|0;
       $644 = (($643) - ($642))|0;
       HEAP32[$16>>2] = $644;
       $645 = HEAP32[$18>>2]|0;
       $646 = (2980 + ($645<<2)|0);
       $647 = HEAP32[$646>>2]|0;
       $648 = HEAP32[$8>>2]|0;
       $649 = ((($648)) + 44|0);
       $650 = HEAP32[$18>>2]|0;
       $651 = (($649) + ($650<<2)|0);
       $652 = HEAP32[$651>>2]|0;
       $653 = (($652) + ($647))|0;
       HEAP32[$651>>2] = $653;
       $654 = HEAP32[$18>>2]|0;
       $655 = (($654) + 1)|0;
       HEAP32[$18>>2] = $655;
       label = 112;
       continue L218;
       break;
      }
      case 126: {
       label = 0;
       $667 = HEAP32[$21>>2]|0;
       $668 = HEAP32[$22>>2]|0;
       $669 = ($667>>>0)>=($668>>>0);
       if ($669) {
        label = 127;
        continue L74;
       } else {
        label = 132;
        break L218;
       }
       break;
      }
      case 134: {
       label = 0;
       $694 = HEAP32[$20>>2]|0;
       $695 = $694 & 7;
       HEAP32[$35>>2] = $695;
       $696 = HEAP32[$20>>2]|0;
       $697 = $696 >>> 3;
       HEAP32[$20>>2] = $697;
       $698 = HEAP32[$16>>2]|0;
       $699 = (($698) - 3)|0;
       HEAP32[$16>>2] = $699;
       $700 = HEAP32[$35>>2]|0;
       $701 = $700&255;
       $702 = HEAP32[$8>>2]|0;
       $703 = ((($702)) + 64|0);
       $704 = ((($703)) + 6976|0);
       $705 = HEAP32[$18>>2]|0;
       $706 = (10354 + ($705)|0);
       $707 = HEAP8[$706>>0]|0;
       $708 = $707&255;
       $709 = (($704) + ($708)|0);
       HEAP8[$709>>0] = $701;
       $710 = HEAP32[$18>>2]|0;
       $711 = (($710) + 1)|0;
       HEAP32[$18>>2] = $711;
       label = 124;
       break;
      }
      case 136: {
       label = 0;
       $715 = HEAP32[$8>>2]|0;
       $716 = ((($715)) + 24|0);
       $717 = HEAP32[$716>>2]|0;
       $718 = ($717|0)>=(0);
       if ($718) {
        $719 = HEAP32[$8>>2]|0;
        $720 = ((($719)) + 64|0);
        $721 = HEAP32[$8>>2]|0;
        $722 = ((($721)) + 24|0);
        $723 = HEAP32[$722>>2]|0;
        $724 = (($720) + (($723*3488)|0)|0);
        HEAP32[$39>>2] = $724;
        dest=$46; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
        $725 = HEAP32[$39>>2]|0;
        $726 = ((($725)) + 288|0);
        _memset(($726|0),0,2048)|0;
        $727 = HEAP32[$39>>2]|0;
        $728 = ((($727)) + 2336|0);
        _memset(($728|0),0,1152)|0;
        HEAP32[$40>>2] = 0;
        while(1) {
         $729 = HEAP32[$40>>2]|0;
         $730 = HEAP32[$8>>2]|0;
         $731 = ((($730)) + 44|0);
         $732 = HEAP32[$8>>2]|0;
         $733 = ((($732)) + 24|0);
         $734 = HEAP32[$733>>2]|0;
         $735 = (($731) + ($734<<2)|0);
         $736 = HEAP32[$735>>2]|0;
         $737 = ($729>>>0)<($736>>>0);
         if (!($737)) {
          break;
         }
         $738 = HEAP32[$39>>2]|0;
         $739 = HEAP32[$40>>2]|0;
         $740 = (($738) + ($739)|0);
         $741 = HEAP8[$740>>0]|0;
         $742 = $741&255;
         $743 = (($46) + ($742<<2)|0);
         $744 = HEAP32[$743>>2]|0;
         $745 = (($744) + 1)|0;
         HEAP32[$743>>2] = $745;
         $746 = HEAP32[$40>>2]|0;
         $747 = (($746) + 1)|0;
         HEAP32[$40>>2] = $747;
        }
        HEAP32[$42>>2] = 0;
        HEAP32[$43>>2] = 0;
        $748 = ((($45)) + 4|0);
        HEAP32[$748>>2] = 0;
        HEAP32[$45>>2] = 0;
        HEAP32[$40>>2] = 1;
        while(1) {
         $749 = HEAP32[$40>>2]|0;
         $750 = ($749>>>0)<=(15);
         if (!($750)) {
          break;
         }
         $751 = HEAP32[$40>>2]|0;
         $752 = (($46) + ($751<<2)|0);
         $753 = HEAP32[$752>>2]|0;
         $754 = HEAP32[$42>>2]|0;
         $755 = (($754) + ($753))|0;
         HEAP32[$42>>2] = $755;
         $756 = HEAP32[$43>>2]|0;
         $757 = HEAP32[$40>>2]|0;
         $758 = (($46) + ($757<<2)|0);
         $759 = HEAP32[$758>>2]|0;
         $760 = (($756) + ($759))|0;
         $761 = $760 << 1;
         HEAP32[$43>>2] = $761;
         $762 = HEAP32[$40>>2]|0;
         $763 = (($762) + 1)|0;
         $764 = (($45) + ($763<<2)|0);
         HEAP32[$764>>2] = $761;
         $765 = HEAP32[$40>>2]|0;
         $766 = (($765) + 1)|0;
         HEAP32[$40>>2] = $766;
        }
        $767 = HEAP32[$43>>2]|0;
        $768 = (65536)!=($767|0);
        $769 = HEAP32[$42>>2]|0;
        $770 = ($769>>>0)>(1);
        $or$cond = $768 & $770;
        if ($or$cond) {
         label = 144;
         continue L74;
        }
        HEAP32[$37>>2] = -1;
        HEAP32[$44>>2] = 0;
        while(1) {
         $772 = HEAP32[$44>>2]|0;
         $773 = HEAP32[$8>>2]|0;
         $774 = ((($773)) + 44|0);
         $775 = HEAP32[$8>>2]|0;
         $776 = ((($775)) + 24|0);
         $777 = HEAP32[$776>>2]|0;
         $778 = (($774) + ($777<<2)|0);
         $779 = HEAP32[$778>>2]|0;
         $780 = ($772>>>0)<($779>>>0);
         if (!($780)) {
          break;
         }
         HEAP32[$47>>2] = 0;
         $781 = HEAP32[$39>>2]|0;
         $782 = HEAP32[$44>>2]|0;
         $783 = (($781) + ($782)|0);
         $784 = HEAP8[$783>>0]|0;
         $785 = $784&255;
         HEAP32[$50>>2] = $785;
         $786 = HEAP32[$50>>2]|0;
         $787 = ($786|0)!=(0);
         L246: do {
          if ($787) {
           $788 = HEAP32[$50>>2]|0;
           $789 = (($45) + ($788<<2)|0);
           $790 = HEAP32[$789>>2]|0;
           $791 = (($790) + 1)|0;
           HEAP32[$789>>2] = $791;
           HEAP32[$49>>2] = $790;
           $792 = HEAP32[$50>>2]|0;
           HEAP32[$48>>2] = $792;
           while(1) {
            $793 = HEAP32[$48>>2]|0;
            $794 = ($793>>>0)>(0);
            if (!($794)) {
             break;
            }
            $795 = HEAP32[$47>>2]|0;
            $796 = $795 << 1;
            $797 = HEAP32[$49>>2]|0;
            $798 = $797 & 1;
            $799 = $796 | $798;
            HEAP32[$47>>2] = $799;
            $800 = HEAP32[$48>>2]|0;
            $801 = (($800) + -1)|0;
            HEAP32[$48>>2] = $801;
            $802 = HEAP32[$49>>2]|0;
            $803 = $802 >>> 1;
            HEAP32[$49>>2] = $803;
           }
           $804 = HEAP32[$50>>2]|0;
           $805 = ($804>>>0)<=(10);
           if ($805) {
            $806 = HEAP32[$50>>2]|0;
            $807 = $806 << 9;
            $808 = HEAP32[$44>>2]|0;
            $809 = $807 | $808;
            $810 = $809&65535;
            HEAP16[$51>>1] = $810;
            while(1) {
             $811 = HEAP32[$47>>2]|0;
             $812 = ($811>>>0)<(1024);
             if (!($812)) {
              break L246;
             }
             $813 = HEAP16[$51>>1]|0;
             $814 = HEAP32[$39>>2]|0;
             $815 = ((($814)) + 288|0);
             $816 = HEAP32[$47>>2]|0;
             $817 = (($815) + ($816<<1)|0);
             HEAP16[$817>>1] = $813;
             $818 = HEAP32[$50>>2]|0;
             $819 = 1 << $818;
             $820 = HEAP32[$47>>2]|0;
             $821 = (($820) + ($819))|0;
             HEAP32[$47>>2] = $821;
            }
           }
           $822 = HEAP32[$39>>2]|0;
           $823 = ((($822)) + 288|0);
           $824 = HEAP32[$47>>2]|0;
           $825 = $824 & 1023;
           $826 = (($823) + ($825<<1)|0);
           $827 = HEAP16[$826>>1]|0;
           $828 = $827 << 16 >> 16;
           HEAP32[$38>>2] = $828;
           $829 = (0)==($828|0);
           if ($829) {
            $830 = HEAP32[$37>>2]|0;
            $831 = $830&65535;
            $832 = HEAP32[$39>>2]|0;
            $833 = ((($832)) + 288|0);
            $834 = HEAP32[$47>>2]|0;
            $835 = $834 & 1023;
            $836 = (($833) + ($835<<1)|0);
            HEAP16[$836>>1] = $831;
            $837 = HEAP32[$37>>2]|0;
            HEAP32[$38>>2] = $837;
            $838 = HEAP32[$37>>2]|0;
            $839 = (($838) - 2)|0;
            HEAP32[$37>>2] = $839;
           }
           $840 = HEAP32[$47>>2]|0;
           $841 = $840 >>> 9;
           HEAP32[$47>>2] = $841;
           $842 = HEAP32[$50>>2]|0;
           HEAP32[$41>>2] = $842;
           while(1) {
            $843 = HEAP32[$41>>2]|0;
            $844 = ($843>>>0)>(11);
            $845 = HEAP32[$47>>2]|0;
            $846 = $845 >>> 1;
            HEAP32[$47>>2] = $846;
            $847 = $846 & 1;
            $848 = HEAP32[$38>>2]|0;
            $849 = (($848) - ($847))|0;
            HEAP32[$38>>2] = $849;
            if (!($844)) {
             break;
            }
            $850 = HEAP32[$39>>2]|0;
            $851 = ((($850)) + 2336|0);
            $852 = HEAP32[$38>>2]|0;
            $853 = (0 - ($852))|0;
            $854 = (($853) - 1)|0;
            $855 = (($851) + ($854<<1)|0);
            $856 = HEAP16[$855>>1]|0;
            $857 = ($856<<16>>16)!=(0);
            if ($857) {
             $869 = HEAP32[$39>>2]|0;
             $870 = ((($869)) + 2336|0);
             $871 = HEAP32[$38>>2]|0;
             $872 = (0 - ($871))|0;
             $873 = (($872) - 1)|0;
             $874 = (($870) + ($873<<1)|0);
             $875 = HEAP16[$874>>1]|0;
             $876 = $875 << 16 >> 16;
             HEAP32[$38>>2] = $876;
            } else {
             $858 = HEAP32[$37>>2]|0;
             $859 = $858&65535;
             $860 = HEAP32[$39>>2]|0;
             $861 = ((($860)) + 2336|0);
             $862 = HEAP32[$38>>2]|0;
             $863 = (0 - ($862))|0;
             $864 = (($863) - 1)|0;
             $865 = (($861) + ($864<<1)|0);
             HEAP16[$865>>1] = $859;
             $866 = HEAP32[$37>>2]|0;
             HEAP32[$38>>2] = $866;
             $867 = HEAP32[$37>>2]|0;
             $868 = (($867) - 2)|0;
             HEAP32[$37>>2] = $868;
            }
            $877 = HEAP32[$41>>2]|0;
            $878 = (($877) + -1)|0;
            HEAP32[$41>>2] = $878;
           }
           $879 = HEAP32[$44>>2]|0;
           $880 = $879&65535;
           $881 = HEAP32[$39>>2]|0;
           $882 = ((($881)) + 2336|0);
           $883 = HEAP32[$38>>2]|0;
           $884 = (0 - ($883))|0;
           $885 = (($884) - 1)|0;
           $886 = (($882) + ($885<<1)|0);
           HEAP16[$886>>1] = $880;
          }
         } while(0);
         $887 = HEAP32[$44>>2]|0;
         $888 = (($887) + 1)|0;
         HEAP32[$44>>2] = $888;
        }
        $889 = HEAP32[$8>>2]|0;
        $890 = ((($889)) + 24|0);
        $891 = HEAP32[$890>>2]|0;
        $892 = ($891|0)==(2);
        if ($892) {
         HEAP32[$18>>2] = 0;
         label = 167;
        } else {
         label = 210;
        }
       } else {
        label = 211;
       }
       break;
      }
      case 170: {
       label = 0;
       $911 = HEAP32[$8>>2]|0;
       $912 = ((($911)) + 64|0);
       $913 = ((($912)) + 6976|0);
       $914 = ((($913)) + 288|0);
       $915 = HEAP32[$20>>2]|0;
       $916 = $915 & 1023;
       $917 = (($914) + ($916<<1)|0);
       $918 = HEAP16[$917>>1]|0;
       $919 = $918 << 16 >> 16;
       HEAP32[$53>>2] = $919;
       $920 = HEAP32[$53>>2]|0;
       $921 = ($920|0)>=(0);
       if ($921) {
        $922 = HEAP32[$53>>2]|0;
        $923 = $922 >> 9;
        HEAP32[$54>>2] = $923;
        $924 = HEAP32[$54>>2]|0;
        $925 = ($924|0)!=(0);
        if (!($925)) {
         label = 178;
         break L218;
        }
        $926 = HEAP32[$16>>2]|0;
        $927 = HEAP32[$54>>2]|0;
        $928 = ($926>>>0)>=($927>>>0);
        if ($928) {
         label = 187;
         continue L218;
        } else {
         label = 178;
         break L218;
        }
       }
       $929 = HEAP32[$16>>2]|0;
       $930 = ($929>>>0)>(10);
       if (!($930)) {
        label = 178;
        break L218;
       }
       HEAP32[$54>>2] = 10;
       while(1) {
        $931 = HEAP32[$8>>2]|0;
        $932 = ((($931)) + 64|0);
        $933 = ((($932)) + 6976|0);
        $934 = ((($933)) + 2336|0);
        $935 = HEAP32[$53>>2]|0;
        $936 = $935 ^ -1;
        $937 = HEAP32[$20>>2]|0;
        $938 = HEAP32[$54>>2]|0;
        $939 = (($938) + 1)|0;
        HEAP32[$54>>2] = $939;
        $940 = $937 >>> $938;
        $941 = $940 & 1;
        $942 = (($936) + ($941))|0;
        $943 = (($934) + ($942<<1)|0);
        $944 = HEAP16[$943>>1]|0;
        $945 = $944 << 16 >> 16;
        HEAP32[$53>>2] = $945;
        $946 = HEAP32[$53>>2]|0;
        $947 = ($946|0)<(0);
        if (!($947)) {
         break;
        }
        $948 = HEAP32[$16>>2]|0;
        $949 = HEAP32[$54>>2]|0;
        $950 = (($949) + 1)|0;
        $951 = ($948>>>0)>=($950>>>0);
        if (!($951)) {
         break;
        }
       }
       $952 = HEAP32[$53>>2]|0;
       $953 = ($952|0)>=(0);
       if ($953) {
        label = 187;
        continue L218;
       } else {
        label = 178;
        break L218;
       }
       break;
      }
      case 187: {
       label = 0;
       $1000 = HEAP32[$8>>2]|0;
       $1001 = ((($1000)) + 64|0);
       $1002 = ((($1001)) + 6976|0);
       $1003 = ((($1002)) + 288|0);
       $1004 = HEAP32[$20>>2]|0;
       $1005 = $1004 & 1023;
       $1006 = (($1003) + ($1005<<1)|0);
       $1007 = HEAP16[$1006>>1]|0;
       $1008 = $1007 << 16 >> 16;
       HEAP32[$53>>2] = $1008;
       $1009 = ($1008|0)>=(0);
       if ($1009) {
        $1010 = HEAP32[$53>>2]|0;
        $1011 = $1010 >> 9;
        HEAP32[$54>>2] = $1011;
        $1012 = HEAP32[$53>>2]|0;
        $1013 = $1012 & 511;
        HEAP32[$53>>2] = $1013;
       } else {
        HEAP32[$54>>2] = 10;
        while(1) {
         $1014 = HEAP32[$8>>2]|0;
         $1015 = ((($1014)) + 64|0);
         $1016 = ((($1015)) + 6976|0);
         $1017 = ((($1016)) + 2336|0);
         $1018 = HEAP32[$53>>2]|0;
         $1019 = $1018 ^ -1;
         $1020 = HEAP32[$20>>2]|0;
         $1021 = HEAP32[$54>>2]|0;
         $1022 = (($1021) + 1)|0;
         HEAP32[$54>>2] = $1022;
         $1023 = $1020 >>> $1021;
         $1024 = $1023 & 1;
         $1025 = (($1019) + ($1024))|0;
         $1026 = (($1017) + ($1025<<1)|0);
         $1027 = HEAP16[$1026>>1]|0;
         $1028 = $1027 << 16 >> 16;
         HEAP32[$53>>2] = $1028;
         $1029 = HEAP32[$53>>2]|0;
         $1030 = ($1029|0)<(0);
         if (!($1030)) {
          break;
         }
        }
       }
       $1031 = HEAP32[$53>>2]|0;
       HEAP32[$17>>2] = $1031;
       $1032 = HEAP32[$54>>2]|0;
       $1033 = HEAP32[$20>>2]|0;
       $1034 = $1033 >>> $1032;
       HEAP32[$20>>2] = $1034;
       $1035 = HEAP32[$54>>2]|0;
       $1036 = HEAP32[$16>>2]|0;
       $1037 = (($1036) - ($1035))|0;
       HEAP32[$16>>2] = $1037;
       $1038 = HEAP32[$17>>2]|0;
       $1039 = ($1038>>>0)<(16);
       $1040 = HEAP32[$17>>2]|0;
       if ($1039) {
        $1041 = $1040&255;
        $1042 = HEAP32[$8>>2]|0;
        $1043 = ((($1042)) + 10532|0);
        $1044 = HEAP32[$18>>2]|0;
        $1045 = (($1044) + 1)|0;
        HEAP32[$18>>2] = $1045;
        $1046 = (($1043) + ($1044)|0);
        HEAP8[$1046>>0] = $1041;
        label = 167;
        break;
       }
       $1047 = ($1040|0)!=(16);
       $1048 = HEAP32[$18>>2]|0;
       $1049 = ($1048|0)!=(0);
       $or$cond24 = $1047 | $1049;
       if (!($or$cond24)) {
        label = 194;
        continue L74;
       }
       $1051 = HEAP32[$17>>2]|0;
       $1052 = (($1051) - 16)|0;
       $1053 = (10373 + ($1052)|0);
       $1054 = HEAP8[$1053>>0]|0;
       $1055 = $1054 << 24 >> 24;
       HEAP32[$19>>2] = $1055;
       $1056 = HEAP32[$16>>2]|0;
       $1057 = HEAP32[$19>>2]|0;
       $1058 = ($1056>>>0)<($1057>>>0);
       if ($1058) {
        label = 196;
        continue L218;
       } else {
        label = 204;
        continue L218;
       }
       break;
      }
      case 196: {
       label = 0;
       $1059 = HEAP32[$21>>2]|0;
       $1060 = HEAP32[$22>>2]|0;
       $1061 = ($1059>>>0)>=($1060>>>0);
       if ($1061) {
        label = 197;
        continue L74;
       } else {
        label = 202;
        break L218;
       }
       break;
      }
      case 204: {
       label = 0;
       $1087 = HEAP32[$20>>2]|0;
       $1088 = HEAP32[$19>>2]|0;
       $1089 = 1 << $1088;
       $1090 = (($1089) - 1)|0;
       $1091 = $1087 & $1090;
       HEAP32[$52>>2] = $1091;
       $1092 = HEAP32[$19>>2]|0;
       $1093 = HEAP32[$20>>2]|0;
       $1094 = $1093 >>> $1092;
       HEAP32[$20>>2] = $1094;
       $1095 = HEAP32[$19>>2]|0;
       $1096 = HEAP32[$16>>2]|0;
       $1097 = (($1096) - ($1095))|0;
       HEAP32[$16>>2] = $1097;
       $1098 = HEAP32[$17>>2]|0;
       $1099 = (($1098) - 16)|0;
       $1100 = (10377 + ($1099)|0);
       $1101 = HEAP8[$1100>>0]|0;
       $1102 = $1101 << 24 >> 24;
       $1103 = HEAP32[$52>>2]|0;
       $1104 = (($1103) + ($1102))|0;
       HEAP32[$52>>2] = $1104;
       $1105 = HEAP32[$8>>2]|0;
       $1106 = ((($1105)) + 10532|0);
       $1107 = HEAP32[$18>>2]|0;
       $1108 = (($1106) + ($1107)|0);
       $1109 = HEAP32[$17>>2]|0;
       $1110 = ($1109|0)==(16);
       if ($1110) {
        $1111 = HEAP32[$8>>2]|0;
        $1112 = ((($1111)) + 10532|0);
        $1113 = HEAP32[$18>>2]|0;
        $1114 = (($1113) - 1)|0;
        $1115 = (($1112) + ($1114)|0);
        $1116 = HEAP8[$1115>>0]|0;
        $1117 = $1116&255;
        $1119 = $1117;
       } else {
        $1119 = 0;
       }
       $1118 = $1119&255;
       $1120 = HEAP32[$52>>2]|0;
       _memset(($1108|0),($1118|0),($1120|0))|0;
       $1121 = HEAP32[$52>>2]|0;
       $1122 = HEAP32[$18>>2]|0;
       $1123 = (($1122) + ($1121))|0;
       HEAP32[$18>>2] = $1123;
       label = 167;
       break;
      }
      case 212: {
       label = 0;
       $1159 = HEAP32[$22>>2]|0;
       $1160 = HEAP32[$21>>2]|0;
       $1161 = $1159;
       $1162 = $1160;
       $1163 = (($1161) - ($1162))|0;
       $1164 = ($1163|0)<(4);
       if (!($1164)) {
        $1165 = HEAP32[$24>>2]|0;
        $1166 = HEAP32[$23>>2]|0;
        $1167 = $1165;
        $1168 = $1166;
        $1169 = (($1167) - ($1168))|0;
        $1170 = ($1169|0)<(2);
        if (!($1170)) {
         $1312 = HEAP32[$16>>2]|0;
         $1313 = ($1312>>>0)<(15);
         if ($1313) {
          $1314 = HEAP32[$21>>2]|0;
          $1315 = HEAP8[$1314>>0]|0;
          $1316 = $1315&255;
          $1317 = HEAP32[$21>>2]|0;
          $1318 = ((($1317)) + 1|0);
          $1319 = HEAP8[$1318>>0]|0;
          $1320 = $1319&255;
          $1321 = $1320 << 8;
          $1322 = $1316 | $1321;
          $1323 = HEAP32[$16>>2]|0;
          $1324 = $1322 << $1323;
          $1325 = HEAP32[$20>>2]|0;
          $1326 = $1325 | $1324;
          HEAP32[$20>>2] = $1326;
          $1327 = HEAP32[$21>>2]|0;
          $1328 = ((($1327)) + 2|0);
          HEAP32[$21>>2] = $1328;
          $1329 = HEAP32[$16>>2]|0;
          $1330 = (($1329) + 16)|0;
          HEAP32[$16>>2] = $1330;
         }
         $1331 = HEAP32[$8>>2]|0;
         $1332 = ((($1331)) + 64|0);
         $1333 = ((($1332)) + 288|0);
         $1334 = HEAP32[$20>>2]|0;
         $1335 = $1334 & 1023;
         $1336 = (($1333) + ($1335<<1)|0);
         $1337 = HEAP16[$1336>>1]|0;
         $1338 = $1337 << 16 >> 16;
         HEAP32[$61>>2] = $1338;
         $1339 = ($1338|0)>=(0);
         if ($1339) {
          $1340 = HEAP32[$61>>2]|0;
          $1341 = $1340 >> 9;
          HEAP32[$62>>2] = $1341;
         } else {
          HEAP32[$62>>2] = 10;
          while(1) {
           $1342 = HEAP32[$8>>2]|0;
           $1343 = ((($1342)) + 64|0);
           $1344 = ((($1343)) + 2336|0);
           $1345 = HEAP32[$61>>2]|0;
           $1346 = $1345 ^ -1;
           $1347 = HEAP32[$20>>2]|0;
           $1348 = HEAP32[$62>>2]|0;
           $1349 = (($1348) + 1)|0;
           HEAP32[$62>>2] = $1349;
           $1350 = $1347 >>> $1348;
           $1351 = $1350 & 1;
           $1352 = (($1346) + ($1351))|0;
           $1353 = (($1344) + ($1352<<1)|0);
           $1354 = HEAP16[$1353>>1]|0;
           $1355 = $1354 << 16 >> 16;
           HEAP32[$61>>2] = $1355;
           $1356 = HEAP32[$61>>2]|0;
           $1357 = ($1356|0)<(0);
           if (!($1357)) {
            break;
           }
          }
         }
         $1358 = HEAP32[$61>>2]|0;
         HEAP32[$18>>2] = $1358;
         $1359 = HEAP32[$62>>2]|0;
         $1360 = HEAP32[$20>>2]|0;
         $1361 = $1360 >>> $1359;
         HEAP32[$20>>2] = $1361;
         $1362 = HEAP32[$62>>2]|0;
         $1363 = HEAP32[$16>>2]|0;
         $1364 = (($1363) - ($1362))|0;
         HEAP32[$16>>2] = $1364;
         $1365 = HEAP32[$18>>2]|0;
         $1366 = $1365 & 256;
         $1367 = ($1366|0)!=(0);
         if ($1367) {
          label = 257;
          break;
         }
         $1368 = HEAP32[$16>>2]|0;
         $1369 = ($1368>>>0)<(15);
         if ($1369) {
          $1370 = HEAP32[$21>>2]|0;
          $1371 = HEAP8[$1370>>0]|0;
          $1372 = $1371&255;
          $1373 = HEAP32[$21>>2]|0;
          $1374 = ((($1373)) + 1|0);
          $1375 = HEAP8[$1374>>0]|0;
          $1376 = $1375&255;
          $1377 = $1376 << 8;
          $1378 = $1372 | $1377;
          $1379 = HEAP32[$16>>2]|0;
          $1380 = $1378 << $1379;
          $1381 = HEAP32[$20>>2]|0;
          $1382 = $1381 | $1380;
          HEAP32[$20>>2] = $1382;
          $1383 = HEAP32[$21>>2]|0;
          $1384 = ((($1383)) + 2|0);
          HEAP32[$21>>2] = $1384;
          $1385 = HEAP32[$16>>2]|0;
          $1386 = (($1385) + 16)|0;
          HEAP32[$16>>2] = $1386;
         }
         $1387 = HEAP32[$8>>2]|0;
         $1388 = ((($1387)) + 64|0);
         $1389 = ((($1388)) + 288|0);
         $1390 = HEAP32[$20>>2]|0;
         $1391 = $1390 & 1023;
         $1392 = (($1389) + ($1391<<1)|0);
         $1393 = HEAP16[$1392>>1]|0;
         $1394 = $1393 << 16 >> 16;
         HEAP32[$61>>2] = $1394;
         $1395 = ($1394|0)>=(0);
         if ($1395) {
          $1396 = HEAP32[$61>>2]|0;
          $1397 = $1396 >> 9;
          HEAP32[$62>>2] = $1397;
         } else {
          HEAP32[$62>>2] = 10;
          while(1) {
           $1398 = HEAP32[$8>>2]|0;
           $1399 = ((($1398)) + 64|0);
           $1400 = ((($1399)) + 2336|0);
           $1401 = HEAP32[$61>>2]|0;
           $1402 = $1401 ^ -1;
           $1403 = HEAP32[$20>>2]|0;
           $1404 = HEAP32[$62>>2]|0;
           $1405 = (($1404) + 1)|0;
           HEAP32[$62>>2] = $1405;
           $1406 = $1403 >>> $1404;
           $1407 = $1406 & 1;
           $1408 = (($1402) + ($1407))|0;
           $1409 = (($1400) + ($1408<<1)|0);
           $1410 = HEAP16[$1409>>1]|0;
           $1411 = $1410 << 16 >> 16;
           HEAP32[$61>>2] = $1411;
           $1412 = HEAP32[$61>>2]|0;
           $1413 = ($1412|0)<(0);
           if (!($1413)) {
            break;
           }
          }
         }
         $1414 = HEAP32[$62>>2]|0;
         $1415 = HEAP32[$20>>2]|0;
         $1416 = $1415 >>> $1414;
         HEAP32[$20>>2] = $1416;
         $1417 = HEAP32[$62>>2]|0;
         $1418 = HEAP32[$16>>2]|0;
         $1419 = (($1418) - ($1417))|0;
         HEAP32[$16>>2] = $1419;
         $1420 = HEAP32[$18>>2]|0;
         $1421 = $1420&255;
         $1422 = HEAP32[$23>>2]|0;
         HEAP8[$1422>>0] = $1421;
         $1423 = HEAP32[$61>>2]|0;
         $1424 = $1423 & 256;
         $1425 = ($1424|0)!=(0);
         if ($1425) {
          $1426 = HEAP32[$23>>2]|0;
          $1427 = ((($1426)) + 1|0);
          HEAP32[$23>>2] = $1427;
          $1428 = HEAP32[$61>>2]|0;
          HEAP32[$18>>2] = $1428;
          label = 257;
          break;
         } else {
          $1429 = HEAP32[$61>>2]|0;
          $1430 = $1429&255;
          $1431 = HEAP32[$23>>2]|0;
          $1432 = ((($1431)) + 1|0);
          HEAP8[$1432>>0] = $1430;
          $1433 = HEAP32[$23>>2]|0;
          $1434 = ((($1433)) + 2|0);
          HEAP32[$23>>2] = $1434;
          label = 212;
          continue L218;
         }
        }
       }
       $1171 = HEAP32[$16>>2]|0;
       $1172 = ($1171>>>0)<(15);
       if (!($1172)) {
        label = 233;
        continue L218;
       }
       $1173 = HEAP32[$22>>2]|0;
       $1174 = HEAP32[$21>>2]|0;
       $1175 = $1173;
       $1176 = $1174;
       $1177 = (($1175) - ($1176))|0;
       $1178 = ($1177|0)<(2);
       if ($1178) {
        label = 216;
        continue L218;
       }
       $1247 = HEAP32[$21>>2]|0;
       $1248 = HEAP8[$1247>>0]|0;
       $1249 = $1248&255;
       $1250 = HEAP32[$16>>2]|0;
       $1251 = $1249 << $1250;
       $1252 = HEAP32[$21>>2]|0;
       $1253 = ((($1252)) + 1|0);
       $1254 = HEAP8[$1253>>0]|0;
       $1255 = $1254&255;
       $1256 = HEAP32[$16>>2]|0;
       $1257 = (($1256) + 8)|0;
       $1258 = $1255 << $1257;
       $1259 = $1251 | $1258;
       $1260 = HEAP32[$20>>2]|0;
       $1261 = $1260 | $1259;
       HEAP32[$20>>2] = $1261;
       $1262 = HEAP32[$21>>2]|0;
       $1263 = ((($1262)) + 2|0);
       HEAP32[$21>>2] = $1263;
       $1264 = HEAP32[$16>>2]|0;
       $1265 = (($1264) + 16)|0;
       HEAP32[$16>>2] = $1265;
       label = 233;
       continue L218;
       break;
      }
      case 216: {
       label = 0;
       $1179 = HEAP32[$8>>2]|0;
       $1180 = ((($1179)) + 64|0);
       $1181 = ((($1180)) + 288|0);
       $1182 = HEAP32[$20>>2]|0;
       $1183 = $1182 & 1023;
       $1184 = (($1181) + ($1183<<1)|0);
       $1185 = HEAP16[$1184>>1]|0;
       $1186 = $1185 << 16 >> 16;
       HEAP32[$58>>2] = $1186;
       $1187 = HEAP32[$58>>2]|0;
       $1188 = ($1187|0)>=(0);
       if ($1188) {
        $1189 = HEAP32[$58>>2]|0;
        $1190 = $1189 >> 9;
        HEAP32[$59>>2] = $1190;
        $1191 = HEAP32[$59>>2]|0;
        $1192 = ($1191|0)!=(0);
        if (!($1192)) {
         label = 224;
         break L218;
        }
        $1193 = HEAP32[$16>>2]|0;
        $1194 = HEAP32[$59>>2]|0;
        $1195 = ($1193>>>0)>=($1194>>>0);
        if ($1195) {
         label = 233;
         continue L218;
        } else {
         label = 224;
         break L218;
        }
       }
       $1196 = HEAP32[$16>>2]|0;
       $1197 = ($1196>>>0)>(10);
       if (!($1197)) {
        label = 224;
        break L218;
       }
       HEAP32[$59>>2] = 10;
       while(1) {
        $1198 = HEAP32[$8>>2]|0;
        $1199 = ((($1198)) + 64|0);
        $1200 = ((($1199)) + 2336|0);
        $1201 = HEAP32[$58>>2]|0;
        $1202 = $1201 ^ -1;
        $1203 = HEAP32[$20>>2]|0;
        $1204 = HEAP32[$59>>2]|0;
        $1205 = (($1204) + 1)|0;
        HEAP32[$59>>2] = $1205;
        $1206 = $1203 >>> $1204;
        $1207 = $1206 & 1;
        $1208 = (($1202) + ($1207))|0;
        $1209 = (($1200) + ($1208<<1)|0);
        $1210 = HEAP16[$1209>>1]|0;
        $1211 = $1210 << 16 >> 16;
        HEAP32[$58>>2] = $1211;
        $1212 = HEAP32[$58>>2]|0;
        $1213 = ($1212|0)<(0);
        if (!($1213)) {
         break;
        }
        $1214 = HEAP32[$16>>2]|0;
        $1215 = HEAP32[$59>>2]|0;
        $1216 = (($1215) + 1)|0;
        $1217 = ($1214>>>0)>=($1216>>>0);
        if (!($1217)) {
         break;
        }
       }
       $1218 = HEAP32[$58>>2]|0;
       $1219 = ($1218|0)>=(0);
       if ($1219) {
        label = 233;
        continue L218;
       } else {
        label = 224;
        break L218;
       }
       break;
      }
      case 233: {
       label = 0;
       $1266 = HEAP32[$8>>2]|0;
       $1267 = ((($1266)) + 64|0);
       $1268 = ((($1267)) + 288|0);
       $1269 = HEAP32[$20>>2]|0;
       $1270 = $1269 & 1023;
       $1271 = (($1268) + ($1270<<1)|0);
       $1272 = HEAP16[$1271>>1]|0;
       $1273 = $1272 << 16 >> 16;
       HEAP32[$58>>2] = $1273;
       $1274 = ($1273|0)>=(0);
       if ($1274) {
        $1275 = HEAP32[$58>>2]|0;
        $1276 = $1275 >> 9;
        HEAP32[$59>>2] = $1276;
        $1277 = HEAP32[$58>>2]|0;
        $1278 = $1277 & 511;
        HEAP32[$58>>2] = $1278;
       } else {
        HEAP32[$59>>2] = 10;
        while(1) {
         $1279 = HEAP32[$8>>2]|0;
         $1280 = ((($1279)) + 64|0);
         $1281 = ((($1280)) + 2336|0);
         $1282 = HEAP32[$58>>2]|0;
         $1283 = $1282 ^ -1;
         $1284 = HEAP32[$20>>2]|0;
         $1285 = HEAP32[$59>>2]|0;
         $1286 = (($1285) + 1)|0;
         HEAP32[$59>>2] = $1286;
         $1287 = $1284 >>> $1285;
         $1288 = $1287 & 1;
         $1289 = (($1283) + ($1288))|0;
         $1290 = (($1281) + ($1289<<1)|0);
         $1291 = HEAP16[$1290>>1]|0;
         $1292 = $1291 << 16 >> 16;
         HEAP32[$58>>2] = $1292;
         $1293 = HEAP32[$58>>2]|0;
         $1294 = ($1293|0)<(0);
         if (!($1294)) {
          break;
         }
        }
       }
       $1295 = HEAP32[$58>>2]|0;
       HEAP32[$18>>2] = $1295;
       $1296 = HEAP32[$59>>2]|0;
       $1297 = HEAP32[$20>>2]|0;
       $1298 = $1297 >>> $1296;
       HEAP32[$20>>2] = $1298;
       $1299 = HEAP32[$59>>2]|0;
       $1300 = HEAP32[$16>>2]|0;
       $1301 = (($1300) - ($1299))|0;
       HEAP32[$16>>2] = $1301;
       $1302 = HEAP32[$18>>2]|0;
       $1303 = ($1302>>>0)>=(256);
       if ($1303) {
        label = 257;
       } else {
        label = 238;
        continue L74;
       }
       break;
      }
      case 260: {
       label = 0;
       $1451 = HEAP32[$21>>2]|0;
       $1452 = HEAP32[$22>>2]|0;
       $1453 = ($1451>>>0)>=($1452>>>0);
       if ($1453) {
        label = 261;
        continue L74;
       } else {
        label = 266;
        break L218;
       }
       break;
      }
      case 268: {
       label = 0;
       $1479 = HEAP32[$20>>2]|0;
       $1480 = HEAP32[$19>>2]|0;
       $1481 = 1 << $1480;
       $1482 = (($1481) - 1)|0;
       $1483 = $1479 & $1482;
       HEAP32[$63>>2] = $1483;
       $1484 = HEAP32[$19>>2]|0;
       $1485 = HEAP32[$20>>2]|0;
       $1486 = $1485 >>> $1484;
       HEAP32[$20>>2] = $1486;
       $1487 = HEAP32[$19>>2]|0;
       $1488 = HEAP32[$16>>2]|0;
       $1489 = (($1488) - ($1487))|0;
       HEAP32[$16>>2] = $1489;
       $1490 = HEAP32[$63>>2]|0;
       $1491 = HEAP32[$18>>2]|0;
       $1492 = (($1491) + ($1490))|0;
       HEAP32[$18>>2] = $1492;
       label = 269;
       break;
      }
      case 271: {
       label = 0;
       $1501 = HEAP32[$8>>2]|0;
       $1502 = ((($1501)) + 64|0);
       $1503 = ((($1502)) + 3488|0);
       $1504 = ((($1503)) + 288|0);
       $1505 = HEAP32[$20>>2]|0;
       $1506 = $1505 & 1023;
       $1507 = (($1504) + ($1506<<1)|0);
       $1508 = HEAP16[$1507>>1]|0;
       $1509 = $1508 << 16 >> 16;
       HEAP32[$65>>2] = $1509;
       $1510 = HEAP32[$65>>2]|0;
       $1511 = ($1510|0)>=(0);
       if ($1511) {
        $1512 = HEAP32[$65>>2]|0;
        $1513 = $1512 >> 9;
        HEAP32[$66>>2] = $1513;
        $1514 = HEAP32[$66>>2]|0;
        $1515 = ($1514|0)!=(0);
        if (!($1515)) {
         label = 279;
         break L218;
        }
        $1516 = HEAP32[$16>>2]|0;
        $1517 = HEAP32[$66>>2]|0;
        $1518 = ($1516>>>0)>=($1517>>>0);
        if ($1518) {
         label = 288;
         continue L218;
        } else {
         label = 279;
         break L218;
        }
       }
       $1519 = HEAP32[$16>>2]|0;
       $1520 = ($1519>>>0)>(10);
       if (!($1520)) {
        label = 279;
        break L218;
       }
       HEAP32[$66>>2] = 10;
       while(1) {
        $1521 = HEAP32[$8>>2]|0;
        $1522 = ((($1521)) + 64|0);
        $1523 = ((($1522)) + 3488|0);
        $1524 = ((($1523)) + 2336|0);
        $1525 = HEAP32[$65>>2]|0;
        $1526 = $1525 ^ -1;
        $1527 = HEAP32[$20>>2]|0;
        $1528 = HEAP32[$66>>2]|0;
        $1529 = (($1528) + 1)|0;
        HEAP32[$66>>2] = $1529;
        $1530 = $1527 >>> $1528;
        $1531 = $1530 & 1;
        $1532 = (($1526) + ($1531))|0;
        $1533 = (($1524) + ($1532<<1)|0);
        $1534 = HEAP16[$1533>>1]|0;
        $1535 = $1534 << 16 >> 16;
        HEAP32[$65>>2] = $1535;
        $1536 = HEAP32[$65>>2]|0;
        $1537 = ($1536|0)<(0);
        if (!($1537)) {
         break;
        }
        $1538 = HEAP32[$16>>2]|0;
        $1539 = HEAP32[$66>>2]|0;
        $1540 = (($1539) + 1)|0;
        $1541 = ($1538>>>0)>=($1540>>>0);
        if (!($1541)) {
         break;
        }
       }
       $1542 = HEAP32[$65>>2]|0;
       $1543 = ($1542|0)>=(0);
       if ($1543) {
        label = 288;
        continue L218;
       } else {
        label = 279;
        break L218;
       }
       break;
      }
      case 288: {
       label = 0;
       $1590 = HEAP32[$8>>2]|0;
       $1591 = ((($1590)) + 64|0);
       $1592 = ((($1591)) + 3488|0);
       $1593 = ((($1592)) + 288|0);
       $1594 = HEAP32[$20>>2]|0;
       $1595 = $1594 & 1023;
       $1596 = (($1593) + ($1595<<1)|0);
       $1597 = HEAP16[$1596>>1]|0;
       $1598 = $1597 << 16 >> 16;
       HEAP32[$65>>2] = $1598;
       $1599 = ($1598|0)>=(0);
       if ($1599) {
        $1600 = HEAP32[$65>>2]|0;
        $1601 = $1600 >> 9;
        HEAP32[$66>>2] = $1601;
        $1602 = HEAP32[$65>>2]|0;
        $1603 = $1602 & 511;
        HEAP32[$65>>2] = $1603;
       } else {
        HEAP32[$66>>2] = 10;
        while(1) {
         $1604 = HEAP32[$8>>2]|0;
         $1605 = ((($1604)) + 64|0);
         $1606 = ((($1605)) + 3488|0);
         $1607 = ((($1606)) + 2336|0);
         $1608 = HEAP32[$65>>2]|0;
         $1609 = $1608 ^ -1;
         $1610 = HEAP32[$20>>2]|0;
         $1611 = HEAP32[$66>>2]|0;
         $1612 = (($1611) + 1)|0;
         HEAP32[$66>>2] = $1612;
         $1613 = $1610 >>> $1611;
         $1614 = $1613 & 1;
         $1615 = (($1609) + ($1614))|0;
         $1616 = (($1607) + ($1615<<1)|0);
         $1617 = HEAP16[$1616>>1]|0;
         $1618 = $1617 << 16 >> 16;
         HEAP32[$65>>2] = $1618;
         $1619 = HEAP32[$65>>2]|0;
         $1620 = ($1619|0)<(0);
         if (!($1620)) {
          break;
         }
        }
       }
       $1621 = HEAP32[$65>>2]|0;
       HEAP32[$17>>2] = $1621;
       $1622 = HEAP32[$66>>2]|0;
       $1623 = HEAP32[$20>>2]|0;
       $1624 = $1623 >>> $1622;
       HEAP32[$20>>2] = $1624;
       $1625 = HEAP32[$66>>2]|0;
       $1626 = HEAP32[$16>>2]|0;
       $1627 = (($1626) - ($1625))|0;
       HEAP32[$16>>2] = $1627;
       $1628 = HEAP32[$17>>2]|0;
       $1629 = (3240 + ($1628<<2)|0);
       $1630 = HEAP32[$1629>>2]|0;
       HEAP32[$19>>2] = $1630;
       $1631 = HEAP32[$17>>2]|0;
       $1632 = (3368 + ($1631<<2)|0);
       $1633 = HEAP32[$1632>>2]|0;
       HEAP32[$17>>2] = $1633;
       $1634 = HEAP32[$19>>2]|0;
       $1635 = ($1634|0)!=(0);
       if ($1635) {
        $1636 = HEAP32[$16>>2]|0;
        $1637 = HEAP32[$19>>2]|0;
        $1638 = ($1636>>>0)<($1637>>>0);
        if ($1638) {
         label = 294;
         continue L218;
        } else {
         label = 302;
         continue L218;
        }
       } else {
        label = 303;
       }
       break;
      }
      case 294: {
       label = 0;
       $1639 = HEAP32[$21>>2]|0;
       $1640 = HEAP32[$22>>2]|0;
       $1641 = ($1639>>>0)>=($1640>>>0);
       if ($1641) {
        label = 295;
        continue L74;
       } else {
        label = 300;
        break L218;
       }
       break;
      }
      case 302: {
       label = 0;
       $1667 = HEAP32[$20>>2]|0;
       $1668 = HEAP32[$19>>2]|0;
       $1669 = 1 << $1668;
       $1670 = (($1669) - 1)|0;
       $1671 = $1667 & $1670;
       HEAP32[$68>>2] = $1671;
       $1672 = HEAP32[$19>>2]|0;
       $1673 = HEAP32[$20>>2]|0;
       $1674 = $1673 >>> $1672;
       HEAP32[$20>>2] = $1674;
       $1675 = HEAP32[$19>>2]|0;
       $1676 = HEAP32[$16>>2]|0;
       $1677 = (($1676) - ($1675))|0;
       HEAP32[$16>>2] = $1677;
       $1678 = HEAP32[$68>>2]|0;
       $1679 = HEAP32[$17>>2]|0;
       $1680 = (($1679) + ($1678))|0;
       HEAP32[$17>>2] = $1680;
       label = 303;
       break;
      }
      case 307: {
       label = 0;
       $1710 = HEAP32[$18>>2]|0;
       $1711 = (($1710) + -1)|0;
       HEAP32[$18>>2] = $1711;
       $1712 = ($1710|0)!=(0);
       if ($1712) {
        label = 308;
        continue L74;
       } else {
        label = 211;
       }
       break;
      }
      case 319: {
       label = 0;
       $1776 = HEAP32[$21>>2]|0;
       $1777 = HEAP32[$22>>2]|0;
       $1778 = ($1776>>>0)>=($1777>>>0);
       if ($1778) {
        label = 320;
        continue L74;
       } else {
        label = 325;
        break L218;
       }
       break;
      }
      case 327: {
       label = 0;
       $1805 = HEAP32[$16>>2]|0;
       $1806 = $1805 & 7;
       $1807 = HEAP32[$20>>2]|0;
       $1808 = $1807 >>> $1806;
       HEAP32[$20>>2] = $1808;
       $1809 = HEAP32[$16>>2]|0;
       $1810 = $1809 & 7;
       $1811 = HEAP32[$16>>2]|0;
       $1812 = (($1811) - ($1810))|0;
       HEAP32[$16>>2] = $1812;
       HEAP32[$18>>2] = 0;
       label = 328;
       continue L218;
       break;
      }
      case 328: {
       label = 0;
       $1813 = HEAP32[$18>>2]|0;
       $1814 = ($1813>>>0)<(4);
       if (!($1814)) {
        label = 348;
        continue L74;
       }
       $1815 = HEAP32[$16>>2]|0;
       $1816 = ($1815|0)!=(0);
       if (!($1816)) {
        label = 340;
        break L218;
       }
       $1817 = HEAP32[$16>>2]|0;
       $1818 = ($1817>>>0)<(8);
       if ($1818) {
        label = 331;
        continue L218;
       } else {
        label = 339;
        continue L218;
       }
       break;
      }
      case 331: {
       label = 0;
       $1819 = HEAP32[$21>>2]|0;
       $1820 = HEAP32[$22>>2]|0;
       $1821 = ($1819>>>0)>=($1820>>>0);
       if ($1821) {
        label = 332;
        continue L74;
       } else {
        label = 337;
        break L218;
       }
       break;
      }
      case 339: {
       label = 0;
       $1846 = HEAP32[$20>>2]|0;
       $1847 = $1846 & 255;
       HEAP32[$71>>2] = $1847;
       $1848 = HEAP32[$20>>2]|0;
       $1849 = $1848 >>> 8;
       HEAP32[$20>>2] = $1849;
       $1850 = HEAP32[$16>>2]|0;
       $1851 = (($1850) - 8)|0;
       HEAP32[$16>>2] = $1851;
       label = 347;
       continue L74;
       break;
      }
     }
     do {
      if ((label|0) == 124) {
       label = 0;
       $659 = HEAP32[$18>>2]|0;
       $660 = HEAP32[$8>>2]|0;
       $661 = ((($660)) + 44|0);
       $662 = ((($661)) + 8|0);
       $663 = HEAP32[$662>>2]|0;
       $664 = ($659>>>0)<($663>>>0);
       if ($664) {
        $665 = HEAP32[$16>>2]|0;
        $666 = ($665>>>0)<(3);
        if ($666) {
         label = 126;
         continue L218;
        } else {
         label = 134;
         continue L218;
        }
       } else {
        $712 = HEAP32[$8>>2]|0;
        $713 = ((($712)) + 44|0);
        $714 = ((($713)) + 8|0);
        HEAP32[$714>>2] = 19;
        label = 136;
        continue L218;
       }
      }
      else if ((label|0) == 167) {
       label = 0;
       $893 = HEAP32[$18>>2]|0;
       $894 = HEAP32[$8>>2]|0;
       $895 = ((($894)) + 44|0);
       $896 = HEAP32[$895>>2]|0;
       $897 = HEAP32[$8>>2]|0;
       $898 = ((($897)) + 44|0);
       $899 = ((($898)) + 4|0);
       $900 = HEAP32[$899>>2]|0;
       $901 = (($896) + ($900))|0;
       $902 = ($893>>>0)<($901>>>0);
       if (!($902)) {
        $1124 = HEAP32[$8>>2]|0;
        $1125 = ((($1124)) + 44|0);
        $1126 = HEAP32[$1125>>2]|0;
        $1127 = HEAP32[$8>>2]|0;
        $1128 = ((($1127)) + 44|0);
        $1129 = ((($1128)) + 4|0);
        $1130 = HEAP32[$1129>>2]|0;
        $1131 = (($1126) + ($1130))|0;
        $1132 = HEAP32[$18>>2]|0;
        $1133 = ($1131|0)!=($1132|0);
        if ($1133) {
         label = 208;
         continue L74;
        }
        $1135 = HEAP32[$8>>2]|0;
        $1136 = ((($1135)) + 64|0);
        $1137 = HEAP32[$8>>2]|0;
        $1138 = ((($1137)) + 10532|0);
        $1139 = HEAP32[$8>>2]|0;
        $1140 = ((($1139)) + 44|0);
        $1141 = HEAP32[$1140>>2]|0;
        _memcpy(($1136|0),($1138|0),($1141|0))|0;
        $1142 = HEAP32[$8>>2]|0;
        $1143 = ((($1142)) + 64|0);
        $1144 = ((($1143)) + 3488|0);
        $1145 = HEAP32[$8>>2]|0;
        $1146 = ((($1145)) + 10532|0);
        $1147 = HEAP32[$8>>2]|0;
        $1148 = ((($1147)) + 44|0);
        $1149 = HEAP32[$1148>>2]|0;
        $1150 = (($1146) + ($1149)|0);
        $1151 = HEAP32[$8>>2]|0;
        $1152 = ((($1151)) + 44|0);
        $1153 = ((($1152)) + 4|0);
        $1154 = HEAP32[$1153>>2]|0;
        _memcpy(($1144|0),($1150|0),($1154|0))|0;
        label = 210;
        break;
       }
       $903 = HEAP32[$16>>2]|0;
       $904 = ($903>>>0)<(15);
       if (!($904)) {
        label = 187;
        continue L218;
       }
       $905 = HEAP32[$22>>2]|0;
       $906 = HEAP32[$21>>2]|0;
       $907 = $905;
       $908 = $906;
       $909 = (($907) - ($908))|0;
       $910 = ($909|0)<(2);
       if ($910) {
        label = 170;
        continue L218;
       }
       $981 = HEAP32[$21>>2]|0;
       $982 = HEAP8[$981>>0]|0;
       $983 = $982&255;
       $984 = HEAP32[$16>>2]|0;
       $985 = $983 << $984;
       $986 = HEAP32[$21>>2]|0;
       $987 = ((($986)) + 1|0);
       $988 = HEAP8[$987>>0]|0;
       $989 = $988&255;
       $990 = HEAP32[$16>>2]|0;
       $991 = (($990) + 8)|0;
       $992 = $989 << $991;
       $993 = $985 | $992;
       $994 = HEAP32[$20>>2]|0;
       $995 = $994 | $993;
       HEAP32[$20>>2] = $995;
       $996 = HEAP32[$21>>2]|0;
       $997 = ((($996)) + 2|0);
       HEAP32[$21>>2] = $997;
       $998 = HEAP32[$16>>2]|0;
       $999 = (($998) + 16)|0;
       HEAP32[$16>>2] = $999;
       label = 187;
       continue L218;
      }
      else if ((label|0) == 257) {
       label = 0;
       $1435 = HEAP32[$18>>2]|0;
       $1436 = $1435 & 511;
       HEAP32[$18>>2] = $1436;
       $1437 = ($1436|0)==(256);
       if ($1437) {
        label = 316;
       } else {
        $1438 = HEAP32[$18>>2]|0;
        $1439 = (($1438) - 257)|0;
        $1440 = (2992 + ($1439<<2)|0);
        $1441 = HEAP32[$1440>>2]|0;
        HEAP32[$19>>2] = $1441;
        $1442 = HEAP32[$18>>2]|0;
        $1443 = (($1442) - 257)|0;
        $1444 = (3116 + ($1443<<2)|0);
        $1445 = HEAP32[$1444>>2]|0;
        HEAP32[$18>>2] = $1445;
        $1446 = HEAP32[$19>>2]|0;
        $1447 = ($1446|0)!=(0);
        if ($1447) {
         $1448 = HEAP32[$16>>2]|0;
         $1449 = HEAP32[$19>>2]|0;
         $1450 = ($1448>>>0)<($1449>>>0);
         if ($1450) {
          label = 260;
          continue L218;
         } else {
          label = 268;
          continue L218;
         }
        } else {
         label = 269;
        }
       }
      }
      else if ((label|0) == 303) {
       label = 0;
       $1681 = HEAP32[$23>>2]|0;
       $1682 = HEAP32[$11>>2]|0;
       $1683 = $1681;
       $1684 = $1682;
       $1685 = (($1683) - ($1684))|0;
       HEAP32[$26>>2] = $1685;
       $1686 = HEAP32[$17>>2]|0;
       $1687 = HEAP32[$26>>2]|0;
       $1688 = ($1686>>>0)>($1687>>>0);
       if ($1688) {
        $1689 = HEAP32[$14>>2]|0;
        $1690 = $1689 & 4;
        $1691 = ($1690|0)!=(0);
        if ($1691) {
         label = 305;
         continue L74;
        }
       }
       $1693 = HEAP32[$11>>2]|0;
       $1694 = HEAP32[$26>>2]|0;
       $1695 = HEAP32[$17>>2]|0;
       $1696 = (($1694) - ($1695))|0;
       $1697 = HEAP32[$25>>2]|0;
       $1698 = $1696 & $1697;
       $1699 = (($1693) + ($1698)|0);
       HEAP32[$57>>2] = $1699;
       $1700 = HEAP32[$23>>2]|0;
       $1701 = HEAP32[$57>>2]|0;
       $1702 = ($1700>>>0)>($1701>>>0);
       $1703 = HEAP32[$23>>2]|0;
       $1704 = HEAP32[$57>>2]|0;
       $1705 = $1702 ? $1703 : $1704;
       $1706 = HEAP32[$18>>2]|0;
       $1707 = (($1705) + ($1706)|0);
       $1708 = HEAP32[$24>>2]|0;
       $1709 = ($1707>>>0)>($1708>>>0);
       if ($1709) {
        label = 307;
        continue L218;
       }
       while(1) {
        $1728 = HEAP32[$57>>2]|0;
        $1729 = HEAP8[$1728>>0]|0;
        $1730 = HEAP32[$23>>2]|0;
        HEAP8[$1730>>0] = $1729;
        $1731 = HEAP32[$57>>2]|0;
        $1732 = ((($1731)) + 1|0);
        $1733 = HEAP8[$1732>>0]|0;
        $1734 = HEAP32[$23>>2]|0;
        $1735 = ((($1734)) + 1|0);
        HEAP8[$1735>>0] = $1733;
        $1736 = HEAP32[$57>>2]|0;
        $1737 = ((($1736)) + 2|0);
        $1738 = HEAP8[$1737>>0]|0;
        $1739 = HEAP32[$23>>2]|0;
        $1740 = ((($1739)) + 2|0);
        HEAP8[$1740>>0] = $1738;
        $1741 = HEAP32[$23>>2]|0;
        $1742 = ((($1741)) + 3|0);
        HEAP32[$23>>2] = $1742;
        $1743 = HEAP32[$57>>2]|0;
        $1744 = ((($1743)) + 3|0);
        HEAP32[$57>>2] = $1744;
        $1745 = HEAP32[$18>>2]|0;
        $1746 = (($1745) - 3)|0;
        HEAP32[$18>>2] = $1746;
        $1747 = ($1746|0)>(2);
        if (!($1747)) {
         break;
        }
       }
       $1748 = HEAP32[$18>>2]|0;
       $1749 = ($1748|0)>(0);
       if ($1749) {
        $1750 = HEAP32[$57>>2]|0;
        $1751 = HEAP8[$1750>>0]|0;
        $1752 = HEAP32[$23>>2]|0;
        HEAP8[$1752>>0] = $1751;
        $1753 = HEAP32[$18>>2]|0;
        $1754 = ($1753|0)>(1);
        if ($1754) {
         $1755 = HEAP32[$57>>2]|0;
         $1756 = ((($1755)) + 1|0);
         $1757 = HEAP8[$1756>>0]|0;
         $1758 = HEAP32[$23>>2]|0;
         $1759 = ((($1758)) + 1|0);
         HEAP8[$1759>>0] = $1757;
        }
        $1760 = HEAP32[$18>>2]|0;
        $1761 = HEAP32[$23>>2]|0;
        $1762 = (($1761) + ($1760)|0);
        HEAP32[$23>>2] = $1762;
        label = 211;
       } else {
        label = 211;
       }
      }
     } while(0);
     if ((label|0) == 210) {
      label = 0;
      $1155 = HEAP32[$8>>2]|0;
      $1156 = ((($1155)) + 24|0);
      $1157 = HEAP32[$1156>>2]|0;
      $1158 = (($1157) + -1)|0;
      HEAP32[$1156>>2] = $1158;
      label = 136;
      continue;
     }
     else if ((label|0) == 211) {
      label = 0;
      label = 212;
      continue;
     }
     else if ((label|0) == 269) {
      label = 0;
      $1493 = HEAP32[$16>>2]|0;
      $1494 = ($1493>>>0)<(15);
      if (!($1494)) {
       label = 288;
       continue;
      }
      $1495 = HEAP32[$22>>2]|0;
      $1496 = HEAP32[$21>>2]|0;
      $1497 = $1495;
      $1498 = $1496;
      $1499 = (($1497) - ($1498))|0;
      $1500 = ($1499|0)<(2);
      if ($1500) {
       label = 271;
       continue;
      }
      $1571 = HEAP32[$21>>2]|0;
      $1572 = HEAP8[$1571>>0]|0;
      $1573 = $1572&255;
      $1574 = HEAP32[$16>>2]|0;
      $1575 = $1573 << $1574;
      $1576 = HEAP32[$21>>2]|0;
      $1577 = ((($1576)) + 1|0);
      $1578 = HEAP8[$1577>>0]|0;
      $1579 = $1578&255;
      $1580 = HEAP32[$16>>2]|0;
      $1581 = (($1580) + 8)|0;
      $1582 = $1579 << $1581;
      $1583 = $1575 | $1582;
      $1584 = HEAP32[$20>>2]|0;
      $1585 = $1584 | $1583;
      HEAP32[$20>>2] = $1585;
      $1586 = HEAP32[$21>>2]|0;
      $1587 = ((($1586)) + 2|0);
      HEAP32[$21>>2] = $1587;
      $1588 = HEAP32[$16>>2]|0;
      $1589 = (($1588) + 16)|0;
      HEAP32[$16>>2] = $1589;
      label = 288;
      continue;
     }
     else if ((label|0) == 316) {
      label = 0;
      $1763 = HEAP32[$8>>2]|0;
      $1764 = ((($1763)) + 20|0);
      $1765 = HEAP32[$1764>>2]|0;
      $1766 = $1765 & 1;
      $1767 = ($1766|0)!=(0);
      $1768 = $1767 ^ 1;
      if ($1768) {
       label = 31;
       continue L74;
      }
      $1769 = HEAP32[$14>>2]|0;
      $1770 = $1769 & 1;
      $1771 = ($1770|0)!=(0);
      if (!($1771)) {
       label = 348;
       continue L74;
      }
      $1772 = HEAP32[$16>>2]|0;
      $1773 = HEAP32[$16>>2]|0;
      $1774 = $1773 & 7;
      $1775 = ($1772>>>0)<($1774>>>0);
      if ($1775) {
       label = 319;
       continue;
      } else {
       label = 327;
       continue;
      }
     }
    }
    switch (label|0) {
     case 60: {
      label = 0;
      $343 = HEAP32[$21>>2]|0;
      $344 = ((($343)) + 1|0);
      HEAP32[$21>>2] = $344;
      $345 = HEAP8[$343>>0]|0;
      $346 = $345&255;
      HEAP32[$29>>2] = $346;
      label = 61;
      continue L74;
      break;
     }
     case 82: {
      label = 0;
      $444 = HEAP32[$21>>2]|0;
      $445 = ((($444)) + 1|0);
      HEAP32[$21>>2] = $445;
      $446 = HEAP8[$444>>0]|0;
      $447 = $446&255;
      HEAP32[$30>>2] = $447;
      label = 83;
      continue L74;
      break;
     }
     case 120: {
      label = 0;
      $604 = HEAP32[$21>>2]|0;
      $605 = ((($604)) + 1|0);
      HEAP32[$21>>2] = $605;
      $606 = HEAP8[$604>>0]|0;
      $607 = $606&255;
      HEAP32[$34>>2] = $607;
      label = 121;
      continue L74;
      break;
     }
     case 132: {
      label = 0;
      $681 = HEAP32[$21>>2]|0;
      $682 = ((($681)) + 1|0);
      HEAP32[$21>>2] = $682;
      $683 = HEAP8[$681>>0]|0;
      $684 = $683&255;
      HEAP32[$36>>2] = $684;
      label = 133;
      continue L74;
      break;
     }
     case 178: {
      label = 0;
      $954 = HEAP32[$21>>2]|0;
      $955 = HEAP32[$22>>2]|0;
      $956 = ($954>>>0)>=($955>>>0);
      if ($956) {
       label = 179;
       continue L74;
      }
      $968 = HEAP32[$21>>2]|0;
      $969 = ((($968)) + 1|0);
      HEAP32[$21>>2] = $969;
      $970 = HEAP8[$968>>0]|0;
      $971 = $970&255;
      HEAP32[$55>>2] = $971;
      label = 185;
      continue L74;
      break;
     }
     case 202: {
      label = 0;
      $1073 = HEAP32[$21>>2]|0;
      $1074 = ((($1073)) + 1|0);
      HEAP32[$21>>2] = $1074;
      $1075 = HEAP8[$1073>>0]|0;
      $1076 = $1075&255;
      HEAP32[$56>>2] = $1076;
      label = 203;
      continue L74;
      break;
     }
     case 224: {
      label = 0;
      $1220 = HEAP32[$21>>2]|0;
      $1221 = HEAP32[$22>>2]|0;
      $1222 = ($1220>>>0)>=($1221>>>0);
      if ($1222) {
       label = 225;
       continue L74;
      }
      $1234 = HEAP32[$21>>2]|0;
      $1235 = ((($1234)) + 1|0);
      HEAP32[$21>>2] = $1235;
      $1236 = HEAP8[$1234>>0]|0;
      $1237 = $1236&255;
      HEAP32[$60>>2] = $1237;
      label = 231;
      continue L74;
      break;
     }
     case 266: {
      label = 0;
      $1465 = HEAP32[$21>>2]|0;
      $1466 = ((($1465)) + 1|0);
      HEAP32[$21>>2] = $1466;
      $1467 = HEAP8[$1465>>0]|0;
      $1468 = $1467&255;
      HEAP32[$64>>2] = $1468;
      label = 267;
      continue L74;
      break;
     }
     case 279: {
      label = 0;
      $1544 = HEAP32[$21>>2]|0;
      $1545 = HEAP32[$22>>2]|0;
      $1546 = ($1544>>>0)>=($1545>>>0);
      if ($1546) {
       label = 280;
       continue L74;
      }
      $1558 = HEAP32[$21>>2]|0;
      $1559 = ((($1558)) + 1|0);
      HEAP32[$21>>2] = $1559;
      $1560 = HEAP8[$1558>>0]|0;
      $1561 = $1560&255;
      HEAP32[$67>>2] = $1561;
      label = 286;
      continue L74;
      break;
     }
     case 300: {
      label = 0;
      $1653 = HEAP32[$21>>2]|0;
      $1654 = ((($1653)) + 1|0);
      HEAP32[$21>>2] = $1654;
      $1655 = HEAP8[$1653>>0]|0;
      $1656 = $1655&255;
      HEAP32[$69>>2] = $1656;
      label = 301;
      continue L74;
      break;
     }
     case 325: {
      label = 0;
      $1790 = HEAP32[$21>>2]|0;
      $1791 = ((($1790)) + 1|0);
      HEAP32[$21>>2] = $1791;
      $1792 = HEAP8[$1790>>0]|0;
      $1793 = $1792&255;
      HEAP32[$70>>2] = $1793;
      label = 326;
      continue L74;
      break;
     }
     case 337: {
      label = 0;
      $1833 = HEAP32[$21>>2]|0;
      $1834 = ((($1833)) + 1|0);
      HEAP32[$21>>2] = $1834;
      $1835 = HEAP8[$1833>>0]|0;
      $1836 = $1835&255;
      HEAP32[$72>>2] = $1836;
      label = 338;
      continue L74;
      break;
     }
     case 340: {
      label = 0;
      $1852 = HEAP32[$21>>2]|0;
      $1853 = HEAP32[$22>>2]|0;
      $1854 = ($1852>>>0)>=($1853>>>0);
      if ($1854) {
       label = 341;
       continue L74;
      }
      $1866 = HEAP32[$21>>2]|0;
      $1867 = ((($1866)) + 1|0);
      HEAP32[$21>>2] = $1867;
      $1868 = HEAP8[$1866>>0]|0;
      $1869 = $1868&255;
      HEAP32[$71>>2] = $1869;
      label = 347;
      continue L74;
      break;
     }
    }
   }
   if ((label|0) == 351) {
    $1916 = HEAP32[$12>>2]|0;
    HEAP32[$73>>2] = $1916;
    $1917 = HEAP32[$13>>2]|0;
    $1918 = HEAP32[$1917>>2]|0;
    HEAP32[$74>>2] = $1918;
    $1919 = HEAP32[$8>>2]|0;
    $1920 = ((($1919)) + 28|0);
    $1921 = HEAP32[$1920>>2]|0;
    $1922 = $1921 & 65535;
    HEAP32[$76>>2] = $1922;
    $1923 = HEAP32[$8>>2]|0;
    $1924 = ((($1923)) + 28|0);
    $1925 = HEAP32[$1924>>2]|0;
    $1926 = $1925 >>> 16;
    HEAP32[$77>>2] = $1926;
    $1927 = HEAP32[$74>>2]|0;
    $1928 = (($1927>>>0) % 5552)&-1;
    HEAP32[$78>>2] = $1928;
    while(1) {
     $1929 = HEAP32[$74>>2]|0;
     $1930 = ($1929|0)!=(0);
     if (!($1930)) {
      break;
     }
     HEAP32[$75>>2] = 0;
     while(1) {
      $1931 = HEAP32[$75>>2]|0;
      $1932 = (($1931) + 7)|0;
      $1933 = HEAP32[$78>>2]|0;
      $1934 = ($1932>>>0)<($1933>>>0);
      if (!($1934)) {
       break;
      }
      $1935 = HEAP32[$73>>2]|0;
      $1936 = HEAP8[$1935>>0]|0;
      $1937 = $1936&255;
      $1938 = HEAP32[$76>>2]|0;
      $1939 = (($1938) + ($1937))|0;
      HEAP32[$76>>2] = $1939;
      $1940 = HEAP32[$76>>2]|0;
      $1941 = HEAP32[$77>>2]|0;
      $1942 = (($1941) + ($1940))|0;
      HEAP32[$77>>2] = $1942;
      $1943 = HEAP32[$73>>2]|0;
      $1944 = ((($1943)) + 1|0);
      $1945 = HEAP8[$1944>>0]|0;
      $1946 = $1945&255;
      $1947 = HEAP32[$76>>2]|0;
      $1948 = (($1947) + ($1946))|0;
      HEAP32[$76>>2] = $1948;
      $1949 = HEAP32[$76>>2]|0;
      $1950 = HEAP32[$77>>2]|0;
      $1951 = (($1950) + ($1949))|0;
      HEAP32[$77>>2] = $1951;
      $1952 = HEAP32[$73>>2]|0;
      $1953 = ((($1952)) + 2|0);
      $1954 = HEAP8[$1953>>0]|0;
      $1955 = $1954&255;
      $1956 = HEAP32[$76>>2]|0;
      $1957 = (($1956) + ($1955))|0;
      HEAP32[$76>>2] = $1957;
      $1958 = HEAP32[$76>>2]|0;
      $1959 = HEAP32[$77>>2]|0;
      $1960 = (($1959) + ($1958))|0;
      HEAP32[$77>>2] = $1960;
      $1961 = HEAP32[$73>>2]|0;
      $1962 = ((($1961)) + 3|0);
      $1963 = HEAP8[$1962>>0]|0;
      $1964 = $1963&255;
      $1965 = HEAP32[$76>>2]|0;
      $1966 = (($1965) + ($1964))|0;
      HEAP32[$76>>2] = $1966;
      $1967 = HEAP32[$76>>2]|0;
      $1968 = HEAP32[$77>>2]|0;
      $1969 = (($1968) + ($1967))|0;
      HEAP32[$77>>2] = $1969;
      $1970 = HEAP32[$73>>2]|0;
      $1971 = ((($1970)) + 4|0);
      $1972 = HEAP8[$1971>>0]|0;
      $1973 = $1972&255;
      $1974 = HEAP32[$76>>2]|0;
      $1975 = (($1974) + ($1973))|0;
      HEAP32[$76>>2] = $1975;
      $1976 = HEAP32[$76>>2]|0;
      $1977 = HEAP32[$77>>2]|0;
      $1978 = (($1977) + ($1976))|0;
      HEAP32[$77>>2] = $1978;
      $1979 = HEAP32[$73>>2]|0;
      $1980 = ((($1979)) + 5|0);
      $1981 = HEAP8[$1980>>0]|0;
      $1982 = $1981&255;
      $1983 = HEAP32[$76>>2]|0;
      $1984 = (($1983) + ($1982))|0;
      HEAP32[$76>>2] = $1984;
      $1985 = HEAP32[$76>>2]|0;
      $1986 = HEAP32[$77>>2]|0;
      $1987 = (($1986) + ($1985))|0;
      HEAP32[$77>>2] = $1987;
      $1988 = HEAP32[$73>>2]|0;
      $1989 = ((($1988)) + 6|0);
      $1990 = HEAP8[$1989>>0]|0;
      $1991 = $1990&255;
      $1992 = HEAP32[$76>>2]|0;
      $1993 = (($1992) + ($1991))|0;
      HEAP32[$76>>2] = $1993;
      $1994 = HEAP32[$76>>2]|0;
      $1995 = HEAP32[$77>>2]|0;
      $1996 = (($1995) + ($1994))|0;
      HEAP32[$77>>2] = $1996;
      $1997 = HEAP32[$73>>2]|0;
      $1998 = ((($1997)) + 7|0);
      $1999 = HEAP8[$1998>>0]|0;
      $2000 = $1999&255;
      $2001 = HEAP32[$76>>2]|0;
      $2002 = (($2001) + ($2000))|0;
      HEAP32[$76>>2] = $2002;
      $2003 = HEAP32[$76>>2]|0;
      $2004 = HEAP32[$77>>2]|0;
      $2005 = (($2004) + ($2003))|0;
      HEAP32[$77>>2] = $2005;
      $2006 = HEAP32[$75>>2]|0;
      $2007 = (($2006) + 8)|0;
      HEAP32[$75>>2] = $2007;
      $2008 = HEAP32[$73>>2]|0;
      $2009 = ((($2008)) + 8|0);
      HEAP32[$73>>2] = $2009;
     }
     while(1) {
      $2010 = HEAP32[$75>>2]|0;
      $2011 = HEAP32[$78>>2]|0;
      $2012 = ($2010>>>0)<($2011>>>0);
      if (!($2012)) {
       break;
      }
      $2013 = HEAP32[$73>>2]|0;
      $2014 = ((($2013)) + 1|0);
      HEAP32[$73>>2] = $2014;
      $2015 = HEAP8[$2013>>0]|0;
      $2016 = $2015&255;
      $2017 = HEAP32[$76>>2]|0;
      $2018 = (($2017) + ($2016))|0;
      HEAP32[$76>>2] = $2018;
      $2019 = HEAP32[$76>>2]|0;
      $2020 = HEAP32[$77>>2]|0;
      $2021 = (($2020) + ($2019))|0;
      HEAP32[$77>>2] = $2021;
      $2022 = HEAP32[$75>>2]|0;
      $2023 = (($2022) + 1)|0;
      HEAP32[$75>>2] = $2023;
     }
     $2024 = HEAP32[$76>>2]|0;
     $2025 = (($2024>>>0) % 65521)&-1;
     HEAP32[$76>>2] = $2025;
     $2026 = HEAP32[$77>>2]|0;
     $2027 = (($2026>>>0) % 65521)&-1;
     HEAP32[$77>>2] = $2027;
     $2028 = HEAP32[$78>>2]|0;
     $2029 = HEAP32[$74>>2]|0;
     $2030 = (($2029) - ($2028))|0;
     HEAP32[$74>>2] = $2030;
     HEAP32[$78>>2] = 5552;
    }
    $2031 = HEAP32[$77>>2]|0;
    $2032 = $2031 << 16;
    $2033 = HEAP32[$76>>2]|0;
    $2034 = (($2032) + ($2033))|0;
    $2035 = HEAP32[$8>>2]|0;
    $2036 = ((($2035)) + 28|0);
    HEAP32[$2036>>2] = $2034;
    $2037 = HEAP32[$15>>2]|0;
    $2038 = ($2037|0)==(0);
    if ($2038) {
     $2039 = HEAP32[$14>>2]|0;
     $2040 = $2039 & 1;
     $2041 = ($2040|0)!=(0);
     if ($2041) {
      $2042 = HEAP32[$8>>2]|0;
      $2043 = ((($2042)) + 28|0);
      $2044 = HEAP32[$2043>>2]|0;
      $2045 = HEAP32[$8>>2]|0;
      $2046 = ((($2045)) + 16|0);
      $2047 = HEAP32[$2046>>2]|0;
      $2048 = ($2044|0)!=($2047|0);
      if ($2048) {
       HEAP32[$15>>2] = -2;
      }
     }
    }
   }
   $2049 = HEAP32[$15>>2]|0;
   HEAP32[$7>>2] = $2049;
   $2050 = HEAP32[$7>>2]|0;
   STACKTOP = sp;return ($2050|0);
  }
 }
 $110 = HEAP32[$13>>2]|0;
 HEAP32[$110>>2] = 0;
 $111 = HEAP32[$10>>2]|0;
 HEAP32[$111>>2] = 0;
 HEAP32[$7>>2] = -3;
 $2050 = HEAP32[$7>>2]|0;
 STACKTOP = sp;return ($2050|0);
}
function _InitAudioDevice() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 108|0;
 $1 = sp + 104|0;
 $2 = sp + 44|0;
 _mal_context_config_init($0,2);
 $3 = (_mal_context_init(0,0,$0,24268)|0);
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 _mal_device_config_init($2,5,2,44100,0,8);
 $6 = (_mal_device_init(24268,0,0,$2,0,24376)|0);
 HEAP32[$1>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  (_mal_context_uninit(24268)|0);
  STACKTOP = sp;return;
 }
 $9 = (_mal_device_start(24376)|0);
 HEAP32[$1>>2] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  _mal_device_uninit(24376);
  (_mal_context_uninit(24268)|0);
  STACKTOP = sp;return;
 }
 $12 = (_mal_mutex_init(24268,63104)|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  _TraceLog(2,10381,$vararg_buffer);
  _mal_device_uninit(24376);
  (_mal_context_uninit(24268)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer1>>2] = (24444);
  _TraceLog(0,10421,$vararg_buffer1);
  $14 = HEAP32[6067]|0;
  $15 = (_mal_get_backend_name($14)|0);
  HEAP32[$vararg_buffer3>>2] = $15;
  _TraceLog(0,10463,$vararg_buffer3);
  $16 = HEAP32[(24384)>>2]|0;
  $17 = (_mal_get_format_name($16)|0);
  HEAP32[$vararg_buffer6>>2] = $17;
  _TraceLog(0,10481,$vararg_buffer6);
  $18 = HEAP32[(24388)>>2]|0;
  HEAP32[$vararg_buffer9>>2] = $18;
  _TraceLog(0,10498,$vararg_buffer9);
  $19 = HEAP32[(24392)>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $19;
  _TraceLog(0,10517,$vararg_buffer12);
  HEAP32[15784] = 1;
  STACKTOP = sp;return;
 }
}
function _OnLog_MAL($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[$5>>2]|0;
 _TraceLog(2,$6,$vararg_buffer);
 STACKTOP = sp;return;
}
function _mal_context_config_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp;
 HEAP32[$2>>2] = $1;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;
 STACKTOP = sp;return;
}
function _mal_context_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 40|0;
 $5 = sp + 36|0;
 $6 = sp + 32|0;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 $12 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $13 = HEAP32[$8>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  HEAP32[$4>>2] = -2;
  $48 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($48|0);
 }
 $15 = HEAP32[$8>>2]|0;
 dest=$15; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $16 = HEAP32[$7>>2]|0;
 $17 = ($16|0)!=(0|0);
 $18 = HEAP32[$8>>2]|0;
 $19 = ((($18)) + 4|0);
 if ($17) {
  $20 = HEAP32[$7>>2]|0;
  ;HEAP32[$19>>2]=HEAP32[$20>>2]|0;HEAP32[$19+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$20+8>>2]|0;
 } else {
  _mal_context_config_init($9,0);
  ;HEAP32[$19>>2]=HEAP32[$9>>2]|0;HEAP32[$19+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$9+8>>2]|0;
 }
 $21 = HEAP32[$8>>2]|0;
 $22 = (_mal_context_init_backend_apis($21)|0);
 HEAP32[$10>>2] = $22;
 $23 = HEAP32[$10>>2]|0;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = HEAP32[$10>>2]|0;
  HEAP32[$4>>2] = $25;
  $48 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($48|0);
 }
 $26 = HEAP32[$5>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  HEAP32[$5>>2] = 3524;
  HEAP32[$6>>2] = 9;
 }
 $28 = HEAP32[$5>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  ___assert_fail((13732|0),(10766|0),9279,(13755|0));
  // unreachable;
 }
 HEAP32[$11>>2] = 0;
 while(1) {
  $30 = HEAP32[$11>>2]|0;
  $31 = HEAP32[$6>>2]|0;
  $32 = ($30>>>0)<($31>>>0);
  if (!($32)) {
   label = 19;
   break;
  }
  $33 = HEAP32[$5>>2]|0;
  $34 = HEAP32[$11>>2]|0;
  $35 = (($33) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$12>>2] = $36;
  HEAP32[$10>>2] = -5;
  $37 = HEAP32[$12>>2]|0;
  $cond = ($37|0)==(8);
  if ($cond) {
   $38 = HEAP32[$8>>2]|0;
   $39 = (_mal_context_init__sdl($38)|0);
   HEAP32[$10>>2] = $39;
  }
  $40 = HEAP32[$10>>2]|0;
  $41 = ($40|0)==(0);
  if ($41) {
   label = 17;
   break;
  }
  $45 = HEAP32[$11>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$11>>2] = $46;
 }
 if ((label|0) == 17) {
  $42 = HEAP32[$12>>2]|0;
  $43 = HEAP32[$8>>2]|0;
  HEAP32[$43>>2] = $42;
  $44 = HEAP32[$10>>2]|0;
  HEAP32[$4>>2] = $44;
  $48 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($48|0);
 }
 else if ((label|0) == 19) {
  $47 = HEAP32[$8>>2]|0;
  dest=$47; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$4>>2] = -5;
  $48 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _OnSendAudioDataToDevice($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4144|0);
 $vararg_buffer = sp;
 $3 = sp + 4140|0;
 $4 = sp + 4136|0;
 $5 = sp + 4132|0;
 $6 = sp + 4128|0;
 $7 = sp + 4124|0;
 $8 = sp + 4120|0;
 $9 = sp + 24|0;
 $10 = sp + 20|0;
 $11 = sp + 16|0;
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $15 = HEAP32[$5>>2]|0;
 $16 = HEAP32[$4>>2]|0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($16, $19)|0;
 $21 = HEAP32[$3>>2]|0;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_mal_get_sample_size_in_bytes($23)|0);
 $25 = Math_imul($20, $24)|0;
 _memset(($15|0),0,($25|0))|0;
 _mal_mutex_lock(63104);
 $26 = HEAP32[15785]|0;
 HEAP32[$6>>2] = $26;
 while(1) {
  $27 = HEAP32[$6>>2]|0;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   break;
  }
  $29 = HEAP32[$6>>2]|0;
  $30 = ((($29)) + 38068|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0);
  L4: do {
   if ($32) {
    $33 = HEAP32[$6>>2]|0;
    $34 = ((($33)) + 38072|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)!=(0);
    if (!($36)) {
     HEAP32[$7>>2] = 0;
     while(1) {
      $37 = HEAP32[$7>>2]|0;
      $38 = HEAP32[$4>>2]|0;
      $39 = ($37>>>0)>($38>>>0);
      if ($39) {
       break;
      }
      $40 = HEAP32[$7>>2]|0;
      $41 = HEAP32[$4>>2]|0;
      $42 = ($40|0)==($41|0);
      if ($42) {
       break L4;
      }
      $43 = HEAP32[$4>>2]|0;
      $44 = HEAP32[$7>>2]|0;
      $45 = (($43) - ($44))|0;
      HEAP32[$8>>2] = $45;
      while(1) {
       $46 = HEAP32[$8>>2]|0;
       $47 = ($46>>>0)>(0);
       if (!($47)) {
        break;
       }
       $48 = HEAP32[$8>>2]|0;
       HEAP32[$10>>2] = $48;
       $49 = HEAP32[$10>>2]|0;
       $50 = ($49>>>0)>(512);
       $$ = $50 ? 512 : $48;
       HEAP32[$10>>2] = $$;
       $51 = HEAP32[$6>>2]|0;
       $52 = ((($51)) + 38076|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ($53|0)!=(0);
       $55 = $54 ^ 1;
       $56 = $55&1;
       HEAP32[$11>>2] = $56;
       $57 = HEAP32[$6>>2]|0;
       $58 = HEAP32[$10>>2]|0;
       $59 = HEAP32[$11>>2]|0;
       $60 = (_mal_dsp_read_frames_ex($57,$58,$9,$59)|0);
       HEAP32[$12>>2] = $60;
       $61 = HEAP32[$12>>2]|0;
       $62 = ($61>>>0)>(0);
       if ($62) {
        $63 = HEAP32[$5>>2]|0;
        $64 = HEAP32[$7>>2]|0;
        $65 = HEAP32[(24388)>>2]|0;
        $66 = Math_imul($64, $65)|0;
        $67 = (($63) + ($66<<2)|0);
        HEAP32[$13>>2] = $67;
        HEAP32[$14>>2] = $9;
        $68 = HEAP32[$13>>2]|0;
        $69 = HEAP32[$14>>2]|0;
        $70 = HEAP32[$12>>2]|0;
        $71 = HEAP32[$6>>2]|0;
        $72 = ((($71)) + 38060|0);
        $73 = +HEAPF32[$72>>2];
        _MixFrames($68,$69,$70,$73);
        $74 = HEAP32[$12>>2]|0;
        $75 = HEAP32[$8>>2]|0;
        $76 = (($75) - ($74))|0;
        HEAP32[$8>>2] = $76;
        $77 = HEAP32[$12>>2]|0;
        $78 = HEAP32[$7>>2]|0;
        $79 = (($78) + ($77))|0;
        HEAP32[$7>>2] = $79;
       }
       $80 = HEAP32[$12>>2]|0;
       $81 = HEAP32[$10>>2]|0;
       $82 = ($80>>>0)<($81>>>0);
       if (!($82)) {
        continue;
       }
       $83 = HEAP32[$6>>2]|0;
       $84 = ((($83)) + 38076|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($85|0)!=(0);
       $87 = HEAP32[$6>>2]|0;
       if (!($86)) {
        label = 15;
        break;
       }
       $88 = ((($87)) + 38092|0);
       HEAP32[$88>>2] = 0;
      }
      if ((label|0) == 15) {
       label = 0;
       _StopAudioBuffer($87);
      }
      $89 = HEAP32[$8>>2]|0;
      $90 = ($89>>>0)>(0);
      if ($90) {
       break L4;
      }
     }
     _TraceLog(3,13656,$vararg_buffer);
    }
   }
  } while(0);
  $91 = HEAP32[$6>>2]|0;
  $92 = ((($91)) + 38100|0);
  $93 = HEAP32[$92>>2]|0;
  HEAP32[$6>>2] = $93;
 }
 _mal_mutex_unlock(63104);
 $94 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($94|0);
}
function _mal_device_config_init($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 76|0;
 $7 = sp + 72|0;
 $8 = sp + 68|0;
 $9 = sp + 64|0;
 $10 = sp + 60|0;
 $11 = sp;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 HEAP32[$10>>2] = $5;
 dest=$11; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $12 = HEAP32[$6>>2]|0;
 HEAP32[$11>>2] = $12;
 $13 = HEAP32[$7>>2]|0;
 $14 = ((($11)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$8>>2]|0;
 $16 = ((($11)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = HEAP32[$9>>2]|0;
 $18 = ((($11)) + 44|0);
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[$10>>2]|0;
 $20 = ((($11)) + 48|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$7>>2]|0;
 switch ($21|0) {
 case 1:  {
  $22 = ((($11)) + 12|0);
  HEAP8[$22>>0] = 3;
  break;
 }
 case 2:  {
  $23 = ((($11)) + 12|0);
  HEAP8[$23>>0] = 1;
  $24 = ((($11)) + 12|0);
  $25 = ((($24)) + 1|0);
  HEAP8[$25>>0] = 2;
  break;
 }
 case 3:  {
  $26 = ((($11)) + 12|0);
  HEAP8[$26>>0] = 1;
  $27 = ((($11)) + 12|0);
  $28 = ((($27)) + 1|0);
  HEAP8[$28>>0] = 2;
  $29 = ((($11)) + 12|0);
  $30 = ((($29)) + 2|0);
  HEAP8[$30>>0] = 4;
  break;
 }
 case 4:  {
  $31 = ((($11)) + 12|0);
  HEAP8[$31>>0] = 1;
  $32 = ((($11)) + 12|0);
  $33 = ((($32)) + 1|0);
  HEAP8[$33>>0] = 2;
  $34 = ((($11)) + 12|0);
  $35 = ((($34)) + 2|0);
  HEAP8[$35>>0] = 5;
  $36 = ((($11)) + 12|0);
  $37 = ((($36)) + 3|0);
  HEAP8[$37>>0] = 6;
  break;
 }
 case 5:  {
  $38 = ((($11)) + 12|0);
  HEAP8[$38>>0] = 1;
  $39 = ((($11)) + 12|0);
  $40 = ((($39)) + 1|0);
  HEAP8[$40>>0] = 2;
  $41 = ((($11)) + 12|0);
  $42 = ((($41)) + 2|0);
  HEAP8[$42>>0] = 5;
  $43 = ((($11)) + 12|0);
  $44 = ((($43)) + 3|0);
  HEAP8[$44>>0] = 6;
  $45 = ((($11)) + 12|0);
  $46 = ((($45)) + 4|0);
  HEAP8[$46>>0] = 4;
  break;
 }
 case 6:  {
  $47 = ((($11)) + 12|0);
  HEAP8[$47>>0] = 1;
  $48 = ((($11)) + 12|0);
  $49 = ((($48)) + 1|0);
  HEAP8[$49>>0] = 2;
  $50 = ((($11)) + 12|0);
  $51 = ((($50)) + 2|0);
  HEAP8[$51>>0] = 3;
  $52 = ((($11)) + 12|0);
  $53 = ((($52)) + 3|0);
  HEAP8[$53>>0] = 4;
  $54 = ((($11)) + 12|0);
  $55 = ((($54)) + 4|0);
  HEAP8[$55>>0] = 5;
  $56 = ((($11)) + 12|0);
  $57 = ((($56)) + 5|0);
  HEAP8[$57>>0] = 6;
  break;
 }
 case 8:  {
  $58 = ((($11)) + 12|0);
  HEAP8[$58>>0] = 1;
  $59 = ((($11)) + 12|0);
  $60 = ((($59)) + 1|0);
  HEAP8[$60>>0] = 2;
  $61 = ((($11)) + 12|0);
  $62 = ((($61)) + 2|0);
  HEAP8[$62>>0] = 3;
  $63 = ((($11)) + 12|0);
  $64 = ((($63)) + 3|0);
  HEAP8[$64>>0] = 4;
  $65 = ((($11)) + 12|0);
  $66 = ((($65)) + 4|0);
  HEAP8[$66>>0] = 5;
  $67 = ((($11)) + 12|0);
  $68 = ((($67)) + 5|0);
  HEAP8[$68>>0] = 6;
  $69 = ((($11)) + 12|0);
  $70 = ((($69)) + 6|0);
  HEAP8[$70>>0] = 10;
  $71 = ((($11)) + 12|0);
  $72 = ((($71)) + 7|0);
  HEAP8[$72>>0] = 11;
  break;
 }
 default: {
 }
 }
 dest=$0; src=$11; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _mal_device_init($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $6 = sp + 156|0;
 $7 = sp + 152|0;
 $8 = sp + 148|0;
 $9 = sp + 144|0;
 $10 = sp + 140|0;
 $11 = sp + 136|0;
 $12 = sp + 132|0;
 $13 = sp + 72|0;
 $14 = sp + 68|0;
 $15 = sp;
 HEAP32[$7>>2] = $0;
 HEAP32[$8>>2] = $1;
 HEAP32[$9>>2] = $2;
 HEAP32[$10>>2] = $3;
 HEAP32[$11>>2] = $4;
 HEAP32[$12>>2] = $5;
 $16 = HEAP32[$12>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = HEAP32[$12>>2]|0;
  $19 = (_mal_post_error($18,11671,-2)|0);
  HEAP32[$6>>2] = $19;
  $308 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($308|0);
 }
 $20 = HEAP32[$10>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = HEAP32[$12>>2]|0;
  $23 = (_mal_post_error($22,11738,-2)|0);
  HEAP32[$6>>2] = $23;
  $308 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($308|0);
 }
 $24 = HEAP32[$10>>2]|0;
 dest=$13; src=$24; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $25 = HEAP32[$12>>2]|0;
 _memset(($25|0),0,38728)|0;
 $26 = HEAP32[$7>>2]|0;
 $27 = HEAP32[$12>>2]|0;
 HEAP32[$27>>2] = $26;
 $28 = HEAP32[$11>>2]|0;
 $29 = HEAP32[$12>>2]|0;
 $30 = ((($29)) + 64|0);
 HEAP32[$30>>2] = $28;
 $31 = ((($13)) + 52|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$12>>2]|0;
 $34 = ((($33)) + 60|0);
 HEAP32[$34>>2] = $32;
 $35 = ((($13)) + 48|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$12>>2]|0;
 $38 = ((($37)) + 56|0);
 HEAP32[$38>>2] = $36;
 $39 = ((($13)) + 44|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$12>>2]|0;
 $42 = ((($41)) + 52|0);
 HEAP32[$42>>2] = $40;
 $43 = HEAP32[$12>>2]|0;
 $44 = $43;
 $45 = (($44>>>0) % 4)&-1;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = HEAP32[$7>>2]|0;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0|0);
  if ($50) {
   $51 = HEAP32[$7>>2]|0;
   $52 = ((($51)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP32[$7>>2]|0;
   $55 = HEAP32[$12>>2]|0;
   FUNCTION_TABLE_viii[$53 & 63]($54,$55,11805);
  }
 }
 $56 = HEAP32[$7>>2]|0;
 $57 = ($56|0)==(0|0);
 if ($57) {
  $58 = HEAP32[$12>>2]|0;
  $59 = (_mal_post_error($58,11914,-2)|0);
  HEAP32[$6>>2] = $59;
  $308 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($308|0);
 }
 $60 = ((($13)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(0);
 if ($62) {
  $63 = HEAP32[$12>>2]|0;
  $64 = (_mal_post_error($63,11982,-26)|0);
  HEAP32[$6>>2] = $64;
  $308 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($308|0);
 }
 $65 = ((($13)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66>>>0)>(18);
 if ($67) {
  $68 = HEAP32[$12>>2]|0;
  $69 = (_mal_post_error($68,12069,-26)|0);
  HEAP32[$6>>2] = $69;
  $308 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($308|0);
 }
 $70 = ((($13)) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)==(0);
 if ($72) {
  $73 = HEAP32[$12>>2]|0;
  $74 = (_mal_post_error($73,12150,-26)|0);
  HEAP32[$6>>2] = $74;
  $308 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($308|0);
 }
 $75 = HEAP32[$10>>2]|0;
 $76 = ((($75)) + 12|0);
 $77 = HEAP32[$10>>2]|0;
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (_mal__is_channel_map_valid($76,$79)|0);
 $81 = ($80|0)!=(0);
 if (!($81)) {
  $82 = HEAP32[$12>>2]|0;
  $83 = (_mal_post_error($82,12235,-26)|0);
  HEAP32[$6>>2] = $83;
  $308 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($308|0);
 }
 $84 = ((($13)) + 32|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)==(0);
 if ($86) {
  $87 = ((($13)) + 8|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88>>>0) / 1000)&-1;
  $90 = ($89*25)|0;
  $91 = ((($13)) + 32|0);
  HEAP32[$91>>2] = $90;
  $92 = HEAP32[$12>>2]|0;
  $93 = ((($92)) + 620|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94 & -2;
  $96 = $95 | 1;
  HEAP8[$93>>0] = $96;
 }
 $97 = ((($13)) + 36|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(0);
 if ($99) {
  $100 = ((($13)) + 36|0);
  HEAP32[$100>>2] = 2;
  $101 = HEAP32[$12>>2]|0;
  $102 = ((($101)) + 620|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103 & -3;
  $105 = $104 | 2;
  HEAP8[$102>>0] = $105;
 }
 $106 = HEAP32[$8>>2]|0;
 $107 = HEAP32[$12>>2]|0;
 $108 = ((($107)) + 4|0);
 HEAP32[$108>>2] = $106;
 $109 = HEAP32[$13>>2]|0;
 $110 = HEAP32[$12>>2]|0;
 $111 = ((($110)) + 8|0);
 HEAP32[$111>>2] = $109;
 $112 = ((($13)) + 4|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = HEAP32[$12>>2]|0;
 $115 = ((($114)) + 12|0);
 HEAP32[$115>>2] = $113;
 $116 = ((($13)) + 12|0);
 $117 = ((($13)) + 12|0);
 $118 = ((($13)) + 4|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $119;
 _memcpy(($116|0),($117|0),($120|0))|0;
 $121 = ((($13)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = HEAP32[$12>>2]|0;
 $124 = ((($123)) + 16|0);
 HEAP32[$124>>2] = $122;
 $125 = ((($13)) + 32|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = HEAP32[$12>>2]|0;
 $128 = ((($127)) + 40|0);
 HEAP32[$128>>2] = $126;
 $129 = ((($13)) + 36|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = HEAP32[$12>>2]|0;
 $132 = ((($131)) + 44|0);
 HEAP32[$132>>2] = $130;
 $133 = HEAP32[$12>>2]|0;
 $134 = ((($133)) + 8|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$12>>2]|0;
 $137 = ((($136)) + 624|0);
 HEAP32[$137>>2] = $135;
 $138 = HEAP32[$12>>2]|0;
 $139 = ((($138)) + 12|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = HEAP32[$12>>2]|0;
 $142 = ((($141)) + 628|0);
 HEAP32[$142>>2] = $140;
 $143 = HEAP32[$12>>2]|0;
 $144 = ((($143)) + 16|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = HEAP32[$12>>2]|0;
 $147 = ((($146)) + 632|0);
 HEAP32[$147>>2] = $145;
 $148 = HEAP32[$12>>2]|0;
 $149 = ((($148)) + 636|0);
 $150 = HEAP32[$12>>2]|0;
 $151 = ((($150)) + 20|0);
 ;HEAP32[$149>>2]=HEAP32[$151>>2]|0;HEAP32[$149+4>>2]=HEAP32[$151+4>>2]|0;HEAP32[$149+8>>2]=HEAP32[$151+8>>2]|0;HEAP32[$149+12>>2]=HEAP32[$151+12>>2]|0;HEAP16[$149+16>>1]=HEAP16[$151+16>>1]|0;
 $152 = HEAP32[$7>>2]|0;
 $153 = HEAP32[$12>>2]|0;
 $154 = ((($153)) + 324|0);
 $155 = (_mal_mutex_init($152,$154)|0);
 $156 = ($155|0)!=(0);
 if ($156) {
  $157 = HEAP32[$12>>2]|0;
  $158 = (_mal_post_error($157,12308,-23)|0);
  HEAP32[$6>>2] = $158;
  $308 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($308|0);
 }
 $159 = HEAP32[$7>>2]|0;
 $160 = HEAP32[$12>>2]|0;
 $161 = ((($160)) + 356|0);
 $162 = (_mal_event_init($159,$161)|0);
 $163 = ($162|0)!=(0);
 if ($163) {
  $164 = HEAP32[$12>>2]|0;
  $165 = ((($164)) + 324|0);
  _mal_mutex_uninit($165);
  $166 = HEAP32[$12>>2]|0;
  $167 = (_mal_post_error($166,12332,-24)|0);
  HEAP32[$6>>2] = $167;
  $308 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($308|0);
 }
 $168 = HEAP32[$7>>2]|0;
 $169 = HEAP32[$12>>2]|0;
 $170 = ((($169)) + 440|0);
 $171 = (_mal_event_init($168,$170)|0);
 $172 = ($171|0)!=(0);
 if ($172) {
  $173 = HEAP32[$12>>2]|0;
  $174 = ((($173)) + 356|0);
  _mal_event_uninit($174);
  $175 = HEAP32[$12>>2]|0;
  $176 = ((($175)) + 324|0);
  _mal_mutex_uninit($176);
  $177 = HEAP32[$12>>2]|0;
  $178 = (_mal_post_error($177,12377,-24)|0);
  HEAP32[$6>>2] = $178;
  $308 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($308|0);
 }
 $179 = HEAP32[$7>>2]|0;
 $180 = HEAP32[$12>>2]|0;
 $181 = ((($180)) + 524|0);
 $182 = (_mal_event_init($179,$181)|0);
 $183 = ($182|0)!=(0);
 if ($183) {
  $184 = HEAP32[$12>>2]|0;
  $185 = ((($184)) + 440|0);
  _mal_event_uninit($185);
  $186 = HEAP32[$12>>2]|0;
  $187 = ((($186)) + 356|0);
  _mal_event_uninit($187);
  $188 = HEAP32[$12>>2]|0;
  $189 = ((($188)) + 324|0);
  _mal_mutex_uninit($189);
  $190 = HEAP32[$12>>2]|0;
  $191 = (_mal_post_error($190,12421,-24)|0);
  HEAP32[$6>>2] = $191;
  $308 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($308|0);
 }
 HEAP32[$14>>2] = -5;
 $192 = HEAP32[$7>>2]|0;
 $193 = HEAP32[$192>>2]|0;
 $cond = ($193|0)==(8);
 if ($cond) {
  $194 = HEAP32[$7>>2]|0;
  $195 = HEAP32[$8>>2]|0;
  $196 = HEAP32[$9>>2]|0;
  $197 = HEAP32[$12>>2]|0;
  $198 = (_mal_device_init__sdl($194,$195,$196,$13,$197)|0);
  HEAP32[$14>>2] = $198;
 }
 $199 = HEAP32[$14>>2]|0;
 $200 = ($199|0)!=(0);
 if ($200) {
  HEAP32[$6>>2] = -5;
  $308 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($308|0);
 }
 $201 = HEAP32[$12>>2]|0;
 $202 = ((($201)) + 68|0);
 $203 = HEAP8[$202>>0]|0;
 $204 = $203 << 24 >> 24;
 $205 = ($204|0)==(0);
 do {
  if ($205) {
   $206 = HEAP32[$7>>2]|0;
   $207 = HEAP32[$8>>2]|0;
   $208 = HEAP32[$9>>2]|0;
   $209 = HEAP32[$12>>2]|0;
   $210 = ((($209)) + 68|0);
   $211 = (_mal_context__try_get_device_name_by_id($206,$207,$208,$210,256)|0);
   $212 = ($211|0)!=(0);
   if ($212) {
    $213 = HEAP32[$9>>2]|0;
    $214 = ($213|0)==(0|0);
    $215 = HEAP32[$8>>2]|0;
    $216 = ($215|0)==(0);
    $217 = HEAP32[$12>>2]|0;
    $218 = ((($217)) + 68|0);
    if ($214) {
     if ($216) {
      (_mal_strncpy_s($218,256,12464,-1)|0);
      break;
     } else {
      (_mal_strncpy_s($218,256,12488,-1)|0);
      break;
     }
    } else {
     if ($216) {
      (_mal_strncpy_s($218,256,12511,-1)|0);
      break;
     } else {
      (_mal_strncpy_s($218,256,12527,-1)|0);
      break;
     }
    }
   }
  }
 } while(0);
 $219 = HEAP32[$12>>2]|0;
 $220 = ((($219)) + 40|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = ((($15)) + 64|0);
 HEAP32[$222>>2] = $221;
 $223 = HEAP32[$8>>2]|0;
 $224 = ($223|0)==(0);
 $225 = HEAP32[$12>>2]|0;
 if ($224) {
  $226 = ((($225)) + 8|0);
  $227 = HEAP32[$226>>2]|0;
  HEAP32[$15>>2] = $227;
  $228 = HEAP32[$12>>2]|0;
  $229 = ((($228)) + 12|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = ((($15)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = HEAP32[$12>>2]|0;
  $233 = ((($232)) + 16|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = ((($15)) + 8|0);
  HEAP32[$235>>2] = $234;
  $236 = ((($15)) + 12|0);
  $237 = HEAP32[$12>>2]|0;
  $238 = ((($237)) + 20|0);
  ;HEAP32[$236>>2]=HEAP32[$238>>2]|0;HEAP32[$236+4>>2]=HEAP32[$238+4>>2]|0;HEAP32[$236+8>>2]=HEAP32[$238+8>>2]|0;HEAP32[$236+12>>2]=HEAP32[$238+12>>2]|0;HEAP16[$236+16>>1]=HEAP16[$238+16>>1]|0;
  $239 = HEAP32[$12>>2]|0;
  $240 = ((($239)) + 624|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = ((($15)) + 32|0);
  HEAP32[$242>>2] = $241;
  $243 = HEAP32[$12>>2]|0;
  $244 = ((($243)) + 628|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = ((($15)) + 36|0);
  HEAP32[$246>>2] = $245;
  $247 = HEAP32[$12>>2]|0;
  $248 = ((($247)) + 632|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = ((($15)) + 40|0);
  HEAP32[$250>>2] = $249;
  $251 = ((($15)) + 44|0);
  $252 = HEAP32[$12>>2]|0;
  $253 = ((($252)) + 636|0);
  ;HEAP32[$251>>2]=HEAP32[$253>>2]|0;HEAP32[$251+4>>2]=HEAP32[$253+4>>2]|0;HEAP32[$251+8>>2]=HEAP32[$253+8>>2]|0;HEAP32[$251+12>>2]=HEAP32[$253+12>>2]|0;HEAP16[$251+16>>1]=HEAP16[$253+16>>1]|0;
  $254 = HEAP32[$12>>2]|0;
  $255 = HEAP32[$12>>2]|0;
  $256 = ((($255)) + 656|0);
  (_mal_dsp_init($15,1,$254,$256)|0);
 } else {
  $257 = ((($225)) + 624|0);
  $258 = HEAP32[$257>>2]|0;
  HEAP32[$15>>2] = $258;
  $259 = HEAP32[$12>>2]|0;
  $260 = ((($259)) + 628|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = ((($15)) + 4|0);
  HEAP32[$262>>2] = $261;
  $263 = HEAP32[$12>>2]|0;
  $264 = ((($263)) + 632|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = ((($15)) + 8|0);
  HEAP32[$266>>2] = $265;
  $267 = ((($15)) + 12|0);
  $268 = HEAP32[$12>>2]|0;
  $269 = ((($268)) + 636|0);
  ;HEAP32[$267>>2]=HEAP32[$269>>2]|0;HEAP32[$267+4>>2]=HEAP32[$269+4>>2]|0;HEAP32[$267+8>>2]=HEAP32[$269+8>>2]|0;HEAP32[$267+12>>2]=HEAP32[$269+12>>2]|0;HEAP16[$267+16>>1]=HEAP16[$269+16>>1]|0;
  $270 = HEAP32[$12>>2]|0;
  $271 = ((($270)) + 8|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = ((($15)) + 32|0);
  HEAP32[$273>>2] = $272;
  $274 = HEAP32[$12>>2]|0;
  $275 = ((($274)) + 12|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = ((($15)) + 36|0);
  HEAP32[$277>>2] = $276;
  $278 = HEAP32[$12>>2]|0;
  $279 = ((($278)) + 16|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = ((($15)) + 40|0);
  HEAP32[$281>>2] = $280;
  $282 = ((($15)) + 44|0);
  $283 = HEAP32[$12>>2]|0;
  $284 = ((($283)) + 20|0);
  ;HEAP32[$282>>2]=HEAP32[$284>>2]|0;HEAP32[$282+4>>2]=HEAP32[$284+4>>2]|0;HEAP32[$282+8>>2]=HEAP32[$284+8>>2]|0;HEAP32[$282+12>>2]=HEAP32[$284+12>>2]|0;HEAP16[$282+16>>1]=HEAP16[$284+16>>1]|0;
  $285 = HEAP32[$12>>2]|0;
  $286 = HEAP32[$12>>2]|0;
  $287 = ((($286)) + 656|0);
  (_mal_dsp_init($15,2,$285,$287)|0);
 }
 $288 = HEAP32[$7>>2]|0;
 $289 = HEAP32[$288>>2]|0;
 $290 = ($289|0)!=(6);
 do {
  if ($290) {
   $291 = HEAP32[$7>>2]|0;
   $292 = HEAP32[$291>>2]|0;
   $293 = ($292|0)!=(8);
   if (!($293)) {
    label = 51;
    break;
   }
   $294 = HEAP32[$7>>2]|0;
   $295 = HEAP32[$12>>2]|0;
   $296 = ((($295)) + 608|0);
   $297 = HEAP32[$12>>2]|0;
   $298 = (_mal_thread_create($294,$296,2,$297)|0);
   $299 = ($298|0)!=(0);
   $300 = HEAP32[$12>>2]|0;
   if (!($299)) {
    $303 = ((($300)) + 524|0);
    (_mal_event_wait($303)|0);
    break;
   }
   _mal_device_uninit($300);
   $301 = HEAP32[$12>>2]|0;
   $302 = (_mal_post_error($301,12542,-25)|0);
   HEAP32[$6>>2] = $302;
   $308 = HEAP32[$6>>2]|0;
   STACKTOP = sp;return ($308|0);
  } else {
   label = 51;
  }
 } while(0);
 if ((label|0) == 51) {
  $304 = HEAP32[$12>>2]|0;
  _mal_device__set_state($304,1);
 }
 $305 = HEAP32[$12>>2]|0;
 $306 = (_mal_device__get_state($305)|0);
 $307 = ($306|0)==(1);
 if (!($307)) {
  ___assert_fail((12574|0),(10766|0),9728,(12610|0));
  // unreachable;
 }
 HEAP32[$6>>2] = 0;
 $308 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($308|0);
}
function _mal_context_uninit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$1>>2] = -2;
  $9 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $cond = ($6|0)==(8);
 $7 = HEAP32[$2>>2]|0;
 if (!($cond)) {
  (_mal_context_uninit_backend_apis($7)|0);
  ___assert_fail((14634|0),(10766|0),9420,(11568|0));
  // unreachable;
 }
 $8 = (_mal_context_uninit__sdl($7)|0);
 HEAP32[$1>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function _mal_device_start($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = HEAP32[$2>>2]|0;
 if ($5) {
  $7 = (_mal_post_error($6,11199,-2)|0);
  HEAP32[$1>>2] = $7;
  $51 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 $8 = (_mal_device__get_state($6)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[$2>>2]|0;
  $11 = (_mal_post_error($10,11267,-9)|0);
  HEAP32[$1>>2] = $11;
  $51 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 HEAP32[$3>>2] = -1;
 $12 = HEAP32[$2>>2]|0;
 $13 = ((($12)) + 324|0);
 _mal_mutex_lock($13);
 $14 = HEAP32[$2>>2]|0;
 $15 = (_mal_device__get_state($14)|0);
 $16 = ($15|0)==(3);
 $17 = HEAP32[$2>>2]|0;
 if ($16) {
  $18 = ((($17)) + 324|0);
  _mal_mutex_unlock($18);
  $19 = HEAP32[$2>>2]|0;
  $20 = (_mal_post_error($19,11322,-11)|0);
  HEAP32[$1>>2] = $20;
  $51 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 $21 = (_mal_device__get_state($17)|0);
 $22 = ($21|0)==(2);
 $23 = HEAP32[$2>>2]|0;
 if ($22) {
  $24 = ((($23)) + 324|0);
  _mal_mutex_unlock($24);
  $25 = HEAP32[$2>>2]|0;
  $26 = (_mal_post_error($25,11393,-10)|0);
  HEAP32[$1>>2] = $26;
  $51 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 $27 = (_mal_device__get_state($23)|0);
 $28 = ($27|0)!=(1);
 $29 = HEAP32[$2>>2]|0;
 if ($28) {
  $30 = ((($29)) + 324|0);
  _mal_mutex_unlock($30);
  $31 = HEAP32[$2>>2]|0;
  $32 = (_mal_post_error($31,11456,-8)|0);
  HEAP32[$1>>2] = $32;
  $51 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 _mal_device__set_state($29,3);
 $33 = HEAP32[$2>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(8);
 $37 = HEAP32[$2>>2]|0;
 if ($36) {
  $38 = (_mal_device__start_backend__sdl($37)|0);
  HEAP32[$3>>2] = $38;
  $39 = HEAP32[$3>>2]|0;
  $40 = ($39|0)==(0);
  if ($40) {
   $41 = HEAP32[$2>>2]|0;
   _mal_device__set_state($41,2);
  }
 } else {
  $42 = ((($37)) + 356|0);
  (_mal_event_signal($42)|0);
  $43 = HEAP32[$2>>2]|0;
  $44 = ((($43)) + 440|0);
  (_mal_event_wait($44)|0);
  $45 = HEAP32[$2>>2]|0;
  $46 = ((($45)) + 616|0);
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$3>>2] = $47;
 }
 $48 = HEAP32[$2>>2]|0;
 $49 = ((($48)) + 324|0);
 _mal_mutex_unlock($49);
 $50 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $50;
 $51 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($51|0);
}
function _mal_device_uninit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_mal_device__is_initialized($2)|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (_mal_device_is_started($5)|0);
 $7 = ($6|0)!=(0);
 L4: do {
  if ($7) {
   while(1) {
    $8 = HEAP32[$1>>2]|0;
    $9 = (_mal_device_stop($8)|0);
    $10 = ($9|0)==(-8);
    if (!($10)) {
     break L4;
    }
    _mal_sleep(1);
   }
  }
 } while(0);
 $11 = HEAP32[$1>>2]|0;
 _mal_device__set_state($11,0);
 $12 = HEAP32[$1>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(6);
 if ($15) {
  $16 = HEAP32[$1>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(8);
  if ($19) {
   $20 = HEAP32[$1>>2]|0;
   $21 = ((($20)) + 356|0);
   (_mal_event_signal($21)|0);
   $22 = HEAP32[$1>>2]|0;
   $23 = ((($22)) + 608|0);
   _mal_thread_wait($23);
  }
 }
 $24 = HEAP32[$1>>2]|0;
 $25 = ((($24)) + 524|0);
 _mal_event_uninit($25);
 $26 = HEAP32[$1>>2]|0;
 $27 = ((($26)) + 440|0);
 _mal_event_uninit($27);
 $28 = HEAP32[$1>>2]|0;
 $29 = ((($28)) + 356|0);
 _mal_event_uninit($29);
 $30 = HEAP32[$1>>2]|0;
 $31 = ((($30)) + 324|0);
 _mal_mutex_uninit($31);
 $32 = HEAP32[$1>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(8);
 if ($35) {
  $36 = HEAP32[$1>>2]|0;
  _mal_device_uninit__sdl($36);
 }
 $37 = HEAP32[$1>>2]|0;
 _memset(($37|0),0,38728)|0;
 STACKTOP = sp;return;
}
function _mal_mutex_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = HEAP32[$4>>2]|0;
 $8 = ($7|0)==(0|0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  HEAP32[$2>>2] = -2;
  $14 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = HEAP32[$3>>2]|0;
  $10 = HEAP32[$4>>2]|0;
  HEAP32[$10>>2] = $9;
  $11 = HEAP32[$3>>2]|0;
  $12 = HEAP32[$4>>2]|0;
  $13 = (_mal_mutex_init__posix($11,$12)|0);
  HEAP32[$2>>2] = $13;
  $14 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _mal_get_backend_name($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 0:  {
  HEAP32[$1>>2] = 10688;
  break;
 }
 case 1:  {
  HEAP32[$1>>2] = 10693;
  break;
 }
 case 2:  {
  HEAP32[$1>>2] = 10700;
  break;
 }
 case 3:  {
  HEAP32[$1>>2] = 10712;
  break;
 }
 case 4:  {
  HEAP32[$1>>2] = 10718;
  break;
 }
 case 5:  {
  HEAP32[$1>>2] = 10723;
  break;
 }
 case 6:  {
  HEAP32[$1>>2] = 10727;
  break;
 }
 case 7:  {
  HEAP32[$1>>2] = 10737;
  break;
 }
 default: {
  HEAP32[$1>>2] = 10539;
 }
 }
 $4 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _mal_get_format_name($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 0:  {
  HEAP32[$1>>2] = 10539;
  break;
 }
 case 1:  {
  HEAP32[$1>>2] = 10547;
  break;
 }
 case 2:  {
  HEAP32[$1>>2] = 10570;
  break;
 }
 case 3:  {
  HEAP32[$1>>2] = 10592;
  break;
 }
 case 4:  {
  HEAP32[$1>>2] = 10631;
  break;
 }
 case 5:  {
  HEAP32[$1>>2] = 10653;
  break;
 }
 default: {
  HEAP32[$1>>2] = 10680;
 }
 }
 $4 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _mal_mutex_init__posix($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $6 = HEAP32[$3>>2]|0;
 $7 = ((($6)) + 64|0);
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$4>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = (FUNCTION_TABLE_iii[$9 & 15]($11,0)|0);
 HEAP32[$5>>2] = $12;
 $13 = HEAP32[$5>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  HEAP32[$2>>2] = -23;
  $15 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($15|0);
 } else {
  HEAP32[$2>>2] = 0;
  $15 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _mal_device__is_initialized($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$1>>2] = 0;
  $9 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  $5 = HEAP32[$2>>2]|0;
  $6 = (_mal_device__get_state($5)|0);
  $7 = ($6|0)!=(0);
  $8 = $7&1;
  HEAP32[$1>>2] = $8;
  $9 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _mal_device_is_started($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$1>>2] = 0;
  $9 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  $5 = HEAP32[$2>>2]|0;
  $6 = (_mal_device__get_state($5)|0);
  $7 = ($6|0)==(2);
  $8 = $7&1;
  HEAP32[$1>>2] = $8;
  $9 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _mal_device_stop($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = HEAP32[$2>>2]|0;
 if ($5) {
  $7 = (_mal_post_error($6,10808,-2)|0);
  HEAP32[$1>>2] = $7;
  $43 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($43|0);
 }
 $8 = (_mal_device__get_state($6)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[$2>>2]|0;
  $11 = (_mal_post_error($10,10875,-9)|0);
  HEAP32[$1>>2] = $11;
  $43 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($43|0);
 }
 HEAP32[$3>>2] = -1;
 $12 = HEAP32[$2>>2]|0;
 $13 = ((($12)) + 324|0);
 _mal_mutex_lock($13);
 $14 = HEAP32[$2>>2]|0;
 $15 = (_mal_device__get_state($14)|0);
 $16 = ($15|0)==(4);
 $17 = HEAP32[$2>>2]|0;
 if ($16) {
  $18 = ((($17)) + 324|0);
  _mal_mutex_unlock($18);
  $19 = HEAP32[$2>>2]|0;
  $20 = (_mal_post_error($19,10929,-13)|0);
  HEAP32[$1>>2] = $20;
  $43 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($43|0);
 }
 $21 = (_mal_device__get_state($17)|0);
 $22 = ($21|0)==(1);
 $23 = HEAP32[$2>>2]|0;
 if ($22) {
  $24 = ((($23)) + 324|0);
  _mal_mutex_unlock($24);
  $25 = HEAP32[$2>>2]|0;
  $26 = (_mal_post_error($25,10999,-12)|0);
  HEAP32[$1>>2] = $26;
  $43 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($43|0);
 }
 $27 = (_mal_device__get_state($23)|0);
 $28 = ($27|0)!=(2);
 $29 = HEAP32[$2>>2]|0;
 if ($28) {
  $30 = ((($29)) + 324|0);
  _mal_mutex_unlock($30);
  $31 = HEAP32[$2>>2]|0;
  $32 = (_mal_post_error($31,11061,-8)|0);
  HEAP32[$1>>2] = $32;
  $43 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($43|0);
 }
 _mal_device__set_state($29,4);
 $33 = HEAP32[$2>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(8);
 $37 = HEAP32[$2>>2]|0;
 if ($36) {
  (_mal_device__stop_backend__sdl($37)|0);
 } else {
  (_mal_device__break_main_loop($37)|0);
  $38 = HEAP32[$2>>2]|0;
  $39 = ((($38)) + 524|0);
  (_mal_event_wait($39)|0);
  HEAP32[$3>>2] = 0;
 }
 $40 = HEAP32[$2>>2]|0;
 $41 = ((($40)) + 324|0);
 _mal_mutex_unlock($41);
 $42 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $42;
 $43 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($43|0);
}
function _mal_sleep($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 _mal_sleep__posix($2);
 STACKTOP = sp;return;
}
function _mal_device__set_state($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$3>>2]|0;
 $7 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = $6;
 /* fence */;
 STACKTOP = sp;return;
}
function _mal_event_signal($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$2>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = HEAP32[$2>>2]|0;
   $9 = (_mal_event_signal__posix($8)|0);
   HEAP32[$1>>2] = $9;
   $10 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($10|0);
  }
 }
 HEAP32[$1>>2] = 0;
 $10 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($10|0);
}
function _mal_thread_wait($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 _mal_thread_wait__posix($4);
 STACKTOP = sp;return;
}
function _mal_event_uninit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = HEAP32[$1>>2]|0;
   _mal_event_uninit__posix($7);
  }
 }
 STACKTOP = sp;return;
}
function _mal_mutex_uninit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = HEAP32[$1>>2]|0;
   _mal_mutex_uninit__posix($7);
  }
 }
 STACKTOP = sp;return;
}
function _mal_device_uninit__sdl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_v[$8 & 7]();
  STACKTOP = sp;return;
 } else {
  ___assert_fail((10744|0),(10766|0),8704,(10785|0));
  // unreachable;
 }
}
function _mal_mutex_uninit__posix($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 (FUNCTION_TABLE_ii[$6 & 31]($8)|0);
 STACKTOP = sp;return;
}
function _mal_event_uninit__posix($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = ((($8)) + 28|0);
 (FUNCTION_TABLE_ii[$6 & 31]($9)|0);
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 64|0);
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 4|0);
 (FUNCTION_TABLE_ii[$14 & 31]($16)|0);
 STACKTOP = sp;return;
}
function _mal_thread_wait__posix($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 (FUNCTION_TABLE_iii[$6 & 15]($9,0)|0);
 STACKTOP = sp;return;
}
function _mal_event_signal__posix($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 (FUNCTION_TABLE_ii[$6 & 31]($8)|0);
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 76|0);
 HEAP32[$11>>2] = 1;
 $12 = HEAP32[$1>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 64|0);
 $15 = ((($14)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = ((($18)) + 28|0);
 (FUNCTION_TABLE_ii[$16 & 31]($19)|0);
 $20 = HEAP32[$1>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 64|0);
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$1>>2]|0;
 $26 = ((($25)) + 4|0);
 (FUNCTION_TABLE_ii[$24 & 31]($26)|0);
 STACKTOP = sp;return 1;
}
function _mal_sleep__posix($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2*1000)|0;
 (_usleep(($3|0))|0);
 STACKTOP = sp;return;
}
function _mal_post_error($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[$3>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (_mal_context_post_error(0,$6,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _mal_device__get_state($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _mal_mutex_lock($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = HEAP32[$1>>2]|0;
   _mal_mutex_lock__posix($7);
  }
 }
 STACKTOP = sp;return;
}
function _mal_mutex_unlock($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = HEAP32[$1>>2]|0;
   _mal_mutex_unlock__posix($7);
  }
 }
 STACKTOP = sp;return;
}
function _mal_device__stop_backend__sdl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = ((($6)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vi[$8 & 31](1);
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((10744|0),(10766|0),8834,(11169|0));
  // unreachable;
 }
 return (0)|0;
}
function _mal_device__break_main_loop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  HEAP32[$2>>2] = -5;
  $5 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((10744|0),(10766|0),8959,(11141|0));
  // unreachable;
 }
 return (0)|0;
}
function _mal_event_wait($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$2>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = HEAP32[$2>>2]|0;
   $9 = (_mal_event_wait__posix($8)|0);
   HEAP32[$1>>2] = $9;
   $10 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($10|0);
  }
 }
 HEAP32[$1>>2] = 0;
 $10 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($10|0);
}
function _mal_event_wait__posix($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 (FUNCTION_TABLE_ii[$6 & 31]($8)|0);
 while(1) {
  $9 = HEAP32[$1>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = ((($10)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  $14 = HEAP32[$1>>2]|0;
  if (!($13)) {
   break;
  }
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 64|0);
  $17 = ((($16)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$1>>2]|0;
  $20 = ((($19)) + 4|0);
  $21 = ((($20)) + 28|0);
  $22 = HEAP32[$1>>2]|0;
  $23 = ((($22)) + 4|0);
  (FUNCTION_TABLE_iii[$18 & 15]($21,$23)|0);
 }
 $24 = ((($14)) + 4|0);
 $25 = ((($24)) + 76|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$1>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 64|0);
 $29 = ((($28)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$1>>2]|0;
 $32 = ((($31)) + 4|0);
 (FUNCTION_TABLE_ii[$30 & 31]($32)|0);
 STACKTOP = sp;return 1;
}
function _mal_mutex_unlock__posix($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 (FUNCTION_TABLE_ii[$6 & 31]($8)|0);
 STACKTOP = sp;return;
}
function _mal_mutex_lock__posix($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 (FUNCTION_TABLE_ii[$6 & 31]($8)|0);
 STACKTOP = sp;return;
}
function _mal_context_post_error($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $8 = HEAP32[$4>>2]|0;
 $9 = ($8|0)==(0|0);
 $10 = HEAP32[$5>>2]|0;
 $11 = ($10|0)!=(0|0);
 $or$cond = $9 & $11;
 if ($or$cond) {
  $12 = HEAP32[$5>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$4>>2] = $13;
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = HEAP32[$5>>2]|0;
 $16 = HEAP32[$6>>2]|0;
 _mal_log($14,$15,$16);
 $17 = HEAP32[$7>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _mal_log($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$3>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = HEAP32[$6>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$6>>2]|0;
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$4>>2]|0;
 $17 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_viii[$14 & 63]($15,$16,$17);
 STACKTOP = sp;return;
}
function _mal_device__start_backend__sdl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = ((($6)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vi[$8 & 31](0);
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((10744|0),(10766|0),8818,(11537|0));
  // unreachable;
 }
 return (0)|0;
}
function _mal_context_uninit__sdl($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((11587|0),(10766|0),8647,(11610|0));
  // unreachable;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(8);
 if ($6) {
  $7 = HEAP32[$1>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$10 & 31](16);
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((11634|0),(10766|0),8648,(11610|0));
  // unreachable;
 }
 return (0)|0;
}
function _mal_context_uninit_backend_apis($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = -5;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_mal_context_uninit_backend_apis__nix($3)|0);
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _mal_context_uninit_backend_apis__nix($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 _mal_dlclose($4);
 STACKTOP = sp;return 0;
}
function _mal_dlclose($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 (_dlclose(($2|0))|0);
 STACKTOP = sp;return;
}
function _mal__is_channel_map_valid($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $7 = HEAP32[$4>>2]|0;
 $8 = ($7>>>0)>(0);
 if (!($8)) {
  ___assert_fail((13617|0),(10766|0),8854,(13630|0));
  // unreachable;
 }
 HEAP32[$5>>2] = 0;
 L4: while(1) {
  $9 = HEAP32[$5>>2]|0;
  $10 = HEAP32[$4>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   label = 11;
   break;
  }
  $12 = HEAP32[$5>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$6>>2] = $13;
  while(1) {
   $14 = HEAP32[$6>>2]|0;
   $15 = HEAP32[$4>>2]|0;
   $16 = ($14>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = HEAP32[$3>>2]|0;
   $18 = HEAP32[$5>>2]|0;
   $19 = (($17) + ($18)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = HEAP32[$3>>2]|0;
   $23 = HEAP32[$6>>2]|0;
   $24 = (($22) + ($23)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = ($21|0)==($26|0);
   if ($27) {
    label = 8;
    break L4;
   }
   $28 = HEAP32[$6>>2]|0;
   $29 = (($28) + 1)|0;
   HEAP32[$6>>2] = $29;
  }
  $30 = HEAP32[$5>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$5>>2] = $31;
 }
 if ((label|0) == 8) {
  HEAP32[$2>>2] = 0;
  $32 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 11) {
  HEAP32[$2>>2] = 1;
  $32 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _mal_event_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = HEAP32[$4>>2]|0;
 $8 = ($7|0)==(0|0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  HEAP32[$2>>2] = 0;
  $14 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = HEAP32[$3>>2]|0;
  $10 = HEAP32[$4>>2]|0;
  HEAP32[$10>>2] = $9;
  $11 = HEAP32[$3>>2]|0;
  $12 = HEAP32[$4>>2]|0;
  $13 = (_mal_event_init__posix($11,$12)|0);
  HEAP32[$2>>2] = $13;
  $14 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _mal_device_init__sdl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = sp + 72|0;
 $6 = sp + 68|0;
 $7 = sp + 64|0;
 $8 = sp + 60|0;
 $9 = sp + 56|0;
 $10 = sp + 52|0;
 $11 = sp + 48|0;
 $12 = sp + 24|0;
 $13 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((11587|0),(10766|0),8733,(13066|0));
  // unreachable;
 }
 $16 = HEAP32[$9>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((13087|0),(10766|0),8734,(13066|0));
  // unreachable;
 }
 $18 = HEAP32[$10>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((10744|0),(10766|0),8735,(13066|0));
  // unreachable;
 }
 $20 = HEAP32[$9>>2]|0;
 $21 = ((($20)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$9>>2]|0;
 $24 = ((($23)) + 36|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = Math_imul($22, $25)|0;
 $27 = HEAP32[$9>>2]|0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = Math_imul($26, $29)|0;
 HEAP32[$11>>2] = $30;
 $31 = HEAP32[$11>>2]|0;
 $32 = ($31>>>0)>(32768);
 if ($32) {
  HEAP32[$11>>2] = 32768;
 } else {
  $33 = HEAP32[$11>>2]|0;
  $34 = (_mal_next_power_of_2($33)|0);
  HEAP32[$11>>2] = $34;
 }
 $35 = HEAP32[$11>>2]|0;
 $36 = ($35>>>0)<=(32768);
 if (!($36)) {
  ___assert_fail((13109|0),(10766|0),8746,(13066|0));
  // unreachable;
 }
 ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;HEAP32[$12+16>>2]=0|0;HEAP32[$12+20>>2]=0|0;
 $37 = HEAP32[$9>>2]|0;
 $38 = ((($37)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$12>>2] = $39;
 $40 = HEAP32[$9>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = (_mal_format_to_sdl($41)|0);
 $43 = ((($12)) + 4|0);
 HEAP16[$43>>1] = $42;
 $44 = HEAP32[$9>>2]|0;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46&255;
 $48 = ((($12)) + 6|0);
 HEAP8[$48>>0] = $47;
 $49 = HEAP32[$11>>2]|0;
 $50 = $49&65535;
 $51 = ((($12)) + 8|0);
 HEAP16[$51>>1] = $50;
 $52 = ((($12)) + 16|0);
 HEAP32[$52>>2] = 3;
 $53 = HEAP32[$10>>2]|0;
 $54 = ((($12)) + 20|0);
 HEAP32[$54>>2] = $53;
 $55 = ((($12)) + 4|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $58 = ($57|0)==(0);
 if ($58) {
  $59 = ((($12)) + 4|0);
  HEAP16[$59>>1] = -32480;
 }
 $60 = HEAP32[$7>>2]|0;
 $61 = ($60|0)!=(0);
 if ($61) {
  HEAP32[$5>>2] = -6;
  $105 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($105|0);
 }
 $62 = ((($12)) + 4|0);
 $63 = HEAP16[$62>>1]|0;
 $64 = $63&65535;
 $65 = ($64|0)==(33056);
 if ($65) {
  $66 = ((($12)) + 4|0);
  HEAP16[$66>>1] = -32752;
 }
 $67 = HEAP32[$10>>2]|0;
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($68)) + 16|0);
 $70 = ((($69)) + 16|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (FUNCTION_TABLE_iii[$71 & 15]($12,$13)|0);
 $73 = HEAP32[$10>>2]|0;
 $74 = ((($73)) + 38724|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$10>>2]|0;
 $76 = ((($75)) + 38724|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)!=(0);
 if ($78) {
  $79 = HEAP32[$10>>2]|0;
  $80 = (_mal_post_error($79,13129,-20)|0);
  HEAP32[$5>>2] = $80;
  $105 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($105|0);
 } else {
  $81 = ((($13)) + 4|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = (_mal_format_from_sdl($82)|0);
  $84 = HEAP32[$10>>2]|0;
  $85 = ((($84)) + 624|0);
  HEAP32[$85>>2] = $83;
  $86 = ((($13)) + 6|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = HEAP32[$10>>2]|0;
  $90 = ((($89)) + 628|0);
  HEAP32[$90>>2] = $88;
  $91 = HEAP32[$13>>2]|0;
  $92 = HEAP32[$10>>2]|0;
  $93 = ((($92)) + 632|0);
  HEAP32[$93>>2] = $91;
  $94 = ((($13)) + 8|0);
  $95 = HEAP16[$94>>1]|0;
  $96 = $95&65535;
  $97 = ((($13)) + 6|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = (($96|0) / ($99|0))&-1;
  $101 = HEAP32[$10>>2]|0;
  $102 = ((($101)) + 40|0);
  HEAP32[$102>>2] = $100;
  $103 = HEAP32[$10>>2]|0;
  $104 = ((($103)) + 44|0);
  HEAP32[$104>>2] = 1;
  HEAP32[$5>>2] = 0;
  $105 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($105|0);
 }
 return (0)|0;
}
function _mal_context__try_get_device_name_by_id($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 40|0;
 $6 = sp + 36|0;
 $7 = sp + 32|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 20|0;
 $11 = sp + 16|0;
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $15 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 $16 = HEAP32[$6>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((11587|0),(10766|0),2691,(12916|0));
  // unreachable;
 }
 $18 = HEAP32[$9>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((12955|0),(10766|0),2692,(12916|0));
  // unreachable;
 }
 $20 = HEAP32[$8>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  HEAP32[$5>>2] = -6;
  $71 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($71|0);
 }
 $22 = HEAP32[$6>>2]|0;
 $23 = HEAP32[$7>>2]|0;
 $24 = (_mal_enumerate_devices($22,$23,$11,0)|0);
 HEAP32[$12>>2] = $24;
 $25 = HEAP32[$12>>2]|0;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = HEAP32[$12>>2]|0;
  HEAP32[$5>>2] = $27;
  $71 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($71|0);
 }
 $28 = HEAP32[$11>>2]|0;
 $29 = ($28*260)|0;
 $30 = (_malloc($29)|0);
 HEAP32[$13>>2] = $30;
 $31 = HEAP32[$13>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  HEAP32[$5>>2] = -3;
  $71 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($71|0);
 }
 $33 = HEAP32[$6>>2]|0;
 $34 = HEAP32[$7>>2]|0;
 $35 = HEAP32[$13>>2]|0;
 $36 = (_mal_enumerate_devices($33,$34,$11,$35)|0);
 HEAP32[$12>>2] = $36;
 $37 = HEAP32[$12>>2]|0;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = HEAP32[$13>>2]|0;
  _free($39);
  $40 = HEAP32[$12>>2]|0;
  HEAP32[$5>>2] = $40;
  $71 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($71|0);
 }
 HEAP32[$14>>2] = 0;
 HEAP32[$15>>2] = 0;
 while(1) {
  $41 = HEAP32[$15>>2]|0;
  $42 = HEAP32[$11>>2]|0;
  $43 = ($41>>>0)<($42>>>0);
  if (!($43)) {
   break;
  }
  $44 = HEAP32[$6>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $cond = ($45|0)==(8);
  if ($cond) {
   $46 = HEAP32[$13>>2]|0;
   $47 = HEAP32[$15>>2]|0;
   $48 = (($46) + (($47*260)|0)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = HEAP32[$8>>2]|0;
   $51 = HEAP32[$50>>2]|0;
   $52 = ($49|0)==($51|0);
   if ($52) {
    HEAP32[$14>>2] = 1;
   }
  } else {
   $53 = HEAP32[$8>>2]|0;
   $54 = HEAP32[$13>>2]|0;
   $55 = HEAP32[$15>>2]|0;
   $56 = (($54) + (($55*260)|0)|0);
   $57 = (_memcmp($53,$56,4)|0);
   $58 = ($57|0)==(0);
   if ($58) {
    HEAP32[$14>>2] = 1;
   }
  }
  $59 = HEAP32[$14>>2]|0;
  $60 = ($59|0)!=(0);
  if ($60) {
   label = 21;
   break;
  }
  $67 = HEAP32[$15>>2]|0;
  $68 = (($67) + 1)|0;
  HEAP32[$15>>2] = $68;
 }
 if ((label|0) == 21) {
  $61 = HEAP32[$9>>2]|0;
  $62 = HEAP32[$10>>2]|0;
  $63 = HEAP32[$13>>2]|0;
  $64 = HEAP32[$15>>2]|0;
  $65 = (($63) + (($64*260)|0)|0);
  $66 = ((($65)) + 4|0);
  (_mal_strncpy_s($61,$62,$66,-1)|0);
  HEAP32[$12>>2] = 0;
 }
 $69 = HEAP32[$13>>2]|0;
 _free($69);
 $70 = HEAP32[$12>>2]|0;
 HEAP32[$5>>2] = $70;
 $71 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($71|0);
}
function _mal_strncpy_s($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $11 = HEAP32[$5>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  HEAP32[$4>>2] = 22;
  $55 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($55|0);
 }
 $13 = HEAP32[$6>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  HEAP32[$4>>2] = 34;
  $55 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($55|0);
 }
 $15 = HEAP32[$7>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = HEAP32[$5>>2]|0;
  HEAP8[$17>>0] = 0;
  HEAP32[$4>>2] = 22;
  $55 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($55|0);
 }
 $18 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = $18;
 $19 = HEAP32[$8>>2]|0;
 $20 = ($19|0)==(-1);
 if ($20) {
  label = 9;
 } else {
  $21 = HEAP32[$8>>2]|0;
  $22 = HEAP32[$6>>2]|0;
  $23 = ($21>>>0)>=($22>>>0);
  if ($23) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $24 = HEAP32[$6>>2]|0;
  $25 = (($24) - 1)|0;
  HEAP32[$9>>2] = $25;
 }
 HEAP32[$10>>2] = 0;
 while(1) {
  $26 = HEAP32[$10>>2]|0;
  $27 = HEAP32[$9>>2]|0;
  $28 = ($26>>>0)<($27>>>0);
  if ($28) {
   $29 = HEAP32[$7>>2]|0;
   $30 = HEAP32[$10>>2]|0;
   $31 = (($29) + ($30)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32 << 24 >> 24;
   $34 = ($33|0)!=(0);
   $56 = $34;
  } else {
   $56 = 0;
  }
  $35 = HEAP32[$7>>2]|0;
  $36 = HEAP32[$10>>2]|0;
  $37 = (($35) + ($36)|0);
  $38 = HEAP8[$37>>0]|0;
  if (!($56)) {
   break;
  }
  $39 = HEAP32[$5>>2]|0;
  $40 = HEAP32[$10>>2]|0;
  $41 = (($39) + ($40)|0);
  HEAP8[$41>>0] = $38;
  $42 = HEAP32[$10>>2]|0;
  $43 = (($42) + 1)|0;
  HEAP32[$10>>2] = $43;
 }
 $44 = $38 << 24 >> 24;
 $45 = ($44|0)==(0);
 if (!($45)) {
  $46 = HEAP32[$10>>2]|0;
  $47 = HEAP32[$8>>2]|0;
  $48 = ($46|0)==($47|0);
  $49 = HEAP32[$8>>2]|0;
  $50 = ($49|0)==(-1);
  $or$cond = $48 | $50;
  if (!($or$cond)) {
   $54 = HEAP32[$5>>2]|0;
   HEAP8[$54>>0] = 0;
   HEAP32[$4>>2] = 34;
   $55 = HEAP32[$4>>2]|0;
   STACKTOP = sp;return ($55|0);
  }
 }
 $51 = HEAP32[$5>>2]|0;
 $52 = HEAP32[$10>>2]|0;
 $53 = (($51) + ($52)|0);
 HEAP8[$53>>0] = 0;
 HEAP32[$4>>2] = 0;
 $55 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($55|0);
}
function _mal_device__on_read_from_client($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((10744|0),(10766|0),2580,(12884|0));
  // unreachable;
 }
 $14 = HEAP32[$9>>2]|0;
 $15 = ((($14)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$10>>2] = $16;
 $17 = HEAP32[$10>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = HEAP32[$10>>2]|0;
  $20 = HEAP32[$9>>2]|0;
  $21 = HEAP32[$6>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = (FUNCTION_TABLE_iiii[$19 & 15]($20,$21,$22)|0);
  HEAP32[$4>>2] = $23;
  $24 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($24|0);
 } else {
  HEAP32[$4>>2] = 0;
  $24 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _mal_dsp_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 76|0;
 $5 = sp + 72|0;
 $6 = sp + 68|0;
 $7 = sp + 64|0;
 $8 = sp + 60|0;
 $9 = sp + 32|0;
 $10 = sp + 28|0;
 $11 = sp + 24|0;
 $12 = sp + 20|0;
 $13 = sp + 80|0;
 $14 = sp + 16|0;
 $15 = sp + 12|0;
 $16 = sp + 8|0;
 $17 = sp + 4|0;
 $18 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $19 = HEAP32[$8>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  HEAP32[$4>>2] = -2;
  $272 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($272|0);
 }
 $21 = HEAP32[$8>>2]|0;
 _memset(($21|0),0,38060)|0;
 $22 = HEAP32[$8>>2]|0;
 $23 = HEAP32[$5>>2]|0;
 dest=$22; src=$23; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $24 = HEAP32[$6>>2]|0;
 $25 = HEAP32[$8>>2]|0;
 $26 = ((($25)) + 68|0);
 HEAP32[$26>>2] = $24;
 $27 = HEAP32[$7>>2]|0;
 $28 = HEAP32[$8>>2]|0;
 $29 = ((($28)) + 72|0);
 HEAP32[$29>>2] = $27;
 $30 = HEAP32[$8>>2]|0;
 $31 = ((($30)) + 64|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32>>>0)>(512);
 if ($33) {
  label = 5;
 } else {
  $34 = HEAP32[$8>>2]|0;
  $35 = ((($34)) + 64|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0);
  if ($37) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $38 = HEAP32[$8>>2]|0;
  $39 = ((($38)) + 64|0);
  HEAP32[$39>>2] = 512;
 }
 $40 = HEAP32[$5>>2]|0;
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$5>>2]|0;
 $44 = ((($43)) + 40|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($42|0)!=($45|0);
 if ($46) {
  $47 = HEAP32[$8>>2]|0;
  $48 = ((($47)) + 38056|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49 & -3;
  $51 = $50 | 2;
  HEAP8[$48>>0] = $51;
  $52 = HEAP32[$5>>2]|0;
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  HEAP32[$9>>2] = $54;
  $55 = HEAP32[$5>>2]|0;
  $56 = ((($55)) + 40|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($9)) + 4|0);
  HEAP32[$58>>2] = $57;
  $59 = HEAP32[$5>>2]|0;
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($9)) + 8|0);
  HEAP32[$61>>2] = $60;
  $62 = ((($9)) + 12|0);
  HEAP32[$62>>2] = 5;
  $63 = HEAP32[$5>>2]|0;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ((($9)) + 16|0);
  HEAP32[$66>>2] = $65;
  $67 = ((($9)) + 20|0);
  HEAP32[$67>>2] = 1;
  $68 = HEAP32[$5>>2]|0;
  $69 = ((($68)) + 64|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($9)) + 24|0);
  HEAP32[$71>>2] = $70;
  $72 = HEAP32[$8>>2]|0;
  $73 = HEAP32[$8>>2]|0;
  $74 = ((($73)) + 76|0);
  $75 = (_mal_src_init($9,3,$72,$74)|0);
  HEAP32[$10>>2] = $75;
  $76 = HEAP32[$10>>2]|0;
  $77 = ($76|0)!=(0);
  if ($77) {
   $78 = HEAP32[$10>>2]|0;
   HEAP32[$4>>2] = $78;
   $272 = HEAP32[$4>>2]|0;
   STACKTOP = sp;return ($272|0);
  }
 }
 $79 = HEAP32[$8>>2]|0;
 $80 = ((($79)) + 38056|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81 & -2;
 HEAP8[$80>>0] = $82;
 $83 = HEAP32[$5>>2]|0;
 $84 = ((($83)) + 12|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&255;
 $87 = ($86|0)!=(0);
 L15: do {
  if ($87) {
   $88 = HEAP32[$5>>2]|0;
   $89 = ((($88)) + 44|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = ($91|0)!=(0);
   if ($92) {
    $93 = HEAP32[$5>>2]|0;
    $94 = ((($93)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = HEAP32[$5>>2]|0;
    $97 = ((($96)) + 36|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($95>>>0)<($98>>>0);
    $100 = HEAP32[$5>>2]|0;
    $101 = ((($100)) + 36|0);
    $102 = ((($100)) + 4|0);
    $$sink = $99 ? $102 : $101;
    $103 = HEAP32[$$sink>>2]|0;
    HEAP32[$12>>2] = $103;
    HEAP32[$11>>2] = 0;
    while(1) {
     $104 = HEAP32[$11>>2]|0;
     $105 = HEAP32[$12>>2]|0;
     $106 = ($104>>>0)<($105>>>0);
     $107 = HEAP32[$5>>2]|0;
     if (!($106)) {
      break;
     }
     $108 = ((($107)) + 12|0);
     $109 = HEAP32[$11>>2]|0;
     $110 = (($108) + ($109)|0);
     $111 = HEAP8[$110>>0]|0;
     $112 = HEAP32[$8>>2]|0;
     $113 = ((($112)) + 38020|0);
     $114 = HEAP32[$11>>2]|0;
     $115 = (($113) + ($114)|0);
     HEAP8[$115>>0] = $111;
     $116 = HEAP32[$11>>2]|0;
     $117 = (($116) + 1)|0;
     HEAP32[$11>>2] = $117;
    }
    $118 = ((($107)) + 36|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = HEAP32[$5>>2]|0;
    $121 = ((($120)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($119>>>0)>($122>>>0);
    L22: do {
     if ($123) {
      $124 = HEAP32[$5>>2]|0;
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      HEAP32[$11>>2] = $126;
      while(1) {
       $127 = HEAP32[$11>>2]|0;
       $128 = HEAP32[$5>>2]|0;
       $129 = ((($128)) + 36|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = ($127>>>0)<($130>>>0);
       if (!($131)) {
        break L22;
       }
       HEAP8[$13>>0] = 0;
       HEAP32[$14>>2] = 0;
       while(1) {
        $132 = HEAP32[$14>>2]|0;
        $133 = HEAP32[$5>>2]|0;
        $134 = ((($133)) + 36|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($132>>>0)<($135>>>0);
        if (!($136)) {
         break;
        }
        HEAP32[$15>>2] = 0;
        HEAP32[$16>>2] = 0;
        while(1) {
         $137 = HEAP32[$16>>2]|0;
         $138 = HEAP32[$5>>2]|0;
         $139 = ((($138)) + 4|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = ($137>>>0)<($140>>>0);
         if (!($141)) {
          break;
         }
         $142 = HEAP32[$5>>2]|0;
         $143 = ((($142)) + 44|0);
         $144 = HEAP32[$14>>2]|0;
         $145 = (($143) + ($144)|0);
         $146 = HEAP8[$145>>0]|0;
         $147 = $146&255;
         $148 = HEAP32[$5>>2]|0;
         $149 = ((($148)) + 12|0);
         $150 = HEAP32[$16>>2]|0;
         $151 = (($149) + ($150)|0);
         $152 = HEAP8[$151>>0]|0;
         $153 = $152&255;
         $154 = ($147|0)==($153|0);
         if ($154) {
          label = 22;
          break;
         }
         $155 = HEAP32[$16>>2]|0;
         $156 = (($155) + 1)|0;
         HEAP32[$16>>2] = $156;
        }
        if ((label|0) == 22) {
         label = 0;
         HEAP32[$15>>2] = 1;
        }
        $157 = HEAP32[$15>>2]|0;
        $158 = ($157|0)!=(0);
        if (!($158)) {
         label = 25;
         break;
        }
        $164 = HEAP32[$14>>2]|0;
        $165 = (($164) + 1)|0;
        HEAP32[$14>>2] = $165;
       }
       if ((label|0) == 25) {
        label = 0;
        $159 = HEAP32[$5>>2]|0;
        $160 = ((($159)) + 44|0);
        $161 = HEAP32[$14>>2]|0;
        $162 = (($160) + ($161)|0);
        $163 = HEAP8[$162>>0]|0;
        HEAP8[$13>>0] = $163;
       }
       $166 = HEAP8[$13>>0]|0;
       $167 = HEAP32[$8>>2]|0;
       $168 = ((($167)) + 38020|0);
       $169 = HEAP32[$11>>2]|0;
       $170 = (($168) + ($169)|0);
       HEAP8[$170>>0] = $166;
       $171 = HEAP32[$11>>2]|0;
       $172 = (($171) + 1)|0;
       HEAP32[$11>>2] = $172;
      }
     }
    } while(0);
    HEAP32[$11>>2] = 0;
    while(1) {
     $173 = HEAP32[$11>>2]|0;
     $174 = HEAP32[$5>>2]|0;
     $175 = ((($174)) + 36|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = ($173>>>0)<($176>>>0);
     if (!($177)) {
      break;
     }
     $178 = HEAP32[$8>>2]|0;
     $179 = ((($178)) + 38020|0);
     $180 = HEAP32[$11>>2]|0;
     $181 = (($179) + ($180)|0);
     $182 = HEAP8[$181>>0]|0;
     $183 = $182&255;
     $184 = HEAP32[$5>>2]|0;
     $185 = ((($184)) + 44|0);
     $186 = HEAP32[$11>>2]|0;
     $187 = (($185) + ($186)|0);
     $188 = HEAP8[$187>>0]|0;
     $189 = $188&255;
     $190 = ($183|0)!=($189|0);
     if ($190) {
      label = 31;
      break;
     }
     $196 = HEAP32[$11>>2]|0;
     $197 = (($196) + 1)|0;
     HEAP32[$11>>2] = $197;
    }
    if ((label|0) == 31) {
     $191 = HEAP32[$8>>2]|0;
     $192 = ((($191)) + 38056|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193 & -2;
     $195 = $194 | 1;
     HEAP8[$192>>0] = $195;
    }
    $198 = HEAP32[$8>>2]|0;
    $199 = ((($198)) + 38056|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $200 & 1;
    $202 = $201&255;
    $203 = ($202|0)!=(0);
    if ($203) {
     HEAP32[$17>>2] = 0;
     while(1) {
      $204 = HEAP32[$17>>2]|0;
      $205 = HEAP32[$5>>2]|0;
      $206 = ((($205)) + 36|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = ($204>>>0)<($207>>>0);
      if (!($208)) {
       break L15;
      }
      HEAP32[$18>>2] = 0;
      while(1) {
       $209 = HEAP32[$18>>2]|0;
       $210 = HEAP32[$5>>2]|0;
       $211 = ((($210)) + 36|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = ($209>>>0)<($212>>>0);
       if (!($213)) {
        break;
       }
       $214 = HEAP32[$8>>2]|0;
       $215 = ((($214)) + 38020|0);
       $216 = HEAP32[$18>>2]|0;
       $217 = (($215) + ($216)|0);
       $218 = HEAP8[$217>>0]|0;
       $219 = $218&255;
       $220 = HEAP32[$5>>2]|0;
       $221 = ((($220)) + 44|0);
       $222 = HEAP32[$17>>2]|0;
       $223 = (($221) + ($222)|0);
       $224 = HEAP8[$223>>0]|0;
       $225 = $224&255;
       $226 = ($219|0)==($225|0);
       if ($226) {
        $227 = HEAP32[$17>>2]|0;
        $228 = $227&255;
        $229 = HEAP32[$8>>2]|0;
        $230 = ((($229)) + 38038|0);
        $231 = HEAP32[$18>>2]|0;
        $232 = (($230) + ($231)|0);
        HEAP8[$232>>0] = $228;
       }
       $233 = HEAP32[$18>>2]|0;
       $234 = (($233) + 1)|0;
       HEAP32[$18>>2] = $234;
      }
      $235 = HEAP32[$17>>2]|0;
      $236 = (($235) + 1)|0;
      HEAP32[$17>>2] = $236;
     }
    }
   }
  }
 } while(0);
 $237 = HEAP32[$5>>2]|0;
 $238 = HEAP32[$237>>2]|0;
 $239 = HEAP32[$5>>2]|0;
 $240 = ((($239)) + 32|0);
 $241 = HEAP32[$240>>2]|0;
 $242 = ($238|0)==($241|0);
 if ($242) {
  $243 = HEAP32[$5>>2]|0;
  $244 = ((($243)) + 4|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = HEAP32[$5>>2]|0;
  $247 = ((($246)) + 36|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = ($245|0)==($248|0);
  if ($249) {
   $250 = HEAP32[$5>>2]|0;
   $251 = ((($250)) + 8|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = HEAP32[$5>>2]|0;
   $254 = ((($253)) + 40|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ($252|0)==($255|0);
   if ($256) {
    $257 = HEAP32[$8>>2]|0;
    $258 = ((($257)) + 38056|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = $259 & 1;
    $261 = $260&255;
    $262 = ($261|0)!=(0);
    if ($262) {
     label = 47;
    } else {
     $263 = HEAP32[$8>>2]|0;
     $264 = ((($263)) + 38056|0);
     $265 = HEAP8[$264>>0]|0;
     $266 = $265 & -5;
     $267 = $266 | 4;
     HEAP8[$264>>0] = $267;
    }
   } else {
    label = 47;
   }
  } else {
   label = 47;
  }
 } else {
  label = 47;
 }
 if ((label|0) == 47) {
  $268 = HEAP32[$8>>2]|0;
  $269 = ((($268)) + 38056|0);
  $270 = HEAP8[$269>>0]|0;
  $271 = $270 & -5;
  HEAP8[$269>>0] = $271;
 }
 HEAP32[$4>>2] = 0;
 $272 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($272|0);
}
function _mal_device__on_read_from_device($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $12 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = $12;
 $13 = HEAP32[$9>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((10744|0),(10766|0),2596,(12753|0));
  // unreachable;
 }
 $15 = HEAP32[$9>>2]|0;
 $16 = ((($15)) + 38716|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$4>>2] = 0;
  $54 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($54|0);
 }
 $19 = HEAP32[$6>>2]|0;
 HEAP32[$10>>2] = $19;
 $20 = HEAP32[$10>>2]|0;
 $21 = HEAP32[$9>>2]|0;
 $22 = ((($21)) + 38716|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20>>>0)>($23>>>0);
 if ($24) {
  $25 = HEAP32[$9>>2]|0;
  $26 = ((($25)) + 38716|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$10>>2] = $27;
 }
 $28 = HEAP32[$10>>2]|0;
 $29 = HEAP32[$9>>2]|0;
 $30 = ((($29)) + 628|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = Math_imul($28, $31)|0;
 $33 = HEAP32[$9>>2]|0;
 $34 = ((($33)) + 624|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (_mal_get_sample_size_in_bytes($35)|0);
 $37 = Math_imul($32, $36)|0;
 HEAP32[$11>>2] = $37;
 $38 = HEAP32[$7>>2]|0;
 $39 = HEAP32[$9>>2]|0;
 $40 = ((($39)) + 38720|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[$11>>2]|0;
 _memcpy(($38|0),($41|0),($42|0))|0;
 $43 = HEAP32[$10>>2]|0;
 $44 = HEAP32[$9>>2]|0;
 $45 = ((($44)) + 38716|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) - ($43))|0;
 HEAP32[$45>>2] = $47;
 $48 = HEAP32[$11>>2]|0;
 $49 = HEAP32[$9>>2]|0;
 $50 = ((($49)) + 38720|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($48)|0);
 HEAP32[$50>>2] = $52;
 $53 = HEAP32[$10>>2]|0;
 HEAP32[$4>>2] = $53;
 $54 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($54|0);
}
function _mal_worker_thread($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$1>>2] = $0;
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $5;
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((10744|0),(10766|0),9048,(12626|0));
  // unreachable;
 }
 HEAP32[$3>>2] = 1;
 while(1) {
  $8 = HEAP32[$2>>2]|0;
  (_mal_device__stop_backend($8)|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = ($9|0)!=(0);
  if ($10) {
   HEAP32[$3>>2] = 0;
  } else {
   $11 = HEAP32[$2>>2]|0;
   $12 = ((($11)) + 60|0);
   $13 = HEAP32[$12>>2]|0;
   HEAP32[$4>>2] = $13;
   $14 = HEAP32[$4>>2]|0;
   $15 = ($14|0)!=(0|0);
   if ($15) {
    $16 = HEAP32[$4>>2]|0;
    $17 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_vi[$16 & 31]($17);
   }
  }
  $18 = HEAP32[$2>>2]|0;
  _mal_device__set_state($18,1);
  $19 = HEAP32[$2>>2]|0;
  $20 = ((($19)) + 524|0);
  (_mal_event_signal($20)|0);
  $21 = HEAP32[$2>>2]|0;
  $22 = ((($21)) + 356|0);
  (_mal_event_wait($22)|0);
  $23 = HEAP32[$2>>2]|0;
  $24 = ((($23)) + 616|0);
  HEAP32[$24>>2] = 0;
  $25 = HEAP32[$2>>2]|0;
  $26 = (_mal_device__get_state($25)|0);
  $27 = ($26|0)==(0);
  $28 = HEAP32[$2>>2]|0;
  if ($27) {
   label = 14;
   break;
  }
  $29 = (_mal_device__get_state($28)|0);
  $30 = ($29|0)==(3);
  if (!($30)) {
   label = 10;
   break;
  }
  $31 = HEAP32[$2>>2]|0;
  $32 = (_mal_device__start_backend($31)|0);
  $33 = HEAP32[$2>>2]|0;
  $34 = ((($33)) + 616|0);
  HEAP32[$34>>2] = $32;
  $35 = HEAP32[$2>>2]|0;
  $36 = ((($35)) + 616|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)!=(0);
  $39 = HEAP32[$2>>2]|0;
  if ($38) {
   $40 = ((($39)) + 440|0);
   (_mal_event_signal($40)|0);
   continue;
  } else {
   _mal_device__set_state($39,2);
   $41 = HEAP32[$2>>2]|0;
   $42 = ((($41)) + 440|0);
   (_mal_event_signal($42)|0);
   $43 = HEAP32[$2>>2]|0;
   (_mal_device__main_loop($43)|0);
   continue;
  }
 }
 if ((label|0) == 10) {
  ___assert_fail((12644|0),(10766|0),9089,(12626|0));
  // unreachable;
 }
 else if ((label|0) == 14) {
  $44 = ((($28)) + 524|0);
  (_mal_event_signal($44)|0);
  STACKTOP = sp;return (0|0);
 }
 return (0)|0;
}
function _mal_thread_create($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $9 = HEAP32[$5>>2]|0;
 $10 = ($9|0)==(0|0);
 $11 = HEAP32[$6>>2]|0;
 $12 = ($11|0)==(0|0);
 $or$cond = $10 | $12;
 $13 = HEAP32[$7>>2]|0;
 $14 = ($13|0)==(0|0);
 $or$cond3 = $or$cond | $14;
 if ($or$cond3) {
  HEAP32[$4>>2] = 0;
  $22 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($22|0);
 } else {
  $15 = HEAP32[$5>>2]|0;
  $16 = HEAP32[$6>>2]|0;
  HEAP32[$16>>2] = $15;
  $17 = HEAP32[$5>>2]|0;
  $18 = HEAP32[$6>>2]|0;
  $19 = HEAP32[$7>>2]|0;
  $20 = HEAP32[$8>>2]|0;
  $21 = (_mal_thread_create__posix($17,$18,$19,$20)|0);
  HEAP32[$4>>2] = $21;
  $22 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _mal_thread_create__posix($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $10 = HEAP32[$5>>2]|0;
 $11 = ((($10)) + 64|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$6>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$7>>2]|0;
 $17 = HEAP32[$8>>2]|0;
 $18 = (FUNCTION_TABLE_iiiii[$13 & 7]($15,0,$16,$17)|0);
 HEAP32[$9>>2] = $18;
 $19 = HEAP32[$9>>2]|0;
 $20 = ($19|0)!=(0);
 if ($20) {
  HEAP32[$4>>2] = -25;
  $21 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($21|0);
 } else {
  HEAP32[$4>>2] = 0;
  $21 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _mal_device__stop_backend($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  HEAP32[$2>>2] = -5;
  $5 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((10744|0),(10766|0),8915,(12728|0));
  // unreachable;
 }
 return (0)|0;
}
function _mal_device__start_backend($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  HEAP32[$2>>2] = -5;
  $5 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((10744|0),(10766|0),8871,(12702|0));
  // unreachable;
 }
 return (0)|0;
}
function _mal_device__main_loop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  HEAP32[$2>>2] = -5;
  $5 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((10744|0),(10766|0),9003,(12680|0));
  // unreachable;
 }
 return (0)|0;
}
function _mal_get_sample_size_in_bytes($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 24|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 ;HEAP32[$2>>2]=HEAP32[3496>>2]|0;HEAP32[$2+4>>2]=HEAP32[3496+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[3496+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[3496+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[3496+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[3496+20>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($2) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _mal_dsp__src_on_read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$8>>2] = $9;
 $10 = HEAP32[$8>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = HEAP32[$8>>2]|0;
  $13 = ((($12)) + 68|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$8>>2]|0;
  $16 = HEAP32[$5>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$8>>2]|0;
  $19 = ((($18)) + 72|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiiii[$14 & 7]($15,$16,$17,$20)|0);
  STACKTOP = sp;return ($21|0);
 } else {
  ___assert_fail((12844|0),(10766|0),10751,(12863|0));
  // unreachable;
 }
 return (0)|0;
}
function _mal_src_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$4>>2] = -2;
  $45 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($45|0);
 }
 $11 = HEAP32[$8>>2]|0;
 _memset(($11|0),0,37944)|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)==(0|0);
 $or$cond = $13 | $15;
 if ($or$cond) {
  HEAP32[$4>>2] = -2;
  $45 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($45|0);
 }
 $16 = HEAP32[$5>>2]|0;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $20 = HEAP32[$5>>2]|0;
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22>>>0)>(18);
  if (!($23)) {
   $24 = HEAP32[$8>>2]|0;
   $25 = HEAP32[$5>>2]|0;
   ;HEAP32[$24>>2]=HEAP32[$25>>2]|0;HEAP32[$24+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$24+12>>2]=HEAP32[$25+12>>2]|0;HEAP32[$24+16>>2]=HEAP32[$25+16>>2]|0;HEAP32[$24+20>>2]=HEAP32[$25+20>>2]|0;HEAP32[$24+24>>2]=HEAP32[$25+24>>2]|0;
   $26 = HEAP32[$6>>2]|0;
   $27 = HEAP32[$8>>2]|0;
   $28 = ((($27)) + 28|0);
   HEAP32[$28>>2] = $26;
   $29 = HEAP32[$7>>2]|0;
   $30 = HEAP32[$8>>2]|0;
   $31 = ((($30)) + 32|0);
   HEAP32[$31>>2] = $29;
   $32 = HEAP32[$8>>2]|0;
   $33 = ((($32)) + 24|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34>>>0)>(512);
   if ($35) {
    label = 10;
   } else {
    $36 = HEAP32[$8>>2]|0;
    $37 = ((($36)) + 24|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)==(0);
    if ($39) {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $40 = HEAP32[$8>>2]|0;
    $41 = ((($40)) + 24|0);
    HEAP32[$41>>2] = 512;
   }
   $42 = HEAP32[$8>>2]|0;
   $43 = HEAP32[$8>>2]|0;
   $44 = ((($43)) + 1060|0);
   _mal_src_cache_init($42,$44);
   HEAP32[$4>>2] = 0;
   $45 = HEAP32[$4>>2]|0;
   STACKTOP = sp;return ($45|0);
  }
 }
 HEAP32[$4>>2] = -2;
 $45 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($45|0);
}
function _mal_src_cache_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((12785|0),(10766|0),10064,(12804|0));
  // unreachable;
 }
 $6 = HEAP32[$3>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  $9 = HEAP32[$3>>2]|0;
  HEAP32[$9>>2] = $8;
  $10 = HEAP32[$3>>2]|0;
  $11 = ((($10)) + 36868|0);
  HEAP32[$11>>2] = 0;
  $12 = HEAP32[$3>>2]|0;
  $13 = ((($12)) + 36872|0);
  HEAP32[$13>>2] = 0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((12823|0),(10766|0),10065,(12804|0));
  // unreachable;
 }
}
function _mal_enumerate_devices($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $9 = HEAP32[$7>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = (_mal_post_error(0,12975,-2)|0);
  HEAP32[$4>>2] = $11;
  $25 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($25|0);
 }
 $12 = HEAP32[$8>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = HEAP32[$8>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16*260)|0;
  _memset(($14|0),0,($17|0))|0;
 }
 $18 = HEAP32[$5>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $cond = ($19|0)==(8);
 if (!($cond)) {
  ___assert_fail((14634|0),(10766|0),9494,(13044|0));
  // unreachable;
 }
 $20 = HEAP32[$5>>2]|0;
 $21 = HEAP32[$6>>2]|0;
 $22 = HEAP32[$7>>2]|0;
 $23 = HEAP32[$8>>2]|0;
 $24 = (_mal_enumerate_devices__sdl($20,$21,$22,$23)|0);
 HEAP32[$4>>2] = $24;
 $25 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($25|0);
}
function _mal_enumerate_devices__sdl($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $9 = HEAP32[$6>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$8>>2] = $10;
 $11 = HEAP32[$6>>2]|0;
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$7>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = HEAP32[$8>>2]|0;
  $15 = ($14>>>0)>(0);
  if (!($15)) {
   STACKTOP = sp;return 0;
  }
  $16 = HEAP32[$5>>2]|0;
  $17 = ($16|0)==(0);
  $18 = HEAP32[$7>>2]|0;
  HEAP32[$18>>2] = 0;
  $19 = HEAP32[$7>>2]|0;
  $20 = ((($19)) + 4|0);
  if ($17) {
   (_mal_strncpy_s($20,256,12464,-1)|0);
  } else {
   (_mal_strncpy_s($20,256,12488,-1)|0);
  }
  $21 = HEAP32[$7>>2]|0;
  $22 = ((($21)) + 260|0);
  HEAP32[$7>>2] = $22;
  $23 = HEAP32[$6>>2]|0;
  $$sink = $23;
 } else {
  $24 = HEAP32[$6>>2]|0;
  $$sink = $24;
 }
 $25 = HEAP32[$$sink>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$$sink>>2] = $26;
 STACKTOP = sp;return 0;
}
function _mal_next_power_of_2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = $4 >>> 1;
 $6 = HEAP32[$1>>2]|0;
 $7 = $6 | $5;
 HEAP32[$1>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = $8 >>> 2;
 $10 = HEAP32[$1>>2]|0;
 $11 = $10 | $9;
 HEAP32[$1>>2] = $11;
 $12 = HEAP32[$1>>2]|0;
 $13 = $12 >>> 4;
 $14 = HEAP32[$1>>2]|0;
 $15 = $14 | $13;
 HEAP32[$1>>2] = $15;
 $16 = HEAP32[$1>>2]|0;
 $17 = $16 >>> 8;
 $18 = HEAP32[$1>>2]|0;
 $19 = $18 | $17;
 HEAP32[$1>>2] = $19;
 $20 = HEAP32[$1>>2]|0;
 $21 = $20 >>> 16;
 $22 = HEAP32[$1>>2]|0;
 $23 = $22 | $21;
 HEAP32[$1>>2] = $23;
 $24 = HEAP32[$1>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[$1>>2] = $25;
 $26 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($26|0);
}
function _mal_format_to_sdl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 0:  {
  HEAP16[$1>>1] = 0;
  break;
 }
 case 1:  {
  HEAP16[$1>>1] = 8;
  break;
 }
 case 2:  {
  HEAP16[$1>>1] = -32752;
  break;
 }
 case 3:  {
  HEAP16[$1>>1] = -32736;
  break;
 }
 case 4:  {
  HEAP16[$1>>1] = -32736;
  break;
 }
 default: {
  HEAP16[$1>>1] = 0;
 }
 }
 $4 = HEAP16[$1>>1]|0;
 STACKTOP = sp;return ($4|0);
}
function _mal_audio_callback__sdl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $8 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$6>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((10744|0),(10766|0),8720,(13156|0));
  // unreachable;
 }
 $11 = HEAP32[$5>>2]|0;
 $12 = HEAP32[$6>>2]|0;
 $13 = ((($12)) + 624|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mal_get_sample_size_in_bytes($14)|0);
 $16 = (($11>>>0) / ($15>>>0))&-1;
 $17 = HEAP32[$6>>2]|0;
 $18 = ((($17)) + 628|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($16>>>0) / ($19>>>0))&-1;
 HEAP32[$7>>2] = $20;
 $21 = HEAP32[$6>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 $25 = HEAP32[$6>>2]|0;
 $26 = HEAP32[$7>>2]|0;
 $27 = HEAP32[$4>>2]|0;
 if ($24) {
  (_mal_device__read_frames_from_client($25,$26,$27)|0);
  STACKTOP = sp;return;
 } else {
  _mal_device__send_frames_to_client($25,$26,$27);
  STACKTOP = sp;return;
 }
}
function _mal_format_from_sdl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $switch$split22D = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = sp + 4|0;
 HEAP16[$2>>1] = $0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $switch$split2D = ($4|0)<(32800);
 L1: do {
  if ($switch$split2D) {
   $switch$split22D = ($4|0)<(32784);
   if ($switch$split22D) {
    switch ($4|0) {
    case 8:  {
     break;
    }
    default: {
     label = 6;
     break L1;
    }
    }
    HEAP32[$1>>2] = 1;
    break;
   } else {
    switch ($4|0) {
    case 32784:  {
     break;
    }
    default: {
     label = 6;
     break L1;
    }
    }
    HEAP32[$1>>2] = 2;
    break;
   }
  } else {
   switch ($4|0) {
   case 32800:  {
    HEAP32[$1>>2] = 4;
    break L1;
    break;
   }
   case 33056:  {
    HEAP32[$1>>2] = 5;
    break L1;
    break;
   }
   default: {
    label = 6;
    break L1;
   }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  HEAP32[$1>>2] = 0;
 }
 $5 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _mal_device__read_frames_from_client($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $11 = HEAP32[$3>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((10744|0),(10766|0),2619,(13581|0));
  // unreachable;
 }
 $13 = HEAP32[$4>>2]|0;
 $14 = ($13>>>0)>(0);
 if (!($14)) {
  ___assert_fail((13214|0),(10766|0),2620,(13581|0));
  // unreachable;
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = HEAP32[$3>>2]|0;
  $18 = ((($17)) + 656|0);
  $19 = HEAP32[$4>>2]|0;
  $20 = HEAP32[$5>>2]|0;
  $21 = (_mal_dsp_read_frames($18,$19,$20)|0);
  HEAP32[$6>>2] = $21;
  $22 = HEAP32[$6>>2]|0;
  $23 = HEAP32[$3>>2]|0;
  $24 = ((($23)) + 628|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = Math_imul($22, $25)|0;
  HEAP32[$7>>2] = $26;
  $27 = HEAP32[$3>>2]|0;
  $28 = ((($27)) + 624|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_mal_get_sample_size_in_bytes($29)|0);
  HEAP32[$8>>2] = $30;
  $31 = HEAP32[$7>>2]|0;
  $32 = HEAP32[$8>>2]|0;
  $33 = Math_imul($31, $32)|0;
  HEAP32[$9>>2] = $33;
  $34 = HEAP32[$4>>2]|0;
  $35 = HEAP32[$3>>2]|0;
  $36 = ((($35)) + 628|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = Math_imul($34, $37)|0;
  $39 = HEAP32[$7>>2]|0;
  $40 = (($38) - ($39))|0;
  $41 = HEAP32[$8>>2]|0;
  $42 = Math_imul($40, $41)|0;
  HEAP32[$10>>2] = $42;
  $43 = HEAP32[$5>>2]|0;
  $44 = HEAP32[$9>>2]|0;
  $45 = (($43) + ($44)|0);
  $46 = HEAP32[$10>>2]|0;
  _memset(($45|0),0,($46|0))|0;
  $47 = HEAP32[$7>>2]|0;
  STACKTOP = sp;return ($47|0);
 } else {
  ___assert_fail((13229|0),(10766|0),2621,(13581|0));
  // unreachable;
 }
 return (0)|0;
}
function _mal_device__send_frames_to_client($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 24|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((10744|0),(10766|0),2636,(13180|0));
  // unreachable;
 }
 $12 = HEAP32[$4>>2]|0;
 $13 = ($12>>>0)>(0);
 if (!($13)) {
  ___assert_fail((13214|0),(10766|0),2637,(13180|0));
  // unreachable;
 }
 $14 = HEAP32[$5>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((13229|0),(10766|0),2638,(13180|0));
  // unreachable;
 }
 $16 = HEAP32[$3>>2]|0;
 $17 = ((($16)) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$6>>2] = $18;
 $19 = HEAP32[$6>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[$4>>2]|0;
 $22 = HEAP32[$3>>2]|0;
 $23 = ((($22)) + 38716|0);
 HEAP32[$23>>2] = $21;
 $24 = HEAP32[$5>>2]|0;
 $25 = HEAP32[$3>>2]|0;
 $26 = ((($25)) + 38720|0);
 HEAP32[$26>>2] = $24;
 $27 = HEAP32[$3>>2]|0;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (_mal_get_sample_size_in_bytes($29)|0);
 $31 = (4096 / ($30>>>0))&-1;
 $32 = HEAP32[$3>>2]|0;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($31>>>0) / ($34>>>0))&-1;
 HEAP32[$8>>2] = $35;
 while(1) {
  $36 = HEAP32[$3>>2]|0;
  $37 = ((($36)) + 656|0);
  $38 = HEAP32[$8>>2]|0;
  $39 = (_mal_dsp_read_frames($37,$38,$7)|0);
  HEAP32[$9>>2] = $39;
  $40 = HEAP32[$9>>2]|0;
  $41 = ($40|0)==(0);
  if ($41) {
   label = 11;
   break;
  }
  $42 = HEAP32[$6>>2]|0;
  $43 = HEAP32[$3>>2]|0;
  $44 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_viii[$42 & 63]($43,$44,$7);
  $45 = HEAP32[$9>>2]|0;
  $46 = HEAP32[$8>>2]|0;
  $47 = ($45>>>0)<($46>>>0);
  if ($47) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _mal_dsp_read_frames($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[$3>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (_mal_dsp_read_frames_ex($6,$7,$8,0)|0);
 STACKTOP = sp;return ($9|0);
}
function _mal_dsp_read_frames_ex($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 147520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(147520|0);
 $4 = sp + 48|0;
 $5 = sp + 44|0;
 $6 = sp + 40|0;
 $7 = sp + 36|0;
 $8 = sp + 32|0;
 $9 = sp + 56|0;
 $10 = sp + 24|0;
 $11 = sp + 16|0;
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $15 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $16 = HEAP32[$5>>2]|0;
 $17 = ($16|0)==(0|0);
 $18 = HEAP32[$7>>2]|0;
 $19 = ($18|0)==(0|0);
 $or$cond = $17 | $19;
 if ($or$cond) {
  HEAP32[$4>>2] = 0;
  $207 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($207|0);
 }
 $20 = HEAP32[$5>>2]|0;
 $21 = ((($20)) + 38056|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22&255) >>> 2;
 $24 = $23 & 1;
 $25 = $24&255;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = HEAP32[$5>>2]|0;
  $28 = ((($27)) + 68|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$5>>2]|0;
  $31 = HEAP32[$6>>2]|0;
  $32 = HEAP32[$7>>2]|0;
  $33 = HEAP32[$5>>2]|0;
  $34 = ((($33)) + 72|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (FUNCTION_TABLE_iiiii[$29 & 7]($30,$31,$32,$35)|0);
  HEAP32[$4>>2] = $36;
  $207 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($207|0);
 }
 HEAP32[$11>>2] = 0;
 HEAP32[$12>>2] = 0;
 while(1) {
  $37 = HEAP32[$6>>2]|0;
  $38 = ($37>>>0)>(0);
  if (!($38)) {
   break;
  }
  HEAP32[$11>>2] = 0;
  $39 = HEAP32[$5>>2]|0;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$5>>2]|0;
  $43 = ((($42)) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41>>>0)>($44>>>0);
  $46 = HEAP32[$5>>2]|0;
  $47 = ((($46)) + 36|0);
  $48 = ((($46)) + 4|0);
  $$sink = $45 ? $48 : $47;
  $49 = HEAP32[$$sink>>2]|0;
  $50 = $49<<3;
  $51 = (73728 / ($50>>>0))&-1;
  HEAP32[$13>>2] = $51;
  $52 = HEAP32[$13>>2]|0;
  $53 = HEAP32[$6>>2]|0;
  $54 = ($52>>>0)>($53>>>0);
  if ($54) {
   $55 = HEAP32[$6>>2]|0;
   HEAP32[$13>>2] = $55;
  }
  HEAP32[$14>>2] = 0;
  $56 = HEAP32[$5>>2]|0;
  $57 = ((($56)) + 38056|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = ($58&255) >>> 1;
  $60 = $59 & 1;
  $61 = $60&255;
  $62 = ($61|0)!=(0);
  $63 = HEAP32[$5>>2]|0;
  if ($62) {
   $64 = ((($63)) + 76|0);
   $65 = HEAP32[$13>>2]|0;
   $66 = HEAP32[$11>>2]|0;
   $67 = (($9) + (($66*73728)|0)|0);
   $68 = HEAP32[$8>>2]|0;
   $69 = (_mal_src_read_frames_ex($64,$65,$67,$68)|0);
   HEAP32[$14>>2] = $69;
   $70 = HEAP32[$5>>2]|0;
   $71 = ((($70)) + 76|0);
   $72 = ((($71)) + 12|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = HEAP32[$11>>2]|0;
   $$sink2 = $73;$$sink4 = $74;
  } else {
   $75 = ((($63)) + 68|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = HEAP32[$5>>2]|0;
   $78 = HEAP32[$13>>2]|0;
   $79 = HEAP32[$11>>2]|0;
   $80 = (($9) + (($79*73728)|0)|0);
   $81 = HEAP32[$5>>2]|0;
   $82 = ((($81)) + 72|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (FUNCTION_TABLE_iiiii[$76 & 7]($77,$78,$80,$83)|0);
   HEAP32[$14>>2] = $84;
   $85 = HEAP32[$5>>2]|0;
   $86 = HEAP32[$85>>2]|0;
   $87 = HEAP32[$11>>2]|0;
   $$sink2 = $86;$$sink4 = $87;
  }
  $88 = (($10) + ($$sink4<<2)|0);
  HEAP32[$88>>2] = $$sink2;
  $89 = HEAP32[$14>>2]|0;
  $90 = ($89|0)==(0);
  if ($90) {
   break;
  }
  $91 = HEAP32[$5>>2]|0;
  $92 = ((($91)) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = HEAP32[$5>>2]|0;
  $95 = ((($94)) + 36|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($93|0)!=($96|0);
  if ($97) {
   $98 = HEAP32[$11>>2]|0;
   $99 = (($10) + ($98<<2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)!=(5);
   if ($101) {
    $102 = HEAP32[$11>>2]|0;
    $103 = (($102) + 1)|0;
    $104 = (($103>>>0) % 2)&-1;
    $105 = (($9) + (($104*73728)|0)|0);
    $106 = HEAP32[$11>>2]|0;
    $107 = (($9) + (($106*73728)|0)|0);
    $108 = HEAP32[$5>>2]|0;
    $109 = HEAP32[$108>>2]|0;
    $110 = HEAP32[$14>>2]|0;
    $111 = HEAP32[$5>>2]|0;
    $112 = ((($111)) + 4|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = Math_imul($110, $113)|0;
    _mal_pcm_convert($105,5,$107,$109,$114);
    $115 = HEAP32[$11>>2]|0;
    $116 = (($115) + 1)|0;
    $117 = (($116>>>0) % 2)&-1;
    HEAP32[$11>>2] = $117;
    $118 = HEAP32[$11>>2]|0;
    $119 = (($10) + ($118<<2)|0);
    HEAP32[$119>>2] = 5;
   }
   $120 = HEAP32[$11>>2]|0;
   $121 = (($120) + 1)|0;
   $122 = (($121>>>0) % 2)&-1;
   $123 = (($9) + (($122*73728)|0)|0);
   $124 = HEAP32[$5>>2]|0;
   $125 = ((($124)) + 36|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = HEAP32[$5>>2]|0;
   $128 = ((($127)) + 44|0);
   $129 = HEAP32[$11>>2]|0;
   $130 = (($9) + (($129*73728)|0)|0);
   $131 = HEAP32[$5>>2]|0;
   $132 = ((($131)) + 4|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = HEAP32[$5>>2]|0;
   $135 = ((($134)) + 12|0);
   $136 = HEAP32[$14>>2]|0;
   _mal_dsp_mix_channels($123,$126,$128,$130,$133,$135,$136,1);
   $137 = HEAP32[$11>>2]|0;
   $138 = (($137) + 1)|0;
   $139 = (($138>>>0) % 2)&-1;
   HEAP32[$11>>2] = $139;
   $140 = HEAP32[$11>>2]|0;
   $141 = (($10) + ($140<<2)|0);
   HEAP32[$141>>2] = 5;
  }
  $142 = HEAP32[$5>>2]|0;
  $143 = ((($142)) + 38056|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = $144 & 1;
  $146 = $145&255;
  $147 = ($146|0)!=(0);
  L26: do {
   if ($147) {
    HEAP32[$15>>2] = 0;
    while(1) {
     $148 = HEAP32[$15>>2]|0;
     $149 = HEAP32[$14>>2]|0;
     $150 = ($148>>>0)<($149>>>0);
     if (!($150)) {
      break L26;
     }
     $151 = HEAP32[$11>>2]|0;
     $152 = (($9) + (($151*73728)|0)|0);
     $153 = HEAP32[$15>>2]|0;
     $154 = HEAP32[$5>>2]|0;
     $155 = ((($154)) + 36|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = Math_imul($153, $156)|0;
     $158 = HEAP32[$11>>2]|0;
     $159 = (($10) + ($158<<2)|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = (_mal_get_sample_size_in_bytes($160)|0);
     $162 = Math_imul($157, $161)|0;
     $163 = (($152) + ($162)|0);
     $164 = HEAP32[$5>>2]|0;
     $165 = ((($164)) + 36|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = HEAP32[$5>>2]|0;
     $168 = ((($167)) + 38038|0);
     $169 = HEAP32[$11>>2]|0;
     $170 = (($10) + ($169<<2)|0);
     $171 = HEAP32[$170>>2]|0;
     _mal_rearrange_channels($163,$166,$168,$171);
     $172 = HEAP32[$15>>2]|0;
     $173 = (($172) + 1)|0;
     HEAP32[$15>>2] = $173;
    }
   }
  } while(0);
  $174 = HEAP32[$7>>2]|0;
  $175 = HEAP32[$5>>2]|0;
  $176 = ((($175)) + 32|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = HEAP32[$11>>2]|0;
  $179 = (($9) + (($178*73728)|0)|0);
  $180 = HEAP32[$11>>2]|0;
  $181 = (($10) + ($180<<2)|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = HEAP32[$14>>2]|0;
  $184 = HEAP32[$5>>2]|0;
  $185 = ((($184)) + 36|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = Math_imul($183, $186)|0;
  _mal_pcm_convert($174,$177,$179,$182,$187);
  $188 = HEAP32[$7>>2]|0;
  $189 = HEAP32[$14>>2]|0;
  $190 = HEAP32[$5>>2]|0;
  $191 = ((($190)) + 36|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = Math_imul($189, $192)|0;
  $194 = HEAP32[$5>>2]|0;
  $195 = ((($194)) + 32|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = (_mal_get_sample_size_in_bytes($196)|0);
  $198 = Math_imul($193, $197)|0;
  $199 = (($188) + ($198)|0);
  HEAP32[$7>>2] = $199;
  $200 = HEAP32[$14>>2]|0;
  $201 = HEAP32[$6>>2]|0;
  $202 = (($201) - ($200))|0;
  HEAP32[$6>>2] = $202;
  $203 = HEAP32[$14>>2]|0;
  $204 = HEAP32[$12>>2]|0;
  $205 = (($204) + ($203))|0;
  HEAP32[$12>>2] = $205;
 }
 $206 = HEAP32[$12>>2]|0;
 HEAP32[$4>>2] = $206;
 $207 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($207|0);
}
function _mal_src_read_frames_ex($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $10 = HEAP32[$5>>2]|0;
 $11 = ($10|0)==(0|0);
 $12 = HEAP32[$6>>2]|0;
 $13 = ($12|0)==(0);
 $or$cond = $11 | $13;
 $14 = HEAP32[$7>>2]|0;
 $15 = ($14|0)==(0|0);
 $or$cond3 = $or$cond | $15;
 if ($or$cond3) {
  HEAP32[$4>>2] = 0;
  $36 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $16 = HEAP32[$5>>2]|0;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$9>>2] = $18;
 $19 = HEAP32[$5>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$5>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)==($23|0);
 if ($24) {
  HEAP32[$9>>2] = 0;
 }
 $25 = HEAP32[$9>>2]|0;
 switch ($25|0) {
 case 0:  {
  $26 = HEAP32[$5>>2]|0;
  $27 = HEAP32[$6>>2]|0;
  $28 = HEAP32[$7>>2]|0;
  $29 = HEAP32[$8>>2]|0;
  $30 = (_mal_src_read_frames_passthrough($26,$27,$28,$29)|0);
  HEAP32[$4>>2] = $30;
  $36 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($36|0);
  break;
 }
 case 1:  {
  $31 = HEAP32[$5>>2]|0;
  $32 = HEAP32[$6>>2]|0;
  $33 = HEAP32[$7>>2]|0;
  $34 = HEAP32[$8>>2]|0;
  $35 = (_mal_src_read_frames_linear($31,$32,$33,$34)|0);
  HEAP32[$4>>2] = $35;
  $36 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($36|0);
  break;
 }
 default: {
  HEAP32[$4>>2] = 0;
  $36 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 }
 return (0)|0;
}
function _mal_pcm_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $10 = HEAP32[$6>>2]|0;
 $11 = HEAP32[$8>>2]|0;
 $12 = ($10|0)==($11|0);
 L1: do {
  if ($12) {
   $13 = HEAP32[$5>>2]|0;
   $14 = HEAP32[$7>>2]|0;
   $15 = HEAP32[$9>>2]|0;
   $16 = HEAP32[$6>>2]|0;
   $17 = (_mal_get_sample_size_in_bytes($16)|0);
   $18 = Math_imul($15, $17)|0;
   _memcpy(($13|0),($14|0),($18|0))|0;
  } else {
   $19 = HEAP32[$8>>2]|0;
   switch ($19|0) {
   case 1:  {
    $20 = HEAP32[$6>>2]|0;
    switch ($20|0) {
    case 2:  {
     $21 = HEAP32[$5>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = HEAP32[$9>>2]|0;
     _mal_pcm_u8_to_s16($21,$22,$23);
     break L1;
     break;
    }
    case 3:  {
     $24 = HEAP32[$5>>2]|0;
     $25 = HEAP32[$7>>2]|0;
     $26 = HEAP32[$9>>2]|0;
     _mal_pcm_u8_to_s24($24,$25,$26);
     break L1;
     break;
    }
    case 4:  {
     $27 = HEAP32[$5>>2]|0;
     $28 = HEAP32[$7>>2]|0;
     $29 = HEAP32[$9>>2]|0;
     _mal_pcm_u8_to_s32($27,$28,$29);
     break L1;
     break;
    }
    case 5:  {
     $30 = HEAP32[$5>>2]|0;
     $31 = HEAP32[$7>>2]|0;
     $32 = HEAP32[$9>>2]|0;
     _mal_pcm_u8_to_f32($30,$31,$32);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
    break;
   }
   case 2:  {
    $33 = HEAP32[$6>>2]|0;
    switch ($33|0) {
    case 1:  {
     $34 = HEAP32[$5>>2]|0;
     $35 = HEAP32[$7>>2]|0;
     $36 = HEAP32[$9>>2]|0;
     _mal_pcm_s16_to_u8($34,$35,$36);
     break L1;
     break;
    }
    case 3:  {
     $37 = HEAP32[$5>>2]|0;
     $38 = HEAP32[$7>>2]|0;
     $39 = HEAP32[$9>>2]|0;
     _mal_pcm_s16_to_s24($37,$38,$39);
     break L1;
     break;
    }
    case 4:  {
     $40 = HEAP32[$5>>2]|0;
     $41 = HEAP32[$7>>2]|0;
     $42 = HEAP32[$9>>2]|0;
     _mal_pcm_s16_to_s32($40,$41,$42);
     break L1;
     break;
    }
    case 5:  {
     $43 = HEAP32[$5>>2]|0;
     $44 = HEAP32[$7>>2]|0;
     $45 = HEAP32[$9>>2]|0;
     _mal_pcm_s16_to_f32($43,$44,$45);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
    break;
   }
   case 3:  {
    $46 = HEAP32[$6>>2]|0;
    switch ($46|0) {
    case 1:  {
     $47 = HEAP32[$5>>2]|0;
     $48 = HEAP32[$7>>2]|0;
     $49 = HEAP32[$9>>2]|0;
     _mal_pcm_s24_to_u8($47,$48,$49);
     break L1;
     break;
    }
    case 2:  {
     $50 = HEAP32[$5>>2]|0;
     $51 = HEAP32[$7>>2]|0;
     $52 = HEAP32[$9>>2]|0;
     _mal_pcm_s24_to_s16($50,$51,$52);
     break L1;
     break;
    }
    case 4:  {
     $53 = HEAP32[$5>>2]|0;
     $54 = HEAP32[$7>>2]|0;
     $55 = HEAP32[$9>>2]|0;
     _mal_pcm_s24_to_s32($53,$54,$55);
     break L1;
     break;
    }
    case 5:  {
     $56 = HEAP32[$5>>2]|0;
     $57 = HEAP32[$7>>2]|0;
     $58 = HEAP32[$9>>2]|0;
     _mal_pcm_s24_to_f32($56,$57,$58);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
    break;
   }
   case 4:  {
    $59 = HEAP32[$6>>2]|0;
    switch ($59|0) {
    case 1:  {
     $60 = HEAP32[$5>>2]|0;
     $61 = HEAP32[$7>>2]|0;
     $62 = HEAP32[$9>>2]|0;
     _mal_pcm_s32_to_u8($60,$61,$62);
     break L1;
     break;
    }
    case 2:  {
     $63 = HEAP32[$5>>2]|0;
     $64 = HEAP32[$7>>2]|0;
     $65 = HEAP32[$9>>2]|0;
     _mal_pcm_s32_to_s16($63,$64,$65);
     break L1;
     break;
    }
    case 3:  {
     $66 = HEAP32[$5>>2]|0;
     $67 = HEAP32[$7>>2]|0;
     $68 = HEAP32[$9>>2]|0;
     _mal_pcm_s32_to_s24($66,$67,$68);
     break L1;
     break;
    }
    case 5:  {
     $69 = HEAP32[$5>>2]|0;
     $70 = HEAP32[$7>>2]|0;
     $71 = HEAP32[$9>>2]|0;
     _mal_pcm_s32_to_f32($69,$70,$71);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
    break;
   }
   case 5:  {
    $72 = HEAP32[$6>>2]|0;
    switch ($72|0) {
    case 1:  {
     $73 = HEAP32[$5>>2]|0;
     $74 = HEAP32[$7>>2]|0;
     $75 = HEAP32[$9>>2]|0;
     _mal_pcm_f32_to_u8($73,$74,$75);
     break L1;
     break;
    }
    case 2:  {
     $76 = HEAP32[$5>>2]|0;
     $77 = HEAP32[$7>>2]|0;
     $78 = HEAP32[$9>>2]|0;
     _mal_pcm_f32_to_s16($76,$77,$78);
     break L1;
     break;
    }
    case 3:  {
     $79 = HEAP32[$5>>2]|0;
     $80 = HEAP32[$7>>2]|0;
     $81 = HEAP32[$9>>2]|0;
     _mal_pcm_f32_to_s24($79,$80,$81);
     break L1;
     break;
    }
    case 4:  {
     $82 = HEAP32[$5>>2]|0;
     $83 = HEAP32[$7>>2]|0;
     $84 = HEAP32[$9>>2]|0;
     _mal_pcm_f32_to_s32($82,$83,$84);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _mal_dsp_mix_channels($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 20|0;
 $11 = sp + 16|0;
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $15 = sp;
 HEAP32[$8>>2] = $0;
 HEAP32[$9>>2] = $1;
 HEAP32[$10>>2] = $2;
 HEAP32[$11>>2] = $3;
 HEAP32[$12>>2] = $4;
 HEAP32[$13>>2] = $5;
 HEAP32[$14>>2] = $6;
 HEAP32[$15>>2] = $7;
 $16 = HEAP32[$12>>2]|0;
 $17 = HEAP32[$9>>2]|0;
 $18 = ($16>>>0)<($17>>>0);
 $19 = HEAP32[$8>>2]|0;
 $20 = HEAP32[$9>>2]|0;
 $21 = HEAP32[$10>>2]|0;
 $22 = HEAP32[$11>>2]|0;
 $23 = HEAP32[$12>>2]|0;
 $24 = HEAP32[$13>>2]|0;
 $25 = HEAP32[$14>>2]|0;
 $26 = HEAP32[$15>>2]|0;
 if ($18) {
  _mal_dsp_mix_channels__inc($19,$20,$21,$22,$23,$24,$25,$26);
  STACKTOP = sp;return;
 } else {
  _mal_dsp_mix_channels__dec($19,$20,$21,$22,$23,$24,$25,$26);
  STACKTOP = sp;return;
 }
}
function _mal_rearrange_channels($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $8 = HEAP32[$7>>2]|0;
 switch ($8|0) {
 case 1:  {
  $9 = HEAP32[$4>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = HEAP32[$6>>2]|0;
  _mal_rearrange_channels_u8($9,$10,$11);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$5>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  _mal_rearrange_channels_s16($12,$13,$14);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $15 = HEAP32[$4>>2]|0;
  $16 = HEAP32[$5>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  _mal_rearrange_channels_s32($15,$16,$17);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $18 = HEAP32[$4>>2]|0;
  $19 = HEAP32[$5>>2]|0;
  $20 = HEAP32[$6>>2]|0;
  _mal_rearrange_channels_f32($18,$19,$20);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $21 = HEAP32[$4>>2]|0;
  $22 = HEAP32[$5>>2]|0;
  $23 = HEAP32[$6>>2]|0;
  $24 = HEAP32[$7>>2]|0;
  _mal_rearrange_channels_generic($21,$22,$23,$24);
  STACKTOP = sp;return;
 }
 }
}
function _mal_rearrange_channels_u8($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = sp + 12|0;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[$4>>2]|0;
 $9 = $8;
 _memcpy(($6|0),($7|0),($9|0))|0;
 $10 = HEAP32[$4>>2]|0;
 switch ($10|0) {
 case 18:  {
  $11 = HEAP32[$5>>2]|0;
  $12 = ((($11)) + 17|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = (($6) + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = HEAP32[$3>>2]|0;
  $18 = ((($17)) + 17|0);
  HEAP8[$18>>0] = $16;
  label = 3;
  break;
 }
 case 17:  {
  label = 3;
  break;
 }
 case 16:  {
  label = 4;
  break;
 }
 case 15:  {
  label = 5;
  break;
 }
 case 14:  {
  label = 6;
  break;
 }
 case 13:  {
  label = 7;
  break;
 }
 case 12:  {
  label = 8;
  break;
 }
 case 11:  {
  label = 9;
  break;
 }
 case 10:  {
  label = 10;
  break;
 }
 case 9:  {
  label = 11;
  break;
 }
 case 8:  {
  label = 12;
  break;
 }
 case 7:  {
  label = 13;
  break;
 }
 case 6:  {
  label = 14;
  break;
 }
 case 5:  {
  label = 15;
  break;
 }
 case 4:  {
  label = 16;
  break;
 }
 case 3:  {
  label = 17;
  break;
 }
 case 2:  {
  label = 18;
  break;
 }
 case 1:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 if ((label|0) == 3) {
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($19)) + 16|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = (($6) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = HEAP32[$3>>2]|0;
  $26 = ((($25)) + 16|0);
  HEAP8[$26>>0] = $24;
  label = 4;
 }
 if ((label|0) == 4) {
  $27 = HEAP32[$5>>2]|0;
  $28 = ((($27)) + 15|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = (($6) + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = HEAP32[$3>>2]|0;
  $34 = ((($33)) + 15|0);
  HEAP8[$34>>0] = $32;
  label = 5;
 }
 if ((label|0) == 5) {
  $35 = HEAP32[$5>>2]|0;
  $36 = ((($35)) + 14|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($6) + ($38)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = HEAP32[$3>>2]|0;
  $42 = ((($41)) + 14|0);
  HEAP8[$42>>0] = $40;
  label = 6;
 }
 if ((label|0) == 6) {
  $43 = HEAP32[$5>>2]|0;
  $44 = ((($43)) + 13|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = (($6) + ($46)|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = HEAP32[$3>>2]|0;
  $50 = ((($49)) + 13|0);
  HEAP8[$50>>0] = $48;
  label = 7;
 }
 if ((label|0) == 7) {
  $51 = HEAP32[$5>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (($6) + ($54)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = HEAP32[$3>>2]|0;
  $58 = ((($57)) + 12|0);
  HEAP8[$58>>0] = $56;
  label = 8;
 }
 if ((label|0) == 8) {
  $59 = HEAP32[$5>>2]|0;
  $60 = ((($59)) + 11|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = (($6) + ($62)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = HEAP32[$3>>2]|0;
  $66 = ((($65)) + 11|0);
  HEAP8[$66>>0] = $64;
  label = 9;
 }
 if ((label|0) == 9) {
  $67 = HEAP32[$5>>2]|0;
  $68 = ((($67)) + 10|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = (($6) + ($70)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = HEAP32[$3>>2]|0;
  $74 = ((($73)) + 10|0);
  HEAP8[$74>>0] = $72;
  label = 10;
 }
 if ((label|0) == 10) {
  $75 = HEAP32[$5>>2]|0;
  $76 = ((($75)) + 9|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = (($6) + ($78)|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = HEAP32[$3>>2]|0;
  $82 = ((($81)) + 9|0);
  HEAP8[$82>>0] = $80;
  label = 11;
 }
 if ((label|0) == 11) {
  $83 = HEAP32[$5>>2]|0;
  $84 = ((($83)) + 8|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = (($6) + ($86)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = HEAP32[$3>>2]|0;
  $90 = ((($89)) + 8|0);
  HEAP8[$90>>0] = $88;
  label = 12;
 }
 if ((label|0) == 12) {
  $91 = HEAP32[$5>>2]|0;
  $92 = ((($91)) + 7|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = (($6) + ($94)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = HEAP32[$3>>2]|0;
  $98 = ((($97)) + 7|0);
  HEAP8[$98>>0] = $96;
  label = 13;
 }
 if ((label|0) == 13) {
  $99 = HEAP32[$5>>2]|0;
  $100 = ((($99)) + 6|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = (($6) + ($102)|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = HEAP32[$3>>2]|0;
  $106 = ((($105)) + 6|0);
  HEAP8[$106>>0] = $104;
  label = 14;
 }
 if ((label|0) == 14) {
  $107 = HEAP32[$5>>2]|0;
  $108 = ((($107)) + 5|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = (($6) + ($110)|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = HEAP32[$3>>2]|0;
  $114 = ((($113)) + 5|0);
  HEAP8[$114>>0] = $112;
  label = 15;
 }
 if ((label|0) == 15) {
  $115 = HEAP32[$5>>2]|0;
  $116 = ((($115)) + 4|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = (($6) + ($118)|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = HEAP32[$3>>2]|0;
  $122 = ((($121)) + 4|0);
  HEAP8[$122>>0] = $120;
  label = 16;
 }
 if ((label|0) == 16) {
  $123 = HEAP32[$5>>2]|0;
  $124 = ((($123)) + 3|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125&255;
  $127 = (($6) + ($126)|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = HEAP32[$3>>2]|0;
  $130 = ((($129)) + 3|0);
  HEAP8[$130>>0] = $128;
  label = 17;
 }
 if ((label|0) == 17) {
  $131 = HEAP32[$5>>2]|0;
  $132 = ((($131)) + 2|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $135 = (($6) + ($134)|0);
  $136 = HEAP8[$135>>0]|0;
  $137 = HEAP32[$3>>2]|0;
  $138 = ((($137)) + 2|0);
  HEAP8[$138>>0] = $136;
  label = 18;
 }
 if ((label|0) == 18) {
  $139 = HEAP32[$5>>2]|0;
  $140 = ((($139)) + 1|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&255;
  $143 = (($6) + ($142)|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = HEAP32[$3>>2]|0;
  $146 = ((($145)) + 1|0);
  HEAP8[$146>>0] = $144;
 }
 $147 = HEAP32[$5>>2]|0;
 $148 = HEAP8[$147>>0]|0;
 $149 = $148&255;
 $150 = (($6) + ($149)|0);
 $151 = HEAP8[$150>>0]|0;
 $152 = HEAP32[$3>>2]|0;
 HEAP8[$152>>0] = $151;
 STACKTOP = sp;return;
}
function _mal_rearrange_channels_s16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = sp + 12|0;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[$4>>2]|0;
 $9 = $8<<1;
 _memcpy(($6|0),($7|0),($9|0))|0;
 $10 = HEAP32[$4>>2]|0;
 switch ($10|0) {
 case 18:  {
  $11 = HEAP32[$5>>2]|0;
  $12 = ((($11)) + 17|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = (($6) + ($14<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = HEAP32[$3>>2]|0;
  $18 = ((($17)) + 34|0);
  HEAP16[$18>>1] = $16;
  label = 3;
  break;
 }
 case 17:  {
  label = 3;
  break;
 }
 case 16:  {
  label = 4;
  break;
 }
 case 15:  {
  label = 5;
  break;
 }
 case 14:  {
  label = 6;
  break;
 }
 case 13:  {
  label = 7;
  break;
 }
 case 12:  {
  label = 8;
  break;
 }
 case 11:  {
  label = 9;
  break;
 }
 case 10:  {
  label = 10;
  break;
 }
 case 9:  {
  label = 11;
  break;
 }
 case 8:  {
  label = 12;
  break;
 }
 case 7:  {
  label = 13;
  break;
 }
 case 6:  {
  label = 14;
  break;
 }
 case 5:  {
  label = 15;
  break;
 }
 case 4:  {
  label = 16;
  break;
 }
 case 3:  {
  label = 17;
  break;
 }
 case 2:  {
  label = 18;
  break;
 }
 case 1:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 if ((label|0) == 3) {
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($19)) + 16|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = (($6) + ($22<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = HEAP32[$3>>2]|0;
  $26 = ((($25)) + 32|0);
  HEAP16[$26>>1] = $24;
  label = 4;
 }
 if ((label|0) == 4) {
  $27 = HEAP32[$5>>2]|0;
  $28 = ((($27)) + 15|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = (($6) + ($30<<1)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = HEAP32[$3>>2]|0;
  $34 = ((($33)) + 30|0);
  HEAP16[$34>>1] = $32;
  label = 5;
 }
 if ((label|0) == 5) {
  $35 = HEAP32[$5>>2]|0;
  $36 = ((($35)) + 14|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($6) + ($38<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = HEAP32[$3>>2]|0;
  $42 = ((($41)) + 28|0);
  HEAP16[$42>>1] = $40;
  label = 6;
 }
 if ((label|0) == 6) {
  $43 = HEAP32[$5>>2]|0;
  $44 = ((($43)) + 13|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = (($6) + ($46<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = HEAP32[$3>>2]|0;
  $50 = ((($49)) + 26|0);
  HEAP16[$50>>1] = $48;
  label = 7;
 }
 if ((label|0) == 7) {
  $51 = HEAP32[$5>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (($6) + ($54<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = HEAP32[$3>>2]|0;
  $58 = ((($57)) + 24|0);
  HEAP16[$58>>1] = $56;
  label = 8;
 }
 if ((label|0) == 8) {
  $59 = HEAP32[$5>>2]|0;
  $60 = ((($59)) + 11|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = (($6) + ($62<<1)|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = HEAP32[$3>>2]|0;
  $66 = ((($65)) + 22|0);
  HEAP16[$66>>1] = $64;
  label = 9;
 }
 if ((label|0) == 9) {
  $67 = HEAP32[$5>>2]|0;
  $68 = ((($67)) + 10|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = (($6) + ($70<<1)|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = HEAP32[$3>>2]|0;
  $74 = ((($73)) + 20|0);
  HEAP16[$74>>1] = $72;
  label = 10;
 }
 if ((label|0) == 10) {
  $75 = HEAP32[$5>>2]|0;
  $76 = ((($75)) + 9|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = (($6) + ($78<<1)|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = HEAP32[$3>>2]|0;
  $82 = ((($81)) + 18|0);
  HEAP16[$82>>1] = $80;
  label = 11;
 }
 if ((label|0) == 11) {
  $83 = HEAP32[$5>>2]|0;
  $84 = ((($83)) + 8|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = (($6) + ($86<<1)|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = HEAP32[$3>>2]|0;
  $90 = ((($89)) + 16|0);
  HEAP16[$90>>1] = $88;
  label = 12;
 }
 if ((label|0) == 12) {
  $91 = HEAP32[$5>>2]|0;
  $92 = ((($91)) + 7|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = (($6) + ($94<<1)|0);
  $96 = HEAP16[$95>>1]|0;
  $97 = HEAP32[$3>>2]|0;
  $98 = ((($97)) + 14|0);
  HEAP16[$98>>1] = $96;
  label = 13;
 }
 if ((label|0) == 13) {
  $99 = HEAP32[$5>>2]|0;
  $100 = ((($99)) + 6|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = (($6) + ($102<<1)|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = HEAP32[$3>>2]|0;
  $106 = ((($105)) + 12|0);
  HEAP16[$106>>1] = $104;
  label = 14;
 }
 if ((label|0) == 14) {
  $107 = HEAP32[$5>>2]|0;
  $108 = ((($107)) + 5|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = (($6) + ($110<<1)|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = HEAP32[$3>>2]|0;
  $114 = ((($113)) + 10|0);
  HEAP16[$114>>1] = $112;
  label = 15;
 }
 if ((label|0) == 15) {
  $115 = HEAP32[$5>>2]|0;
  $116 = ((($115)) + 4|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = (($6) + ($118<<1)|0);
  $120 = HEAP16[$119>>1]|0;
  $121 = HEAP32[$3>>2]|0;
  $122 = ((($121)) + 8|0);
  HEAP16[$122>>1] = $120;
  label = 16;
 }
 if ((label|0) == 16) {
  $123 = HEAP32[$5>>2]|0;
  $124 = ((($123)) + 3|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125&255;
  $127 = (($6) + ($126<<1)|0);
  $128 = HEAP16[$127>>1]|0;
  $129 = HEAP32[$3>>2]|0;
  $130 = ((($129)) + 6|0);
  HEAP16[$130>>1] = $128;
  label = 17;
 }
 if ((label|0) == 17) {
  $131 = HEAP32[$5>>2]|0;
  $132 = ((($131)) + 2|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $135 = (($6) + ($134<<1)|0);
  $136 = HEAP16[$135>>1]|0;
  $137 = HEAP32[$3>>2]|0;
  $138 = ((($137)) + 4|0);
  HEAP16[$138>>1] = $136;
  label = 18;
 }
 if ((label|0) == 18) {
  $139 = HEAP32[$5>>2]|0;
  $140 = ((($139)) + 1|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&255;
  $143 = (($6) + ($142<<1)|0);
  $144 = HEAP16[$143>>1]|0;
  $145 = HEAP32[$3>>2]|0;
  $146 = ((($145)) + 2|0);
  HEAP16[$146>>1] = $144;
 }
 $147 = HEAP32[$5>>2]|0;
 $148 = HEAP8[$147>>0]|0;
 $149 = $148&255;
 $150 = (($6) + ($149<<1)|0);
 $151 = HEAP16[$150>>1]|0;
 $152 = HEAP32[$3>>2]|0;
 HEAP16[$152>>1] = $151;
 STACKTOP = sp;return;
}
function _mal_rearrange_channels_s32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp + 80|0;
 $4 = sp + 76|0;
 $5 = sp + 72|0;
 $6 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[$4>>2]|0;
 $9 = $8<<2;
 _memcpy(($6|0),($7|0),($9|0))|0;
 $10 = HEAP32[$4>>2]|0;
 switch ($10|0) {
 case 18:  {
  $11 = HEAP32[$5>>2]|0;
  $12 = ((($11)) + 17|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = (($6) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$3>>2]|0;
  $18 = ((($17)) + 68|0);
  HEAP32[$18>>2] = $16;
  label = 3;
  break;
 }
 case 17:  {
  label = 3;
  break;
 }
 case 16:  {
  label = 4;
  break;
 }
 case 15:  {
  label = 5;
  break;
 }
 case 14:  {
  label = 6;
  break;
 }
 case 13:  {
  label = 7;
  break;
 }
 case 12:  {
  label = 8;
  break;
 }
 case 11:  {
  label = 9;
  break;
 }
 case 10:  {
  label = 10;
  break;
 }
 case 9:  {
  label = 11;
  break;
 }
 case 8:  {
  label = 12;
  break;
 }
 case 7:  {
  label = 13;
  break;
 }
 case 6:  {
  label = 14;
  break;
 }
 case 5:  {
  label = 15;
  break;
 }
 case 4:  {
  label = 16;
  break;
 }
 case 3:  {
  label = 17;
  break;
 }
 case 2:  {
  label = 18;
  break;
 }
 case 1:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 if ((label|0) == 3) {
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($19)) + 16|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = (($6) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$3>>2]|0;
  $26 = ((($25)) + 64|0);
  HEAP32[$26>>2] = $24;
  label = 4;
 }
 if ((label|0) == 4) {
  $27 = HEAP32[$5>>2]|0;
  $28 = ((($27)) + 15|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = (($6) + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$3>>2]|0;
  $34 = ((($33)) + 60|0);
  HEAP32[$34>>2] = $32;
  label = 5;
 }
 if ((label|0) == 5) {
  $35 = HEAP32[$5>>2]|0;
  $36 = ((($35)) + 14|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($6) + ($38<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[$3>>2]|0;
  $42 = ((($41)) + 56|0);
  HEAP32[$42>>2] = $40;
  label = 6;
 }
 if ((label|0) == 6) {
  $43 = HEAP32[$5>>2]|0;
  $44 = ((($43)) + 13|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = (($6) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$3>>2]|0;
  $50 = ((($49)) + 52|0);
  HEAP32[$50>>2] = $48;
  label = 7;
 }
 if ((label|0) == 7) {
  $51 = HEAP32[$5>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (($6) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = HEAP32[$3>>2]|0;
  $58 = ((($57)) + 48|0);
  HEAP32[$58>>2] = $56;
  label = 8;
 }
 if ((label|0) == 8) {
  $59 = HEAP32[$5>>2]|0;
  $60 = ((($59)) + 11|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = (($6) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = HEAP32[$3>>2]|0;
  $66 = ((($65)) + 44|0);
  HEAP32[$66>>2] = $64;
  label = 9;
 }
 if ((label|0) == 9) {
  $67 = HEAP32[$5>>2]|0;
  $68 = ((($67)) + 10|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = (($6) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = HEAP32[$3>>2]|0;
  $74 = ((($73)) + 40|0);
  HEAP32[$74>>2] = $72;
  label = 10;
 }
 if ((label|0) == 10) {
  $75 = HEAP32[$5>>2]|0;
  $76 = ((($75)) + 9|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = (($6) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = HEAP32[$3>>2]|0;
  $82 = ((($81)) + 36|0);
  HEAP32[$82>>2] = $80;
  label = 11;
 }
 if ((label|0) == 11) {
  $83 = HEAP32[$5>>2]|0;
  $84 = ((($83)) + 8|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = (($6) + ($86<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = HEAP32[$3>>2]|0;
  $90 = ((($89)) + 32|0);
  HEAP32[$90>>2] = $88;
  label = 12;
 }
 if ((label|0) == 12) {
  $91 = HEAP32[$5>>2]|0;
  $92 = ((($91)) + 7|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = (($6) + ($94<<2)|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = HEAP32[$3>>2]|0;
  $98 = ((($97)) + 28|0);
  HEAP32[$98>>2] = $96;
  label = 13;
 }
 if ((label|0) == 13) {
  $99 = HEAP32[$5>>2]|0;
  $100 = ((($99)) + 6|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = (($6) + ($102<<2)|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = HEAP32[$3>>2]|0;
  $106 = ((($105)) + 24|0);
  HEAP32[$106>>2] = $104;
  label = 14;
 }
 if ((label|0) == 14) {
  $107 = HEAP32[$5>>2]|0;
  $108 = ((($107)) + 5|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = (($6) + ($110<<2)|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = HEAP32[$3>>2]|0;
  $114 = ((($113)) + 20|0);
  HEAP32[$114>>2] = $112;
  label = 15;
 }
 if ((label|0) == 15) {
  $115 = HEAP32[$5>>2]|0;
  $116 = ((($115)) + 4|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = (($6) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = HEAP32[$3>>2]|0;
  $122 = ((($121)) + 16|0);
  HEAP32[$122>>2] = $120;
  label = 16;
 }
 if ((label|0) == 16) {
  $123 = HEAP32[$5>>2]|0;
  $124 = ((($123)) + 3|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125&255;
  $127 = (($6) + ($126<<2)|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = HEAP32[$3>>2]|0;
  $130 = ((($129)) + 12|0);
  HEAP32[$130>>2] = $128;
  label = 17;
 }
 if ((label|0) == 17) {
  $131 = HEAP32[$5>>2]|0;
  $132 = ((($131)) + 2|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $135 = (($6) + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = HEAP32[$3>>2]|0;
  $138 = ((($137)) + 8|0);
  HEAP32[$138>>2] = $136;
  label = 18;
 }
 if ((label|0) == 18) {
  $139 = HEAP32[$5>>2]|0;
  $140 = ((($139)) + 1|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&255;
  $143 = (($6) + ($142<<2)|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = HEAP32[$3>>2]|0;
  $146 = ((($145)) + 4|0);
  HEAP32[$146>>2] = $144;
 }
 $147 = HEAP32[$5>>2]|0;
 $148 = HEAP8[$147>>0]|0;
 $149 = $148&255;
 $150 = (($6) + ($149<<2)|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = HEAP32[$3>>2]|0;
 HEAP32[$152>>2] = $151;
 STACKTOP = sp;return;
}
function _mal_rearrange_channels_f32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $16 = 0.0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp + 80|0;
 $4 = sp + 76|0;
 $5 = sp + 72|0;
 $6 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[$4>>2]|0;
 $9 = $8<<2;
 _memcpy(($6|0),($7|0),($9|0))|0;
 $10 = HEAP32[$4>>2]|0;
 switch ($10|0) {
 case 18:  {
  $11 = HEAP32[$5>>2]|0;
  $12 = ((($11)) + 17|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = (($6) + ($14<<2)|0);
  $16 = +HEAPF32[$15>>2];
  $17 = HEAP32[$3>>2]|0;
  $18 = ((($17)) + 68|0);
  HEAPF32[$18>>2] = $16;
  label = 3;
  break;
 }
 case 17:  {
  label = 3;
  break;
 }
 case 16:  {
  label = 4;
  break;
 }
 case 15:  {
  label = 5;
  break;
 }
 case 14:  {
  label = 6;
  break;
 }
 case 13:  {
  label = 7;
  break;
 }
 case 12:  {
  label = 8;
  break;
 }
 case 11:  {
  label = 9;
  break;
 }
 case 10:  {
  label = 10;
  break;
 }
 case 9:  {
  label = 11;
  break;
 }
 case 8:  {
  label = 12;
  break;
 }
 case 7:  {
  label = 13;
  break;
 }
 case 6:  {
  label = 14;
  break;
 }
 case 5:  {
  label = 15;
  break;
 }
 case 4:  {
  label = 16;
  break;
 }
 case 3:  {
  label = 17;
  break;
 }
 case 2:  {
  label = 18;
  break;
 }
 case 1:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 if ((label|0) == 3) {
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($19)) + 16|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = (($6) + ($22<<2)|0);
  $24 = +HEAPF32[$23>>2];
  $25 = HEAP32[$3>>2]|0;
  $26 = ((($25)) + 64|0);
  HEAPF32[$26>>2] = $24;
  label = 4;
 }
 if ((label|0) == 4) {
  $27 = HEAP32[$5>>2]|0;
  $28 = ((($27)) + 15|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = (($6) + ($30<<2)|0);
  $32 = +HEAPF32[$31>>2];
  $33 = HEAP32[$3>>2]|0;
  $34 = ((($33)) + 60|0);
  HEAPF32[$34>>2] = $32;
  label = 5;
 }
 if ((label|0) == 5) {
  $35 = HEAP32[$5>>2]|0;
  $36 = ((($35)) + 14|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($6) + ($38<<2)|0);
  $40 = +HEAPF32[$39>>2];
  $41 = HEAP32[$3>>2]|0;
  $42 = ((($41)) + 56|0);
  HEAPF32[$42>>2] = $40;
  label = 6;
 }
 if ((label|0) == 6) {
  $43 = HEAP32[$5>>2]|0;
  $44 = ((($43)) + 13|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = (($6) + ($46<<2)|0);
  $48 = +HEAPF32[$47>>2];
  $49 = HEAP32[$3>>2]|0;
  $50 = ((($49)) + 52|0);
  HEAPF32[$50>>2] = $48;
  label = 7;
 }
 if ((label|0) == 7) {
  $51 = HEAP32[$5>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (($6) + ($54<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $57 = HEAP32[$3>>2]|0;
  $58 = ((($57)) + 48|0);
  HEAPF32[$58>>2] = $56;
  label = 8;
 }
 if ((label|0) == 8) {
  $59 = HEAP32[$5>>2]|0;
  $60 = ((($59)) + 11|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = (($6) + ($62<<2)|0);
  $64 = +HEAPF32[$63>>2];
  $65 = HEAP32[$3>>2]|0;
  $66 = ((($65)) + 44|0);
  HEAPF32[$66>>2] = $64;
  label = 9;
 }
 if ((label|0) == 9) {
  $67 = HEAP32[$5>>2]|0;
  $68 = ((($67)) + 10|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = (($6) + ($70<<2)|0);
  $72 = +HEAPF32[$71>>2];
  $73 = HEAP32[$3>>2]|0;
  $74 = ((($73)) + 40|0);
  HEAPF32[$74>>2] = $72;
  label = 10;
 }
 if ((label|0) == 10) {
  $75 = HEAP32[$5>>2]|0;
  $76 = ((($75)) + 9|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = (($6) + ($78<<2)|0);
  $80 = +HEAPF32[$79>>2];
  $81 = HEAP32[$3>>2]|0;
  $82 = ((($81)) + 36|0);
  HEAPF32[$82>>2] = $80;
  label = 11;
 }
 if ((label|0) == 11) {
  $83 = HEAP32[$5>>2]|0;
  $84 = ((($83)) + 8|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = (($6) + ($86<<2)|0);
  $88 = +HEAPF32[$87>>2];
  $89 = HEAP32[$3>>2]|0;
  $90 = ((($89)) + 32|0);
  HEAPF32[$90>>2] = $88;
  label = 12;
 }
 if ((label|0) == 12) {
  $91 = HEAP32[$5>>2]|0;
  $92 = ((($91)) + 7|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = (($6) + ($94<<2)|0);
  $96 = +HEAPF32[$95>>2];
  $97 = HEAP32[$3>>2]|0;
  $98 = ((($97)) + 28|0);
  HEAPF32[$98>>2] = $96;
  label = 13;
 }
 if ((label|0) == 13) {
  $99 = HEAP32[$5>>2]|0;
  $100 = ((($99)) + 6|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = (($6) + ($102<<2)|0);
  $104 = +HEAPF32[$103>>2];
  $105 = HEAP32[$3>>2]|0;
  $106 = ((($105)) + 24|0);
  HEAPF32[$106>>2] = $104;
  label = 14;
 }
 if ((label|0) == 14) {
  $107 = HEAP32[$5>>2]|0;
  $108 = ((($107)) + 5|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = (($6) + ($110<<2)|0);
  $112 = +HEAPF32[$111>>2];
  $113 = HEAP32[$3>>2]|0;
  $114 = ((($113)) + 20|0);
  HEAPF32[$114>>2] = $112;
  label = 15;
 }
 if ((label|0) == 15) {
  $115 = HEAP32[$5>>2]|0;
  $116 = ((($115)) + 4|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = (($6) + ($118<<2)|0);
  $120 = +HEAPF32[$119>>2];
  $121 = HEAP32[$3>>2]|0;
  $122 = ((($121)) + 16|0);
  HEAPF32[$122>>2] = $120;
  label = 16;
 }
 if ((label|0) == 16) {
  $123 = HEAP32[$5>>2]|0;
  $124 = ((($123)) + 3|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125&255;
  $127 = (($6) + ($126<<2)|0);
  $128 = +HEAPF32[$127>>2];
  $129 = HEAP32[$3>>2]|0;
  $130 = ((($129)) + 12|0);
  HEAPF32[$130>>2] = $128;
  label = 17;
 }
 if ((label|0) == 17) {
  $131 = HEAP32[$5>>2]|0;
  $132 = ((($131)) + 2|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $135 = (($6) + ($134<<2)|0);
  $136 = +HEAPF32[$135>>2];
  $137 = HEAP32[$3>>2]|0;
  $138 = ((($137)) + 8|0);
  HEAPF32[$138>>2] = $136;
  label = 18;
 }
 if ((label|0) == 18) {
  $139 = HEAP32[$5>>2]|0;
  $140 = ((($139)) + 1|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&255;
  $143 = (($6) + ($142<<2)|0);
  $144 = +HEAPF32[$143>>2];
  $145 = HEAP32[$3>>2]|0;
  $146 = ((($145)) + 4|0);
  HEAPF32[$146>>2] = $144;
 }
 $147 = HEAP32[$5>>2]|0;
 $148 = HEAP8[$147>>0]|0;
 $149 = $148&255;
 $150 = (($6) + ($149<<2)|0);
 $151 = +HEAPF32[$150>>2];
 $152 = HEAP32[$3>>2]|0;
 HEAPF32[$152>>2] = $151;
 STACKTOP = sp;return;
}
function _mal_rearrange_channels_generic($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 $9 = sp + 24|0;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $10 = HEAP32[$7>>2]|0;
 $11 = (_mal_get_sample_size_in_bytes($10)|0);
 HEAP32[$8>>2] = $11;
 $12 = HEAP32[$4>>2]|0;
 $13 = HEAP32[$8>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 $15 = Math_imul($13, $14)|0;
 _memcpy(($9|0),($12|0),($15|0))|0;
 $16 = HEAP32[$5>>2]|0;
 switch ($16|0) {
 case 18:  {
  $17 = HEAP32[$4>>2]|0;
  $18 = HEAP32[$8>>2]|0;
  $19 = ($18*17)|0;
  $20 = (($17) + ($19)|0);
  $21 = HEAP32[$6>>2]|0;
  $22 = ((($21)) + 17|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = HEAP32[$8>>2]|0;
  $26 = Math_imul($24, $25)|0;
  $27 = (($9) + ($26)|0);
  $28 = HEAP32[$8>>2]|0;
  _memcpy(($20|0),($27|0),($28|0))|0;
  label = 3;
  break;
 }
 case 17:  {
  label = 3;
  break;
 }
 case 16:  {
  label = 4;
  break;
 }
 case 15:  {
  label = 5;
  break;
 }
 case 14:  {
  label = 6;
  break;
 }
 case 13:  {
  label = 7;
  break;
 }
 case 12:  {
  label = 8;
  break;
 }
 case 11:  {
  label = 9;
  break;
 }
 case 10:  {
  label = 10;
  break;
 }
 case 9:  {
  label = 11;
  break;
 }
 case 8:  {
  label = 12;
  break;
 }
 case 7:  {
  label = 13;
  break;
 }
 case 6:  {
  label = 14;
  break;
 }
 case 5:  {
  label = 15;
  break;
 }
 case 4:  {
  label = 16;
  break;
 }
 case 3:  {
  label = 17;
  break;
 }
 case 2:  {
  label = 18;
  break;
 }
 case 1:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 if ((label|0) == 3) {
  $29 = HEAP32[$4>>2]|0;
  $30 = HEAP32[$8>>2]|0;
  $31 = $30<<4;
  $32 = (($29) + ($31)|0);
  $33 = HEAP32[$6>>2]|0;
  $34 = ((($33)) + 16|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = HEAP32[$8>>2]|0;
  $38 = Math_imul($36, $37)|0;
  $39 = (($9) + ($38)|0);
  $40 = HEAP32[$8>>2]|0;
  _memcpy(($32|0),($39|0),($40|0))|0;
  label = 4;
 }
 if ((label|0) == 4) {
  $41 = HEAP32[$4>>2]|0;
  $42 = HEAP32[$8>>2]|0;
  $43 = ($42*15)|0;
  $44 = (($41) + ($43)|0);
  $45 = HEAP32[$6>>2]|0;
  $46 = ((($45)) + 15|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = HEAP32[$8>>2]|0;
  $50 = Math_imul($48, $49)|0;
  $51 = (($9) + ($50)|0);
  $52 = HEAP32[$8>>2]|0;
  _memcpy(($44|0),($51|0),($52|0))|0;
  label = 5;
 }
 if ((label|0) == 5) {
  $53 = HEAP32[$4>>2]|0;
  $54 = HEAP32[$8>>2]|0;
  $55 = ($54*14)|0;
  $56 = (($53) + ($55)|0);
  $57 = HEAP32[$6>>2]|0;
  $58 = ((($57)) + 14|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = HEAP32[$8>>2]|0;
  $62 = Math_imul($60, $61)|0;
  $63 = (($9) + ($62)|0);
  $64 = HEAP32[$8>>2]|0;
  _memcpy(($56|0),($63|0),($64|0))|0;
  label = 6;
 }
 if ((label|0) == 6) {
  $65 = HEAP32[$4>>2]|0;
  $66 = HEAP32[$8>>2]|0;
  $67 = ($66*13)|0;
  $68 = (($65) + ($67)|0);
  $69 = HEAP32[$6>>2]|0;
  $70 = ((($69)) + 13|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = HEAP32[$8>>2]|0;
  $74 = Math_imul($72, $73)|0;
  $75 = (($9) + ($74)|0);
  $76 = HEAP32[$8>>2]|0;
  _memcpy(($68|0),($75|0),($76|0))|0;
  label = 7;
 }
 if ((label|0) == 7) {
  $77 = HEAP32[$4>>2]|0;
  $78 = HEAP32[$8>>2]|0;
  $79 = ($78*12)|0;
  $80 = (($77) + ($79)|0);
  $81 = HEAP32[$6>>2]|0;
  $82 = ((($81)) + 12|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = HEAP32[$8>>2]|0;
  $86 = Math_imul($84, $85)|0;
  $87 = (($9) + ($86)|0);
  $88 = HEAP32[$8>>2]|0;
  _memcpy(($80|0),($87|0),($88|0))|0;
  label = 8;
 }
 if ((label|0) == 8) {
  $89 = HEAP32[$4>>2]|0;
  $90 = HEAP32[$8>>2]|0;
  $91 = ($90*11)|0;
  $92 = (($89) + ($91)|0);
  $93 = HEAP32[$6>>2]|0;
  $94 = ((($93)) + 11|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = HEAP32[$8>>2]|0;
  $98 = Math_imul($96, $97)|0;
  $99 = (($9) + ($98)|0);
  $100 = HEAP32[$8>>2]|0;
  _memcpy(($92|0),($99|0),($100|0))|0;
  label = 9;
 }
 if ((label|0) == 9) {
  $101 = HEAP32[$4>>2]|0;
  $102 = HEAP32[$8>>2]|0;
  $103 = ($102*10)|0;
  $104 = (($101) + ($103)|0);
  $105 = HEAP32[$6>>2]|0;
  $106 = ((($105)) + 10|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  $109 = HEAP32[$8>>2]|0;
  $110 = Math_imul($108, $109)|0;
  $111 = (($9) + ($110)|0);
  $112 = HEAP32[$8>>2]|0;
  _memcpy(($104|0),($111|0),($112|0))|0;
  label = 10;
 }
 if ((label|0) == 10) {
  $113 = HEAP32[$4>>2]|0;
  $114 = HEAP32[$8>>2]|0;
  $115 = ($114*9)|0;
  $116 = (($113) + ($115)|0);
  $117 = HEAP32[$6>>2]|0;
  $118 = ((($117)) + 9|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = HEAP32[$8>>2]|0;
  $122 = Math_imul($120, $121)|0;
  $123 = (($9) + ($122)|0);
  $124 = HEAP32[$8>>2]|0;
  _memcpy(($116|0),($123|0),($124|0))|0;
  label = 11;
 }
 if ((label|0) == 11) {
  $125 = HEAP32[$4>>2]|0;
  $126 = HEAP32[$8>>2]|0;
  $127 = $126<<3;
  $128 = (($125) + ($127)|0);
  $129 = HEAP32[$6>>2]|0;
  $130 = ((($129)) + 8|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = HEAP32[$8>>2]|0;
  $134 = Math_imul($132, $133)|0;
  $135 = (($9) + ($134)|0);
  $136 = HEAP32[$8>>2]|0;
  _memcpy(($128|0),($135|0),($136|0))|0;
  label = 12;
 }
 if ((label|0) == 12) {
  $137 = HEAP32[$4>>2]|0;
  $138 = HEAP32[$8>>2]|0;
  $139 = ($138*7)|0;
  $140 = (($137) + ($139)|0);
  $141 = HEAP32[$6>>2]|0;
  $142 = ((($141)) + 7|0);
  $143 = HEAP8[$142>>0]|0;
  $144 = $143&255;
  $145 = HEAP32[$8>>2]|0;
  $146 = Math_imul($144, $145)|0;
  $147 = (($9) + ($146)|0);
  $148 = HEAP32[$8>>2]|0;
  _memcpy(($140|0),($147|0),($148|0))|0;
  label = 13;
 }
 if ((label|0) == 13) {
  $149 = HEAP32[$4>>2]|0;
  $150 = HEAP32[$8>>2]|0;
  $151 = ($150*6)|0;
  $152 = (($149) + ($151)|0);
  $153 = HEAP32[$6>>2]|0;
  $154 = ((($153)) + 6|0);
  $155 = HEAP8[$154>>0]|0;
  $156 = $155&255;
  $157 = HEAP32[$8>>2]|0;
  $158 = Math_imul($156, $157)|0;
  $159 = (($9) + ($158)|0);
  $160 = HEAP32[$8>>2]|0;
  _memcpy(($152|0),($159|0),($160|0))|0;
  label = 14;
 }
 if ((label|0) == 14) {
  $161 = HEAP32[$4>>2]|0;
  $162 = HEAP32[$8>>2]|0;
  $163 = ($162*5)|0;
  $164 = (($161) + ($163)|0);
  $165 = HEAP32[$6>>2]|0;
  $166 = ((($165)) + 5|0);
  $167 = HEAP8[$166>>0]|0;
  $168 = $167&255;
  $169 = HEAP32[$8>>2]|0;
  $170 = Math_imul($168, $169)|0;
  $171 = (($9) + ($170)|0);
  $172 = HEAP32[$8>>2]|0;
  _memcpy(($164|0),($171|0),($172|0))|0;
  label = 15;
 }
 if ((label|0) == 15) {
  $173 = HEAP32[$4>>2]|0;
  $174 = HEAP32[$8>>2]|0;
  $175 = $174<<2;
  $176 = (($173) + ($175)|0);
  $177 = HEAP32[$6>>2]|0;
  $178 = ((($177)) + 4|0);
  $179 = HEAP8[$178>>0]|0;
  $180 = $179&255;
  $181 = HEAP32[$8>>2]|0;
  $182 = Math_imul($180, $181)|0;
  $183 = (($9) + ($182)|0);
  $184 = HEAP32[$8>>2]|0;
  _memcpy(($176|0),($183|0),($184|0))|0;
  label = 16;
 }
 if ((label|0) == 16) {
  $185 = HEAP32[$4>>2]|0;
  $186 = HEAP32[$8>>2]|0;
  $187 = ($186*3)|0;
  $188 = (($185) + ($187)|0);
  $189 = HEAP32[$6>>2]|0;
  $190 = ((($189)) + 3|0);
  $191 = HEAP8[$190>>0]|0;
  $192 = $191&255;
  $193 = HEAP32[$8>>2]|0;
  $194 = Math_imul($192, $193)|0;
  $195 = (($9) + ($194)|0);
  $196 = HEAP32[$8>>2]|0;
  _memcpy(($188|0),($195|0),($196|0))|0;
  label = 17;
 }
 if ((label|0) == 17) {
  $197 = HEAP32[$4>>2]|0;
  $198 = HEAP32[$8>>2]|0;
  $199 = $198<<1;
  $200 = (($197) + ($199)|0);
  $201 = HEAP32[$6>>2]|0;
  $202 = ((($201)) + 2|0);
  $203 = HEAP8[$202>>0]|0;
  $204 = $203&255;
  $205 = HEAP32[$8>>2]|0;
  $206 = Math_imul($204, $205)|0;
  $207 = (($9) + ($206)|0);
  $208 = HEAP32[$8>>2]|0;
  _memcpy(($200|0),($207|0),($208|0))|0;
  label = 18;
 }
 if ((label|0) == 18) {
  $209 = HEAP32[$4>>2]|0;
  $210 = HEAP32[$8>>2]|0;
  $211 = $210;
  $212 = (($209) + ($211)|0);
  $213 = HEAP32[$6>>2]|0;
  $214 = ((($213)) + 1|0);
  $215 = HEAP8[$214>>0]|0;
  $216 = $215&255;
  $217 = HEAP32[$8>>2]|0;
  $218 = Math_imul($216, $217)|0;
  $219 = (($9) + ($218)|0);
  $220 = HEAP32[$8>>2]|0;
  _memcpy(($212|0),($219|0),($220|0))|0;
 }
 $221 = HEAP32[$4>>2]|0;
 $222 = HEAP32[$8>>2]|0;
 $223 = 0;
 $224 = (($221) + ($223)|0);
 $225 = HEAP32[$6>>2]|0;
 $226 = HEAP8[$225>>0]|0;
 $227 = $226&255;
 $228 = HEAP32[$8>>2]|0;
 $229 = Math_imul($227, $228)|0;
 $230 = (($9) + ($229)|0);
 $231 = HEAP32[$8>>2]|0;
 _memcpy(($224|0),($230|0),($231|0))|0;
 STACKTOP = sp;return;
}
function _mal_dsp_mix_channels__inc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0.0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0.0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0.0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0.0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0.0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0.0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0.0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0.0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0.0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0.0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 36|0;
 $9 = sp + 32|0;
 $10 = sp + 28|0;
 $11 = sp + 24|0;
 $12 = sp + 20|0;
 $13 = sp + 16|0;
 $14 = sp + 12|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $17 = sp;
 HEAP32[$8>>2] = $0;
 HEAP32[$9>>2] = $1;
 HEAP32[$10>>2] = $2;
 HEAP32[$11>>2] = $3;
 HEAP32[$12>>2] = $4;
 HEAP32[$13>>2] = $5;
 HEAP32[$14>>2] = $6;
 HEAP32[$15>>2] = $7;
 $18 = HEAP32[$8>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((13252|0),(10766|0),10645,(13383|0));
  // unreachable;
 }
 $20 = HEAP32[$9>>2]|0;
 $21 = ($20>>>0)>(0);
 if (!($21)) {
  ___assert_fail((13303|0),(10766|0),10646,(13383|0));
  // unreachable;
 }
 $22 = HEAP32[$11>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((13319|0),(10766|0),10647,(13383|0));
  // unreachable;
 }
 $24 = HEAP32[$12>>2]|0;
 $25 = ($24>>>0)>(0);
 if (!($25)) {
  ___assert_fail((13343|0),(10766|0),10648,(13383|0));
  // unreachable;
 }
 $26 = HEAP32[$9>>2]|0;
 $27 = HEAP32[$12>>2]|0;
 $28 = ($26>>>0)>($27>>>0);
 if (!($28)) {
  ___assert_fail((13409|0),(10766|0),10649,(13383|0));
  // unreachable;
 }
 $29 = HEAP32[$15>>2]|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $363 = HEAP32[$12>>2]|0;
  $364 = ($363|0)==(1);
  if (!($364)) {
   $605 = HEAP32[$8>>2]|0;
   $606 = HEAP32[$9>>2]|0;
   $607 = HEAP32[$10>>2]|0;
   $608 = HEAP32[$11>>2]|0;
   $609 = HEAP32[$12>>2]|0;
   $610 = HEAP32[$13>>2]|0;
   $611 = HEAP32[$14>>2]|0;
   _mal_dsp_mix_channels__dec($605,$606,$607,$608,$609,$610,$611,0);
   STACKTOP = sp;return;
  }
  HEAP32[$17>>2] = 0;
  while(1) {
   $365 = HEAP32[$17>>2]|0;
   $366 = HEAP32[$14>>2]|0;
   $367 = ($365>>>0)<($366>>>0);
   if (!($367)) {
    break;
   }
   $368 = HEAP32[$9>>2]|0;
   switch ($368|0) {
   case 18:  {
    $369 = HEAP32[$11>>2]|0;
    $370 = HEAP32[$17>>2]|0;
    $371 = HEAP32[$12>>2]|0;
    $372 = Math_imul($370, $371)|0;
    $373 = (($372) + 0)|0;
    $374 = (($369) + ($373<<2)|0);
    $375 = +HEAPF32[$374>>2];
    $376 = HEAP32[$8>>2]|0;
    $377 = HEAP32[$17>>2]|0;
    $378 = HEAP32[$9>>2]|0;
    $379 = Math_imul($377, $378)|0;
    $380 = (($379) + 17)|0;
    $381 = (($376) + ($380<<2)|0);
    HEAPF32[$381>>2] = $375;
    label = 56;
    break;
   }
   case 17:  {
    label = 56;
    break;
   }
   case 16:  {
    label = 57;
    break;
   }
   case 15:  {
    label = 58;
    break;
   }
   case 14:  {
    label = 59;
    break;
   }
   case 13:  {
    label = 60;
    break;
   }
   case 12:  {
    label = 61;
    break;
   }
   case 11:  {
    label = 62;
    break;
   }
   case 10:  {
    label = 63;
    break;
   }
   case 9:  {
    label = 64;
    break;
   }
   case 8:  {
    label = 65;
    break;
   }
   case 7:  {
    label = 66;
    break;
   }
   case 6:  {
    label = 67;
    break;
   }
   case 5:  {
    label = 68;
    break;
   }
   case 4:  {
    label = 69;
    break;
   }
   case 3:  {
    label = 70;
    break;
   }
   case 2:  {
    label = 71;
    break;
   }
   case 1:  {
    label = 72;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 56) {
    label = 0;
    $382 = HEAP32[$11>>2]|0;
    $383 = HEAP32[$17>>2]|0;
    $384 = HEAP32[$12>>2]|0;
    $385 = Math_imul($383, $384)|0;
    $386 = (($385) + 0)|0;
    $387 = (($382) + ($386<<2)|0);
    $388 = +HEAPF32[$387>>2];
    $389 = HEAP32[$8>>2]|0;
    $390 = HEAP32[$17>>2]|0;
    $391 = HEAP32[$9>>2]|0;
    $392 = Math_imul($390, $391)|0;
    $393 = (($392) + 16)|0;
    $394 = (($389) + ($393<<2)|0);
    HEAPF32[$394>>2] = $388;
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $395 = HEAP32[$11>>2]|0;
    $396 = HEAP32[$17>>2]|0;
    $397 = HEAP32[$12>>2]|0;
    $398 = Math_imul($396, $397)|0;
    $399 = (($398) + 0)|0;
    $400 = (($395) + ($399<<2)|0);
    $401 = +HEAPF32[$400>>2];
    $402 = HEAP32[$8>>2]|0;
    $403 = HEAP32[$17>>2]|0;
    $404 = HEAP32[$9>>2]|0;
    $405 = Math_imul($403, $404)|0;
    $406 = (($405) + 15)|0;
    $407 = (($402) + ($406<<2)|0);
    HEAPF32[$407>>2] = $401;
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    $408 = HEAP32[$11>>2]|0;
    $409 = HEAP32[$17>>2]|0;
    $410 = HEAP32[$12>>2]|0;
    $411 = Math_imul($409, $410)|0;
    $412 = (($411) + 0)|0;
    $413 = (($408) + ($412<<2)|0);
    $414 = +HEAPF32[$413>>2];
    $415 = HEAP32[$8>>2]|0;
    $416 = HEAP32[$17>>2]|0;
    $417 = HEAP32[$9>>2]|0;
    $418 = Math_imul($416, $417)|0;
    $419 = (($418) + 14)|0;
    $420 = (($415) + ($419<<2)|0);
    HEAPF32[$420>>2] = $414;
    label = 59;
   }
   if ((label|0) == 59) {
    label = 0;
    $421 = HEAP32[$11>>2]|0;
    $422 = HEAP32[$17>>2]|0;
    $423 = HEAP32[$12>>2]|0;
    $424 = Math_imul($422, $423)|0;
    $425 = (($424) + 0)|0;
    $426 = (($421) + ($425<<2)|0);
    $427 = +HEAPF32[$426>>2];
    $428 = HEAP32[$8>>2]|0;
    $429 = HEAP32[$17>>2]|0;
    $430 = HEAP32[$9>>2]|0;
    $431 = Math_imul($429, $430)|0;
    $432 = (($431) + 13)|0;
    $433 = (($428) + ($432<<2)|0);
    HEAPF32[$433>>2] = $427;
    label = 60;
   }
   if ((label|0) == 60) {
    label = 0;
    $434 = HEAP32[$11>>2]|0;
    $435 = HEAP32[$17>>2]|0;
    $436 = HEAP32[$12>>2]|0;
    $437 = Math_imul($435, $436)|0;
    $438 = (($437) + 0)|0;
    $439 = (($434) + ($438<<2)|0);
    $440 = +HEAPF32[$439>>2];
    $441 = HEAP32[$8>>2]|0;
    $442 = HEAP32[$17>>2]|0;
    $443 = HEAP32[$9>>2]|0;
    $444 = Math_imul($442, $443)|0;
    $445 = (($444) + 12)|0;
    $446 = (($441) + ($445<<2)|0);
    HEAPF32[$446>>2] = $440;
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $447 = HEAP32[$11>>2]|0;
    $448 = HEAP32[$17>>2]|0;
    $449 = HEAP32[$12>>2]|0;
    $450 = Math_imul($448, $449)|0;
    $451 = (($450) + 0)|0;
    $452 = (($447) + ($451<<2)|0);
    $453 = +HEAPF32[$452>>2];
    $454 = HEAP32[$8>>2]|0;
    $455 = HEAP32[$17>>2]|0;
    $456 = HEAP32[$9>>2]|0;
    $457 = Math_imul($455, $456)|0;
    $458 = (($457) + 11)|0;
    $459 = (($454) + ($458<<2)|0);
    HEAPF32[$459>>2] = $453;
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $460 = HEAP32[$11>>2]|0;
    $461 = HEAP32[$17>>2]|0;
    $462 = HEAP32[$12>>2]|0;
    $463 = Math_imul($461, $462)|0;
    $464 = (($463) + 0)|0;
    $465 = (($460) + ($464<<2)|0);
    $466 = +HEAPF32[$465>>2];
    $467 = HEAP32[$8>>2]|0;
    $468 = HEAP32[$17>>2]|0;
    $469 = HEAP32[$9>>2]|0;
    $470 = Math_imul($468, $469)|0;
    $471 = (($470) + 10)|0;
    $472 = (($467) + ($471<<2)|0);
    HEAPF32[$472>>2] = $466;
    label = 63;
   }
   if ((label|0) == 63) {
    label = 0;
    $473 = HEAP32[$11>>2]|0;
    $474 = HEAP32[$17>>2]|0;
    $475 = HEAP32[$12>>2]|0;
    $476 = Math_imul($474, $475)|0;
    $477 = (($476) + 0)|0;
    $478 = (($473) + ($477<<2)|0);
    $479 = +HEAPF32[$478>>2];
    $480 = HEAP32[$8>>2]|0;
    $481 = HEAP32[$17>>2]|0;
    $482 = HEAP32[$9>>2]|0;
    $483 = Math_imul($481, $482)|0;
    $484 = (($483) + 9)|0;
    $485 = (($480) + ($484<<2)|0);
    HEAPF32[$485>>2] = $479;
    label = 64;
   }
   if ((label|0) == 64) {
    label = 0;
    $486 = HEAP32[$11>>2]|0;
    $487 = HEAP32[$17>>2]|0;
    $488 = HEAP32[$12>>2]|0;
    $489 = Math_imul($487, $488)|0;
    $490 = (($489) + 0)|0;
    $491 = (($486) + ($490<<2)|0);
    $492 = +HEAPF32[$491>>2];
    $493 = HEAP32[$8>>2]|0;
    $494 = HEAP32[$17>>2]|0;
    $495 = HEAP32[$9>>2]|0;
    $496 = Math_imul($494, $495)|0;
    $497 = (($496) + 8)|0;
    $498 = (($493) + ($497<<2)|0);
    HEAPF32[$498>>2] = $492;
    label = 65;
   }
   if ((label|0) == 65) {
    label = 0;
    $499 = HEAP32[$11>>2]|0;
    $500 = HEAP32[$17>>2]|0;
    $501 = HEAP32[$12>>2]|0;
    $502 = Math_imul($500, $501)|0;
    $503 = (($502) + 0)|0;
    $504 = (($499) + ($503<<2)|0);
    $505 = +HEAPF32[$504>>2];
    $506 = HEAP32[$8>>2]|0;
    $507 = HEAP32[$17>>2]|0;
    $508 = HEAP32[$9>>2]|0;
    $509 = Math_imul($507, $508)|0;
    $510 = (($509) + 7)|0;
    $511 = (($506) + ($510<<2)|0);
    HEAPF32[$511>>2] = $505;
    label = 66;
   }
   if ((label|0) == 66) {
    label = 0;
    $512 = HEAP32[$11>>2]|0;
    $513 = HEAP32[$17>>2]|0;
    $514 = HEAP32[$12>>2]|0;
    $515 = Math_imul($513, $514)|0;
    $516 = (($515) + 0)|0;
    $517 = (($512) + ($516<<2)|0);
    $518 = +HEAPF32[$517>>2];
    $519 = HEAP32[$8>>2]|0;
    $520 = HEAP32[$17>>2]|0;
    $521 = HEAP32[$9>>2]|0;
    $522 = Math_imul($520, $521)|0;
    $523 = (($522) + 6)|0;
    $524 = (($519) + ($523<<2)|0);
    HEAPF32[$524>>2] = $518;
    label = 67;
   }
   if ((label|0) == 67) {
    label = 0;
    $525 = HEAP32[$11>>2]|0;
    $526 = HEAP32[$17>>2]|0;
    $527 = HEAP32[$12>>2]|0;
    $528 = Math_imul($526, $527)|0;
    $529 = (($528) + 0)|0;
    $530 = (($525) + ($529<<2)|0);
    $531 = +HEAPF32[$530>>2];
    $532 = HEAP32[$8>>2]|0;
    $533 = HEAP32[$17>>2]|0;
    $534 = HEAP32[$9>>2]|0;
    $535 = Math_imul($533, $534)|0;
    $536 = (($535) + 5)|0;
    $537 = (($532) + ($536<<2)|0);
    HEAPF32[$537>>2] = $531;
    label = 68;
   }
   if ((label|0) == 68) {
    label = 0;
    $538 = HEAP32[$11>>2]|0;
    $539 = HEAP32[$17>>2]|0;
    $540 = HEAP32[$12>>2]|0;
    $541 = Math_imul($539, $540)|0;
    $542 = (($541) + 0)|0;
    $543 = (($538) + ($542<<2)|0);
    $544 = +HEAPF32[$543>>2];
    $545 = HEAP32[$8>>2]|0;
    $546 = HEAP32[$17>>2]|0;
    $547 = HEAP32[$9>>2]|0;
    $548 = Math_imul($546, $547)|0;
    $549 = (($548) + 4)|0;
    $550 = (($545) + ($549<<2)|0);
    HEAPF32[$550>>2] = $544;
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $551 = HEAP32[$11>>2]|0;
    $552 = HEAP32[$17>>2]|0;
    $553 = HEAP32[$12>>2]|0;
    $554 = Math_imul($552, $553)|0;
    $555 = (($554) + 0)|0;
    $556 = (($551) + ($555<<2)|0);
    $557 = +HEAPF32[$556>>2];
    $558 = HEAP32[$8>>2]|0;
    $559 = HEAP32[$17>>2]|0;
    $560 = HEAP32[$9>>2]|0;
    $561 = Math_imul($559, $560)|0;
    $562 = (($561) + 3)|0;
    $563 = (($558) + ($562<<2)|0);
    HEAPF32[$563>>2] = $557;
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $564 = HEAP32[$11>>2]|0;
    $565 = HEAP32[$17>>2]|0;
    $566 = HEAP32[$12>>2]|0;
    $567 = Math_imul($565, $566)|0;
    $568 = (($567) + 0)|0;
    $569 = (($564) + ($568<<2)|0);
    $570 = +HEAPF32[$569>>2];
    $571 = HEAP32[$8>>2]|0;
    $572 = HEAP32[$17>>2]|0;
    $573 = HEAP32[$9>>2]|0;
    $574 = Math_imul($572, $573)|0;
    $575 = (($574) + 2)|0;
    $576 = (($571) + ($575<<2)|0);
    HEAPF32[$576>>2] = $570;
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $577 = HEAP32[$11>>2]|0;
    $578 = HEAP32[$17>>2]|0;
    $579 = HEAP32[$12>>2]|0;
    $580 = Math_imul($578, $579)|0;
    $581 = (($580) + 0)|0;
    $582 = (($577) + ($581<<2)|0);
    $583 = +HEAPF32[$582>>2];
    $584 = HEAP32[$8>>2]|0;
    $585 = HEAP32[$17>>2]|0;
    $586 = HEAP32[$9>>2]|0;
    $587 = Math_imul($585, $586)|0;
    $588 = (($587) + 1)|0;
    $589 = (($584) + ($588<<2)|0);
    HEAPF32[$589>>2] = $583;
    label = 72;
   }
   if ((label|0) == 72) {
    label = 0;
    $590 = HEAP32[$11>>2]|0;
    $591 = HEAP32[$17>>2]|0;
    $592 = HEAP32[$12>>2]|0;
    $593 = Math_imul($591, $592)|0;
    $594 = (($593) + 0)|0;
    $595 = (($590) + ($594<<2)|0);
    $596 = +HEAPF32[$595>>2];
    $597 = HEAP32[$8>>2]|0;
    $598 = HEAP32[$17>>2]|0;
    $599 = HEAP32[$9>>2]|0;
    $600 = Math_imul($598, $599)|0;
    $601 = (($600) + 0)|0;
    $602 = (($597) + ($601<<2)|0);
    HEAPF32[$602>>2] = $596;
   }
   $603 = HEAP32[$17>>2]|0;
   $604 = (($603) + 1)|0;
   HEAP32[$17>>2] = $604;
  }
  STACKTOP = sp;return;
 }
 HEAP32[$16>>2] = 0;
 while(1) {
  $31 = HEAP32[$16>>2]|0;
  $32 = HEAP32[$14>>2]|0;
  $33 = ($31>>>0)<($32>>>0);
  if (!($33)) {
   break;
  }
  $34 = HEAP32[$12>>2]|0;
  switch ($34|0) {
  case 17:  {
   $35 = HEAP32[$11>>2]|0;
   $36 = HEAP32[$16>>2]|0;
   $37 = HEAP32[$12>>2]|0;
   $38 = Math_imul($36, $37)|0;
   $39 = (($38) + 16)|0;
   $40 = (($35) + ($39<<2)|0);
   $41 = +HEAPF32[$40>>2];
   $42 = HEAP32[$8>>2]|0;
   $43 = HEAP32[$16>>2]|0;
   $44 = HEAP32[$9>>2]|0;
   $45 = Math_imul($43, $44)|0;
   $46 = (($45) + 16)|0;
   $47 = (($42) + ($46<<2)|0);
   HEAPF32[$47>>2] = $41;
   label = 16;
   break;
  }
  case 16:  {
   label = 16;
   break;
  }
  case 15:  {
   label = 17;
   break;
  }
  case 14:  {
   label = 18;
   break;
  }
  case 13:  {
   label = 19;
   break;
  }
  case 12:  {
   label = 20;
   break;
  }
  case 11:  {
   label = 21;
   break;
  }
  case 10:  {
   label = 22;
   break;
  }
  case 9:  {
   label = 23;
   break;
  }
  case 8:  {
   label = 24;
   break;
  }
  case 7:  {
   label = 25;
   break;
  }
  case 6:  {
   label = 26;
   break;
  }
  case 5:  {
   label = 27;
   break;
  }
  case 4:  {
   label = 28;
   break;
  }
  case 3:  {
   label = 29;
   break;
  }
  case 2:  {
   label = 30;
   break;
  }
  case 1:  {
   label = 31;
   break;
  }
  default: {
  }
  }
  if ((label|0) == 16) {
   label = 0;
   $48 = HEAP32[$11>>2]|0;
   $49 = HEAP32[$16>>2]|0;
   $50 = HEAP32[$12>>2]|0;
   $51 = Math_imul($49, $50)|0;
   $52 = (($51) + 15)|0;
   $53 = (($48) + ($52<<2)|0);
   $54 = +HEAPF32[$53>>2];
   $55 = HEAP32[$8>>2]|0;
   $56 = HEAP32[$16>>2]|0;
   $57 = HEAP32[$9>>2]|0;
   $58 = Math_imul($56, $57)|0;
   $59 = (($58) + 15)|0;
   $60 = (($55) + ($59<<2)|0);
   HEAPF32[$60>>2] = $54;
   label = 17;
  }
  if ((label|0) == 17) {
   label = 0;
   $61 = HEAP32[$11>>2]|0;
   $62 = HEAP32[$16>>2]|0;
   $63 = HEAP32[$12>>2]|0;
   $64 = Math_imul($62, $63)|0;
   $65 = (($64) + 14)|0;
   $66 = (($61) + ($65<<2)|0);
   $67 = +HEAPF32[$66>>2];
   $68 = HEAP32[$8>>2]|0;
   $69 = HEAP32[$16>>2]|0;
   $70 = HEAP32[$9>>2]|0;
   $71 = Math_imul($69, $70)|0;
   $72 = (($71) + 14)|0;
   $73 = (($68) + ($72<<2)|0);
   HEAPF32[$73>>2] = $67;
   label = 18;
  }
  if ((label|0) == 18) {
   label = 0;
   $74 = HEAP32[$11>>2]|0;
   $75 = HEAP32[$16>>2]|0;
   $76 = HEAP32[$12>>2]|0;
   $77 = Math_imul($75, $76)|0;
   $78 = (($77) + 13)|0;
   $79 = (($74) + ($78<<2)|0);
   $80 = +HEAPF32[$79>>2];
   $81 = HEAP32[$8>>2]|0;
   $82 = HEAP32[$16>>2]|0;
   $83 = HEAP32[$9>>2]|0;
   $84 = Math_imul($82, $83)|0;
   $85 = (($84) + 13)|0;
   $86 = (($81) + ($85<<2)|0);
   HEAPF32[$86>>2] = $80;
   label = 19;
  }
  if ((label|0) == 19) {
   label = 0;
   $87 = HEAP32[$11>>2]|0;
   $88 = HEAP32[$16>>2]|0;
   $89 = HEAP32[$12>>2]|0;
   $90 = Math_imul($88, $89)|0;
   $91 = (($90) + 12)|0;
   $92 = (($87) + ($91<<2)|0);
   $93 = +HEAPF32[$92>>2];
   $94 = HEAP32[$8>>2]|0;
   $95 = HEAP32[$16>>2]|0;
   $96 = HEAP32[$9>>2]|0;
   $97 = Math_imul($95, $96)|0;
   $98 = (($97) + 12)|0;
   $99 = (($94) + ($98<<2)|0);
   HEAPF32[$99>>2] = $93;
   label = 20;
  }
  if ((label|0) == 20) {
   label = 0;
   $100 = HEAP32[$11>>2]|0;
   $101 = HEAP32[$16>>2]|0;
   $102 = HEAP32[$12>>2]|0;
   $103 = Math_imul($101, $102)|0;
   $104 = (($103) + 11)|0;
   $105 = (($100) + ($104<<2)|0);
   $106 = +HEAPF32[$105>>2];
   $107 = HEAP32[$8>>2]|0;
   $108 = HEAP32[$16>>2]|0;
   $109 = HEAP32[$9>>2]|0;
   $110 = Math_imul($108, $109)|0;
   $111 = (($110) + 11)|0;
   $112 = (($107) + ($111<<2)|0);
   HEAPF32[$112>>2] = $106;
   label = 21;
  }
  if ((label|0) == 21) {
   label = 0;
   $113 = HEAP32[$11>>2]|0;
   $114 = HEAP32[$16>>2]|0;
   $115 = HEAP32[$12>>2]|0;
   $116 = Math_imul($114, $115)|0;
   $117 = (($116) + 10)|0;
   $118 = (($113) + ($117<<2)|0);
   $119 = +HEAPF32[$118>>2];
   $120 = HEAP32[$8>>2]|0;
   $121 = HEAP32[$16>>2]|0;
   $122 = HEAP32[$9>>2]|0;
   $123 = Math_imul($121, $122)|0;
   $124 = (($123) + 10)|0;
   $125 = (($120) + ($124<<2)|0);
   HEAPF32[$125>>2] = $119;
   label = 22;
  }
  if ((label|0) == 22) {
   label = 0;
   $126 = HEAP32[$11>>2]|0;
   $127 = HEAP32[$16>>2]|0;
   $128 = HEAP32[$12>>2]|0;
   $129 = Math_imul($127, $128)|0;
   $130 = (($129) + 9)|0;
   $131 = (($126) + ($130<<2)|0);
   $132 = +HEAPF32[$131>>2];
   $133 = HEAP32[$8>>2]|0;
   $134 = HEAP32[$16>>2]|0;
   $135 = HEAP32[$9>>2]|0;
   $136 = Math_imul($134, $135)|0;
   $137 = (($136) + 9)|0;
   $138 = (($133) + ($137<<2)|0);
   HEAPF32[$138>>2] = $132;
   label = 23;
  }
  if ((label|0) == 23) {
   label = 0;
   $139 = HEAP32[$11>>2]|0;
   $140 = HEAP32[$16>>2]|0;
   $141 = HEAP32[$12>>2]|0;
   $142 = Math_imul($140, $141)|0;
   $143 = (($142) + 8)|0;
   $144 = (($139) + ($143<<2)|0);
   $145 = +HEAPF32[$144>>2];
   $146 = HEAP32[$8>>2]|0;
   $147 = HEAP32[$16>>2]|0;
   $148 = HEAP32[$9>>2]|0;
   $149 = Math_imul($147, $148)|0;
   $150 = (($149) + 8)|0;
   $151 = (($146) + ($150<<2)|0);
   HEAPF32[$151>>2] = $145;
   label = 24;
  }
  if ((label|0) == 24) {
   label = 0;
   $152 = HEAP32[$11>>2]|0;
   $153 = HEAP32[$16>>2]|0;
   $154 = HEAP32[$12>>2]|0;
   $155 = Math_imul($153, $154)|0;
   $156 = (($155) + 7)|0;
   $157 = (($152) + ($156<<2)|0);
   $158 = +HEAPF32[$157>>2];
   $159 = HEAP32[$8>>2]|0;
   $160 = HEAP32[$16>>2]|0;
   $161 = HEAP32[$9>>2]|0;
   $162 = Math_imul($160, $161)|0;
   $163 = (($162) + 7)|0;
   $164 = (($159) + ($163<<2)|0);
   HEAPF32[$164>>2] = $158;
   label = 25;
  }
  if ((label|0) == 25) {
   label = 0;
   $165 = HEAP32[$11>>2]|0;
   $166 = HEAP32[$16>>2]|0;
   $167 = HEAP32[$12>>2]|0;
   $168 = Math_imul($166, $167)|0;
   $169 = (($168) + 6)|0;
   $170 = (($165) + ($169<<2)|0);
   $171 = +HEAPF32[$170>>2];
   $172 = HEAP32[$8>>2]|0;
   $173 = HEAP32[$16>>2]|0;
   $174 = HEAP32[$9>>2]|0;
   $175 = Math_imul($173, $174)|0;
   $176 = (($175) + 6)|0;
   $177 = (($172) + ($176<<2)|0);
   HEAPF32[$177>>2] = $171;
   label = 26;
  }
  if ((label|0) == 26) {
   label = 0;
   $178 = HEAP32[$11>>2]|0;
   $179 = HEAP32[$16>>2]|0;
   $180 = HEAP32[$12>>2]|0;
   $181 = Math_imul($179, $180)|0;
   $182 = (($181) + 5)|0;
   $183 = (($178) + ($182<<2)|0);
   $184 = +HEAPF32[$183>>2];
   $185 = HEAP32[$8>>2]|0;
   $186 = HEAP32[$16>>2]|0;
   $187 = HEAP32[$9>>2]|0;
   $188 = Math_imul($186, $187)|0;
   $189 = (($188) + 5)|0;
   $190 = (($185) + ($189<<2)|0);
   HEAPF32[$190>>2] = $184;
   label = 27;
  }
  if ((label|0) == 27) {
   label = 0;
   $191 = HEAP32[$11>>2]|0;
   $192 = HEAP32[$16>>2]|0;
   $193 = HEAP32[$12>>2]|0;
   $194 = Math_imul($192, $193)|0;
   $195 = (($194) + 4)|0;
   $196 = (($191) + ($195<<2)|0);
   $197 = +HEAPF32[$196>>2];
   $198 = HEAP32[$8>>2]|0;
   $199 = HEAP32[$16>>2]|0;
   $200 = HEAP32[$9>>2]|0;
   $201 = Math_imul($199, $200)|0;
   $202 = (($201) + 4)|0;
   $203 = (($198) + ($202<<2)|0);
   HEAPF32[$203>>2] = $197;
   label = 28;
  }
  if ((label|0) == 28) {
   label = 0;
   $204 = HEAP32[$11>>2]|0;
   $205 = HEAP32[$16>>2]|0;
   $206 = HEAP32[$12>>2]|0;
   $207 = Math_imul($205, $206)|0;
   $208 = (($207) + 3)|0;
   $209 = (($204) + ($208<<2)|0);
   $210 = +HEAPF32[$209>>2];
   $211 = HEAP32[$8>>2]|0;
   $212 = HEAP32[$16>>2]|0;
   $213 = HEAP32[$9>>2]|0;
   $214 = Math_imul($212, $213)|0;
   $215 = (($214) + 3)|0;
   $216 = (($211) + ($215<<2)|0);
   HEAPF32[$216>>2] = $210;
   label = 29;
  }
  if ((label|0) == 29) {
   label = 0;
   $217 = HEAP32[$11>>2]|0;
   $218 = HEAP32[$16>>2]|0;
   $219 = HEAP32[$12>>2]|0;
   $220 = Math_imul($218, $219)|0;
   $221 = (($220) + 2)|0;
   $222 = (($217) + ($221<<2)|0);
   $223 = +HEAPF32[$222>>2];
   $224 = HEAP32[$8>>2]|0;
   $225 = HEAP32[$16>>2]|0;
   $226 = HEAP32[$9>>2]|0;
   $227 = Math_imul($225, $226)|0;
   $228 = (($227) + 2)|0;
   $229 = (($224) + ($228<<2)|0);
   HEAPF32[$229>>2] = $223;
   label = 30;
  }
  if ((label|0) == 30) {
   label = 0;
   $230 = HEAP32[$11>>2]|0;
   $231 = HEAP32[$16>>2]|0;
   $232 = HEAP32[$12>>2]|0;
   $233 = Math_imul($231, $232)|0;
   $234 = (($233) + 1)|0;
   $235 = (($230) + ($234<<2)|0);
   $236 = +HEAPF32[$235>>2];
   $237 = HEAP32[$8>>2]|0;
   $238 = HEAP32[$16>>2]|0;
   $239 = HEAP32[$9>>2]|0;
   $240 = Math_imul($238, $239)|0;
   $241 = (($240) + 1)|0;
   $242 = (($237) + ($241<<2)|0);
   HEAPF32[$242>>2] = $236;
   label = 31;
  }
  if ((label|0) == 31) {
   label = 0;
   $243 = HEAP32[$11>>2]|0;
   $244 = HEAP32[$16>>2]|0;
   $245 = HEAP32[$12>>2]|0;
   $246 = Math_imul($244, $245)|0;
   $247 = (($246) + 0)|0;
   $248 = (($243) + ($247<<2)|0);
   $249 = +HEAPF32[$248>>2];
   $250 = HEAP32[$8>>2]|0;
   $251 = HEAP32[$16>>2]|0;
   $252 = HEAP32[$9>>2]|0;
   $253 = Math_imul($251, $252)|0;
   $254 = (($253) + 0)|0;
   $255 = (($250) + ($254<<2)|0);
   HEAPF32[$255>>2] = $249;
  }
  $256 = HEAP32[$9>>2]|0;
  $257 = HEAP32[$12>>2]|0;
  $258 = (($256) - ($257))|0;
  switch ($258|0) {
  case 17:  {
   $259 = HEAP32[$8>>2]|0;
   $260 = HEAP32[$16>>2]|0;
   $261 = HEAP32[$9>>2]|0;
   $262 = Math_imul($260, $261)|0;
   $263 = (($262) + 16)|0;
   $264 = (($259) + ($263<<2)|0);
   HEAPF32[$264>>2] = 0.0;
   label = 34;
   break;
  }
  case 16:  {
   label = 34;
   break;
  }
  case 15:  {
   label = 35;
   break;
  }
  case 14:  {
   label = 36;
   break;
  }
  case 13:  {
   label = 37;
   break;
  }
  case 12:  {
   label = 38;
   break;
  }
  case 11:  {
   label = 39;
   break;
  }
  case 10:  {
   label = 40;
   break;
  }
  case 9:  {
   label = 41;
   break;
  }
  case 8:  {
   label = 42;
   break;
  }
  case 7:  {
   label = 43;
   break;
  }
  case 6:  {
   label = 44;
   break;
  }
  case 5:  {
   label = 45;
   break;
  }
  case 4:  {
   label = 46;
   break;
  }
  case 3:  {
   label = 47;
   break;
  }
  case 2:  {
   label = 48;
   break;
  }
  case 1:  {
   label = 49;
   break;
  }
  default: {
  }
  }
  if ((label|0) == 34) {
   label = 0;
   $265 = HEAP32[$8>>2]|0;
   $266 = HEAP32[$16>>2]|0;
   $267 = HEAP32[$9>>2]|0;
   $268 = Math_imul($266, $267)|0;
   $269 = (($268) + 15)|0;
   $270 = (($265) + ($269<<2)|0);
   HEAPF32[$270>>2] = 0.0;
   label = 35;
  }
  if ((label|0) == 35) {
   label = 0;
   $271 = HEAP32[$8>>2]|0;
   $272 = HEAP32[$16>>2]|0;
   $273 = HEAP32[$9>>2]|0;
   $274 = Math_imul($272, $273)|0;
   $275 = (($274) + 14)|0;
   $276 = (($271) + ($275<<2)|0);
   HEAPF32[$276>>2] = 0.0;
   label = 36;
  }
  if ((label|0) == 36) {
   label = 0;
   $277 = HEAP32[$8>>2]|0;
   $278 = HEAP32[$16>>2]|0;
   $279 = HEAP32[$9>>2]|0;
   $280 = Math_imul($278, $279)|0;
   $281 = (($280) + 13)|0;
   $282 = (($277) + ($281<<2)|0);
   HEAPF32[$282>>2] = 0.0;
   label = 37;
  }
  if ((label|0) == 37) {
   label = 0;
   $283 = HEAP32[$8>>2]|0;
   $284 = HEAP32[$16>>2]|0;
   $285 = HEAP32[$9>>2]|0;
   $286 = Math_imul($284, $285)|0;
   $287 = (($286) + 12)|0;
   $288 = (($283) + ($287<<2)|0);
   HEAPF32[$288>>2] = 0.0;
   label = 38;
  }
  if ((label|0) == 38) {
   label = 0;
   $289 = HEAP32[$8>>2]|0;
   $290 = HEAP32[$16>>2]|0;
   $291 = HEAP32[$9>>2]|0;
   $292 = Math_imul($290, $291)|0;
   $293 = (($292) + 11)|0;
   $294 = (($289) + ($293<<2)|0);
   HEAPF32[$294>>2] = 0.0;
   label = 39;
  }
  if ((label|0) == 39) {
   label = 0;
   $295 = HEAP32[$8>>2]|0;
   $296 = HEAP32[$16>>2]|0;
   $297 = HEAP32[$9>>2]|0;
   $298 = Math_imul($296, $297)|0;
   $299 = (($298) + 10)|0;
   $300 = (($295) + ($299<<2)|0);
   HEAPF32[$300>>2] = 0.0;
   label = 40;
  }
  if ((label|0) == 40) {
   label = 0;
   $301 = HEAP32[$8>>2]|0;
   $302 = HEAP32[$16>>2]|0;
   $303 = HEAP32[$9>>2]|0;
   $304 = Math_imul($302, $303)|0;
   $305 = (($304) + 9)|0;
   $306 = (($301) + ($305<<2)|0);
   HEAPF32[$306>>2] = 0.0;
   label = 41;
  }
  if ((label|0) == 41) {
   label = 0;
   $307 = HEAP32[$8>>2]|0;
   $308 = HEAP32[$16>>2]|0;
   $309 = HEAP32[$9>>2]|0;
   $310 = Math_imul($308, $309)|0;
   $311 = (($310) + 8)|0;
   $312 = (($307) + ($311<<2)|0);
   HEAPF32[$312>>2] = 0.0;
   label = 42;
  }
  if ((label|0) == 42) {
   label = 0;
   $313 = HEAP32[$8>>2]|0;
   $314 = HEAP32[$16>>2]|0;
   $315 = HEAP32[$9>>2]|0;
   $316 = Math_imul($314, $315)|0;
   $317 = (($316) + 7)|0;
   $318 = (($313) + ($317<<2)|0);
   HEAPF32[$318>>2] = 0.0;
   label = 43;
  }
  if ((label|0) == 43) {
   label = 0;
   $319 = HEAP32[$8>>2]|0;
   $320 = HEAP32[$16>>2]|0;
   $321 = HEAP32[$9>>2]|0;
   $322 = Math_imul($320, $321)|0;
   $323 = (($322) + 6)|0;
   $324 = (($319) + ($323<<2)|0);
   HEAPF32[$324>>2] = 0.0;
   label = 44;
  }
  if ((label|0) == 44) {
   label = 0;
   $325 = HEAP32[$8>>2]|0;
   $326 = HEAP32[$16>>2]|0;
   $327 = HEAP32[$9>>2]|0;
   $328 = Math_imul($326, $327)|0;
   $329 = (($328) + 5)|0;
   $330 = (($325) + ($329<<2)|0);
   HEAPF32[$330>>2] = 0.0;
   label = 45;
  }
  if ((label|0) == 45) {
   label = 0;
   $331 = HEAP32[$8>>2]|0;
   $332 = HEAP32[$16>>2]|0;
   $333 = HEAP32[$9>>2]|0;
   $334 = Math_imul($332, $333)|0;
   $335 = (($334) + 4)|0;
   $336 = (($331) + ($335<<2)|0);
   HEAPF32[$336>>2] = 0.0;
   label = 46;
  }
  if ((label|0) == 46) {
   label = 0;
   $337 = HEAP32[$8>>2]|0;
   $338 = HEAP32[$16>>2]|0;
   $339 = HEAP32[$9>>2]|0;
   $340 = Math_imul($338, $339)|0;
   $341 = (($340) + 3)|0;
   $342 = (($337) + ($341<<2)|0);
   HEAPF32[$342>>2] = 0.0;
   label = 47;
  }
  if ((label|0) == 47) {
   label = 0;
   $343 = HEAP32[$8>>2]|0;
   $344 = HEAP32[$16>>2]|0;
   $345 = HEAP32[$9>>2]|0;
   $346 = Math_imul($344, $345)|0;
   $347 = (($346) + 2)|0;
   $348 = (($343) + ($347<<2)|0);
   HEAPF32[$348>>2] = 0.0;
   label = 48;
  }
  if ((label|0) == 48) {
   label = 0;
   $349 = HEAP32[$8>>2]|0;
   $350 = HEAP32[$16>>2]|0;
   $351 = HEAP32[$9>>2]|0;
   $352 = Math_imul($350, $351)|0;
   $353 = (($352) + 1)|0;
   $354 = (($349) + ($353<<2)|0);
   HEAPF32[$354>>2] = 0.0;
   label = 49;
  }
  if ((label|0) == 49) {
   label = 0;
   $355 = HEAP32[$8>>2]|0;
   $356 = HEAP32[$16>>2]|0;
   $357 = HEAP32[$9>>2]|0;
   $358 = Math_imul($356, $357)|0;
   $359 = (($358) + 0)|0;
   $360 = (($355) + ($359<<2)|0);
   HEAPF32[$360>>2] = 0.0;
  }
  $361 = HEAP32[$16>>2]|0;
  $362 = (($361) + 1)|0;
  HEAP32[$16>>2] = $362;
 }
 STACKTOP = sp;return;
}
function _mal_dsp_mix_channels__dec($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0.0;
 var $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0.0;
 var $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0.0;
 var $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0.0, $353 = 0.0;
 var $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0.0;
 var $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0;
 var $390 = 0.0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0.0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0.0;
 var $427 = 0.0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 40|0;
 $9 = sp + 36|0;
 $10 = sp + 32|0;
 $11 = sp + 28|0;
 $12 = sp + 24|0;
 $13 = sp + 20|0;
 $14 = sp + 16|0;
 $15 = sp + 12|0;
 $16 = sp + 8|0;
 $17 = sp + 4|0;
 $18 = sp;
 HEAP32[$8>>2] = $0;
 HEAP32[$9>>2] = $1;
 HEAP32[$10>>2] = $2;
 HEAP32[$11>>2] = $3;
 HEAP32[$12>>2] = $4;
 HEAP32[$13>>2] = $5;
 HEAP32[$14>>2] = $6;
 HEAP32[$15>>2] = $7;
 $19 = HEAP32[$8>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((13252|0),(10766|0),10573,(13277|0));
  // unreachable;
 }
 $21 = HEAP32[$9>>2]|0;
 $22 = ($21>>>0)>(0);
 if (!($22)) {
  ___assert_fail((13303|0),(10766|0),10574,(13277|0));
  // unreachable;
 }
 $23 = HEAP32[$11>>2]|0;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  ___assert_fail((13319|0),(10766|0),10575,(13277|0));
  // unreachable;
 }
 $25 = HEAP32[$12>>2]|0;
 $26 = ($25>>>0)>(0);
 if (!($26)) {
  ___assert_fail((13343|0),(10766|0),10576,(13277|0));
  // unreachable;
 }
 $27 = HEAP32[$9>>2]|0;
 $28 = HEAP32[$12>>2]|0;
 $29 = ($27>>>0)<($28>>>0);
 if (!($29)) {
  ___assert_fail((13358|0),(10766|0),10577,(13277|0));
  // unreachable;
 }
 $30 = HEAP32[$15>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  HEAP32[$16>>2] = 0;
  while(1) {
   $32 = HEAP32[$16>>2]|0;
   $33 = HEAP32[$14>>2]|0;
   $34 = ($32>>>0)<($33>>>0);
   if (!($34)) {
    break;
   }
   $35 = HEAP32[$9>>2]|0;
   switch ($35|0) {
   case 17:  {
    $36 = HEAP32[$11>>2]|0;
    $37 = HEAP32[$16>>2]|0;
    $38 = HEAP32[$12>>2]|0;
    $39 = Math_imul($37, $38)|0;
    $40 = (($39) + 16)|0;
    $41 = (($36) + ($40<<2)|0);
    $42 = +HEAPF32[$41>>2];
    $43 = HEAP32[$8>>2]|0;
    $44 = HEAP32[$16>>2]|0;
    $45 = HEAP32[$9>>2]|0;
    $46 = Math_imul($44, $45)|0;
    $47 = (($46) + 16)|0;
    $48 = (($43) + ($47<<2)|0);
    HEAPF32[$48>>2] = $42;
    label = 16;
    break;
   }
   case 16:  {
    label = 16;
    break;
   }
   case 15:  {
    label = 17;
    break;
   }
   case 14:  {
    label = 18;
    break;
   }
   case 13:  {
    label = 19;
    break;
   }
   case 12:  {
    label = 20;
    break;
   }
   case 11:  {
    label = 21;
    break;
   }
   case 10:  {
    label = 22;
    break;
   }
   case 9:  {
    label = 23;
    break;
   }
   case 8:  {
    label = 24;
    break;
   }
   case 7:  {
    label = 25;
    break;
   }
   case 6:  {
    label = 26;
    break;
   }
   case 5:  {
    label = 27;
    break;
   }
   case 4:  {
    label = 28;
    break;
   }
   case 3:  {
    label = 29;
    break;
   }
   case 2:  {
    label = 30;
    break;
   }
   case 1:  {
    label = 31;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 16) {
    label = 0;
    $49 = HEAP32[$11>>2]|0;
    $50 = HEAP32[$16>>2]|0;
    $51 = HEAP32[$12>>2]|0;
    $52 = Math_imul($50, $51)|0;
    $53 = (($52) + 15)|0;
    $54 = (($49) + ($53<<2)|0);
    $55 = +HEAPF32[$54>>2];
    $56 = HEAP32[$8>>2]|0;
    $57 = HEAP32[$16>>2]|0;
    $58 = HEAP32[$9>>2]|0;
    $59 = Math_imul($57, $58)|0;
    $60 = (($59) + 15)|0;
    $61 = (($56) + ($60<<2)|0);
    HEAPF32[$61>>2] = $55;
    label = 17;
   }
   if ((label|0) == 17) {
    label = 0;
    $62 = HEAP32[$11>>2]|0;
    $63 = HEAP32[$16>>2]|0;
    $64 = HEAP32[$12>>2]|0;
    $65 = Math_imul($63, $64)|0;
    $66 = (($65) + 14)|0;
    $67 = (($62) + ($66<<2)|0);
    $68 = +HEAPF32[$67>>2];
    $69 = HEAP32[$8>>2]|0;
    $70 = HEAP32[$16>>2]|0;
    $71 = HEAP32[$9>>2]|0;
    $72 = Math_imul($70, $71)|0;
    $73 = (($72) + 14)|0;
    $74 = (($69) + ($73<<2)|0);
    HEAPF32[$74>>2] = $68;
    label = 18;
   }
   if ((label|0) == 18) {
    label = 0;
    $75 = HEAP32[$11>>2]|0;
    $76 = HEAP32[$16>>2]|0;
    $77 = HEAP32[$12>>2]|0;
    $78 = Math_imul($76, $77)|0;
    $79 = (($78) + 13)|0;
    $80 = (($75) + ($79<<2)|0);
    $81 = +HEAPF32[$80>>2];
    $82 = HEAP32[$8>>2]|0;
    $83 = HEAP32[$16>>2]|0;
    $84 = HEAP32[$9>>2]|0;
    $85 = Math_imul($83, $84)|0;
    $86 = (($85) + 13)|0;
    $87 = (($82) + ($86<<2)|0);
    HEAPF32[$87>>2] = $81;
    label = 19;
   }
   if ((label|0) == 19) {
    label = 0;
    $88 = HEAP32[$11>>2]|0;
    $89 = HEAP32[$16>>2]|0;
    $90 = HEAP32[$12>>2]|0;
    $91 = Math_imul($89, $90)|0;
    $92 = (($91) + 12)|0;
    $93 = (($88) + ($92<<2)|0);
    $94 = +HEAPF32[$93>>2];
    $95 = HEAP32[$8>>2]|0;
    $96 = HEAP32[$16>>2]|0;
    $97 = HEAP32[$9>>2]|0;
    $98 = Math_imul($96, $97)|0;
    $99 = (($98) + 12)|0;
    $100 = (($95) + ($99<<2)|0);
    HEAPF32[$100>>2] = $94;
    label = 20;
   }
   if ((label|0) == 20) {
    label = 0;
    $101 = HEAP32[$11>>2]|0;
    $102 = HEAP32[$16>>2]|0;
    $103 = HEAP32[$12>>2]|0;
    $104 = Math_imul($102, $103)|0;
    $105 = (($104) + 11)|0;
    $106 = (($101) + ($105<<2)|0);
    $107 = +HEAPF32[$106>>2];
    $108 = HEAP32[$8>>2]|0;
    $109 = HEAP32[$16>>2]|0;
    $110 = HEAP32[$9>>2]|0;
    $111 = Math_imul($109, $110)|0;
    $112 = (($111) + 11)|0;
    $113 = (($108) + ($112<<2)|0);
    HEAPF32[$113>>2] = $107;
    label = 21;
   }
   if ((label|0) == 21) {
    label = 0;
    $114 = HEAP32[$11>>2]|0;
    $115 = HEAP32[$16>>2]|0;
    $116 = HEAP32[$12>>2]|0;
    $117 = Math_imul($115, $116)|0;
    $118 = (($117) + 10)|0;
    $119 = (($114) + ($118<<2)|0);
    $120 = +HEAPF32[$119>>2];
    $121 = HEAP32[$8>>2]|0;
    $122 = HEAP32[$16>>2]|0;
    $123 = HEAP32[$9>>2]|0;
    $124 = Math_imul($122, $123)|0;
    $125 = (($124) + 10)|0;
    $126 = (($121) + ($125<<2)|0);
    HEAPF32[$126>>2] = $120;
    label = 22;
   }
   if ((label|0) == 22) {
    label = 0;
    $127 = HEAP32[$11>>2]|0;
    $128 = HEAP32[$16>>2]|0;
    $129 = HEAP32[$12>>2]|0;
    $130 = Math_imul($128, $129)|0;
    $131 = (($130) + 9)|0;
    $132 = (($127) + ($131<<2)|0);
    $133 = +HEAPF32[$132>>2];
    $134 = HEAP32[$8>>2]|0;
    $135 = HEAP32[$16>>2]|0;
    $136 = HEAP32[$9>>2]|0;
    $137 = Math_imul($135, $136)|0;
    $138 = (($137) + 9)|0;
    $139 = (($134) + ($138<<2)|0);
    HEAPF32[$139>>2] = $133;
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $140 = HEAP32[$11>>2]|0;
    $141 = HEAP32[$16>>2]|0;
    $142 = HEAP32[$12>>2]|0;
    $143 = Math_imul($141, $142)|0;
    $144 = (($143) + 8)|0;
    $145 = (($140) + ($144<<2)|0);
    $146 = +HEAPF32[$145>>2];
    $147 = HEAP32[$8>>2]|0;
    $148 = HEAP32[$16>>2]|0;
    $149 = HEAP32[$9>>2]|0;
    $150 = Math_imul($148, $149)|0;
    $151 = (($150) + 8)|0;
    $152 = (($147) + ($151<<2)|0);
    HEAPF32[$152>>2] = $146;
    label = 24;
   }
   if ((label|0) == 24) {
    label = 0;
    $153 = HEAP32[$11>>2]|0;
    $154 = HEAP32[$16>>2]|0;
    $155 = HEAP32[$12>>2]|0;
    $156 = Math_imul($154, $155)|0;
    $157 = (($156) + 7)|0;
    $158 = (($153) + ($157<<2)|0);
    $159 = +HEAPF32[$158>>2];
    $160 = HEAP32[$8>>2]|0;
    $161 = HEAP32[$16>>2]|0;
    $162 = HEAP32[$9>>2]|0;
    $163 = Math_imul($161, $162)|0;
    $164 = (($163) + 7)|0;
    $165 = (($160) + ($164<<2)|0);
    HEAPF32[$165>>2] = $159;
    label = 25;
   }
   if ((label|0) == 25) {
    label = 0;
    $166 = HEAP32[$11>>2]|0;
    $167 = HEAP32[$16>>2]|0;
    $168 = HEAP32[$12>>2]|0;
    $169 = Math_imul($167, $168)|0;
    $170 = (($169) + 6)|0;
    $171 = (($166) + ($170<<2)|0);
    $172 = +HEAPF32[$171>>2];
    $173 = HEAP32[$8>>2]|0;
    $174 = HEAP32[$16>>2]|0;
    $175 = HEAP32[$9>>2]|0;
    $176 = Math_imul($174, $175)|0;
    $177 = (($176) + 6)|0;
    $178 = (($173) + ($177<<2)|0);
    HEAPF32[$178>>2] = $172;
    label = 26;
   }
   if ((label|0) == 26) {
    label = 0;
    $179 = HEAP32[$11>>2]|0;
    $180 = HEAP32[$16>>2]|0;
    $181 = HEAP32[$12>>2]|0;
    $182 = Math_imul($180, $181)|0;
    $183 = (($182) + 5)|0;
    $184 = (($179) + ($183<<2)|0);
    $185 = +HEAPF32[$184>>2];
    $186 = HEAP32[$8>>2]|0;
    $187 = HEAP32[$16>>2]|0;
    $188 = HEAP32[$9>>2]|0;
    $189 = Math_imul($187, $188)|0;
    $190 = (($189) + 5)|0;
    $191 = (($186) + ($190<<2)|0);
    HEAPF32[$191>>2] = $185;
    label = 27;
   }
   if ((label|0) == 27) {
    label = 0;
    $192 = HEAP32[$11>>2]|0;
    $193 = HEAP32[$16>>2]|0;
    $194 = HEAP32[$12>>2]|0;
    $195 = Math_imul($193, $194)|0;
    $196 = (($195) + 4)|0;
    $197 = (($192) + ($196<<2)|0);
    $198 = +HEAPF32[$197>>2];
    $199 = HEAP32[$8>>2]|0;
    $200 = HEAP32[$16>>2]|0;
    $201 = HEAP32[$9>>2]|0;
    $202 = Math_imul($200, $201)|0;
    $203 = (($202) + 4)|0;
    $204 = (($199) + ($203<<2)|0);
    HEAPF32[$204>>2] = $198;
    label = 28;
   }
   if ((label|0) == 28) {
    label = 0;
    $205 = HEAP32[$11>>2]|0;
    $206 = HEAP32[$16>>2]|0;
    $207 = HEAP32[$12>>2]|0;
    $208 = Math_imul($206, $207)|0;
    $209 = (($208) + 3)|0;
    $210 = (($205) + ($209<<2)|0);
    $211 = +HEAPF32[$210>>2];
    $212 = HEAP32[$8>>2]|0;
    $213 = HEAP32[$16>>2]|0;
    $214 = HEAP32[$9>>2]|0;
    $215 = Math_imul($213, $214)|0;
    $216 = (($215) + 3)|0;
    $217 = (($212) + ($216<<2)|0);
    HEAPF32[$217>>2] = $211;
    label = 29;
   }
   if ((label|0) == 29) {
    label = 0;
    $218 = HEAP32[$11>>2]|0;
    $219 = HEAP32[$16>>2]|0;
    $220 = HEAP32[$12>>2]|0;
    $221 = Math_imul($219, $220)|0;
    $222 = (($221) + 2)|0;
    $223 = (($218) + ($222<<2)|0);
    $224 = +HEAPF32[$223>>2];
    $225 = HEAP32[$8>>2]|0;
    $226 = HEAP32[$16>>2]|0;
    $227 = HEAP32[$9>>2]|0;
    $228 = Math_imul($226, $227)|0;
    $229 = (($228) + 2)|0;
    $230 = (($225) + ($229<<2)|0);
    HEAPF32[$230>>2] = $224;
    label = 30;
   }
   if ((label|0) == 30) {
    label = 0;
    $231 = HEAP32[$11>>2]|0;
    $232 = HEAP32[$16>>2]|0;
    $233 = HEAP32[$12>>2]|0;
    $234 = Math_imul($232, $233)|0;
    $235 = (($234) + 1)|0;
    $236 = (($231) + ($235<<2)|0);
    $237 = +HEAPF32[$236>>2];
    $238 = HEAP32[$8>>2]|0;
    $239 = HEAP32[$16>>2]|0;
    $240 = HEAP32[$9>>2]|0;
    $241 = Math_imul($239, $240)|0;
    $242 = (($241) + 1)|0;
    $243 = (($238) + ($242<<2)|0);
    HEAPF32[$243>>2] = $237;
    label = 31;
   }
   if ((label|0) == 31) {
    label = 0;
    $244 = HEAP32[$11>>2]|0;
    $245 = HEAP32[$16>>2]|0;
    $246 = HEAP32[$12>>2]|0;
    $247 = Math_imul($245, $246)|0;
    $248 = (($247) + 0)|0;
    $249 = (($244) + ($248<<2)|0);
    $250 = +HEAPF32[$249>>2];
    $251 = HEAP32[$8>>2]|0;
    $252 = HEAP32[$16>>2]|0;
    $253 = HEAP32[$9>>2]|0;
    $254 = Math_imul($252, $253)|0;
    $255 = (($254) + 0)|0;
    $256 = (($251) + ($255<<2)|0);
    HEAPF32[$256>>2] = $250;
   }
   $257 = HEAP32[$16>>2]|0;
   $258 = (($257) + 1)|0;
   HEAP32[$16>>2] = $258;
  }
  STACKTOP = sp;return;
 }
 $259 = HEAP32[$9>>2]|0;
 $260 = ($259|0)==(1);
 if (!($260)) {
  $437 = HEAP32[$8>>2]|0;
  $438 = HEAP32[$9>>2]|0;
  $439 = HEAP32[$10>>2]|0;
  $440 = HEAP32[$11>>2]|0;
  $441 = HEAP32[$12>>2]|0;
  $442 = HEAP32[$13>>2]|0;
  $443 = HEAP32[$14>>2]|0;
  _mal_dsp_mix_channels__dec($437,$438,$439,$440,$441,$442,$443,0);
  STACKTOP = sp;return;
 }
 HEAP32[$17>>2] = 0;
 while(1) {
  $261 = HEAP32[$17>>2]|0;
  $262 = HEAP32[$14>>2]|0;
  $263 = ($261>>>0)<($262>>>0);
  if (!($263)) {
   break;
  }
  HEAPF32[$18>>2] = 0.0;
  $264 = HEAP32[$12>>2]|0;
  switch ($264|0) {
  case 18:  {
   $265 = HEAP32[$11>>2]|0;
   $266 = HEAP32[$17>>2]|0;
   $267 = HEAP32[$12>>2]|0;
   $268 = Math_imul($266, $267)|0;
   $269 = (($268) + 17)|0;
   $270 = (($265) + ($269<<2)|0);
   $271 = +HEAPF32[$270>>2];
   $272 = +HEAPF32[$18>>2];
   $273 = $272 + $271;
   HEAPF32[$18>>2] = $273;
   label = 38;
   break;
  }
  case 17:  {
   label = 38;
   break;
  }
  case 16:  {
   label = 39;
   break;
  }
  case 15:  {
   label = 40;
   break;
  }
  case 14:  {
   label = 41;
   break;
  }
  case 13:  {
   label = 42;
   break;
  }
  case 12:  {
   label = 43;
   break;
  }
  case 11:  {
   label = 44;
   break;
  }
  case 10:  {
   label = 45;
   break;
  }
  case 9:  {
   label = 46;
   break;
  }
  case 8:  {
   label = 47;
   break;
  }
  case 7:  {
   label = 48;
   break;
  }
  case 6:  {
   label = 49;
   break;
  }
  case 5:  {
   label = 50;
   break;
  }
  case 4:  {
   label = 51;
   break;
  }
  case 3:  {
   label = 52;
   break;
  }
  case 2:  {
   label = 53;
   break;
  }
  case 1:  {
   label = 54;
   break;
  }
  default: {
  }
  }
  if ((label|0) == 38) {
   label = 0;
   $274 = HEAP32[$11>>2]|0;
   $275 = HEAP32[$17>>2]|0;
   $276 = HEAP32[$12>>2]|0;
   $277 = Math_imul($275, $276)|0;
   $278 = (($277) + 16)|0;
   $279 = (($274) + ($278<<2)|0);
   $280 = +HEAPF32[$279>>2];
   $281 = +HEAPF32[$18>>2];
   $282 = $281 + $280;
   HEAPF32[$18>>2] = $282;
   label = 39;
  }
  if ((label|0) == 39) {
   label = 0;
   $283 = HEAP32[$11>>2]|0;
   $284 = HEAP32[$17>>2]|0;
   $285 = HEAP32[$12>>2]|0;
   $286 = Math_imul($284, $285)|0;
   $287 = (($286) + 15)|0;
   $288 = (($283) + ($287<<2)|0);
   $289 = +HEAPF32[$288>>2];
   $290 = +HEAPF32[$18>>2];
   $291 = $290 + $289;
   HEAPF32[$18>>2] = $291;
   label = 40;
  }
  if ((label|0) == 40) {
   label = 0;
   $292 = HEAP32[$11>>2]|0;
   $293 = HEAP32[$17>>2]|0;
   $294 = HEAP32[$12>>2]|0;
   $295 = Math_imul($293, $294)|0;
   $296 = (($295) + 14)|0;
   $297 = (($292) + ($296<<2)|0);
   $298 = +HEAPF32[$297>>2];
   $299 = +HEAPF32[$18>>2];
   $300 = $299 + $298;
   HEAPF32[$18>>2] = $300;
   label = 41;
  }
  if ((label|0) == 41) {
   label = 0;
   $301 = HEAP32[$11>>2]|0;
   $302 = HEAP32[$17>>2]|0;
   $303 = HEAP32[$12>>2]|0;
   $304 = Math_imul($302, $303)|0;
   $305 = (($304) + 13)|0;
   $306 = (($301) + ($305<<2)|0);
   $307 = +HEAPF32[$306>>2];
   $308 = +HEAPF32[$18>>2];
   $309 = $308 + $307;
   HEAPF32[$18>>2] = $309;
   label = 42;
  }
  if ((label|0) == 42) {
   label = 0;
   $310 = HEAP32[$11>>2]|0;
   $311 = HEAP32[$17>>2]|0;
   $312 = HEAP32[$12>>2]|0;
   $313 = Math_imul($311, $312)|0;
   $314 = (($313) + 12)|0;
   $315 = (($310) + ($314<<2)|0);
   $316 = +HEAPF32[$315>>2];
   $317 = +HEAPF32[$18>>2];
   $318 = $317 + $316;
   HEAPF32[$18>>2] = $318;
   label = 43;
  }
  if ((label|0) == 43) {
   label = 0;
   $319 = HEAP32[$11>>2]|0;
   $320 = HEAP32[$17>>2]|0;
   $321 = HEAP32[$12>>2]|0;
   $322 = Math_imul($320, $321)|0;
   $323 = (($322) + 11)|0;
   $324 = (($319) + ($323<<2)|0);
   $325 = +HEAPF32[$324>>2];
   $326 = +HEAPF32[$18>>2];
   $327 = $326 + $325;
   HEAPF32[$18>>2] = $327;
   label = 44;
  }
  if ((label|0) == 44) {
   label = 0;
   $328 = HEAP32[$11>>2]|0;
   $329 = HEAP32[$17>>2]|0;
   $330 = HEAP32[$12>>2]|0;
   $331 = Math_imul($329, $330)|0;
   $332 = (($331) + 10)|0;
   $333 = (($328) + ($332<<2)|0);
   $334 = +HEAPF32[$333>>2];
   $335 = +HEAPF32[$18>>2];
   $336 = $335 + $334;
   HEAPF32[$18>>2] = $336;
   label = 45;
  }
  if ((label|0) == 45) {
   label = 0;
   $337 = HEAP32[$11>>2]|0;
   $338 = HEAP32[$17>>2]|0;
   $339 = HEAP32[$12>>2]|0;
   $340 = Math_imul($338, $339)|0;
   $341 = (($340) + 9)|0;
   $342 = (($337) + ($341<<2)|0);
   $343 = +HEAPF32[$342>>2];
   $344 = +HEAPF32[$18>>2];
   $345 = $344 + $343;
   HEAPF32[$18>>2] = $345;
   label = 46;
  }
  if ((label|0) == 46) {
   label = 0;
   $346 = HEAP32[$11>>2]|0;
   $347 = HEAP32[$17>>2]|0;
   $348 = HEAP32[$12>>2]|0;
   $349 = Math_imul($347, $348)|0;
   $350 = (($349) + 8)|0;
   $351 = (($346) + ($350<<2)|0);
   $352 = +HEAPF32[$351>>2];
   $353 = +HEAPF32[$18>>2];
   $354 = $353 + $352;
   HEAPF32[$18>>2] = $354;
   label = 47;
  }
  if ((label|0) == 47) {
   label = 0;
   $355 = HEAP32[$11>>2]|0;
   $356 = HEAP32[$17>>2]|0;
   $357 = HEAP32[$12>>2]|0;
   $358 = Math_imul($356, $357)|0;
   $359 = (($358) + 7)|0;
   $360 = (($355) + ($359<<2)|0);
   $361 = +HEAPF32[$360>>2];
   $362 = +HEAPF32[$18>>2];
   $363 = $362 + $361;
   HEAPF32[$18>>2] = $363;
   label = 48;
  }
  if ((label|0) == 48) {
   label = 0;
   $364 = HEAP32[$11>>2]|0;
   $365 = HEAP32[$17>>2]|0;
   $366 = HEAP32[$12>>2]|0;
   $367 = Math_imul($365, $366)|0;
   $368 = (($367) + 6)|0;
   $369 = (($364) + ($368<<2)|0);
   $370 = +HEAPF32[$369>>2];
   $371 = +HEAPF32[$18>>2];
   $372 = $371 + $370;
   HEAPF32[$18>>2] = $372;
   label = 49;
  }
  if ((label|0) == 49) {
   label = 0;
   $373 = HEAP32[$11>>2]|0;
   $374 = HEAP32[$17>>2]|0;
   $375 = HEAP32[$12>>2]|0;
   $376 = Math_imul($374, $375)|0;
   $377 = (($376) + 5)|0;
   $378 = (($373) + ($377<<2)|0);
   $379 = +HEAPF32[$378>>2];
   $380 = +HEAPF32[$18>>2];
   $381 = $380 + $379;
   HEAPF32[$18>>2] = $381;
   label = 50;
  }
  if ((label|0) == 50) {
   label = 0;
   $382 = HEAP32[$11>>2]|0;
   $383 = HEAP32[$17>>2]|0;
   $384 = HEAP32[$12>>2]|0;
   $385 = Math_imul($383, $384)|0;
   $386 = (($385) + 4)|0;
   $387 = (($382) + ($386<<2)|0);
   $388 = +HEAPF32[$387>>2];
   $389 = +HEAPF32[$18>>2];
   $390 = $389 + $388;
   HEAPF32[$18>>2] = $390;
   label = 51;
  }
  if ((label|0) == 51) {
   label = 0;
   $391 = HEAP32[$11>>2]|0;
   $392 = HEAP32[$17>>2]|0;
   $393 = HEAP32[$12>>2]|0;
   $394 = Math_imul($392, $393)|0;
   $395 = (($394) + 3)|0;
   $396 = (($391) + ($395<<2)|0);
   $397 = +HEAPF32[$396>>2];
   $398 = +HEAPF32[$18>>2];
   $399 = $398 + $397;
   HEAPF32[$18>>2] = $399;
   label = 52;
  }
  if ((label|0) == 52) {
   label = 0;
   $400 = HEAP32[$11>>2]|0;
   $401 = HEAP32[$17>>2]|0;
   $402 = HEAP32[$12>>2]|0;
   $403 = Math_imul($401, $402)|0;
   $404 = (($403) + 2)|0;
   $405 = (($400) + ($404<<2)|0);
   $406 = +HEAPF32[$405>>2];
   $407 = +HEAPF32[$18>>2];
   $408 = $407 + $406;
   HEAPF32[$18>>2] = $408;
   label = 53;
  }
  if ((label|0) == 53) {
   label = 0;
   $409 = HEAP32[$11>>2]|0;
   $410 = HEAP32[$17>>2]|0;
   $411 = HEAP32[$12>>2]|0;
   $412 = Math_imul($410, $411)|0;
   $413 = (($412) + 1)|0;
   $414 = (($409) + ($413<<2)|0);
   $415 = +HEAPF32[$414>>2];
   $416 = +HEAPF32[$18>>2];
   $417 = $416 + $415;
   HEAPF32[$18>>2] = $417;
   label = 54;
  }
  if ((label|0) == 54) {
   label = 0;
   $418 = HEAP32[$11>>2]|0;
   $419 = HEAP32[$17>>2]|0;
   $420 = HEAP32[$12>>2]|0;
   $421 = Math_imul($419, $420)|0;
   $422 = (($421) + 0)|0;
   $423 = (($418) + ($422<<2)|0);
   $424 = +HEAPF32[$423>>2];
   $425 = +HEAPF32[$18>>2];
   $426 = $425 + $424;
   HEAPF32[$18>>2] = $426;
  }
  $427 = +HEAPF32[$18>>2];
  $428 = HEAP32[$12>>2]|0;
  $429 = (+($428>>>0));
  $430 = $427 / $429;
  $431 = HEAP32[$8>>2]|0;
  $432 = HEAP32[$17>>2]|0;
  $433 = (($432) + 0)|0;
  $434 = (($431) + ($433<<2)|0);
  HEAPF32[$434>>2] = $430;
  $435 = HEAP32[$17>>2]|0;
  $436 = (($435) + 1)|0;
  HEAP32[$17>>2] = $436;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_u8_to_s16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = (($12) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  HEAP32[$8>>2] = $16;
  $17 = HEAP32[$8>>2]|0;
  $18 = (($17) - 128)|0;
  HEAP32[$6>>2] = $18;
  $19 = HEAP32[$6>>2]|0;
  $20 = $19 << 8;
  HEAP32[$6>>2] = $20;
  $21 = HEAP32[$6>>2]|0;
  $22 = $21&65535;
  $23 = HEAP32[$3>>2]|0;
  $24 = HEAP32[$7>>2]|0;
  $25 = (($23) + ($24<<1)|0);
  HEAP16[$25>>1] = $22;
  $26 = HEAP32[$7>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$7>>2] = $27;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_u8_to_s24($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = (($12) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  HEAP32[$8>>2] = $16;
  $17 = HEAP32[$8>>2]|0;
  $18 = (($17) - 128)|0;
  HEAP32[$6>>2] = $18;
  $19 = HEAP32[$6>>2]|0;
  $20 = $19 << 16;
  HEAP32[$6>>2] = $20;
  $21 = HEAP32[$6>>2]|0;
  $22 = $21 & 255;
  $23 = $22&255;
  $24 = HEAP32[$3>>2]|0;
  $25 = HEAP32[$7>>2]|0;
  $26 = ($25*3)|0;
  $27 = (($26) + 0)|0;
  $28 = (($24) + ($27)|0);
  HEAP8[$28>>0] = $23;
  $29 = HEAP32[$6>>2]|0;
  $30 = $29 & 65280;
  $31 = $30 >> 8;
  $32 = $31&255;
  $33 = HEAP32[$3>>2]|0;
  $34 = HEAP32[$7>>2]|0;
  $35 = ($34*3)|0;
  $36 = (($35) + 1)|0;
  $37 = (($33) + ($36)|0);
  HEAP8[$37>>0] = $32;
  $38 = HEAP32[$6>>2]|0;
  $39 = $38 & 16711680;
  $40 = $39 >> 16;
  $41 = $40&255;
  $42 = HEAP32[$3>>2]|0;
  $43 = HEAP32[$7>>2]|0;
  $44 = ($43*3)|0;
  $45 = (($44) + 2)|0;
  $46 = (($42) + ($45)|0);
  HEAP8[$46>>0] = $41;
  $47 = HEAP32[$7>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$7>>2] = $48;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_u8_to_s32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = (($12) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  HEAP32[$8>>2] = $16;
  $17 = HEAP32[$8>>2]|0;
  $18 = (($17) - 128)|0;
  HEAP32[$6>>2] = $18;
  $19 = HEAP32[$6>>2]|0;
  $20 = $19 << 24;
  HEAP32[$6>>2] = $20;
  $21 = HEAP32[$6>>2]|0;
  $22 = HEAP32[$3>>2]|0;
  $23 = HEAP32[$7>>2]|0;
  $24 = (($22) + ($23<<2)|0);
  HEAP32[$24>>2] = $21;
  $25 = HEAP32[$7>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$7>>2] = $26;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_u8_to_f32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = (($12) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  HEAP32[$8>>2] = $16;
  $17 = HEAP32[$8>>2]|0;
  $18 = (+($17|0));
  $19 = $18 * 0.0078431377187371254;
  HEAPF32[$6>>2] = $19;
  $20 = +HEAPF32[$6>>2];
  $21 = $20 - 1.0;
  HEAPF32[$6>>2] = $21;
  $22 = +HEAPF32[$6>>2];
  $23 = HEAP32[$3>>2]|0;
  $24 = HEAP32[$7>>2]|0;
  $25 = (($23) + ($24<<2)|0);
  HEAPF32[$25>>2] = $22;
  $26 = HEAP32[$7>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$7>>2] = $27;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_s16_to_u8($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = (($12) + ($13<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  HEAP32[$8>>2] = $16;
  $17 = HEAP32[$8>>2]|0;
  $18 = $17 >> 8;
  HEAP32[$6>>2] = $18;
  $19 = HEAP32[$6>>2]|0;
  $20 = (($19) + 128)|0;
  HEAP32[$6>>2] = $20;
  $21 = HEAP32[$6>>2]|0;
  $22 = $21&255;
  $23 = HEAP32[$3>>2]|0;
  $24 = HEAP32[$7>>2]|0;
  $25 = (($23) + ($24)|0);
  HEAP8[$25>>0] = $22;
  $26 = HEAP32[$7>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$7>>2] = $27;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_s16_to_s24($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = (($12) + ($13<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  HEAP32[$8>>2] = $16;
  $17 = HEAP32[$8>>2]|0;
  $18 = $17 << 8;
  HEAP32[$6>>2] = $18;
  $19 = HEAP32[$6>>2]|0;
  $20 = $19 & 255;
  $21 = $20&255;
  $22 = HEAP32[$3>>2]|0;
  $23 = HEAP32[$7>>2]|0;
  $24 = ($23*3)|0;
  $25 = (($24) + 0)|0;
  $26 = (($22) + ($25)|0);
  HEAP8[$26>>0] = $21;
  $27 = HEAP32[$6>>2]|0;
  $28 = $27 & 65280;
  $29 = $28 >> 8;
  $30 = $29&255;
  $31 = HEAP32[$3>>2]|0;
  $32 = HEAP32[$7>>2]|0;
  $33 = ($32*3)|0;
  $34 = (($33) + 1)|0;
  $35 = (($31) + ($34)|0);
  HEAP8[$35>>0] = $30;
  $36 = HEAP32[$6>>2]|0;
  $37 = $36 & 16711680;
  $38 = $37 >> 16;
  $39 = $38&255;
  $40 = HEAP32[$3>>2]|0;
  $41 = HEAP32[$7>>2]|0;
  $42 = ($41*3)|0;
  $43 = (($42) + 2)|0;
  $44 = (($40) + ($43)|0);
  HEAP8[$44>>0] = $39;
  $45 = HEAP32[$7>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$7>>2] = $46;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_s16_to_s32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = (($12) + ($13<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  HEAP32[$8>>2] = $16;
  $17 = HEAP32[$8>>2]|0;
  $18 = $17 << 16;
  HEAP32[$6>>2] = $18;
  $19 = HEAP32[$6>>2]|0;
  $20 = HEAP32[$3>>2]|0;
  $21 = HEAP32[$7>>2]|0;
  $22 = (($20) + ($21<<2)|0);
  HEAP32[$22>>2] = $19;
  $23 = HEAP32[$7>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$7>>2] = $24;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_s16_to_f32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = (($12) + ($13<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  HEAP32[$8>>2] = $16;
  $17 = HEAP32[$8>>2]|0;
  $18 = (($17) + 32768)|0;
  $19 = (+($18|0));
  HEAPF32[$6>>2] = $19;
  $20 = +HEAPF32[$6>>2];
  $21 = $20 * 3.0518043786287308E-5;
  HEAPF32[$6>>2] = $21;
  $22 = +HEAPF32[$6>>2];
  $23 = $22 - 1.0;
  HEAPF32[$6>>2] = $23;
  $24 = +HEAPF32[$6>>2];
  $25 = HEAP32[$3>>2]|0;
  $26 = HEAP32[$7>>2]|0;
  $27 = (($25) + ($26<<2)|0);
  HEAPF32[$27>>2] = $24;
  $28 = HEAP32[$7>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$7>>2] = $29;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_s24_to_u8($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = ($13*3)|0;
  $15 = (($14) + 0)|0;
  $16 = (($12) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 << 8;
  $20 = HEAP32[$4>>2]|0;
  $21 = HEAP32[$7>>2]|0;
  $22 = ($21*3)|0;
  $23 = (($22) + 1)|0;
  $24 = (($20) + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 16;
  $28 = $19 | $27;
  $29 = HEAP32[$4>>2]|0;
  $30 = HEAP32[$7>>2]|0;
  $31 = ($30*3)|0;
  $32 = (($31) + 2)|0;
  $33 = (($29) + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $35 << 24;
  $37 = $28 | $36;
  $38 = $37 >> 8;
  HEAP32[$8>>2] = $38;
  $39 = HEAP32[$8>>2]|0;
  $40 = $39 >> 16;
  HEAP32[$6>>2] = $40;
  $41 = HEAP32[$6>>2]|0;
  $42 = (($41) + 128)|0;
  HEAP32[$6>>2] = $42;
  $43 = HEAP32[$6>>2]|0;
  $44 = $43&255;
  $45 = HEAP32[$3>>2]|0;
  $46 = HEAP32[$7>>2]|0;
  $47 = (($45) + ($46)|0);
  HEAP8[$47>>0] = $44;
  $48 = HEAP32[$7>>2]|0;
  $49 = (($48) + 1)|0;
  HEAP32[$7>>2] = $49;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_s24_to_s16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = ($13*3)|0;
  $15 = (($14) + 0)|0;
  $16 = (($12) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 << 8;
  $20 = HEAP32[$4>>2]|0;
  $21 = HEAP32[$7>>2]|0;
  $22 = ($21*3)|0;
  $23 = (($22) + 1)|0;
  $24 = (($20) + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 16;
  $28 = $19 | $27;
  $29 = HEAP32[$4>>2]|0;
  $30 = HEAP32[$7>>2]|0;
  $31 = ($30*3)|0;
  $32 = (($31) + 2)|0;
  $33 = (($29) + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $35 << 24;
  $37 = $28 | $36;
  $38 = $37 >> 8;
  HEAP32[$8>>2] = $38;
  $39 = HEAP32[$8>>2]|0;
  $40 = $39 >> 8;
  HEAP32[$6>>2] = $40;
  $41 = HEAP32[$6>>2]|0;
  $42 = $41&65535;
  $43 = HEAP32[$3>>2]|0;
  $44 = HEAP32[$7>>2]|0;
  $45 = (($43) + ($44<<1)|0);
  HEAP16[$45>>1] = $42;
  $46 = HEAP32[$7>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$7>>2] = $47;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_s24_to_s32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = ($13*3)|0;
  $15 = (($14) + 0)|0;
  $16 = (($12) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 << 8;
  $20 = HEAP32[$4>>2]|0;
  $21 = HEAP32[$7>>2]|0;
  $22 = ($21*3)|0;
  $23 = (($22) + 1)|0;
  $24 = (($20) + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 16;
  $28 = $19 | $27;
  $29 = HEAP32[$4>>2]|0;
  $30 = HEAP32[$7>>2]|0;
  $31 = ($30*3)|0;
  $32 = (($31) + 2)|0;
  $33 = (($29) + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $35 << 24;
  $37 = $28 | $36;
  $38 = $37 >> 8;
  HEAP32[$8>>2] = $38;
  $39 = HEAP32[$8>>2]|0;
  $40 = $39 << 8;
  HEAP32[$6>>2] = $40;
  $41 = HEAP32[$6>>2]|0;
  $42 = HEAP32[$3>>2]|0;
  $43 = HEAP32[$7>>2]|0;
  $44 = (($42) + ($43<<2)|0);
  HEAP32[$44>>2] = $41;
  $45 = HEAP32[$7>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$7>>2] = $46;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_s24_to_f32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = ($13*3)|0;
  $15 = (($14) + 0)|0;
  $16 = (($12) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 << 8;
  $20 = HEAP32[$4>>2]|0;
  $21 = HEAP32[$7>>2]|0;
  $22 = ($21*3)|0;
  $23 = (($22) + 1)|0;
  $24 = (($20) + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 16;
  $28 = $19 | $27;
  $29 = HEAP32[$4>>2]|0;
  $30 = HEAP32[$7>>2]|0;
  $31 = ($30*3)|0;
  $32 = (($31) + 2)|0;
  $33 = (($29) + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $35 << 24;
  $37 = $28 | $36;
  $38 = $37 >> 8;
  HEAP32[$8>>2] = $38;
  $39 = HEAP32[$8>>2]|0;
  $40 = (($39) + 8388608)|0;
  $41 = (+($40|0));
  HEAPF32[$6>>2] = $41;
  $42 = +HEAPF32[$6>>2];
  $43 = $42 * 1.1920930376163597E-7;
  HEAPF32[$6>>2] = $43;
  $44 = +HEAPF32[$6>>2];
  $45 = $44 - 1.0;
  HEAPF32[$6>>2] = $45;
  $46 = +HEAPF32[$6>>2];
  $47 = HEAP32[$3>>2]|0;
  $48 = HEAP32[$7>>2]|0;
  $49 = (($47) + ($48<<2)|0);
  HEAPF32[$49>>2] = $46;
  $50 = HEAP32[$7>>2]|0;
  $51 = (($50) + 1)|0;
  HEAP32[$7>>2] = $51;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_s32_to_u8($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$8>>2] = $15;
  $16 = HEAP32[$8>>2]|0;
  $17 = $16 >> 24;
  HEAP32[$6>>2] = $17;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 128)|0;
  HEAP32[$6>>2] = $19;
  $20 = HEAP32[$6>>2]|0;
  $21 = $20&255;
  $22 = HEAP32[$3>>2]|0;
  $23 = HEAP32[$7>>2]|0;
  $24 = (($22) + ($23)|0);
  HEAP8[$24>>0] = $21;
  $25 = HEAP32[$7>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$7>>2] = $26;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_s32_to_s16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$8>>2] = $15;
  $16 = HEAP32[$8>>2]|0;
  $17 = $16 >> 16;
  HEAP32[$6>>2] = $17;
  $18 = HEAP32[$6>>2]|0;
  $19 = $18&65535;
  $20 = HEAP32[$3>>2]|0;
  $21 = HEAP32[$7>>2]|0;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = $19;
  $23 = HEAP32[$7>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$7>>2] = $24;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_s32_to_s24($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$7>>2]|0;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$8>>2] = $15;
  $16 = HEAP32[$8>>2]|0;
  $17 = $16 >> 8;
  HEAP32[$6>>2] = $17;
  $18 = HEAP32[$6>>2]|0;
  $19 = $18 & 255;
  $20 = $19&255;
  $21 = HEAP32[$3>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($22*3)|0;
  $24 = (($23) + 0)|0;
  $25 = (($21) + ($24)|0);
  HEAP8[$25>>0] = $20;
  $26 = HEAP32[$6>>2]|0;
  $27 = $26 & 65280;
  $28 = $27 >> 8;
  $29 = $28&255;
  $30 = HEAP32[$3>>2]|0;
  $31 = HEAP32[$7>>2]|0;
  $32 = ($31*3)|0;
  $33 = (($32) + 1)|0;
  $34 = (($30) + ($33)|0);
  HEAP8[$34>>0] = $29;
  $35 = HEAP32[$6>>2]|0;
  $36 = $35 & 16711680;
  $37 = $36 >> 16;
  $38 = $37&255;
  $39 = HEAP32[$3>>2]|0;
  $40 = HEAP32[$7>>2]|0;
  $41 = ($40*3)|0;
  $42 = (($41) + 2)|0;
  $43 = (($39) + ($42)|0);
  HEAP8[$43>>0] = $38;
  $44 = HEAP32[$7>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[$7>>2] = $45;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_s32_to_f32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $10 = HEAP32[$7>>2]|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = HEAP32[$7>>2]|0;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$8>>2] = $16;
  $17 = HEAP32[$8>>2]|0;
  $18 = ($17|0)<(0);
  $19 = $18 << 31 >> 31;
  $20 = (_i64Add(($17|0),($19|0),-2147483648,0)|0);
  $21 = tempRet0;
  $22 = (+($20>>>0)) + (4294967296.0*(+($21|0)));
  HEAPF64[$9>>3] = $22;
  $23 = +HEAPF64[$9>>3];
  $24 = $23 * 4.6566128730773926E-10;
  HEAPF64[$9>>3] = $24;
  $25 = +HEAPF64[$9>>3];
  $26 = $25 - 1.0;
  $27 = $26;
  HEAPF32[$6>>2] = $27;
  $28 = +HEAPF32[$6>>2];
  $29 = HEAP32[$3>>2]|0;
  $30 = HEAP32[$7>>2]|0;
  $31 = (($29) + ($30<<2)|0);
  HEAPF32[$31>>2] = $28;
  $32 = HEAP32[$7>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$7>>2] = $33;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_f32_to_u8($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $10 = HEAP32[$7>>2]|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = HEAP32[$7>>2]|0;
  $15 = (($13) + ($14<<2)|0);
  $16 = +HEAPF32[$15>>2];
  HEAPF32[$8>>2] = $16;
  $17 = +HEAPF32[$8>>2];
  $18 = $17 < -1.0;
  if ($18) {
   $23 = -1.0;
  } else {
   $19 = +HEAPF32[$8>>2];
   $20 = $19 > 1.0;
   $21 = +HEAPF32[$8>>2];
   $22 = $20 ? 1.0 : $21;
   $23 = $22;
  }
  HEAPF32[$9>>2] = $23;
  $24 = +HEAPF32[$9>>2];
  $25 = $24 + 1.0;
  HEAPF32[$9>>2] = $25;
  $26 = +HEAPF32[$9>>2];
  $27 = $26 * 127.5;
  $28 = (~~(($27)));
  HEAP32[$6>>2] = $28;
  $29 = HEAP32[$6>>2]|0;
  $30 = $29&255;
  $31 = HEAP32[$3>>2]|0;
  $32 = HEAP32[$7>>2]|0;
  $33 = (($31) + ($32)|0);
  HEAP8[$33>>0] = $30;
  $34 = HEAP32[$7>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$7>>2] = $35;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_f32_to_s16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $10 = HEAP32[$7>>2]|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = HEAP32[$7>>2]|0;
  $15 = (($13) + ($14<<2)|0);
  $16 = +HEAPF32[$15>>2];
  HEAPF32[$8>>2] = $16;
  $17 = +HEAPF32[$8>>2];
  $18 = $17 < -1.0;
  if ($18) {
   $23 = -1.0;
  } else {
   $19 = +HEAPF32[$8>>2];
   $20 = $19 > 1.0;
   $21 = +HEAPF32[$8>>2];
   $22 = $20 ? 1.0 : $21;
   $23 = $22;
  }
  HEAPF32[$9>>2] = $23;
  $24 = +HEAPF32[$9>>2];
  $25 = $24 + 1.0;
  HEAPF32[$9>>2] = $25;
  $26 = +HEAPF32[$9>>2];
  $27 = $26 * 32767.5;
  $28 = (~~(($27)));
  HEAP32[$6>>2] = $28;
  $29 = HEAP32[$6>>2]|0;
  $30 = (($29) - 32768)|0;
  HEAP32[$6>>2] = $30;
  $31 = HEAP32[$6>>2]|0;
  $32 = $31&65535;
  $33 = HEAP32[$3>>2]|0;
  $34 = HEAP32[$7>>2]|0;
  $35 = (($33) + ($34<<1)|0);
  HEAP16[$35>>1] = $32;
  $36 = HEAP32[$7>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[$7>>2] = $37;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_f32_to_s24($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $10 = HEAP32[$7>>2]|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = HEAP32[$7>>2]|0;
  $15 = (($13) + ($14<<2)|0);
  $16 = +HEAPF32[$15>>2];
  HEAPF32[$8>>2] = $16;
  $17 = +HEAPF32[$8>>2];
  $18 = $17 < -1.0;
  if ($18) {
   $23 = -1.0;
  } else {
   $19 = +HEAPF32[$8>>2];
   $20 = $19 > 1.0;
   $21 = +HEAPF32[$8>>2];
   $22 = $20 ? 1.0 : $21;
   $23 = $22;
  }
  HEAPF32[$9>>2] = $23;
  $24 = +HEAPF32[$9>>2];
  $25 = $24 + 1.0;
  HEAPF32[$9>>2] = $25;
  $26 = +HEAPF32[$9>>2];
  $27 = $26 * 8388607.5;
  $28 = (~~(($27)));
  HEAP32[$6>>2] = $28;
  $29 = HEAP32[$6>>2]|0;
  $30 = (($29) - 8388608)|0;
  HEAP32[$6>>2] = $30;
  $31 = HEAP32[$6>>2]|0;
  $32 = $31 & 255;
  $33 = $32&255;
  $34 = HEAP32[$3>>2]|0;
  $35 = HEAP32[$7>>2]|0;
  $36 = ($35*3)|0;
  $37 = (($36) + 0)|0;
  $38 = (($34) + ($37)|0);
  HEAP8[$38>>0] = $33;
  $39 = HEAP32[$6>>2]|0;
  $40 = $39 & 65280;
  $41 = $40 >> 8;
  $42 = $41&255;
  $43 = HEAP32[$3>>2]|0;
  $44 = HEAP32[$7>>2]|0;
  $45 = ($44*3)|0;
  $46 = (($45) + 1)|0;
  $47 = (($43) + ($46)|0);
  HEAP8[$47>>0] = $42;
  $48 = HEAP32[$6>>2]|0;
  $49 = $48 & 16711680;
  $50 = $49 >> 16;
  $51 = $50&255;
  $52 = HEAP32[$3>>2]|0;
  $53 = HEAP32[$7>>2]|0;
  $54 = ($53*3)|0;
  $55 = (($54) + 2)|0;
  $56 = (($52) + ($55)|0);
  HEAP8[$56>>0] = $51;
  $57 = HEAP32[$7>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$7>>2] = $58;
 }
 STACKTOP = sp;return;
}
function _mal_pcm_f32_to_s32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 while(1) {
  $11 = HEAP32[$7>>2]|0;
  $12 = HEAP32[$5>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = HEAP32[$4>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = (($14) + ($15<<2)|0);
  $17 = +HEAPF32[$16>>2];
  HEAPF32[$8>>2] = $17;
  $18 = +HEAPF32[$8>>2];
  $19 = $18 < -1.0;
  if ($19) {
   $24 = -1.0;
  } else {
   $20 = +HEAPF32[$8>>2];
   $21 = $20 > 1.0;
   $22 = +HEAPF32[$8>>2];
   $23 = $21 ? 1.0 : $22;
   $24 = $23;
  }
  HEAPF32[$9>>2] = $24;
  $25 = +HEAPF32[$9>>2];
  $26 = $25 + 1.0;
  HEAPF32[$9>>2] = $26;
  $27 = +HEAPF32[$9>>2];
  $28 = $27;
  $29 = $28 * 2147483647.5;
  $30 = (~~$29)>>>0;
  $31 = +Math_abs($29) >= 1.0 ? $29 > 0.0 ? (~~+Math_min(+Math_floor($29 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($29 - +(~~$29 >>> 0)) / 4294967296.0) >>> 0 : 0;
  $32 = $10;
  $33 = $32;
  HEAP32[$33>>2] = $30;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = $31;
  $36 = $10;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($36) + 4)|0;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (_i64Subtract(($38|0),($41|0),-2147483648,0)|0);
  $43 = tempRet0;
  HEAP32[$6>>2] = $42;
  $44 = HEAP32[$6>>2]|0;
  $45 = HEAP32[$3>>2]|0;
  $46 = HEAP32[$7>>2]|0;
  $47 = (($45) + ($46<<2)|0);
  HEAP32[$47>>2] = $44;
  $48 = HEAP32[$7>>2]|0;
  $49 = (($48) + 1)|0;
  HEAP32[$7>>2] = $49;
 }
 STACKTOP = sp;return;
}
function _mal_src_read_frames_passthrough($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 36912|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(36912|0);
 $4 = sp + 32|0;
 $5 = sp + 28|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 40|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $14 = HEAP32[$5>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((12785|0),(10766|0),10203,(13549|0));
  // unreachable;
 }
 $16 = HEAP32[$6>>2]|0;
 $17 = ($16>>>0)>(0);
 if (!($17)) {
  ___assert_fail((13214|0),(10766|0),10204,(13549|0));
  // unreachable;
 }
 $18 = HEAP32[$7>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((13252|0),(10766|0),10205,(13549|0));
  // unreachable;
 }
 $20 = HEAP32[$5>>2]|0;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$5>>2]|0;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22|0)==($25|0);
 if ($26) {
  $27 = HEAP32[$5>>2]|0;
  $28 = ((($27)) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$5>>2]|0;
  $31 = HEAP32[$6>>2]|0;
  $32 = HEAP32[$7>>2]|0;
  $33 = HEAP32[$5>>2]|0;
  $34 = ((($33)) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (FUNCTION_TABLE_iiiii[$29 & 7]($30,$31,$32,$35)|0);
  HEAP32[$4>>2] = $36;
  $95 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($95|0);
 }
 HEAP32[$9>>2] = 0;
 while(1) {
  $37 = HEAP32[$6>>2]|0;
  $38 = ($37>>>0)>(0);
  if (!($38)) {
   break;
  }
  $39 = HEAP32[$5>>2]|0;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_mal_get_sample_size_in_bytes($41)|0);
  $43 = (36864 / ($42>>>0))&-1;
  $44 = HEAP32[$5>>2]|0;
  $45 = ((($44)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($43>>>0) / ($46>>>0))&-1;
  HEAP32[$11>>2] = $47;
  $48 = HEAP32[$11>>2]|0;
  HEAP32[$12>>2] = $48;
  $49 = HEAP32[$12>>2]|0;
  $50 = HEAP32[$6>>2]|0;
  $51 = ($49>>>0)>($50>>>0);
  if ($51) {
   $52 = HEAP32[$6>>2]|0;
   HEAP32[$12>>2] = $52;
  }
  $53 = HEAP32[$5>>2]|0;
  $54 = ((($53)) + 28|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$5>>2]|0;
  $57 = HEAP32[$12>>2]|0;
  $58 = HEAP32[$5>>2]|0;
  $59 = ((($58)) + 32|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (FUNCTION_TABLE_iiiii[$55 & 7]($56,$57,$10,$60)|0);
  HEAP32[$13>>2] = $61;
  $62 = HEAP32[$13>>2]|0;
  $63 = ($62|0)==(0);
  if ($63) {
   break;
  }
  $64 = HEAP32[$7>>2]|0;
  $65 = HEAP32[$5>>2]|0;
  $66 = ((($65)) + 12|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = HEAP32[$5>>2]|0;
  $69 = ((($68)) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = HEAP32[$13>>2]|0;
  $72 = HEAP32[$5>>2]|0;
  $73 = ((($72)) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = Math_imul($71, $74)|0;
  _mal_pcm_convert($64,$67,$10,$70,$75);
  $76 = HEAP32[$7>>2]|0;
  $77 = HEAP32[$13>>2]|0;
  $78 = HEAP32[$5>>2]|0;
  $79 = ((($78)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = Math_imul($77, $80)|0;
  $82 = HEAP32[$5>>2]|0;
  $83 = ((($82)) + 12|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (_mal_get_sample_size_in_bytes($84)|0);
  $86 = Math_imul($81, $85)|0;
  $87 = (($76) + ($86)|0);
  HEAP32[$7>>2] = $87;
  $88 = HEAP32[$13>>2]|0;
  $89 = HEAP32[$6>>2]|0;
  $90 = (($89) - ($88))|0;
  HEAP32[$6>>2] = $90;
  $91 = HEAP32[$13>>2]|0;
  $92 = HEAP32[$9>>2]|0;
  $93 = (($92) + ($91))|0;
  HEAP32[$9>>2] = $93;
 }
 $94 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $94;
 $95 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($95|0);
}
function _mal_src_read_frames_linear($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$old = 0, $$old1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $4 = sp + 136|0;
 $5 = sp + 132|0;
 $6 = sp + 128|0;
 $7 = sp + 124|0;
 $8 = sp + 120|0;
 $9 = sp + 116|0;
 $10 = sp + 112|0;
 $11 = sp + 108|0;
 $12 = sp + 104|0;
 $13 = sp + 100|0;
 $14 = sp + 96|0;
 $15 = sp + 24|0;
 $16 = sp + 16|0;
 $17 = sp + 12|0;
 $18 = sp + 8|0;
 $19 = sp + 4|0;
 $20 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $21 = HEAP32[$5>>2]|0;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  ___assert_fail((12785|0),(10766|0),10241,(13434|0));
  // unreachable;
 }
 $23 = HEAP32[$6>>2]|0;
 $24 = ($23>>>0)>(0);
 if (!($24)) {
  ___assert_fail((13214|0),(10766|0),10242,(13434|0));
  // unreachable;
 }
 $25 = HEAP32[$7>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((13252|0),(10766|0),10243,(13434|0));
  // unreachable;
 }
 $27 = HEAP32[$5>>2]|0;
 $28 = ((($27)) + 37936|0);
 $29 = ((($28)) + 4|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30 & 1;
 $32 = $31&255;
 $33 = ($32|0)!=(0);
 do {
  if (!($33)) {
   $34 = HEAP32[$5>>2]|0;
   $35 = ((($34)) + 1060|0);
   $36 = HEAP32[$5>>2]|0;
   $37 = ((($36)) + 36|0);
   $38 = (_mal_src_cache_read_frames($35,1,$37)|0);
   HEAP32[$9>>2] = $38;
   $39 = HEAP32[$9>>2]|0;
   $40 = ($39|0)==(0);
   if (!($40)) {
    $41 = HEAP32[$5>>2]|0;
    $42 = ((($41)) + 37936|0);
    $43 = ((($42)) + 4|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44 & -2;
    $46 = $45 | 1;
    HEAP8[$43>>0] = $46;
    break;
   }
   HEAP32[$4>>2] = 0;
   $211 = HEAP32[$4>>2]|0;
   STACKTOP = sp;return ($211|0);
  }
 } while(0);
 $47 = HEAP32[$5>>2]|0;
 $48 = ((($47)) + 37936|0);
 $49 = ((($48)) + 4|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = ($50&255) >>> 1;
 $52 = $51 & 1;
 $53 = $52&255;
 $54 = ($53|0)!=(0);
 do {
  if (!($54)) {
   $55 = HEAP32[$5>>2]|0;
   $56 = ((($55)) + 1060|0);
   $57 = HEAP32[$5>>2]|0;
   $58 = ((($57)) + 36|0);
   $59 = HEAP32[$5>>2]|0;
   $60 = ((($59)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($58) + ($61<<2)|0);
   $63 = (_mal_src_cache_read_frames($56,1,$62)|0);
   HEAP32[$10>>2] = $63;
   $64 = HEAP32[$10>>2]|0;
   $65 = ($64|0)==(0);
   if (!($65)) {
    $66 = HEAP32[$5>>2]|0;
    $67 = ((($66)) + 37936|0);
    $68 = ((($67)) + 4|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 & -3;
    $71 = $70 | 2;
    HEAP8[$68>>0] = $71;
    break;
   }
   HEAP32[$4>>2] = 0;
   $211 = HEAP32[$4>>2]|0;
   STACKTOP = sp;return ($211|0);
  }
 } while(0);
 $72 = HEAP32[$5>>2]|0;
 $73 = HEAP32[$72>>2]|0;
 $74 = (+($73>>>0));
 $75 = HEAP32[$5>>2]|0;
 $76 = ((($75)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (+($77>>>0));
 $79 = $74 / $78;
 HEAPF32[$11>>2] = $79;
 HEAP32[$12>>2] = 0;
 L24: while(1) {
  $$old = HEAP32[$6>>2]|0;
  $$old1 = ($$old>>>0)>(0);
  if (!($$old1)) {
   break;
  }
  while(1) {
   $80 = HEAP32[$5>>2]|0;
   $81 = ((($80)) + 36|0);
   HEAP32[$13>>2] = $81;
   $82 = HEAP32[$5>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$5>>2]|0;
   $85 = ((($84)) + 16|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($83) + ($86<<2)|0);
   HEAP32[$14>>2] = $87;
   $88 = HEAP32[$13>>2]|0;
   $89 = HEAP32[$14>>2]|0;
   $90 = HEAP32[$5>>2]|0;
   $91 = ((($90)) + 37936|0);
   $92 = +HEAPF32[$91>>2];
   $93 = HEAP32[$5>>2]|0;
   $94 = ((($93)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   _mal_blend_f32($15,$88,$89,$92,$95);
   $96 = +HEAPF32[$11>>2];
   $97 = HEAP32[$5>>2]|0;
   $98 = ((($97)) + 37936|0);
   $99 = +HEAPF32[$98>>2];
   $100 = $99 + $96;
   HEAPF32[$98>>2] = $100;
   $101 = HEAP32[$5>>2]|0;
   $102 = ((($101)) + 37936|0);
   $103 = +HEAPF32[$102>>2];
   $104 = (~~(($103))>>>0);
   HEAP32[$16>>2] = $104;
   $105 = HEAP32[$5>>2]|0;
   $106 = ((($105)) + 37936|0);
   $107 = +HEAPF32[$106>>2];
   $108 = HEAP32[$16>>2]|0;
   $109 = (+($108>>>0));
   $110 = $107 - $109;
   $111 = HEAP32[$5>>2]|0;
   $112 = ((($111)) + 37936|0);
   HEAPF32[$112>>2] = $110;
   HEAP32[$17>>2] = 0;
   while(1) {
    $113 = HEAP32[$17>>2]|0;
    $114 = HEAP32[$16>>2]|0;
    $115 = ($113>>>0)<($114>>>0);
    if (!($115)) {
     break;
    }
    HEAP32[$18>>2] = 0;
    while(1) {
     $116 = HEAP32[$18>>2]|0;
     $117 = HEAP32[$5>>2]|0;
     $118 = ((($117)) + 16|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = ($116>>>0)<($119>>>0);
     if (!($120)) {
      break;
     }
     $121 = HEAP32[$14>>2]|0;
     $122 = HEAP32[$18>>2]|0;
     $123 = (($121) + ($122<<2)|0);
     $124 = +HEAPF32[$123>>2];
     $125 = HEAP32[$13>>2]|0;
     $126 = HEAP32[$18>>2]|0;
     $127 = (($125) + ($126<<2)|0);
     HEAPF32[$127>>2] = $124;
     $128 = HEAP32[$18>>2]|0;
     $129 = (($128) + 1)|0;
     HEAP32[$18>>2] = $129;
    }
    $130 = HEAP32[$5>>2]|0;
    $131 = ((($130)) + 1060|0);
    $132 = HEAP32[$14>>2]|0;
    $133 = (_mal_src_cache_read_frames($131,1,$132)|0);
    HEAP32[$19>>2] = $133;
    $134 = HEAP32[$19>>2]|0;
    $135 = ($134|0)==(0);
    if ($135) {
     label = 23;
     break;
    }
    $166 = HEAP32[$17>>2]|0;
    $167 = (($166) + 1)|0;
    HEAP32[$17>>2] = $167;
   }
   do {
    if ((label|0) == 23) {
     label = 0;
     HEAP32[$20>>2] = 0;
     while(1) {
      $136 = HEAP32[$20>>2]|0;
      $137 = HEAP32[$5>>2]|0;
      $138 = ((($137)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($136>>>0)<($139>>>0);
      if (!($140)) {
       break;
      }
      $141 = HEAP32[$14>>2]|0;
      $142 = HEAP32[$20>>2]|0;
      $143 = (($141) + ($142<<2)|0);
      HEAPF32[$143>>2] = 0.0;
      $144 = HEAP32[$20>>2]|0;
      $145 = (($144) + 1)|0;
      HEAP32[$20>>2] = $145;
     }
     $146 = HEAP32[$5>>2]|0;
     $147 = ((($146)) + 37936|0);
     $148 = ((($147)) + 4|0);
     $149 = HEAP8[$148>>0]|0;
     $150 = ($149&255) >>> 1;
     $151 = $150 & 1;
     $152 = $151&255;
     $153 = ($152|0)!=(0);
     if ($153) {
      $154 = HEAP32[$5>>2]|0;
      $155 = ((($154)) + 37936|0);
      $156 = ((($155)) + 4|0);
      $157 = HEAP8[$156>>0]|0;
      $158 = $157 & -3;
      HEAP8[$156>>0] = $158;
      break;
     }
     $159 = HEAP32[$8>>2]|0;
     $160 = ($159|0)!=(0);
     if ($160) {
      $161 = HEAP32[$5>>2]|0;
      $162 = ((($161)) + 37936|0);
      $163 = ((($162)) + 4|0);
      $164 = HEAP8[$163>>0]|0;
      $165 = $164 & -2;
      HEAP8[$163>>0] = $165;
     }
    }
   } while(0);
   $168 = HEAP32[$7>>2]|0;
   $169 = HEAP32[$5>>2]|0;
   $170 = ((($169)) + 12|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = HEAP32[$5>>2]|0;
   $173 = ((($172)) + 16|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $174;
   _mal_pcm_convert($168,$171,$15,5,$175);
   $176 = HEAP32[$7>>2]|0;
   $177 = HEAP32[$5>>2]|0;
   $178 = ((($177)) + 16|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $179;
   $181 = HEAP32[$5>>2]|0;
   $182 = ((($181)) + 12|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = (_mal_get_sample_size_in_bytes($183)|0);
   $185 = Math_imul($180, $184)|0;
   $186 = (($176) + ($185)|0);
   HEAP32[$7>>2] = $186;
   $187 = HEAP32[$6>>2]|0;
   $188 = (($187) - 1)|0;
   HEAP32[$6>>2] = $188;
   $189 = HEAP32[$12>>2]|0;
   $190 = (($189) + 1)|0;
   HEAP32[$12>>2] = $190;
   $191 = HEAP32[$5>>2]|0;
   $192 = ((($191)) + 37936|0);
   $193 = ((($192)) + 4|0);
   $194 = HEAP8[$193>>0]|0;
   $195 = ($194&255) >>> 1;
   $196 = $195 & 1;
   $197 = $196&255;
   $198 = ($197|0)!=(0);
   if ($198) {
    continue L24;
   }
   $199 = HEAP32[$8>>2]|0;
   $200 = ($199|0)!=(0);
   if (!($200)) {
    break L24;
   }
   $201 = HEAP32[$5>>2]|0;
   $202 = ((($201)) + 37936|0);
   $203 = ((($202)) + 4|0);
   $204 = HEAP8[$203>>0]|0;
   $205 = $204 & 1;
   $206 = $205&255;
   $207 = ($206|0)!=(0);
   $208 = HEAP32[$6>>2]|0;
   $209 = ($208>>>0)>(0);
   $or$cond = $207 & $209;
   if (!($or$cond)) {
    break L24;
   }
  }
 }
 $210 = HEAP32[$12>>2]|0;
 HEAP32[$4>>2] = $210;
 $211 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($211|0);
}
function _mal_src_cache_read_frames($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$old = 0, $$old1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 36912|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(36912|0);
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp + 40|0;
 $12 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $13 = HEAP32[$3>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((12823|0),(10766|0),10074,(13461|0));
  // unreachable;
 }
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((13487|0),(10766|0),10075,(13461|0));
  // unreachable;
 }
 $18 = HEAP32[$3>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  ___assert_fail((13514|0),(10766|0),10076,(13461|0));
  // unreachable;
 }
 $23 = HEAP32[$4>>2]|0;
 $24 = ($23>>>0)>(0);
 if (!($24)) {
  ___assert_fail((13214|0),(10766|0),10077,(13461|0));
  // unreachable;
 }
 $25 = HEAP32[$5>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((13252|0),(10766|0),10078,(13461|0));
  // unreachable;
 }
 $27 = HEAP32[$3>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$6>>2] = $30;
 HEAP32[$7>>2] = 0;
 $$old = HEAP32[$4>>2]|0;
 $$old1 = ($$old>>>0)>(0);
 if (!($$old1)) {
  $181 = HEAP32[$7>>2]|0;
  STACKTOP = sp;return ($181|0);
 }
 while(1) {
  $31 = HEAP32[$3>>2]|0;
  $32 = ((($31)) + 36868|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$3>>2]|0;
  $35 = ((($34)) + 36872|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($33) - ($36))|0;
  HEAP32[$8>>2] = $37;
  $38 = HEAP32[$4>>2]|0;
  HEAP32[$9>>2] = $38;
  $39 = HEAP32[$9>>2]|0;
  $40 = HEAP32[$8>>2]|0;
  $41 = ($39>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$8>>2]|0;
   HEAP32[$9>>2] = $42;
  }
  $43 = HEAP32[$5>>2]|0;
  $44 = HEAP32[$3>>2]|0;
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$3>>2]|0;
  $47 = ((($46)) + 36872|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$6>>2]|0;
  $50 = Math_imul($48, $49)|0;
  $51 = (($45) + ($50<<2)|0);
  $52 = HEAP32[$9>>2]|0;
  $53 = HEAP32[$6>>2]|0;
  $54 = Math_imul($52, $53)|0;
  $55 = $54<<2;
  _memcpy(($43|0),($51|0),($55|0))|0;
  $56 = HEAP32[$9>>2]|0;
  $57 = HEAP32[$3>>2]|0;
  $58 = ((($57)) + 36872|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($56))|0;
  HEAP32[$58>>2] = $60;
  $61 = HEAP32[$9>>2]|0;
  $62 = HEAP32[$7>>2]|0;
  $63 = (($62) + ($61))|0;
  HEAP32[$7>>2] = $63;
  $64 = HEAP32[$9>>2]|0;
  $65 = HEAP32[$4>>2]|0;
  $66 = (($65) - ($64))|0;
  HEAP32[$4>>2] = $66;
  $67 = HEAP32[$4>>2]|0;
  $68 = ($67|0)==(0);
  if ($68) {
   label = 28;
   break;
  }
  $69 = HEAP32[$4>>2]|0;
  $70 = ($69>>>0)>(0);
  if (!($70)) {
   label = 16;
   break;
  }
  $71 = HEAP32[$9>>2]|0;
  $72 = HEAP32[$6>>2]|0;
  $73 = Math_imul($71, $72)|0;
  $74 = HEAP32[$5>>2]|0;
  $75 = (($74) + ($73<<2)|0);
  HEAP32[$5>>2] = $75;
  $76 = HEAP32[$3>>2]|0;
  $77 = ((($76)) + 36872|0);
  HEAP32[$77>>2] = 0;
  $78 = HEAP32[$3>>2]|0;
  $79 = ((($78)) + 36868|0);
  HEAP32[$79>>2] = 0;
  $80 = HEAP32[$3>>2]|0;
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($81)) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==(5);
  $85 = HEAP32[$3>>2]|0;
  $86 = HEAP32[$85>>2]|0;
  if ($84) {
   $87 = ((($86)) + 16|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (9216 / ($88>>>0))&-1;
   HEAP32[$10>>2] = $89;
   $90 = HEAP32[$10>>2]|0;
   $91 = HEAP32[$3>>2]|0;
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($92)) + 24|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($90>>>0)>($94>>>0);
   if ($95) {
    $96 = HEAP32[$3>>2]|0;
    $97 = HEAP32[$96>>2]|0;
    $98 = ((($97)) + 24|0);
    $99 = HEAP32[$98>>2]|0;
    HEAP32[$10>>2] = $99;
   }
   $100 = HEAP32[$3>>2]|0;
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($101)) + 28|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = HEAP32[$3>>2]|0;
   $105 = HEAP32[$104>>2]|0;
   $106 = HEAP32[$10>>2]|0;
   $107 = HEAP32[$3>>2]|0;
   $108 = ((($107)) + 4|0);
   $109 = HEAP32[$3>>2]|0;
   $110 = HEAP32[$109>>2]|0;
   $111 = ((($110)) + 32|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (FUNCTION_TABLE_iiiii[$103 & 7]($105,$106,$108,$112)|0);
   $114 = HEAP32[$3>>2]|0;
   $115 = ((($114)) + 36868|0);
   HEAP32[$115>>2] = $113;
  } else {
   $116 = ((($86)) + 8|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (_mal_get_sample_size_in_bytes($117)|0);
   $119 = (36864 / ($118>>>0))&-1;
   $120 = HEAP32[$6>>2]|0;
   $121 = (($119>>>0) / ($120>>>0))&-1;
   $122 = (_mal_get_sample_size_in_bytes(5)|0);
   $123 = (36864 / ($122>>>0))&-1;
   $124 = HEAP32[$6>>2]|0;
   $125 = (($123>>>0) / ($124>>>0))&-1;
   $126 = ($121>>>0)<($125>>>0);
   if ($126) {
    $127 = HEAP32[$3>>2]|0;
    $128 = HEAP32[$127>>2]|0;
    $129 = ((($128)) + 8|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = (_mal_get_sample_size_in_bytes($130)|0);
    $132 = (36864 / ($131>>>0))&-1;
    $133 = HEAP32[$6>>2]|0;
    $134 = (($132>>>0) / ($133>>>0))&-1;
    $139 = $134;
   } else {
    $135 = (_mal_get_sample_size_in_bytes(5)|0);
    $136 = (36864 / ($135>>>0))&-1;
    $137 = HEAP32[$6>>2]|0;
    $138 = (($136>>>0) / ($137>>>0))&-1;
    $139 = $138;
   }
   HEAP32[$12>>2] = $139;
   $140 = HEAP32[$12>>2]|0;
   $141 = HEAP32[$3>>2]|0;
   $142 = HEAP32[$141>>2]|0;
   $143 = ((($142)) + 24|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($140>>>0)>($144>>>0);
   if ($145) {
    $146 = HEAP32[$3>>2]|0;
    $147 = HEAP32[$146>>2]|0;
    $148 = ((($147)) + 24|0);
    $149 = HEAP32[$148>>2]|0;
    HEAP32[$12>>2] = $149;
   }
   $150 = HEAP32[$3>>2]|0;
   $151 = HEAP32[$150>>2]|0;
   $152 = ((($151)) + 28|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = HEAP32[$3>>2]|0;
   $155 = HEAP32[$154>>2]|0;
   $156 = HEAP32[$12>>2]|0;
   $157 = HEAP32[$3>>2]|0;
   $158 = HEAP32[$157>>2]|0;
   $159 = ((($158)) + 32|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (FUNCTION_TABLE_iiiii[$153 & 7]($155,$156,$11,$160)|0);
   $162 = HEAP32[$3>>2]|0;
   $163 = ((($162)) + 36868|0);
   HEAP32[$163>>2] = $161;
   $164 = HEAP32[$3>>2]|0;
   $165 = ((($164)) + 4|0);
   $166 = HEAP32[$3>>2]|0;
   $167 = HEAP32[$166>>2]|0;
   $168 = ((($167)) + 8|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = HEAP32[$3>>2]|0;
   $171 = ((($170)) + 36868|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = HEAP32[$6>>2]|0;
   $174 = Math_imul($172, $173)|0;
   _mal_pcm_convert($165,5,$11,$169,$174);
  }
  $175 = HEAP32[$3>>2]|0;
  $176 = ((($175)) + 36868|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = ($177|0)!=(0);
  $179 = HEAP32[$4>>2]|0;
  $180 = ($179>>>0)>(0);
  $or$cond = $178 & $180;
  if (!($or$cond)) {
   label = 28;
   break;
  }
 }
 if ((label|0) == 16) {
  ___assert_fail((13214|0),(10766|0),10102,(13461|0));
  // unreachable;
 }
 else if ((label|0) == 28) {
  $181 = HEAP32[$7>>2]|0;
  STACKTOP = sp;return ($181|0);
 }
 return (0)|0;
}
function _mal_blend_f32($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAPF32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 HEAP32[$10>>2] = 0;
 while(1) {
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$9>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = HEAP32[$6>>2]|0;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($14) + ($15<<2)|0);
  $17 = +HEAPF32[$16>>2];
  $18 = HEAP32[$7>>2]|0;
  $19 = HEAP32[$10>>2]|0;
  $20 = (($18) + ($19<<2)|0);
  $21 = +HEAPF32[$20>>2];
  $22 = +HEAPF32[$8>>2];
  $23 = (+_mal_mix_f32($17,$21,$22));
  $24 = HEAP32[$5>>2]|0;
  $25 = HEAP32[$10>>2]|0;
  $26 = (($24) + ($25<<2)|0);
  HEAPF32[$26>>2] = $23;
  $27 = HEAP32[$10>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$10>>2] = $28;
 }
 STACKTOP = sp;return;
}
function _mal_mix_f32($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAPF32[$3>>2] = $0;
 HEAPF32[$4>>2] = $1;
 HEAPF32[$5>>2] = $2;
 $6 = +HEAPF32[$3>>2];
 $7 = +HEAPF32[$5>>2];
 $8 = 1.0 - $7;
 $9 = $6 * $8;
 $10 = +HEAPF32[$4>>2];
 $11 = +HEAPF32[$5>>2];
 $12 = $10 * $11;
 $13 = $9 + $12;
 STACKTOP = sp;return (+$13);
}
function _mal_event_init__posix($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 64|0);
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = (FUNCTION_TABLE_iii[$8 & 15]($10,0)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  HEAP32[$2>>2] = -23;
  $25 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($25|0);
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = ((($13)) + 64|0);
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$4>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = ((($18)) + 28|0);
 $20 = (FUNCTION_TABLE_iii[$16 & 15]($19,0)|0);
 $21 = ($20|0)!=(0);
 if ($21) {
  HEAP32[$2>>2] = -24;
  $25 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($25|0);
 } else {
  $22 = HEAP32[$4>>2]|0;
  $23 = ((($22)) + 4|0);
  $24 = ((($23)) + 76|0);
  HEAP32[$24>>2] = 0;
  HEAP32[$2>>2] = 0;
  $25 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _MixFrames($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAPF32[$7>>2] = $3;
 HEAP32[$8>>2] = 0;
 while(1) {
  $12 = HEAP32[$8>>2]|0;
  $13 = HEAP32[$6>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  HEAP32[$9>>2] = 0;
  while(1) {
   $15 = HEAP32[$9>>2]|0;
   $16 = HEAP32[(24388)>>2]|0;
   $17 = ($15>>>0)<($16>>>0);
   if (!($17)) {
    break;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = HEAP32[$8>>2]|0;
   $20 = HEAP32[(24388)>>2]|0;
   $21 = Math_imul($19, $20)|0;
   $22 = (($18) + ($21<<2)|0);
   HEAP32[$10>>2] = $22;
   $23 = HEAP32[$5>>2]|0;
   $24 = HEAP32[$8>>2]|0;
   $25 = HEAP32[(24388)>>2]|0;
   $26 = Math_imul($24, $25)|0;
   $27 = (($23) + ($26<<2)|0);
   HEAP32[$11>>2] = $27;
   $28 = HEAP32[$11>>2]|0;
   $29 = HEAP32[$9>>2]|0;
   $30 = (($28) + ($29<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = +HEAPF32[880];
   $33 = $31 * $32;
   $34 = +HEAPF32[$7>>2];
   $35 = $33 * $34;
   $36 = HEAP32[$10>>2]|0;
   $37 = HEAP32[$9>>2]|0;
   $38 = (($36) + ($37<<2)|0);
   $39 = +HEAPF32[$38>>2];
   $40 = $39 + $35;
   HEAPF32[$38>>2] = $40;
   $41 = HEAP32[$9>>2]|0;
   $42 = (($41) + 1)|0;
   HEAP32[$9>>2] = $42;
  }
  $43 = HEAP32[$8>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$8>>2] = $44;
 }
 STACKTOP = sp;return;
}
function _StopAudioBuffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _TraceLog(2,13696,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = (_IsAudioBufferPlaying($4)|0);
 $6 = ($5|0)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 38068|0);
 HEAP32[$8>>2] = 0;
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 38072|0);
 HEAP32[$10>>2] = 0;
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($11)) + 38092|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$1>>2]|0;
 $14 = ((($13)) + 38084|0);
 HEAP32[$14>>2] = 1;
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 38084|0);
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = 1;
 STACKTOP = sp;return;
}
function _IsAudioBufferPlaying($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _TraceLog(2,13696,$vararg_buffer);
  HEAP32[$1>>2] = 0;
  $16 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($16|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($5)) + 38068|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = HEAP32[$2>>2]|0;
  $10 = ((($9)) + 38072|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  $13 = $12 ^ 1;
  $15 = $13;
 } else {
  $15 = 0;
 }
 $14 = $15&1;
 HEAP32[$1>>2] = $14;
 $16 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function _mal_context_init_backend_apis($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = -5;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_mal_context_init_backend_apis__nix($3)|0);
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _mal_context_init__sdl($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((11587|0),(10766|0),8571,(13772|0));
  // unreachable;
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 3;
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = 1;
 $12 = HEAP32[$2>>2]|0;
 $13 = ((($12)) + 16|0);
 $14 = ((($13)) + 12|0);
 HEAP32[$14>>2] = 2;
 $15 = HEAP32[$2>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = ((($16)) + 16|0);
 HEAP32[$17>>2] = 1;
 $18 = HEAP32[$2>>2]|0;
 $19 = ((($18)) + 16|0);
 $20 = ((($19)) + 20|0);
 HEAP32[$20>>2] = 2;
 $21 = HEAP32[$2>>2]|0;
 $22 = ((($21)) + 16|0);
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  label = 8;
 } else {
  $26 = HEAP32[$2>>2]|0;
  $27 = ((($26)) + 16|0);
  $28 = ((($27)) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   label = 8;
  } else {
   $31 = HEAP32[$2>>2]|0;
   $32 = ((($31)) + 16|0);
   $33 = ((($32)) + 32|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0|0);
   if ($35) {
    label = 8;
   } else {
    $36 = HEAP32[$2>>2]|0;
    $37 = ((($36)) + 16|0);
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(0|0);
    if ($40) {
     label = 8;
    } else {
     $41 = HEAP32[$2>>2]|0;
     $42 = ((($41)) + 16|0);
     $43 = ((($42)) + 40|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($44|0)==(0|0);
     if ($45) {
      label = 8;
     }
    }
   }
  }
 }
 if ((label|0) == 8) {
  $46 = HEAP32[$2>>2]|0;
  $47 = ((($46)) + 16|0);
  $48 = ((($47)) + 44|0);
  HEAP32[$48>>2] = 1;
 }
 $49 = HEAP32[$2>>2]|0;
 $50 = ((($49)) + 16|0);
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (FUNCTION_TABLE_ii[$52 & 31](16)|0);
 HEAP32[$3>>2] = $53;
 $54 = HEAP32[$3>>2]|0;
 $55 = ($54|0)!=(0);
 if ($55) {
  HEAP32[$1>>2] = -1;
  $56 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($56|0);
 } else {
  HEAP32[$1>>2] = 0;
  $56 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _mal_context_init_backend_apis__nix($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 64|0);
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 4;
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($5)) + 64|0);
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 2;
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($8)) + 64|0);
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = 3;
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($11)) + 64|0);
 $13 = ((($12)) + 16|0);
 HEAP32[$13>>2] = 4;
 $14 = HEAP32[$1>>2]|0;
 $15 = ((($14)) + 64|0);
 $16 = ((($15)) + 20|0);
 HEAP32[$16>>2] = 5;
 $17 = HEAP32[$1>>2]|0;
 $18 = ((($17)) + 64|0);
 $19 = ((($18)) + 24|0);
 HEAP32[$19>>2] = 6;
 $20 = HEAP32[$1>>2]|0;
 $21 = ((($20)) + 64|0);
 $22 = ((($21)) + 28|0);
 HEAP32[$22>>2] = 4;
 $23 = HEAP32[$1>>2]|0;
 $24 = ((($23)) + 64|0);
 $25 = ((($24)) + 32|0);
 HEAP32[$25>>2] = 7;
 $26 = HEAP32[$1>>2]|0;
 $27 = ((($26)) + 64|0);
 $28 = ((($27)) + 36|0);
 HEAP32[$28>>2] = 5;
 $29 = HEAP32[$1>>2]|0;
 $30 = ((($29)) + 64|0);
 $31 = ((($30)) + 40|0);
 HEAP32[$31>>2] = 8;
 STACKTOP = sp;return 0;
}
function _CloseAudioDevice() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[15784]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  _mal_mutex_uninit(63104);
  _mal_device_uninit(24376);
  (_mal_context_uninit(24268)|0);
  _TraceLog(0,13863,$vararg_buffer1);
  STACKTOP = sp;return;
 } else {
  _TraceLog(1,13794,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _CreateAudioBuffer($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 16|0;
 $13 = sp + 12|0;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 $14 = HEAP32[$9>>2]|0;
 $15 = HEAP32[$7>>2]|0;
 $16 = Math_imul($14, $15)|0;
 $17 = HEAP32[$6>>2]|0;
 $18 = (_mal_get_sample_size_in_bytes($17)|0);
 $19 = Math_imul($16, $18)|0;
 $20 = (38112 + ($19))|0;
 $21 = (_calloc($20,1)|0);
 HEAP32[$11>>2] = $21;
 $22 = HEAP32[$11>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  _TraceLog(2,13896,$vararg_buffer);
  HEAP32[$5>>2] = 0;
  $63 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($63|0);
 }
 dest=$12; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $24 = HEAP32[$6>>2]|0;
 HEAP32[$12>>2] = $24;
 $25 = ((($12)) + 32|0);
 HEAP32[$25>>2] = 5;
 $26 = HEAP32[$7>>2]|0;
 $27 = ((($12)) + 4|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($12)) + 36|0);
 HEAP32[$28>>2] = 2;
 $29 = HEAP32[$8>>2]|0;
 $30 = ((($12)) + 8|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($12)) + 40|0);
 HEAP32[$31>>2] = 44100;
 $32 = HEAP32[$11>>2]|0;
 $33 = HEAP32[$11>>2]|0;
 $34 = (_mal_dsp_init($12,5,$32,$33)|0);
 HEAP32[$13>>2] = $34;
 $35 = HEAP32[$13>>2]|0;
 $36 = ($35|0)!=(0);
 if ($36) {
  _TraceLog(2,13961,$vararg_buffer1);
  $37 = HEAP32[$11>>2]|0;
  _free($37);
  HEAP32[$5>>2] = 0;
  $63 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($63|0);
 } else {
  $38 = HEAP32[$11>>2]|0;
  $39 = ((($38)) + 38060|0);
  HEAPF32[$39>>2] = 1.0;
  $40 = HEAP32[$11>>2]|0;
  $41 = ((($40)) + 38064|0);
  HEAPF32[$41>>2] = 1.0;
  $42 = HEAP32[$11>>2]|0;
  $43 = ((($42)) + 38068|0);
  HEAP32[$43>>2] = 0;
  $44 = HEAP32[$11>>2]|0;
  $45 = ((($44)) + 38072|0);
  HEAP32[$45>>2] = 0;
  $46 = HEAP32[$11>>2]|0;
  $47 = ((($46)) + 38076|0);
  HEAP32[$47>>2] = 0;
  $48 = HEAP32[$10>>2]|0;
  $49 = HEAP32[$11>>2]|0;
  $50 = ((($49)) + 38080|0);
  HEAP32[$50>>2] = $48;
  $51 = HEAP32[$9>>2]|0;
  $52 = HEAP32[$11>>2]|0;
  $53 = ((($52)) + 38096|0);
  HEAP32[$53>>2] = $51;
  $54 = HEAP32[$11>>2]|0;
  $55 = ((($54)) + 38092|0);
  HEAP32[$55>>2] = 0;
  $56 = HEAP32[$11>>2]|0;
  $57 = ((($56)) + 38084|0);
  HEAP32[$57>>2] = 1;
  $58 = HEAP32[$11>>2]|0;
  $59 = ((($58)) + 38084|0);
  $60 = ((($59)) + 4|0);
  HEAP32[$60>>2] = 1;
  $61 = HEAP32[$11>>2]|0;
  _TrackAudioBuffer($61);
  $62 = HEAP32[$11>>2]|0;
  HEAP32[$5>>2] = $62;
  $63 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _AudioBuffer_OnDSPRead($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $4 = sp + 68|0;
 $5 = sp + 64|0;
 $6 = sp + 60|0;
 $7 = sp + 56|0;
 $8 = sp + 52|0;
 $9 = sp + 48|0;
 $10 = sp + 44|0;
 $11 = sp + 40|0;
 $12 = sp + 32|0;
 $13 = sp + 28|0;
 $14 = sp + 24|0;
 $15 = sp + 20|0;
 $16 = sp + 16|0;
 $17 = sp + 12|0;
 $18 = sp + 8|0;
 $19 = sp + 4|0;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $20 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = $20;
 $21 = HEAP32[$9>>2]|0;
 $22 = ((($21)) + 38096|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23>>>0) / 2)&-1;
 HEAP32[$10>>2] = $24;
 $25 = HEAP32[$9>>2]|0;
 $26 = ((($25)) + 38092|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$10>>2]|0;
 $29 = (($27>>>0) / ($28>>>0))&-1;
 HEAP32[$11>>2] = $29;
 $30 = HEAP32[$11>>2]|0;
 $31 = ($30>>>0)>(1);
 if ($31) {
  _TraceLog(3,14025,$vararg_buffer);
  HEAP32[$4>>2] = 0;
  $157 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($157|0);
 }
 $32 = HEAP32[$9>>2]|0;
 $33 = ((($32)) + 38084|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$12>>2] = $34;
 $35 = HEAP32[$9>>2]|0;
 $36 = ((($35)) + 38084|0);
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($12)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = HEAP32[$9>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = (_mal_get_sample_size_in_bytes($41)|0);
 $43 = HEAP32[$9>>2]|0;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = Math_imul($42, $45)|0;
 HEAP32[$13>>2] = $46;
 HEAP32[$14>>2] = 0;
 while(1) {
  $47 = HEAP32[$9>>2]|0;
  $48 = ((($47)) + 38080|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0);
  if ($50) {
   $51 = HEAP32[$14>>2]|0;
   $52 = HEAP32[$6>>2]|0;
   $53 = ($51>>>0)>=($52>>>0);
   if ($53) {
    break;
   }
  } else {
   $54 = HEAP32[$11>>2]|0;
   $55 = (($12) + ($54<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)!=(0);
   if ($57) {
    break;
   }
  }
  $58 = HEAP32[$6>>2]|0;
  $59 = HEAP32[$14>>2]|0;
  $60 = (($58) - ($59))|0;
  HEAP32[$15>>2] = $60;
  $61 = HEAP32[$15>>2]|0;
  $62 = ($61|0)==(0);
  if ($62) {
   break;
  }
  $63 = HEAP32[$9>>2]|0;
  $64 = ((($63)) + 38080|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)==(0);
  if ($66) {
   $67 = HEAP32[$9>>2]|0;
   $68 = ((($67)) + 38096|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = HEAP32[$9>>2]|0;
   $71 = ((($70)) + 38092|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($69) - ($72))|0;
   HEAP32[$16>>2] = $73;
  } else {
   $74 = HEAP32[$10>>2]|0;
   $75 = HEAP32[$11>>2]|0;
   $76 = Math_imul($74, $75)|0;
   HEAP32[$17>>2] = $76;
   $77 = HEAP32[$10>>2]|0;
   $78 = HEAP32[$9>>2]|0;
   $79 = ((($78)) + 38092|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = HEAP32[$17>>2]|0;
   $82 = (($80) - ($81))|0;
   $83 = (($77) - ($82))|0;
   HEAP32[$16>>2] = $83;
  }
  $84 = HEAP32[$15>>2]|0;
  HEAP32[$18>>2] = $84;
  $85 = HEAP32[$18>>2]|0;
  $86 = HEAP32[$16>>2]|0;
  $87 = ($85>>>0)>($86>>>0);
  if ($87) {
   $88 = HEAP32[$16>>2]|0;
   HEAP32[$18>>2] = $88;
  }
  $89 = HEAP32[$7>>2]|0;
  $90 = HEAP32[$14>>2]|0;
  $91 = HEAP32[$13>>2]|0;
  $92 = Math_imul($90, $91)|0;
  $93 = (($89) + ($92)|0);
  $94 = HEAP32[$9>>2]|0;
  $95 = ((($94)) + 38108|0);
  $96 = HEAP32[$9>>2]|0;
  $97 = ((($96)) + 38092|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = HEAP32[$13>>2]|0;
  $100 = Math_imul($98, $99)|0;
  $101 = (($95) + ($100)|0);
  $102 = HEAP32[$18>>2]|0;
  $103 = HEAP32[$13>>2]|0;
  $104 = Math_imul($102, $103)|0;
  _memcpy(($93|0),($101|0),($104|0))|0;
  $105 = HEAP32[$9>>2]|0;
  $106 = ((($105)) + 38092|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = HEAP32[$18>>2]|0;
  $109 = (($107) + ($108))|0;
  $110 = HEAP32[$9>>2]|0;
  $111 = ((($110)) + 38096|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($109>>>0) % ($112>>>0))&-1;
  $114 = HEAP32[$9>>2]|0;
  $115 = ((($114)) + 38092|0);
  HEAP32[$115>>2] = $113;
  $116 = HEAP32[$18>>2]|0;
  $117 = HEAP32[$14>>2]|0;
  $118 = (($117) + ($116))|0;
  HEAP32[$14>>2] = $118;
  $119 = HEAP32[$18>>2]|0;
  $120 = HEAP32[$16>>2]|0;
  $121 = ($119|0)==($120|0);
  if (!($121)) {
   continue;
  }
  $122 = HEAP32[$9>>2]|0;
  $123 = ((($122)) + 38084|0);
  $124 = HEAP32[$11>>2]|0;
  $125 = (($123) + ($124<<2)|0);
  HEAP32[$125>>2] = 1;
  $126 = HEAP32[$11>>2]|0;
  $127 = (($12) + ($126<<2)|0);
  HEAP32[$127>>2] = 1;
  $128 = HEAP32[$11>>2]|0;
  $129 = (($128) + 1)|0;
  $130 = (($129>>>0) % 2)&-1;
  HEAP32[$11>>2] = $130;
  $131 = HEAP32[$9>>2]|0;
  $132 = ((($131)) + 38076|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ($133|0)!=(0);
  if (!($134)) {
   label = 15;
   break;
  }
 }
 if ((label|0) == 15) {
  $135 = HEAP32[$9>>2]|0;
  _StopAudioBuffer($135);
 }
 $136 = HEAP32[$6>>2]|0;
 $137 = HEAP32[$14>>2]|0;
 $138 = (($136) - ($137))|0;
 HEAP32[$19>>2] = $138;
 $139 = HEAP32[$19>>2]|0;
 $140 = ($139>>>0)>(0);
 if ($140) {
  $141 = HEAP32[$7>>2]|0;
  $142 = HEAP32[$14>>2]|0;
  $143 = HEAP32[$13>>2]|0;
  $144 = Math_imul($142, $143)|0;
  $145 = (($141) + ($144)|0);
  $146 = HEAP32[$19>>2]|0;
  $147 = HEAP32[$13>>2]|0;
  $148 = Math_imul($146, $147)|0;
  _memset(($145|0),0,($148|0))|0;
  $149 = HEAP32[$9>>2]|0;
  $150 = ((($149)) + 38080|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($151|0)!=(0);
  if ($152) {
   $153 = HEAP32[$19>>2]|0;
   $154 = HEAP32[$14>>2]|0;
   $155 = (($154) + ($153))|0;
   HEAP32[$14>>2] = $155;
  }
 }
 $156 = HEAP32[$14>>2]|0;
 HEAP32[$4>>2] = $156;
 $157 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($157|0);
}
function _TrackAudioBuffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 _mal_mutex_lock(63104);
 $2 = HEAP32[15785]|0;
 $3 = ($2|0)==(0|0);
 $4 = HEAP32[$1>>2]|0;
 if ($3) {
  HEAP32[15785] = $4;
 } else {
  $5 = HEAP32[15786]|0;
  $6 = ((($5)) + 38100|0);
  HEAP32[$6>>2] = $4;
  $7 = HEAP32[15786]|0;
  $8 = HEAP32[$1>>2]|0;
  $9 = ((($8)) + 38104|0);
  HEAP32[$9>>2] = $7;
 }
 $10 = HEAP32[$1>>2]|0;
 HEAP32[15786] = $10;
 _mal_mutex_unlock(63104);
 STACKTOP = sp;return;
}
function _DeleteAudioBuffer($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _TraceLog(2,13696,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  _UntrackAudioBuffer($4);
  $5 = HEAP32[$1>>2]|0;
  _free($5);
  STACKTOP = sp;return;
 }
}
function _UntrackAudioBuffer($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 _mal_mutex_lock(63104);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 38104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 38100|0);
 $8 = HEAP32[$7>>2]|0;
 if ($5) {
  $$sink = 63140;
 } else {
  $9 = HEAP32[$1>>2]|0;
  $10 = ((($9)) + 38104|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 38100|0);
  $$sink = $12;
 }
 HEAP32[$$sink>>2] = $8;
 $13 = HEAP32[$1>>2]|0;
 $14 = ((($13)) + 38100|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 $17 = HEAP32[$1>>2]|0;
 $18 = ((($17)) + 38104|0);
 $19 = HEAP32[$18>>2]|0;
 if ($16) {
  $$sink1 = 63144;
 } else {
  $20 = HEAP32[$1>>2]|0;
  $21 = ((($20)) + 38100|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 38104|0);
  $$sink1 = $23;
 }
 HEAP32[$$sink1>>2] = $19;
 $24 = HEAP32[$1>>2]|0;
 $25 = ((($24)) + 38104|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$1>>2]|0;
 $27 = ((($26)) + 38100|0);
 HEAP32[$27>>2] = 0;
 _mal_mutex_unlock(63104);
 STACKTOP = sp;return;
}
function _PlayAudioBuffer($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _TraceLog(2,13696,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 38068|0);
  HEAP32[$5>>2] = 1;
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($6)) + 38072|0);
  HEAP32[$7>>2] = 0;
  $8 = HEAP32[$1>>2]|0;
  $9 = ((($8)) + 38092|0);
  HEAP32[$9>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _LoadWave($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 96|0;
 $3 = sp + 76|0;
 $4 = sp + 56|0;
 $5 = sp + 36|0;
 $6 = sp + 32|0;
 $7 = sp + 12|0;
 HEAP32[$2>>2] = $1;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (_IsFileExtension($8,14085)|0);
 $10 = ($9|0)!=(0);
 $11 = HEAP32[$2>>2]|0;
 do {
  if ($10) {
   _LoadWAV($4,$11);
   ;HEAP32[$3>>2]=HEAP32[$4>>2]|0;HEAP32[$3+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$4+16>>2]|0;
  } else {
   $12 = (_IsFileExtension($11,14090)|0);
   $13 = ($12|0)!=(0);
   $14 = HEAP32[$2>>2]|0;
   if ($13) {
    _LoadOGG($5,$14);
    ;HEAP32[$3>>2]=HEAP32[$5>>2]|0;HEAP32[$3+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$5+16>>2]|0;
    break;
   }
   $15 = (_IsFileExtension($14,14095)|0);
   $16 = ($15|0)!=(0);
   $17 = HEAP32[$2>>2]|0;
   if (!($16)) {
    HEAP32[$vararg_buffer1>>2] = $17;
    _TraceLog(1,14147,$vararg_buffer1);
    break;
   }
   $18 = (_LoadResource($17,0)|0);
   HEAP32[$6>>2] = $18;
   $19 = HEAP32[$6>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(2);
   if ($21) {
    $22 = HEAP32[$6>>2]|0;
    $23 = ((($22)) + 20|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP32[$6>>2]|0;
    $26 = ((($25)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = HEAP32[$6>>2]|0;
    $29 = ((($28)) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = HEAP32[$6>>2]|0;
    $32 = ((($31)) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$6>>2]|0;
    $35 = ((($34)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    _LoadWaveEx($7,$24,$27,$30,$33,$36);
    ;HEAP32[$3>>2]=HEAP32[$7>>2]|0;HEAP32[$3+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$7+16>>2]|0;
   } else {
    $37 = HEAP32[$2>>2]|0;
    HEAP32[$vararg_buffer>>2] = $37;
    _TraceLog(1,14101,$vararg_buffer);
   }
   $38 = HEAP32[$6>>2]|0;
   _UnloadResource($38);
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
 STACKTOP = sp;return;
}
function _LoadWAV($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 132|0;
 $3 = sp + 120|0;
 $4 = sp + 96|0;
 $5 = sp + 88|0;
 $6 = sp + 68|0;
 $7 = sp + 64|0;
 HEAP32[$2>>2] = $1;
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;HEAP32[$6+16>>2]=0|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (_fopen($8,15164)|0);
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$7>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  _TraceLog(1,15545,$vararg_buffer);
  $13 = ((($6)) + 16|0);
  HEAP32[$13>>2] = 0;
  ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$6+16>>2]|0;
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$7>>2]|0;
 (_fread($3,12,1,$14)|0);
 $15 = (_strncmp($3,15579,4)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   label = 5;
  } else {
   $17 = ((($3)) + 8|0);
   $18 = (_strncmp($17,15584,4)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    label = 5;
   } else {
    $21 = HEAP32[$7>>2]|0;
    (_fread($4,24,1,$21)|0);
    $22 = HEAP8[$4>>0]|0;
    $23 = $22 << 24 >> 24;
    $24 = ($23|0)!=(102);
    if (!($24)) {
     $25 = ((($4)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26 << 24 >> 24;
     $28 = ($27|0)!=(109);
     if (!($28)) {
      $29 = ((($4)) + 2|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = $30 << 24 >> 24;
      $32 = ($31|0)!=(116);
      if (!($32)) {
       $33 = ((($4)) + 3|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34 << 24 >> 24;
       $36 = ($35|0)!=(32);
       if (!($36)) {
        $38 = ((($4)) + 4|0);
        $39 = HEAP32[$38>>2]|0;
        $40 = ($39|0)>(16);
        if ($40) {
         $41 = HEAP32[$7>>2]|0;
         (_fseek($41,2,1)|0);
        }
        $42 = HEAP32[$7>>2]|0;
        (_fread($5,8,1,$42)|0);
        $43 = HEAP8[$5>>0]|0;
        $44 = $43 << 24 >> 24;
        $45 = ($44|0)!=(100);
        if (!($45)) {
         $46 = ((($5)) + 1|0);
         $47 = HEAP8[$46>>0]|0;
         $48 = $47 << 24 >> 24;
         $49 = ($48|0)!=(97);
         if (!($49)) {
          $50 = ((($5)) + 2|0);
          $51 = HEAP8[$50>>0]|0;
          $52 = $51 << 24 >> 24;
          $53 = ($52|0)!=(116);
          if (!($53)) {
           $54 = ((($5)) + 3|0);
           $55 = HEAP8[$54>>0]|0;
           $56 = $55 << 24 >> 24;
           $57 = ($56|0)!=(97);
           if (!($57)) {
            $59 = ((($5)) + 4|0);
            $60 = HEAP32[$59>>2]|0;
            $61 = (_malloc($60)|0);
            $62 = ((($6)) + 16|0);
            HEAP32[$62>>2] = $61;
            $63 = ((($6)) + 16|0);
            $64 = HEAP32[$63>>2]|0;
            $65 = ((($5)) + 4|0);
            $66 = HEAP32[$65>>2]|0;
            $67 = HEAP32[$7>>2]|0;
            (_fread($64,$66,1,$67)|0);
            $68 = ((($4)) + 12|0);
            $69 = HEAP32[$68>>2]|0;
            $70 = ((($6)) + 4|0);
            HEAP32[$70>>2] = $69;
            $71 = ((($4)) + 22|0);
            $72 = HEAP16[$71>>1]|0;
            $73 = $72 << 16 >> 16;
            $74 = ((($6)) + 8|0);
            HEAP32[$74>>2] = $73;
            $75 = ((($4)) + 10|0);
            $76 = HEAP16[$75>>1]|0;
            $77 = $76 << 16 >> 16;
            $78 = ((($6)) + 12|0);
            HEAP32[$78>>2] = $77;
            $79 = ((($6)) + 8|0);
            $80 = HEAP32[$79>>2]|0;
            $81 = ($80|0)!=(8);
            if ($81) {
             $82 = ((($6)) + 8|0);
             $83 = HEAP32[$82>>2]|0;
             $84 = ($83|0)!=(16);
             if ($84) {
              $85 = ((($6)) + 8|0);
              $86 = HEAP32[$85>>2]|0;
              $87 = ($86|0)!=(32);
              if ($87) {
               $88 = HEAP32[$2>>2]|0;
               $89 = ((($6)) + 8|0);
               $90 = HEAP32[$89>>2]|0;
               HEAP32[$vararg_buffer10>>2] = $88;
               $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
               HEAP32[$vararg_ptr13>>2] = $90;
               _TraceLog(1,15672,$vararg_buffer10);
               $91 = ((($6)) + 4|0);
               $92 = HEAP32[$91>>2]|0;
               $93 = ((($6)) + 12|0);
               $94 = HEAP32[$93>>2]|0;
               _WaveFormat($6,$92,16,$94);
              }
             }
            }
            $95 = ((($6)) + 12|0);
            $96 = HEAP32[$95>>2]|0;
            $97 = ($96>>>0)>(2);
            if ($97) {
             $98 = ((($6)) + 4|0);
             $99 = HEAP32[$98>>2]|0;
             $100 = ((($6)) + 8|0);
             $101 = HEAP32[$100>>2]|0;
             _WaveFormat($6,$99,$101,2);
             $102 = HEAP32[$2>>2]|0;
             $103 = ((($6)) + 12|0);
             $104 = HEAP32[$103>>2]|0;
             HEAP32[$vararg_buffer14>>2] = $102;
             $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
             HEAP32[$vararg_ptr17>>2] = $104;
             _TraceLog(1,15735,$vararg_buffer14);
            }
            $105 = ((($5)) + 4|0);
            $106 = HEAP32[$105>>2]|0;
            $107 = ((($6)) + 8|0);
            $108 = HEAP32[$107>>2]|0;
            $109 = (($108>>>0) / 8)&-1;
            $110 = (($106>>>0) / ($109>>>0))&-1;
            $111 = ((($6)) + 12|0);
            $112 = HEAP32[$111>>2]|0;
            $113 = (($110>>>0) / ($112>>>0))&-1;
            HEAP32[$6>>2] = $113;
            $114 = HEAP32[$2>>2]|0;
            $115 = ((($6)) + 4|0);
            $116 = HEAP32[$115>>2]|0;
            $117 = ((($6)) + 8|0);
            $118 = HEAP32[$117>>2]|0;
            $119 = ((($6)) + 12|0);
            $120 = HEAP32[$119>>2]|0;
            $121 = ($120|0)==(1);
            $122 = $121 ? 14568 : 14573;
            HEAP32[$vararg_buffer18>>2] = $114;
            $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
            HEAP32[$vararg_ptr21>>2] = $116;
            $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
            HEAP32[$vararg_ptr22>>2] = $118;
            $vararg_ptr23 = ((($vararg_buffer18)) + 12|0);
            HEAP32[$vararg_ptr23>>2] = $122;
            _TraceLog(0,15804,$vararg_buffer18);
            break;
           }
          }
         }
        }
        $58 = HEAP32[$2>>2]|0;
        HEAP32[$vararg_buffer7>>2] = $58;
        _TraceLog(1,15647,$vararg_buffer7);
        break;
       }
      }
     }
    }
    $37 = HEAP32[$2>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $37;
    _TraceLog(1,15622,$vararg_buffer4);
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $20 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $20;
  _TraceLog(1,15589,$vararg_buffer1);
 }
 $123 = HEAP32[$7>>2]|0;
 (_fclose($123)|0);
 ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$6+16>>2]|0;
 STACKTOP = sp;return;
}
function _LoadOGG($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 104|0;
 $3 = sp + 84|0;
 $4 = sp + 80|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 48|0;
 HEAP32[$2>>2] = $1;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (_stb_vorbis_open_filename($8,0,0)|0);
 HEAP32[$4>>2] = $9;
 $10 = HEAP32[$4>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  _TraceLog(1,14400,$vararg_buffer);
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$4>>2]|0;
 _stb_vorbis_get_info($5,$13);
 $14 = HEAP32[$5>>2]|0;
 $15 = ((($3)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($3)) + 8|0);
 HEAP32[$16>>2] = 16;
 $17 = ((($5)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($3)) + 12|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$4>>2]|0;
 $21 = (_stb_vorbis_stream_length_in_samples($20)|0);
 HEAP32[$3>>2] = $21;
 $22 = HEAP32[$4>>2]|0;
 $23 = (+_stb_vorbis_stream_length_in_seconds($22));
 HEAPF32[$6>>2] = $23;
 $24 = +HEAPF32[$6>>2];
 $25 = $24 > 10.0;
 if ($25) {
  $26 = HEAP32[$2>>2]|0;
  $27 = +HEAPF32[$6>>2];
  $28 = $27;
  HEAP32[$vararg_buffer1>>2] = $26;
  $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
  HEAPF64[$vararg_ptr4>>3] = $28;
  _TraceLog(1,14434,$vararg_buffer1);
 }
 $29 = HEAP32[$3>>2]|0;
 $30 = ((($3)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = Math_imul($29, $31)|0;
 $33 = $32<<1;
 $34 = (_malloc($33)|0);
 $35 = ((($3)) + 16|0);
 HEAP32[$35>>2] = $34;
 $36 = HEAP32[$4>>2]|0;
 $37 = ((($5)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($3)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$3>>2]|0;
 $42 = ((($3)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = Math_imul($41, $43)|0;
 $45 = (_stb_vorbis_get_samples_short_interleaved($36,$38,$40,$44)|0);
 HEAP32[$7>>2] = $45;
 $46 = HEAP32[$2>>2]|0;
 $47 = HEAP32[$7>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $46;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $47;
 _TraceLog(3,14542,$vararg_buffer5);
 $48 = HEAP32[$2>>2]|0;
 $49 = ((($3)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($3)) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($3)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(1);
 $56 = $55 ? 14568 : 14573;
 HEAP32[$vararg_buffer9>>2] = $48;
 $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
 HEAP32[$vararg_ptr12>>2] = $50;
 $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
 HEAP32[$vararg_ptr13>>2] = $52;
 $vararg_ptr14 = ((($vararg_buffer9)) + 12|0);
 HEAP32[$vararg_ptr14>>2] = $56;
 _TraceLog(0,14580,$vararg_buffer9);
 $57 = HEAP32[$4>>2]|0;
 _stb_vorbis_close($57);
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
 STACKTOP = sp;return;
}
function _LoadWaveEx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 60|0;
 $6 = sp + 56|0;
 $7 = sp + 52|0;
 $8 = sp + 48|0;
 $9 = sp + 44|0;
 $10 = sp + 40|0;
 $11 = sp + 20|0;
 $12 = sp;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 HEAP32[$10>>2] = $5;
 $13 = HEAP32[$6>>2]|0;
 $14 = ((($11)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$7>>2]|0;
 HEAP32[$11>>2] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ((($11)) + 4|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$9>>2]|0;
 $19 = ((($11)) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$10>>2]|0;
 $21 = ((($11)) + 12|0);
 HEAP32[$21>>2] = $20;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$11+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$11+16>>2]|0;
 _WaveCopy($12,$$byval_copy);
 $22 = HEAP32[$8>>2]|0;
 $23 = HEAP32[$9>>2]|0;
 $24 = HEAP32[$10>>2]|0;
 _WaveFormat($12,$22,$23,$24);
 ;HEAP32[$0>>2]=HEAP32[$12>>2]|0;HEAP32[$0+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$12+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$12+16>>2]|0;
 STACKTOP = sp;return;
}
function _WaveCopy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($3, $5)|0;
 $7 = (($6>>>0) / 8)&-1;
 $8 = ((($1)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($7, $9)|0;
 $11 = (_malloc($10)|0);
 $12 = ((($2)) + 16|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($2)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;
  STACKTOP = sp;return;
 }
 $16 = ((($2)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($1)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$1>>2]|0;
 $21 = ((($1)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = Math_imul($20, $22)|0;
 $24 = ((($1)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = Math_imul($23, $25)|0;
 $27 = (($26>>>0) / 8)&-1;
 _memcpy(($17|0),($19|0),($27|0))|0;
 $28 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $28;
 $29 = ((($1)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($2)) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($1)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($2)) + 8|0);
 HEAP32[$34>>2] = $33;
 $35 = ((($1)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($2)) + 12|0);
 HEAP32[$37>>2] = $36;
 ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;
 STACKTOP = sp;return;
}
function _WaveFormat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 44|0;
 $5 = sp + 40|0;
 $6 = sp + 36|0;
 $7 = sp + 32|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 20|0;
 $11 = sp + 16|0;
 $12 = sp + 12|0;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $13 = HEAP32[$4>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(8);
 if ($16) {
  $22 = 1;
 } else {
  $17 = HEAP32[$4>>2]|0;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(16);
  $21 = $20 ? 2 : 5;
  $22 = $21;
 }
 HEAP32[$8>>2] = $22;
 $23 = HEAP32[$6>>2]|0;
 $24 = ($23|0)==(8);
 if ($24) {
  $28 = 1;
 } else {
  $25 = HEAP32[$6>>2]|0;
  $26 = ($25|0)==(16);
  $27 = $26 ? 2 : 5;
  $28 = $27;
 }
 HEAP32[$9>>2] = $28;
 $29 = HEAP32[$4>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$10>>2] = $30;
 $31 = HEAP32[$9>>2]|0;
 $32 = HEAP32[$7>>2]|0;
 $33 = HEAP32[$5>>2]|0;
 $34 = HEAP32[$8>>2]|0;
 $35 = HEAP32[$4>>2]|0;
 $36 = ((($35)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$4>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$10>>2]|0;
 $42 = (_mal_convert_frames(0,$31,$32,$33,0,$34,$37,$40,$41)|0);
 HEAP32[$11>>2] = $42;
 $43 = HEAP32[$11>>2]|0;
 $44 = ($43|0)==(0);
 if ($44) {
  _TraceLog(2,14203,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $45 = HEAP32[$11>>2]|0;
 $46 = HEAP32[$7>>2]|0;
 $47 = Math_imul($45, $46)|0;
 $48 = HEAP32[$6>>2]|0;
 $49 = (($48|0) / 8)&-1;
 $50 = Math_imul($47, $49)|0;
 $51 = (_malloc($50)|0);
 HEAP32[$12>>2] = $51;
 $52 = HEAP32[$12>>2]|0;
 $53 = HEAP32[$9>>2]|0;
 $54 = HEAP32[$7>>2]|0;
 $55 = HEAP32[$5>>2]|0;
 $56 = HEAP32[$4>>2]|0;
 $57 = ((($56)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$8>>2]|0;
 $60 = HEAP32[$4>>2]|0;
 $61 = ((($60)) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$4>>2]|0;
 $64 = ((($63)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$10>>2]|0;
 $67 = (_mal_convert_frames($52,$53,$54,$55,$58,$59,$62,$65,$66)|0);
 HEAP32[$11>>2] = $67;
 $68 = HEAP32[$11>>2]|0;
 $69 = ($68|0)==(0);
 if ($69) {
  _TraceLog(2,14267,$vararg_buffer1);
  STACKTOP = sp;return;
 } else {
  $70 = HEAP32[$11>>2]|0;
  $71 = HEAP32[$4>>2]|0;
  HEAP32[$71>>2] = $70;
  $72 = HEAP32[$6>>2]|0;
  $73 = HEAP32[$4>>2]|0;
  $74 = ((($73)) + 8|0);
  HEAP32[$74>>2] = $72;
  $75 = HEAP32[$5>>2]|0;
  $76 = HEAP32[$4>>2]|0;
  $77 = ((($76)) + 4|0);
  HEAP32[$77>>2] = $75;
  $78 = HEAP32[$7>>2]|0;
  $79 = HEAP32[$4>>2]|0;
  $80 = ((($79)) + 12|0);
  HEAP32[$80>>2] = $78;
  $81 = HEAP32[$4>>2]|0;
  $82 = ((($81)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
  $84 = HEAP32[$12>>2]|0;
  $85 = HEAP32[$4>>2]|0;
  $86 = ((($85)) + 16|0);
  HEAP32[$86>>2] = $84;
  STACKTOP = sp;return;
 }
}
function _mal_convert_frames($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 38192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(38192|0);
 $9 = sp + 38188|0;
 $10 = sp + 38184|0;
 $11 = sp + 38180|0;
 $12 = sp + 38176|0;
 $13 = sp + 38172|0;
 $14 = sp + 38168|0;
 $15 = sp + 38164|0;
 $16 = sp + 38160|0;
 $17 = sp + 38156|0;
 $18 = sp + 38152|0;
 $19 = sp + 38148|0;
 $20 = sp + 38128|0;
 $21 = sp + 38060|0;
 $22 = sp;
 HEAP32[$10>>2] = $0;
 HEAP32[$11>>2] = $1;
 HEAP32[$12>>2] = $2;
 HEAP32[$13>>2] = $3;
 HEAP32[$14>>2] = $4;
 HEAP32[$15>>2] = $5;
 HEAP32[$16>>2] = $6;
 HEAP32[$17>>2] = $7;
 HEAP32[$18>>2] = $8;
 $23 = HEAP32[$18>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  HEAP32[$9>>2] = 0;
  $56 = HEAP32[$9>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $25 = HEAP32[$13>>2]|0;
 $26 = HEAP32[$17>>2]|0;
 $27 = HEAP32[$18>>2]|0;
 $28 = (_mal_calculate_frame_count_after_src($25,$26,$27)|0);
 HEAP32[$19>>2] = $28;
 $29 = HEAP32[$10>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $31 = HEAP32[$19>>2]|0;
  HEAP32[$9>>2] = $31;
  $56 = HEAP32[$9>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $32 = HEAP32[$14>>2]|0;
 HEAP32[$20>>2] = $32;
 $33 = HEAP32[$15>>2]|0;
 $34 = ((($20)) + 4|0);
 HEAP32[$34>>2] = $33;
 $35 = HEAP32[$16>>2]|0;
 $36 = ((($20)) + 8|0);
 HEAP32[$36>>2] = $35;
 $37 = HEAP32[$18>>2]|0;
 $38 = ((($20)) + 12|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($20)) + 16|0);
 HEAP32[$39>>2] = 0;
 dest=$21; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $40 = HEAP32[$15>>2]|0;
 HEAP32[$21>>2] = $40;
 $41 = HEAP32[$16>>2]|0;
 $42 = ((($21)) + 4|0);
 HEAP32[$42>>2] = $41;
 $43 = HEAP32[$17>>2]|0;
 $44 = ((($21)) + 8|0);
 HEAP32[$44>>2] = $43;
 $45 = HEAP32[$11>>2]|0;
 $46 = ((($21)) + 32|0);
 HEAP32[$46>>2] = $45;
 $47 = HEAP32[$12>>2]|0;
 $48 = ((($21)) + 36|0);
 HEAP32[$48>>2] = $47;
 $49 = HEAP32[$13>>2]|0;
 $50 = ((($21)) + 40|0);
 HEAP32[$50>>2] = $49;
 $51 = (_mal_dsp_init($21,6,$20,$22)|0);
 $52 = ($51|0)!=(0);
 if ($52) {
  HEAP32[$9>>2] = 0;
  $56 = HEAP32[$9>>2]|0;
  STACKTOP = sp;return ($56|0);
 } else {
  $53 = HEAP32[$19>>2]|0;
  $54 = HEAP32[$10>>2]|0;
  $55 = (_mal_dsp_read_frames_ex($22,$53,$54,1)|0);
  HEAP32[$9>>2] = $55;
  $56 = HEAP32[$9>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _mal_calculate_frame_count_after_src($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 16|0;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $9 = HEAP32[$3>>2]|0;
 $10 = (+($9>>>0));
 $11 = HEAP32[$4>>2]|0;
 $12 = (+($11>>>0));
 $13 = $10 / $12;
 HEAPF64[$6>>3] = $13;
 $14 = HEAP32[$5>>2]|0;
 $15 = (+($14>>>0));
 $16 = +HEAPF64[$6>>3];
 $17 = $15 * $16;
 HEAPF64[$7>>3] = $17;
 $18 = +HEAPF64[$7>>3];
 $19 = (~~(($18))>>>0);
 HEAP32[$8>>2] = $19;
 $20 = +HEAPF64[$7>>3];
 $21 = HEAP32[$8>>2]|0;
 $22 = (+($21>>>0));
 $23 = $20 - $22;
 $24 = $23 > 0.0;
 if (!($24)) {
  $27 = HEAP32[$8>>2]|0;
  STACKTOP = sp;return ($27|0);
 }
 $25 = HEAP32[$8>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$8>>2] = $26;
 $27 = HEAP32[$8>>2]|0;
 STACKTOP = sp;return ($27|0);
}
function _mal_convert_frames__on_read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $12 = HEAP32[$7>>2]|0;
 HEAP32[$8>>2] = $12;
 $13 = HEAP32[$8>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((14308|0),(10766|0),11008,(14328|0));
  // unreachable;
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$8>>2]|0;
 $19 = ((($18)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17>>>0)>=($20>>>0);
 if (!($21)) {
  ___assert_fail((14356|0),(10766|0),11009,(14328|0));
  // unreachable;
 }
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$9>>2] = $22;
 $23 = HEAP32[$8>>2]|0;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$8>>2]|0;
 $27 = ((($26)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($25) - ($28))|0;
 HEAP32[$10>>2] = $29;
 $30 = HEAP32[$9>>2]|0;
 $31 = HEAP32[$10>>2]|0;
 $32 = ($30>>>0)>($31>>>0);
 if ($32) {
  $33 = HEAP32[$10>>2]|0;
  HEAP32[$9>>2] = $33;
 }
 $34 = HEAP32[$8>>2]|0;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (_mal_get_sample_size_in_bytes($36)|0);
 $38 = HEAP32[$8>>2]|0;
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = Math_imul($37, $40)|0;
 HEAP32[$11>>2] = $41;
 $42 = HEAP32[$6>>2]|0;
 $43 = HEAP32[$8>>2]|0;
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$11>>2]|0;
 $46 = HEAP32[$8>>2]|0;
 $47 = ((($46)) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = Math_imul($45, $48)|0;
 $50 = (($44) + ($49)|0);
 $51 = HEAP32[$11>>2]|0;
 $52 = HEAP32[$9>>2]|0;
 $53 = Math_imul($51, $52)|0;
 _memcpy(($42|0),($50|0),($53|0))|0;
 $54 = HEAP32[$9>>2]|0;
 $55 = HEAP32[$8>>2]|0;
 $56 = ((($55)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + ($54))|0;
 HEAP32[$56>>2] = $58;
 $59 = HEAP32[$9>>2]|0;
 STACKTOP = sp;return ($59|0);
}
function _stb_vorbis_open_filename($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 $8 = HEAP32[$4>>2]|0;
 $9 = (_fopen($8,15164)|0);
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$7>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = HEAP32[$7>>2]|0;
  $13 = HEAP32[$5>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = (_stb_vorbis_open_file($12,1,$13,$14)|0);
  HEAP32[$3>>2] = $15;
  $19 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($19|0);
 }
 $16 = HEAP32[$5>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = HEAP32[$5>>2]|0;
  HEAP32[$18>>2] = 6;
 }
 HEAP32[$3>>2] = 0;
 $19 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($19|0);
}
function _stb_vorbis_get_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 24|0;
 $3 = sp;
 HEAP32[$2>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$3>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($3)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$2>>2]|0;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($3)) + 12|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$2>>2]|0;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($3)) + 16|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[$2>>2]|0;
 $23 = ((($22)) + 116|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >> 1;
 $26 = ((($3)) + 20|0);
 HEAP32[$26>>2] = $25;
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$3+20>>2]|0;
 STACKTOP = sp;return;
}
function _stb_vorbis_stream_length_in_samples($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 $10 = sp + 36|0;
 HEAP32[$2>>2] = $0;
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($11)) + 48|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)!=(0);
 $15 = HEAP32[$2>>2]|0;
 if ($14) {
  $16 = (_error($15,2)|0);
  HEAP32[$1>>2] = $16;
  $104 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($104|0);
 }
 $17 = ((($15)) + 796|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $20 = HEAP32[$2>>2]|0;
  $21 = (_stb_vorbis_get_file_offset($20)|0);
  HEAP32[$3>>2] = $21;
  $22 = HEAP32[$2>>2]|0;
  $23 = ((($22)) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24>>>0)>=(65536);
  if ($25) {
   $26 = HEAP32[$2>>2]|0;
   $27 = ((($26)) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) - 65536)|0;
   $30 = HEAP32[$2>>2]|0;
   $31 = ((($30)) + 52|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($29>>>0)>=($32>>>0);
   if ($33) {
    $34 = HEAP32[$2>>2]|0;
    $35 = ((($34)) + 44|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($36) - 65536)|0;
    HEAP32[$4>>2] = $37;
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   $38 = HEAP32[$2>>2]|0;
   $39 = ((($38)) + 52|0);
   $40 = HEAP32[$39>>2]|0;
   HEAP32[$4>>2] = $40;
  }
  $41 = HEAP32[$2>>2]|0;
  $42 = HEAP32[$4>>2]|0;
  (_set_file_offset($41,$42)|0);
  $43 = HEAP32[$2>>2]|0;
  $44 = (_vorbis_find_page($43,$5,$7)|0);
  $45 = ($44|0)!=(0);
  $46 = HEAP32[$2>>2]|0;
  do {
   if ($45) {
    $50 = (_stb_vorbis_get_file_offset($46)|0);
    HEAP32[$6>>2] = $50;
    while(1) {
     $51 = HEAP32[$7>>2]|0;
     $52 = ($51|0)!=(0);
     $53 = $52 ^ 1;
     if (!($53)) {
      break;
     }
     $54 = HEAP32[$2>>2]|0;
     $55 = HEAP32[$5>>2]|0;
     (_set_file_offset($54,$55)|0);
     $56 = HEAP32[$2>>2]|0;
     $57 = (_vorbis_find_page($56,$5,$7)|0);
     $58 = ($57|0)!=(0);
     if (!($58)) {
      break;
     }
     $59 = HEAP32[$6>>2]|0;
     $60 = (($59) + 1)|0;
     HEAP32[$4>>2] = $60;
     $61 = HEAP32[$2>>2]|0;
     $62 = (_stb_vorbis_get_file_offset($61)|0);
     HEAP32[$6>>2] = $62;
    }
    $63 = HEAP32[$2>>2]|0;
    $64 = HEAP32[$6>>2]|0;
    (_set_file_offset($63,$64)|0);
    $65 = HEAP32[$2>>2]|0;
    (_getn($65,$10,6)|0);
    $66 = HEAP32[$2>>2]|0;
    $67 = (_get32($66)|0);
    HEAP32[$8>>2] = $67;
    $68 = HEAP32[$2>>2]|0;
    $69 = (_get32($68)|0);
    HEAP32[$9>>2] = $69;
    $70 = HEAP32[$8>>2]|0;
    $71 = ($70|0)==(-1);
    $72 = HEAP32[$9>>2]|0;
    $73 = ($72|0)==(-1);
    $or$cond = $71 & $73;
    if ($or$cond) {
     $74 = HEAP32[$2>>2]|0;
     $75 = ((($74)) + 100|0);
     HEAP32[$75>>2] = 36;
     $76 = HEAP32[$2>>2]|0;
     $77 = ((($76)) + 796|0);
     HEAP32[$77>>2] = -1;
     break;
    }
    $78 = HEAP32[$9>>2]|0;
    $79 = ($78|0)!=(0);
    if ($79) {
     HEAP32[$8>>2] = -2;
    }
    $80 = HEAP32[$8>>2]|0;
    $81 = HEAP32[$2>>2]|0;
    $82 = ((($81)) + 796|0);
    HEAP32[$82>>2] = $80;
    $83 = HEAP32[$6>>2]|0;
    $84 = HEAP32[$2>>2]|0;
    $85 = ((($84)) + 68|0);
    HEAP32[$85>>2] = $83;
    $86 = HEAP32[$5>>2]|0;
    $87 = HEAP32[$2>>2]|0;
    $88 = ((($87)) + 68|0);
    $89 = ((($88)) + 4|0);
    HEAP32[$89>>2] = $86;
    $90 = HEAP32[$8>>2]|0;
    $91 = HEAP32[$2>>2]|0;
    $92 = ((($91)) + 68|0);
    $93 = ((($92)) + 8|0);
    HEAP32[$93>>2] = $90;
   } else {
    $47 = ((($46)) + 100|0);
    HEAP32[$47>>2] = 36;
    $48 = HEAP32[$2>>2]|0;
    $49 = ((($48)) + 796|0);
    HEAP32[$49>>2] = -1;
   }
  } while(0);
  $94 = HEAP32[$2>>2]|0;
  $95 = HEAP32[$3>>2]|0;
  (_set_file_offset($94,$95)|0);
 }
 $96 = HEAP32[$2>>2]|0;
 $97 = ((($96)) + 796|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(-1);
 if ($99) {
  $103 = 0;
 } else {
  $100 = HEAP32[$2>>2]|0;
  $101 = ((($100)) + 796|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $102;
 }
 HEAP32[$1>>2] = $103;
 $104 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($104|0);
}
function _stb_vorbis_stream_length_in_seconds($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_stb_vorbis_stream_length_in_samples($2)|0);
 $4 = (+($3>>>0));
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (+($6>>>0));
 $8 = $4 / $7;
 STACKTOP = sp;return (+$8);
}
function _stb_vorbis_get_samples_short_interleaved($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 32|0;
 $5 = sp + 28|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 $12 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $13 = HEAP32[$7>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 $15 = (($13|0) / ($14|0))&-1;
 HEAP32[$9>>2] = $15;
 HEAP32[$10>>2] = 0;
 $16 = HEAP32[$4>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$11>>2] = $18;
 $19 = HEAP32[$11>>2]|0;
 $20 = HEAP32[$5>>2]|0;
 $21 = ($19|0)>($20|0);
 if ($21) {
  $22 = HEAP32[$5>>2]|0;
  HEAP32[$11>>2] = $22;
 }
 while(1) {
  $23 = HEAP32[$10>>2]|0;
  $24 = HEAP32[$9>>2]|0;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   label = 10;
   break;
  }
  $26 = HEAP32[$4>>2]|0;
  $27 = ((($26)) + 1508|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$4>>2]|0;
  $30 = ((($29)) + 1504|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($28) - ($31))|0;
  HEAP32[$12>>2] = $32;
  $33 = HEAP32[$10>>2]|0;
  $34 = HEAP32[$12>>2]|0;
  $35 = (($33) + ($34))|0;
  $36 = HEAP32[$9>>2]|0;
  $37 = ($35|0)>=($36|0);
  if ($37) {
   $38 = HEAP32[$9>>2]|0;
   $39 = HEAP32[$10>>2]|0;
   $40 = (($38) - ($39))|0;
   HEAP32[$12>>2] = $40;
  }
  $41 = HEAP32[$12>>2]|0;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = HEAP32[$5>>2]|0;
   $44 = HEAP32[$6>>2]|0;
   $45 = HEAP32[$4>>2]|0;
   $46 = ((($45)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = HEAP32[$4>>2]|0;
   $49 = ((($48)) + 800|0);
   $50 = HEAP32[$4>>2]|0;
   $51 = ((($50)) + 1504|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = HEAP32[$12>>2]|0;
   _convert_channels_short_interleaved($43,$44,$47,$49,$52,$53);
  }
  $54 = HEAP32[$12>>2]|0;
  $55 = HEAP32[$5>>2]|0;
  $56 = Math_imul($54, $55)|0;
  $57 = HEAP32[$6>>2]|0;
  $58 = (($57) + ($56<<1)|0);
  HEAP32[$6>>2] = $58;
  $59 = HEAP32[$12>>2]|0;
  $60 = HEAP32[$10>>2]|0;
  $61 = (($60) + ($59))|0;
  HEAP32[$10>>2] = $61;
  $62 = HEAP32[$12>>2]|0;
  $63 = HEAP32[$4>>2]|0;
  $64 = ((($63)) + 1504|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($62))|0;
  HEAP32[$64>>2] = $66;
  $67 = HEAP32[$10>>2]|0;
  $68 = HEAP32[$9>>2]|0;
  $69 = ($67|0)==($68|0);
  if ($69) {
   label = 10;
   break;
  }
  $70 = HEAP32[$4>>2]|0;
  $71 = (_stb_vorbis_get_frame_float($70,0,$8)|0);
  $72 = ($71|0)!=(0);
  if (!($72)) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  $73 = HEAP32[$10>>2]|0;
  STACKTOP = sp;return ($73|0);
 }
 return (0)|0;
}
function _stb_vorbis_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 _vorbis_deinit($4);
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 _setup_free($5,$6);
 STACKTOP = sp;return;
}
function _vorbis_deinit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$1>>2] = $0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 396|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 L1: do {
  if ($9) {
   HEAP32[$2>>2] = 0;
   while(1) {
    $10 = HEAP32[$2>>2]|0;
    $11 = HEAP32[$1>>2]|0;
    $12 = ((($11)) + 264|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($10|0)<($13|0);
    if (!($14)) {
     break L1;
    }
    $15 = HEAP32[$1>>2]|0;
    $16 = ((($15)) + 396|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$2>>2]|0;
    $19 = (($17) + (($18*24)|0)|0);
    HEAP32[$4>>2] = $19;
    $20 = HEAP32[$4>>2]|0;
    $21 = ((($20)) + 16|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)!=(0|0);
    if ($23) {
     HEAP32[$3>>2] = 0;
     while(1) {
      $24 = HEAP32[$3>>2]|0;
      $25 = HEAP32[$1>>2]|0;
      $26 = ((($25)) + 124|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = HEAP32[$4>>2]|0;
      $29 = ((($28)) + 13|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = $30&255;
      $32 = (($27) + (($31*2096)|0)|0);
      $33 = ((($32)) + 4|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($24|0)<($34|0);
      $36 = HEAP32[$1>>2]|0;
      $37 = HEAP32[$4>>2]|0;
      $38 = ((($37)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      if (!($35)) {
       break;
      }
      $40 = HEAP32[$3>>2]|0;
      $41 = (($39) + ($40<<2)|0);
      $42 = HEAP32[$41>>2]|0;
      _setup_free($36,$42);
      $43 = HEAP32[$3>>2]|0;
      $44 = (($43) + 1)|0;
      HEAP32[$3>>2] = $44;
     }
     _setup_free($36,$39);
    }
    $45 = HEAP32[$1>>2]|0;
    $46 = HEAP32[$4>>2]|0;
    $47 = ((($46)) + 20|0);
    $48 = HEAP32[$47>>2]|0;
    _setup_free($45,$48);
    $49 = HEAP32[$2>>2]|0;
    $50 = (($49) + 1)|0;
    HEAP32[$2>>2] = $50;
   }
  }
 } while(0);
 $51 = HEAP32[$1>>2]|0;
 $52 = ((($51)) + 124|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  HEAP32[$2>>2] = 0;
  while(1) {
   $55 = HEAP32[$2>>2]|0;
   $56 = HEAP32[$1>>2]|0;
   $57 = ((($56)) + 120|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($55|0)<($58|0);
   $60 = HEAP32[$1>>2]|0;
   if (!($59)) {
    break;
   }
   $61 = ((($60)) + 124|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = (($62) + (($63*2096)|0)|0);
   HEAP32[$5>>2] = $64;
   $65 = HEAP32[$1>>2]|0;
   $66 = HEAP32[$5>>2]|0;
   $67 = ((($66)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   _setup_free($65,$68);
   $69 = HEAP32[$1>>2]|0;
   $70 = HEAP32[$5>>2]|0;
   $71 = ((($70)) + 28|0);
   $72 = HEAP32[$71>>2]|0;
   _setup_free($69,$72);
   $73 = HEAP32[$1>>2]|0;
   $74 = HEAP32[$5>>2]|0;
   $75 = ((($74)) + 32|0);
   $76 = HEAP32[$75>>2]|0;
   _setup_free($73,$76);
   $77 = HEAP32[$1>>2]|0;
   $78 = HEAP32[$5>>2]|0;
   $79 = ((($78)) + 2084|0);
   $80 = HEAP32[$79>>2]|0;
   _setup_free($77,$80);
   $81 = HEAP32[$1>>2]|0;
   $82 = HEAP32[$5>>2]|0;
   $83 = ((($82)) + 2088|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)!=(0|0);
   if ($85) {
    $86 = HEAP32[$5>>2]|0;
    $87 = ((($86)) + 2088|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ((($88)) + -4|0);
    $90 = $89;
   } else {
    $90 = 0;
   }
   _setup_free($81,$90);
   $91 = HEAP32[$2>>2]|0;
   $92 = (($91) + 1)|0;
   HEAP32[$2>>2] = $92;
  }
  $93 = HEAP32[$1>>2]|0;
  $94 = ((($93)) + 124|0);
  $95 = HEAP32[$94>>2]|0;
  _setup_free($60,$95);
 }
 $96 = HEAP32[$1>>2]|0;
 $97 = HEAP32[$1>>2]|0;
 $98 = ((($97)) + 260|0);
 $99 = HEAP32[$98>>2]|0;
 _setup_free($96,$99);
 $100 = HEAP32[$1>>2]|0;
 $101 = HEAP32[$1>>2]|0;
 $102 = ((($101)) + 396|0);
 $103 = HEAP32[$102>>2]|0;
 _setup_free($100,$103);
 $104 = HEAP32[$1>>2]|0;
 $105 = ((($104)) + 404|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)!=(0|0);
 if ($107) {
  HEAP32[$2>>2] = 0;
  while(1) {
   $108 = HEAP32[$2>>2]|0;
   $109 = HEAP32[$1>>2]|0;
   $110 = ((($109)) + 400|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($108|0)<($111|0);
   $113 = HEAP32[$1>>2]|0;
   $114 = HEAP32[$1>>2]|0;
   $115 = ((($114)) + 404|0);
   $116 = HEAP32[$115>>2]|0;
   if (!($112)) {
    break;
   }
   $117 = HEAP32[$2>>2]|0;
   $118 = (($116) + (($117*40)|0)|0);
   $119 = ((($118)) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   _setup_free($113,$120);
   $121 = HEAP32[$2>>2]|0;
   $122 = (($121) + 1)|0;
   HEAP32[$2>>2] = $122;
  }
  _setup_free($113,$116);
 }
 HEAP32[$2>>2] = 0;
 while(1) {
  $123 = HEAP32[$2>>2]|0;
  $124 = HEAP32[$1>>2]|0;
  $125 = ((($124)) + 4|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($123|0)<($126|0);
  $128 = HEAP32[$2>>2]|0;
  $129 = ($128|0)<(16);
  $130 = $127 ? $129 : 0;
  if (!($130)) {
   break;
  }
  $131 = HEAP32[$1>>2]|0;
  $132 = HEAP32[$1>>2]|0;
  $133 = ((($132)) + 800|0);
  $134 = HEAP32[$2>>2]|0;
  $135 = (($133) + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  _setup_free($131,$136);
  $137 = HEAP32[$1>>2]|0;
  $138 = HEAP32[$1>>2]|0;
  $139 = ((($138)) + 928|0);
  $140 = HEAP32[$2>>2]|0;
  $141 = (($139) + ($140<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  _setup_free($137,$142);
  $143 = HEAP32[$1>>2]|0;
  $144 = HEAP32[$1>>2]|0;
  $145 = ((($144)) + 996|0);
  $146 = HEAP32[$2>>2]|0;
  $147 = (($145) + ($146<<2)|0);
  $148 = HEAP32[$147>>2]|0;
  _setup_free($143,$148);
  $149 = HEAP32[$2>>2]|0;
  $150 = (($149) + 1)|0;
  HEAP32[$2>>2] = $150;
 }
 HEAP32[$2>>2] = 0;
 while(1) {
  $151 = HEAP32[$2>>2]|0;
  $152 = ($151|0)<(2);
  $153 = HEAP32[$1>>2]|0;
  if (!($152)) {
   break;
  }
  $154 = HEAP32[$1>>2]|0;
  $155 = ((($154)) + 1068|0);
  $156 = HEAP32[$2>>2]|0;
  $157 = (($155) + ($156<<2)|0);
  $158 = HEAP32[$157>>2]|0;
  _setup_free($153,$158);
  $159 = HEAP32[$1>>2]|0;
  $160 = HEAP32[$1>>2]|0;
  $161 = ((($160)) + 1076|0);
  $162 = HEAP32[$2>>2]|0;
  $163 = (($161) + ($162<<2)|0);
  $164 = HEAP32[$163>>2]|0;
  _setup_free($159,$164);
  $165 = HEAP32[$1>>2]|0;
  $166 = HEAP32[$1>>2]|0;
  $167 = ((($166)) + 1084|0);
  $168 = HEAP32[$2>>2]|0;
  $169 = (($167) + ($168<<2)|0);
  $170 = HEAP32[$169>>2]|0;
  _setup_free($165,$170);
  $171 = HEAP32[$1>>2]|0;
  $172 = HEAP32[$1>>2]|0;
  $173 = ((($172)) + 1092|0);
  $174 = HEAP32[$2>>2]|0;
  $175 = (($173) + ($174<<2)|0);
  $176 = HEAP32[$175>>2]|0;
  _setup_free($171,$176);
  $177 = HEAP32[$1>>2]|0;
  $178 = HEAP32[$1>>2]|0;
  $179 = ((($178)) + 1100|0);
  $180 = HEAP32[$2>>2]|0;
  $181 = (($179) + ($180<<2)|0);
  $182 = HEAP32[$181>>2]|0;
  _setup_free($177,$182);
  $183 = HEAP32[$2>>2]|0;
  $184 = (($183) + 1)|0;
  HEAP32[$2>>2] = $184;
 }
 $185 = ((($153)) + 28|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = ($186|0)!=(0);
 if (!($187)) {
  STACKTOP = sp;return;
 }
 $188 = HEAP32[$1>>2]|0;
 $189 = ((($188)) + 20|0);
 $190 = HEAP32[$189>>2]|0;
 (_fclose($190)|0);
 STACKTOP = sp;return;
}
function _setup_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$3>>2]|0;
 _free($8);
 STACKTOP = sp;return;
}
function _convert_channels_short_interleaved($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 44|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 32|0;
 $10 = sp + 28|0;
 $11 = sp + 24|0;
 $12 = sp + 20|0;
 $13 = sp + 16|0;
 $14 = sp + 12|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $17 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 HEAP32[$11>>2] = $5;
 $18 = HEAP32[$6>>2]|0;
 $19 = HEAP32[$8>>2]|0;
 $20 = ($18|0)!=($19|0);
 $21 = HEAP32[$6>>2]|0;
 $22 = ($21|0)<=(2);
 $or$cond = $20 & $22;
 $23 = HEAP32[$8>>2]|0;
 $24 = ($23|0)<=(6);
 $or$cond3 = $or$cond & $24;
 $25 = HEAP32[$6>>2]|0;
 if ($or$cond3) {
  $26 = ($25|0)==(2);
  if (!($26)) {
   ___assert_fail((15072|0),(14636|0),4760,(15083|0));
   // unreachable;
  }
  HEAP32[$12>>2] = 0;
  while(1) {
   $27 = HEAP32[$12>>2]|0;
   $28 = HEAP32[$6>>2]|0;
   $29 = ($27|0)<($28|0);
   if (!($29)) {
    break;
   }
   $30 = HEAP32[$7>>2]|0;
   $31 = HEAP32[$8>>2]|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = HEAP32[$10>>2]|0;
   $34 = HEAP32[$11>>2]|0;
   _compute_stereo_samples($30,$31,$32,$33,$34);
   $35 = HEAP32[$12>>2]|0;
   $36 = (($35) + 1)|0;
   HEAP32[$12>>2] = $36;
  }
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$8>>2]|0;
 $38 = ($25|0)<($37|0);
 $39 = HEAP32[$6>>2]|0;
 $40 = HEAP32[$8>>2]|0;
 $41 = $38 ? $39 : $40;
 HEAP32[$13>>2] = $41;
 HEAP32[$14>>2] = 0;
 while(1) {
  $42 = HEAP32[$14>>2]|0;
  $43 = HEAP32[$11>>2]|0;
  $44 = ($42|0)<($43|0);
  if (!($44)) {
   break;
  }
  HEAP32[$12>>2] = 0;
  while(1) {
   $45 = HEAP32[$12>>2]|0;
   $46 = HEAP32[$13>>2]|0;
   $47 = ($45|0)<($46|0);
   if (!($47)) {
    break;
   }
   $48 = HEAP32[$9>>2]|0;
   $49 = HEAP32[$12>>2]|0;
   $50 = (($48) + ($49<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = HEAP32[$10>>2]|0;
   $53 = HEAP32[$14>>2]|0;
   $54 = (($52) + ($53))|0;
   $55 = (($51) + ($54<<2)|0);
   $56 = +HEAPF32[$55>>2];
   HEAPF32[$16>>2] = $56;
   $57 = +HEAPF32[$16>>2];
   $58 = $57 + 384.0;
   HEAPF32[$15>>2] = $58;
   $59 = HEAP32[$15>>2]|0;
   $60 = (($59) - 1136656384)|0;
   HEAP32[$17>>2] = $60;
   $61 = HEAP32[$17>>2]|0;
   $62 = (($61) + 32768)|0;
   $63 = ($62>>>0)>(65535);
   if ($63) {
    $64 = HEAP32[$17>>2]|0;
    $65 = ($64|0)<(0);
    $66 = $65 ? -32768 : 32767;
    HEAP32[$17>>2] = $66;
   }
   $67 = HEAP32[$17>>2]|0;
   $68 = $67&65535;
   $69 = HEAP32[$7>>2]|0;
   $70 = ((($69)) + 2|0);
   HEAP32[$7>>2] = $70;
   HEAP16[$69>>1] = $68;
   $71 = HEAP32[$12>>2]|0;
   $72 = (($71) + 1)|0;
   HEAP32[$12>>2] = $72;
  }
  while(1) {
   $73 = HEAP32[$12>>2]|0;
   $74 = HEAP32[$6>>2]|0;
   $75 = ($73|0)<($74|0);
   if (!($75)) {
    break;
   }
   $76 = HEAP32[$7>>2]|0;
   $77 = ((($76)) + 2|0);
   HEAP32[$7>>2] = $77;
   HEAP16[$76>>1] = 0;
   $78 = HEAP32[$12>>2]|0;
   $79 = (($78) + 1)|0;
   HEAP32[$12>>2] = $79;
  }
  $80 = HEAP32[$14>>2]|0;
  $81 = (($80) + 1)|0;
  HEAP32[$14>>2] = $81;
 }
 STACKTOP = sp;return;
}
function _stb_vorbis_get_frame_float($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 $11 = HEAP32[$4>>2]|0;
 $12 = ((($11)) + 48|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)!=(0);
 $15 = HEAP32[$4>>2]|0;
 if ($14) {
  $16 = (_error($15,2)|0);
  HEAP32[$3>>2] = $16;
  $65 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($65|0);
 }
 $17 = (_vorbis_decode_packet($15,$7,$9,$8)|0);
 $18 = ($17|0)!=(0);
 $19 = HEAP32[$4>>2]|0;
 if (!($18)) {
  $20 = ((($19)) + 1508|0);
  HEAP32[$20>>2] = 0;
  $21 = HEAP32[$4>>2]|0;
  $22 = ((($21)) + 1504|0);
  HEAP32[$22>>2] = 0;
  HEAP32[$3>>2] = 0;
  $65 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($65|0);
 }
 $23 = HEAP32[$7>>2]|0;
 $24 = HEAP32[$9>>2]|0;
 $25 = HEAP32[$8>>2]|0;
 $26 = (_vorbis_finish_frame($19,$23,$24,$25)|0);
 HEAP32[$7>>2] = $26;
 HEAP32[$10>>2] = 0;
 while(1) {
  $27 = HEAP32[$10>>2]|0;
  $28 = HEAP32[$4>>2]|0;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = HEAP32[$4>>2]|0;
  $33 = ((($32)) + 800|0);
  $34 = HEAP32[$10>>2]|0;
  $35 = (($33) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$9>>2]|0;
  $38 = (($36) + ($37<<2)|0);
  $39 = HEAP32[$4>>2]|0;
  $40 = ((($39)) + 864|0);
  $41 = HEAP32[$10>>2]|0;
  $42 = (($40) + ($41<<2)|0);
  HEAP32[$42>>2] = $38;
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$10>>2] = $44;
 }
 $45 = HEAP32[$9>>2]|0;
 $46 = HEAP32[$4>>2]|0;
 $47 = ((($46)) + 1504|0);
 HEAP32[$47>>2] = $45;
 $48 = HEAP32[$9>>2]|0;
 $49 = HEAP32[$7>>2]|0;
 $50 = (($48) + ($49))|0;
 $51 = HEAP32[$4>>2]|0;
 $52 = ((($51)) + 1508|0);
 HEAP32[$52>>2] = $50;
 $53 = HEAP32[$5>>2]|0;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  $55 = HEAP32[$4>>2]|0;
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$5>>2]|0;
  HEAP32[$58>>2] = $57;
 }
 $59 = HEAP32[$6>>2]|0;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $61 = HEAP32[$4>>2]|0;
  $62 = ((($61)) + 864|0);
  $63 = HEAP32[$6>>2]|0;
  HEAP32[$63>>2] = $62;
 }
 $64 = HEAP32[$7>>2]|0;
 HEAP32[$3>>2] = $64;
 $65 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($65|0);
}
function _error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($5)) + 100|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 96|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 $11 = HEAP32[$3>>2]|0;
 $12 = ($11|0)!=(1);
 $or$cond = $10 & $12;
 if (!($or$cond)) {
  STACKTOP = sp;return 0;
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = HEAP32[$2>>2]|0;
 $15 = ((($14)) + 100|0);
 HEAP32[$15>>2] = $13;
 STACKTOP = sp;return 0;
}
function _vorbis_decode_packet($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $12 = HEAP32[$5>>2]|0;
 $13 = HEAP32[$7>>2]|0;
 $14 = HEAP32[$8>>2]|0;
 $15 = (_vorbis_decode_initial($12,$13,$10,$14,$11,$9)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = HEAP32[$5>>2]|0;
  $18 = HEAP32[$6>>2]|0;
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($19)) + 412|0);
  $21 = HEAP32[$9>>2]|0;
  $22 = (($20) + (($21*6)|0)|0);
  $23 = HEAP32[$7>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$10>>2]|0;
  $26 = HEAP32[$8>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$11>>2]|0;
  $29 = HEAP32[$7>>2]|0;
  $30 = (_vorbis_decode_packet_rest($17,$18,$22,$24,$25,$27,$28,$29)|0);
  HEAP32[$4>>2] = $30;
  $31 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($31|0);
 } else {
  HEAP32[$4>>2] = 0;
  $31 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _vorbis_finish_frame($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 44|0;
 $5 = sp + 40|0;
 $6 = sp + 36|0;
 $7 = sp + 32|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 20|0;
 $11 = sp + 16|0;
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $15 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $16 = HEAP32[$5>>2]|0;
 $17 = ((($16)) + 992|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 L1: do {
  if ($19) {
   $20 = HEAP32[$5>>2]|0;
   $21 = ((($20)) + 992|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$14>>2] = $22;
   $23 = HEAP32[$5>>2]|0;
   $24 = HEAP32[$14>>2]|0;
   $25 = (_get_window($23,$24)|0);
   HEAP32[$15>>2] = $25;
   HEAP32[$12>>2] = 0;
   while(1) {
    $26 = HEAP32[$12>>2]|0;
    $27 = HEAP32[$5>>2]|0;
    $28 = ((($27)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($26|0)<($29|0);
    if (!($30)) {
     break L1;
    }
    HEAP32[$13>>2] = 0;
    while(1) {
     $31 = HEAP32[$13>>2]|0;
     $32 = HEAP32[$14>>2]|0;
     $33 = ($31|0)<($32|0);
     if (!($33)) {
      break;
     }
     $34 = HEAP32[$5>>2]|0;
     $35 = ((($34)) + 800|0);
     $36 = HEAP32[$12>>2]|0;
     $37 = (($35) + ($36<<2)|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = HEAP32[$7>>2]|0;
     $40 = HEAP32[$13>>2]|0;
     $41 = (($39) + ($40))|0;
     $42 = (($38) + ($41<<2)|0);
     $43 = +HEAPF32[$42>>2];
     $44 = HEAP32[$15>>2]|0;
     $45 = HEAP32[$13>>2]|0;
     $46 = (($44) + ($45<<2)|0);
     $47 = +HEAPF32[$46>>2];
     $48 = $43 * $47;
     $49 = HEAP32[$5>>2]|0;
     $50 = ((($49)) + 928|0);
     $51 = HEAP32[$12>>2]|0;
     $52 = (($50) + ($51<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = HEAP32[$13>>2]|0;
     $55 = (($53) + ($54<<2)|0);
     $56 = +HEAPF32[$55>>2];
     $57 = HEAP32[$15>>2]|0;
     $58 = HEAP32[$14>>2]|0;
     $59 = (($58) - 1)|0;
     $60 = HEAP32[$13>>2]|0;
     $61 = (($59) - ($60))|0;
     $62 = (($57) + ($61<<2)|0);
     $63 = +HEAPF32[$62>>2];
     $64 = $56 * $63;
     $65 = $48 + $64;
     $66 = HEAP32[$5>>2]|0;
     $67 = ((($66)) + 800|0);
     $68 = HEAP32[$12>>2]|0;
     $69 = (($67) + ($68<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = HEAP32[$7>>2]|0;
     $72 = HEAP32[$13>>2]|0;
     $73 = (($71) + ($72))|0;
     $74 = (($70) + ($73<<2)|0);
     HEAPF32[$74>>2] = $65;
     $75 = HEAP32[$13>>2]|0;
     $76 = (($75) + 1)|0;
     HEAP32[$13>>2] = $76;
    }
    $77 = HEAP32[$12>>2]|0;
    $78 = (($77) + 1)|0;
    HEAP32[$12>>2] = $78;
   }
  }
 } while(0);
 $79 = HEAP32[$5>>2]|0;
 $80 = ((($79)) + 992|0);
 $81 = HEAP32[$80>>2]|0;
 HEAP32[$9>>2] = $81;
 $82 = HEAP32[$6>>2]|0;
 $83 = HEAP32[$8>>2]|0;
 $84 = (($82) - ($83))|0;
 $85 = HEAP32[$5>>2]|0;
 $86 = ((($85)) + 992|0);
 HEAP32[$86>>2] = $84;
 HEAP32[$10>>2] = 0;
 while(1) {
  $87 = HEAP32[$10>>2]|0;
  $88 = HEAP32[$5>>2]|0;
  $89 = ((($88)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($87|0)<($90|0);
  if (!($91)) {
   break;
  }
  HEAP32[$11>>2] = 0;
  while(1) {
   $92 = HEAP32[$8>>2]|0;
   $93 = HEAP32[$11>>2]|0;
   $94 = (($92) + ($93))|0;
   $95 = HEAP32[$6>>2]|0;
   $96 = ($94|0)<($95|0);
   if (!($96)) {
    break;
   }
   $97 = HEAP32[$5>>2]|0;
   $98 = ((($97)) + 800|0);
   $99 = HEAP32[$10>>2]|0;
   $100 = (($98) + ($99<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = HEAP32[$8>>2]|0;
   $103 = HEAP32[$11>>2]|0;
   $104 = (($102) + ($103))|0;
   $105 = (($101) + ($104<<2)|0);
   $106 = +HEAPF32[$105>>2];
   $107 = HEAP32[$5>>2]|0;
   $108 = ((($107)) + 928|0);
   $109 = HEAP32[$10>>2]|0;
   $110 = (($108) + ($109<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = HEAP32[$11>>2]|0;
   $113 = (($111) + ($112<<2)|0);
   HEAPF32[$113>>2] = $106;
   $114 = HEAP32[$11>>2]|0;
   $115 = (($114) + 1)|0;
   HEAP32[$11>>2] = $115;
  }
  $116 = HEAP32[$10>>2]|0;
  $117 = (($116) + 1)|0;
  HEAP32[$10>>2] = $117;
 }
 $118 = HEAP32[$9>>2]|0;
 $119 = ($118|0)!=(0);
 if (!($119)) {
  HEAP32[$4>>2] = 0;
  $134 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($134|0);
 }
 $120 = HEAP32[$6>>2]|0;
 $121 = HEAP32[$8>>2]|0;
 $122 = ($120|0)<($121|0);
 if ($122) {
  $123 = HEAP32[$6>>2]|0;
  HEAP32[$8>>2] = $123;
 }
 $124 = HEAP32[$8>>2]|0;
 $125 = HEAP32[$7>>2]|0;
 $126 = (($124) - ($125))|0;
 $127 = HEAP32[$5>>2]|0;
 $128 = ((($127)) + 1416|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (($129) + ($126))|0;
 HEAP32[$128>>2] = $130;
 $131 = HEAP32[$8>>2]|0;
 $132 = HEAP32[$7>>2]|0;
 $133 = (($131) - ($132))|0;
 HEAP32[$4>>2] = $133;
 $134 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($134|0);
}
function _get_window($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 1;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$4>>2]|0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 112|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)==($10|0);
 if ($11) {
  $12 = HEAP32[$3>>2]|0;
  $13 = ((($12)) + 1092|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$2>>2] = $14;
  $24 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 $15 = HEAP32[$4>>2]|0;
 $16 = HEAP32[$3>>2]|0;
 $17 = ((($16)) + 116|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)==($18|0);
 if (!($19)) {
  ___assert_fail((14634|0),(14636|0),2659,(14658|0));
  // unreachable;
 }
 $20 = HEAP32[$3>>2]|0;
 $21 = ((($20)) + 1092|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$2>>2] = $23;
 $24 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($24|0);
}
function _vorbis_decode_initial($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 48|0;
 $7 = sp + 44|0;
 $8 = sp + 40|0;
 $9 = sp + 36|0;
 $10 = sp + 32|0;
 $11 = sp + 28|0;
 $12 = sp + 24|0;
 $13 = sp + 20|0;
 $14 = sp + 16|0;
 $15 = sp + 12|0;
 $16 = sp + 8|0;
 $17 = sp + 4|0;
 $18 = sp;
 HEAP32[$7>>2] = $0;
 HEAP32[$8>>2] = $1;
 HEAP32[$9>>2] = $2;
 HEAP32[$10>>2] = $3;
 HEAP32[$11>>2] = $4;
 HEAP32[$12>>2] = $5;
 $19 = HEAP32[$7>>2]|0;
 $20 = ((($19)) + 1508|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$7>>2]|0;
 $22 = ((($21)) + 1504|0);
 HEAP32[$22>>2] = 0;
 L1: while(1) {
  $23 = HEAP32[$7>>2]|0;
  $24 = ((($23)) + 96|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0);
  if ($26) {
   label = 3;
   break;
  }
  $27 = HEAP32[$7>>2]|0;
  $28 = (_maybe_start_packet($27)|0);
  $29 = ($28|0)!=(0);
  if (!($29)) {
   label = 5;
   break;
  }
  $30 = HEAP32[$7>>2]|0;
  $31 = (_get_bits($30,1)|0);
  $32 = ($31|0)!=(0);
  $33 = HEAP32[$7>>2]|0;
  if (!($32)) {
   label = 10;
   break;
  }
  $34 = ((($33)) + 48|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = ($35<<24>>24)!=(0);
  if ($36) {
   label = 8;
   break;
  }
  while(1) {
   $39 = HEAP32[$7>>2]|0;
   $40 = (_get8_packet($39)|0);
   $41 = (-1)!=($40|0);
   if (!($41)) {
    continue L1;
   }
  }
 }
 if ((label|0) == 3) {
  HEAP32[$6>>2] = 0;
  $137 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($137|0);
 }
 else if ((label|0) == 5) {
  HEAP32[$6>>2] = 0;
  $137 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($137|0);
 }
 else if ((label|0) == 8) {
  $37 = HEAP32[$7>>2]|0;
  $38 = (_error($37,35)|0);
  HEAP32[$6>>2] = $38;
  $137 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($137|0);
 }
 else if ((label|0) == 10) {
  $42 = ((($33)) + 80|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)!=(0|0);
  do {
   if ($44) {
    $45 = HEAP32[$7>>2]|0;
    $46 = ((($45)) + 80|0);
    $47 = ((($46)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = HEAP32[$7>>2]|0;
    $50 = ((($49)) + 92|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($48|0)==($51|0);
    if ($52) {
     break;
    } else {
     ___assert_fail((14669|0),(14636|0),2738,(15050|0));
     // unreachable;
    }
   }
  } while(0);
  $53 = HEAP32[$7>>2]|0;
  $54 = HEAP32[$7>>2]|0;
  $55 = ((($54)) + 408|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) - 1)|0;
  $58 = (_ilog($57)|0);
  $59 = (_get_bits($53,$58)|0);
  HEAP32[$14>>2] = $59;
  $60 = HEAP32[$14>>2]|0;
  $61 = ($60|0)==(-1);
  if ($61) {
   HEAP32[$6>>2] = 0;
   $137 = HEAP32[$6>>2]|0;
   STACKTOP = sp;return ($137|0);
  }
  $62 = HEAP32[$14>>2]|0;
  $63 = HEAP32[$7>>2]|0;
  $64 = ((($63)) + 408|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($62|0)>=($65|0);
  if ($66) {
   HEAP32[$6>>2] = 0;
   $137 = HEAP32[$6>>2]|0;
   STACKTOP = sp;return ($137|0);
  }
  $67 = HEAP32[$14>>2]|0;
  $68 = HEAP32[$12>>2]|0;
  HEAP32[$68>>2] = $67;
  $69 = HEAP32[$7>>2]|0;
  $70 = ((($69)) + 412|0);
  $71 = HEAP32[$14>>2]|0;
  $72 = (($70) + (($71*6)|0)|0);
  HEAP32[$13>>2] = $72;
  $73 = HEAP32[$13>>2]|0;
  $74 = HEAP8[$73>>0]|0;
  $75 = ($74<<24>>24)!=(0);
  if ($75) {
   $76 = HEAP32[$7>>2]|0;
   $77 = ((($76)) + 116|0);
   $78 = HEAP32[$77>>2]|0;
   HEAP32[$15>>2] = $78;
   $79 = HEAP32[$7>>2]|0;
   $80 = (_get_bits($79,1)|0);
   HEAP32[$16>>2] = $80;
   $81 = HEAP32[$7>>2]|0;
   $82 = (_get_bits($81,1)|0);
   HEAP32[$17>>2] = $82;
  } else {
   HEAP32[$17>>2] = 0;
   HEAP32[$16>>2] = 0;
   $83 = HEAP32[$7>>2]|0;
   $84 = ((($83)) + 112|0);
   $85 = HEAP32[$84>>2]|0;
   HEAP32[$15>>2] = $85;
  }
  $86 = HEAP32[$15>>2]|0;
  $87 = $86 >> 1;
  HEAP32[$18>>2] = $87;
  $88 = HEAP32[$13>>2]|0;
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  $91 = ($90|0)==(0);
  $92 = HEAP32[$16>>2]|0;
  $93 = ($92|0)!=(0);
  $or$cond = $91 | $93;
  if ($or$cond) {
   $108 = HEAP32[$8>>2]|0;
   HEAP32[$108>>2] = 0;
   $109 = HEAP32[$18>>2]|0;
   $110 = HEAP32[$9>>2]|0;
   HEAP32[$110>>2] = $109;
  } else {
   $94 = HEAP32[$15>>2]|0;
   $95 = HEAP32[$7>>2]|0;
   $96 = ((($95)) + 112|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($94) - ($97))|0;
   $99 = $98 >> 2;
   $100 = HEAP32[$8>>2]|0;
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[$15>>2]|0;
   $102 = HEAP32[$7>>2]|0;
   $103 = ((($102)) + 112|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($101) + ($104))|0;
   $106 = $105 >> 2;
   $107 = HEAP32[$9>>2]|0;
   HEAP32[$107>>2] = $106;
  }
  $111 = HEAP32[$13>>2]|0;
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  $114 = ($113|0)==(0);
  $115 = HEAP32[$17>>2]|0;
  $116 = ($115|0)!=(0);
  $or$cond3 = $114 | $116;
  if ($or$cond3) {
   $133 = HEAP32[$18>>2]|0;
   $134 = HEAP32[$10>>2]|0;
   HEAP32[$134>>2] = $133;
   $135 = HEAP32[$15>>2]|0;
   $136 = HEAP32[$11>>2]|0;
   HEAP32[$136>>2] = $135;
  } else {
   $117 = HEAP32[$15>>2]|0;
   $118 = ($117*3)|0;
   $119 = HEAP32[$7>>2]|0;
   $120 = ((($119)) + 112|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($118) - ($121))|0;
   $123 = $122 >> 2;
   $124 = HEAP32[$10>>2]|0;
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[$15>>2]|0;
   $126 = ($125*3)|0;
   $127 = HEAP32[$7>>2]|0;
   $128 = ((($127)) + 112|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($126) + ($129))|0;
   $131 = $130 >> 2;
   $132 = HEAP32[$11>>2]|0;
   HEAP32[$132>>2] = $131;
  }
  HEAP32[$6>>2] = 1;
  $137 = HEAP32[$6>>2]|0;
  STACKTOP = sp;return ($137|0);
 }
 return (0)|0;
}
function _vorbis_decode_packet_rest($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sink = 0, $$sink1 = 0, $$sink2 = 0, $$sink3 = 0, $$sink4 = 0, $$sink5 = 0, $$sink6 = 0, $$sink8 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0.0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0.0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0.0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0, $644 = 0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0, $653 = 0, $654 = 0, $655 = 0.0;
 var $656 = 0.0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0, $663 = 0, $664 = 0.0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0.0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0.0;
 var $674 = 0.0, $675 = 0.0, $676 = 0, $677 = 0, $678 = 0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2816|0);
 $8 = sp + 2296|0;
 $9 = sp + 2292|0;
 $10 = sp + 2288|0;
 $11 = sp + 2284|0;
 $12 = sp + 2280|0;
 $13 = sp + 2276|0;
 $14 = sp + 2272|0;
 $15 = sp + 2268|0;
 $16 = sp + 2264|0;
 $17 = sp + 2260|0;
 $18 = sp + 2256|0;
 $19 = sp + 2252|0;
 $20 = sp + 2248|0;
 $21 = sp + 2244|0;
 $22 = sp + 2240|0;
 $23 = sp + 1216|0;
 $24 = sp + 192|0;
 $25 = sp + 188|0;
 $26 = sp + 184|0;
 $27 = sp + 180|0;
 $28 = sp + 176|0;
 $29 = sp + 2560|0;
 $30 = sp + 172|0;
 $31 = sp + 168|0;
 $32 = sp + 164|0;
 $33 = sp + 160|0;
 $34 = sp + 156|0;
 $35 = sp + 152|0;
 $36 = sp + 148|0;
 $37 = sp + 144|0;
 $38 = sp + 140|0;
 $39 = sp + 136|0;
 $40 = sp + 132|0;
 $41 = sp + 128|0;
 $42 = sp + 124|0;
 $43 = sp + 120|0;
 $44 = sp + 116|0;
 $45 = sp + 112|0;
 $46 = sp + 108|0;
 $47 = sp + 104|0;
 $48 = sp + 100|0;
 $49 = sp + 96|0;
 $50 = sp + 32|0;
 $51 = sp + 28|0;
 $52 = sp + 2304|0;
 $53 = sp + 24|0;
 $54 = sp + 20|0;
 $55 = sp + 16|0;
 $56 = sp + 12|0;
 $57 = sp + 8|0;
 $58 = sp + 4|0;
 $59 = sp;
 HEAP32[$9>>2] = $0;
 HEAP32[$10>>2] = $1;
 HEAP32[$11>>2] = $2;
 HEAP32[$12>>2] = $3;
 HEAP32[$13>>2] = $4;
 HEAP32[$14>>2] = $5;
 HEAP32[$15>>2] = $6;
 HEAP32[$16>>2] = $7;
 $60 = HEAP32[$9>>2]|0;
 $61 = ((($60)) + 104|0);
 $62 = HEAP32[$11>>2]|0;
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = (($61) + ($64<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$21>>2] = $66;
 $67 = HEAP32[$9>>2]|0;
 $68 = ((($67)) + 404|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$11>>2]|0;
 $71 = ((($70)) + 1|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = (($69) + (($73*40)|0)|0);
 HEAP32[$17>>2] = $74;
 $75 = HEAP32[$21>>2]|0;
 $76 = $75 >> 1;
 HEAP32[$22>>2] = $76;
 HEAP32[$18>>2] = 0;
 while(1) {
  $77 = HEAP32[$18>>2]|0;
  $78 = HEAP32[$9>>2]|0;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($77|0)<($80|0);
  if (!($81)) {
   break;
  }
  $82 = HEAP32[$17>>2]|0;
  $83 = ((($82)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = HEAP32[$18>>2]|0;
  $86 = (($84) + (($85*3)|0)|0);
  $87 = ((($86)) + 2|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  HEAP32[$25>>2] = $89;
  $90 = HEAP32[$18>>2]|0;
  $91 = (($23) + ($90<<2)|0);
  HEAP32[$91>>2] = 0;
  $92 = HEAP32[$17>>2]|0;
  $93 = ((($92)) + 9|0);
  $94 = HEAP32[$25>>2]|0;
  $95 = (($93) + ($94)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  HEAP32[$26>>2] = $97;
  $98 = HEAP32[$9>>2]|0;
  $99 = ((($98)) + 132|0);
  $100 = HEAP32[$26>>2]|0;
  $101 = (($99) + ($100<<1)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102&65535;
  $104 = ($103|0)==(0);
  $105 = HEAP32[$9>>2]|0;
  if ($104) {
   label = 4;
   break;
  }
  $107 = ((($105)) + 260|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = HEAP32[$26>>2]|0;
  $110 = (($108) + (($109*1596)|0)|0);
  HEAP32[$27>>2] = $110;
  $111 = HEAP32[$9>>2]|0;
  $112 = (_get_bits($111,1)|0);
  $113 = ($112|0)!=(0);
  L5: do {
   if ($113) {
    $114 = HEAP32[$27>>2]|0;
    $115 = ((($114)) + 1588|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $118 = (($117) - 1)|0;
    $119 = (3560 + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    HEAP32[$30>>2] = $120;
    HEAP32[$31>>2] = 2;
    $121 = HEAP32[$9>>2]|0;
    $122 = ((($121)) + 996|0);
    $123 = HEAP32[$18>>2]|0;
    $124 = (($122) + ($123<<2)|0);
    $125 = HEAP32[$124>>2]|0;
    HEAP32[$28>>2] = $125;
    $126 = HEAP32[$9>>2]|0;
    $127 = HEAP32[$30>>2]|0;
    $128 = (_ilog($127)|0);
    $129 = (($128) - 1)|0;
    $130 = (_get_bits($126,$129)|0);
    $131 = $130&65535;
    $132 = HEAP32[$28>>2]|0;
    HEAP16[$132>>1] = $131;
    $133 = HEAP32[$9>>2]|0;
    $134 = HEAP32[$30>>2]|0;
    $135 = (_ilog($134)|0);
    $136 = (($135) - 1)|0;
    $137 = (_get_bits($133,$136)|0);
    $138 = $137&65535;
    $139 = HEAP32[$28>>2]|0;
    $140 = ((($139)) + 2|0);
    HEAP16[$140>>1] = $138;
    HEAP32[$19>>2] = 0;
    while(1) {
     $141 = HEAP32[$19>>2]|0;
     $142 = HEAP32[$27>>2]|0;
     $143 = HEAP8[$142>>0]|0;
     $144 = $143&255;
     $145 = ($141|0)<($144|0);
     if (!($145)) {
      break;
     }
     $146 = HEAP32[$27>>2]|0;
     $147 = ((($146)) + 1|0);
     $148 = HEAP32[$19>>2]|0;
     $149 = (($147) + ($148)|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     HEAP32[$32>>2] = $151;
     $152 = HEAP32[$27>>2]|0;
     $153 = ((($152)) + 33|0);
     $154 = HEAP32[$32>>2]|0;
     $155 = (($153) + ($154)|0);
     $156 = HEAP8[$155>>0]|0;
     $157 = $156&255;
     HEAP32[$33>>2] = $157;
     $158 = HEAP32[$27>>2]|0;
     $159 = ((($158)) + 49|0);
     $160 = HEAP32[$32>>2]|0;
     $161 = (($159) + ($160)|0);
     $162 = HEAP8[$161>>0]|0;
     $163 = $162&255;
     HEAP32[$34>>2] = $163;
     $164 = HEAP32[$34>>2]|0;
     $165 = 1 << $164;
     $166 = (($165) - 1)|0;
     HEAP32[$35>>2] = $166;
     HEAP32[$36>>2] = 0;
     $167 = HEAP32[$34>>2]|0;
     $168 = ($167|0)!=(0);
     if ($168) {
      $169 = HEAP32[$9>>2]|0;
      $170 = ((($169)) + 124|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = HEAP32[$27>>2]|0;
      $173 = ((($172)) + 65|0);
      $174 = HEAP32[$32>>2]|0;
      $175 = (($173) + ($174)|0);
      $176 = HEAP8[$175>>0]|0;
      $177 = $176&255;
      $178 = (($171) + (($177*2096)|0)|0);
      HEAP32[$37>>2] = $178;
      $179 = HEAP32[$9>>2]|0;
      $180 = ((($179)) + 1396|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ($181|0)<(10);
      if ($182) {
       $183 = HEAP32[$9>>2]|0;
       _prep_huffman($183);
      }
      $184 = HEAP32[$9>>2]|0;
      $185 = ((($184)) + 1392|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = $186 & 1023;
      HEAP32[$36>>2] = $187;
      $188 = HEAP32[$37>>2]|0;
      $189 = ((($188)) + 36|0);
      $190 = HEAP32[$36>>2]|0;
      $191 = (($189) + ($190<<1)|0);
      $192 = HEAP16[$191>>1]|0;
      $193 = $192 << 16 >> 16;
      HEAP32[$36>>2] = $193;
      $194 = HEAP32[$36>>2]|0;
      $195 = ($194|0)>=(0);
      if ($195) {
       $196 = HEAP32[$37>>2]|0;
       $197 = ((($196)) + 8|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = HEAP32[$36>>2]|0;
       $200 = (($198) + ($199)|0);
       $201 = HEAP8[$200>>0]|0;
       $202 = $201&255;
       HEAP32[$38>>2] = $202;
       $203 = HEAP32[$38>>2]|0;
       $204 = HEAP32[$9>>2]|0;
       $205 = ((($204)) + 1392|0);
       $206 = HEAP32[$205>>2]|0;
       $207 = $206 >>> $203;
       HEAP32[$205>>2] = $207;
       $208 = HEAP32[$38>>2]|0;
       $209 = HEAP32[$9>>2]|0;
       $210 = ((($209)) + 1396|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = (($211) - ($208))|0;
       HEAP32[$210>>2] = $212;
       $213 = HEAP32[$9>>2]|0;
       $214 = ((($213)) + 1396|0);
       $215 = HEAP32[$214>>2]|0;
       $216 = ($215|0)<(0);
       if ($216) {
        $217 = HEAP32[$9>>2]|0;
        $218 = ((($217)) + 1396|0);
        HEAP32[$218>>2] = 0;
        HEAP32[$36>>2] = -1;
       }
      } else {
       $219 = HEAP32[$9>>2]|0;
       $220 = HEAP32[$37>>2]|0;
       $221 = (_codebook_decode_scalar_raw($219,$220)|0);
       HEAP32[$36>>2] = $221;
      }
      $222 = HEAP32[$37>>2]|0;
      $223 = ((($222)) + 23|0);
      $224 = HEAP8[$223>>0]|0;
      $225 = ($224<<24>>24)!=(0);
      if ($225) {
       $226 = HEAP32[$37>>2]|0;
       $227 = ((($226)) + 2088|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = HEAP32[$36>>2]|0;
       $230 = (($228) + ($229<<2)|0);
       $231 = HEAP32[$230>>2]|0;
       HEAP32[$36>>2] = $231;
      }
     }
     HEAP32[$20>>2] = 0;
     while(1) {
      $232 = HEAP32[$20>>2]|0;
      $233 = HEAP32[$33>>2]|0;
      $234 = ($232|0)<($233|0);
      if (!($234)) {
       break;
      }
      $235 = HEAP32[$27>>2]|0;
      $236 = ((($235)) + 82|0);
      $237 = HEAP32[$32>>2]|0;
      $238 = (($236) + ($237<<4)|0);
      $239 = HEAP32[$36>>2]|0;
      $240 = HEAP32[$35>>2]|0;
      $241 = $239 & $240;
      $242 = (($238) + ($241<<1)|0);
      $243 = HEAP16[$242>>1]|0;
      $244 = $243 << 16 >> 16;
      HEAP32[$39>>2] = $244;
      $245 = HEAP32[$36>>2]|0;
      $246 = HEAP32[$34>>2]|0;
      $247 = $245 >> $246;
      HEAP32[$36>>2] = $247;
      $248 = HEAP32[$39>>2]|0;
      $249 = ($248|0)>=(0);
      if ($249) {
       $250 = HEAP32[$9>>2]|0;
       $251 = ((($250)) + 124|0);
       $252 = HEAP32[$251>>2]|0;
       $253 = HEAP32[$39>>2]|0;
       $254 = (($252) + (($253*2096)|0)|0);
       HEAP32[$41>>2] = $254;
       $255 = HEAP32[$9>>2]|0;
       $256 = ((($255)) + 1396|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = ($257|0)<(10);
       if ($258) {
        $259 = HEAP32[$9>>2]|0;
        _prep_huffman($259);
       }
       $260 = HEAP32[$9>>2]|0;
       $261 = ((($260)) + 1392|0);
       $262 = HEAP32[$261>>2]|0;
       $263 = $262 & 1023;
       HEAP32[$40>>2] = $263;
       $264 = HEAP32[$41>>2]|0;
       $265 = ((($264)) + 36|0);
       $266 = HEAP32[$40>>2]|0;
       $267 = (($265) + ($266<<1)|0);
       $268 = HEAP16[$267>>1]|0;
       $269 = $268 << 16 >> 16;
       HEAP32[$40>>2] = $269;
       $270 = HEAP32[$40>>2]|0;
       $271 = ($270|0)>=(0);
       if ($271) {
        $272 = HEAP32[$41>>2]|0;
        $273 = ((($272)) + 8|0);
        $274 = HEAP32[$273>>2]|0;
        $275 = HEAP32[$40>>2]|0;
        $276 = (($274) + ($275)|0);
        $277 = HEAP8[$276>>0]|0;
        $278 = $277&255;
        HEAP32[$42>>2] = $278;
        $279 = HEAP32[$42>>2]|0;
        $280 = HEAP32[$9>>2]|0;
        $281 = ((($280)) + 1392|0);
        $282 = HEAP32[$281>>2]|0;
        $283 = $282 >>> $279;
        HEAP32[$281>>2] = $283;
        $284 = HEAP32[$42>>2]|0;
        $285 = HEAP32[$9>>2]|0;
        $286 = ((($285)) + 1396|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = (($287) - ($284))|0;
        HEAP32[$286>>2] = $288;
        $289 = HEAP32[$9>>2]|0;
        $290 = ((($289)) + 1396|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = ($291|0)<(0);
        if ($292) {
         $293 = HEAP32[$9>>2]|0;
         $294 = ((($293)) + 1396|0);
         HEAP32[$294>>2] = 0;
         HEAP32[$40>>2] = -1;
        }
       } else {
        $295 = HEAP32[$9>>2]|0;
        $296 = HEAP32[$41>>2]|0;
        $297 = (_codebook_decode_scalar_raw($295,$296)|0);
        HEAP32[$40>>2] = $297;
       }
       $298 = HEAP32[$41>>2]|0;
       $299 = ((($298)) + 23|0);
       $300 = HEAP8[$299>>0]|0;
       $301 = ($300<<24>>24)!=(0);
       if ($301) {
        $302 = HEAP32[$41>>2]|0;
        $303 = ((($302)) + 2088|0);
        $304 = HEAP32[$303>>2]|0;
        $305 = HEAP32[$40>>2]|0;
        $306 = (($304) + ($305<<2)|0);
        $307 = HEAP32[$306>>2]|0;
        HEAP32[$40>>2] = $307;
       }
       $308 = HEAP32[$40>>2]|0;
       $309 = $308&65535;
       $310 = HEAP32[$28>>2]|0;
       $311 = HEAP32[$31>>2]|0;
       $312 = (($311) + 1)|0;
       HEAP32[$31>>2] = $312;
       $313 = (($310) + ($311<<1)|0);
       $$sink = $309;$$sink1 = $313;
      } else {
       $314 = HEAP32[$28>>2]|0;
       $315 = HEAP32[$31>>2]|0;
       $316 = (($315) + 1)|0;
       HEAP32[$31>>2] = $316;
       $317 = (($314) + ($315<<1)|0);
       $$sink = 0;$$sink1 = $317;
      }
      HEAP16[$$sink1>>1] = $$sink;
      $318 = HEAP32[$20>>2]|0;
      $319 = (($318) + 1)|0;
      HEAP32[$20>>2] = $319;
     }
     $320 = HEAP32[$19>>2]|0;
     $321 = (($320) + 1)|0;
     HEAP32[$19>>2] = $321;
    }
    $322 = HEAP32[$9>>2]|0;
    $323 = ((($322)) + 1396|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = ($324|0)==(-1);
    if ($325) {
     label = 55;
    } else {
     $326 = ((($29)) + 1|0);
     HEAP8[$326>>0] = 1;
     HEAP8[$29>>0] = 1;
     HEAP32[$19>>2] = 2;
     while(1) {
      $327 = HEAP32[$19>>2]|0;
      $328 = HEAP32[$27>>2]|0;
      $329 = ((($328)) + 1592|0);
      $330 = HEAP32[$329>>2]|0;
      $331 = ($327|0)<($330|0);
      if (!($331)) {
       break;
      }
      $332 = HEAP32[$27>>2]|0;
      $333 = ((($332)) + 1088|0);
      $334 = HEAP32[$19>>2]|0;
      $335 = (($333) + ($334<<1)|0);
      $336 = HEAP8[$335>>0]|0;
      $337 = $336&255;
      HEAP32[$43>>2] = $337;
      $338 = HEAP32[$27>>2]|0;
      $339 = ((($338)) + 1088|0);
      $340 = HEAP32[$19>>2]|0;
      $341 = (($339) + ($340<<1)|0);
      $342 = ((($341)) + 1|0);
      $343 = HEAP8[$342>>0]|0;
      $344 = $343&255;
      HEAP32[$44>>2] = $344;
      $345 = HEAP32[$27>>2]|0;
      $346 = ((($345)) + 338|0);
      $347 = HEAP32[$19>>2]|0;
      $348 = (($346) + ($347<<1)|0);
      $349 = HEAP16[$348>>1]|0;
      $350 = $349&65535;
      $351 = HEAP32[$27>>2]|0;
      $352 = ((($351)) + 338|0);
      $353 = HEAP32[$43>>2]|0;
      $354 = (($352) + ($353<<1)|0);
      $355 = HEAP16[$354>>1]|0;
      $356 = $355&65535;
      $357 = HEAP32[$27>>2]|0;
      $358 = ((($357)) + 338|0);
      $359 = HEAP32[$44>>2]|0;
      $360 = (($358) + ($359<<1)|0);
      $361 = HEAP16[$360>>1]|0;
      $362 = $361&65535;
      $363 = HEAP32[$28>>2]|0;
      $364 = HEAP32[$43>>2]|0;
      $365 = (($363) + ($364<<1)|0);
      $366 = HEAP16[$365>>1]|0;
      $367 = $366 << 16 >> 16;
      $368 = HEAP32[$28>>2]|0;
      $369 = HEAP32[$44>>2]|0;
      $370 = (($368) + ($369<<1)|0);
      $371 = HEAP16[$370>>1]|0;
      $372 = $371 << 16 >> 16;
      $373 = (_predict_point($350,$356,$362,$367,$372)|0);
      HEAP32[$45>>2] = $373;
      $374 = HEAP32[$28>>2]|0;
      $375 = HEAP32[$19>>2]|0;
      $376 = (($374) + ($375<<1)|0);
      $377 = HEAP16[$376>>1]|0;
      $378 = $377 << 16 >> 16;
      HEAP32[$49>>2] = $378;
      $379 = HEAP32[$30>>2]|0;
      $380 = HEAP32[$45>>2]|0;
      $381 = (($379) - ($380))|0;
      HEAP32[$46>>2] = $381;
      $382 = HEAP32[$45>>2]|0;
      HEAP32[$47>>2] = $382;
      $383 = HEAP32[$46>>2]|0;
      $384 = HEAP32[$47>>2]|0;
      $385 = ($383|0)<($384|0);
      if ($385) {
       $386 = HEAP32[$46>>2]|0;
       $387 = $386<<1;
       HEAP32[$48>>2] = $387;
      } else {
       $388 = HEAP32[$47>>2]|0;
       $389 = $388<<1;
       HEAP32[$48>>2] = $389;
      }
      $390 = HEAP32[$49>>2]|0;
      $391 = ($390|0)!=(0);
      do {
       if ($391) {
        $392 = HEAP32[$44>>2]|0;
        $393 = (($29) + ($392)|0);
        HEAP8[$393>>0] = 1;
        $394 = HEAP32[$43>>2]|0;
        $395 = (($29) + ($394)|0);
        HEAP8[$395>>0] = 1;
        $396 = HEAP32[$19>>2]|0;
        $397 = (($29) + ($396)|0);
        HEAP8[$397>>0] = 1;
        $398 = HEAP32[$49>>2]|0;
        $399 = HEAP32[$48>>2]|0;
        $400 = ($398|0)>=($399|0);
        if ($400) {
         $401 = HEAP32[$46>>2]|0;
         $402 = HEAP32[$47>>2]|0;
         $403 = ($401|0)>($402|0);
         if ($403) {
          $404 = HEAP32[$49>>2]|0;
          $405 = HEAP32[$47>>2]|0;
          $406 = (($404) - ($405))|0;
          $407 = HEAP32[$45>>2]|0;
          $408 = (($406) + ($407))|0;
          $409 = $408&65535;
          $410 = HEAP32[$28>>2]|0;
          $411 = HEAP32[$19>>2]|0;
          $412 = (($410) + ($411<<1)|0);
          $$sink2 = $409;$$sink3 = $412;
         } else {
          $413 = HEAP32[$45>>2]|0;
          $414 = HEAP32[$49>>2]|0;
          $415 = (($413) - ($414))|0;
          $416 = HEAP32[$46>>2]|0;
          $417 = (($415) + ($416))|0;
          $418 = (($417) - 1)|0;
          $419 = $418&65535;
          $420 = HEAP32[$28>>2]|0;
          $421 = HEAP32[$19>>2]|0;
          $422 = (($420) + ($421<<1)|0);
          $$sink2 = $419;$$sink3 = $422;
         }
         HEAP16[$$sink3>>1] = $$sink2;
         break;
        } else {
         $423 = HEAP32[$49>>2]|0;
         $424 = $423 & 1;
         $425 = ($424|0)!=(0);
         $426 = HEAP32[$45>>2]|0;
         $427 = HEAP32[$49>>2]|0;
         if ($425) {
          $428 = (($427) + 1)|0;
          $429 = $428 >> 1;
          $430 = (($426) - ($429))|0;
          $431 = $430&65535;
          $432 = HEAP32[$28>>2]|0;
          $433 = HEAP32[$19>>2]|0;
          $434 = (($432) + ($433<<1)|0);
          $$sink4 = $431;$$sink5 = $434;
         } else {
          $435 = $427 >> 1;
          $436 = (($426) + ($435))|0;
          $437 = $436&65535;
          $438 = HEAP32[$28>>2]|0;
          $439 = HEAP32[$19>>2]|0;
          $440 = (($438) + ($439<<1)|0);
          $$sink4 = $437;$$sink5 = $440;
         }
         HEAP16[$$sink5>>1] = $$sink4;
         break;
        }
       } else {
        $441 = HEAP32[$19>>2]|0;
        $442 = (($29) + ($441)|0);
        HEAP8[$442>>0] = 0;
        $443 = HEAP32[$45>>2]|0;
        $444 = $443&65535;
        $445 = HEAP32[$28>>2]|0;
        $446 = HEAP32[$19>>2]|0;
        $447 = (($445) + ($446<<1)|0);
        HEAP16[$447>>1] = $444;
       }
      } while(0);
      $448 = HEAP32[$19>>2]|0;
      $449 = (($448) + 1)|0;
      HEAP32[$19>>2] = $449;
     }
     HEAP32[$19>>2] = 0;
     while(1) {
      $450 = HEAP32[$19>>2]|0;
      $451 = HEAP32[$27>>2]|0;
      $452 = ((($451)) + 1592|0);
      $453 = HEAP32[$452>>2]|0;
      $454 = ($450|0)<($453|0);
      if (!($454)) {
       break L5;
      }
      $455 = HEAP32[$19>>2]|0;
      $456 = (($29) + ($455)|0);
      $457 = HEAP8[$456>>0]|0;
      $458 = ($457<<24>>24)!=(0);
      if (!($458)) {
       $459 = HEAP32[$28>>2]|0;
       $460 = HEAP32[$19>>2]|0;
       $461 = (($459) + ($460<<1)|0);
       HEAP16[$461>>1] = -1;
      }
      $462 = HEAP32[$19>>2]|0;
      $463 = (($462) + 1)|0;
      HEAP32[$19>>2] = $463;
     }
    }
   } else {
    label = 55;
   }
  } while(0);
  if ((label|0) == 55) {
   label = 0;
   $464 = HEAP32[$18>>2]|0;
   $465 = (($23) + ($464<<2)|0);
   HEAP32[$465>>2] = 1;
  }
  $466 = HEAP32[$18>>2]|0;
  $467 = (($466) + 1)|0;
  HEAP32[$18>>2] = $467;
 }
 if ((label|0) == 4) {
  $106 = (_error($105,21)|0);
  HEAP32[$8>>2] = $106;
  $879 = HEAP32[$8>>2]|0;
  STACKTOP = sp;return ($879|0);
 }
 $468 = HEAP32[$9>>2]|0;
 $469 = ((($468)) + 80|0);
 $470 = HEAP32[$469>>2]|0;
 $471 = ($470|0)!=(0|0);
 do {
  if ($471) {
   $472 = HEAP32[$9>>2]|0;
   $473 = ((($472)) + 80|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = HEAP32[$9>>2]|0;
   $477 = ((($476)) + 92|0);
   $478 = HEAP32[$477>>2]|0;
   $479 = ($475|0)==($478|0);
   if ($479) {
    break;
   } else {
    ___assert_fail((14669|0),(14636|0),2887,(14725|0));
    // unreachable;
   }
  }
 } while(0);
 $480 = HEAP32[$9>>2]|0;
 $481 = ((($480)) + 4|0);
 $482 = HEAP32[$481>>2]|0;
 $483 = $482<<2;
 _memcpy(($24|0),($23|0),($483|0))|0;
 HEAP32[$18>>2] = 0;
 while(1) {
  $484 = HEAP32[$18>>2]|0;
  $485 = HEAP32[$17>>2]|0;
  $486 = HEAP16[$485>>1]|0;
  $487 = $486&65535;
  $488 = ($484|0)<($487|0);
  if (!($488)) {
   break;
  }
  $489 = HEAP32[$17>>2]|0;
  $490 = ((($489)) + 4|0);
  $491 = HEAP32[$490>>2]|0;
  $492 = HEAP32[$18>>2]|0;
  $493 = (($491) + (($492*3)|0)|0);
  $494 = HEAP8[$493>>0]|0;
  $495 = $494&255;
  $496 = (($23) + ($495<<2)|0);
  $497 = HEAP32[$496>>2]|0;
  $498 = ($497|0)!=(0);
  if ($498) {
   $499 = HEAP32[$17>>2]|0;
   $500 = ((($499)) + 4|0);
   $501 = HEAP32[$500>>2]|0;
   $502 = HEAP32[$18>>2]|0;
   $503 = (($501) + (($502*3)|0)|0);
   $504 = ((($503)) + 1|0);
   $505 = HEAP8[$504>>0]|0;
   $506 = $505&255;
   $507 = (($23) + ($506<<2)|0);
   $508 = HEAP32[$507>>2]|0;
   $509 = ($508|0)!=(0);
   if (!($509)) {
    label = 65;
   }
  } else {
   label = 65;
  }
  if ((label|0) == 65) {
   label = 0;
   $510 = HEAP32[$17>>2]|0;
   $511 = ((($510)) + 4|0);
   $512 = HEAP32[$511>>2]|0;
   $513 = HEAP32[$18>>2]|0;
   $514 = (($512) + (($513*3)|0)|0);
   $515 = ((($514)) + 1|0);
   $516 = HEAP8[$515>>0]|0;
   $517 = $516&255;
   $518 = (($23) + ($517<<2)|0);
   HEAP32[$518>>2] = 0;
   $519 = HEAP32[$17>>2]|0;
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = HEAP32[$18>>2]|0;
   $523 = (($521) + (($522*3)|0)|0);
   $524 = HEAP8[$523>>0]|0;
   $525 = $524&255;
   $526 = (($23) + ($525<<2)|0);
   HEAP32[$526>>2] = 0;
  }
  $527 = HEAP32[$18>>2]|0;
  $528 = (($527) + 1)|0;
  HEAP32[$18>>2] = $528;
 }
 HEAP32[$18>>2] = 0;
 while(1) {
  $529 = HEAP32[$18>>2]|0;
  $530 = HEAP32[$17>>2]|0;
  $531 = ((($530)) + 8|0);
  $532 = HEAP8[$531>>0]|0;
  $533 = $532&255;
  $534 = ($529|0)<($533|0);
  if (!($534)) {
   break;
  }
  HEAP32[$53>>2] = 0;
  HEAP32[$19>>2] = 0;
  while(1) {
   $535 = HEAP32[$19>>2]|0;
   $536 = HEAP32[$9>>2]|0;
   $537 = ((($536)) + 4|0);
   $538 = HEAP32[$537>>2]|0;
   $539 = ($535|0)<($538|0);
   $540 = HEAP32[$17>>2]|0;
   if (!($539)) {
    break;
   }
   $541 = ((($540)) + 4|0);
   $542 = HEAP32[$541>>2]|0;
   $543 = HEAP32[$19>>2]|0;
   $544 = (($542) + (($543*3)|0)|0);
   $545 = ((($544)) + 2|0);
   $546 = HEAP8[$545>>0]|0;
   $547 = $546&255;
   $548 = HEAP32[$18>>2]|0;
   $549 = ($547|0)==($548|0);
   if ($549) {
    $550 = HEAP32[$19>>2]|0;
    $551 = (($23) + ($550<<2)|0);
    $552 = HEAP32[$551>>2]|0;
    $553 = ($552|0)!=(0);
    $554 = HEAP32[$53>>2]|0;
    $555 = (($52) + ($554)|0);
    if ($553) {
     HEAP8[$555>>0] = 1;
     $556 = HEAP32[$53>>2]|0;
     $$sink6 = 0;$$sink8 = $556;
    } else {
     HEAP8[$555>>0] = 0;
     $557 = HEAP32[$9>>2]|0;
     $558 = ((($557)) + 800|0);
     $559 = HEAP32[$19>>2]|0;
     $560 = (($558) + ($559<<2)|0);
     $561 = HEAP32[$560>>2]|0;
     $562 = HEAP32[$53>>2]|0;
     $$sink6 = $561;$$sink8 = $562;
    }
    $563 = (($50) + ($$sink8<<2)|0);
    HEAP32[$563>>2] = $$sink6;
    $564 = HEAP32[$53>>2]|0;
    $565 = (($564) + 1)|0;
    HEAP32[$53>>2] = $565;
   }
   $566 = HEAP32[$19>>2]|0;
   $567 = (($566) + 1)|0;
   HEAP32[$19>>2] = $567;
  }
  $568 = ((($540)) + 24|0);
  $569 = HEAP32[$18>>2]|0;
  $570 = (($568) + ($569)|0);
  $571 = HEAP8[$570>>0]|0;
  $572 = $571&255;
  HEAP32[$51>>2] = $572;
  $573 = HEAP32[$9>>2]|0;
  $574 = HEAP32[$53>>2]|0;
  $575 = HEAP32[$22>>2]|0;
  $576 = HEAP32[$51>>2]|0;
  _decode_residue($573,$50,$574,$575,$576,$52);
  $577 = HEAP32[$18>>2]|0;
  $578 = (($577) + 1)|0;
  HEAP32[$18>>2] = $578;
 }
 $579 = HEAP32[$9>>2]|0;
 $580 = ((($579)) + 80|0);
 $581 = HEAP32[$580>>2]|0;
 $582 = ($581|0)!=(0|0);
 do {
  if ($582) {
   $583 = HEAP32[$9>>2]|0;
   $584 = ((($583)) + 80|0);
   $585 = ((($584)) + 4|0);
   $586 = HEAP32[$585>>2]|0;
   $587 = HEAP32[$9>>2]|0;
   $588 = ((($587)) + 92|0);
   $589 = HEAP32[$588>>2]|0;
   $590 = ($586|0)==($589|0);
   if ($590) {
    break;
   } else {
    ___assert_fail((14669|0),(14636|0),2920,(14725|0));
    // unreachable;
   }
  }
 } while(0);
 $591 = HEAP32[$17>>2]|0;
 $592 = HEAP16[$591>>1]|0;
 $593 = $592&65535;
 $594 = (($593) - 1)|0;
 HEAP32[$18>>2] = $594;
 while(1) {
  $595 = HEAP32[$18>>2]|0;
  $596 = ($595|0)>=(0);
  if (!($596)) {
   break;
  }
  $597 = HEAP32[$21>>2]|0;
  $598 = $597 >> 1;
  HEAP32[$54>>2] = $598;
  $599 = HEAP32[$9>>2]|0;
  $600 = ((($599)) + 800|0);
  $601 = HEAP32[$17>>2]|0;
  $602 = ((($601)) + 4|0);
  $603 = HEAP32[$602>>2]|0;
  $604 = HEAP32[$18>>2]|0;
  $605 = (($603) + (($604*3)|0)|0);
  $606 = HEAP8[$605>>0]|0;
  $607 = $606&255;
  $608 = (($600) + ($607<<2)|0);
  $609 = HEAP32[$608>>2]|0;
  HEAP32[$55>>2] = $609;
  $610 = HEAP32[$9>>2]|0;
  $611 = ((($610)) + 800|0);
  $612 = HEAP32[$17>>2]|0;
  $613 = ((($612)) + 4|0);
  $614 = HEAP32[$613>>2]|0;
  $615 = HEAP32[$18>>2]|0;
  $616 = (($614) + (($615*3)|0)|0);
  $617 = ((($616)) + 1|0);
  $618 = HEAP8[$617>>0]|0;
  $619 = $618&255;
  $620 = (($611) + ($619<<2)|0);
  $621 = HEAP32[$620>>2]|0;
  HEAP32[$56>>2] = $621;
  HEAP32[$19>>2] = 0;
  while(1) {
   $622 = HEAP32[$19>>2]|0;
   $623 = HEAP32[$54>>2]|0;
   $624 = ($622|0)<($623|0);
   if (!($624)) {
    break;
   }
   $625 = HEAP32[$55>>2]|0;
   $626 = HEAP32[$19>>2]|0;
   $627 = (($625) + ($626<<2)|0);
   $628 = +HEAPF32[$627>>2];
   $629 = $628 > 0.0;
   $630 = HEAP32[$56>>2]|0;
   $631 = HEAP32[$19>>2]|0;
   $632 = (($630) + ($631<<2)|0);
   $633 = +HEAPF32[$632>>2];
   $634 = $633 > 0.0;
   $635 = HEAP32[$55>>2]|0;
   $636 = HEAP32[$19>>2]|0;
   $637 = (($635) + ($636<<2)|0);
   $638 = +HEAPF32[$637>>2];
   do {
    if ($629) {
     if ($634) {
      HEAPF32[$58>>2] = $638;
      $639 = HEAP32[$55>>2]|0;
      $640 = HEAP32[$19>>2]|0;
      $641 = (($639) + ($640<<2)|0);
      $642 = +HEAPF32[$641>>2];
      $643 = HEAP32[$56>>2]|0;
      $644 = HEAP32[$19>>2]|0;
      $645 = (($643) + ($644<<2)|0);
      $646 = +HEAPF32[$645>>2];
      $647 = $642 - $646;
      HEAPF32[$57>>2] = $647;
      break;
     } else {
      HEAPF32[$57>>2] = $638;
      $648 = HEAP32[$55>>2]|0;
      $649 = HEAP32[$19>>2]|0;
      $650 = (($648) + ($649<<2)|0);
      $651 = +HEAPF32[$650>>2];
      $652 = HEAP32[$56>>2]|0;
      $653 = HEAP32[$19>>2]|0;
      $654 = (($652) + ($653<<2)|0);
      $655 = +HEAPF32[$654>>2];
      $656 = $651 + $655;
      HEAPF32[$58>>2] = $656;
      break;
     }
    } else {
     if ($634) {
      HEAPF32[$58>>2] = $638;
      $657 = HEAP32[$55>>2]|0;
      $658 = HEAP32[$19>>2]|0;
      $659 = (($657) + ($658<<2)|0);
      $660 = +HEAPF32[$659>>2];
      $661 = HEAP32[$56>>2]|0;
      $662 = HEAP32[$19>>2]|0;
      $663 = (($661) + ($662<<2)|0);
      $664 = +HEAPF32[$663>>2];
      $665 = $660 + $664;
      HEAPF32[$57>>2] = $665;
      break;
     } else {
      HEAPF32[$57>>2] = $638;
      $666 = HEAP32[$55>>2]|0;
      $667 = HEAP32[$19>>2]|0;
      $668 = (($666) + ($667<<2)|0);
      $669 = +HEAPF32[$668>>2];
      $670 = HEAP32[$56>>2]|0;
      $671 = HEAP32[$19>>2]|0;
      $672 = (($670) + ($671<<2)|0);
      $673 = +HEAPF32[$672>>2];
      $674 = $669 - $673;
      HEAPF32[$58>>2] = $674;
      break;
     }
    }
   } while(0);
   $675 = +HEAPF32[$58>>2];
   $676 = HEAP32[$55>>2]|0;
   $677 = HEAP32[$19>>2]|0;
   $678 = (($676) + ($677<<2)|0);
   HEAPF32[$678>>2] = $675;
   $679 = +HEAPF32[$57>>2];
   $680 = HEAP32[$56>>2]|0;
   $681 = HEAP32[$19>>2]|0;
   $682 = (($680) + ($681<<2)|0);
   HEAPF32[$682>>2] = $679;
   $683 = HEAP32[$19>>2]|0;
   $684 = (($683) + 1)|0;
   HEAP32[$19>>2] = $684;
  }
  $685 = HEAP32[$18>>2]|0;
  $686 = (($685) + -1)|0;
  HEAP32[$18>>2] = $686;
 }
 HEAP32[$18>>2] = 0;
 while(1) {
  $687 = HEAP32[$18>>2]|0;
  $688 = HEAP32[$9>>2]|0;
  $689 = ((($688)) + 4|0);
  $690 = HEAP32[$689>>2]|0;
  $691 = ($687|0)<($690|0);
  if (!($691)) {
   break;
  }
  $692 = HEAP32[$18>>2]|0;
  $693 = (($24) + ($692<<2)|0);
  $694 = HEAP32[$693>>2]|0;
  $695 = ($694|0)!=(0);
  $696 = HEAP32[$9>>2]|0;
  if ($695) {
   $697 = ((($696)) + 800|0);
   $698 = HEAP32[$18>>2]|0;
   $699 = (($697) + ($698<<2)|0);
   $700 = HEAP32[$699>>2]|0;
   $701 = HEAP32[$22>>2]|0;
   $702 = $701<<2;
   _memset(($700|0),0,($702|0))|0;
  } else {
   $703 = HEAP32[$17>>2]|0;
   $704 = HEAP32[$18>>2]|0;
   $705 = HEAP32[$21>>2]|0;
   $706 = HEAP32[$9>>2]|0;
   $707 = ((($706)) + 800|0);
   $708 = HEAP32[$18>>2]|0;
   $709 = (($707) + ($708<<2)|0);
   $710 = HEAP32[$709>>2]|0;
   $711 = HEAP32[$9>>2]|0;
   $712 = ((($711)) + 996|0);
   $713 = HEAP32[$18>>2]|0;
   $714 = (($712) + ($713<<2)|0);
   $715 = HEAP32[$714>>2]|0;
   (_do_floor($696,$703,$704,$705,$710,$715,0)|0);
  }
  $716 = HEAP32[$18>>2]|0;
  $717 = (($716) + 1)|0;
  HEAP32[$18>>2] = $717;
 }
 HEAP32[$18>>2] = 0;
 while(1) {
  $718 = HEAP32[$18>>2]|0;
  $719 = HEAP32[$9>>2]|0;
  $720 = ((($719)) + 4|0);
  $721 = HEAP32[$720>>2]|0;
  $722 = ($718|0)<($721|0);
  $723 = HEAP32[$9>>2]|0;
  if (!($722)) {
   break;
  }
  $724 = ((($723)) + 800|0);
  $725 = HEAP32[$18>>2]|0;
  $726 = (($724) + ($725<<2)|0);
  $727 = HEAP32[$726>>2]|0;
  $728 = HEAP32[$21>>2]|0;
  $729 = HEAP32[$9>>2]|0;
  $730 = HEAP32[$11>>2]|0;
  $731 = HEAP8[$730>>0]|0;
  $732 = $731&255;
  _inverse_mdct($727,$728,$729,$732);
  $733 = HEAP32[$18>>2]|0;
  $734 = (($733) + 1)|0;
  HEAP32[$18>>2] = $734;
 }
 _flush_packet($723);
 $735 = HEAP32[$9>>2]|0;
 $736 = ((($735)) + 1377|0);
 $737 = HEAP8[$736>>0]|0;
 $738 = ($737<<24>>24)!=(0);
 do {
  if ($738) {
   $739 = HEAP32[$22>>2]|0;
   $740 = (0 - ($739))|0;
   $741 = HEAP32[$9>>2]|0;
   $742 = ((($741)) + 1060|0);
   HEAP32[$742>>2] = $740;
   $743 = HEAP32[$21>>2]|0;
   $744 = HEAP32[$15>>2]|0;
   $745 = (($743) - ($744))|0;
   $746 = HEAP32[$9>>2]|0;
   $747 = ((($746)) + 1412|0);
   HEAP32[$747>>2] = $745;
   $748 = HEAP32[$9>>2]|0;
   $749 = ((($748)) + 1064|0);
   HEAP32[$749>>2] = 1;
   $750 = HEAP32[$9>>2]|0;
   $751 = ((($750)) + 1377|0);
   HEAP8[$751>>0] = 0;
  } else {
   $752 = HEAP32[$9>>2]|0;
   $753 = ((($752)) + 1412|0);
   $754 = HEAP32[$753>>2]|0;
   $755 = ($754|0)!=(0);
   $756 = HEAP32[$9>>2]|0;
   if ($755) {
    $757 = ((($756)) + 1412|0);
    $758 = HEAP32[$757>>2]|0;
    $759 = HEAP32[$14>>2]|0;
    $760 = HEAP32[$12>>2]|0;
    $761 = (($759) - ($760))|0;
    $762 = ($758|0)>=($761|0);
    if ($762) {
     $763 = HEAP32[$14>>2]|0;
     $764 = HEAP32[$12>>2]|0;
     $765 = (($763) - ($764))|0;
     $766 = HEAP32[$9>>2]|0;
     $767 = ((($766)) + 1412|0);
     $768 = HEAP32[$767>>2]|0;
     $769 = (($768) - ($765))|0;
     HEAP32[$767>>2] = $769;
     $770 = HEAP32[$14>>2]|0;
     HEAP32[$12>>2] = $770;
     $771 = HEAP32[$12>>2]|0;
     $772 = HEAP32[$16>>2]|0;
     HEAP32[$772>>2] = $771;
     break;
    } else {
     $773 = HEAP32[$9>>2]|0;
     $774 = ((($773)) + 1412|0);
     $775 = HEAP32[$774>>2]|0;
     $776 = HEAP32[$12>>2]|0;
     $777 = (($776) + ($775))|0;
     HEAP32[$12>>2] = $777;
     $778 = HEAP32[$12>>2]|0;
     $779 = HEAP32[$16>>2]|0;
     HEAP32[$779>>2] = $778;
     $780 = HEAP32[$9>>2]|0;
     $781 = ((($780)) + 1412|0);
     HEAP32[$781>>2] = 0;
     break;
    }
   }
  }
 } while(0);
 $782 = HEAP32[$9>>2]|0;
 $783 = ((($782)) + 1388|0);
 $784 = HEAP32[$783>>2]|0;
 $785 = HEAP32[$9>>2]|0;
 $786 = ((($785)) + 1404|0);
 $787 = HEAP32[$786>>2]|0;
 $788 = ($784|0)==($787|0);
 if ($788) {
  $789 = HEAP32[$9>>2]|0;
  $790 = ((($789)) + 1064|0);
  $791 = HEAP32[$790>>2]|0;
  $792 = ($791|0)!=(0);
  if ($792) {
   $793 = HEAP32[$9>>2]|0;
   $794 = ((($793)) + 1375|0);
   $795 = HEAP8[$794>>0]|0;
   $796 = $795&255;
   $797 = $796 & 4;
   $798 = ($797|0)!=(0);
   if ($798) {
    $799 = HEAP32[$9>>2]|0;
    $800 = ((($799)) + 1408|0);
    $801 = HEAP32[$800>>2]|0;
    $802 = HEAP32[$21>>2]|0;
    $803 = HEAP32[$15>>2]|0;
    $804 = (($802) - ($803))|0;
    $805 = (($801) - ($804))|0;
    HEAP32[$59>>2] = $805;
    $806 = HEAP32[$59>>2]|0;
    $807 = HEAP32[$9>>2]|0;
    $808 = ((($807)) + 1060|0);
    $809 = HEAP32[$808>>2]|0;
    $810 = HEAP32[$15>>2]|0;
    $811 = HEAP32[$12>>2]|0;
    $812 = (($810) - ($811))|0;
    $813 = (($809) + ($812))|0;
    $814 = ($806>>>0)<($813>>>0);
    if ($814) {
     $815 = HEAP32[$59>>2]|0;
     $816 = HEAP32[$9>>2]|0;
     $817 = ((($816)) + 1060|0);
     $818 = HEAP32[$817>>2]|0;
     $819 = ($815>>>0)<($818>>>0);
     if ($819) {
      $820 = HEAP32[$10>>2]|0;
      HEAP32[$820>>2] = 0;
     } else {
      $821 = HEAP32[$59>>2]|0;
      $822 = HEAP32[$9>>2]|0;
      $823 = ((($822)) + 1060|0);
      $824 = HEAP32[$823>>2]|0;
      $825 = (($821) - ($824))|0;
      $826 = HEAP32[$10>>2]|0;
      HEAP32[$826>>2] = $825;
     }
     $827 = HEAP32[$12>>2]|0;
     $828 = HEAP32[$10>>2]|0;
     $829 = HEAP32[$828>>2]|0;
     $830 = (($829) + ($827))|0;
     HEAP32[$828>>2] = $830;
     $831 = HEAP32[$10>>2]|0;
     $832 = HEAP32[$831>>2]|0;
     $833 = HEAP32[$15>>2]|0;
     $834 = ($832|0)>($833|0);
     if ($834) {
      $835 = HEAP32[$15>>2]|0;
      $836 = HEAP32[$10>>2]|0;
      HEAP32[$836>>2] = $835;
     }
     $837 = HEAP32[$10>>2]|0;
     $838 = HEAP32[$837>>2]|0;
     $839 = HEAP32[$9>>2]|0;
     $840 = ((($839)) + 1060|0);
     $841 = HEAP32[$840>>2]|0;
     $842 = (($841) + ($838))|0;
     HEAP32[$840>>2] = $842;
     HEAP32[$8>>2] = 1;
     $879 = HEAP32[$8>>2]|0;
     STACKTOP = sp;return ($879|0);
    }
   }
  }
  $843 = HEAP32[$9>>2]|0;
  $844 = ((($843)) + 1408|0);
  $845 = HEAP32[$844>>2]|0;
  $846 = HEAP32[$22>>2]|0;
  $847 = HEAP32[$12>>2]|0;
  $848 = (($846) - ($847))|0;
  $849 = (($845) - ($848))|0;
  $850 = HEAP32[$9>>2]|0;
  $851 = ((($850)) + 1060|0);
  HEAP32[$851>>2] = $849;
  $852 = HEAP32[$9>>2]|0;
  $853 = ((($852)) + 1064|0);
  HEAP32[$853>>2] = 1;
 }
 $854 = HEAP32[$9>>2]|0;
 $855 = ((($854)) + 1064|0);
 $856 = HEAP32[$855>>2]|0;
 $857 = ($856|0)!=(0);
 if ($857) {
  $858 = HEAP32[$14>>2]|0;
  $859 = HEAP32[$12>>2]|0;
  $860 = (($858) - ($859))|0;
  $861 = HEAP32[$9>>2]|0;
  $862 = ((($861)) + 1060|0);
  $863 = HEAP32[$862>>2]|0;
  $864 = (($863) + ($860))|0;
  HEAP32[$862>>2] = $864;
 }
 $865 = HEAP32[$9>>2]|0;
 $866 = ((($865)) + 80|0);
 $867 = HEAP32[$866>>2]|0;
 $868 = ($867|0)!=(0|0);
 do {
  if ($868) {
   $869 = HEAP32[$9>>2]|0;
   $870 = ((($869)) + 80|0);
   $871 = ((($870)) + 4|0);
   $872 = HEAP32[$871>>2]|0;
   $873 = HEAP32[$9>>2]|0;
   $874 = ((($873)) + 92|0);
   $875 = HEAP32[$874>>2]|0;
   $876 = ($872|0)==($875|0);
   if ($876) {
    break;
   } else {
    ___assert_fail((14669|0),(14636|0),3036,(14725|0));
    // unreachable;
   }
  }
 } while(0);
 $877 = HEAP32[$15>>2]|0;
 $878 = HEAP32[$10>>2]|0;
 HEAP32[$878>>2] = $877;
 HEAP32[$8>>2] = 1;
 $879 = HEAP32[$8>>2]|0;
 STACKTOP = sp;return ($879|0);
}
function _get_bits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $7 = HEAP32[$3>>2]|0;
 $8 = ((($7)) + 1396|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<(0);
 if ($10) {
  HEAP32[$2>>2] = 0;
  $79 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($79|0);
 }
 $11 = HEAP32[$3>>2]|0;
 $12 = ((($11)) + 1396|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$4>>2]|0;
 $15 = ($13|0)<($14|0);
 L5: do {
  if ($15) {
   $16 = HEAP32[$4>>2]|0;
   $17 = ($16|0)>(24);
   $18 = HEAP32[$3>>2]|0;
   if ($17) {
    $19 = (_get_bits($18,24)|0);
    HEAP32[$5>>2] = $19;
    $20 = HEAP32[$3>>2]|0;
    $21 = HEAP32[$4>>2]|0;
    $22 = (($21) - 24)|0;
    $23 = (_get_bits($20,$22)|0);
    $24 = $23 << 24;
    $25 = HEAP32[$5>>2]|0;
    $26 = (($25) + ($24))|0;
    HEAP32[$5>>2] = $26;
    $27 = HEAP32[$5>>2]|0;
    HEAP32[$2>>2] = $27;
    $79 = HEAP32[$2>>2]|0;
    STACKTOP = sp;return ($79|0);
   }
   $28 = ((($18)) + 1396|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0);
   if ($30) {
    $31 = HEAP32[$3>>2]|0;
    $32 = ((($31)) + 1392|0);
    HEAP32[$32>>2] = 0;
   }
   while(1) {
    $33 = HEAP32[$3>>2]|0;
    $34 = ((($33)) + 1396|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = HEAP32[$4>>2]|0;
    $37 = ($35|0)<($36|0);
    if (!($37)) {
     break L5;
    }
    $38 = HEAP32[$3>>2]|0;
    $39 = (_get8_packet_raw($38)|0);
    HEAP32[$6>>2] = $39;
    $40 = HEAP32[$6>>2]|0;
    $41 = ($40|0)==(-1);
    if ($41) {
     break;
    }
    $44 = HEAP32[$6>>2]|0;
    $45 = HEAP32[$3>>2]|0;
    $46 = ((($45)) + 1396|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $44 << $47;
    $49 = HEAP32[$3>>2]|0;
    $50 = ((($49)) + 1392|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + ($48))|0;
    HEAP32[$50>>2] = $52;
    $53 = HEAP32[$3>>2]|0;
    $54 = ((($53)) + 1396|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) + 8)|0;
    HEAP32[$54>>2] = $56;
   }
   $42 = HEAP32[$3>>2]|0;
   $43 = ((($42)) + 1396|0);
   HEAP32[$43>>2] = -1;
   HEAP32[$2>>2] = 0;
   $79 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($79|0);
  }
 } while(0);
 $57 = HEAP32[$3>>2]|0;
 $58 = ((($57)) + 1396|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)<(0);
 if ($60) {
  HEAP32[$2>>2] = 0;
  $79 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($79|0);
 } else {
  $61 = HEAP32[$3>>2]|0;
  $62 = ((($61)) + 1392|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$4>>2]|0;
  $65 = 1 << $64;
  $66 = (($65) - 1)|0;
  $67 = $63 & $66;
  HEAP32[$5>>2] = $67;
  $68 = HEAP32[$4>>2]|0;
  $69 = HEAP32[$3>>2]|0;
  $70 = ((($69)) + 1392|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $71 >>> $68;
  HEAP32[$70>>2] = $72;
  $73 = HEAP32[$4>>2]|0;
  $74 = HEAP32[$3>>2]|0;
  $75 = ((($74)) + 1396|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) - ($73))|0;
  HEAP32[$75>>2] = $77;
  $78 = HEAP32[$5>>2]|0;
  HEAP32[$2>>2] = $78;
  $79 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($79|0);
 }
 return (0)|0;
}
function _ilog($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 do {
  if ($4) {
   HEAP32[$1>>2] = 0;
  } else {
   $5 = HEAP32[$2>>2]|0;
   $6 = ($5|0)<(16384);
   $7 = HEAP32[$2>>2]|0;
   if ($6) {
    $8 = ($7|0)<(16);
    $9 = HEAP32[$2>>2]|0;
    if ($8) {
     $10 = (15034 + ($9)|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = $11 << 24 >> 24;
     $13 = (0 + ($12))|0;
     HEAP32[$1>>2] = $13;
     break;
    }
    $14 = ($9|0)<(512);
    $15 = HEAP32[$2>>2]|0;
    if ($14) {
     $16 = $15 >> 5;
     $17 = (15034 + ($16)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18 << 24 >> 24;
     $20 = (5 + ($19))|0;
     HEAP32[$1>>2] = $20;
     break;
    } else {
     $21 = $15 >> 10;
     $22 = (15034 + ($21)|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = $23 << 24 >> 24;
     $25 = (10 + ($24))|0;
     HEAP32[$1>>2] = $25;
     break;
    }
   }
   $26 = ($7|0)<(16777216);
   $27 = HEAP32[$2>>2]|0;
   if ($26) {
    $28 = ($27|0)<(524288);
    $29 = HEAP32[$2>>2]|0;
    if ($28) {
     $30 = $29 >> 15;
     $31 = (15034 + ($30)|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32 << 24 >> 24;
     $34 = (15 + ($33))|0;
     HEAP32[$1>>2] = $34;
     break;
    } else {
     $35 = $29 >> 20;
     $36 = (15034 + ($35)|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = $37 << 24 >> 24;
     $39 = (20 + ($38))|0;
     HEAP32[$1>>2] = $39;
     break;
    }
   } else {
    $40 = ($27|0)<(536870912);
    $41 = HEAP32[$2>>2]|0;
    if ($40) {
     $42 = $41 >> 25;
     $43 = (15034 + ($42)|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = (25 + ($45))|0;
     HEAP32[$1>>2] = $46;
     break;
    } else {
     $47 = $41 >> 30;
     $48 = (15034 + ($47)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49 << 24 >> 24;
     $51 = (30 + ($50))|0;
     HEAP32[$1>>2] = $51;
     break;
    }
   }
  }
 } while(0);
 $52 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($52|0);
}
function _prep_huffman($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 1396|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<=(24);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 1396|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = HEAP32[$1>>2]|0;
  $12 = ((($11)) + 1392|0);
  HEAP32[$12>>2] = 0;
 }
 while(1) {
  $13 = HEAP32[$1>>2]|0;
  $14 = ((($13)) + 1384|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 1376|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)!=(0);
   if (!($20)) {
    label = 8;
    break;
   }
  }
  $21 = HEAP32[$1>>2]|0;
  $22 = (_get8_packet_raw($21)|0);
  HEAP32[$2>>2] = $22;
  $23 = HEAP32[$2>>2]|0;
  $24 = ($23|0)==(-1);
  if ($24) {
   label = 8;
   break;
  }
  $25 = HEAP32[$2>>2]|0;
  $26 = HEAP32[$1>>2]|0;
  $27 = ((($26)) + 1396|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $25 << $28;
  $30 = HEAP32[$1>>2]|0;
  $31 = ((($30)) + 1392|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($29))|0;
  HEAP32[$31>>2] = $33;
  $34 = HEAP32[$1>>2]|0;
  $35 = ((($34)) + 1396|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 8)|0;
  HEAP32[$35>>2] = $37;
  $38 = HEAP32[$1>>2]|0;
  $39 = ((($38)) + 1396|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)<=(24);
  if (!($41)) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
}
function _codebook_decode_scalar_raw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $11 = HEAP32[$3>>2]|0;
 _prep_huffman($11);
 $12 = HEAP32[$4>>2]|0;
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = HEAP32[$4>>2]|0;
  $17 = ((($16)) + 2084|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   HEAP32[$2>>2] = -1;
   $172 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($172|0);
  }
 }
 $20 = HEAP32[$4>>2]|0;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)>(8);
 $24 = HEAP32[$4>>2]|0;
 if ($23) {
  $25 = ((($24)) + 2084|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   label = 7;
  }
 } else {
  $28 = ((($24)) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0|0);
  if (!($30)) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $31 = HEAP32[$3>>2]|0;
  $32 = ((($31)) + 1392|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_bit_reverse($33)|0);
  HEAP32[$6>>2] = $34;
  HEAP32[$7>>2] = 0;
  $35 = HEAP32[$4>>2]|0;
  $36 = ((($35)) + 2092|0);
  $37 = HEAP32[$36>>2]|0;
  HEAP32[$8>>2] = $37;
  while(1) {
   $38 = HEAP32[$8>>2]|0;
   $39 = ($38|0)>(1);
   if (!($39)) {
    break;
   }
   $40 = HEAP32[$7>>2]|0;
   $41 = HEAP32[$8>>2]|0;
   $42 = $41 >> 1;
   $43 = (($40) + ($42))|0;
   HEAP32[$10>>2] = $43;
   $44 = HEAP32[$4>>2]|0;
   $45 = ((($44)) + 2084|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = HEAP32[$10>>2]|0;
   $48 = (($46) + ($47<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = HEAP32[$6>>2]|0;
   $51 = ($49>>>0)<=($50>>>0);
   if ($51) {
    $52 = HEAP32[$10>>2]|0;
    HEAP32[$7>>2] = $52;
    $53 = HEAP32[$8>>2]|0;
    $54 = $53 >> 1;
    $55 = HEAP32[$8>>2]|0;
    $56 = (($55) - ($54))|0;
    HEAP32[$8>>2] = $56;
    continue;
   } else {
    $57 = HEAP32[$8>>2]|0;
    $58 = $57 >> 1;
    HEAP32[$8>>2] = $58;
    continue;
   }
  }
  $59 = HEAP32[$4>>2]|0;
  $60 = ((($59)) + 23|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = ($61<<24>>24)!=(0);
  if (!($62)) {
   $63 = HEAP32[$4>>2]|0;
   $64 = ((($63)) + 2088|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = HEAP32[$7>>2]|0;
   $67 = (($65) + ($66<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   HEAP32[$7>>2] = $68;
  }
  $69 = HEAP32[$4>>2]|0;
  $70 = ((($69)) + 8|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = HEAP32[$7>>2]|0;
  $73 = (($71) + ($72)|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  HEAP32[$9>>2] = $75;
  $76 = HEAP32[$3>>2]|0;
  $77 = ((($76)) + 1396|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = HEAP32[$9>>2]|0;
  $80 = ($78|0)>=($79|0);
  if ($80) {
   $81 = HEAP32[$9>>2]|0;
   $82 = HEAP32[$3>>2]|0;
   $83 = ((($82)) + 1392|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $84 >>> $81;
   HEAP32[$83>>2] = $85;
   $86 = HEAP32[$9>>2]|0;
   $87 = HEAP32[$3>>2]|0;
   $88 = ((($87)) + 1396|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) - ($86))|0;
   HEAP32[$88>>2] = $90;
   $91 = HEAP32[$7>>2]|0;
   HEAP32[$2>>2] = $91;
   $172 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($172|0);
  } else {
   $92 = HEAP32[$3>>2]|0;
   $93 = ((($92)) + 1396|0);
   HEAP32[$93>>2] = 0;
   HEAP32[$2>>2] = -1;
   $172 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($172|0);
  }
 }
 $94 = HEAP32[$4>>2]|0;
 $95 = ((($94)) + 23|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = ($96<<24>>24)!=(0);
 if ($97) {
  ___assert_fail((14996|0),(14636|0),1255,(15007|0));
  // unreachable;
 }
 HEAP32[$5>>2] = 0;
 while(1) {
  $98 = HEAP32[$5>>2]|0;
  $99 = HEAP32[$4>>2]|0;
  $100 = ((($99)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($98|0)<($101|0);
  if (!($102)) {
   label = 27;
   break;
  }
  $103 = HEAP32[$4>>2]|0;
  $104 = ((($103)) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$5>>2]|0;
  $107 = (($105) + ($106)|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = ($109|0)==(255);
  if (!($110)) {
   $111 = HEAP32[$4>>2]|0;
   $112 = ((($111)) + 32|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = HEAP32[$5>>2]|0;
   $115 = (($113) + ($114<<2)|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = HEAP32[$3>>2]|0;
   $118 = ((($117)) + 1392|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = HEAP32[$4>>2]|0;
   $121 = ((($120)) + 8|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = HEAP32[$5>>2]|0;
   $124 = (($122) + ($123)|0);
   $125 = HEAP8[$124>>0]|0;
   $126 = $125&255;
   $127 = 1 << $126;
   $128 = (($127) - 1)|0;
   $129 = $119 & $128;
   $130 = ($116|0)==($129|0);
   if ($130) {
    break;
   }
  }
  $167 = HEAP32[$5>>2]|0;
  $168 = (($167) + 1)|0;
  HEAP32[$5>>2] = $168;
 }
 if ((label|0) == 27) {
  $169 = HEAP32[$3>>2]|0;
  (_error($169,21)|0);
  $170 = HEAP32[$3>>2]|0;
  $171 = ((($170)) + 1396|0);
  HEAP32[$171>>2] = 0;
  HEAP32[$2>>2] = -1;
  $172 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($172|0);
 }
 $131 = HEAP32[$3>>2]|0;
 $132 = ((($131)) + 1396|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = HEAP32[$4>>2]|0;
 $135 = ((($134)) + 8|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = HEAP32[$5>>2]|0;
 $138 = (($136) + ($137)|0);
 $139 = HEAP8[$138>>0]|0;
 $140 = $139&255;
 $141 = ($133|0)>=($140|0);
 if ($141) {
  $142 = HEAP32[$4>>2]|0;
  $143 = ((($142)) + 8|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = HEAP32[$5>>2]|0;
  $146 = (($144) + ($145)|0);
  $147 = HEAP8[$146>>0]|0;
  $148 = $147&255;
  $149 = HEAP32[$3>>2]|0;
  $150 = ((($149)) + 1392|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $151 >>> $148;
  HEAP32[$150>>2] = $152;
  $153 = HEAP32[$4>>2]|0;
  $154 = ((($153)) + 8|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = HEAP32[$5>>2]|0;
  $157 = (($155) + ($156)|0);
  $158 = HEAP8[$157>>0]|0;
  $159 = $158&255;
  $160 = HEAP32[$3>>2]|0;
  $161 = ((($160)) + 1396|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) - ($159))|0;
  HEAP32[$161>>2] = $163;
  $164 = HEAP32[$5>>2]|0;
  HEAP32[$2>>2] = $164;
  $172 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($172|0);
 } else {
  $165 = HEAP32[$3>>2]|0;
  $166 = ((($165)) + 1396|0);
  HEAP32[$166>>2] = 0;
  HEAP32[$2>>2] = -1;
  $172 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($172|0);
 }
 return (0)|0;
}
function _predict_point($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 24|0;
 $8 = sp + 20|0;
 $9 = sp + 16|0;
 $10 = sp + 12|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $14 = HEAP32[$9>>2]|0;
 $15 = HEAP32[$8>>2]|0;
 $16 = (($14) - ($15))|0;
 HEAP32[$10>>2] = $16;
 $17 = HEAP32[$7>>2]|0;
 $18 = HEAP32[$6>>2]|0;
 $19 = (($17) - ($18))|0;
 HEAP32[$11>>2] = $19;
 $20 = HEAP32[$10>>2]|0;
 $21 = (Math_abs(($20|0))|0);
 $22 = HEAP32[$5>>2]|0;
 $23 = HEAP32[$6>>2]|0;
 $24 = (($22) - ($23))|0;
 $25 = Math_imul($21, $24)|0;
 HEAP32[$12>>2] = $25;
 $26 = HEAP32[$12>>2]|0;
 $27 = HEAP32[$11>>2]|0;
 $28 = (($26|0) / ($27|0))&-1;
 HEAP32[$13>>2] = $28;
 $29 = HEAP32[$10>>2]|0;
 $30 = ($29|0)<(0);
 $31 = HEAP32[$8>>2]|0;
 $32 = HEAP32[$13>>2]|0;
 $33 = (($31) - ($32))|0;
 $34 = (($31) + ($32))|0;
 $35 = $30 ? $33 : $34;
 STACKTOP = sp;return ($35|0);
}
function _decode_residue($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 236|0;
 $7 = sp + 232|0;
 $8 = sp + 228|0;
 $9 = sp + 224|0;
 $10 = sp + 220|0;
 $11 = sp + 216|0;
 $12 = sp + 212|0;
 $13 = sp + 208|0;
 $14 = sp + 204|0;
 $15 = sp + 200|0;
 $16 = sp + 196|0;
 $17 = sp + 192|0;
 $18 = sp + 188|0;
 $19 = sp + 184|0;
 $20 = sp + 180|0;
 $21 = sp + 176|0;
 $22 = sp + 172|0;
 $23 = sp + 168|0;
 $24 = sp + 164|0;
 $25 = sp + 160|0;
 $26 = sp + 156|0;
 $27 = sp + 152|0;
 $28 = sp + 148|0;
 $29 = sp + 144|0;
 $30 = sp + 140|0;
 $31 = sp + 136|0;
 $32 = sp + 132|0;
 $33 = sp + 128|0;
 $34 = sp + 124|0;
 $35 = sp + 120|0;
 $36 = sp + 116|0;
 $37 = sp + 112|0;
 $38 = sp + 108|0;
 $39 = sp + 104|0;
 $40 = sp + 100|0;
 $41 = sp + 96|0;
 $42 = sp + 92|0;
 $43 = sp + 88|0;
 $44 = sp + 84|0;
 $45 = sp + 80|0;
 $46 = sp + 76|0;
 $47 = sp + 72|0;
 $48 = sp + 68|0;
 $49 = sp + 64|0;
 $50 = sp + 60|0;
 $51 = sp + 56|0;
 $52 = sp + 52|0;
 $53 = sp + 48|0;
 $54 = sp + 44|0;
 $55 = sp + 40|0;
 $56 = sp + 36|0;
 $57 = sp + 32|0;
 $58 = sp + 28|0;
 $59 = sp + 24|0;
 $60 = sp + 20|0;
 $61 = sp + 16|0;
 $62 = sp + 12|0;
 $63 = sp + 8|0;
 $64 = sp + 4|0;
 $65 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 HEAP32[$11>>2] = $5;
 $66 = HEAP32[$6>>2]|0;
 $67 = ((($66)) + 396|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$10>>2]|0;
 $70 = (($68) + (($69*24)|0)|0);
 HEAP32[$15>>2] = $70;
 $71 = HEAP32[$6>>2]|0;
 $72 = ((($71)) + 268|0);
 $73 = HEAP32[$10>>2]|0;
 $74 = (($72) + ($73<<1)|0);
 $75 = HEAP16[$74>>1]|0;
 $76 = $75&65535;
 HEAP32[$16>>2] = $76;
 $77 = HEAP32[$15>>2]|0;
 $78 = ((($77)) + 13|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 HEAP32[$17>>2] = $80;
 $81 = HEAP32[$6>>2]|0;
 $82 = ((($81)) + 124|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = HEAP32[$17>>2]|0;
 $85 = (($83) + (($84*2096)|0)|0);
 $86 = HEAP32[$85>>2]|0;
 HEAP32[$18>>2] = $86;
 $87 = HEAP32[$15>>2]|0;
 $88 = ((($87)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = HEAP32[$15>>2]|0;
 $91 = HEAP32[$90>>2]|0;
 $92 = (($89) - ($91))|0;
 HEAP32[$19>>2] = $92;
 $93 = HEAP32[$19>>2]|0;
 $94 = HEAP32[$15>>2]|0;
 $95 = ((($94)) + 8|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($93>>>0) / ($96>>>0))&-1;
 HEAP32[$20>>2] = $97;
 $98 = HEAP32[$6>>2]|0;
 $99 = ((($98)) + 92|0);
 $100 = HEAP32[$99>>2]|0;
 HEAP32[$21>>2] = $100;
 $101 = HEAP32[$6>>2]|0;
 $102 = ((($101)) + 80|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)!=(0|0);
 $105 = HEAP32[$6>>2]|0;
 if ($104) {
  $106 = HEAP32[$6>>2]|0;
  $107 = ((($106)) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = HEAP32[$20>>2]|0;
  $110 = $109<<2;
  $111 = (4 + ($110))|0;
  $112 = Math_imul($108, $111)|0;
  $113 = (_setup_temp_malloc($105,$112)|0);
  $126 = $113;
 } else {
  $114 = ((($105)) + 4|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = HEAP32[$20>>2]|0;
  $117 = $116<<2;
  $118 = (4 + ($117))|0;
  $119 = Math_imul($115, $118)|0;
  $$alloca_mul = $119;
  $120 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
  $126 = $120;
 }
 $121 = HEAP32[$6>>2]|0;
 $122 = ((($121)) + 4|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = HEAP32[$20>>2]|0;
 $125 = $124<<2;
 $127 = (_make_block_array($126,$123,$125)|0);
 HEAP32[$22>>2] = $127;
 HEAP32[$12>>2] = 0;
 while(1) {
  $128 = HEAP32[$12>>2]|0;
  $129 = HEAP32[$8>>2]|0;
  $130 = ($128|0)<($129|0);
  if (!($130)) {
   break;
  }
  $131 = HEAP32[$11>>2]|0;
  $132 = HEAP32[$12>>2]|0;
  $133 = (($131) + ($132)|0);
  $134 = HEAP8[$133>>0]|0;
  $135 = ($134<<24>>24)!=(0);
  if (!($135)) {
   $136 = HEAP32[$7>>2]|0;
   $137 = HEAP32[$12>>2]|0;
   $138 = (($136) + ($137<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = HEAP32[$9>>2]|0;
   $141 = $140<<2;
   _memset(($139|0),0,($141|0))|0;
  }
  $142 = HEAP32[$12>>2]|0;
  $143 = (($142) + 1)|0;
  HEAP32[$12>>2] = $143;
 }
 $144 = HEAP32[$16>>2]|0;
 $145 = ($144|0)==(2);
 $146 = HEAP32[$8>>2]|0;
 $147 = ($146|0)!=(1);
 $or$cond = $145 & $147;
 if (!($or$cond)) {
  HEAP32[$14>>2] = 0;
  L14: while(1) {
   $629 = HEAP32[$14>>2]|0;
   $630 = ($629|0)<(8);
   if (!($630)) {
    label = 111;
    break;
   }
   HEAP32[$55>>2] = 0;
   HEAP32[$56>>2] = 0;
   while(1) {
    $631 = HEAP32[$55>>2]|0;
    $632 = HEAP32[$20>>2]|0;
    $633 = ($631|0)<($632|0);
    $634 = HEAP32[$14>>2]|0;
    if (!($633)) {
     break;
    }
    $635 = ($634|0)==(0);
    L20: do {
     if ($635) {
      HEAP32[$13>>2] = 0;
      while(1) {
       $636 = HEAP32[$13>>2]|0;
       $637 = HEAP32[$8>>2]|0;
       $638 = ($636|0)<($637|0);
       if (!($638)) {
        break L20;
       }
       $639 = HEAP32[$11>>2]|0;
       $640 = HEAP32[$13>>2]|0;
       $641 = (($639) + ($640)|0);
       $642 = HEAP8[$641>>0]|0;
       $643 = ($642<<24>>24)!=(0);
       if (!($643)) {
        $644 = HEAP32[$6>>2]|0;
        $645 = ((($644)) + 124|0);
        $646 = HEAP32[$645>>2]|0;
        $647 = HEAP32[$15>>2]|0;
        $648 = ((($647)) + 13|0);
        $649 = HEAP8[$648>>0]|0;
        $650 = $649&255;
        $651 = (($646) + (($650*2096)|0)|0);
        HEAP32[$57>>2] = $651;
        $652 = HEAP32[$6>>2]|0;
        $653 = ((($652)) + 1396|0);
        $654 = HEAP32[$653>>2]|0;
        $655 = ($654|0)<(10);
        if ($655) {
         $656 = HEAP32[$6>>2]|0;
         _prep_huffman($656);
        }
        $657 = HEAP32[$6>>2]|0;
        $658 = ((($657)) + 1392|0);
        $659 = HEAP32[$658>>2]|0;
        $660 = $659 & 1023;
        HEAP32[$58>>2] = $660;
        $661 = HEAP32[$57>>2]|0;
        $662 = ((($661)) + 36|0);
        $663 = HEAP32[$58>>2]|0;
        $664 = (($662) + ($663<<1)|0);
        $665 = HEAP16[$664>>1]|0;
        $666 = $665 << 16 >> 16;
        HEAP32[$58>>2] = $666;
        $667 = HEAP32[$58>>2]|0;
        $668 = ($667|0)>=(0);
        if ($668) {
         $669 = HEAP32[$57>>2]|0;
         $670 = ((($669)) + 8|0);
         $671 = HEAP32[$670>>2]|0;
         $672 = HEAP32[$58>>2]|0;
         $673 = (($671) + ($672)|0);
         $674 = HEAP8[$673>>0]|0;
         $675 = $674&255;
         HEAP32[$59>>2] = $675;
         $676 = HEAP32[$59>>2]|0;
         $677 = HEAP32[$6>>2]|0;
         $678 = ((($677)) + 1392|0);
         $679 = HEAP32[$678>>2]|0;
         $680 = $679 >>> $676;
         HEAP32[$678>>2] = $680;
         $681 = HEAP32[$59>>2]|0;
         $682 = HEAP32[$6>>2]|0;
         $683 = ((($682)) + 1396|0);
         $684 = HEAP32[$683>>2]|0;
         $685 = (($684) - ($681))|0;
         HEAP32[$683>>2] = $685;
         $686 = HEAP32[$6>>2]|0;
         $687 = ((($686)) + 1396|0);
         $688 = HEAP32[$687>>2]|0;
         $689 = ($688|0)<(0);
         if ($689) {
          $690 = HEAP32[$6>>2]|0;
          $691 = ((($690)) + 1396|0);
          HEAP32[$691>>2] = 0;
          HEAP32[$58>>2] = -1;
         }
        } else {
         $692 = HEAP32[$6>>2]|0;
         $693 = HEAP32[$57>>2]|0;
         $694 = (_codebook_decode_scalar_raw($692,$693)|0);
         HEAP32[$58>>2] = $694;
        }
        $695 = HEAP32[$57>>2]|0;
        $696 = ((($695)) + 23|0);
        $697 = HEAP8[$696>>0]|0;
        $698 = ($697<<24>>24)!=(0);
        if ($698) {
         $699 = HEAP32[$57>>2]|0;
         $700 = ((($699)) + 2088|0);
         $701 = HEAP32[$700>>2]|0;
         $702 = HEAP32[$58>>2]|0;
         $703 = (($701) + ($702<<2)|0);
         $704 = HEAP32[$703>>2]|0;
         HEAP32[$58>>2] = $704;
        }
        $705 = HEAP32[$58>>2]|0;
        $706 = ($705|0)==(-1);
        if ($706) {
         label = 111;
         break L14;
        }
        $707 = HEAP32[$15>>2]|0;
        $708 = ((($707)) + 16|0);
        $709 = HEAP32[$708>>2]|0;
        $710 = HEAP32[$58>>2]|0;
        $711 = (($709) + ($710<<2)|0);
        $712 = HEAP32[$711>>2]|0;
        $713 = HEAP32[$22>>2]|0;
        $714 = HEAP32[$13>>2]|0;
        $715 = (($713) + ($714<<2)|0);
        $716 = HEAP32[$715>>2]|0;
        $717 = HEAP32[$56>>2]|0;
        $718 = (($716) + ($717<<2)|0);
        HEAP32[$718>>2] = $712;
       }
       $719 = HEAP32[$13>>2]|0;
       $720 = (($719) + 1)|0;
       HEAP32[$13>>2] = $720;
      }
     }
    } while(0);
    HEAP32[$12>>2] = 0;
    while(1) {
     $721 = HEAP32[$12>>2]|0;
     $722 = HEAP32[$18>>2]|0;
     $723 = ($721|0)<($722|0);
     if (!($723)) {
      break;
     }
     $724 = HEAP32[$55>>2]|0;
     $725 = HEAP32[$20>>2]|0;
     $726 = ($724|0)<($725|0);
     if (!($726)) {
      break;
     }
     HEAP32[$13>>2] = 0;
     while(1) {
      $727 = HEAP32[$13>>2]|0;
      $728 = HEAP32[$8>>2]|0;
      $729 = ($727|0)<($728|0);
      if (!($729)) {
       break;
      }
      $730 = HEAP32[$11>>2]|0;
      $731 = HEAP32[$13>>2]|0;
      $732 = (($730) + ($731)|0);
      $733 = HEAP8[$732>>0]|0;
      $734 = ($733<<24>>24)!=(0);
      if (!($734)) {
       $735 = HEAP32[$22>>2]|0;
       $736 = HEAP32[$13>>2]|0;
       $737 = (($735) + ($736<<2)|0);
       $738 = HEAP32[$737>>2]|0;
       $739 = HEAP32[$56>>2]|0;
       $740 = (($738) + ($739<<2)|0);
       $741 = HEAP32[$740>>2]|0;
       $742 = HEAP32[$12>>2]|0;
       $743 = (($741) + ($742)|0);
       $744 = HEAP8[$743>>0]|0;
       $745 = $744&255;
       HEAP32[$60>>2] = $745;
       $746 = HEAP32[$15>>2]|0;
       $747 = ((($746)) + 20|0);
       $748 = HEAP32[$747>>2]|0;
       $749 = HEAP32[$60>>2]|0;
       $750 = (($748) + ($749<<4)|0);
       $751 = HEAP32[$14>>2]|0;
       $752 = (($750) + ($751<<1)|0);
       $753 = HEAP16[$752>>1]|0;
       $754 = $753 << 16 >> 16;
       HEAP32[$61>>2] = $754;
       $755 = HEAP32[$61>>2]|0;
       $756 = ($755|0)>=(0);
       if ($756) {
        $757 = HEAP32[$7>>2]|0;
        $758 = HEAP32[$13>>2]|0;
        $759 = (($757) + ($758<<2)|0);
        $760 = HEAP32[$759>>2]|0;
        HEAP32[$62>>2] = $760;
        $761 = HEAP32[$15>>2]|0;
        $762 = HEAP32[$761>>2]|0;
        $763 = HEAP32[$55>>2]|0;
        $764 = HEAP32[$15>>2]|0;
        $765 = ((($764)) + 8|0);
        $766 = HEAP32[$765>>2]|0;
        $767 = Math_imul($763, $766)|0;
        $768 = (($762) + ($767))|0;
        HEAP32[$63>>2] = $768;
        $769 = HEAP32[$15>>2]|0;
        $770 = ((($769)) + 8|0);
        $771 = HEAP32[$770>>2]|0;
        HEAP32[$64>>2] = $771;
        $772 = HEAP32[$6>>2]|0;
        $773 = ((($772)) + 124|0);
        $774 = HEAP32[$773>>2]|0;
        $775 = HEAP32[$61>>2]|0;
        $776 = (($774) + (($775*2096)|0)|0);
        HEAP32[$65>>2] = $776;
        $777 = HEAP32[$6>>2]|0;
        $778 = HEAP32[$65>>2]|0;
        $779 = HEAP32[$62>>2]|0;
        $780 = HEAP32[$63>>2]|0;
        $781 = HEAP32[$64>>2]|0;
        $782 = HEAP32[$16>>2]|0;
        $783 = (_residue_decode($777,$778,$779,$780,$781,$782)|0);
        $784 = ($783|0)!=(0);
        if (!($784)) {
         label = 111;
         break L14;
        }
       }
      }
      $785 = HEAP32[$13>>2]|0;
      $786 = (($785) + 1)|0;
      HEAP32[$13>>2] = $786;
     }
     $787 = HEAP32[$12>>2]|0;
     $788 = (($787) + 1)|0;
     HEAP32[$12>>2] = $788;
     $789 = HEAP32[$55>>2]|0;
     $790 = (($789) + 1)|0;
     HEAP32[$55>>2] = $790;
    }
    $791 = HEAP32[$56>>2]|0;
    $792 = (($791) + 1)|0;
    HEAP32[$56>>2] = $792;
   }
   $793 = (($634) + 1)|0;
   HEAP32[$14>>2] = $793;
  }
  if ((label|0) == 111) {
   $794 = HEAP32[$21>>2]|0;
   $795 = HEAP32[$6>>2]|0;
   $796 = ((($795)) + 92|0);
   HEAP32[$796>>2] = $794;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$13>>2] = 0;
 while(1) {
  $148 = HEAP32[$13>>2]|0;
  $149 = HEAP32[$8>>2]|0;
  $150 = ($148|0)<($149|0);
  if (!($150)) {
   break;
  }
  $151 = HEAP32[$11>>2]|0;
  $152 = HEAP32[$13>>2]|0;
  $153 = (($151) + ($152)|0);
  $154 = HEAP8[$153>>0]|0;
  $155 = ($154<<24>>24)!=(0);
  if (!($155)) {
   break;
  }
  $156 = HEAP32[$13>>2]|0;
  $157 = (($156) + 1)|0;
  HEAP32[$13>>2] = $157;
 }
 $158 = HEAP32[$13>>2]|0;
 $159 = HEAP32[$8>>2]|0;
 $160 = ($158|0)==($159|0);
 if ($160) {
  $794 = HEAP32[$21>>2]|0;
  $795 = HEAP32[$6>>2]|0;
  $796 = ((($795)) + 92|0);
  HEAP32[$796>>2] = $794;
  STACKTOP = sp;return;
 }
 HEAP32[$14>>2] = 0;
 L68: while(1) {
  $161 = HEAP32[$14>>2]|0;
  $162 = ($161|0)<(8);
  if (!($162)) {
   label = 111;
   break;
  }
  HEAP32[$23>>2] = 0;
  HEAP32[$24>>2] = 0;
  $163 = HEAP32[$8>>2]|0;
  $164 = ($163|0)==(2);
  L71: do {
   if ($164) {
    while(1) {
     $165 = HEAP32[$23>>2]|0;
     $166 = HEAP32[$20>>2]|0;
     $167 = ($165|0)<($166|0);
     if (!($167)) {
      break L71;
     }
     $168 = HEAP32[$15>>2]|0;
     $169 = HEAP32[$168>>2]|0;
     $170 = HEAP32[$23>>2]|0;
     $171 = HEAP32[$15>>2]|0;
     $172 = ((($171)) + 8|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = Math_imul($170, $173)|0;
     $175 = (($169) + ($174))|0;
     HEAP32[$25>>2] = $175;
     $176 = HEAP32[$25>>2]|0;
     $177 = $176 & 1;
     HEAP32[$26>>2] = $177;
     $178 = HEAP32[$25>>2]|0;
     $179 = $178 >> 1;
     HEAP32[$27>>2] = $179;
     $180 = HEAP32[$14>>2]|0;
     $181 = ($180|0)==(0);
     if ($181) {
      $182 = HEAP32[$6>>2]|0;
      $183 = ((($182)) + 124|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = HEAP32[$15>>2]|0;
      $186 = ((($185)) + 13|0);
      $187 = HEAP8[$186>>0]|0;
      $188 = $187&255;
      $189 = (($184) + (($188*2096)|0)|0);
      HEAP32[$28>>2] = $189;
      $190 = HEAP32[$6>>2]|0;
      $191 = ((($190)) + 1396|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = ($192|0)<(10);
      if ($193) {
       $194 = HEAP32[$6>>2]|0;
       _prep_huffman($194);
      }
      $195 = HEAP32[$6>>2]|0;
      $196 = ((($195)) + 1392|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = $197 & 1023;
      HEAP32[$29>>2] = $198;
      $199 = HEAP32[$28>>2]|0;
      $200 = ((($199)) + 36|0);
      $201 = HEAP32[$29>>2]|0;
      $202 = (($200) + ($201<<1)|0);
      $203 = HEAP16[$202>>1]|0;
      $204 = $203 << 16 >> 16;
      HEAP32[$29>>2] = $204;
      $205 = HEAP32[$29>>2]|0;
      $206 = ($205|0)>=(0);
      if ($206) {
       $207 = HEAP32[$28>>2]|0;
       $208 = ((($207)) + 8|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = HEAP32[$29>>2]|0;
       $211 = (($209) + ($210)|0);
       $212 = HEAP8[$211>>0]|0;
       $213 = $212&255;
       HEAP32[$30>>2] = $213;
       $214 = HEAP32[$30>>2]|0;
       $215 = HEAP32[$6>>2]|0;
       $216 = ((($215)) + 1392|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = $217 >>> $214;
       HEAP32[$216>>2] = $218;
       $219 = HEAP32[$30>>2]|0;
       $220 = HEAP32[$6>>2]|0;
       $221 = ((($220)) + 1396|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = (($222) - ($219))|0;
       HEAP32[$221>>2] = $223;
       $224 = HEAP32[$6>>2]|0;
       $225 = ((($224)) + 1396|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ($226|0)<(0);
       if ($227) {
        $228 = HEAP32[$6>>2]|0;
        $229 = ((($228)) + 1396|0);
        HEAP32[$229>>2] = 0;
        HEAP32[$29>>2] = -1;
       }
      } else {
       $230 = HEAP32[$6>>2]|0;
       $231 = HEAP32[$28>>2]|0;
       $232 = (_codebook_decode_scalar_raw($230,$231)|0);
       HEAP32[$29>>2] = $232;
      }
      $233 = HEAP32[$28>>2]|0;
      $234 = ((($233)) + 23|0);
      $235 = HEAP8[$234>>0]|0;
      $236 = ($235<<24>>24)!=(0);
      if ($236) {
       $237 = HEAP32[$28>>2]|0;
       $238 = ((($237)) + 2088|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = HEAP32[$29>>2]|0;
       $241 = (($239) + ($240<<2)|0);
       $242 = HEAP32[$241>>2]|0;
       HEAP32[$29>>2] = $242;
      }
      $243 = HEAP32[$29>>2]|0;
      $244 = ($243|0)==(-1);
      if ($244) {
       label = 111;
       break L68;
      }
      $245 = HEAP32[$15>>2]|0;
      $246 = ((($245)) + 16|0);
      $247 = HEAP32[$246>>2]|0;
      $248 = HEAP32[$29>>2]|0;
      $249 = (($247) + ($248<<2)|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = HEAP32[$22>>2]|0;
      $252 = HEAP32[$251>>2]|0;
      $253 = HEAP32[$24>>2]|0;
      $254 = (($252) + ($253<<2)|0);
      HEAP32[$254>>2] = $250;
     }
     HEAP32[$12>>2] = 0;
     while(1) {
      $255 = HEAP32[$12>>2]|0;
      $256 = HEAP32[$18>>2]|0;
      $257 = ($255|0)<($256|0);
      if (!($257)) {
       break;
      }
      $258 = HEAP32[$23>>2]|0;
      $259 = HEAP32[$20>>2]|0;
      $260 = ($258|0)<($259|0);
      if (!($260)) {
       break;
      }
      $261 = HEAP32[$15>>2]|0;
      $262 = HEAP32[$261>>2]|0;
      $263 = HEAP32[$23>>2]|0;
      $264 = HEAP32[$15>>2]|0;
      $265 = ((($264)) + 8|0);
      $266 = HEAP32[$265>>2]|0;
      $267 = Math_imul($263, $266)|0;
      $268 = (($262) + ($267))|0;
      HEAP32[$31>>2] = $268;
      $269 = HEAP32[$22>>2]|0;
      $270 = HEAP32[$269>>2]|0;
      $271 = HEAP32[$24>>2]|0;
      $272 = (($270) + ($271<<2)|0);
      $273 = HEAP32[$272>>2]|0;
      $274 = HEAP32[$12>>2]|0;
      $275 = (($273) + ($274)|0);
      $276 = HEAP8[$275>>0]|0;
      $277 = $276&255;
      HEAP32[$32>>2] = $277;
      $278 = HEAP32[$15>>2]|0;
      $279 = ((($278)) + 20|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = HEAP32[$32>>2]|0;
      $282 = (($280) + ($281<<4)|0);
      $283 = HEAP32[$14>>2]|0;
      $284 = (($282) + ($283<<1)|0);
      $285 = HEAP16[$284>>1]|0;
      $286 = $285 << 16 >> 16;
      HEAP32[$33>>2] = $286;
      $287 = HEAP32[$33>>2]|0;
      $288 = ($287|0)>=(0);
      if ($288) {
       $289 = HEAP32[$6>>2]|0;
       $290 = ((($289)) + 124|0);
       $291 = HEAP32[$290>>2]|0;
       $292 = HEAP32[$33>>2]|0;
       $293 = (($291) + (($292*2096)|0)|0);
       HEAP32[$34>>2] = $293;
       $294 = HEAP32[$6>>2]|0;
       $295 = HEAP32[$34>>2]|0;
       $296 = HEAP32[$7>>2]|0;
       $297 = HEAP32[$8>>2]|0;
       $298 = HEAP32[$9>>2]|0;
       $299 = HEAP32[$15>>2]|0;
       $300 = ((($299)) + 8|0);
       $301 = HEAP32[$300>>2]|0;
       $302 = (_codebook_decode_deinterleave_repeat($294,$295,$296,$297,$26,$27,$298,$301)|0);
       $303 = ($302|0)!=(0);
       if (!($303)) {
        label = 111;
        break L68;
       }
      } else {
       $304 = HEAP32[$15>>2]|0;
       $305 = ((($304)) + 8|0);
       $306 = HEAP32[$305>>2]|0;
       $307 = HEAP32[$31>>2]|0;
       $308 = (($307) + ($306))|0;
       HEAP32[$31>>2] = $308;
       $309 = HEAP32[$31>>2]|0;
       $310 = $309 & 1;
       HEAP32[$26>>2] = $310;
       $311 = HEAP32[$31>>2]|0;
       $312 = $311 >> 1;
       HEAP32[$27>>2] = $312;
      }
      $313 = HEAP32[$12>>2]|0;
      $314 = (($313) + 1)|0;
      HEAP32[$12>>2] = $314;
      $315 = HEAP32[$23>>2]|0;
      $316 = (($315) + 1)|0;
      HEAP32[$23>>2] = $316;
     }
     $317 = HEAP32[$24>>2]|0;
     $318 = (($317) + 1)|0;
     HEAP32[$24>>2] = $318;
    }
   } else {
    $319 = HEAP32[$8>>2]|0;
    $320 = ($319|0)==(1);
    if ($320) {
     while(1) {
      $321 = HEAP32[$23>>2]|0;
      $322 = HEAP32[$20>>2]|0;
      $323 = ($321|0)<($322|0);
      if (!($323)) {
       break L71;
      }
      $324 = HEAP32[$15>>2]|0;
      $325 = HEAP32[$324>>2]|0;
      $326 = HEAP32[$23>>2]|0;
      $327 = HEAP32[$15>>2]|0;
      $328 = ((($327)) + 8|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = Math_imul($326, $329)|0;
      $331 = (($325) + ($330))|0;
      HEAP32[$35>>2] = $331;
      HEAP32[$36>>2] = 0;
      $332 = HEAP32[$35>>2]|0;
      HEAP32[$37>>2] = $332;
      $333 = HEAP32[$14>>2]|0;
      $334 = ($333|0)==(0);
      if ($334) {
       $335 = HEAP32[$6>>2]|0;
       $336 = ((($335)) + 124|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = HEAP32[$15>>2]|0;
       $339 = ((($338)) + 13|0);
       $340 = HEAP8[$339>>0]|0;
       $341 = $340&255;
       $342 = (($337) + (($341*2096)|0)|0);
       HEAP32[$38>>2] = $342;
       $343 = HEAP32[$6>>2]|0;
       $344 = ((($343)) + 1396|0);
       $345 = HEAP32[$344>>2]|0;
       $346 = ($345|0)<(10);
       if ($346) {
        $347 = HEAP32[$6>>2]|0;
        _prep_huffman($347);
       }
       $348 = HEAP32[$6>>2]|0;
       $349 = ((($348)) + 1392|0);
       $350 = HEAP32[$349>>2]|0;
       $351 = $350 & 1023;
       HEAP32[$39>>2] = $351;
       $352 = HEAP32[$38>>2]|0;
       $353 = ((($352)) + 36|0);
       $354 = HEAP32[$39>>2]|0;
       $355 = (($353) + ($354<<1)|0);
       $356 = HEAP16[$355>>1]|0;
       $357 = $356 << 16 >> 16;
       HEAP32[$39>>2] = $357;
       $358 = HEAP32[$39>>2]|0;
       $359 = ($358|0)>=(0);
       if ($359) {
        $360 = HEAP32[$38>>2]|0;
        $361 = ((($360)) + 8|0);
        $362 = HEAP32[$361>>2]|0;
        $363 = HEAP32[$39>>2]|0;
        $364 = (($362) + ($363)|0);
        $365 = HEAP8[$364>>0]|0;
        $366 = $365&255;
        HEAP32[$40>>2] = $366;
        $367 = HEAP32[$40>>2]|0;
        $368 = HEAP32[$6>>2]|0;
        $369 = ((($368)) + 1392|0);
        $370 = HEAP32[$369>>2]|0;
        $371 = $370 >>> $367;
        HEAP32[$369>>2] = $371;
        $372 = HEAP32[$40>>2]|0;
        $373 = HEAP32[$6>>2]|0;
        $374 = ((($373)) + 1396|0);
        $375 = HEAP32[$374>>2]|0;
        $376 = (($375) - ($372))|0;
        HEAP32[$374>>2] = $376;
        $377 = HEAP32[$6>>2]|0;
        $378 = ((($377)) + 1396|0);
        $379 = HEAP32[$378>>2]|0;
        $380 = ($379|0)<(0);
        if ($380) {
         $381 = HEAP32[$6>>2]|0;
         $382 = ((($381)) + 1396|0);
         HEAP32[$382>>2] = 0;
         HEAP32[$39>>2] = -1;
        }
       } else {
        $383 = HEAP32[$6>>2]|0;
        $384 = HEAP32[$38>>2]|0;
        $385 = (_codebook_decode_scalar_raw($383,$384)|0);
        HEAP32[$39>>2] = $385;
       }
       $386 = HEAP32[$38>>2]|0;
       $387 = ((($386)) + 23|0);
       $388 = HEAP8[$387>>0]|0;
       $389 = ($388<<24>>24)!=(0);
       if ($389) {
        $390 = HEAP32[$38>>2]|0;
        $391 = ((($390)) + 2088|0);
        $392 = HEAP32[$391>>2]|0;
        $393 = HEAP32[$39>>2]|0;
        $394 = (($392) + ($393<<2)|0);
        $395 = HEAP32[$394>>2]|0;
        HEAP32[$39>>2] = $395;
       }
       $396 = HEAP32[$39>>2]|0;
       $397 = ($396|0)==(-1);
       if ($397) {
        label = 111;
        break L68;
       }
       $398 = HEAP32[$15>>2]|0;
       $399 = ((($398)) + 16|0);
       $400 = HEAP32[$399>>2]|0;
       $401 = HEAP32[$39>>2]|0;
       $402 = (($400) + ($401<<2)|0);
       $403 = HEAP32[$402>>2]|0;
       $404 = HEAP32[$22>>2]|0;
       $405 = HEAP32[$404>>2]|0;
       $406 = HEAP32[$24>>2]|0;
       $407 = (($405) + ($406<<2)|0);
       HEAP32[$407>>2] = $403;
      }
      HEAP32[$12>>2] = 0;
      while(1) {
       $408 = HEAP32[$12>>2]|0;
       $409 = HEAP32[$18>>2]|0;
       $410 = ($408|0)<($409|0);
       if (!($410)) {
        break;
       }
       $411 = HEAP32[$23>>2]|0;
       $412 = HEAP32[$20>>2]|0;
       $413 = ($411|0)<($412|0);
       if (!($413)) {
        break;
       }
       $414 = HEAP32[$15>>2]|0;
       $415 = HEAP32[$414>>2]|0;
       $416 = HEAP32[$23>>2]|0;
       $417 = HEAP32[$15>>2]|0;
       $418 = ((($417)) + 8|0);
       $419 = HEAP32[$418>>2]|0;
       $420 = Math_imul($416, $419)|0;
       $421 = (($415) + ($420))|0;
       HEAP32[$41>>2] = $421;
       $422 = HEAP32[$22>>2]|0;
       $423 = HEAP32[$422>>2]|0;
       $424 = HEAP32[$24>>2]|0;
       $425 = (($423) + ($424<<2)|0);
       $426 = HEAP32[$425>>2]|0;
       $427 = HEAP32[$12>>2]|0;
       $428 = (($426) + ($427)|0);
       $429 = HEAP8[$428>>0]|0;
       $430 = $429&255;
       HEAP32[$42>>2] = $430;
       $431 = HEAP32[$15>>2]|0;
       $432 = ((($431)) + 20|0);
       $433 = HEAP32[$432>>2]|0;
       $434 = HEAP32[$42>>2]|0;
       $435 = (($433) + ($434<<4)|0);
       $436 = HEAP32[$14>>2]|0;
       $437 = (($435) + ($436<<1)|0);
       $438 = HEAP16[$437>>1]|0;
       $439 = $438 << 16 >> 16;
       HEAP32[$43>>2] = $439;
       $440 = HEAP32[$43>>2]|0;
       $441 = ($440|0)>=(0);
       if ($441) {
        $442 = HEAP32[$6>>2]|0;
        $443 = ((($442)) + 124|0);
        $444 = HEAP32[$443>>2]|0;
        $445 = HEAP32[$43>>2]|0;
        $446 = (($444) + (($445*2096)|0)|0);
        HEAP32[$44>>2] = $446;
        $447 = HEAP32[$6>>2]|0;
        $448 = HEAP32[$44>>2]|0;
        $449 = HEAP32[$7>>2]|0;
        $450 = HEAP32[$8>>2]|0;
        $451 = HEAP32[$9>>2]|0;
        $452 = HEAP32[$15>>2]|0;
        $453 = ((($452)) + 8|0);
        $454 = HEAP32[$453>>2]|0;
        $455 = (_codebook_decode_deinterleave_repeat($447,$448,$449,$450,$36,$37,$451,$454)|0);
        $456 = ($455|0)!=(0);
        if (!($456)) {
         label = 111;
         break L68;
        }
       } else {
        $457 = HEAP32[$15>>2]|0;
        $458 = ((($457)) + 8|0);
        $459 = HEAP32[$458>>2]|0;
        $460 = HEAP32[$41>>2]|0;
        $461 = (($460) + ($459))|0;
        HEAP32[$41>>2] = $461;
        HEAP32[$36>>2] = 0;
        $462 = HEAP32[$41>>2]|0;
        HEAP32[$37>>2] = $462;
       }
       $463 = HEAP32[$12>>2]|0;
       $464 = (($463) + 1)|0;
       HEAP32[$12>>2] = $464;
       $465 = HEAP32[$23>>2]|0;
       $466 = (($465) + 1)|0;
       HEAP32[$23>>2] = $466;
      }
      $467 = HEAP32[$24>>2]|0;
      $468 = (($467) + 1)|0;
      HEAP32[$24>>2] = $468;
     }
    } else {
     while(1) {
      $469 = HEAP32[$23>>2]|0;
      $470 = HEAP32[$20>>2]|0;
      $471 = ($469|0)<($470|0);
      if (!($471)) {
       break L71;
      }
      $472 = HEAP32[$15>>2]|0;
      $473 = HEAP32[$472>>2]|0;
      $474 = HEAP32[$23>>2]|0;
      $475 = HEAP32[$15>>2]|0;
      $476 = ((($475)) + 8|0);
      $477 = HEAP32[$476>>2]|0;
      $478 = Math_imul($474, $477)|0;
      $479 = (($473) + ($478))|0;
      HEAP32[$45>>2] = $479;
      $480 = HEAP32[$45>>2]|0;
      $481 = HEAP32[$8>>2]|0;
      $482 = (($480|0) % ($481|0))&-1;
      HEAP32[$46>>2] = $482;
      $483 = HEAP32[$45>>2]|0;
      $484 = HEAP32[$8>>2]|0;
      $485 = (($483|0) / ($484|0))&-1;
      HEAP32[$47>>2] = $485;
      $486 = HEAP32[$14>>2]|0;
      $487 = ($486|0)==(0);
      if ($487) {
       $488 = HEAP32[$6>>2]|0;
       $489 = ((($488)) + 124|0);
       $490 = HEAP32[$489>>2]|0;
       $491 = HEAP32[$15>>2]|0;
       $492 = ((($491)) + 13|0);
       $493 = HEAP8[$492>>0]|0;
       $494 = $493&255;
       $495 = (($490) + (($494*2096)|0)|0);
       HEAP32[$48>>2] = $495;
       $496 = HEAP32[$6>>2]|0;
       $497 = ((($496)) + 1396|0);
       $498 = HEAP32[$497>>2]|0;
       $499 = ($498|0)<(10);
       if ($499) {
        $500 = HEAP32[$6>>2]|0;
        _prep_huffman($500);
       }
       $501 = HEAP32[$6>>2]|0;
       $502 = ((($501)) + 1392|0);
       $503 = HEAP32[$502>>2]|0;
       $504 = $503 & 1023;
       HEAP32[$49>>2] = $504;
       $505 = HEAP32[$48>>2]|0;
       $506 = ((($505)) + 36|0);
       $507 = HEAP32[$49>>2]|0;
       $508 = (($506) + ($507<<1)|0);
       $509 = HEAP16[$508>>1]|0;
       $510 = $509 << 16 >> 16;
       HEAP32[$49>>2] = $510;
       $511 = HEAP32[$49>>2]|0;
       $512 = ($511|0)>=(0);
       if ($512) {
        $513 = HEAP32[$48>>2]|0;
        $514 = ((($513)) + 8|0);
        $515 = HEAP32[$514>>2]|0;
        $516 = HEAP32[$49>>2]|0;
        $517 = (($515) + ($516)|0);
        $518 = HEAP8[$517>>0]|0;
        $519 = $518&255;
        HEAP32[$50>>2] = $519;
        $520 = HEAP32[$50>>2]|0;
        $521 = HEAP32[$6>>2]|0;
        $522 = ((($521)) + 1392|0);
        $523 = HEAP32[$522>>2]|0;
        $524 = $523 >>> $520;
        HEAP32[$522>>2] = $524;
        $525 = HEAP32[$50>>2]|0;
        $526 = HEAP32[$6>>2]|0;
        $527 = ((($526)) + 1396|0);
        $528 = HEAP32[$527>>2]|0;
        $529 = (($528) - ($525))|0;
        HEAP32[$527>>2] = $529;
        $530 = HEAP32[$6>>2]|0;
        $531 = ((($530)) + 1396|0);
        $532 = HEAP32[$531>>2]|0;
        $533 = ($532|0)<(0);
        if ($533) {
         $534 = HEAP32[$6>>2]|0;
         $535 = ((($534)) + 1396|0);
         HEAP32[$535>>2] = 0;
         HEAP32[$49>>2] = -1;
        }
       } else {
        $536 = HEAP32[$6>>2]|0;
        $537 = HEAP32[$48>>2]|0;
        $538 = (_codebook_decode_scalar_raw($536,$537)|0);
        HEAP32[$49>>2] = $538;
       }
       $539 = HEAP32[$48>>2]|0;
       $540 = ((($539)) + 23|0);
       $541 = HEAP8[$540>>0]|0;
       $542 = ($541<<24>>24)!=(0);
       if ($542) {
        $543 = HEAP32[$48>>2]|0;
        $544 = ((($543)) + 2088|0);
        $545 = HEAP32[$544>>2]|0;
        $546 = HEAP32[$49>>2]|0;
        $547 = (($545) + ($546<<2)|0);
        $548 = HEAP32[$547>>2]|0;
        HEAP32[$49>>2] = $548;
       }
       $549 = HEAP32[$49>>2]|0;
       $550 = ($549|0)==(-1);
       if ($550) {
        label = 111;
        break L68;
       }
       $551 = HEAP32[$15>>2]|0;
       $552 = ((($551)) + 16|0);
       $553 = HEAP32[$552>>2]|0;
       $554 = HEAP32[$49>>2]|0;
       $555 = (($553) + ($554<<2)|0);
       $556 = HEAP32[$555>>2]|0;
       $557 = HEAP32[$22>>2]|0;
       $558 = HEAP32[$557>>2]|0;
       $559 = HEAP32[$24>>2]|0;
       $560 = (($558) + ($559<<2)|0);
       HEAP32[$560>>2] = $556;
      }
      HEAP32[$12>>2] = 0;
      while(1) {
       $561 = HEAP32[$12>>2]|0;
       $562 = HEAP32[$18>>2]|0;
       $563 = ($561|0)<($562|0);
       if (!($563)) {
        break;
       }
       $564 = HEAP32[$23>>2]|0;
       $565 = HEAP32[$20>>2]|0;
       $566 = ($564|0)<($565|0);
       if (!($566)) {
        break;
       }
       $567 = HEAP32[$15>>2]|0;
       $568 = HEAP32[$567>>2]|0;
       $569 = HEAP32[$23>>2]|0;
       $570 = HEAP32[$15>>2]|0;
       $571 = ((($570)) + 8|0);
       $572 = HEAP32[$571>>2]|0;
       $573 = Math_imul($569, $572)|0;
       $574 = (($568) + ($573))|0;
       HEAP32[$51>>2] = $574;
       $575 = HEAP32[$22>>2]|0;
       $576 = HEAP32[$575>>2]|0;
       $577 = HEAP32[$24>>2]|0;
       $578 = (($576) + ($577<<2)|0);
       $579 = HEAP32[$578>>2]|0;
       $580 = HEAP32[$12>>2]|0;
       $581 = (($579) + ($580)|0);
       $582 = HEAP8[$581>>0]|0;
       $583 = $582&255;
       HEAP32[$52>>2] = $583;
       $584 = HEAP32[$15>>2]|0;
       $585 = ((($584)) + 20|0);
       $586 = HEAP32[$585>>2]|0;
       $587 = HEAP32[$52>>2]|0;
       $588 = (($586) + ($587<<4)|0);
       $589 = HEAP32[$14>>2]|0;
       $590 = (($588) + ($589<<1)|0);
       $591 = HEAP16[$590>>1]|0;
       $592 = $591 << 16 >> 16;
       HEAP32[$53>>2] = $592;
       $593 = HEAP32[$53>>2]|0;
       $594 = ($593|0)>=(0);
       if ($594) {
        $595 = HEAP32[$6>>2]|0;
        $596 = ((($595)) + 124|0);
        $597 = HEAP32[$596>>2]|0;
        $598 = HEAP32[$53>>2]|0;
        $599 = (($597) + (($598*2096)|0)|0);
        HEAP32[$54>>2] = $599;
        $600 = HEAP32[$6>>2]|0;
        $601 = HEAP32[$54>>2]|0;
        $602 = HEAP32[$7>>2]|0;
        $603 = HEAP32[$8>>2]|0;
        $604 = HEAP32[$9>>2]|0;
        $605 = HEAP32[$15>>2]|0;
        $606 = ((($605)) + 8|0);
        $607 = HEAP32[$606>>2]|0;
        $608 = (_codebook_decode_deinterleave_repeat($600,$601,$602,$603,$46,$47,$604,$607)|0);
        $609 = ($608|0)!=(0);
        if (!($609)) {
         label = 111;
         break L68;
        }
       } else {
        $610 = HEAP32[$15>>2]|0;
        $611 = ((($610)) + 8|0);
        $612 = HEAP32[$611>>2]|0;
        $613 = HEAP32[$51>>2]|0;
        $614 = (($613) + ($612))|0;
        HEAP32[$51>>2] = $614;
        $615 = HEAP32[$51>>2]|0;
        $616 = HEAP32[$8>>2]|0;
        $617 = (($615|0) % ($616|0))&-1;
        HEAP32[$46>>2] = $617;
        $618 = HEAP32[$51>>2]|0;
        $619 = HEAP32[$8>>2]|0;
        $620 = (($618|0) / ($619|0))&-1;
        HEAP32[$47>>2] = $620;
       }
       $621 = HEAP32[$12>>2]|0;
       $622 = (($621) + 1)|0;
       HEAP32[$12>>2] = $622;
       $623 = HEAP32[$23>>2]|0;
       $624 = (($623) + 1)|0;
       HEAP32[$23>>2] = $624;
      }
      $625 = HEAP32[$24>>2]|0;
      $626 = (($625) + 1)|0;
      HEAP32[$24>>2] = $626;
     }
    }
   }
  } while(0);
  $627 = HEAP32[$14>>2]|0;
  $628 = (($627) + 1)|0;
  HEAP32[$14>>2] = $628;
 }
 if ((label|0) == 111) {
  $794 = HEAP32[$21>>2]|0;
  $795 = HEAP32[$6>>2]|0;
  $796 = ((($795)) + 92|0);
  HEAP32[$796>>2] = $794;
  STACKTOP = sp;return;
 }
}
function _do_floor($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = sp + 68|0;
 $8 = sp + 64|0;
 $9 = sp + 60|0;
 $10 = sp + 56|0;
 $11 = sp + 52|0;
 $12 = sp + 48|0;
 $13 = sp + 44|0;
 $14 = sp + 40|0;
 $15 = sp + 36|0;
 $16 = sp + 32|0;
 $17 = sp + 28|0;
 $18 = sp + 24|0;
 $19 = sp + 20|0;
 $20 = sp + 16|0;
 $21 = sp + 12|0;
 $22 = sp + 8|0;
 $23 = sp + 4|0;
 $24 = sp;
 HEAP32[$8>>2] = $0;
 HEAP32[$9>>2] = $1;
 HEAP32[$10>>2] = $2;
 HEAP32[$11>>2] = $3;
 HEAP32[$12>>2] = $4;
 HEAP32[$13>>2] = $5;
 HEAP32[$14>>2] = $6;
 $25 = HEAP32[$11>>2]|0;
 $26 = $25 >> 1;
 HEAP32[$15>>2] = $26;
 $27 = HEAP32[$9>>2]|0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$10>>2]|0;
 $31 = (($29) + (($30*3)|0)|0);
 $32 = ((($31)) + 2|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 HEAP32[$16>>2] = $34;
 $35 = HEAP32[$9>>2]|0;
 $36 = ((($35)) + 9|0);
 $37 = HEAP32[$16>>2]|0;
 $38 = (($36) + ($37)|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 HEAP32[$17>>2] = $40;
 $41 = HEAP32[$8>>2]|0;
 $42 = ((($41)) + 132|0);
 $43 = HEAP32[$17>>2]|0;
 $44 = (($42) + ($43<<1)|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = ($46|0)==(0);
 $48 = HEAP32[$8>>2]|0;
 if ($47) {
  $49 = (_error($48,21)|0);
  HEAP32[$7>>2] = $49;
  $125 = HEAP32[$7>>2]|0;
  STACKTOP = sp;return ($125|0);
 }
 $50 = ((($48)) + 260|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$17>>2]|0;
 $53 = (($51) + (($52*1596)|0)|0);
 HEAP32[$18>>2] = $53;
 HEAP32[$21>>2] = 0;
 $54 = HEAP32[$13>>2]|0;
 $55 = HEAP16[$54>>1]|0;
 $56 = $55 << 16 >> 16;
 $57 = HEAP32[$18>>2]|0;
 $58 = ((($57)) + 1588|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = Math_imul($56, $60)|0;
 HEAP32[$22>>2] = $61;
 HEAP32[$20>>2] = 1;
 while(1) {
  $62 = HEAP32[$20>>2]|0;
  $63 = HEAP32[$18>>2]|0;
  $64 = ((($63)) + 1592|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($62|0)<($65|0);
  if (!($66)) {
   break;
  }
  $67 = HEAP32[$18>>2]|0;
  $68 = ((($67)) + 838|0);
  $69 = HEAP32[$20>>2]|0;
  $70 = (($68) + ($69)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  HEAP32[$19>>2] = $72;
  $73 = HEAP32[$13>>2]|0;
  $74 = HEAP32[$19>>2]|0;
  $75 = (($73) + ($74<<1)|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $78 = ($77|0)>=(0);
  if ($78) {
   $79 = HEAP32[$13>>2]|0;
   $80 = HEAP32[$19>>2]|0;
   $81 = (($79) + ($80<<1)|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = $82 << 16 >> 16;
   $84 = HEAP32[$18>>2]|0;
   $85 = ((($84)) + 1588|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = Math_imul($83, $87)|0;
   HEAP32[$23>>2] = $88;
   $89 = HEAP32[$18>>2]|0;
   $90 = ((($89)) + 338|0);
   $91 = HEAP32[$19>>2]|0;
   $92 = (($90) + ($91<<1)|0);
   $93 = HEAP16[$92>>1]|0;
   $94 = $93&65535;
   HEAP32[$24>>2] = $94;
   $95 = HEAP32[$21>>2]|0;
   $96 = HEAP32[$24>>2]|0;
   $97 = ($95|0)!=($96|0);
   if ($97) {
    $98 = HEAP32[$12>>2]|0;
    $99 = HEAP32[$21>>2]|0;
    $100 = HEAP32[$22>>2]|0;
    $101 = HEAP32[$24>>2]|0;
    $102 = HEAP32[$23>>2]|0;
    $103 = HEAP32[$15>>2]|0;
    _draw_line($98,$99,$100,$101,$102,$103);
   }
   $104 = HEAP32[$24>>2]|0;
   HEAP32[$21>>2] = $104;
   $105 = HEAP32[$23>>2]|0;
   HEAP32[$22>>2] = $105;
  }
  $106 = HEAP32[$20>>2]|0;
  $107 = (($106) + 1)|0;
  HEAP32[$20>>2] = $107;
 }
 $108 = HEAP32[$21>>2]|0;
 $109 = HEAP32[$15>>2]|0;
 $110 = ($108|0)<($109|0);
 L15: do {
  if ($110) {
   $111 = HEAP32[$21>>2]|0;
   HEAP32[$19>>2] = $111;
   while(1) {
    $112 = HEAP32[$19>>2]|0;
    $113 = HEAP32[$15>>2]|0;
    $114 = ($112|0)<($113|0);
    if (!($114)) {
     break L15;
    }
    $115 = HEAP32[$22>>2]|0;
    $116 = (3576 + ($115<<2)|0);
    $117 = +HEAPF32[$116>>2];
    $118 = HEAP32[$12>>2]|0;
    $119 = HEAP32[$19>>2]|0;
    $120 = (($118) + ($119<<2)|0);
    $121 = +HEAPF32[$120>>2];
    $122 = $121 * $117;
    HEAPF32[$120>>2] = $122;
    $123 = HEAP32[$19>>2]|0;
    $124 = (($123) + 1)|0;
    HEAP32[$19>>2] = $124;
   }
  }
 } while(0);
 HEAP32[$7>>2] = 1;
 $125 = HEAP32[$7>>2]|0;
 STACKTOP = sp;return ($125|0);
}
function _inverse_mdct($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0;
 var $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0;
 var $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0;
 var $208 = 0.0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0.0;
 var $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0.0;
 var $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0;
 var $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0.0, $297 = 0, $298 = 0.0;
 var $299 = 0.0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0.0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0.0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0.0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0.0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0.0, $582 = 0, $583 = 0, $584 = 0.0, $585 = 0.0, $586 = 0, $587 = 0;
 var $588 = 0.0, $589 = 0, $59 = 0, $590 = 0, $591 = 0.0, $592 = 0.0, $593 = 0, $594 = 0, $595 = 0.0, $596 = 0.0, $597 = 0.0, $598 = 0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0.0, $602 = 0.0, $603 = 0, $604 = 0;
 var $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0, $609 = 0.0, $61 = 0, $610 = 0.0, $611 = 0.0, $612 = 0.0, $613 = 0, $614 = 0.0, $615 = 0, $616 = 0, $617 = 0.0, $618 = 0.0, $619 = 0, $62 = 0, $620 = 0, $621 = 0.0, $622 = 0;
 var $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0.0, $628 = 0.0, $629 = 0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0.0, $633 = 0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0;
 var $641 = 0.0, $642 = 0.0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0.0, $648 = 0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0, $653 = 0.0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0.0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0, $664 = 0, $665 = 0.0, $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0, $675 = 0, $676 = 0.0, $677 = 0.0;
 var $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0.0, $692 = 0.0, $693 = 0.0, $694 = 0.0, $695 = 0.0;
 var $696 = 0, $697 = 0, $698 = 0.0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0, $703 = 0.0, $704 = 0.0, $705 = 0.0, $706 = 0, $707 = 0.0, $708 = 0.0, $709 = 0.0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0.0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0.0, $751 = 0.0, $752 = 0, $753 = 0, $754 = 0.0, $755 = 0, $756 = 0, $757 = 0.0, $758 = 0.0, $759 = 0.0, $76 = 0, $760 = 0, $761 = 0, $762 = 0.0, $763 = 0.0, $764 = 0, $765 = 0, $766 = 0.0, $767 = 0.0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0.0, $771 = 0, $772 = 0, $773 = 0.0, $774 = 0.0, $775 = 0.0, $776 = 0.0, $777 = 0, $778 = 0.0, $779 = 0.0, $78 = 0, $780 = 0, $781 = 0, $782 = 0.0, $783 = 0, $784 = 0.0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0.0, $79 = 0, $790 = 0, $791 = 0, $792 = 0.0, $793 = 0.0, $794 = 0, $795 = 0, $796 = 0.0, $797 = 0, $798 = 0, $799 = 0.0, $8 = 0, $80 = 0, $800 = 0.0, $801 = 0.0, $802 = 0;
 var $803 = 0, $804 = 0.0, $805 = 0.0, $806 = 0, $807 = 0, $808 = 0.0, $809 = 0.0, $81 = 0, $810 = 0, $811 = 0, $812 = 0.0, $813 = 0, $814 = 0, $815 = 0.0, $816 = 0.0, $817 = 0.0, $818 = 0.0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0.0, $822 = 0.0, $823 = 0, $824 = 0, $825 = 0.0, $826 = 0, $827 = 0, $828 = 0.0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0.0, $834 = 0, $835 = 0, $836 = 0.0, $837 = 0.0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0.0, $841 = 0, $842 = 0, $843 = 0.0, $844 = 0.0, $845 = 0.0, $846 = 0, $847 = 0, $848 = 0.0, $849 = 0.0, $85 = 0, $850 = 0, $851 = 0, $852 = 0.0, $853 = 0.0, $854 = 0, $855 = 0, $856 = 0.0, $857 = 0;
 var $858 = 0, $859 = 0.0, $86 = 0, $860 = 0.0, $861 = 0.0, $862 = 0.0, $863 = 0, $864 = 0, $865 = 0.0, $866 = 0.0, $867 = 0, $868 = 0, $869 = 0.0, $87 = 0, $870 = 0, $871 = 0, $872 = 0.0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0.0, $877 = 0, $878 = 0, $879 = 0.0, $88 = 0, $880 = 0.0, $881 = 0, $882 = 0, $883 = 0.0, $884 = 0, $885 = 0.0, $886 = 0.0, $887 = 0.0, $888 = 0, $889 = 0.0, $89 = 0, $890 = 0.0, $891 = 0, $892 = 0.0, $893 = 0.0;
 var $894 = 0, $895 = 0, $896 = 0.0, $897 = 0, $898 = 0, $899 = 0.0, $9 = 0, $90 = 0, $900 = 0.0, $901 = 0.0, $902 = 0.0, $903 = 0, $904 = 0, $905 = 0.0, $906 = 0.0, $907 = 0, $908 = 0.0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0.0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $4 = sp + 236|0;
 $5 = sp + 232|0;
 $6 = sp + 228|0;
 $7 = sp + 224|0;
 $8 = sp + 220|0;
 $9 = sp + 216|0;
 $10 = sp + 212|0;
 $11 = sp + 208|0;
 $12 = sp + 204|0;
 $13 = sp + 200|0;
 $14 = sp + 196|0;
 $15 = sp + 192|0;
 $16 = sp + 188|0;
 $17 = sp + 184|0;
 $18 = sp + 180|0;
 $19 = sp + 176|0;
 $20 = sp + 172|0;
 $21 = sp + 168|0;
 $22 = sp + 164|0;
 $23 = sp + 160|0;
 $24 = sp + 156|0;
 $25 = sp + 152|0;
 $26 = sp + 148|0;
 $27 = sp + 144|0;
 $28 = sp + 140|0;
 $29 = sp + 136|0;
 $30 = sp + 132|0;
 $31 = sp + 128|0;
 $32 = sp + 124|0;
 $33 = sp + 120|0;
 $34 = sp + 116|0;
 $35 = sp + 112|0;
 $36 = sp + 108|0;
 $37 = sp + 104|0;
 $38 = sp + 100|0;
 $39 = sp + 96|0;
 $40 = sp + 92|0;
 $41 = sp + 88|0;
 $42 = sp + 84|0;
 $43 = sp + 80|0;
 $44 = sp + 76|0;
 $45 = sp + 72|0;
 $46 = sp + 68|0;
 $47 = sp + 64|0;
 $48 = sp + 60|0;
 $49 = sp + 56|0;
 $50 = sp + 52|0;
 $51 = sp + 48|0;
 $52 = sp + 44|0;
 $53 = sp + 40|0;
 $54 = sp + 36|0;
 $55 = sp + 32|0;
 $56 = sp + 28|0;
 $57 = sp + 24|0;
 $58 = sp + 20|0;
 $59 = sp + 16|0;
 $60 = sp + 12|0;
 $61 = sp + 8|0;
 $62 = sp + 4|0;
 $63 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $64 = HEAP32[$5>>2]|0;
 $65 = $64 >> 1;
 HEAP32[$8>>2] = $65;
 $66 = HEAP32[$5>>2]|0;
 $67 = $66 >> 2;
 HEAP32[$9>>2] = $67;
 $68 = HEAP32[$5>>2]|0;
 $69 = $68 >> 3;
 HEAP32[$10>>2] = $69;
 $70 = HEAP32[$6>>2]|0;
 $71 = ((($70)) + 92|0);
 $72 = HEAP32[$71>>2]|0;
 HEAP32[$13>>2] = $72;
 $73 = HEAP32[$6>>2]|0;
 $74 = ((($73)) + 80|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)!=(0|0);
 if ($76) {
  $77 = HEAP32[$6>>2]|0;
  $78 = HEAP32[$8>>2]|0;
  $79 = $78<<2;
  $80 = (_setup_temp_malloc($77,$79)|0);
  $84 = $80;
 } else {
  $81 = HEAP32[$8>>2]|0;
  $82 = $81<<2;
  $$alloca_mul = $82;
  $83 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
  $84 = $83;
 }
 HEAP32[$14>>2] = $84;
 HEAP32[$15>>2] = 0;
 HEAP32[$16>>2] = 0;
 $85 = HEAP32[$6>>2]|0;
 $86 = ((($85)) + 1068|0);
 $87 = HEAP32[$7>>2]|0;
 $88 = (($86) + ($87<<2)|0);
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$17>>2] = $89;
 $90 = HEAP32[$14>>2]|0;
 $91 = HEAP32[$8>>2]|0;
 $92 = (($91) - 2)|0;
 $93 = (($90) + ($92<<2)|0);
 HEAP32[$18>>2] = $93;
 $94 = HEAP32[$17>>2]|0;
 HEAP32[$20>>2] = $94;
 $95 = HEAP32[$4>>2]|0;
 HEAP32[$19>>2] = $95;
 $96 = HEAP32[$4>>2]|0;
 $97 = HEAP32[$8>>2]|0;
 $98 = (($96) + ($97<<2)|0);
 HEAP32[$21>>2] = $98;
 while(1) {
  $99 = HEAP32[$19>>2]|0;
  $100 = HEAP32[$21>>2]|0;
  $101 = ($99|0)!=($100|0);
  if (!($101)) {
   break;
  }
  $102 = HEAP32[$19>>2]|0;
  $103 = +HEAPF32[$102>>2];
  $104 = HEAP32[$20>>2]|0;
  $105 = +HEAPF32[$104>>2];
  $106 = $103 * $105;
  $107 = HEAP32[$19>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF32[$108>>2];
  $110 = HEAP32[$20>>2]|0;
  $111 = ((($110)) + 4|0);
  $112 = +HEAPF32[$111>>2];
  $113 = $109 * $112;
  $114 = $106 - $113;
  $115 = HEAP32[$18>>2]|0;
  $116 = ((($115)) + 4|0);
  HEAPF32[$116>>2] = $114;
  $117 = HEAP32[$19>>2]|0;
  $118 = +HEAPF32[$117>>2];
  $119 = HEAP32[$20>>2]|0;
  $120 = ((($119)) + 4|0);
  $121 = +HEAPF32[$120>>2];
  $122 = $118 * $121;
  $123 = HEAP32[$19>>2]|0;
  $124 = ((($123)) + 8|0);
  $125 = +HEAPF32[$124>>2];
  $126 = HEAP32[$20>>2]|0;
  $127 = +HEAPF32[$126>>2];
  $128 = $125 * $127;
  $129 = $122 + $128;
  $130 = HEAP32[$18>>2]|0;
  HEAPF32[$130>>2] = $129;
  $131 = HEAP32[$18>>2]|0;
  $132 = ((($131)) + -8|0);
  HEAP32[$18>>2] = $132;
  $133 = HEAP32[$20>>2]|0;
  $134 = ((($133)) + 8|0);
  HEAP32[$20>>2] = $134;
  $135 = HEAP32[$19>>2]|0;
  $136 = ((($135)) + 16|0);
  HEAP32[$19>>2] = $136;
 }
 $137 = HEAP32[$4>>2]|0;
 $138 = HEAP32[$8>>2]|0;
 $139 = (($138) - 3)|0;
 $140 = (($137) + ($139<<2)|0);
 HEAP32[$19>>2] = $140;
 while(1) {
  $141 = HEAP32[$18>>2]|0;
  $142 = HEAP32[$14>>2]|0;
  $143 = ($141>>>0)>=($142>>>0);
  if (!($143)) {
   break;
  }
  $144 = HEAP32[$19>>2]|0;
  $145 = ((($144)) + 8|0);
  $146 = +HEAPF32[$145>>2];
  $147 = -$146;
  $148 = HEAP32[$20>>2]|0;
  $149 = +HEAPF32[$148>>2];
  $150 = $147 * $149;
  $151 = HEAP32[$19>>2]|0;
  $152 = +HEAPF32[$151>>2];
  $153 = -$152;
  $154 = HEAP32[$20>>2]|0;
  $155 = ((($154)) + 4|0);
  $156 = +HEAPF32[$155>>2];
  $157 = $153 * $156;
  $158 = $150 - $157;
  $159 = HEAP32[$18>>2]|0;
  $160 = ((($159)) + 4|0);
  HEAPF32[$160>>2] = $158;
  $161 = HEAP32[$19>>2]|0;
  $162 = ((($161)) + 8|0);
  $163 = +HEAPF32[$162>>2];
  $164 = -$163;
  $165 = HEAP32[$20>>2]|0;
  $166 = ((($165)) + 4|0);
  $167 = +HEAPF32[$166>>2];
  $168 = $164 * $167;
  $169 = HEAP32[$19>>2]|0;
  $170 = +HEAPF32[$169>>2];
  $171 = -$170;
  $172 = HEAP32[$20>>2]|0;
  $173 = +HEAPF32[$172>>2];
  $174 = $171 * $173;
  $175 = $168 + $174;
  $176 = HEAP32[$18>>2]|0;
  HEAPF32[$176>>2] = $175;
  $177 = HEAP32[$18>>2]|0;
  $178 = ((($177)) + -8|0);
  HEAP32[$18>>2] = $178;
  $179 = HEAP32[$20>>2]|0;
  $180 = ((($179)) + 8|0);
  HEAP32[$20>>2] = $180;
  $181 = HEAP32[$19>>2]|0;
  $182 = ((($181)) + -16|0);
  HEAP32[$19>>2] = $182;
 }
 $183 = HEAP32[$4>>2]|0;
 HEAP32[$15>>2] = $183;
 $184 = HEAP32[$14>>2]|0;
 HEAP32[$16>>2] = $184;
 $185 = HEAP32[$17>>2]|0;
 $186 = HEAP32[$8>>2]|0;
 $187 = (($186) - 8)|0;
 $188 = (($185) + ($187<<2)|0);
 HEAP32[$22>>2] = $188;
 $189 = HEAP32[$16>>2]|0;
 $190 = HEAP32[$9>>2]|0;
 $191 = (($189) + ($190<<2)|0);
 HEAP32[$25>>2] = $191;
 $192 = HEAP32[$16>>2]|0;
 HEAP32[$26>>2] = $192;
 $193 = HEAP32[$15>>2]|0;
 $194 = HEAP32[$9>>2]|0;
 $195 = (($193) + ($194<<2)|0);
 HEAP32[$23>>2] = $195;
 $196 = HEAP32[$15>>2]|0;
 HEAP32[$24>>2] = $196;
 while(1) {
  $197 = HEAP32[$22>>2]|0;
  $198 = HEAP32[$17>>2]|0;
  $199 = ($197>>>0)>=($198>>>0);
  if (!($199)) {
   break;
  }
  $200 = HEAP32[$25>>2]|0;
  $201 = ((($200)) + 4|0);
  $202 = +HEAPF32[$201>>2];
  $203 = HEAP32[$26>>2]|0;
  $204 = ((($203)) + 4|0);
  $205 = +HEAPF32[$204>>2];
  $206 = $202 - $205;
  HEAPF32[$28>>2] = $206;
  $207 = HEAP32[$25>>2]|0;
  $208 = +HEAPF32[$207>>2];
  $209 = HEAP32[$26>>2]|0;
  $210 = +HEAPF32[$209>>2];
  $211 = $208 - $210;
  HEAPF32[$27>>2] = $211;
  $212 = HEAP32[$25>>2]|0;
  $213 = ((($212)) + 4|0);
  $214 = +HEAPF32[$213>>2];
  $215 = HEAP32[$26>>2]|0;
  $216 = ((($215)) + 4|0);
  $217 = +HEAPF32[$216>>2];
  $218 = $214 + $217;
  $219 = HEAP32[$23>>2]|0;
  $220 = ((($219)) + 4|0);
  HEAPF32[$220>>2] = $218;
  $221 = HEAP32[$25>>2]|0;
  $222 = +HEAPF32[$221>>2];
  $223 = HEAP32[$26>>2]|0;
  $224 = +HEAPF32[$223>>2];
  $225 = $222 + $224;
  $226 = HEAP32[$23>>2]|0;
  HEAPF32[$226>>2] = $225;
  $227 = +HEAPF32[$28>>2];
  $228 = HEAP32[$22>>2]|0;
  $229 = ((($228)) + 16|0);
  $230 = +HEAPF32[$229>>2];
  $231 = $227 * $230;
  $232 = +HEAPF32[$27>>2];
  $233 = HEAP32[$22>>2]|0;
  $234 = ((($233)) + 20|0);
  $235 = +HEAPF32[$234>>2];
  $236 = $232 * $235;
  $237 = $231 - $236;
  $238 = HEAP32[$24>>2]|0;
  $239 = ((($238)) + 4|0);
  HEAPF32[$239>>2] = $237;
  $240 = +HEAPF32[$27>>2];
  $241 = HEAP32[$22>>2]|0;
  $242 = ((($241)) + 16|0);
  $243 = +HEAPF32[$242>>2];
  $244 = $240 * $243;
  $245 = +HEAPF32[$28>>2];
  $246 = HEAP32[$22>>2]|0;
  $247 = ((($246)) + 20|0);
  $248 = +HEAPF32[$247>>2];
  $249 = $245 * $248;
  $250 = $244 + $249;
  $251 = HEAP32[$24>>2]|0;
  HEAPF32[$251>>2] = $250;
  $252 = HEAP32[$25>>2]|0;
  $253 = ((($252)) + 12|0);
  $254 = +HEAPF32[$253>>2];
  $255 = HEAP32[$26>>2]|0;
  $256 = ((($255)) + 12|0);
  $257 = +HEAPF32[$256>>2];
  $258 = $254 - $257;
  HEAPF32[$28>>2] = $258;
  $259 = HEAP32[$25>>2]|0;
  $260 = ((($259)) + 8|0);
  $261 = +HEAPF32[$260>>2];
  $262 = HEAP32[$26>>2]|0;
  $263 = ((($262)) + 8|0);
  $264 = +HEAPF32[$263>>2];
  $265 = $261 - $264;
  HEAPF32[$27>>2] = $265;
  $266 = HEAP32[$25>>2]|0;
  $267 = ((($266)) + 12|0);
  $268 = +HEAPF32[$267>>2];
  $269 = HEAP32[$26>>2]|0;
  $270 = ((($269)) + 12|0);
  $271 = +HEAPF32[$270>>2];
  $272 = $268 + $271;
  $273 = HEAP32[$23>>2]|0;
  $274 = ((($273)) + 12|0);
  HEAPF32[$274>>2] = $272;
  $275 = HEAP32[$25>>2]|0;
  $276 = ((($275)) + 8|0);
  $277 = +HEAPF32[$276>>2];
  $278 = HEAP32[$26>>2]|0;
  $279 = ((($278)) + 8|0);
  $280 = +HEAPF32[$279>>2];
  $281 = $277 + $280;
  $282 = HEAP32[$23>>2]|0;
  $283 = ((($282)) + 8|0);
  HEAPF32[$283>>2] = $281;
  $284 = +HEAPF32[$28>>2];
  $285 = HEAP32[$22>>2]|0;
  $286 = +HEAPF32[$285>>2];
  $287 = $284 * $286;
  $288 = +HEAPF32[$27>>2];
  $289 = HEAP32[$22>>2]|0;
  $290 = ((($289)) + 4|0);
  $291 = +HEAPF32[$290>>2];
  $292 = $288 * $291;
  $293 = $287 - $292;
  $294 = HEAP32[$24>>2]|0;
  $295 = ((($294)) + 12|0);
  HEAPF32[$295>>2] = $293;
  $296 = +HEAPF32[$27>>2];
  $297 = HEAP32[$22>>2]|0;
  $298 = +HEAPF32[$297>>2];
  $299 = $296 * $298;
  $300 = +HEAPF32[$28>>2];
  $301 = HEAP32[$22>>2]|0;
  $302 = ((($301)) + 4|0);
  $303 = +HEAPF32[$302>>2];
  $304 = $300 * $303;
  $305 = $299 + $304;
  $306 = HEAP32[$24>>2]|0;
  $307 = ((($306)) + 8|0);
  HEAPF32[$307>>2] = $305;
  $308 = HEAP32[$22>>2]|0;
  $309 = ((($308)) + -32|0);
  HEAP32[$22>>2] = $309;
  $310 = HEAP32[$23>>2]|0;
  $311 = ((($310)) + 16|0);
  HEAP32[$23>>2] = $311;
  $312 = HEAP32[$24>>2]|0;
  $313 = ((($312)) + 16|0);
  HEAP32[$24>>2] = $313;
  $314 = HEAP32[$25>>2]|0;
  $315 = ((($314)) + 16|0);
  HEAP32[$25>>2] = $315;
  $316 = HEAP32[$26>>2]|0;
  $317 = ((($316)) + 16|0);
  HEAP32[$26>>2] = $317;
 }
 $318 = HEAP32[$5>>2]|0;
 $319 = (_ilog($318)|0);
 $320 = (($319) - 1)|0;
 HEAP32[$12>>2] = $320;
 $321 = HEAP32[$5>>2]|0;
 $322 = $321 >> 4;
 $323 = HEAP32[$15>>2]|0;
 $324 = HEAP32[$8>>2]|0;
 $325 = (($324) - 1)|0;
 $326 = HEAP32[$9>>2]|0;
 $327 = 0;
 $328 = (($325) - ($327))|0;
 $329 = HEAP32[$5>>2]|0;
 $330 = $329 >> 3;
 $331 = (0 - ($330))|0;
 $332 = HEAP32[$17>>2]|0;
 _imdct_step3_iter0_loop($322,$323,$328,$331,$332);
 $333 = HEAP32[$5>>2]|0;
 $334 = $333 >> 4;
 $335 = HEAP32[$15>>2]|0;
 $336 = HEAP32[$8>>2]|0;
 $337 = (($336) - 1)|0;
 $338 = HEAP32[$9>>2]|0;
 $339 = $338;
 $340 = (($337) - ($339))|0;
 $341 = HEAP32[$5>>2]|0;
 $342 = $341 >> 3;
 $343 = (0 - ($342))|0;
 $344 = HEAP32[$17>>2]|0;
 _imdct_step3_iter0_loop($334,$335,$340,$343,$344);
 $345 = HEAP32[$5>>2]|0;
 $346 = $345 >> 5;
 $347 = HEAP32[$15>>2]|0;
 $348 = HEAP32[$8>>2]|0;
 $349 = (($348) - 1)|0;
 $350 = HEAP32[$10>>2]|0;
 $351 = 0;
 $352 = (($349) - ($351))|0;
 $353 = HEAP32[$5>>2]|0;
 $354 = $353 >> 4;
 $355 = (0 - ($354))|0;
 $356 = HEAP32[$17>>2]|0;
 _imdct_step3_inner_r_loop($346,$347,$352,$355,$356,16);
 $357 = HEAP32[$5>>2]|0;
 $358 = $357 >> 5;
 $359 = HEAP32[$15>>2]|0;
 $360 = HEAP32[$8>>2]|0;
 $361 = (($360) - 1)|0;
 $362 = HEAP32[$10>>2]|0;
 $363 = $362;
 $364 = (($361) - ($363))|0;
 $365 = HEAP32[$5>>2]|0;
 $366 = $365 >> 4;
 $367 = (0 - ($366))|0;
 $368 = HEAP32[$17>>2]|0;
 _imdct_step3_inner_r_loop($358,$359,$364,$367,$368,16);
 $369 = HEAP32[$5>>2]|0;
 $370 = $369 >> 5;
 $371 = HEAP32[$15>>2]|0;
 $372 = HEAP32[$8>>2]|0;
 $373 = (($372) - 1)|0;
 $374 = HEAP32[$10>>2]|0;
 $375 = $374<<1;
 $376 = (($373) - ($375))|0;
 $377 = HEAP32[$5>>2]|0;
 $378 = $377 >> 4;
 $379 = (0 - ($378))|0;
 $380 = HEAP32[$17>>2]|0;
 _imdct_step3_inner_r_loop($370,$371,$376,$379,$380,16);
 $381 = HEAP32[$5>>2]|0;
 $382 = $381 >> 5;
 $383 = HEAP32[$15>>2]|0;
 $384 = HEAP32[$8>>2]|0;
 $385 = (($384) - 1)|0;
 $386 = HEAP32[$10>>2]|0;
 $387 = ($386*3)|0;
 $388 = (($385) - ($387))|0;
 $389 = HEAP32[$5>>2]|0;
 $390 = $389 >> 4;
 $391 = (0 - ($390))|0;
 $392 = HEAP32[$17>>2]|0;
 _imdct_step3_inner_r_loop($382,$383,$388,$391,$392,16);
 HEAP32[$11>>2] = 2;
 while(1) {
  $393 = HEAP32[$11>>2]|0;
  $394 = HEAP32[$12>>2]|0;
  $395 = (($394) - 3)|0;
  $396 = $395 >> 1;
  $397 = ($393|0)<($396|0);
  if (!($397)) {
   break;
  }
  $398 = HEAP32[$5>>2]|0;
  $399 = HEAP32[$11>>2]|0;
  $400 = (($399) + 2)|0;
  $401 = $398 >> $400;
  HEAP32[$29>>2] = $401;
  $402 = HEAP32[$29>>2]|0;
  $403 = $402 >> 1;
  HEAP32[$30>>2] = $403;
  $404 = HEAP32[$11>>2]|0;
  $405 = (($404) + 1)|0;
  $406 = 1 << $405;
  HEAP32[$31>>2] = $406;
  HEAP32[$32>>2] = 0;
  while(1) {
   $407 = HEAP32[$32>>2]|0;
   $408 = HEAP32[$31>>2]|0;
   $409 = ($407|0)<($408|0);
   if (!($409)) {
    break;
   }
   $410 = HEAP32[$5>>2]|0;
   $411 = HEAP32[$11>>2]|0;
   $412 = (($411) + 4)|0;
   $413 = $410 >> $412;
   $414 = HEAP32[$15>>2]|0;
   $415 = HEAP32[$8>>2]|0;
   $416 = (($415) - 1)|0;
   $417 = HEAP32[$29>>2]|0;
   $418 = HEAP32[$32>>2]|0;
   $419 = Math_imul($417, $418)|0;
   $420 = (($416) - ($419))|0;
   $421 = HEAP32[$30>>2]|0;
   $422 = (0 - ($421))|0;
   $423 = HEAP32[$17>>2]|0;
   $424 = HEAP32[$11>>2]|0;
   $425 = (($424) + 3)|0;
   $426 = 1 << $425;
   _imdct_step3_inner_r_loop($413,$414,$420,$422,$423,$426);
   $427 = HEAP32[$32>>2]|0;
   $428 = (($427) + 1)|0;
   HEAP32[$32>>2] = $428;
  }
  $429 = HEAP32[$11>>2]|0;
  $430 = (($429) + 1)|0;
  HEAP32[$11>>2] = $430;
 }
 while(1) {
  $431 = HEAP32[$11>>2]|0;
  $432 = HEAP32[$12>>2]|0;
  $433 = (($432) - 6)|0;
  $434 = ($431|0)<($433|0);
  $435 = HEAP32[$5>>2]|0;
  if (!($434)) {
   break;
  }
  $436 = HEAP32[$11>>2]|0;
  $437 = (($436) + 2)|0;
  $438 = $435 >> $437;
  HEAP32[$33>>2] = $438;
  $439 = HEAP32[$11>>2]|0;
  $440 = (($439) + 3)|0;
  $441 = 1 << $440;
  HEAP32[$34>>2] = $441;
  $442 = HEAP32[$33>>2]|0;
  $443 = $442 >> 1;
  HEAP32[$35>>2] = $443;
  $444 = HEAP32[$5>>2]|0;
  $445 = HEAP32[$11>>2]|0;
  $446 = (($445) + 6)|0;
  $447 = $444 >> $446;
  HEAP32[$36>>2] = $447;
  $448 = HEAP32[$11>>2]|0;
  $449 = (($448) + 1)|0;
  $450 = 1 << $449;
  HEAP32[$38>>2] = $450;
  $451 = HEAP32[$17>>2]|0;
  HEAP32[$40>>2] = $451;
  $452 = HEAP32[$8>>2]|0;
  $453 = (($452) - 1)|0;
  HEAP32[$39>>2] = $453;
  $454 = HEAP32[$36>>2]|0;
  HEAP32[$37>>2] = $454;
  while(1) {
   $455 = HEAP32[$37>>2]|0;
   $456 = ($455|0)>(0);
   if (!($456)) {
    break;
   }
   $457 = HEAP32[$38>>2]|0;
   $458 = HEAP32[$15>>2]|0;
   $459 = HEAP32[$39>>2]|0;
   $460 = HEAP32[$35>>2]|0;
   $461 = (0 - ($460))|0;
   $462 = HEAP32[$40>>2]|0;
   $463 = HEAP32[$34>>2]|0;
   $464 = HEAP32[$33>>2]|0;
   _imdct_step3_inner_s_loop($457,$458,$459,$461,$462,$463,$464);
   $465 = HEAP32[$34>>2]|0;
   $466 = $465<<2;
   $467 = HEAP32[$40>>2]|0;
   $468 = (($467) + ($466<<2)|0);
   HEAP32[$40>>2] = $468;
   $469 = HEAP32[$39>>2]|0;
   $470 = (($469) - 8)|0;
   HEAP32[$39>>2] = $470;
   $471 = HEAP32[$37>>2]|0;
   $472 = (($471) + -1)|0;
   HEAP32[$37>>2] = $472;
  }
  $473 = HEAP32[$11>>2]|0;
  $474 = (($473) + 1)|0;
  HEAP32[$11>>2] = $474;
 }
 $475 = $435 >> 5;
 $476 = HEAP32[$15>>2]|0;
 $477 = HEAP32[$8>>2]|0;
 $478 = (($477) - 1)|0;
 $479 = HEAP32[$17>>2]|0;
 $480 = HEAP32[$5>>2]|0;
 _imdct_step3_inner_s_loop_ld654($475,$476,$478,$479,$480);
 $481 = HEAP32[$6>>2]|0;
 $482 = ((($481)) + 1100|0);
 $483 = HEAP32[$7>>2]|0;
 $484 = (($482) + ($483<<2)|0);
 $485 = HEAP32[$484>>2]|0;
 HEAP32[$41>>2] = $485;
 $486 = HEAP32[$16>>2]|0;
 $487 = HEAP32[$9>>2]|0;
 $488 = (($487) - 4)|0;
 $489 = (($486) + ($488<<2)|0);
 HEAP32[$42>>2] = $489;
 $490 = HEAP32[$16>>2]|0;
 $491 = HEAP32[$8>>2]|0;
 $492 = (($491) - 4)|0;
 $493 = (($490) + ($492<<2)|0);
 HEAP32[$43>>2] = $493;
 while(1) {
  $494 = HEAP32[$42>>2]|0;
  $495 = HEAP32[$16>>2]|0;
  $496 = ($494>>>0)>=($495>>>0);
  if (!($496)) {
   break;
  }
  $497 = HEAP32[$41>>2]|0;
  $498 = HEAP16[$497>>1]|0;
  $499 = $498&65535;
  HEAP32[$44>>2] = $499;
  $500 = HEAP32[$15>>2]|0;
  $501 = HEAP32[$44>>2]|0;
  $502 = (($501) + 0)|0;
  $503 = (($500) + ($502<<2)|0);
  $504 = +HEAPF32[$503>>2];
  $505 = HEAP32[$43>>2]|0;
  $506 = ((($505)) + 12|0);
  HEAPF32[$506>>2] = $504;
  $507 = HEAP32[$15>>2]|0;
  $508 = HEAP32[$44>>2]|0;
  $509 = (($508) + 1)|0;
  $510 = (($507) + ($509<<2)|0);
  $511 = +HEAPF32[$510>>2];
  $512 = HEAP32[$43>>2]|0;
  $513 = ((($512)) + 8|0);
  HEAPF32[$513>>2] = $511;
  $514 = HEAP32[$15>>2]|0;
  $515 = HEAP32[$44>>2]|0;
  $516 = (($515) + 2)|0;
  $517 = (($514) + ($516<<2)|0);
  $518 = +HEAPF32[$517>>2];
  $519 = HEAP32[$42>>2]|0;
  $520 = ((($519)) + 12|0);
  HEAPF32[$520>>2] = $518;
  $521 = HEAP32[$15>>2]|0;
  $522 = HEAP32[$44>>2]|0;
  $523 = (($522) + 3)|0;
  $524 = (($521) + ($523<<2)|0);
  $525 = +HEAPF32[$524>>2];
  $526 = HEAP32[$42>>2]|0;
  $527 = ((($526)) + 8|0);
  HEAPF32[$527>>2] = $525;
  $528 = HEAP32[$41>>2]|0;
  $529 = ((($528)) + 2|0);
  $530 = HEAP16[$529>>1]|0;
  $531 = $530&65535;
  HEAP32[$44>>2] = $531;
  $532 = HEAP32[$15>>2]|0;
  $533 = HEAP32[$44>>2]|0;
  $534 = (($533) + 0)|0;
  $535 = (($532) + ($534<<2)|0);
  $536 = +HEAPF32[$535>>2];
  $537 = HEAP32[$43>>2]|0;
  $538 = ((($537)) + 4|0);
  HEAPF32[$538>>2] = $536;
  $539 = HEAP32[$15>>2]|0;
  $540 = HEAP32[$44>>2]|0;
  $541 = (($540) + 1)|0;
  $542 = (($539) + ($541<<2)|0);
  $543 = +HEAPF32[$542>>2];
  $544 = HEAP32[$43>>2]|0;
  HEAPF32[$544>>2] = $543;
  $545 = HEAP32[$15>>2]|0;
  $546 = HEAP32[$44>>2]|0;
  $547 = (($546) + 2)|0;
  $548 = (($545) + ($547<<2)|0);
  $549 = +HEAPF32[$548>>2];
  $550 = HEAP32[$42>>2]|0;
  $551 = ((($550)) + 4|0);
  HEAPF32[$551>>2] = $549;
  $552 = HEAP32[$15>>2]|0;
  $553 = HEAP32[$44>>2]|0;
  $554 = (($553) + 3)|0;
  $555 = (($552) + ($554<<2)|0);
  $556 = +HEAPF32[$555>>2];
  $557 = HEAP32[$42>>2]|0;
  HEAPF32[$557>>2] = $556;
  $558 = HEAP32[$42>>2]|0;
  $559 = ((($558)) + -16|0);
  HEAP32[$42>>2] = $559;
  $560 = HEAP32[$43>>2]|0;
  $561 = ((($560)) + -16|0);
  HEAP32[$43>>2] = $561;
  $562 = HEAP32[$41>>2]|0;
  $563 = ((($562)) + 4|0);
  HEAP32[$41>>2] = $563;
 }
 $564 = HEAP32[$16>>2]|0;
 $565 = HEAP32[$14>>2]|0;
 $566 = ($564|0)==($565|0);
 if (!($566)) {
  ___assert_fail((14821|0),(14636|0),2411,(14831|0));
  // unreachable;
 }
 $567 = HEAP32[$6>>2]|0;
 $568 = ((($567)) + 1084|0);
 $569 = HEAP32[$7>>2]|0;
 $570 = (($568) + ($569<<2)|0);
 $571 = HEAP32[$570>>2]|0;
 HEAP32[$45>>2] = $571;
 $572 = HEAP32[$16>>2]|0;
 HEAP32[$46>>2] = $572;
 $573 = HEAP32[$16>>2]|0;
 $574 = HEAP32[$8>>2]|0;
 $575 = (($573) + ($574<<2)|0);
 $576 = ((($575)) + -16|0);
 HEAP32[$47>>2] = $576;
 while(1) {
  $577 = HEAP32[$46>>2]|0;
  $578 = HEAP32[$47>>2]|0;
  $579 = ($577>>>0)<($578>>>0);
  if (!($579)) {
   break;
  }
  $580 = HEAP32[$46>>2]|0;
  $581 = +HEAPF32[$580>>2];
  $582 = HEAP32[$47>>2]|0;
  $583 = ((($582)) + 8|0);
  $584 = +HEAPF32[$583>>2];
  $585 = $581 - $584;
  HEAPF32[$48>>2] = $585;
  $586 = HEAP32[$46>>2]|0;
  $587 = ((($586)) + 4|0);
  $588 = +HEAPF32[$587>>2];
  $589 = HEAP32[$47>>2]|0;
  $590 = ((($589)) + 12|0);
  $591 = +HEAPF32[$590>>2];
  $592 = $588 + $591;
  HEAPF32[$49>>2] = $592;
  $593 = HEAP32[$45>>2]|0;
  $594 = ((($593)) + 4|0);
  $595 = +HEAPF32[$594>>2];
  $596 = +HEAPF32[$48>>2];
  $597 = $595 * $596;
  $598 = HEAP32[$45>>2]|0;
  $599 = +HEAPF32[$598>>2];
  $600 = +HEAPF32[$49>>2];
  $601 = $599 * $600;
  $602 = $597 + $601;
  HEAPF32[$50>>2] = $602;
  $603 = HEAP32[$45>>2]|0;
  $604 = ((($603)) + 4|0);
  $605 = +HEAPF32[$604>>2];
  $606 = +HEAPF32[$49>>2];
  $607 = $605 * $606;
  $608 = HEAP32[$45>>2]|0;
  $609 = +HEAPF32[$608>>2];
  $610 = +HEAPF32[$48>>2];
  $611 = $609 * $610;
  $612 = $607 - $611;
  HEAPF32[$51>>2] = $612;
  $613 = HEAP32[$46>>2]|0;
  $614 = +HEAPF32[$613>>2];
  $615 = HEAP32[$47>>2]|0;
  $616 = ((($615)) + 8|0);
  $617 = +HEAPF32[$616>>2];
  $618 = $614 + $617;
  HEAPF32[$52>>2] = $618;
  $619 = HEAP32[$46>>2]|0;
  $620 = ((($619)) + 4|0);
  $621 = +HEAPF32[$620>>2];
  $622 = HEAP32[$47>>2]|0;
  $623 = ((($622)) + 12|0);
  $624 = +HEAPF32[$623>>2];
  $625 = $621 - $624;
  HEAPF32[$53>>2] = $625;
  $626 = +HEAPF32[$52>>2];
  $627 = +HEAPF32[$50>>2];
  $628 = $626 + $627;
  $629 = HEAP32[$46>>2]|0;
  HEAPF32[$629>>2] = $628;
  $630 = +HEAPF32[$53>>2];
  $631 = +HEAPF32[$51>>2];
  $632 = $630 + $631;
  $633 = HEAP32[$46>>2]|0;
  $634 = ((($633)) + 4|0);
  HEAPF32[$634>>2] = $632;
  $635 = +HEAPF32[$52>>2];
  $636 = +HEAPF32[$50>>2];
  $637 = $635 - $636;
  $638 = HEAP32[$47>>2]|0;
  $639 = ((($638)) + 8|0);
  HEAPF32[$639>>2] = $637;
  $640 = +HEAPF32[$51>>2];
  $641 = +HEAPF32[$53>>2];
  $642 = $640 - $641;
  $643 = HEAP32[$47>>2]|0;
  $644 = ((($643)) + 12|0);
  HEAPF32[$644>>2] = $642;
  $645 = HEAP32[$46>>2]|0;
  $646 = ((($645)) + 8|0);
  $647 = +HEAPF32[$646>>2];
  $648 = HEAP32[$47>>2]|0;
  $649 = +HEAPF32[$648>>2];
  $650 = $647 - $649;
  HEAPF32[$48>>2] = $650;
  $651 = HEAP32[$46>>2]|0;
  $652 = ((($651)) + 12|0);
  $653 = +HEAPF32[$652>>2];
  $654 = HEAP32[$47>>2]|0;
  $655 = ((($654)) + 4|0);
  $656 = +HEAPF32[$655>>2];
  $657 = $653 + $656;
  HEAPF32[$49>>2] = $657;
  $658 = HEAP32[$45>>2]|0;
  $659 = ((($658)) + 12|0);
  $660 = +HEAPF32[$659>>2];
  $661 = +HEAPF32[$48>>2];
  $662 = $660 * $661;
  $663 = HEAP32[$45>>2]|0;
  $664 = ((($663)) + 8|0);
  $665 = +HEAPF32[$664>>2];
  $666 = +HEAPF32[$49>>2];
  $667 = $665 * $666;
  $668 = $662 + $667;
  HEAPF32[$50>>2] = $668;
  $669 = HEAP32[$45>>2]|0;
  $670 = ((($669)) + 12|0);
  $671 = +HEAPF32[$670>>2];
  $672 = +HEAPF32[$49>>2];
  $673 = $671 * $672;
  $674 = HEAP32[$45>>2]|0;
  $675 = ((($674)) + 8|0);
  $676 = +HEAPF32[$675>>2];
  $677 = +HEAPF32[$48>>2];
  $678 = $676 * $677;
  $679 = $673 - $678;
  HEAPF32[$51>>2] = $679;
  $680 = HEAP32[$46>>2]|0;
  $681 = ((($680)) + 8|0);
  $682 = +HEAPF32[$681>>2];
  $683 = HEAP32[$47>>2]|0;
  $684 = +HEAPF32[$683>>2];
  $685 = $682 + $684;
  HEAPF32[$52>>2] = $685;
  $686 = HEAP32[$46>>2]|0;
  $687 = ((($686)) + 12|0);
  $688 = +HEAPF32[$687>>2];
  $689 = HEAP32[$47>>2]|0;
  $690 = ((($689)) + 4|0);
  $691 = +HEAPF32[$690>>2];
  $692 = $688 - $691;
  HEAPF32[$53>>2] = $692;
  $693 = +HEAPF32[$52>>2];
  $694 = +HEAPF32[$50>>2];
  $695 = $693 + $694;
  $696 = HEAP32[$46>>2]|0;
  $697 = ((($696)) + 8|0);
  HEAPF32[$697>>2] = $695;
  $698 = +HEAPF32[$53>>2];
  $699 = +HEAPF32[$51>>2];
  $700 = $698 + $699;
  $701 = HEAP32[$46>>2]|0;
  $702 = ((($701)) + 12|0);
  HEAPF32[$702>>2] = $700;
  $703 = +HEAPF32[$52>>2];
  $704 = +HEAPF32[$50>>2];
  $705 = $703 - $704;
  $706 = HEAP32[$47>>2]|0;
  HEAPF32[$706>>2] = $705;
  $707 = +HEAPF32[$51>>2];
  $708 = +HEAPF32[$53>>2];
  $709 = $707 - $708;
  $710 = HEAP32[$47>>2]|0;
  $711 = ((($710)) + 4|0);
  HEAPF32[$711>>2] = $709;
  $712 = HEAP32[$45>>2]|0;
  $713 = ((($712)) + 16|0);
  HEAP32[$45>>2] = $713;
  $714 = HEAP32[$46>>2]|0;
  $715 = ((($714)) + 16|0);
  HEAP32[$46>>2] = $715;
  $716 = HEAP32[$47>>2]|0;
  $717 = ((($716)) + -16|0);
  HEAP32[$47>>2] = $717;
 }
 $718 = HEAP32[$6>>2]|0;
 $719 = ((($718)) + 1076|0);
 $720 = HEAP32[$7>>2]|0;
 $721 = (($719) + ($720<<2)|0);
 $722 = HEAP32[$721>>2]|0;
 $723 = HEAP32[$8>>2]|0;
 $724 = (($722) + ($723<<2)|0);
 $725 = ((($724)) + -32|0);
 HEAP32[$58>>2] = $725;
 $726 = HEAP32[$14>>2]|0;
 $727 = HEAP32[$8>>2]|0;
 $728 = (($726) + ($727<<2)|0);
 $729 = ((($728)) + -32|0);
 HEAP32[$59>>2] = $729;
 $730 = HEAP32[$4>>2]|0;
 HEAP32[$54>>2] = $730;
 $731 = HEAP32[$4>>2]|0;
 $732 = HEAP32[$8>>2]|0;
 $733 = (($732) - 4)|0;
 $734 = (($731) + ($733<<2)|0);
 HEAP32[$55>>2] = $734;
 $735 = HEAP32[$4>>2]|0;
 $736 = HEAP32[$8>>2]|0;
 $737 = (($735) + ($736<<2)|0);
 HEAP32[$56>>2] = $737;
 $738 = HEAP32[$4>>2]|0;
 $739 = HEAP32[$5>>2]|0;
 $740 = (($739) - 4)|0;
 $741 = (($738) + ($740<<2)|0);
 HEAP32[$57>>2] = $741;
 while(1) {
  $742 = HEAP32[$59>>2]|0;
  $743 = HEAP32[$16>>2]|0;
  $744 = ($742>>>0)>=($743>>>0);
  if (!($744)) {
   break;
  }
  $745 = HEAP32[$59>>2]|0;
  $746 = ((($745)) + 24|0);
  $747 = +HEAPF32[$746>>2];
  $748 = HEAP32[$58>>2]|0;
  $749 = ((($748)) + 28|0);
  $750 = +HEAPF32[$749>>2];
  $751 = $747 * $750;
  $752 = HEAP32[$59>>2]|0;
  $753 = ((($752)) + 28|0);
  $754 = +HEAPF32[$753>>2];
  $755 = HEAP32[$58>>2]|0;
  $756 = ((($755)) + 24|0);
  $757 = +HEAPF32[$756>>2];
  $758 = $754 * $757;
  $759 = $751 - $758;
  HEAPF32[$63>>2] = $759;
  $760 = HEAP32[$59>>2]|0;
  $761 = ((($760)) + 24|0);
  $762 = +HEAPF32[$761>>2];
  $763 = -$762;
  $764 = HEAP32[$58>>2]|0;
  $765 = ((($764)) + 24|0);
  $766 = +HEAPF32[$765>>2];
  $767 = $763 * $766;
  $768 = HEAP32[$59>>2]|0;
  $769 = ((($768)) + 28|0);
  $770 = +HEAPF32[$769>>2];
  $771 = HEAP32[$58>>2]|0;
  $772 = ((($771)) + 28|0);
  $773 = +HEAPF32[$772>>2];
  $774 = $770 * $773;
  $775 = $767 - $774;
  HEAPF32[$62>>2] = $775;
  $776 = +HEAPF32[$63>>2];
  $777 = HEAP32[$54>>2]|0;
  HEAPF32[$777>>2] = $776;
  $778 = +HEAPF32[$63>>2];
  $779 = -$778;
  $780 = HEAP32[$55>>2]|0;
  $781 = ((($780)) + 12|0);
  HEAPF32[$781>>2] = $779;
  $782 = +HEAPF32[$62>>2];
  $783 = HEAP32[$56>>2]|0;
  HEAPF32[$783>>2] = $782;
  $784 = +HEAPF32[$62>>2];
  $785 = HEAP32[$57>>2]|0;
  $786 = ((($785)) + 12|0);
  HEAPF32[$786>>2] = $784;
  $787 = HEAP32[$59>>2]|0;
  $788 = ((($787)) + 16|0);
  $789 = +HEAPF32[$788>>2];
  $790 = HEAP32[$58>>2]|0;
  $791 = ((($790)) + 20|0);
  $792 = +HEAPF32[$791>>2];
  $793 = $789 * $792;
  $794 = HEAP32[$59>>2]|0;
  $795 = ((($794)) + 20|0);
  $796 = +HEAPF32[$795>>2];
  $797 = HEAP32[$58>>2]|0;
  $798 = ((($797)) + 16|0);
  $799 = +HEAPF32[$798>>2];
  $800 = $796 * $799;
  $801 = $793 - $800;
  HEAPF32[$61>>2] = $801;
  $802 = HEAP32[$59>>2]|0;
  $803 = ((($802)) + 16|0);
  $804 = +HEAPF32[$803>>2];
  $805 = -$804;
  $806 = HEAP32[$58>>2]|0;
  $807 = ((($806)) + 16|0);
  $808 = +HEAPF32[$807>>2];
  $809 = $805 * $808;
  $810 = HEAP32[$59>>2]|0;
  $811 = ((($810)) + 20|0);
  $812 = +HEAPF32[$811>>2];
  $813 = HEAP32[$58>>2]|0;
  $814 = ((($813)) + 20|0);
  $815 = +HEAPF32[$814>>2];
  $816 = $812 * $815;
  $817 = $809 - $816;
  HEAPF32[$60>>2] = $817;
  $818 = +HEAPF32[$61>>2];
  $819 = HEAP32[$54>>2]|0;
  $820 = ((($819)) + 4|0);
  HEAPF32[$820>>2] = $818;
  $821 = +HEAPF32[$61>>2];
  $822 = -$821;
  $823 = HEAP32[$55>>2]|0;
  $824 = ((($823)) + 8|0);
  HEAPF32[$824>>2] = $822;
  $825 = +HEAPF32[$60>>2];
  $826 = HEAP32[$56>>2]|0;
  $827 = ((($826)) + 4|0);
  HEAPF32[$827>>2] = $825;
  $828 = +HEAPF32[$60>>2];
  $829 = HEAP32[$57>>2]|0;
  $830 = ((($829)) + 8|0);
  HEAPF32[$830>>2] = $828;
  $831 = HEAP32[$59>>2]|0;
  $832 = ((($831)) + 8|0);
  $833 = +HEAPF32[$832>>2];
  $834 = HEAP32[$58>>2]|0;
  $835 = ((($834)) + 12|0);
  $836 = +HEAPF32[$835>>2];
  $837 = $833 * $836;
  $838 = HEAP32[$59>>2]|0;
  $839 = ((($838)) + 12|0);
  $840 = +HEAPF32[$839>>2];
  $841 = HEAP32[$58>>2]|0;
  $842 = ((($841)) + 8|0);
  $843 = +HEAPF32[$842>>2];
  $844 = $840 * $843;
  $845 = $837 - $844;
  HEAPF32[$63>>2] = $845;
  $846 = HEAP32[$59>>2]|0;
  $847 = ((($846)) + 8|0);
  $848 = +HEAPF32[$847>>2];
  $849 = -$848;
  $850 = HEAP32[$58>>2]|0;
  $851 = ((($850)) + 8|0);
  $852 = +HEAPF32[$851>>2];
  $853 = $849 * $852;
  $854 = HEAP32[$59>>2]|0;
  $855 = ((($854)) + 12|0);
  $856 = +HEAPF32[$855>>2];
  $857 = HEAP32[$58>>2]|0;
  $858 = ((($857)) + 12|0);
  $859 = +HEAPF32[$858>>2];
  $860 = $856 * $859;
  $861 = $853 - $860;
  HEAPF32[$62>>2] = $861;
  $862 = +HEAPF32[$63>>2];
  $863 = HEAP32[$54>>2]|0;
  $864 = ((($863)) + 8|0);
  HEAPF32[$864>>2] = $862;
  $865 = +HEAPF32[$63>>2];
  $866 = -$865;
  $867 = HEAP32[$55>>2]|0;
  $868 = ((($867)) + 4|0);
  HEAPF32[$868>>2] = $866;
  $869 = +HEAPF32[$62>>2];
  $870 = HEAP32[$56>>2]|0;
  $871 = ((($870)) + 8|0);
  HEAPF32[$871>>2] = $869;
  $872 = +HEAPF32[$62>>2];
  $873 = HEAP32[$57>>2]|0;
  $874 = ((($873)) + 4|0);
  HEAPF32[$874>>2] = $872;
  $875 = HEAP32[$59>>2]|0;
  $876 = +HEAPF32[$875>>2];
  $877 = HEAP32[$58>>2]|0;
  $878 = ((($877)) + 4|0);
  $879 = +HEAPF32[$878>>2];
  $880 = $876 * $879;
  $881 = HEAP32[$59>>2]|0;
  $882 = ((($881)) + 4|0);
  $883 = +HEAPF32[$882>>2];
  $884 = HEAP32[$58>>2]|0;
  $885 = +HEAPF32[$884>>2];
  $886 = $883 * $885;
  $887 = $880 - $886;
  HEAPF32[$61>>2] = $887;
  $888 = HEAP32[$59>>2]|0;
  $889 = +HEAPF32[$888>>2];
  $890 = -$889;
  $891 = HEAP32[$58>>2]|0;
  $892 = +HEAPF32[$891>>2];
  $893 = $890 * $892;
  $894 = HEAP32[$59>>2]|0;
  $895 = ((($894)) + 4|0);
  $896 = +HEAPF32[$895>>2];
  $897 = HEAP32[$58>>2]|0;
  $898 = ((($897)) + 4|0);
  $899 = +HEAPF32[$898>>2];
  $900 = $896 * $899;
  $901 = $893 - $900;
  HEAPF32[$60>>2] = $901;
  $902 = +HEAPF32[$61>>2];
  $903 = HEAP32[$54>>2]|0;
  $904 = ((($903)) + 12|0);
  HEAPF32[$904>>2] = $902;
  $905 = +HEAPF32[$61>>2];
  $906 = -$905;
  $907 = HEAP32[$55>>2]|0;
  HEAPF32[$907>>2] = $906;
  $908 = +HEAPF32[$60>>2];
  $909 = HEAP32[$56>>2]|0;
  $910 = ((($909)) + 12|0);
  HEAPF32[$910>>2] = $908;
  $911 = +HEAPF32[$60>>2];
  $912 = HEAP32[$57>>2]|0;
  HEAPF32[$912>>2] = $911;
  $913 = HEAP32[$58>>2]|0;
  $914 = ((($913)) + -32|0);
  HEAP32[$58>>2] = $914;
  $915 = HEAP32[$59>>2]|0;
  $916 = ((($915)) + -32|0);
  HEAP32[$59>>2] = $916;
  $917 = HEAP32[$54>>2]|0;
  $918 = ((($917)) + 16|0);
  HEAP32[$54>>2] = $918;
  $919 = HEAP32[$56>>2]|0;
  $920 = ((($919)) + 16|0);
  HEAP32[$56>>2] = $920;
  $921 = HEAP32[$55>>2]|0;
  $922 = ((($921)) + -16|0);
  HEAP32[$55>>2] = $922;
  $923 = HEAP32[$57>>2]|0;
  $924 = ((($923)) + -16|0);
  HEAP32[$57>>2] = $924;
 }
 $925 = HEAP32[$13>>2]|0;
 $926 = HEAP32[$6>>2]|0;
 $927 = ((($926)) + 92|0);
 HEAP32[$927>>2] = $925;
 STACKTOP = sp;return;
}
function _flush_packet($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = (_get8_packet_raw($2)|0);
  $4 = ($3|0)!=(-1);
  if (!($4)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _get8_packet_raw($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 1376|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)!=(0);
 if (!($6)) {
  $7 = HEAP32[$2>>2]|0;
  $8 = ((($7)) + 1384|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  if ($10) {
   HEAP32[$1>>2] = -1;
   $30 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($30|0);
  }
  $11 = HEAP32[$2>>2]|0;
  $12 = (_next_segment($11)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   HEAP32[$1>>2] = -1;
   $30 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($30|0);
  }
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = ((($14)) + 1376|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)>(0);
 if (!($18)) {
  ___assert_fail((14751|0),(14636|0),1139,(14771|0));
  // unreachable;
 }
 $19 = HEAP32[$2>>2]|0;
 $20 = ((($19)) + 1376|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = (($21) + -1)<<24>>24;
 HEAP8[$20>>0] = $22;
 $23 = HEAP32[$2>>2]|0;
 $24 = ((($23)) + 1400|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$24>>2] = $26;
 $27 = HEAP32[$2>>2]|0;
 $28 = (_get8($27)|0);
 $29 = $28&255;
 HEAP32[$1>>2] = $29;
 $30 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($30|0);
}
function _next_segment($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 1384|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  HEAP32[$1>>2] = 0;
  $68 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($68|0);
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 1380|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(-1);
 if ($11) {
  $12 = HEAP32[$2>>2]|0;
  $13 = ((($12)) + 1116|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) - 1)|0;
  $16 = HEAP32[$2>>2]|0;
  $17 = ((($16)) + 1388|0);
  HEAP32[$17>>2] = $15;
  $18 = HEAP32[$2>>2]|0;
  $19 = (_start_page($18)|0);
  $20 = ($19|0)!=(0);
  $21 = HEAP32[$2>>2]|0;
  if (!($20)) {
   $22 = ((($21)) + 1384|0);
   HEAP32[$22>>2] = 1;
   HEAP32[$1>>2] = 0;
   $68 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($68|0);
  }
  $23 = ((($21)) + 1375|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 & 1;
  $27 = ($26|0)!=(0);
  if (!($27)) {
   $28 = HEAP32[$2>>2]|0;
   $29 = (_error($28,32)|0);
   HEAP32[$1>>2] = $29;
   $68 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($68|0);
  }
 }
 $30 = HEAP32[$2>>2]|0;
 $31 = ((($30)) + 1120|0);
 $32 = HEAP32[$2>>2]|0;
 $33 = ((($32)) + 1380|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + 1)|0;
 HEAP32[$33>>2] = $35;
 $36 = (($31) + ($34)|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 HEAP32[$3>>2] = $38;
 $39 = HEAP32[$3>>2]|0;
 $40 = ($39|0)<(255);
 if ($40) {
  $41 = HEAP32[$2>>2]|0;
  $42 = ((($41)) + 1384|0);
  HEAP32[$42>>2] = 1;
  $43 = HEAP32[$2>>2]|0;
  $44 = ((($43)) + 1380|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) - 1)|0;
  $47 = HEAP32[$2>>2]|0;
  $48 = ((($47)) + 1388|0);
  HEAP32[$48>>2] = $46;
 }
 $49 = HEAP32[$2>>2]|0;
 $50 = ((($49)) + 1380|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$2>>2]|0;
 $53 = ((($52)) + 1116|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($51|0)>=($54|0);
 if ($55) {
  $56 = HEAP32[$2>>2]|0;
  $57 = ((($56)) + 1380|0);
  HEAP32[$57>>2] = -1;
 }
 $58 = HEAP32[$2>>2]|0;
 $59 = ((($58)) + 1376|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = ($61|0)==(0);
 if (!($62)) {
  ___assert_fail((14787|0),(14636|0),1125,(14808|0));
  // unreachable;
 }
 $63 = HEAP32[$3>>2]|0;
 $64 = $63&255;
 $65 = HEAP32[$2>>2]|0;
 $66 = ((($65)) + 1376|0);
 HEAP8[$66>>0] = $64;
 $67 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $67;
 $68 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($68|0);
}
function _get8($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 $8 = HEAP32[$2>>2]|0;
 if ($7) {
  $9 = ((($8)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$2>>2]|0;
  $12 = ((($11)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10>>>0)>=($13>>>0);
  $15 = HEAP32[$2>>2]|0;
  if ($14) {
   $16 = ((($15)) + 96|0);
   HEAP32[$16>>2] = 1;
   HEAP8[$1>>0] = 0;
   $30 = HEAP8[$1>>0]|0;
   STACKTOP = sp;return ($30|0);
  } else {
   $17 = ((($15)) + 32|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 1|0);
   HEAP32[$17>>2] = $19;
   $20 = HEAP8[$18>>0]|0;
   HEAP8[$1>>0] = $20;
   $30 = HEAP8[$1>>0]|0;
   STACKTOP = sp;return ($30|0);
  }
 } else {
  $21 = ((($8)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_fgetc($22)|0);
  HEAP32[$3>>2] = $23;
  $24 = HEAP32[$3>>2]|0;
  $25 = ($24|0)==(-1);
  if ($25) {
   $26 = HEAP32[$2>>2]|0;
   $27 = ((($26)) + 96|0);
   HEAP32[$27>>2] = 1;
   HEAP8[$1>>0] = 0;
   $30 = HEAP8[$1>>0]|0;
   STACKTOP = sp;return ($30|0);
  } else {
   $28 = HEAP32[$3>>2]|0;
   $29 = $28&255;
   HEAP8[$1>>0] = $29;
   $30 = HEAP8[$1>>0]|0;
   STACKTOP = sp;return ($30|0);
  }
 }
 return (0)|0;
}
function _start_page($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_capture_pattern($3)|0);
 $5 = ($4|0)!=(0);
 $6 = HEAP32[$2>>2]|0;
 if ($5) {
  $8 = (_start_page_no_capturepattern($6)|0);
  HEAP32[$1>>2] = $8;
  $9 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = (_error($6,30)|0);
  HEAP32[$1>>2] = $7;
  $9 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _capture_pattern($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_get8($3)|0);
 $5 = $4&255;
 $6 = (79)!=($5|0);
 do {
  if ($6) {
   HEAP32[$1>>2] = 0;
  } else {
   $7 = HEAP32[$2>>2]|0;
   $8 = (_get8($7)|0);
   $9 = $8&255;
   $10 = (103)!=($9|0);
   if ($10) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $11 = HEAP32[$2>>2]|0;
   $12 = (_get8($11)|0);
   $13 = $12&255;
   $14 = (103)!=($13|0);
   if ($14) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $15 = HEAP32[$2>>2]|0;
   $16 = (_get8($15)|0);
   $17 = $16&255;
   $18 = (83)!=($17|0);
   if ($18) {
    HEAP32[$1>>2] = 0;
    break;
   } else {
    HEAP32[$1>>2] = 1;
    break;
   }
  }
 } while(0);
 $19 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($19|0);
}
function _start_page_no_capturepattern($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp;
 HEAP32[$2>>2] = $0;
 $10 = HEAP32[$2>>2]|0;
 $11 = (_get8($10)|0);
 $12 = $11&255;
 $13 = (0)!=($12|0);
 $14 = HEAP32[$2>>2]|0;
 if ($13) {
  $15 = (_error($14,31)|0);
  HEAP32[$1>>2] = $15;
  $110 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($110|0);
 }
 $16 = (_get8($14)|0);
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($17)) + 1375|0);
 HEAP8[$18>>0] = $16;
 $19 = HEAP32[$2>>2]|0;
 $20 = (_get32($19)|0);
 HEAP32[$3>>2] = $20;
 $21 = HEAP32[$2>>2]|0;
 $22 = (_get32($21)|0);
 HEAP32[$4>>2] = $22;
 $23 = HEAP32[$2>>2]|0;
 (_get32($23)|0);
 $24 = HEAP32[$2>>2]|0;
 $25 = (_get32($24)|0);
 HEAP32[$5>>2] = $25;
 $26 = HEAP32[$5>>2]|0;
 $27 = HEAP32[$2>>2]|0;
 $28 = ((($27)) + 1112|0);
 HEAP32[$28>>2] = $26;
 $29 = HEAP32[$2>>2]|0;
 (_get32($29)|0);
 $30 = HEAP32[$2>>2]|0;
 $31 = (_get8($30)|0);
 $32 = $31&255;
 $33 = HEAP32[$2>>2]|0;
 $34 = ((($33)) + 1116|0);
 HEAP32[$34>>2] = $32;
 $35 = HEAP32[$2>>2]|0;
 $36 = HEAP32[$2>>2]|0;
 $37 = ((($36)) + 1120|0);
 $38 = HEAP32[$2>>2]|0;
 $39 = ((($38)) + 1116|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (_getn($35,$37,$40)|0);
 $42 = ($41|0)!=(0);
 $43 = HEAP32[$2>>2]|0;
 if (!($42)) {
  $44 = (_error($43,10)|0);
  HEAP32[$1>>2] = $44;
  $110 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($110|0);
 }
 $45 = ((($43)) + 1404|0);
 HEAP32[$45>>2] = -2;
 $46 = HEAP32[$3>>2]|0;
 $47 = ($46|0)!=(-1);
 $48 = HEAP32[$4>>2]|0;
 $49 = ($48|0)!=(-1);
 $or$cond = $47 | $49;
 if ($or$cond) {
  $50 = HEAP32[$2>>2]|0;
  $51 = ((($50)) + 1116|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) - 1)|0;
  HEAP32[$6>>2] = $53;
  while(1) {
   $54 = HEAP32[$6>>2]|0;
   $55 = ($54|0)>=(0);
   if (!($55)) {
    break;
   }
   $56 = HEAP32[$2>>2]|0;
   $57 = ((($56)) + 1120|0);
   $58 = HEAP32[$6>>2]|0;
   $59 = (($57) + ($58)|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = ($61|0)<(255);
   if ($62) {
    break;
   }
   $63 = HEAP32[$6>>2]|0;
   $64 = (($63) + -1)|0;
   HEAP32[$6>>2] = $64;
  }
  $65 = HEAP32[$6>>2]|0;
  $66 = ($65|0)>=(0);
  if ($66) {
   $67 = HEAP32[$6>>2]|0;
   $68 = HEAP32[$2>>2]|0;
   $69 = ((($68)) + 1404|0);
   HEAP32[$69>>2] = $67;
   $70 = HEAP32[$3>>2]|0;
   $71 = HEAP32[$2>>2]|0;
   $72 = ((($71)) + 1408|0);
   HEAP32[$72>>2] = $70;
  }
 }
 $73 = HEAP32[$2>>2]|0;
 $74 = ((($73)) + 1377|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = ($75<<24>>24)!=(0);
 if ($76) {
  HEAP32[$8>>2] = 0;
  HEAP32[$7>>2] = 0;
  while(1) {
   $77 = HEAP32[$7>>2]|0;
   $78 = HEAP32[$2>>2]|0;
   $79 = ((($78)) + 1116|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($77|0)<($80|0);
   $82 = HEAP32[$2>>2]|0;
   if (!($81)) {
    break;
   }
   $83 = ((($82)) + 1120|0);
   $84 = HEAP32[$7>>2]|0;
   $85 = (($83) + ($84)|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = HEAP32[$8>>2]|0;
   $89 = (($88) + ($87))|0;
   HEAP32[$8>>2] = $89;
   $90 = HEAP32[$7>>2]|0;
   $91 = (($90) + 1)|0;
   HEAP32[$7>>2] = $91;
  }
  $92 = ((($82)) + 1116|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (27 + ($93))|0;
  $95 = HEAP32[$8>>2]|0;
  $96 = (($95) + ($94))|0;
  HEAP32[$8>>2] = $96;
  $97 = HEAP32[$2>>2]|0;
  $98 = ((($97)) + 52|0);
  $99 = HEAP32[$98>>2]|0;
  HEAP32[$9>>2] = $99;
  $100 = HEAP32[$9>>2]|0;
  $101 = HEAP32[$8>>2]|0;
  $102 = (($100) + ($101))|0;
  $103 = ((($9)) + 4|0);
  HEAP32[$103>>2] = $102;
  $104 = HEAP32[$3>>2]|0;
  $105 = ((($9)) + 8|0);
  HEAP32[$105>>2] = $104;
  $106 = HEAP32[$2>>2]|0;
  $107 = ((($106)) + 56|0);
  ;HEAP32[$107>>2]=HEAP32[$9>>2]|0;HEAP32[$107+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$107+8>>2]=HEAP32[$9+8>>2]|0;
 }
 $108 = HEAP32[$2>>2]|0;
 $109 = ((($108)) + 1380|0);
 HEAP32[$109>>2] = 0;
 HEAP32[$1>>2] = 1;
 $110 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($110|0);
}
function _get32($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_get8($3)|0);
 $5 = $4&255;
 HEAP32[$2>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = (_get8($6)|0);
 $8 = $7&255;
 $9 = $8 << 8;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + ($9))|0;
 HEAP32[$2>>2] = $11;
 $12 = HEAP32[$1>>2]|0;
 $13 = (_get8($12)|0);
 $14 = $13&255;
 $15 = $14 << 16;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + ($15))|0;
 HEAP32[$2>>2] = $17;
 $18 = HEAP32[$1>>2]|0;
 $19 = (_get8($18)|0);
 $20 = $19&255;
 $21 = $20 << 24;
 $22 = HEAP32[$2>>2]|0;
 $23 = (($22) + ($21))|0;
 HEAP32[$2>>2] = $23;
 $24 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($24|0);
}
function _getn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 $7 = HEAP32[$4>>2]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = HEAP32[$4>>2]|0;
  $12 = ((($11)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = (($13) + ($14)|0);
  $16 = HEAP32[$4>>2]|0;
  $17 = ((($16)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15>>>0)>($18>>>0);
  if ($19) {
   $20 = HEAP32[$4>>2]|0;
   $21 = ((($20)) + 96|0);
   HEAP32[$21>>2] = 1;
   HEAP32[$3>>2] = 0;
   $41 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($41|0);
  } else {
   $22 = HEAP32[$5>>2]|0;
   $23 = HEAP32[$4>>2]|0;
   $24 = ((($23)) + 32|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$6>>2]|0;
   _memcpy(($22|0),($25|0),($26|0))|0;
   $27 = HEAP32[$6>>2]|0;
   $28 = HEAP32[$4>>2]|0;
   $29 = ((($28)) + 32|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($27)|0);
   HEAP32[$29>>2] = $31;
   HEAP32[$3>>2] = 1;
   $41 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($41|0);
  }
 } else {
  $32 = HEAP32[$5>>2]|0;
  $33 = HEAP32[$6>>2]|0;
  $34 = HEAP32[$4>>2]|0;
  $35 = ((($34)) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_fread($32,$33,1,$36)|0);
  $38 = ($37|0)==(1);
  if ($38) {
   HEAP32[$3>>2] = 1;
   $41 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($41|0);
  } else {
   $39 = HEAP32[$4>>2]|0;
   $40 = ((($39)) + 96|0);
   HEAP32[$40>>2] = 1;
   HEAP32[$3>>2] = 0;
   $41 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($41|0);
  }
 }
 return (0)|0;
}
function _setup_temp_malloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 3)|0;
 $7 = $6 & -4;
 HEAP32[$4>>2] = $7;
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $33 = HEAP32[$4>>2]|0;
  $34 = (_malloc($33)|0);
  HEAP32[$2>>2] = $34;
  $35 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($35|0);
 }
 $12 = HEAP32[$3>>2]|0;
 $13 = ((($12)) + 92|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$4>>2]|0;
 $16 = (($14) - ($15))|0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ((($17)) + 88|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16|0)<($19|0);
 if ($20) {
  HEAP32[$2>>2] = 0;
  $35 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($35|0);
 } else {
  $21 = HEAP32[$4>>2]|0;
  $22 = HEAP32[$3>>2]|0;
  $23 = ((($22)) + 92|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) - ($21))|0;
  HEAP32[$23>>2] = $25;
  $26 = HEAP32[$3>>2]|0;
  $27 = ((($26)) + 80|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$3>>2]|0;
  $30 = ((($29)) + 92|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($28) + ($31)|0);
  HEAP32[$2>>2] = $32;
  $35 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _imdct_step3_iter0_loop($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0.0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 36|0;
 $6 = sp + 32|0;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 20|0;
 $10 = sp + 16|0;
 $11 = sp + 12|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $15 = HEAP32[$6>>2]|0;
 $16 = HEAP32[$7>>2]|0;
 $17 = (($15) + ($16<<2)|0);
 HEAP32[$10>>2] = $17;
 $18 = HEAP32[$10>>2]|0;
 $19 = HEAP32[$8>>2]|0;
 $20 = (($18) + ($19<<2)|0);
 HEAP32[$11>>2] = $20;
 $21 = HEAP32[$5>>2]|0;
 $22 = $21 & 3;
 $23 = ($22|0)==(0);
 if (!($23)) {
  ___assert_fail((14844|0),(14636|0),2008,(14857|0));
  // unreachable;
 }
 $24 = HEAP32[$5>>2]|0;
 $25 = $24 >> 2;
 HEAP32[$12>>2] = $25;
 while(1) {
  $26 = HEAP32[$12>>2]|0;
  $27 = ($26|0)>(0);
  if (!($27)) {
   break;
  }
  $28 = HEAP32[$10>>2]|0;
  $29 = +HEAPF32[$28>>2];
  $30 = HEAP32[$11>>2]|0;
  $31 = +HEAPF32[$30>>2];
  $32 = $29 - $31;
  HEAPF32[$13>>2] = $32;
  $33 = HEAP32[$10>>2]|0;
  $34 = ((($33)) + -4|0);
  $35 = +HEAPF32[$34>>2];
  $36 = HEAP32[$11>>2]|0;
  $37 = ((($36)) + -4|0);
  $38 = +HEAPF32[$37>>2];
  $39 = $35 - $38;
  HEAPF32[$14>>2] = $39;
  $40 = HEAP32[$11>>2]|0;
  $41 = +HEAPF32[$40>>2];
  $42 = HEAP32[$10>>2]|0;
  $43 = +HEAPF32[$42>>2];
  $44 = $43 + $41;
  HEAPF32[$42>>2] = $44;
  $45 = HEAP32[$11>>2]|0;
  $46 = ((($45)) + -4|0);
  $47 = +HEAPF32[$46>>2];
  $48 = HEAP32[$10>>2]|0;
  $49 = ((($48)) + -4|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $50 + $47;
  HEAPF32[$49>>2] = $51;
  $52 = +HEAPF32[$13>>2];
  $53 = HEAP32[$9>>2]|0;
  $54 = +HEAPF32[$53>>2];
  $55 = $52 * $54;
  $56 = +HEAPF32[$14>>2];
  $57 = HEAP32[$9>>2]|0;
  $58 = ((($57)) + 4|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $56 * $59;
  $61 = $55 - $60;
  $62 = HEAP32[$11>>2]|0;
  HEAPF32[$62>>2] = $61;
  $63 = +HEAPF32[$14>>2];
  $64 = HEAP32[$9>>2]|0;
  $65 = +HEAPF32[$64>>2];
  $66 = $63 * $65;
  $67 = +HEAPF32[$13>>2];
  $68 = HEAP32[$9>>2]|0;
  $69 = ((($68)) + 4|0);
  $70 = +HEAPF32[$69>>2];
  $71 = $67 * $70;
  $72 = $66 + $71;
  $73 = HEAP32[$11>>2]|0;
  $74 = ((($73)) + -4|0);
  HEAPF32[$74>>2] = $72;
  $75 = HEAP32[$9>>2]|0;
  $76 = ((($75)) + 32|0);
  HEAP32[$9>>2] = $76;
  $77 = HEAP32[$10>>2]|0;
  $78 = ((($77)) + -8|0);
  $79 = +HEAPF32[$78>>2];
  $80 = HEAP32[$11>>2]|0;
  $81 = ((($80)) + -8|0);
  $82 = +HEAPF32[$81>>2];
  $83 = $79 - $82;
  HEAPF32[$13>>2] = $83;
  $84 = HEAP32[$10>>2]|0;
  $85 = ((($84)) + -12|0);
  $86 = +HEAPF32[$85>>2];
  $87 = HEAP32[$11>>2]|0;
  $88 = ((($87)) + -12|0);
  $89 = +HEAPF32[$88>>2];
  $90 = $86 - $89;
  HEAPF32[$14>>2] = $90;
  $91 = HEAP32[$11>>2]|0;
  $92 = ((($91)) + -8|0);
  $93 = +HEAPF32[$92>>2];
  $94 = HEAP32[$10>>2]|0;
  $95 = ((($94)) + -8|0);
  $96 = +HEAPF32[$95>>2];
  $97 = $96 + $93;
  HEAPF32[$95>>2] = $97;
  $98 = HEAP32[$11>>2]|0;
  $99 = ((($98)) + -12|0);
  $100 = +HEAPF32[$99>>2];
  $101 = HEAP32[$10>>2]|0;
  $102 = ((($101)) + -12|0);
  $103 = +HEAPF32[$102>>2];
  $104 = $103 + $100;
  HEAPF32[$102>>2] = $104;
  $105 = +HEAPF32[$13>>2];
  $106 = HEAP32[$9>>2]|0;
  $107 = +HEAPF32[$106>>2];
  $108 = $105 * $107;
  $109 = +HEAPF32[$14>>2];
  $110 = HEAP32[$9>>2]|0;
  $111 = ((($110)) + 4|0);
  $112 = +HEAPF32[$111>>2];
  $113 = $109 * $112;
  $114 = $108 - $113;
  $115 = HEAP32[$11>>2]|0;
  $116 = ((($115)) + -8|0);
  HEAPF32[$116>>2] = $114;
  $117 = +HEAPF32[$14>>2];
  $118 = HEAP32[$9>>2]|0;
  $119 = +HEAPF32[$118>>2];
  $120 = $117 * $119;
  $121 = +HEAPF32[$13>>2];
  $122 = HEAP32[$9>>2]|0;
  $123 = ((($122)) + 4|0);
  $124 = +HEAPF32[$123>>2];
  $125 = $121 * $124;
  $126 = $120 + $125;
  $127 = HEAP32[$11>>2]|0;
  $128 = ((($127)) + -12|0);
  HEAPF32[$128>>2] = $126;
  $129 = HEAP32[$9>>2]|0;
  $130 = ((($129)) + 32|0);
  HEAP32[$9>>2] = $130;
  $131 = HEAP32[$10>>2]|0;
  $132 = ((($131)) + -16|0);
  $133 = +HEAPF32[$132>>2];
  $134 = HEAP32[$11>>2]|0;
  $135 = ((($134)) + -16|0);
  $136 = +HEAPF32[$135>>2];
  $137 = $133 - $136;
  HEAPF32[$13>>2] = $137;
  $138 = HEAP32[$10>>2]|0;
  $139 = ((($138)) + -20|0);
  $140 = +HEAPF32[$139>>2];
  $141 = HEAP32[$11>>2]|0;
  $142 = ((($141)) + -20|0);
  $143 = +HEAPF32[$142>>2];
  $144 = $140 - $143;
  HEAPF32[$14>>2] = $144;
  $145 = HEAP32[$11>>2]|0;
  $146 = ((($145)) + -16|0);
  $147 = +HEAPF32[$146>>2];
  $148 = HEAP32[$10>>2]|0;
  $149 = ((($148)) + -16|0);
  $150 = +HEAPF32[$149>>2];
  $151 = $150 + $147;
  HEAPF32[$149>>2] = $151;
  $152 = HEAP32[$11>>2]|0;
  $153 = ((($152)) + -20|0);
  $154 = +HEAPF32[$153>>2];
  $155 = HEAP32[$10>>2]|0;
  $156 = ((($155)) + -20|0);
  $157 = +HEAPF32[$156>>2];
  $158 = $157 + $154;
  HEAPF32[$156>>2] = $158;
  $159 = +HEAPF32[$13>>2];
  $160 = HEAP32[$9>>2]|0;
  $161 = +HEAPF32[$160>>2];
  $162 = $159 * $161;
  $163 = +HEAPF32[$14>>2];
  $164 = HEAP32[$9>>2]|0;
  $165 = ((($164)) + 4|0);
  $166 = +HEAPF32[$165>>2];
  $167 = $163 * $166;
  $168 = $162 - $167;
  $169 = HEAP32[$11>>2]|0;
  $170 = ((($169)) + -16|0);
  HEAPF32[$170>>2] = $168;
  $171 = +HEAPF32[$14>>2];
  $172 = HEAP32[$9>>2]|0;
  $173 = +HEAPF32[$172>>2];
  $174 = $171 * $173;
  $175 = +HEAPF32[$13>>2];
  $176 = HEAP32[$9>>2]|0;
  $177 = ((($176)) + 4|0);
  $178 = +HEAPF32[$177>>2];
  $179 = $175 * $178;
  $180 = $174 + $179;
  $181 = HEAP32[$11>>2]|0;
  $182 = ((($181)) + -20|0);
  HEAPF32[$182>>2] = $180;
  $183 = HEAP32[$9>>2]|0;
  $184 = ((($183)) + 32|0);
  HEAP32[$9>>2] = $184;
  $185 = HEAP32[$10>>2]|0;
  $186 = ((($185)) + -24|0);
  $187 = +HEAPF32[$186>>2];
  $188 = HEAP32[$11>>2]|0;
  $189 = ((($188)) + -24|0);
  $190 = +HEAPF32[$189>>2];
  $191 = $187 - $190;
  HEAPF32[$13>>2] = $191;
  $192 = HEAP32[$10>>2]|0;
  $193 = ((($192)) + -28|0);
  $194 = +HEAPF32[$193>>2];
  $195 = HEAP32[$11>>2]|0;
  $196 = ((($195)) + -28|0);
  $197 = +HEAPF32[$196>>2];
  $198 = $194 - $197;
  HEAPF32[$14>>2] = $198;
  $199 = HEAP32[$11>>2]|0;
  $200 = ((($199)) + -24|0);
  $201 = +HEAPF32[$200>>2];
  $202 = HEAP32[$10>>2]|0;
  $203 = ((($202)) + -24|0);
  $204 = +HEAPF32[$203>>2];
  $205 = $204 + $201;
  HEAPF32[$203>>2] = $205;
  $206 = HEAP32[$11>>2]|0;
  $207 = ((($206)) + -28|0);
  $208 = +HEAPF32[$207>>2];
  $209 = HEAP32[$10>>2]|0;
  $210 = ((($209)) + -28|0);
  $211 = +HEAPF32[$210>>2];
  $212 = $211 + $208;
  HEAPF32[$210>>2] = $212;
  $213 = +HEAPF32[$13>>2];
  $214 = HEAP32[$9>>2]|0;
  $215 = +HEAPF32[$214>>2];
  $216 = $213 * $215;
  $217 = +HEAPF32[$14>>2];
  $218 = HEAP32[$9>>2]|0;
  $219 = ((($218)) + 4|0);
  $220 = +HEAPF32[$219>>2];
  $221 = $217 * $220;
  $222 = $216 - $221;
  $223 = HEAP32[$11>>2]|0;
  $224 = ((($223)) + -24|0);
  HEAPF32[$224>>2] = $222;
  $225 = +HEAPF32[$14>>2];
  $226 = HEAP32[$9>>2]|0;
  $227 = +HEAPF32[$226>>2];
  $228 = $225 * $227;
  $229 = +HEAPF32[$13>>2];
  $230 = HEAP32[$9>>2]|0;
  $231 = ((($230)) + 4|0);
  $232 = +HEAPF32[$231>>2];
  $233 = $229 * $232;
  $234 = $228 + $233;
  $235 = HEAP32[$11>>2]|0;
  $236 = ((($235)) + -28|0);
  HEAPF32[$236>>2] = $234;
  $237 = HEAP32[$9>>2]|0;
  $238 = ((($237)) + 32|0);
  HEAP32[$9>>2] = $238;
  $239 = HEAP32[$10>>2]|0;
  $240 = ((($239)) + -32|0);
  HEAP32[$10>>2] = $240;
  $241 = HEAP32[$11>>2]|0;
  $242 = ((($241)) + -32|0);
  HEAP32[$11>>2] = $242;
  $243 = HEAP32[$12>>2]|0;
  $244 = (($243) + -1)|0;
  HEAP32[$12>>2] = $244;
 }
 STACKTOP = sp;return;
}
function _imdct_step3_inner_r_loop($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0;
 var $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0;
 var $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 40|0;
 $7 = sp + 36|0;
 $8 = sp + 32|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = sp + 12|0;
 $14 = sp + 8|0;
 $15 = sp + 4|0;
 $16 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 HEAP32[$11>>2] = $5;
 $17 = HEAP32[$7>>2]|0;
 $18 = HEAP32[$8>>2]|0;
 $19 = (($17) + ($18<<2)|0);
 HEAP32[$15>>2] = $19;
 $20 = HEAP32[$15>>2]|0;
 $21 = HEAP32[$9>>2]|0;
 $22 = (($20) + ($21<<2)|0);
 HEAP32[$16>>2] = $22;
 $23 = HEAP32[$6>>2]|0;
 $24 = $23 >> 2;
 HEAP32[$12>>2] = $24;
 while(1) {
  $25 = HEAP32[$12>>2]|0;
  $26 = ($25|0)>(0);
  if (!($26)) {
   break;
  }
  $27 = HEAP32[$15>>2]|0;
  $28 = +HEAPF32[$27>>2];
  $29 = HEAP32[$16>>2]|0;
  $30 = +HEAPF32[$29>>2];
  $31 = $28 - $30;
  HEAPF32[$13>>2] = $31;
  $32 = HEAP32[$15>>2]|0;
  $33 = ((($32)) + -4|0);
  $34 = +HEAPF32[$33>>2];
  $35 = HEAP32[$16>>2]|0;
  $36 = ((($35)) + -4|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $34 - $37;
  HEAPF32[$14>>2] = $38;
  $39 = HEAP32[$16>>2]|0;
  $40 = +HEAPF32[$39>>2];
  $41 = HEAP32[$15>>2]|0;
  $42 = +HEAPF32[$41>>2];
  $43 = $42 + $40;
  HEAPF32[$41>>2] = $43;
  $44 = HEAP32[$16>>2]|0;
  $45 = ((($44)) + -4|0);
  $46 = +HEAPF32[$45>>2];
  $47 = HEAP32[$15>>2]|0;
  $48 = ((($47)) + -4|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $49 + $46;
  HEAPF32[$48>>2] = $50;
  $51 = +HEAPF32[$13>>2];
  $52 = HEAP32[$10>>2]|0;
  $53 = +HEAPF32[$52>>2];
  $54 = $51 * $53;
  $55 = +HEAPF32[$14>>2];
  $56 = HEAP32[$10>>2]|0;
  $57 = ((($56)) + 4|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $55 * $58;
  $60 = $54 - $59;
  $61 = HEAP32[$16>>2]|0;
  HEAPF32[$61>>2] = $60;
  $62 = +HEAPF32[$14>>2];
  $63 = HEAP32[$10>>2]|0;
  $64 = +HEAPF32[$63>>2];
  $65 = $62 * $64;
  $66 = +HEAPF32[$13>>2];
  $67 = HEAP32[$10>>2]|0;
  $68 = ((($67)) + 4|0);
  $69 = +HEAPF32[$68>>2];
  $70 = $66 * $69;
  $71 = $65 + $70;
  $72 = HEAP32[$16>>2]|0;
  $73 = ((($72)) + -4|0);
  HEAPF32[$73>>2] = $71;
  $74 = HEAP32[$11>>2]|0;
  $75 = HEAP32[$10>>2]|0;
  $76 = (($75) + ($74<<2)|0);
  HEAP32[$10>>2] = $76;
  $77 = HEAP32[$15>>2]|0;
  $78 = ((($77)) + -8|0);
  $79 = +HEAPF32[$78>>2];
  $80 = HEAP32[$16>>2]|0;
  $81 = ((($80)) + -8|0);
  $82 = +HEAPF32[$81>>2];
  $83 = $79 - $82;
  HEAPF32[$13>>2] = $83;
  $84 = HEAP32[$15>>2]|0;
  $85 = ((($84)) + -12|0);
  $86 = +HEAPF32[$85>>2];
  $87 = HEAP32[$16>>2]|0;
  $88 = ((($87)) + -12|0);
  $89 = +HEAPF32[$88>>2];
  $90 = $86 - $89;
  HEAPF32[$14>>2] = $90;
  $91 = HEAP32[$16>>2]|0;
  $92 = ((($91)) + -8|0);
  $93 = +HEAPF32[$92>>2];
  $94 = HEAP32[$15>>2]|0;
  $95 = ((($94)) + -8|0);
  $96 = +HEAPF32[$95>>2];
  $97 = $96 + $93;
  HEAPF32[$95>>2] = $97;
  $98 = HEAP32[$16>>2]|0;
  $99 = ((($98)) + -12|0);
  $100 = +HEAPF32[$99>>2];
  $101 = HEAP32[$15>>2]|0;
  $102 = ((($101)) + -12|0);
  $103 = +HEAPF32[$102>>2];
  $104 = $103 + $100;
  HEAPF32[$102>>2] = $104;
  $105 = +HEAPF32[$13>>2];
  $106 = HEAP32[$10>>2]|0;
  $107 = +HEAPF32[$106>>2];
  $108 = $105 * $107;
  $109 = +HEAPF32[$14>>2];
  $110 = HEAP32[$10>>2]|0;
  $111 = ((($110)) + 4|0);
  $112 = +HEAPF32[$111>>2];
  $113 = $109 * $112;
  $114 = $108 - $113;
  $115 = HEAP32[$16>>2]|0;
  $116 = ((($115)) + -8|0);
  HEAPF32[$116>>2] = $114;
  $117 = +HEAPF32[$14>>2];
  $118 = HEAP32[$10>>2]|0;
  $119 = +HEAPF32[$118>>2];
  $120 = $117 * $119;
  $121 = +HEAPF32[$13>>2];
  $122 = HEAP32[$10>>2]|0;
  $123 = ((($122)) + 4|0);
  $124 = +HEAPF32[$123>>2];
  $125 = $121 * $124;
  $126 = $120 + $125;
  $127 = HEAP32[$16>>2]|0;
  $128 = ((($127)) + -12|0);
  HEAPF32[$128>>2] = $126;
  $129 = HEAP32[$11>>2]|0;
  $130 = HEAP32[$10>>2]|0;
  $131 = (($130) + ($129<<2)|0);
  HEAP32[$10>>2] = $131;
  $132 = HEAP32[$15>>2]|0;
  $133 = ((($132)) + -16|0);
  $134 = +HEAPF32[$133>>2];
  $135 = HEAP32[$16>>2]|0;
  $136 = ((($135)) + -16|0);
  $137 = +HEAPF32[$136>>2];
  $138 = $134 - $137;
  HEAPF32[$13>>2] = $138;
  $139 = HEAP32[$15>>2]|0;
  $140 = ((($139)) + -20|0);
  $141 = +HEAPF32[$140>>2];
  $142 = HEAP32[$16>>2]|0;
  $143 = ((($142)) + -20|0);
  $144 = +HEAPF32[$143>>2];
  $145 = $141 - $144;
  HEAPF32[$14>>2] = $145;
  $146 = HEAP32[$16>>2]|0;
  $147 = ((($146)) + -16|0);
  $148 = +HEAPF32[$147>>2];
  $149 = HEAP32[$15>>2]|0;
  $150 = ((($149)) + -16|0);
  $151 = +HEAPF32[$150>>2];
  $152 = $151 + $148;
  HEAPF32[$150>>2] = $152;
  $153 = HEAP32[$16>>2]|0;
  $154 = ((($153)) + -20|0);
  $155 = +HEAPF32[$154>>2];
  $156 = HEAP32[$15>>2]|0;
  $157 = ((($156)) + -20|0);
  $158 = +HEAPF32[$157>>2];
  $159 = $158 + $155;
  HEAPF32[$157>>2] = $159;
  $160 = +HEAPF32[$13>>2];
  $161 = HEAP32[$10>>2]|0;
  $162 = +HEAPF32[$161>>2];
  $163 = $160 * $162;
  $164 = +HEAPF32[$14>>2];
  $165 = HEAP32[$10>>2]|0;
  $166 = ((($165)) + 4|0);
  $167 = +HEAPF32[$166>>2];
  $168 = $164 * $167;
  $169 = $163 - $168;
  $170 = HEAP32[$16>>2]|0;
  $171 = ((($170)) + -16|0);
  HEAPF32[$171>>2] = $169;
  $172 = +HEAPF32[$14>>2];
  $173 = HEAP32[$10>>2]|0;
  $174 = +HEAPF32[$173>>2];
  $175 = $172 * $174;
  $176 = +HEAPF32[$13>>2];
  $177 = HEAP32[$10>>2]|0;
  $178 = ((($177)) + 4|0);
  $179 = +HEAPF32[$178>>2];
  $180 = $176 * $179;
  $181 = $175 + $180;
  $182 = HEAP32[$16>>2]|0;
  $183 = ((($182)) + -20|0);
  HEAPF32[$183>>2] = $181;
  $184 = HEAP32[$11>>2]|0;
  $185 = HEAP32[$10>>2]|0;
  $186 = (($185) + ($184<<2)|0);
  HEAP32[$10>>2] = $186;
  $187 = HEAP32[$15>>2]|0;
  $188 = ((($187)) + -24|0);
  $189 = +HEAPF32[$188>>2];
  $190 = HEAP32[$16>>2]|0;
  $191 = ((($190)) + -24|0);
  $192 = +HEAPF32[$191>>2];
  $193 = $189 - $192;
  HEAPF32[$13>>2] = $193;
  $194 = HEAP32[$15>>2]|0;
  $195 = ((($194)) + -28|0);
  $196 = +HEAPF32[$195>>2];
  $197 = HEAP32[$16>>2]|0;
  $198 = ((($197)) + -28|0);
  $199 = +HEAPF32[$198>>2];
  $200 = $196 - $199;
  HEAPF32[$14>>2] = $200;
  $201 = HEAP32[$16>>2]|0;
  $202 = ((($201)) + -24|0);
  $203 = +HEAPF32[$202>>2];
  $204 = HEAP32[$15>>2]|0;
  $205 = ((($204)) + -24|0);
  $206 = +HEAPF32[$205>>2];
  $207 = $206 + $203;
  HEAPF32[$205>>2] = $207;
  $208 = HEAP32[$16>>2]|0;
  $209 = ((($208)) + -28|0);
  $210 = +HEAPF32[$209>>2];
  $211 = HEAP32[$15>>2]|0;
  $212 = ((($211)) + -28|0);
  $213 = +HEAPF32[$212>>2];
  $214 = $213 + $210;
  HEAPF32[$212>>2] = $214;
  $215 = +HEAPF32[$13>>2];
  $216 = HEAP32[$10>>2]|0;
  $217 = +HEAPF32[$216>>2];
  $218 = $215 * $217;
  $219 = +HEAPF32[$14>>2];
  $220 = HEAP32[$10>>2]|0;
  $221 = ((($220)) + 4|0);
  $222 = +HEAPF32[$221>>2];
  $223 = $219 * $222;
  $224 = $218 - $223;
  $225 = HEAP32[$16>>2]|0;
  $226 = ((($225)) + -24|0);
  HEAPF32[$226>>2] = $224;
  $227 = +HEAPF32[$14>>2];
  $228 = HEAP32[$10>>2]|0;
  $229 = +HEAPF32[$228>>2];
  $230 = $227 * $229;
  $231 = +HEAPF32[$13>>2];
  $232 = HEAP32[$10>>2]|0;
  $233 = ((($232)) + 4|0);
  $234 = +HEAPF32[$233>>2];
  $235 = $231 * $234;
  $236 = $230 + $235;
  $237 = HEAP32[$16>>2]|0;
  $238 = ((($237)) + -28|0);
  HEAPF32[$238>>2] = $236;
  $239 = HEAP32[$15>>2]|0;
  $240 = ((($239)) + -32|0);
  HEAP32[$15>>2] = $240;
  $241 = HEAP32[$16>>2]|0;
  $242 = ((($241)) + -32|0);
  HEAP32[$16>>2] = $242;
  $243 = HEAP32[$11>>2]|0;
  $244 = HEAP32[$10>>2]|0;
  $245 = (($244) + ($243<<2)|0);
  HEAP32[$10>>2] = $245;
  $246 = HEAP32[$12>>2]|0;
  $247 = (($246) + -1)|0;
  HEAP32[$12>>2] = $247;
 }
 STACKTOP = sp;return;
}
function _imdct_step3_inner_s_loop($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0;
 var $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0.0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0;
 var $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = sp + 76|0;
 $8 = sp + 72|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $13 = sp + 52|0;
 $14 = sp + 48|0;
 $15 = sp + 44|0;
 $16 = sp + 40|0;
 $17 = sp + 36|0;
 $18 = sp + 32|0;
 $19 = sp + 28|0;
 $20 = sp + 24|0;
 $21 = sp + 20|0;
 $22 = sp + 16|0;
 $23 = sp + 12|0;
 $24 = sp + 8|0;
 $25 = sp + 4|0;
 $26 = sp;
 HEAP32[$7>>2] = $0;
 HEAP32[$8>>2] = $1;
 HEAP32[$9>>2] = $2;
 HEAP32[$10>>2] = $3;
 HEAP32[$11>>2] = $4;
 HEAP32[$12>>2] = $5;
 HEAP32[$13>>2] = $6;
 $27 = HEAP32[$11>>2]|0;
 $28 = +HEAPF32[$27>>2];
 HEAPF32[$15>>2] = $28;
 $29 = HEAP32[$11>>2]|0;
 $30 = ((($29)) + 4|0);
 $31 = +HEAPF32[$30>>2];
 HEAPF32[$16>>2] = $31;
 $32 = HEAP32[$11>>2]|0;
 $33 = HEAP32[$12>>2]|0;
 $34 = (0 + ($33))|0;
 $35 = (($32) + ($34<<2)|0);
 $36 = +HEAPF32[$35>>2];
 HEAPF32[$17>>2] = $36;
 $37 = HEAP32[$11>>2]|0;
 $38 = HEAP32[$12>>2]|0;
 $39 = (0 + ($38))|0;
 $40 = (($39) + 1)|0;
 $41 = (($37) + ($40<<2)|0);
 $42 = +HEAPF32[$41>>2];
 HEAPF32[$18>>2] = $42;
 $43 = HEAP32[$11>>2]|0;
 $44 = HEAP32[$12>>2]|0;
 $45 = $44<<1;
 $46 = (0 + ($45))|0;
 $47 = (($46) + 0)|0;
 $48 = (($43) + ($47<<2)|0);
 $49 = +HEAPF32[$48>>2];
 HEAPF32[$19>>2] = $49;
 $50 = HEAP32[$11>>2]|0;
 $51 = HEAP32[$12>>2]|0;
 $52 = $51<<1;
 $53 = (0 + ($52))|0;
 $54 = (($53) + 1)|0;
 $55 = (($50) + ($54<<2)|0);
 $56 = +HEAPF32[$55>>2];
 HEAPF32[$20>>2] = $56;
 $57 = HEAP32[$11>>2]|0;
 $58 = HEAP32[$12>>2]|0;
 $59 = ($58*3)|0;
 $60 = (0 + ($59))|0;
 $61 = (($60) + 0)|0;
 $62 = (($57) + ($61<<2)|0);
 $63 = +HEAPF32[$62>>2];
 HEAPF32[$21>>2] = $63;
 $64 = HEAP32[$11>>2]|0;
 $65 = HEAP32[$12>>2]|0;
 $66 = ($65*3)|0;
 $67 = (0 + ($66))|0;
 $68 = (($67) + 1)|0;
 $69 = (($64) + ($68<<2)|0);
 $70 = +HEAPF32[$69>>2];
 HEAPF32[$22>>2] = $70;
 $71 = HEAP32[$8>>2]|0;
 $72 = HEAP32[$9>>2]|0;
 $73 = (($71) + ($72<<2)|0);
 HEAP32[$25>>2] = $73;
 $74 = HEAP32[$25>>2]|0;
 $75 = HEAP32[$10>>2]|0;
 $76 = (($74) + ($75<<2)|0);
 HEAP32[$26>>2] = $76;
 $77 = HEAP32[$7>>2]|0;
 HEAP32[$14>>2] = $77;
 while(1) {
  $78 = HEAP32[$14>>2]|0;
  $79 = ($78|0)>(0);
  if (!($79)) {
   break;
  }
  $80 = HEAP32[$25>>2]|0;
  $81 = +HEAPF32[$80>>2];
  $82 = HEAP32[$26>>2]|0;
  $83 = +HEAPF32[$82>>2];
  $84 = $81 - $83;
  HEAPF32[$23>>2] = $84;
  $85 = HEAP32[$25>>2]|0;
  $86 = ((($85)) + -4|0);
  $87 = +HEAPF32[$86>>2];
  $88 = HEAP32[$26>>2]|0;
  $89 = ((($88)) + -4|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $87 - $90;
  HEAPF32[$24>>2] = $91;
  $92 = HEAP32[$25>>2]|0;
  $93 = +HEAPF32[$92>>2];
  $94 = HEAP32[$26>>2]|0;
  $95 = +HEAPF32[$94>>2];
  $96 = $93 + $95;
  $97 = HEAP32[$25>>2]|0;
  HEAPF32[$97>>2] = $96;
  $98 = HEAP32[$25>>2]|0;
  $99 = ((($98)) + -4|0);
  $100 = +HEAPF32[$99>>2];
  $101 = HEAP32[$26>>2]|0;
  $102 = ((($101)) + -4|0);
  $103 = +HEAPF32[$102>>2];
  $104 = $100 + $103;
  $105 = HEAP32[$25>>2]|0;
  $106 = ((($105)) + -4|0);
  HEAPF32[$106>>2] = $104;
  $107 = +HEAPF32[$23>>2];
  $108 = +HEAPF32[$15>>2];
  $109 = $107 * $108;
  $110 = +HEAPF32[$24>>2];
  $111 = +HEAPF32[$16>>2];
  $112 = $110 * $111;
  $113 = $109 - $112;
  $114 = HEAP32[$26>>2]|0;
  HEAPF32[$114>>2] = $113;
  $115 = +HEAPF32[$24>>2];
  $116 = +HEAPF32[$15>>2];
  $117 = $115 * $116;
  $118 = +HEAPF32[$23>>2];
  $119 = +HEAPF32[$16>>2];
  $120 = $118 * $119;
  $121 = $117 + $120;
  $122 = HEAP32[$26>>2]|0;
  $123 = ((($122)) + -4|0);
  HEAPF32[$123>>2] = $121;
  $124 = HEAP32[$25>>2]|0;
  $125 = ((($124)) + -8|0);
  $126 = +HEAPF32[$125>>2];
  $127 = HEAP32[$26>>2]|0;
  $128 = ((($127)) + -8|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $126 - $129;
  HEAPF32[$23>>2] = $130;
  $131 = HEAP32[$25>>2]|0;
  $132 = ((($131)) + -12|0);
  $133 = +HEAPF32[$132>>2];
  $134 = HEAP32[$26>>2]|0;
  $135 = ((($134)) + -12|0);
  $136 = +HEAPF32[$135>>2];
  $137 = $133 - $136;
  HEAPF32[$24>>2] = $137;
  $138 = HEAP32[$25>>2]|0;
  $139 = ((($138)) + -8|0);
  $140 = +HEAPF32[$139>>2];
  $141 = HEAP32[$26>>2]|0;
  $142 = ((($141)) + -8|0);
  $143 = +HEAPF32[$142>>2];
  $144 = $140 + $143;
  $145 = HEAP32[$25>>2]|0;
  $146 = ((($145)) + -8|0);
  HEAPF32[$146>>2] = $144;
  $147 = HEAP32[$25>>2]|0;
  $148 = ((($147)) + -12|0);
  $149 = +HEAPF32[$148>>2];
  $150 = HEAP32[$26>>2]|0;
  $151 = ((($150)) + -12|0);
  $152 = +HEAPF32[$151>>2];
  $153 = $149 + $152;
  $154 = HEAP32[$25>>2]|0;
  $155 = ((($154)) + -12|0);
  HEAPF32[$155>>2] = $153;
  $156 = +HEAPF32[$23>>2];
  $157 = +HEAPF32[$17>>2];
  $158 = $156 * $157;
  $159 = +HEAPF32[$24>>2];
  $160 = +HEAPF32[$18>>2];
  $161 = $159 * $160;
  $162 = $158 - $161;
  $163 = HEAP32[$26>>2]|0;
  $164 = ((($163)) + -8|0);
  HEAPF32[$164>>2] = $162;
  $165 = +HEAPF32[$24>>2];
  $166 = +HEAPF32[$17>>2];
  $167 = $165 * $166;
  $168 = +HEAPF32[$23>>2];
  $169 = +HEAPF32[$18>>2];
  $170 = $168 * $169;
  $171 = $167 + $170;
  $172 = HEAP32[$26>>2]|0;
  $173 = ((($172)) + -12|0);
  HEAPF32[$173>>2] = $171;
  $174 = HEAP32[$25>>2]|0;
  $175 = ((($174)) + -16|0);
  $176 = +HEAPF32[$175>>2];
  $177 = HEAP32[$26>>2]|0;
  $178 = ((($177)) + -16|0);
  $179 = +HEAPF32[$178>>2];
  $180 = $176 - $179;
  HEAPF32[$23>>2] = $180;
  $181 = HEAP32[$25>>2]|0;
  $182 = ((($181)) + -20|0);
  $183 = +HEAPF32[$182>>2];
  $184 = HEAP32[$26>>2]|0;
  $185 = ((($184)) + -20|0);
  $186 = +HEAPF32[$185>>2];
  $187 = $183 - $186;
  HEAPF32[$24>>2] = $187;
  $188 = HEAP32[$25>>2]|0;
  $189 = ((($188)) + -16|0);
  $190 = +HEAPF32[$189>>2];
  $191 = HEAP32[$26>>2]|0;
  $192 = ((($191)) + -16|0);
  $193 = +HEAPF32[$192>>2];
  $194 = $190 + $193;
  $195 = HEAP32[$25>>2]|0;
  $196 = ((($195)) + -16|0);
  HEAPF32[$196>>2] = $194;
  $197 = HEAP32[$25>>2]|0;
  $198 = ((($197)) + -20|0);
  $199 = +HEAPF32[$198>>2];
  $200 = HEAP32[$26>>2]|0;
  $201 = ((($200)) + -20|0);
  $202 = +HEAPF32[$201>>2];
  $203 = $199 + $202;
  $204 = HEAP32[$25>>2]|0;
  $205 = ((($204)) + -20|0);
  HEAPF32[$205>>2] = $203;
  $206 = +HEAPF32[$23>>2];
  $207 = +HEAPF32[$19>>2];
  $208 = $206 * $207;
  $209 = +HEAPF32[$24>>2];
  $210 = +HEAPF32[$20>>2];
  $211 = $209 * $210;
  $212 = $208 - $211;
  $213 = HEAP32[$26>>2]|0;
  $214 = ((($213)) + -16|0);
  HEAPF32[$214>>2] = $212;
  $215 = +HEAPF32[$24>>2];
  $216 = +HEAPF32[$19>>2];
  $217 = $215 * $216;
  $218 = +HEAPF32[$23>>2];
  $219 = +HEAPF32[$20>>2];
  $220 = $218 * $219;
  $221 = $217 + $220;
  $222 = HEAP32[$26>>2]|0;
  $223 = ((($222)) + -20|0);
  HEAPF32[$223>>2] = $221;
  $224 = HEAP32[$25>>2]|0;
  $225 = ((($224)) + -24|0);
  $226 = +HEAPF32[$225>>2];
  $227 = HEAP32[$26>>2]|0;
  $228 = ((($227)) + -24|0);
  $229 = +HEAPF32[$228>>2];
  $230 = $226 - $229;
  HEAPF32[$23>>2] = $230;
  $231 = HEAP32[$25>>2]|0;
  $232 = ((($231)) + -28|0);
  $233 = +HEAPF32[$232>>2];
  $234 = HEAP32[$26>>2]|0;
  $235 = ((($234)) + -28|0);
  $236 = +HEAPF32[$235>>2];
  $237 = $233 - $236;
  HEAPF32[$24>>2] = $237;
  $238 = HEAP32[$25>>2]|0;
  $239 = ((($238)) + -24|0);
  $240 = +HEAPF32[$239>>2];
  $241 = HEAP32[$26>>2]|0;
  $242 = ((($241)) + -24|0);
  $243 = +HEAPF32[$242>>2];
  $244 = $240 + $243;
  $245 = HEAP32[$25>>2]|0;
  $246 = ((($245)) + -24|0);
  HEAPF32[$246>>2] = $244;
  $247 = HEAP32[$25>>2]|0;
  $248 = ((($247)) + -28|0);
  $249 = +HEAPF32[$248>>2];
  $250 = HEAP32[$26>>2]|0;
  $251 = ((($250)) + -28|0);
  $252 = +HEAPF32[$251>>2];
  $253 = $249 + $252;
  $254 = HEAP32[$25>>2]|0;
  $255 = ((($254)) + -28|0);
  HEAPF32[$255>>2] = $253;
  $256 = +HEAPF32[$23>>2];
  $257 = +HEAPF32[$21>>2];
  $258 = $256 * $257;
  $259 = +HEAPF32[$24>>2];
  $260 = +HEAPF32[$22>>2];
  $261 = $259 * $260;
  $262 = $258 - $261;
  $263 = HEAP32[$26>>2]|0;
  $264 = ((($263)) + -24|0);
  HEAPF32[$264>>2] = $262;
  $265 = +HEAPF32[$24>>2];
  $266 = +HEAPF32[$21>>2];
  $267 = $265 * $266;
  $268 = +HEAPF32[$23>>2];
  $269 = +HEAPF32[$22>>2];
  $270 = $268 * $269;
  $271 = $267 + $270;
  $272 = HEAP32[$26>>2]|0;
  $273 = ((($272)) + -28|0);
  HEAPF32[$273>>2] = $271;
  $274 = HEAP32[$13>>2]|0;
  $275 = HEAP32[$25>>2]|0;
  $276 = (0 - ($274))|0;
  $277 = (($275) + ($276<<2)|0);
  HEAP32[$25>>2] = $277;
  $278 = HEAP32[$13>>2]|0;
  $279 = HEAP32[$26>>2]|0;
  $280 = (0 - ($278))|0;
  $281 = (($279) + ($280<<2)|0);
  HEAP32[$26>>2] = $281;
  $282 = HEAP32[$14>>2]|0;
  $283 = (($282) + -1)|0;
  HEAP32[$14>>2] = $283;
 }
 STACKTOP = sp;return;
}
function _imdct_step3_inner_s_loop_ld654($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0;
 var $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 40|0;
 $6 = sp + 36|0;
 $7 = sp + 32|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 20|0;
 $11 = sp + 16|0;
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $15 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $16 = HEAP32[$9>>2]|0;
 $17 = $16 >> 3;
 HEAP32[$10>>2] = $17;
 $18 = HEAP32[$8>>2]|0;
 $19 = HEAP32[$10>>2]|0;
 $20 = (0 + ($19))|0;
 $21 = (($18) + ($20<<2)|0);
 $22 = +HEAPF32[$21>>2];
 HEAPF32[$11>>2] = $22;
 $23 = HEAP32[$6>>2]|0;
 $24 = HEAP32[$7>>2]|0;
 $25 = (($23) + ($24<<2)|0);
 HEAP32[$12>>2] = $25;
 $26 = HEAP32[$12>>2]|0;
 $27 = HEAP32[$5>>2]|0;
 $28 = $27<<4;
 $29 = (0 - ($28))|0;
 $30 = (($26) + ($29<<2)|0);
 HEAP32[$13>>2] = $30;
 while(1) {
  $31 = HEAP32[$12>>2]|0;
  $32 = HEAP32[$13>>2]|0;
  $33 = ($31>>>0)>($32>>>0);
  if (!($33)) {
   break;
  }
  $34 = HEAP32[$12>>2]|0;
  $35 = +HEAPF32[$34>>2];
  $36 = HEAP32[$12>>2]|0;
  $37 = ((($36)) + -32|0);
  $38 = +HEAPF32[$37>>2];
  $39 = $35 - $38;
  HEAPF32[$14>>2] = $39;
  $40 = HEAP32[$12>>2]|0;
  $41 = ((($40)) + -4|0);
  $42 = +HEAPF32[$41>>2];
  $43 = HEAP32[$12>>2]|0;
  $44 = ((($43)) + -36|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $42 - $45;
  HEAPF32[$15>>2] = $46;
  $47 = HEAP32[$12>>2]|0;
  $48 = +HEAPF32[$47>>2];
  $49 = HEAP32[$12>>2]|0;
  $50 = ((($49)) + -32|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $48 + $51;
  $53 = HEAP32[$12>>2]|0;
  HEAPF32[$53>>2] = $52;
  $54 = HEAP32[$12>>2]|0;
  $55 = ((($54)) + -4|0);
  $56 = +HEAPF32[$55>>2];
  $57 = HEAP32[$12>>2]|0;
  $58 = ((($57)) + -36|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $56 + $59;
  $61 = HEAP32[$12>>2]|0;
  $62 = ((($61)) + -4|0);
  HEAPF32[$62>>2] = $60;
  $63 = +HEAPF32[$14>>2];
  $64 = HEAP32[$12>>2]|0;
  $65 = ((($64)) + -32|0);
  HEAPF32[$65>>2] = $63;
  $66 = +HEAPF32[$15>>2];
  $67 = HEAP32[$12>>2]|0;
  $68 = ((($67)) + -36|0);
  HEAPF32[$68>>2] = $66;
  $69 = HEAP32[$12>>2]|0;
  $70 = ((($69)) + -8|0);
  $71 = +HEAPF32[$70>>2];
  $72 = HEAP32[$12>>2]|0;
  $73 = ((($72)) + -40|0);
  $74 = +HEAPF32[$73>>2];
  $75 = $71 - $74;
  HEAPF32[$14>>2] = $75;
  $76 = HEAP32[$12>>2]|0;
  $77 = ((($76)) + -12|0);
  $78 = +HEAPF32[$77>>2];
  $79 = HEAP32[$12>>2]|0;
  $80 = ((($79)) + -44|0);
  $81 = +HEAPF32[$80>>2];
  $82 = $78 - $81;
  HEAPF32[$15>>2] = $82;
  $83 = HEAP32[$12>>2]|0;
  $84 = ((($83)) + -8|0);
  $85 = +HEAPF32[$84>>2];
  $86 = HEAP32[$12>>2]|0;
  $87 = ((($86)) + -40|0);
  $88 = +HEAPF32[$87>>2];
  $89 = $85 + $88;
  $90 = HEAP32[$12>>2]|0;
  $91 = ((($90)) + -8|0);
  HEAPF32[$91>>2] = $89;
  $92 = HEAP32[$12>>2]|0;
  $93 = ((($92)) + -12|0);
  $94 = +HEAPF32[$93>>2];
  $95 = HEAP32[$12>>2]|0;
  $96 = ((($95)) + -44|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $94 + $97;
  $99 = HEAP32[$12>>2]|0;
  $100 = ((($99)) + -12|0);
  HEAPF32[$100>>2] = $98;
  $101 = +HEAPF32[$14>>2];
  $102 = +HEAPF32[$15>>2];
  $103 = $101 + $102;
  $104 = +HEAPF32[$11>>2];
  $105 = $103 * $104;
  $106 = HEAP32[$12>>2]|0;
  $107 = ((($106)) + -40|0);
  HEAPF32[$107>>2] = $105;
  $108 = +HEAPF32[$15>>2];
  $109 = +HEAPF32[$14>>2];
  $110 = $108 - $109;
  $111 = +HEAPF32[$11>>2];
  $112 = $110 * $111;
  $113 = HEAP32[$12>>2]|0;
  $114 = ((($113)) + -44|0);
  HEAPF32[$114>>2] = $112;
  $115 = HEAP32[$12>>2]|0;
  $116 = ((($115)) + -48|0);
  $117 = +HEAPF32[$116>>2];
  $118 = HEAP32[$12>>2]|0;
  $119 = ((($118)) + -16|0);
  $120 = +HEAPF32[$119>>2];
  $121 = $117 - $120;
  HEAPF32[$14>>2] = $121;
  $122 = HEAP32[$12>>2]|0;
  $123 = ((($122)) + -20|0);
  $124 = +HEAPF32[$123>>2];
  $125 = HEAP32[$12>>2]|0;
  $126 = ((($125)) + -52|0);
  $127 = +HEAPF32[$126>>2];
  $128 = $124 - $127;
  HEAPF32[$15>>2] = $128;
  $129 = HEAP32[$12>>2]|0;
  $130 = ((($129)) + -16|0);
  $131 = +HEAPF32[$130>>2];
  $132 = HEAP32[$12>>2]|0;
  $133 = ((($132)) + -48|0);
  $134 = +HEAPF32[$133>>2];
  $135 = $131 + $134;
  $136 = HEAP32[$12>>2]|0;
  $137 = ((($136)) + -16|0);
  HEAPF32[$137>>2] = $135;
  $138 = HEAP32[$12>>2]|0;
  $139 = ((($138)) + -20|0);
  $140 = +HEAPF32[$139>>2];
  $141 = HEAP32[$12>>2]|0;
  $142 = ((($141)) + -52|0);
  $143 = +HEAPF32[$142>>2];
  $144 = $140 + $143;
  $145 = HEAP32[$12>>2]|0;
  $146 = ((($145)) + -20|0);
  HEAPF32[$146>>2] = $144;
  $147 = +HEAPF32[$15>>2];
  $148 = HEAP32[$12>>2]|0;
  $149 = ((($148)) + -48|0);
  HEAPF32[$149>>2] = $147;
  $150 = +HEAPF32[$14>>2];
  $151 = HEAP32[$12>>2]|0;
  $152 = ((($151)) + -52|0);
  HEAPF32[$152>>2] = $150;
  $153 = HEAP32[$12>>2]|0;
  $154 = ((($153)) + -56|0);
  $155 = +HEAPF32[$154>>2];
  $156 = HEAP32[$12>>2]|0;
  $157 = ((($156)) + -24|0);
  $158 = +HEAPF32[$157>>2];
  $159 = $155 - $158;
  HEAPF32[$14>>2] = $159;
  $160 = HEAP32[$12>>2]|0;
  $161 = ((($160)) + -28|0);
  $162 = +HEAPF32[$161>>2];
  $163 = HEAP32[$12>>2]|0;
  $164 = ((($163)) + -60|0);
  $165 = +HEAPF32[$164>>2];
  $166 = $162 - $165;
  HEAPF32[$15>>2] = $166;
  $167 = HEAP32[$12>>2]|0;
  $168 = ((($167)) + -24|0);
  $169 = +HEAPF32[$168>>2];
  $170 = HEAP32[$12>>2]|0;
  $171 = ((($170)) + -56|0);
  $172 = +HEAPF32[$171>>2];
  $173 = $169 + $172;
  $174 = HEAP32[$12>>2]|0;
  $175 = ((($174)) + -24|0);
  HEAPF32[$175>>2] = $173;
  $176 = HEAP32[$12>>2]|0;
  $177 = ((($176)) + -28|0);
  $178 = +HEAPF32[$177>>2];
  $179 = HEAP32[$12>>2]|0;
  $180 = ((($179)) + -60|0);
  $181 = +HEAPF32[$180>>2];
  $182 = $178 + $181;
  $183 = HEAP32[$12>>2]|0;
  $184 = ((($183)) + -28|0);
  HEAPF32[$184>>2] = $182;
  $185 = +HEAPF32[$14>>2];
  $186 = +HEAPF32[$15>>2];
  $187 = $185 + $186;
  $188 = +HEAPF32[$11>>2];
  $189 = $187 * $188;
  $190 = HEAP32[$12>>2]|0;
  $191 = ((($190)) + -56|0);
  HEAPF32[$191>>2] = $189;
  $192 = +HEAPF32[$14>>2];
  $193 = +HEAPF32[$15>>2];
  $194 = $192 - $193;
  $195 = +HEAPF32[$11>>2];
  $196 = $194 * $195;
  $197 = HEAP32[$12>>2]|0;
  $198 = ((($197)) + -60|0);
  HEAPF32[$198>>2] = $196;
  $199 = HEAP32[$12>>2]|0;
  _iter_54($199);
  $200 = HEAP32[$12>>2]|0;
  $201 = ((($200)) + -32|0);
  _iter_54($201);
  $202 = HEAP32[$12>>2]|0;
  $203 = ((($202)) + -64|0);
  HEAP32[$12>>2] = $203;
 }
 STACKTOP = sp;return;
}
function _iter_54($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0;
 var $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$1>>2] = $0;
 $10 = HEAP32[$1>>2]|0;
 $11 = +HEAPF32[$10>>2];
 $12 = HEAP32[$1>>2]|0;
 $13 = ((($12)) + -16|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $11 - $14;
 HEAPF32[$2>>2] = $15;
 $16 = HEAP32[$1>>2]|0;
 $17 = +HEAPF32[$16>>2];
 $18 = HEAP32[$1>>2]|0;
 $19 = ((($18)) + -16|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 + $20;
 HEAPF32[$6>>2] = $21;
 $22 = HEAP32[$1>>2]|0;
 $23 = ((($22)) + -8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = HEAP32[$1>>2]|0;
 $26 = ((($25)) + -24|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $24 + $27;
 HEAPF32[$8>>2] = $28;
 $29 = HEAP32[$1>>2]|0;
 $30 = ((($29)) + -8|0);
 $31 = +HEAPF32[$30>>2];
 $32 = HEAP32[$1>>2]|0;
 $33 = ((($32)) + -24|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $31 - $34;
 HEAPF32[$4>>2] = $35;
 $36 = +HEAPF32[$6>>2];
 $37 = +HEAPF32[$8>>2];
 $38 = $36 + $37;
 $39 = HEAP32[$1>>2]|0;
 HEAPF32[$39>>2] = $38;
 $40 = +HEAPF32[$6>>2];
 $41 = +HEAPF32[$8>>2];
 $42 = $40 - $41;
 $43 = HEAP32[$1>>2]|0;
 $44 = ((($43)) + -8|0);
 HEAPF32[$44>>2] = $42;
 $45 = HEAP32[$1>>2]|0;
 $46 = ((($45)) + -12|0);
 $47 = +HEAPF32[$46>>2];
 $48 = HEAP32[$1>>2]|0;
 $49 = ((($48)) + -28|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $47 - $50;
 HEAPF32[$5>>2] = $51;
 $52 = +HEAPF32[$2>>2];
 $53 = +HEAPF32[$5>>2];
 $54 = $52 + $53;
 $55 = HEAP32[$1>>2]|0;
 $56 = ((($55)) + -16|0);
 HEAPF32[$56>>2] = $54;
 $57 = +HEAPF32[$2>>2];
 $58 = +HEAPF32[$5>>2];
 $59 = $57 - $58;
 $60 = HEAP32[$1>>2]|0;
 $61 = ((($60)) + -24|0);
 HEAPF32[$61>>2] = $59;
 $62 = HEAP32[$1>>2]|0;
 $63 = ((($62)) + -4|0);
 $64 = +HEAPF32[$63>>2];
 $65 = HEAP32[$1>>2]|0;
 $66 = ((($65)) + -20|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $64 - $67;
 HEAPF32[$3>>2] = $68;
 $69 = HEAP32[$1>>2]|0;
 $70 = ((($69)) + -4|0);
 $71 = +HEAPF32[$70>>2];
 $72 = HEAP32[$1>>2]|0;
 $73 = ((($72)) + -20|0);
 $74 = +HEAPF32[$73>>2];
 $75 = $71 + $74;
 HEAPF32[$7>>2] = $75;
 $76 = HEAP32[$1>>2]|0;
 $77 = ((($76)) + -12|0);
 $78 = +HEAPF32[$77>>2];
 $79 = HEAP32[$1>>2]|0;
 $80 = ((($79)) + -28|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $78 + $81;
 HEAPF32[$9>>2] = $82;
 $83 = +HEAPF32[$7>>2];
 $84 = +HEAPF32[$9>>2];
 $85 = $83 + $84;
 $86 = HEAP32[$1>>2]|0;
 $87 = ((($86)) + -4|0);
 HEAPF32[$87>>2] = $85;
 $88 = +HEAPF32[$7>>2];
 $89 = +HEAPF32[$9>>2];
 $90 = $88 - $89;
 $91 = HEAP32[$1>>2]|0;
 $92 = ((($91)) + -12|0);
 HEAPF32[$92>>2] = $90;
 $93 = +HEAPF32[$3>>2];
 $94 = +HEAPF32[$4>>2];
 $95 = $93 - $94;
 $96 = HEAP32[$1>>2]|0;
 $97 = ((($96)) + -20|0);
 HEAPF32[$97>>2] = $95;
 $98 = +HEAPF32[$3>>2];
 $99 = +HEAPF32[$4>>2];
 $100 = $98 + $99;
 $101 = HEAP32[$1>>2]|0;
 $102 = ((($101)) + -28|0);
 HEAPF32[$102>>2] = $100;
 STACKTOP = sp;return;
}
function _draw_line($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 52|0;
 $7 = sp + 48|0;
 $8 = sp + 44|0;
 $9 = sp + 40|0;
 $10 = sp + 36|0;
 $11 = sp + 32|0;
 $12 = sp + 28|0;
 $13 = sp + 24|0;
 $14 = sp + 20|0;
 $15 = sp + 16|0;
 $16 = sp + 12|0;
 $17 = sp + 8|0;
 $18 = sp + 4|0;
 $19 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 HEAP32[$11>>2] = $5;
 $20 = HEAP32[$10>>2]|0;
 $21 = HEAP32[$8>>2]|0;
 $22 = (($20) - ($21))|0;
 HEAP32[$12>>2] = $22;
 $23 = HEAP32[$9>>2]|0;
 $24 = HEAP32[$7>>2]|0;
 $25 = (($23) - ($24))|0;
 HEAP32[$13>>2] = $25;
 $26 = HEAP32[$12>>2]|0;
 $27 = (Math_abs(($26|0))|0);
 HEAP32[$14>>2] = $27;
 $28 = HEAP32[$7>>2]|0;
 HEAP32[$16>>2] = $28;
 $29 = HEAP32[$8>>2]|0;
 HEAP32[$17>>2] = $29;
 HEAP32[$18>>2] = 0;
 $30 = HEAP32[$12>>2]|0;
 $31 = HEAP32[$13>>2]|0;
 $32 = (($30|0) / ($31|0))&-1;
 HEAP32[$15>>2] = $32;
 $33 = HEAP32[$12>>2]|0;
 $34 = ($33|0)<(0);
 $35 = HEAP32[$15>>2]|0;
 if ($34) {
  $36 = (($35) - 1)|0;
  HEAP32[$19>>2] = $36;
 } else {
  $37 = (($35) + 1)|0;
  HEAP32[$19>>2] = $37;
 }
 $38 = HEAP32[$15>>2]|0;
 $39 = (Math_abs(($38|0))|0);
 $40 = HEAP32[$13>>2]|0;
 $41 = Math_imul($39, $40)|0;
 $42 = HEAP32[$14>>2]|0;
 $43 = (($42) - ($41))|0;
 HEAP32[$14>>2] = $43;
 $44 = HEAP32[$9>>2]|0;
 $45 = HEAP32[$11>>2]|0;
 $46 = ($44|0)>($45|0);
 if ($46) {
  $47 = HEAP32[$11>>2]|0;
  HEAP32[$9>>2] = $47;
 }
 $48 = HEAP32[$16>>2]|0;
 $49 = HEAP32[$9>>2]|0;
 $50 = ($48|0)<($49|0);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = HEAP32[$17>>2]|0;
 $52 = (3576 + ($51<<2)|0);
 $53 = +HEAPF32[$52>>2];
 $54 = HEAP32[$6>>2]|0;
 $55 = HEAP32[$16>>2]|0;
 $56 = (($54) + ($55<<2)|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $57 * $53;
 HEAPF32[$56>>2] = $58;
 $59 = HEAP32[$16>>2]|0;
 $60 = (($59) + 1)|0;
 HEAP32[$16>>2] = $60;
 while(1) {
  $61 = HEAP32[$16>>2]|0;
  $62 = HEAP32[$9>>2]|0;
  $63 = ($61|0)<($62|0);
  if (!($63)) {
   break;
  }
  $64 = HEAP32[$14>>2]|0;
  $65 = HEAP32[$18>>2]|0;
  $66 = (($65) + ($64))|0;
  HEAP32[$18>>2] = $66;
  $67 = HEAP32[$18>>2]|0;
  $68 = HEAP32[$13>>2]|0;
  $69 = ($67|0)>=($68|0);
  if ($69) {
   $70 = HEAP32[$13>>2]|0;
   $71 = HEAP32[$18>>2]|0;
   $72 = (($71) - ($70))|0;
   HEAP32[$18>>2] = $72;
   $73 = HEAP32[$19>>2]|0;
   $74 = HEAP32[$17>>2]|0;
   $75 = (($74) + ($73))|0;
   HEAP32[$17>>2] = $75;
  } else {
   $76 = HEAP32[$15>>2]|0;
   $77 = HEAP32[$17>>2]|0;
   $78 = (($77) + ($76))|0;
   HEAP32[$17>>2] = $78;
  }
  $79 = HEAP32[$17>>2]|0;
  $80 = (3576 + ($79<<2)|0);
  $81 = +HEAPF32[$80>>2];
  $82 = HEAP32[$6>>2]|0;
  $83 = HEAP32[$16>>2]|0;
  $84 = (($82) + ($83<<2)|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $85 * $81;
  HEAPF32[$84>>2] = $86;
  $87 = HEAP32[$16>>2]|0;
  $88 = (($87) + 1)|0;
  HEAP32[$16>>2] = $88;
 }
 STACKTOP = sp;return;
}
function _make_block_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $9 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$7>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = (($10) + ($11<<2)|0);
 HEAP32[$8>>2] = $12;
 HEAP32[$6>>2] = 0;
 while(1) {
  $13 = HEAP32[$6>>2]|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[$8>>2]|0;
  $17 = HEAP32[$7>>2]|0;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($17) + ($18<<2)|0);
  HEAP32[$19>>2] = $16;
  $20 = HEAP32[$5>>2]|0;
  $21 = HEAP32[$8>>2]|0;
  $22 = (($21) + ($20)|0);
  HEAP32[$8>>2] = $22;
  $23 = HEAP32[$6>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$6>>2] = $24;
 }
 $25 = HEAP32[$7>>2]|0;
 STACKTOP = sp;return ($25|0);
}
function _codebook_decode_deinterleave_repeat($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = sp + 68|0;
 $9 = sp + 64|0;
 $10 = sp + 60|0;
 $11 = sp + 56|0;
 $12 = sp + 52|0;
 $13 = sp + 48|0;
 $14 = sp + 44|0;
 $15 = sp + 40|0;
 $16 = sp + 36|0;
 $17 = sp + 32|0;
 $18 = sp + 28|0;
 $19 = sp + 24|0;
 $20 = sp + 20|0;
 $21 = sp + 16|0;
 $22 = sp + 12|0;
 $23 = sp + 8|0;
 $24 = sp + 4|0;
 $25 = sp;
 HEAP32[$9>>2] = $0;
 HEAP32[$10>>2] = $1;
 HEAP32[$11>>2] = $2;
 HEAP32[$12>>2] = $3;
 HEAP32[$13>>2] = $4;
 HEAP32[$14>>2] = $5;
 HEAP32[$15>>2] = $6;
 HEAP32[$16>>2] = $7;
 $26 = HEAP32[$13>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$17>>2] = $27;
 $28 = HEAP32[$14>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 HEAP32[$18>>2] = $29;
 $30 = HEAP32[$10>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$21>>2] = $31;
 $32 = HEAP32[$10>>2]|0;
 $33 = ((($32)) + 21|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = ($35|0)==(0);
 if ($36) {
  $37 = HEAP32[$9>>2]|0;
  $38 = (_error($37,21)|0);
  HEAP32[$8>>2] = $38;
  $211 = HEAP32[$8>>2]|0;
  STACKTOP = sp;return ($211|0);
 }
 while(1) {
  $39 = HEAP32[$16>>2]|0;
  $40 = ($39|0)>(0);
  if (!($40)) {
   label = 34;
   break;
  }
  HEAPF32[$22>>2] = 0.0;
  $41 = HEAP32[$9>>2]|0;
  $42 = ((($41)) + 1396|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)<(10);
  if ($44) {
   $45 = HEAP32[$9>>2]|0;
   _prep_huffman($45);
  }
  $46 = HEAP32[$9>>2]|0;
  $47 = ((($46)) + 1392|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $48 & 1023;
  HEAP32[$20>>2] = $49;
  $50 = HEAP32[$10>>2]|0;
  $51 = ((($50)) + 36|0);
  $52 = HEAP32[$20>>2]|0;
  $53 = (($51) + ($52<<1)|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54 << 16 >> 16;
  HEAP32[$20>>2] = $55;
  $56 = HEAP32[$20>>2]|0;
  $57 = ($56|0)>=(0);
  if ($57) {
   $58 = HEAP32[$10>>2]|0;
   $59 = ((($58)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = HEAP32[$20>>2]|0;
   $62 = (($60) + ($61)|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   HEAP32[$23>>2] = $64;
   $65 = HEAP32[$23>>2]|0;
   $66 = HEAP32[$9>>2]|0;
   $67 = ((($66)) + 1392|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 >>> $65;
   HEAP32[$67>>2] = $69;
   $70 = HEAP32[$23>>2]|0;
   $71 = HEAP32[$9>>2]|0;
   $72 = ((($71)) + 1396|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) - ($70))|0;
   HEAP32[$72>>2] = $74;
   $75 = HEAP32[$9>>2]|0;
   $76 = ((($75)) + 1396|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)<(0);
   if ($78) {
    $79 = HEAP32[$9>>2]|0;
    $80 = ((($79)) + 1396|0);
    HEAP32[$80>>2] = 0;
    HEAP32[$20>>2] = -1;
   }
  } else {
   $81 = HEAP32[$9>>2]|0;
   $82 = HEAP32[$10>>2]|0;
   $83 = (_codebook_decode_scalar_raw($81,$82)|0);
   HEAP32[$20>>2] = $83;
  }
  $84 = HEAP32[$10>>2]|0;
  $85 = ((($84)) + 23|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = ($86<<24>>24)!=(0);
  if ($87) {
   $88 = HEAP32[$20>>2]|0;
   $89 = HEAP32[$10>>2]|0;
   $90 = ((($89)) + 2092|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ($88|0)<($91|0);
   if (!($92)) {
    label = 12;
    break;
   }
  }
  $93 = HEAP32[$20>>2]|0;
  $94 = ($93|0)<(0);
  if ($94) {
   label = 14;
   break;
  }
  $105 = HEAP32[$17>>2]|0;
  $106 = HEAP32[$18>>2]|0;
  $107 = HEAP32[$12>>2]|0;
  $108 = Math_imul($106, $107)|0;
  $109 = (($105) + ($108))|0;
  $110 = HEAP32[$21>>2]|0;
  $111 = (($109) + ($110))|0;
  $112 = HEAP32[$15>>2]|0;
  $113 = HEAP32[$12>>2]|0;
  $114 = Math_imul($112, $113)|0;
  $115 = ($111|0)>($114|0);
  if ($115) {
   $116 = HEAP32[$15>>2]|0;
   $117 = HEAP32[$12>>2]|0;
   $118 = Math_imul($116, $117)|0;
   $119 = HEAP32[$18>>2]|0;
   $120 = HEAP32[$12>>2]|0;
   $121 = Math_imul($119, $120)|0;
   $122 = HEAP32[$17>>2]|0;
   $123 = (($121) - ($122))|0;
   $124 = (($118) - ($123))|0;
   HEAP32[$21>>2] = $124;
  }
  $125 = HEAP32[$10>>2]|0;
  $126 = HEAP32[$125>>2]|0;
  $127 = HEAP32[$20>>2]|0;
  $128 = Math_imul($127, $126)|0;
  HEAP32[$20>>2] = $128;
  $129 = HEAP32[$10>>2]|0;
  $130 = ((($129)) + 22|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = ($131<<24>>24)!=(0);
  HEAP32[$19>>2] = 0;
  L22: do {
   if ($132) {
    while(1) {
     $133 = HEAP32[$19>>2]|0;
     $134 = HEAP32[$21>>2]|0;
     $135 = ($133|0)<($134|0);
     if (!($135)) {
      break L22;
     }
     $136 = HEAP32[$10>>2]|0;
     $137 = ((($136)) + 28|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = HEAP32[$20>>2]|0;
     $140 = HEAP32[$19>>2]|0;
     $141 = (($139) + ($140))|0;
     $142 = (($138) + ($141<<2)|0);
     $143 = +HEAPF32[$142>>2];
     $144 = +HEAPF32[$22>>2];
     $145 = $143 + $144;
     HEAPF32[$24>>2] = $145;
     $146 = HEAP32[$11>>2]|0;
     $147 = HEAP32[$17>>2]|0;
     $148 = (($146) + ($147<<2)|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)!=(0|0);
     if ($150) {
      $151 = +HEAPF32[$24>>2];
      $152 = HEAP32[$11>>2]|0;
      $153 = HEAP32[$17>>2]|0;
      $154 = (($152) + ($153<<2)|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = HEAP32[$18>>2]|0;
      $157 = (($155) + ($156<<2)|0);
      $158 = +HEAPF32[$157>>2];
      $159 = $158 + $151;
      HEAPF32[$157>>2] = $159;
     }
     $160 = HEAP32[$17>>2]|0;
     $161 = (($160) + 1)|0;
     HEAP32[$17>>2] = $161;
     $162 = HEAP32[$12>>2]|0;
     $163 = ($161|0)==($162|0);
     if ($163) {
      HEAP32[$17>>2] = 0;
      $164 = HEAP32[$18>>2]|0;
      $165 = (($164) + 1)|0;
      HEAP32[$18>>2] = $165;
     }
     $166 = +HEAPF32[$24>>2];
     HEAPF32[$22>>2] = $166;
     $167 = HEAP32[$19>>2]|0;
     $168 = (($167) + 1)|0;
     HEAP32[$19>>2] = $168;
    }
   } else {
    while(1) {
     $169 = HEAP32[$19>>2]|0;
     $170 = HEAP32[$21>>2]|0;
     $171 = ($169|0)<($170|0);
     if (!($171)) {
      break L22;
     }
     $172 = HEAP32[$10>>2]|0;
     $173 = ((($172)) + 28|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = HEAP32[$20>>2]|0;
     $176 = HEAP32[$19>>2]|0;
     $177 = (($175) + ($176))|0;
     $178 = (($174) + ($177<<2)|0);
     $179 = +HEAPF32[$178>>2];
     $180 = +HEAPF32[$22>>2];
     $181 = $179 + $180;
     HEAPF32[$25>>2] = $181;
     $182 = HEAP32[$11>>2]|0;
     $183 = HEAP32[$17>>2]|0;
     $184 = (($182) + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($185|0)!=(0|0);
     if ($186) {
      $187 = +HEAPF32[$25>>2];
      $188 = HEAP32[$11>>2]|0;
      $189 = HEAP32[$17>>2]|0;
      $190 = (($188) + ($189<<2)|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = HEAP32[$18>>2]|0;
      $193 = (($191) + ($192<<2)|0);
      $194 = +HEAPF32[$193>>2];
      $195 = $194 + $187;
      HEAPF32[$193>>2] = $195;
     }
     $196 = HEAP32[$17>>2]|0;
     $197 = (($196) + 1)|0;
     HEAP32[$17>>2] = $197;
     $198 = HEAP32[$12>>2]|0;
     $199 = ($197|0)==($198|0);
     if ($199) {
      HEAP32[$17>>2] = 0;
      $200 = HEAP32[$18>>2]|0;
      $201 = (($200) + 1)|0;
      HEAP32[$18>>2] = $201;
     }
     $202 = HEAP32[$19>>2]|0;
     $203 = (($202) + 1)|0;
     HEAP32[$19>>2] = $203;
    }
   }
  } while(0);
  $204 = HEAP32[$21>>2]|0;
  $205 = HEAP32[$16>>2]|0;
  $206 = (($205) - ($204))|0;
  HEAP32[$16>>2] = $206;
 }
 if ((label|0) == 12) {
  ___assert_fail((14924|0),(14636|0),1437,(14960|0));
  // unreachable;
 }
 else if ((label|0) == 14) {
  $95 = HEAP32[$9>>2]|0;
  $96 = ((($95)) + 1376|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = ($97<<24>>24)!=(0);
  if (!($98)) {
   $99 = HEAP32[$9>>2]|0;
   $100 = ((($99)) + 1384|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)!=(0);
   if ($102) {
    HEAP32[$8>>2] = 0;
    $211 = HEAP32[$8>>2]|0;
    STACKTOP = sp;return ($211|0);
   }
  }
  $103 = HEAP32[$9>>2]|0;
  $104 = (_error($103,21)|0);
  HEAP32[$8>>2] = $104;
  $211 = HEAP32[$8>>2]|0;
  STACKTOP = sp;return ($211|0);
 }
 else if ((label|0) == 34) {
  $207 = HEAP32[$17>>2]|0;
  $208 = HEAP32[$13>>2]|0;
  HEAP32[$208>>2] = $207;
  $209 = HEAP32[$18>>2]|0;
  $210 = HEAP32[$14>>2]|0;
  HEAP32[$210>>2] = $209;
  HEAP32[$8>>2] = 1;
  $211 = HEAP32[$8>>2]|0;
  STACKTOP = sp;return ($211|0);
 }
 return (0)|0;
}
function _residue_decode($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 32|0;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 20|0;
 $10 = sp + 16|0;
 $11 = sp + 12|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 HEAP32[$7>>2] = $0;
 HEAP32[$8>>2] = $1;
 HEAP32[$9>>2] = $2;
 HEAP32[$10>>2] = $3;
 HEAP32[$11>>2] = $4;
 HEAP32[$12>>2] = $5;
 $15 = HEAP32[$12>>2]|0;
 $16 = ($15|0)==(0);
 L1: do {
  if ($16) {
   $17 = HEAP32[$11>>2]|0;
   $18 = HEAP32[$8>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17|0) / ($19|0))&-1;
   HEAP32[$14>>2] = $20;
   HEAP32[$13>>2] = 0;
   while(1) {
    $21 = HEAP32[$13>>2]|0;
    $22 = HEAP32[$14>>2]|0;
    $23 = ($21|0)<($22|0);
    if (!($23)) {
     break L1;
    }
    $24 = HEAP32[$7>>2]|0;
    $25 = HEAP32[$8>>2]|0;
    $26 = HEAP32[$9>>2]|0;
    $27 = HEAP32[$10>>2]|0;
    $28 = (($26) + ($27<<2)|0);
    $29 = HEAP32[$13>>2]|0;
    $30 = (($28) + ($29<<2)|0);
    $31 = HEAP32[$11>>2]|0;
    $32 = HEAP32[$10>>2]|0;
    $33 = (($31) - ($32))|0;
    $34 = HEAP32[$13>>2]|0;
    $35 = (($33) - ($34))|0;
    $36 = HEAP32[$14>>2]|0;
    $37 = (_codebook_decode_step($24,$25,$30,$35,$36)|0);
    $38 = ($37|0)!=(0);
    if (!($38)) {
     break;
    }
    $39 = HEAP32[$13>>2]|0;
    $40 = (($39) + 1)|0;
    HEAP32[$13>>2] = $40;
   }
   HEAP32[$6>>2] = 0;
   $62 = HEAP32[$6>>2]|0;
   STACKTOP = sp;return ($62|0);
  } else {
   HEAP32[$13>>2] = 0;
   while(1) {
    $41 = HEAP32[$13>>2]|0;
    $42 = HEAP32[$11>>2]|0;
    $43 = ($41|0)<($42|0);
    if (!($43)) {
     break L1;
    }
    $44 = HEAP32[$7>>2]|0;
    $45 = HEAP32[$8>>2]|0;
    $46 = HEAP32[$9>>2]|0;
    $47 = HEAP32[$10>>2]|0;
    $48 = (($46) + ($47<<2)|0);
    $49 = HEAP32[$11>>2]|0;
    $50 = HEAP32[$13>>2]|0;
    $51 = (($49) - ($50))|0;
    $52 = (_codebook_decode($44,$45,$48,$51)|0);
    $53 = ($52|0)!=(0);
    if (!($53)) {
     break;
    }
    $54 = HEAP32[$8>>2]|0;
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[$13>>2]|0;
    $57 = (($56) + ($55))|0;
    HEAP32[$13>>2] = $57;
    $58 = HEAP32[$8>>2]|0;
    $59 = HEAP32[$58>>2]|0;
    $60 = HEAP32[$10>>2]|0;
    $61 = (($60) + ($59))|0;
    HEAP32[$10>>2] = $61;
   }
   HEAP32[$6>>2] = 0;
   $62 = HEAP32[$6>>2]|0;
   STACKTOP = sp;return ($62|0);
  }
 } while(0);
 HEAP32[$6>>2] = 1;
 $62 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($62|0);
}
function _codebook_decode_step($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 36|0;
 $6 = sp + 32|0;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 20|0;
 $10 = sp + 16|0;
 $11 = sp + 12|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 $15 = HEAP32[$6>>2]|0;
 $16 = HEAP32[$7>>2]|0;
 $17 = (_codebook_decode_start($15,$16)|0);
 HEAP32[$12>>2] = $17;
 HEAPF32[$13>>2] = 0.0;
 $18 = HEAP32[$12>>2]|0;
 $19 = ($18|0)<(0);
 if ($19) {
  HEAP32[$5>>2] = 0;
  $58 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($58|0);
 }
 $20 = HEAP32[$9>>2]|0;
 $21 = HEAP32[$7>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($20|0)>($22|0);
 if ($23) {
  $24 = HEAP32[$7>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$9>>2] = $25;
 }
 $26 = HEAP32[$7>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$12>>2]|0;
 $29 = Math_imul($28, $27)|0;
 HEAP32[$12>>2] = $29;
 HEAP32[$11>>2] = 0;
 while(1) {
  $30 = HEAP32[$11>>2]|0;
  $31 = HEAP32[$9>>2]|0;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = HEAP32[$7>>2]|0;
  $34 = ((($33)) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$12>>2]|0;
  $37 = HEAP32[$11>>2]|0;
  $38 = (($36) + ($37))|0;
  $39 = (($35) + ($38<<2)|0);
  $40 = +HEAPF32[$39>>2];
  $41 = +HEAPF32[$13>>2];
  $42 = $40 + $41;
  HEAPF32[$14>>2] = $42;
  $43 = +HEAPF32[$14>>2];
  $44 = HEAP32[$8>>2]|0;
  $45 = HEAP32[$11>>2]|0;
  $46 = HEAP32[$10>>2]|0;
  $47 = Math_imul($45, $46)|0;
  $48 = (($44) + ($47<<2)|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $49 + $43;
  HEAPF32[$48>>2] = $50;
  $51 = HEAP32[$7>>2]|0;
  $52 = ((($51)) + 22|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = ($53<<24>>24)!=(0);
  if ($54) {
   $55 = +HEAPF32[$14>>2];
   HEAPF32[$13>>2] = $55;
  }
  $56 = HEAP32[$11>>2]|0;
  $57 = (($56) + 1)|0;
  HEAP32[$11>>2] = $57;
 }
 HEAP32[$5>>2] = 1;
 $58 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($58|0);
}
function _codebook_decode($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 24|0;
 $8 = sp + 20|0;
 $9 = sp + 16|0;
 $10 = sp + 12|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $14 = HEAP32[$5>>2]|0;
 $15 = HEAP32[$6>>2]|0;
 $16 = (_codebook_decode_start($14,$15)|0);
 HEAP32[$10>>2] = $16;
 $17 = HEAP32[$10>>2]|0;
 $18 = ($17|0)<(0);
 if ($18) {
  HEAP32[$4>>2] = 0;
  $79 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($79|0);
 }
 $19 = HEAP32[$8>>2]|0;
 $20 = HEAP32[$6>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($19|0)>($21|0);
 if ($22) {
  $23 = HEAP32[$6>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$8>>2] = $24;
 }
 $25 = HEAP32[$6>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$10>>2]|0;
 $28 = Math_imul($27, $26)|0;
 HEAP32[$10>>2] = $28;
 $29 = HEAP32[$6>>2]|0;
 $30 = ((($29)) + 22|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)!=(0);
 L8: do {
  if ($32) {
   HEAPF32[$11>>2] = 0.0;
   HEAP32[$9>>2] = 0;
   while(1) {
    $33 = HEAP32[$9>>2]|0;
    $34 = HEAP32[$8>>2]|0;
    $35 = ($33|0)<($34|0);
    if (!($35)) {
     break L8;
    }
    $36 = HEAP32[$6>>2]|0;
    $37 = ((($36)) + 28|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = HEAP32[$10>>2]|0;
    $40 = HEAP32[$9>>2]|0;
    $41 = (($39) + ($40))|0;
    $42 = (($38) + ($41<<2)|0);
    $43 = +HEAPF32[$42>>2];
    $44 = +HEAPF32[$11>>2];
    $45 = $43 + $44;
    HEAPF32[$12>>2] = $45;
    $46 = +HEAPF32[$12>>2];
    $47 = HEAP32[$7>>2]|0;
    $48 = HEAP32[$9>>2]|0;
    $49 = (($47) + ($48<<2)|0);
    $50 = +HEAPF32[$49>>2];
    $51 = $50 + $46;
    HEAPF32[$49>>2] = $51;
    $52 = +HEAPF32[$12>>2];
    $53 = HEAP32[$6>>2]|0;
    $54 = ((($53)) + 12|0);
    $55 = +HEAPF32[$54>>2];
    $56 = $52 + $55;
    HEAPF32[$11>>2] = $56;
    $57 = HEAP32[$9>>2]|0;
    $58 = (($57) + 1)|0;
    HEAP32[$9>>2] = $58;
   }
  } else {
   HEAPF32[$13>>2] = 0.0;
   HEAP32[$9>>2] = 0;
   while(1) {
    $59 = HEAP32[$9>>2]|0;
    $60 = HEAP32[$8>>2]|0;
    $61 = ($59|0)<($60|0);
    if (!($61)) {
     break L8;
    }
    $62 = HEAP32[$6>>2]|0;
    $63 = ((($62)) + 28|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = HEAP32[$10>>2]|0;
    $66 = HEAP32[$9>>2]|0;
    $67 = (($65) + ($66))|0;
    $68 = (($64) + ($67<<2)|0);
    $69 = +HEAPF32[$68>>2];
    $70 = +HEAPF32[$13>>2];
    $71 = $69 + $70;
    $72 = HEAP32[$7>>2]|0;
    $73 = HEAP32[$9>>2]|0;
    $74 = (($72) + ($73<<2)|0);
    $75 = +HEAPF32[$74>>2];
    $76 = $75 + $71;
    HEAPF32[$74>>2] = $76;
    $77 = HEAP32[$9>>2]|0;
    $78 = (($77) + 1)|0;
    HEAP32[$9>>2] = $78;
   }
  }
 } while(0);
 HEAP32[$4>>2] = 1;
 $79 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($79|0);
}
function _codebook_decode_start($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = -1;
 $7 = HEAP32[$4>>2]|0;
 $8 = ((($7)) + 21|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)==(0);
 $12 = HEAP32[$3>>2]|0;
 if ($11) {
  (_error($12,21)|0);
 } else {
  $13 = ((($12)) + 1396|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)<(10);
  if ($15) {
   $16 = HEAP32[$3>>2]|0;
   _prep_huffman($16);
  }
  $17 = HEAP32[$3>>2]|0;
  $18 = ((($17)) + 1392|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 1023;
  HEAP32[$5>>2] = $20;
  $21 = HEAP32[$4>>2]|0;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$5>>2]|0;
  $24 = (($22) + ($23<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  HEAP32[$5>>2] = $26;
  $27 = HEAP32[$5>>2]|0;
  $28 = ($27|0)>=(0);
  if ($28) {
   $29 = HEAP32[$4>>2]|0;
   $30 = ((($29)) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = HEAP32[$5>>2]|0;
   $33 = (($31) + ($32)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   HEAP32[$6>>2] = $35;
   $36 = HEAP32[$6>>2]|0;
   $37 = HEAP32[$3>>2]|0;
   $38 = ((($37)) + 1392|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 >>> $36;
   HEAP32[$38>>2] = $40;
   $41 = HEAP32[$6>>2]|0;
   $42 = HEAP32[$3>>2]|0;
   $43 = ((($42)) + 1396|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) - ($41))|0;
   HEAP32[$43>>2] = $45;
   $46 = HEAP32[$3>>2]|0;
   $47 = ((($46)) + 1396|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)<(0);
   if ($49) {
    $50 = HEAP32[$3>>2]|0;
    $51 = ((($50)) + 1396|0);
    HEAP32[$51>>2] = 0;
    HEAP32[$5>>2] = -1;
   }
  } else {
   $52 = HEAP32[$3>>2]|0;
   $53 = HEAP32[$4>>2]|0;
   $54 = (_codebook_decode_scalar_raw($52,$53)|0);
   HEAP32[$5>>2] = $54;
  }
  $55 = HEAP32[$4>>2]|0;
  $56 = ((($55)) + 23|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = ($57<<24>>24)!=(0);
  do {
   if ($58) {
    $59 = HEAP32[$5>>2]|0;
    $60 = HEAP32[$4>>2]|0;
    $61 = ((($60)) + 2092|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($59|0)<($62|0);
    if ($63) {
     break;
    } else {
     ___assert_fail((14880|0),(14636|0),1343,(14902|0));
     // unreachable;
    }
   }
  } while(0);
  $64 = HEAP32[$5>>2]|0;
  $65 = ($64|0)<(0);
  if ($65) {
   $66 = HEAP32[$3>>2]|0;
   $67 = ((($66)) + 1376|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = ($68<<24>>24)!=(0);
   if (!($69)) {
    $70 = HEAP32[$3>>2]|0;
    $71 = ((($70)) + 1384|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)!=(0);
    if ($73) {
     $74 = HEAP32[$5>>2]|0;
     HEAP32[$2>>2] = $74;
     $77 = HEAP32[$2>>2]|0;
     STACKTOP = sp;return ($77|0);
    }
   }
   $75 = HEAP32[$3>>2]|0;
   (_error($75,21)|0);
  }
 }
 $76 = HEAP32[$5>>2]|0;
 HEAP32[$2>>2] = $76;
 $77 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($77|0);
}
function _bit_reverse($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & -1431655766;
 $4 = $3 >>> 1;
 $5 = HEAP32[$1>>2]|0;
 $6 = $5 & 1431655765;
 $7 = $6 << 1;
 $8 = $4 | $7;
 HEAP32[$1>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = $9 & -858993460;
 $11 = $10 >>> 2;
 $12 = HEAP32[$1>>2]|0;
 $13 = $12 & 858993459;
 $14 = $13 << 2;
 $15 = $11 | $14;
 HEAP32[$1>>2] = $15;
 $16 = HEAP32[$1>>2]|0;
 $17 = $16 & -252645136;
 $18 = $17 >>> 4;
 $19 = HEAP32[$1>>2]|0;
 $20 = $19 & 252645135;
 $21 = $20 << 4;
 $22 = $18 | $21;
 HEAP32[$1>>2] = $22;
 $23 = HEAP32[$1>>2]|0;
 $24 = $23 & -16711936;
 $25 = $24 >>> 8;
 $26 = HEAP32[$1>>2]|0;
 $27 = $26 & 16711935;
 $28 = $27 << 8;
 $29 = $25 | $28;
 HEAP32[$1>>2] = $29;
 $30 = HEAP32[$1>>2]|0;
 $31 = $30 >>> 16;
 $32 = HEAP32[$1>>2]|0;
 $33 = $32 << 16;
 $34 = $31 | $33;
 STACKTOP = sp;return ($34|0);
}
function _maybe_start_packet($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 1380|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(-1);
 do {
  if ($7) {
   $8 = HEAP32[$2>>2]|0;
   $9 = (_get8($8)|0);
   $10 = $9&255;
   HEAP32[$3>>2] = $10;
   $11 = HEAP32[$2>>2]|0;
   $12 = ((($11)) + 96|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0);
   if ($14) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $15 = HEAP32[$3>>2]|0;
   $16 = (79)!=($15|0);
   $17 = HEAP32[$2>>2]|0;
   if ($16) {
    $18 = (_error($17,30)|0);
    HEAP32[$1>>2] = $18;
    break;
   }
   $19 = (_get8($17)|0);
   $20 = $19&255;
   $21 = (103)!=($20|0);
   $22 = HEAP32[$2>>2]|0;
   if ($21) {
    $23 = (_error($22,30)|0);
    HEAP32[$1>>2] = $23;
    break;
   }
   $24 = (_get8($22)|0);
   $25 = $24&255;
   $26 = (103)!=($25|0);
   $27 = HEAP32[$2>>2]|0;
   if ($26) {
    $28 = (_error($27,30)|0);
    HEAP32[$1>>2] = $28;
    break;
   }
   $29 = (_get8($27)|0);
   $30 = $29&255;
   $31 = (83)!=($30|0);
   $32 = HEAP32[$2>>2]|0;
   if ($31) {
    $33 = (_error($32,30)|0);
    HEAP32[$1>>2] = $33;
    break;
   }
   $34 = (_start_page_no_capturepattern($32)|0);
   $35 = ($34|0)!=(0);
   if (!($35)) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $36 = HEAP32[$2>>2]|0;
   $37 = ((($36)) + 1375|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = $39 & 1;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = HEAP32[$2>>2]|0;
    $43 = ((($42)) + 1384|0);
    HEAP32[$43>>2] = 0;
    $44 = HEAP32[$2>>2]|0;
    $45 = ((($44)) + 1376|0);
    HEAP8[$45>>0] = 0;
    $46 = HEAP32[$2>>2]|0;
    $47 = (_error($46,32)|0);
    HEAP32[$1>>2] = $47;
   } else {
    label = 16;
   }
  } else {
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $48 = HEAP32[$2>>2]|0;
  $49 = (_start_packet($48)|0);
  HEAP32[$1>>2] = $49;
 }
 $50 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($50|0);
}
function _get8_packet($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_get8_packet_raw($3)|0);
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($5)) + 1396|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _start_packet($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($3)) + 1380|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(-1);
  $7 = HEAP32[$2>>2]|0;
  if (!($6)) {
   label = 7;
   break;
  }
  $8 = (_start_page($7)|0);
  $9 = ($8|0)!=(0);
  if (!($9)) {
   label = 4;
   break;
  }
  $10 = HEAP32[$2>>2]|0;
  $11 = ((($10)) + 1375|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 & 1;
  $15 = ($14|0)!=(0);
  if ($15) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$1>>2] = 0;
  $25 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 6) {
  $16 = HEAP32[$2>>2]|0;
  $17 = (_error($16,32)|0);
  HEAP32[$1>>2] = $17;
  $25 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 7) {
  $18 = ((($7)) + 1384|0);
  HEAP32[$18>>2] = 0;
  $19 = HEAP32[$2>>2]|0;
  $20 = ((($19)) + 1396|0);
  HEAP32[$20>>2] = 0;
  $21 = HEAP32[$2>>2]|0;
  $22 = ((($21)) + 1400|0);
  HEAP32[$22>>2] = 0;
  $23 = HEAP32[$2>>2]|0;
  $24 = ((($23)) + 1376|0);
  HEAP8[$24>>0] = 0;
  HEAP32[$1>>2] = 1;
  $25 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _compute_stereo_samples($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $5 = sp + 176|0;
 $6 = sp + 172|0;
 $7 = sp + 168|0;
 $8 = sp + 164|0;
 $9 = sp + 160|0;
 $10 = sp + 32|0;
 $11 = sp + 28|0;
 $12 = sp + 24|0;
 $13 = sp + 20|0;
 $14 = sp + 16|0;
 $15 = sp + 12|0;
 $16 = sp + 8|0;
 $17 = sp + 4|0;
 $18 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 HEAP32[$14>>2] = 16;
 HEAP32[$13>>2] = 0;
 while(1) {
  $19 = HEAP32[$13>>2]|0;
  $20 = HEAP32[$9>>2]|0;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = HEAP32[$13>>2]|0;
  $23 = $22 << 1;
  HEAP32[$15>>2] = $23;
  dest=$10; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $24 = HEAP32[$13>>2]|0;
  $25 = HEAP32[$14>>2]|0;
  $26 = (($24) + ($25))|0;
  $27 = HEAP32[$9>>2]|0;
  $28 = ($26|0)>($27|0);
  if ($28) {
   $29 = HEAP32[$9>>2]|0;
   $30 = HEAP32[$13>>2]|0;
   $31 = (($29) - ($30))|0;
   HEAP32[$14>>2] = $31;
  }
  HEAP32[$12>>2] = 0;
  while(1) {
   $32 = HEAP32[$12>>2]|0;
   $33 = HEAP32[$6>>2]|0;
   $34 = ($32|0)<($33|0);
   if (!($34)) {
    break;
   }
   $35 = HEAP32[$6>>2]|0;
   $36 = (15118 + (($35*6)|0)|0);
   $37 = HEAP32[$12>>2]|0;
   $38 = (($36) + ($37)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39 << 24 >> 24;
   $41 = $40 & 6;
   HEAP32[$16>>2] = $41;
   $42 = HEAP32[$16>>2]|0;
   $43 = ($42|0)==(6);
   L10: do {
    if ($43) {
     HEAP32[$11>>2] = 0;
     while(1) {
      $44 = HEAP32[$11>>2]|0;
      $45 = HEAP32[$14>>2]|0;
      $46 = ($44|0)<($45|0);
      if (!($46)) {
       break L10;
      }
      $47 = HEAP32[$7>>2]|0;
      $48 = HEAP32[$12>>2]|0;
      $49 = (($47) + ($48<<2)|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = HEAP32[$8>>2]|0;
      $52 = HEAP32[$13>>2]|0;
      $53 = (($51) + ($52))|0;
      $54 = HEAP32[$11>>2]|0;
      $55 = (($53) + ($54))|0;
      $56 = (($50) + ($55<<2)|0);
      $57 = +HEAPF32[$56>>2];
      $58 = HEAP32[$11>>2]|0;
      $59 = $58<<1;
      $60 = (($59) + 0)|0;
      $61 = (($10) + ($60<<2)|0);
      $62 = +HEAPF32[$61>>2];
      $63 = $62 + $57;
      HEAPF32[$61>>2] = $63;
      $64 = HEAP32[$7>>2]|0;
      $65 = HEAP32[$12>>2]|0;
      $66 = (($64) + ($65<<2)|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = HEAP32[$8>>2]|0;
      $69 = HEAP32[$13>>2]|0;
      $70 = (($68) + ($69))|0;
      $71 = HEAP32[$11>>2]|0;
      $72 = (($70) + ($71))|0;
      $73 = (($67) + ($72<<2)|0);
      $74 = +HEAPF32[$73>>2];
      $75 = HEAP32[$11>>2]|0;
      $76 = $75<<1;
      $77 = (($76) + 1)|0;
      $78 = (($10) + ($77<<2)|0);
      $79 = +HEAPF32[$78>>2];
      $80 = $79 + $74;
      HEAPF32[$78>>2] = $80;
      $81 = HEAP32[$11>>2]|0;
      $82 = (($81) + 1)|0;
      HEAP32[$11>>2] = $82;
     }
    } else {
     $83 = HEAP32[$16>>2]|0;
     $84 = ($83|0)==(2);
     if ($84) {
      HEAP32[$11>>2] = 0;
      while(1) {
       $85 = HEAP32[$11>>2]|0;
       $86 = HEAP32[$14>>2]|0;
       $87 = ($85|0)<($86|0);
       if (!($87)) {
        break L10;
       }
       $88 = HEAP32[$7>>2]|0;
       $89 = HEAP32[$12>>2]|0;
       $90 = (($88) + ($89<<2)|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = HEAP32[$8>>2]|0;
       $93 = HEAP32[$13>>2]|0;
       $94 = (($92) + ($93))|0;
       $95 = HEAP32[$11>>2]|0;
       $96 = (($94) + ($95))|0;
       $97 = (($91) + ($96<<2)|0);
       $98 = +HEAPF32[$97>>2];
       $99 = HEAP32[$11>>2]|0;
       $100 = $99<<1;
       $101 = (($100) + 0)|0;
       $102 = (($10) + ($101<<2)|0);
       $103 = +HEAPF32[$102>>2];
       $104 = $103 + $98;
       HEAPF32[$102>>2] = $104;
       $105 = HEAP32[$11>>2]|0;
       $106 = (($105) + 1)|0;
       HEAP32[$11>>2] = $106;
      }
     }
     $107 = HEAP32[$16>>2]|0;
     $108 = ($107|0)==(4);
     if ($108) {
      HEAP32[$11>>2] = 0;
      while(1) {
       $109 = HEAP32[$11>>2]|0;
       $110 = HEAP32[$14>>2]|0;
       $111 = ($109|0)<($110|0);
       if (!($111)) {
        break L10;
       }
       $112 = HEAP32[$7>>2]|0;
       $113 = HEAP32[$12>>2]|0;
       $114 = (($112) + ($113<<2)|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = HEAP32[$8>>2]|0;
       $117 = HEAP32[$13>>2]|0;
       $118 = (($116) + ($117))|0;
       $119 = HEAP32[$11>>2]|0;
       $120 = (($118) + ($119))|0;
       $121 = (($115) + ($120<<2)|0);
       $122 = +HEAPF32[$121>>2];
       $123 = HEAP32[$11>>2]|0;
       $124 = $123<<1;
       $125 = (($124) + 1)|0;
       $126 = (($10) + ($125<<2)|0);
       $127 = +HEAPF32[$126>>2];
       $128 = $127 + $122;
       HEAPF32[$126>>2] = $128;
       $129 = HEAP32[$11>>2]|0;
       $130 = (($129) + 1)|0;
       HEAP32[$11>>2] = $130;
      }
     }
    }
   } while(0);
   $131 = HEAP32[$12>>2]|0;
   $132 = (($131) + 1)|0;
   HEAP32[$12>>2] = $132;
  }
  HEAP32[$11>>2] = 0;
  while(1) {
   $133 = HEAP32[$11>>2]|0;
   $134 = HEAP32[$14>>2]|0;
   $135 = $134 << 1;
   $136 = ($133|0)<($135|0);
   if (!($136)) {
    break;
   }
   $137 = HEAP32[$11>>2]|0;
   $138 = (($10) + ($137<<2)|0);
   $139 = +HEAPF32[$138>>2];
   $140 = $139 + 384.0;
   HEAPF32[$17>>2] = $140;
   $141 = HEAP32[$17>>2]|0;
   $142 = (($141) - 1136656384)|0;
   HEAP32[$18>>2] = $142;
   $143 = HEAP32[$18>>2]|0;
   $144 = (($143) + 32768)|0;
   $145 = ($144>>>0)>(65535);
   if ($145) {
    $146 = HEAP32[$18>>2]|0;
    $147 = ($146|0)<(0);
    $148 = $147 ? -32768 : 32767;
    HEAP32[$18>>2] = $148;
   }
   $149 = HEAP32[$18>>2]|0;
   $150 = $149&65535;
   $151 = HEAP32[$5>>2]|0;
   $152 = HEAP32[$15>>2]|0;
   $153 = HEAP32[$11>>2]|0;
   $154 = (($152) + ($153))|0;
   $155 = (($151) + ($154<<1)|0);
   HEAP16[$155>>1] = $150;
   $156 = HEAP32[$11>>2]|0;
   $157 = (($156) + 1)|0;
   HEAP32[$11>>2] = $157;
  }
  $158 = HEAP32[$13>>2]|0;
  $159 = (($158) + 16)|0;
  HEAP32[$13>>2] = $159;
 }
 STACKTOP = sp;return;
}
function _stb_vorbis_get_file_offset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 48|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)!=(0);
 if ($6) {
  HEAP32[$1>>2] = 0;
  $27 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($27|0);
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 $11 = HEAP32[$2>>2]|0;
 if ($10) {
  $12 = ((($11)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$2>>2]|0;
  $15 = ((($14)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $13;
  $18 = $16;
  $19 = (($17) - ($18))|0;
  HEAP32[$1>>2] = $19;
  $27 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($27|0);
 } else {
  $20 = ((($11)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_ftell($21)|0);
  $23 = HEAP32[$2>>2]|0;
  $24 = ((($23)) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($22) - ($25))|0;
  HEAP32[$1>>2] = $26;
  $27 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _set_file_offset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 48|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)!=(0);
 if ($8) {
  HEAP32[$2>>2] = 0;
  $77 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($77|0);
 }
 $9 = HEAP32[$3>>2]|0;
 $10 = ((($9)) + 96|0);
 HEAP32[$10>>2] = 0;
 $11 = HEAP32[$3>>2]|0;
 $12 = ((($11)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = HEAP32[$3>>2]|0;
  $16 = ((($15)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$4>>2]|0;
  $19 = (($17) + ($18)|0);
  $20 = HEAP32[$3>>2]|0;
  $21 = ((($20)) + 40|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19>>>0)>=($22>>>0);
  if (!($23)) {
   $24 = HEAP32[$3>>2]|0;
   $25 = ((($24)) + 36|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$4>>2]|0;
   $28 = (($26) + ($27)|0);
   $29 = HEAP32[$3>>2]|0;
   $30 = ((($29)) + 36|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($28>>>0)<($31>>>0);
   if (!($32)) {
    $40 = HEAP32[$3>>2]|0;
    $41 = ((($40)) + 36|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[$4>>2]|0;
    $44 = (($42) + ($43)|0);
    $45 = HEAP32[$3>>2]|0;
    $46 = ((($45)) + 32|0);
    HEAP32[$46>>2] = $44;
    HEAP32[$2>>2] = 1;
    $77 = HEAP32[$2>>2]|0;
    STACKTOP = sp;return ($77|0);
   }
  }
  $33 = HEAP32[$3>>2]|0;
  $34 = ((($33)) + 40|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$3>>2]|0;
  $37 = ((($36)) + 32|0);
  HEAP32[$37>>2] = $35;
  $38 = HEAP32[$3>>2]|0;
  $39 = ((($38)) + 96|0);
  HEAP32[$39>>2] = 1;
  HEAP32[$2>>2] = 0;
  $77 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($77|0);
 }
 $47 = HEAP32[$4>>2]|0;
 $48 = HEAP32[$3>>2]|0;
 $49 = ((($48)) + 24|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($47) + ($50))|0;
 $52 = HEAP32[$4>>2]|0;
 $53 = ($51>>>0)<($52>>>0);
 $54 = HEAP32[$4>>2]|0;
 $55 = ($54>>>0)>=(2147483648);
 $or$cond = $53 | $55;
 if ($or$cond) {
  HEAP32[$4>>2] = 2147483647;
  $56 = HEAP32[$3>>2]|0;
  $57 = ((($56)) + 96|0);
  HEAP32[$57>>2] = 1;
 } else {
  $58 = HEAP32[$3>>2]|0;
  $59 = ((($58)) + 24|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = HEAP32[$4>>2]|0;
  $62 = (($61) + ($60))|0;
  HEAP32[$4>>2] = $62;
 }
 $63 = HEAP32[$3>>2]|0;
 $64 = ((($63)) + 20|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$4>>2]|0;
 $67 = (_fseek($65,$66,0)|0);
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = HEAP32[$3>>2]|0;
  $70 = ((($69)) + 96|0);
  HEAP32[$70>>2] = 1;
  $71 = HEAP32[$3>>2]|0;
  $72 = ((($71)) + 20|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = HEAP32[$3>>2]|0;
  $75 = ((($74)) + 24|0);
  $76 = HEAP32[$75>>2]|0;
  (_fseek($73,$76,2)|0);
  HEAP32[$2>>2] = 0;
  $77 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($77|0);
 } else {
  HEAP32[$2>>2] = 1;
  $77 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($77|0);
 }
 return (0)|0;
}
function _vorbis_find_page($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 44|0;
 $4 = sp + 40|0;
 $5 = sp + 36|0;
 $6 = sp + 32|0;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 20|0;
 $10 = sp + 48|0;
 $11 = sp + 16|0;
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $15 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 while(1) {
  $16 = HEAP32[$4>>2]|0;
  $17 = ((($16)) + 96|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0);
  if ($19) {
   label = 3;
   break;
  }
  $20 = HEAP32[$4>>2]|0;
  $21 = (_get8($20)|0);
  $22 = $21&255;
  HEAP32[$7>>2] = $22;
  $23 = HEAP32[$7>>2]|0;
  $24 = ($23|0)==(79);
  if (!($24)) {
   continue;
  }
  $25 = HEAP32[$4>>2]|0;
  $26 = (_stb_vorbis_get_file_offset($25)|0);
  HEAP32[$8>>2] = $26;
  $27 = HEAP32[$8>>2]|0;
  $28 = (($27) - 25)|0;
  $29 = HEAP32[$4>>2]|0;
  $30 = ((($29)) + 44|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($28>>>0)>($31>>>0);
  if ($32) {
   label = 6;
   break;
  }
  HEAP32[$9>>2] = 1;
  while(1) {
   $33 = HEAP32[$9>>2]|0;
   $34 = ($33|0)<(4);
   if (!($34)) {
    break;
   }
   $35 = HEAP32[$4>>2]|0;
   $36 = (_get8($35)|0);
   $37 = $36&255;
   $38 = HEAP32[$9>>2]|0;
   $39 = (15160 + ($38)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = ($37|0)!=($41|0);
   if ($42) {
    break;
   }
   $43 = HEAP32[$9>>2]|0;
   $44 = (($43) + 1)|0;
   HEAP32[$9>>2] = $44;
  }
  $45 = HEAP32[$4>>2]|0;
  $46 = ((($45)) + 96|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0);
  if ($48) {
   label = 12;
   break;
  }
  $49 = HEAP32[$9>>2]|0;
  $50 = ($49|0)==(4);
  if ($50) {
   HEAP32[$11>>2] = 0;
   while(1) {
    $51 = HEAP32[$11>>2]|0;
    $52 = ($51>>>0)<(4);
    if (!($52)) {
     break;
    }
    $53 = HEAP32[$11>>2]|0;
    $54 = (15160 + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = HEAP32[$11>>2]|0;
    $57 = (($10) + ($56)|0);
    HEAP8[$57>>0] = $55;
    $58 = HEAP32[$11>>2]|0;
    $59 = (($58) + 1)|0;
    HEAP32[$11>>2] = $59;
   }
   while(1) {
    $60 = HEAP32[$11>>2]|0;
    $61 = ($60>>>0)<(27);
    $62 = HEAP32[$4>>2]|0;
    if (!($61)) {
     break;
    }
    $63 = (_get8($62)|0);
    $64 = HEAP32[$11>>2]|0;
    $65 = (($10) + ($64)|0);
    HEAP8[$65>>0] = $63;
    $66 = HEAP32[$11>>2]|0;
    $67 = (($66) + 1)|0;
    HEAP32[$11>>2] = $67;
   }
   $68 = ((($62)) + 96|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)!=(0);
   if ($70) {
    label = 20;
    break;
   }
   $71 = ((($10)) + 4|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = ($73|0)!=(0);
   if (!($74)) {
    $75 = ((($10)) + 22|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $78 = ((($10)) + 23|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = $80 << 8;
    $82 = (($77) + ($81))|0;
    $83 = ((($10)) + 24|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $86 = $85 << 16;
    $87 = (($82) + ($86))|0;
    $88 = ((($10)) + 25|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = $90 << 24;
    $92 = (($87) + ($91))|0;
    HEAP32[$13>>2] = $92;
    HEAP32[$11>>2] = 22;
    while(1) {
     $93 = HEAP32[$11>>2]|0;
     $94 = ($93>>>0)<(26);
     if (!($94)) {
      break;
     }
     $95 = HEAP32[$11>>2]|0;
     $96 = (($10) + ($95)|0);
     HEAP8[$96>>0] = 0;
     $97 = HEAP32[$11>>2]|0;
     $98 = (($97) + 1)|0;
     HEAP32[$11>>2] = $98;
    }
    HEAP32[$12>>2] = 0;
    HEAP32[$11>>2] = 0;
    while(1) {
     $99 = HEAP32[$11>>2]|0;
     $100 = ($99>>>0)<(27);
     if (!($100)) {
      break;
     }
     $101 = HEAP32[$12>>2]|0;
     $102 = HEAP32[$11>>2]|0;
     $103 = (($10) + ($102)|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = (_crc32_update($101,$104)|0);
     HEAP32[$12>>2] = $105;
     $106 = HEAP32[$11>>2]|0;
     $107 = (($106) + 1)|0;
     HEAP32[$11>>2] = $107;
    }
    HEAP32[$14>>2] = 0;
    HEAP32[$11>>2] = 0;
    while(1) {
     $108 = HEAP32[$11>>2]|0;
     $109 = ((($10)) + 26|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = $110&255;
     $112 = ($108>>>0)<($111>>>0);
     if (!($112)) {
      break;
     }
     $113 = HEAP32[$4>>2]|0;
     $114 = (_get8($113)|0);
     $115 = $114&255;
     HEAP32[$15>>2] = $115;
     $116 = HEAP32[$12>>2]|0;
     $117 = HEAP32[$15>>2]|0;
     $118 = $117&255;
     $119 = (_crc32_update($116,$118)|0);
     HEAP32[$12>>2] = $119;
     $120 = HEAP32[$15>>2]|0;
     $121 = HEAP32[$14>>2]|0;
     $122 = (($121) + ($120))|0;
     HEAP32[$14>>2] = $122;
     $123 = HEAP32[$11>>2]|0;
     $124 = (($123) + 1)|0;
     HEAP32[$11>>2] = $124;
    }
    $125 = HEAP32[$14>>2]|0;
    $126 = ($125|0)!=(0);
    if ($126) {
     $127 = HEAP32[$4>>2]|0;
     $128 = ((($127)) + 96|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($129|0)!=(0);
     if ($130) {
      label = 33;
      break;
     }
    }
    HEAP32[$11>>2] = 0;
    while(1) {
     $131 = HEAP32[$11>>2]|0;
     $132 = HEAP32[$14>>2]|0;
     $133 = ($131>>>0)<($132>>>0);
     $134 = HEAP32[$12>>2]|0;
     if (!($133)) {
      break;
     }
     $135 = HEAP32[$4>>2]|0;
     $136 = (_get8($135)|0);
     $137 = (_crc32_update($134,$136)|0);
     HEAP32[$12>>2] = $137;
     $138 = HEAP32[$11>>2]|0;
     $139 = (($138) + 1)|0;
     HEAP32[$11>>2] = $139;
    }
    $140 = HEAP32[$13>>2]|0;
    $141 = ($134|0)==($140|0);
    if ($141) {
     label = 38;
     break;
    }
   }
  }
  $158 = HEAP32[$4>>2]|0;
  $159 = HEAP32[$8>>2]|0;
  (_set_file_offset($158,$159)|0);
 }
 if ((label|0) == 3) {
  HEAP32[$3>>2] = 0;
  $160 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 else if ((label|0) == 6) {
  HEAP32[$3>>2] = 0;
  $160 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 else if ((label|0) == 12) {
  HEAP32[$3>>2] = 0;
  $160 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 else if ((label|0) == 20) {
  HEAP32[$3>>2] = 0;
  $160 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 else if ((label|0) == 33) {
  HEAP32[$3>>2] = 0;
  $160 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 else if ((label|0) == 38) {
  $142 = HEAP32[$5>>2]|0;
  $143 = ($142|0)!=(0|0);
  if ($143) {
   $144 = HEAP32[$4>>2]|0;
   $145 = (_stb_vorbis_get_file_offset($144)|0);
   $146 = HEAP32[$5>>2]|0;
   HEAP32[$146>>2] = $145;
  }
  $147 = HEAP32[$6>>2]|0;
  $148 = ($147|0)!=(0|0);
  if ($148) {
   $149 = ((($10)) + 5|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = $151 & 4;
   $153 = ($152|0)!=(0);
   $154 = HEAP32[$6>>2]|0;
   $$sink = $153 ? 1 : 0;
   HEAP32[$154>>2] = $$sink;
  }
  $155 = HEAP32[$4>>2]|0;
  $156 = HEAP32[$8>>2]|0;
  $157 = (($156) - 1)|0;
  (_set_file_offset($155,$157)|0);
  HEAP32[$3>>2] = 1;
  $160 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 return (0)|0;
}
function _crc32_update($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 HEAP32[$2>>2] = $0;
 HEAP8[$3>>0] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = $4 << 8;
 $6 = HEAP8[$3>>0]|0;
 $7 = $6&255;
 $8 = HEAP32[$2>>2]|0;
 $9 = $8 >>> 24;
 $10 = $7 ^ $9;
 $11 = (63148 + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $5 ^ $12;
 STACKTOP = sp;return ($13|0);
}
function _stb_vorbis_open_file($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $10 = HEAP32[$4>>2]|0;
 $11 = (_ftell($10)|0);
 HEAP32[$9>>2] = $11;
 $12 = HEAP32[$4>>2]|0;
 (_fseek($12,0,2)|0);
 $13 = HEAP32[$4>>2]|0;
 $14 = (_ftell($13)|0);
 $15 = HEAP32[$9>>2]|0;
 $16 = (($14) - ($15))|0;
 HEAP32[$8>>2] = $16;
 $17 = HEAP32[$4>>2]|0;
 $18 = HEAP32[$9>>2]|0;
 (_fseek($17,$18,0)|0);
 $19 = HEAP32[$4>>2]|0;
 $20 = HEAP32[$5>>2]|0;
 $21 = HEAP32[$6>>2]|0;
 $22 = HEAP32[$7>>2]|0;
 $23 = HEAP32[$8>>2]|0;
 $24 = (_stb_vorbis_open_file_section($19,$20,$21,$22,$23)|0);
 STACKTOP = sp;return ($24|0);
}
function _stb_vorbis_open_file_section($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1552|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1552|0);
 $5 = sp + 1536|0;
 $6 = sp + 1532|0;
 $7 = sp + 1528|0;
 $8 = sp + 1524|0;
 $9 = sp + 1520|0;
 $10 = sp + 1516|0;
 $11 = sp + 1512|0;
 $12 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 $13 = HEAP32[$9>>2]|0;
 _vorbis_init($12,$13);
 $14 = HEAP32[$6>>2]|0;
 $15 = ((($12)) + 20|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$6>>2]|0;
 $17 = (_ftell($16)|0);
 $18 = ((($12)) + 24|0);
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[$10>>2]|0;
 $20 = ((($12)) + 44|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$7>>2]|0;
 $22 = ((($12)) + 28|0);
 HEAP32[$22>>2] = $21;
 $23 = (_start_decoder($12)|0);
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = (_vorbis_alloc($12)|0);
  HEAP32[$11>>2] = $25;
  $26 = HEAP32[$11>>2]|0;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = HEAP32[$11>>2]|0;
   _memcpy(($28|0),($12|0),1512)|0;
   $29 = HEAP32[$11>>2]|0;
   (_vorbis_pump_first_frame($29)|0);
   $30 = HEAP32[$11>>2]|0;
   HEAP32[$5>>2] = $30;
   $36 = HEAP32[$5>>2]|0;
   STACKTOP = sp;return ($36|0);
  }
 }
 $31 = HEAP32[$8>>2]|0;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = ((($12)) + 100|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$8>>2]|0;
  HEAP32[$35>>2] = $34;
 }
 _vorbis_deinit($12);
 HEAP32[$5>>2] = 0;
 $36 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($36|0);
}
function _vorbis_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 _memset(($4|0),0,1512)|0;
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$2>>2]|0;
  $8 = ((($7)) + 80|0);
  $9 = HEAP32[$3>>2]|0;
  ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;
  $10 = HEAP32[$2>>2]|0;
  $11 = ((($10)) + 80|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 3)|0;
  $15 = $14 & -4;
  $16 = HEAP32[$2>>2]|0;
  $17 = ((($16)) + 80|0);
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $15;
  $19 = HEAP32[$2>>2]|0;
  $20 = ((($19)) + 80|0);
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$2>>2]|0;
  $24 = ((($23)) + 92|0);
  HEAP32[$24>>2] = $22;
 }
 $25 = HEAP32[$2>>2]|0;
 $26 = ((($25)) + 96|0);
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$2>>2]|0;
 $28 = ((($27)) + 100|0);
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$2>>2]|0;
 $30 = ((($29)) + 32|0);
 HEAP32[$30>>2] = 0;
 $31 = HEAP32[$2>>2]|0;
 $32 = ((($31)) + 124|0);
 HEAP32[$32>>2] = 0;
 $33 = HEAP32[$2>>2]|0;
 $34 = ((($33)) + 1420|0);
 HEAP32[$34>>2] = -1;
 $35 = HEAP32[$2>>2]|0;
 $36 = ((($35)) + 28|0);
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$2>>2]|0;
 $38 = ((($37)) + 20|0);
 HEAP32[$38>>2] = 0;
 STACKTOP = sp;return;
}
function _start_decoder($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink10 = 0, $$sink12 = 0, $$sink5 = 0, $$sink6 = 0, $$sink8 = 0, $$sink9 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0;
 var $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0;
 var $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0;
 var $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0;
 var $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0;
 var $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0;
 var $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0;
 var $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0;
 var $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0;
 var $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0;
 var $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0;
 var $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0;
 var $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0;
 var $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0;
 var $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0;
 var $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0;
 var $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0;
 var $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0;
 var $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0;
 var $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0;
 var $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0;
 var $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0;
 var $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0;
 var $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0;
 var $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0;
 var $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0;
 var $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0;
 var $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0;
 var $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0;
 var $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0;
 var $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0;
 var $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0;
 var $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0;
 var $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0;
 var $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0;
 var $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0;
 var $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0;
 var $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0;
 var $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0;
 var $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0;
 var $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0;
 var $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0;
 var $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0;
 var $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0;
 var $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0;
 var $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0;
 var $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0;
 var $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0;
 var $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0;
 var $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0;
 var $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0;
 var $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0;
 var $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0;
 var $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0;
 var $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0;
 var $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0;
 var $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0.0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0.0, $844 = 0, $845 = 0, $846 = 0.0, $847 = 0.0, $848 = 0, $849 = 0, $85 = 0, $850 = 0.0, $851 = 0.0, $852 = 0.0, $853 = 0.0, $854 = 0.0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0.0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0.0, $931 = 0;
 var $932 = 0, $933 = 0.0, $934 = 0.0, $935 = 0, $936 = 0, $937 = 0.0, $938 = 0.0, $939 = 0.0, $94 = 0, $940 = 0.0, $941 = 0.0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0.0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1296|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1296|0);
 $1 = sp + 208|0;
 $2 = sp + 204|0;
 $3 = sp + 1290|0;
 $4 = sp + 1289|0;
 $5 = sp + 1288|0;
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 192|0;
 $9 = sp + 188|0;
 $10 = sp + 184|0;
 $11 = sp + 180|0;
 $12 = sp + 176|0;
 $13 = sp + 172|0;
 $14 = sp + 168|0;
 $15 = sp + 164|0;
 $16 = sp + 160|0;
 $17 = sp + 156|0;
 $18 = sp + 152|0;
 $19 = sp + 148|0;
 $20 = sp + 144|0;
 $21 = sp + 140|0;
 $22 = sp + 136|0;
 $23 = sp + 132|0;
 $24 = sp + 128|0;
 $25 = sp + 124|0;
 $26 = sp + 120|0;
 $27 = sp + 116|0;
 $28 = sp + 112|0;
 $29 = sp + 108|0;
 $30 = sp + 104|0;
 $31 = sp + 100|0;
 $32 = sp + 96|0;
 $33 = sp + 92|0;
 $34 = sp + 88|0;
 $35 = sp + 84|0;
 $36 = sp + 80|0;
 $37 = sp + 76|0;
 $38 = sp + 72|0;
 $39 = sp + 216|0;
 $40 = sp + 68|0;
 $41 = sp + 64|0;
 $42 = sp + 60|0;
 $43 = sp + 56|0;
 $44 = sp + 52|0;
 $45 = sp + 1224|0;
 $46 = sp + 48|0;
 $47 = sp + 1217|0;
 $48 = sp + 1216|0;
 $49 = sp + 44|0;
 $50 = sp + 40|0;
 $51 = sp + 36|0;
 $52 = sp + 32|0;
 $53 = sp + 28|0;
 $54 = sp + 24|0;
 $55 = sp + 20|0;
 $56 = sp + 16|0;
 $57 = sp + 12|0;
 $58 = sp + 8|0;
 $59 = sp + 4|0;
 $60 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$10>>2] = 0;
 HEAP32[$11>>2] = 0;
 $61 = HEAP32[$2>>2]|0;
 $62 = (_start_page($61)|0);
 $63 = ($62|0)!=(0);
 if (!($63)) {
  HEAP32[$1>>2] = 0;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $64 = HEAP32[$2>>2]|0;
 $65 = ((($64)) + 1375|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = $67 & 2;
 $69 = ($68|0)!=(0);
 $70 = HEAP32[$2>>2]|0;
 if (!($69)) {
  $71 = (_error($70,34)|0);
  HEAP32[$1>>2] = $71;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $72 = ((($70)) + 1375|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = $74 & 4;
 $76 = ($75|0)!=(0);
 $77 = HEAP32[$2>>2]|0;
 if ($76) {
  $78 = (_error($77,34)|0);
  HEAP32[$1>>2] = $78;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $79 = ((($77)) + 1375|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = $81 & 1;
 $83 = ($82|0)!=(0);
 $84 = HEAP32[$2>>2]|0;
 if ($83) {
  $85 = (_error($84,34)|0);
  HEAP32[$1>>2] = $85;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $86 = ((($84)) + 1116|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)!=(1);
 $89 = HEAP32[$2>>2]|0;
 if ($88) {
  $90 = (_error($89,34)|0);
  HEAP32[$1>>2] = $90;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $91 = ((($89)) + 1120|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92&255;
 $94 = ($93|0)!=(30);
 $95 = HEAP32[$2>>2]|0;
 if ($94) {
  $96 = (_error($95,34)|0);
  HEAP32[$1>>2] = $96;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $97 = (_get8($95)|0);
 $98 = $97&255;
 $99 = ($98|0)!=(1);
 $100 = HEAP32[$2>>2]|0;
 if ($99) {
  $101 = (_error($100,34)|0);
  HEAP32[$1>>2] = $101;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $102 = (_getn($100,$3,6)|0);
 $103 = ($102|0)!=(0);
 if (!($103)) {
  $104 = HEAP32[$2>>2]|0;
  $105 = (_error($104,10)|0);
  HEAP32[$1>>2] = $105;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $106 = (_vorbis_validate($3)|0);
 $107 = ($106|0)!=(0);
 $108 = HEAP32[$2>>2]|0;
 if (!($107)) {
  $109 = (_error($108,34)|0);
  HEAP32[$1>>2] = $109;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $110 = (_get32($108)|0);
 $111 = ($110|0)!=(0);
 $112 = HEAP32[$2>>2]|0;
 if ($111) {
  $113 = (_error($112,34)|0);
  HEAP32[$1>>2] = $113;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $114 = (_get8($112)|0);
 $115 = $114&255;
 $116 = HEAP32[$2>>2]|0;
 $117 = ((($116)) + 4|0);
 HEAP32[$117>>2] = $115;
 $118 = HEAP32[$2>>2]|0;
 $119 = ((($118)) + 4|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)!=(0);
 $122 = HEAP32[$2>>2]|0;
 if (!($121)) {
  $123 = (_error($122,34)|0);
  HEAP32[$1>>2] = $123;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $124 = ((($122)) + 4|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($125|0)>(16);
 $127 = HEAP32[$2>>2]|0;
 if ($126) {
  $128 = (_error($127,5)|0);
  HEAP32[$1>>2] = $128;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $129 = (_get32($127)|0);
 $130 = HEAP32[$2>>2]|0;
 HEAP32[$130>>2] = $129;
 $131 = HEAP32[$2>>2]|0;
 $132 = HEAP32[$131>>2]|0;
 $133 = ($132|0)!=(0);
 $134 = HEAP32[$2>>2]|0;
 if (!($133)) {
  $135 = (_error($134,34)|0);
  HEAP32[$1>>2] = $135;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 (_get32($134)|0);
 $136 = HEAP32[$2>>2]|0;
 (_get32($136)|0);
 $137 = HEAP32[$2>>2]|0;
 (_get32($137)|0);
 $138 = HEAP32[$2>>2]|0;
 $139 = (_get8($138)|0);
 HEAP8[$4>>0] = $139;
 $140 = HEAP8[$4>>0]|0;
 $141 = $140&255;
 $142 = $141 & 15;
 HEAP32[$12>>2] = $142;
 $143 = HEAP8[$4>>0]|0;
 $144 = $143&255;
 $145 = $144 >> 4;
 HEAP32[$13>>2] = $145;
 $146 = HEAP32[$12>>2]|0;
 $147 = 1 << $146;
 $148 = HEAP32[$2>>2]|0;
 $149 = ((($148)) + 112|0);
 HEAP32[$149>>2] = $147;
 $150 = HEAP32[$13>>2]|0;
 $151 = 1 << $150;
 $152 = HEAP32[$2>>2]|0;
 $153 = ((($152)) + 116|0);
 HEAP32[$153>>2] = $151;
 $154 = HEAP32[$12>>2]|0;
 $155 = ($154|0)<(6);
 $156 = HEAP32[$12>>2]|0;
 $157 = ($156|0)>(13);
 $or$cond = $155 | $157;
 if ($or$cond) {
  $158 = HEAP32[$2>>2]|0;
  $159 = (_error($158,20)|0);
  HEAP32[$1>>2] = $159;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $160 = HEAP32[$13>>2]|0;
 $161 = ($160|0)<(6);
 $162 = HEAP32[$13>>2]|0;
 $163 = ($162|0)>(13);
 $or$cond3 = $161 | $163;
 if ($or$cond3) {
  $164 = HEAP32[$2>>2]|0;
  $165 = (_error($164,20)|0);
  HEAP32[$1>>2] = $165;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $166 = HEAP32[$12>>2]|0;
 $167 = HEAP32[$13>>2]|0;
 $168 = ($166|0)>($167|0);
 $169 = HEAP32[$2>>2]|0;
 if ($168) {
  $170 = (_error($169,20)|0);
  HEAP32[$1>>2] = $170;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $171 = (_get8($169)|0);
 HEAP8[$4>>0] = $171;
 $172 = HEAP8[$4>>0]|0;
 $173 = $172&255;
 $174 = $173 & 1;
 $175 = ($174|0)!=(0);
 $176 = HEAP32[$2>>2]|0;
 if (!($175)) {
  $177 = (_error($176,34)|0);
  HEAP32[$1>>2] = $177;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $178 = (_start_page($176)|0);
 $179 = ($178|0)!=(0);
 if (!($179)) {
  HEAP32[$1>>2] = 0;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $180 = HEAP32[$2>>2]|0;
 $181 = (_start_packet($180)|0);
 $182 = ($181|0)!=(0);
 if (!($182)) {
  HEAP32[$1>>2] = 0;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 while(1) {
  $183 = HEAP32[$2>>2]|0;
  $184 = (_next_segment($183)|0);
  HEAP32[$6>>2] = $184;
  $185 = HEAP32[$2>>2]|0;
  $186 = HEAP32[$6>>2]|0;
  _skip($185,$186);
  $187 = HEAP32[$2>>2]|0;
  $188 = ((($187)) + 1376|0);
  HEAP8[$188>>0] = 0;
  $189 = HEAP32[$6>>2]|0;
  $190 = ($189|0)!=(0);
  if (!($190)) {
   break;
  }
 }
 $191 = HEAP32[$2>>2]|0;
 $192 = (_start_packet($191)|0);
 $193 = ($192|0)!=(0);
 if (!($193)) {
  HEAP32[$1>>2] = 0;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $194 = HEAP32[$2>>2]|0;
 $195 = ((($194)) + 48|0);
 $196 = HEAP8[$195>>0]|0;
 $197 = ($196<<24>>24)!=(0);
 do {
  if ($197) {
   $198 = HEAP32[$2>>2]|0;
   $199 = (_is_whole_packet_present($198,1)|0);
   $200 = ($199|0)!=(0);
   if ($200) {
    break;
   }
   $201 = HEAP32[$2>>2]|0;
   $202 = ((($201)) + 100|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = ($203|0)==(21);
   if ($204) {
    $205 = HEAP32[$2>>2]|0;
    $206 = ((($205)) + 100|0);
    HEAP32[$206>>2] = 20;
   }
   HEAP32[$1>>2] = 0;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
  }
 } while(0);
 _crc32_init();
 $207 = HEAP32[$2>>2]|0;
 $208 = (_get8_packet($207)|0);
 $209 = ($208|0)!=(5);
 if ($209) {
  $210 = HEAP32[$2>>2]|0;
  $211 = (_error($210,20)|0);
  HEAP32[$1>>2] = $211;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 HEAP32[$7>>2] = 0;
 while(1) {
  $212 = HEAP32[$7>>2]|0;
  $213 = ($212|0)<(6);
  if (!($213)) {
   break;
  }
  $214 = HEAP32[$2>>2]|0;
  $215 = (_get8_packet($214)|0);
  $216 = $215&255;
  $217 = HEAP32[$7>>2]|0;
  $218 = (($3) + ($217)|0);
  HEAP8[$218>>0] = $216;
  $219 = HEAP32[$7>>2]|0;
  $220 = (($219) + 1)|0;
  HEAP32[$7>>2] = $220;
 }
 $221 = (_vorbis_validate($3)|0);
 $222 = ($221|0)!=(0);
 $223 = HEAP32[$2>>2]|0;
 if (!($222)) {
  $224 = (_error($223,20)|0);
  HEAP32[$1>>2] = $224;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $225 = (_get_bits($223,8)|0);
 $226 = (($225) + 1)|0;
 $227 = HEAP32[$2>>2]|0;
 $228 = ((($227)) + 120|0);
 HEAP32[$228>>2] = $226;
 $229 = HEAP32[$2>>2]|0;
 $230 = HEAP32[$2>>2]|0;
 $231 = ((($230)) + 120|0);
 $232 = HEAP32[$231>>2]|0;
 $233 = ($232*2096)|0;
 $234 = (_setup_malloc($229,$233)|0);
 $235 = HEAP32[$2>>2]|0;
 $236 = ((($235)) + 124|0);
 HEAP32[$236>>2] = $234;
 $237 = HEAP32[$2>>2]|0;
 $238 = ((($237)) + 124|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = ($239|0)==(0|0);
 $241 = HEAP32[$2>>2]|0;
 if ($240) {
  $242 = (_error($241,3)|0);
  HEAP32[$1>>2] = $242;
  $2087 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($2087|0);
 }
 $243 = ((($241)) + 124|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = HEAP32[$2>>2]|0;
 $246 = ((($245)) + 120|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = ($247*2096)|0;
 _memset(($244|0),0,($248|0))|0;
 HEAP32[$7>>2] = 0;
 L107: while(1) {
  $249 = HEAP32[$7>>2]|0;
  $250 = HEAP32[$2>>2]|0;
  $251 = ((($250)) + 120|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = ($249|0)<($252|0);
  if (!($253)) {
   label = 175;
   break;
  }
  HEAP32[$17>>2] = 0;
  $254 = HEAP32[$2>>2]|0;
  $255 = ((($254)) + 124|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = HEAP32[$7>>2]|0;
  $258 = (($256) + (($257*2096)|0)|0);
  HEAP32[$19>>2] = $258;
  $259 = HEAP32[$2>>2]|0;
  $260 = (_get_bits($259,8)|0);
  $261 = $260&255;
  HEAP8[$4>>0] = $261;
  $262 = HEAP8[$4>>0]|0;
  $263 = $262&255;
  $264 = ($263|0)!=(66);
  $265 = HEAP32[$2>>2]|0;
  if ($264) {
   label = 59;
   break;
  }
  $267 = (_get_bits($265,8)|0);
  $268 = $267&255;
  HEAP8[$4>>0] = $268;
  $269 = HEAP8[$4>>0]|0;
  $270 = $269&255;
  $271 = ($270|0)!=(67);
  $272 = HEAP32[$2>>2]|0;
  if ($271) {
   label = 61;
   break;
  }
  $274 = (_get_bits($272,8)|0);
  $275 = $274&255;
  HEAP8[$4>>0] = $275;
  $276 = HEAP8[$4>>0]|0;
  $277 = $276&255;
  $278 = ($277|0)!=(86);
  $279 = HEAP32[$2>>2]|0;
  if ($278) {
   label = 63;
   break;
  }
  $281 = (_get_bits($279,8)|0);
  $282 = $281&255;
  HEAP8[$4>>0] = $282;
  $283 = HEAP32[$2>>2]|0;
  $284 = (_get_bits($283,8)|0);
  $285 = $284 << 8;
  $286 = HEAP8[$4>>0]|0;
  $287 = $286&255;
  $288 = (($285) + ($287))|0;
  $289 = HEAP32[$19>>2]|0;
  HEAP32[$289>>2] = $288;
  $290 = HEAP32[$2>>2]|0;
  $291 = (_get_bits($290,8)|0);
  $292 = $291&255;
  HEAP8[$4>>0] = $292;
  $293 = HEAP32[$2>>2]|0;
  $294 = (_get_bits($293,8)|0);
  $295 = $294&255;
  HEAP8[$5>>0] = $295;
  $296 = HEAP32[$2>>2]|0;
  $297 = (_get_bits($296,8)|0);
  $298 = $297 << 16;
  $299 = HEAP8[$5>>0]|0;
  $300 = $299&255;
  $301 = $300 << 8;
  $302 = (($298) + ($301))|0;
  $303 = HEAP8[$4>>0]|0;
  $304 = $303&255;
  $305 = (($302) + ($304))|0;
  $306 = HEAP32[$19>>2]|0;
  $307 = ((($306)) + 4|0);
  HEAP32[$307>>2] = $305;
  $308 = HEAP32[$2>>2]|0;
  $309 = (_get_bits($308,1)|0);
  HEAP32[$15>>2] = $309;
  $310 = HEAP32[$15>>2]|0;
  $311 = ($310|0)!=(0);
  if ($311) {
   $315 = 0;
  } else {
   $312 = HEAP32[$2>>2]|0;
   $313 = (_get_bits($312,1)|0);
   $315 = $313;
  }
  $314 = $315&255;
  $316 = HEAP32[$19>>2]|0;
  $317 = ((($316)) + 23|0);
  HEAP8[$317>>0] = $314;
  $318 = HEAP32[$19>>2]|0;
  $319 = HEAP32[$318>>2]|0;
  $320 = ($319|0)==(0);
  if ($320) {
   $321 = HEAP32[$19>>2]|0;
   $322 = ((($321)) + 4|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = ($323|0)!=(0);
   if ($324) {
    label = 68;
    break;
   }
  }
  $327 = HEAP32[$19>>2]|0;
  $328 = ((($327)) + 23|0);
  $329 = HEAP8[$328>>0]|0;
  $330 = ($329<<24>>24)!=(0);
  $331 = HEAP32[$2>>2]|0;
  $332 = HEAP32[$19>>2]|0;
  $333 = ((($332)) + 4|0);
  $334 = HEAP32[$333>>2]|0;
  if ($330) {
   $335 = (_setup_temp_malloc($331,$334)|0);
   HEAP32[$18>>2] = $335;
  } else {
   $336 = (_setup_malloc($331,$334)|0);
   $337 = HEAP32[$19>>2]|0;
   $338 = ((($337)) + 8|0);
   HEAP32[$338>>2] = $336;
   HEAP32[$18>>2] = $336;
  }
  $339 = HEAP32[$18>>2]|0;
  $340 = ($339|0)!=(0|0);
  if (!($340)) {
   label = 73;
   break;
  }
  $343 = HEAP32[$15>>2]|0;
  $344 = ($343|0)!=(0);
  L124: do {
   if ($344) {
    HEAP32[$20>>2] = 0;
    $345 = HEAP32[$2>>2]|0;
    $346 = (_get_bits($345,5)|0);
    $347 = (($346) + 1)|0;
    HEAP32[$21>>2] = $347;
    while(1) {
     $348 = HEAP32[$20>>2]|0;
     $349 = HEAP32[$19>>2]|0;
     $350 = ((($349)) + 4|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = ($348|0)<($351|0);
     if (!($352)) {
      break L124;
     }
     $353 = HEAP32[$19>>2]|0;
     $354 = ((($353)) + 4|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = HEAP32[$20>>2]|0;
     $357 = (($355) - ($356))|0;
     HEAP32[$22>>2] = $357;
     $358 = HEAP32[$2>>2]|0;
     $359 = HEAP32[$22>>2]|0;
     $360 = (_ilog($359)|0);
     $361 = (_get_bits($358,$360)|0);
     HEAP32[$23>>2] = $361;
     $362 = HEAP32[$20>>2]|0;
     $363 = HEAP32[$23>>2]|0;
     $364 = (($362) + ($363))|0;
     $365 = HEAP32[$19>>2]|0;
     $366 = ((($365)) + 4|0);
     $367 = HEAP32[$366>>2]|0;
     $368 = ($364|0)>($367|0);
     if ($368) {
      label = 78;
      break L107;
     }
     $371 = HEAP32[$18>>2]|0;
     $372 = HEAP32[$20>>2]|0;
     $373 = (($371) + ($372)|0);
     $374 = HEAP32[$21>>2]|0;
     $375 = $374&255;
     $376 = HEAP32[$23>>2]|0;
     _memset(($373|0),($375|0),($376|0))|0;
     $377 = HEAP32[$23>>2]|0;
     $378 = HEAP32[$20>>2]|0;
     $379 = (($378) + ($377))|0;
     HEAP32[$20>>2] = $379;
     $380 = HEAP32[$21>>2]|0;
     $381 = (($380) + 1)|0;
     HEAP32[$21>>2] = $381;
    }
   } else {
    HEAP32[$8>>2] = 0;
    while(1) {
     $382 = HEAP32[$8>>2]|0;
     $383 = HEAP32[$19>>2]|0;
     $384 = ((($383)) + 4|0);
     $385 = HEAP32[$384>>2]|0;
     $386 = ($382|0)<($385|0);
     if (!($386)) {
      break L124;
     }
     $387 = HEAP32[$19>>2]|0;
     $388 = ((($387)) + 23|0);
     $389 = HEAP8[$388>>0]|0;
     $390 = $389&255;
     $391 = ($390|0)!=(0);
     if ($391) {
      $392 = HEAP32[$2>>2]|0;
      $393 = (_get_bits($392,1)|0);
      $394 = $393;
     } else {
      $394 = 1;
     }
     HEAP32[$24>>2] = $394;
     $395 = HEAP32[$24>>2]|0;
     $396 = ($395|0)!=(0);
     if ($396) {
      $397 = HEAP32[$2>>2]|0;
      $398 = (_get_bits($397,5)|0);
      $399 = (($398) + 1)|0;
      $400 = $399&255;
      $401 = HEAP32[$18>>2]|0;
      $402 = HEAP32[$8>>2]|0;
      $403 = (($401) + ($402)|0);
      HEAP8[$403>>0] = $400;
      $404 = HEAP32[$17>>2]|0;
      $405 = (($404) + 1)|0;
      HEAP32[$17>>2] = $405;
      $406 = HEAP32[$18>>2]|0;
      $407 = HEAP32[$8>>2]|0;
      $408 = (($406) + ($407)|0);
      $409 = HEAP8[$408>>0]|0;
      $410 = $409&255;
      $411 = ($410|0)==(32);
      if ($411) {
       label = 86;
       break L107;
      }
     } else {
      $414 = HEAP32[$18>>2]|0;
      $415 = HEAP32[$8>>2]|0;
      $416 = (($414) + ($415)|0);
      HEAP8[$416>>0] = -1;
     }
     $417 = HEAP32[$8>>2]|0;
     $418 = (($417) + 1)|0;
     HEAP32[$8>>2] = $418;
    }
   }
  } while(0);
  $419 = HEAP32[$19>>2]|0;
  $420 = ((($419)) + 23|0);
  $421 = HEAP8[$420>>0]|0;
  $422 = $421&255;
  $423 = ($422|0)!=(0);
  do {
   if ($423) {
    $424 = HEAP32[$17>>2]|0;
    $425 = HEAP32[$19>>2]|0;
    $426 = ((($425)) + 4|0);
    $427 = HEAP32[$426>>2]|0;
    $428 = $427 >> 2;
    $429 = ($424|0)>=($428|0);
    if (!($429)) {
     break;
    }
    $430 = HEAP32[$19>>2]|0;
    $431 = ((($430)) + 4|0);
    $432 = HEAP32[$431>>2]|0;
    $433 = HEAP32[$2>>2]|0;
    $434 = ((($433)) + 16|0);
    $435 = HEAP32[$434>>2]|0;
    $436 = ($432|0)>($435|0);
    if ($436) {
     $437 = HEAP32[$19>>2]|0;
     $438 = ((($437)) + 4|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = HEAP32[$2>>2]|0;
     $441 = ((($440)) + 16|0);
     HEAP32[$441>>2] = $439;
    }
    $442 = HEAP32[$2>>2]|0;
    $443 = HEAP32[$19>>2]|0;
    $444 = ((($443)) + 4|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = (_setup_malloc($442,$445)|0);
    $447 = HEAP32[$19>>2]|0;
    $448 = ((($447)) + 8|0);
    HEAP32[$448>>2] = $446;
    $449 = HEAP32[$19>>2]|0;
    $450 = ((($449)) + 8|0);
    $451 = HEAP32[$450>>2]|0;
    $452 = ($451|0)==(0|0);
    if ($452) {
     label = 94;
     break L107;
    }
    $455 = HEAP32[$19>>2]|0;
    $456 = ((($455)) + 8|0);
    $457 = HEAP32[$456>>2]|0;
    $458 = HEAP32[$18>>2]|0;
    $459 = HEAP32[$19>>2]|0;
    $460 = ((($459)) + 4|0);
    $461 = HEAP32[$460>>2]|0;
    _memcpy(($457|0),($458|0),($461|0))|0;
    $462 = HEAP32[$2>>2]|0;
    $463 = HEAP32[$18>>2]|0;
    $464 = HEAP32[$19>>2]|0;
    $465 = ((($464)) + 4|0);
    $466 = HEAP32[$465>>2]|0;
    _setup_temp_free($462,$463,$466);
    $467 = HEAP32[$19>>2]|0;
    $468 = ((($467)) + 8|0);
    $469 = HEAP32[$468>>2]|0;
    HEAP32[$18>>2] = $469;
    $470 = HEAP32[$19>>2]|0;
    $471 = ((($470)) + 23|0);
    HEAP8[$471>>0] = 0;
   }
  } while(0);
  $472 = HEAP32[$19>>2]|0;
  $473 = ((($472)) + 23|0);
  $474 = HEAP8[$473>>0]|0;
  $475 = ($474<<24>>24)!=(0);
  L150: do {
   if ($475) {
    $476 = HEAP32[$17>>2]|0;
    HEAP32[$16>>2] = $476;
   } else {
    HEAP32[$16>>2] = 0;
    HEAP32[$8>>2] = 0;
    while(1) {
     $477 = HEAP32[$8>>2]|0;
     $478 = HEAP32[$19>>2]|0;
     $479 = ((($478)) + 4|0);
     $480 = HEAP32[$479>>2]|0;
     $481 = ($477|0)<($480|0);
     if (!($481)) {
      break L150;
     }
     $482 = HEAP32[$18>>2]|0;
     $483 = HEAP32[$8>>2]|0;
     $484 = (($482) + ($483)|0);
     $485 = HEAP8[$484>>0]|0;
     $486 = $485&255;
     $487 = ($486|0)>(10);
     do {
      if ($487) {
       $488 = HEAP32[$18>>2]|0;
       $489 = HEAP32[$8>>2]|0;
       $490 = (($488) + ($489)|0);
       $491 = HEAP8[$490>>0]|0;
       $492 = $491&255;
       $493 = ($492|0)!=(255);
       if (!($493)) {
        break;
       }
       $494 = HEAP32[$16>>2]|0;
       $495 = (($494) + 1)|0;
       HEAP32[$16>>2] = $495;
      }
     } while(0);
     $496 = HEAP32[$8>>2]|0;
     $497 = (($496) + 1)|0;
     HEAP32[$8>>2] = $497;
    }
   }
  } while(0);
  $498 = HEAP32[$16>>2]|0;
  $499 = HEAP32[$19>>2]|0;
  $500 = ((($499)) + 2092|0);
  HEAP32[$500>>2] = $498;
  HEAP32[$14>>2] = 0;
  $501 = HEAP32[$19>>2]|0;
  $502 = ((($501)) + 23|0);
  $503 = HEAP8[$502>>0]|0;
  $504 = ($503<<24>>24)!=(0);
  do {
   if ($504) {
    $519 = HEAP32[$19>>2]|0;
    $520 = ((($519)) + 2092|0);
    $521 = HEAP32[$520>>2]|0;
    $522 = ($521|0)!=(0);
    if ($522) {
     $523 = HEAP32[$2>>2]|0;
     $524 = HEAP32[$19>>2]|0;
     $525 = ((($524)) + 2092|0);
     $526 = HEAP32[$525>>2]|0;
     $527 = (_setup_malloc($523,$526)|0);
     $528 = HEAP32[$19>>2]|0;
     $529 = ((($528)) + 8|0);
     HEAP32[$529>>2] = $527;
     $530 = HEAP32[$19>>2]|0;
     $531 = ((($530)) + 8|0);
     $532 = HEAP32[$531>>2]|0;
     $533 = ($532|0)!=(0|0);
     $534 = HEAP32[$2>>2]|0;
     if (!($533)) {
      label = 109;
      break L107;
     }
     $536 = HEAP32[$19>>2]|0;
     $537 = ((($536)) + 2092|0);
     $538 = HEAP32[$537>>2]|0;
     $539 = $538<<2;
     $540 = (_setup_temp_malloc($534,$539)|0);
     $541 = HEAP32[$19>>2]|0;
     $542 = ((($541)) + 32|0);
     HEAP32[$542>>2] = $540;
     $543 = HEAP32[$19>>2]|0;
     $544 = ((($543)) + 32|0);
     $545 = HEAP32[$544>>2]|0;
     $546 = ($545|0)!=(0|0);
     $547 = HEAP32[$2>>2]|0;
     if (!($546)) {
      label = 111;
      break L107;
     }
     $549 = HEAP32[$19>>2]|0;
     $550 = ((($549)) + 2092|0);
     $551 = HEAP32[$550>>2]|0;
     $552 = $551<<2;
     $553 = (_setup_temp_malloc($547,$552)|0);
     HEAP32[$14>>2] = $553;
     $554 = HEAP32[$14>>2]|0;
     $555 = ($554|0)!=(0|0);
     if (!($555)) {
      label = 113;
      break L107;
     }
    }
    $558 = HEAP32[$19>>2]|0;
    $559 = ((($558)) + 4|0);
    $560 = HEAP32[$559>>2]|0;
    $561 = HEAP32[$19>>2]|0;
    $562 = ((($561)) + 2092|0);
    $563 = HEAP32[$562>>2]|0;
    $564 = $563<<3;
    $565 = (($560) + ($564))|0;
    HEAP32[$25>>2] = $565;
    $566 = HEAP32[$25>>2]|0;
    $567 = HEAP32[$2>>2]|0;
    $568 = ((($567)) + 16|0);
    $569 = HEAP32[$568>>2]|0;
    $570 = ($566>>>0)>($569>>>0);
    if (!($570)) {
     break;
    }
    $571 = HEAP32[$25>>2]|0;
    $572 = HEAP32[$2>>2]|0;
    $573 = ((($572)) + 16|0);
    HEAP32[$573>>2] = $571;
   } else {
    $505 = HEAP32[$2>>2]|0;
    $506 = HEAP32[$19>>2]|0;
    $507 = ((($506)) + 4|0);
    $508 = HEAP32[$507>>2]|0;
    $509 = $508<<2;
    $510 = (_setup_malloc($505,$509)|0);
    $511 = HEAP32[$19>>2]|0;
    $512 = ((($511)) + 32|0);
    HEAP32[$512>>2] = $510;
    $513 = HEAP32[$19>>2]|0;
    $514 = ((($513)) + 32|0);
    $515 = HEAP32[$514>>2]|0;
    $516 = ($515|0)!=(0|0);
    if (!($516)) {
     label = 106;
     break L107;
    }
   }
  } while(0);
  $574 = HEAP32[$19>>2]|0;
  $575 = HEAP32[$18>>2]|0;
  $576 = HEAP32[$19>>2]|0;
  $577 = ((($576)) + 4|0);
  $578 = HEAP32[$577>>2]|0;
  $579 = HEAP32[$14>>2]|0;
  $580 = (_compute_codewords($574,$575,$578,$579)|0);
  $581 = ($580|0)!=(0);
  $582 = HEAP32[$19>>2]|0;
  if (!($581)) {
   label = 117;
   break;
  }
  $590 = ((($582)) + 2092|0);
  $591 = HEAP32[$590>>2]|0;
  $592 = ($591|0)!=(0);
  if ($592) {
   $593 = HEAP32[$2>>2]|0;
   $594 = HEAP32[$19>>2]|0;
   $595 = ((($594)) + 2092|0);
   $596 = HEAP32[$595>>2]|0;
   $597 = (($596) + 1)|0;
   $598 = $597<<2;
   $599 = (_setup_malloc($593,$598)|0);
   $600 = HEAP32[$19>>2]|0;
   $601 = ((($600)) + 2084|0);
   HEAP32[$601>>2] = $599;
   $602 = HEAP32[$19>>2]|0;
   $603 = ((($602)) + 2084|0);
   $604 = HEAP32[$603>>2]|0;
   $605 = ($604|0)==(0|0);
   $606 = HEAP32[$2>>2]|0;
   if ($605) {
    label = 122;
    break;
   }
   $608 = HEAP32[$19>>2]|0;
   $609 = ((($608)) + 2092|0);
   $610 = HEAP32[$609>>2]|0;
   $611 = (($610) + 1)|0;
   $612 = $611<<2;
   $613 = (_setup_malloc($606,$612)|0);
   $614 = HEAP32[$19>>2]|0;
   $615 = ((($614)) + 2088|0);
   HEAP32[$615>>2] = $613;
   $616 = HEAP32[$19>>2]|0;
   $617 = ((($616)) + 2088|0);
   $618 = HEAP32[$617>>2]|0;
   $619 = ($618|0)==(0|0);
   if ($619) {
    label = 124;
    break;
   }
   $622 = HEAP32[$19>>2]|0;
   $623 = ((($622)) + 2088|0);
   $624 = HEAP32[$623>>2]|0;
   $625 = ((($624)) + 4|0);
   HEAP32[$623>>2] = $625;
   $626 = HEAP32[$19>>2]|0;
   $627 = ((($626)) + 2088|0);
   $628 = HEAP32[$627>>2]|0;
   $629 = ((($628)) + -4|0);
   HEAP32[$629>>2] = -1;
   $630 = HEAP32[$19>>2]|0;
   $631 = HEAP32[$18>>2]|0;
   $632 = HEAP32[$14>>2]|0;
   _compute_sorted_huffman($630,$631,$632);
  }
  $633 = HEAP32[$19>>2]|0;
  $634 = ((($633)) + 23|0);
  $635 = HEAP8[$634>>0]|0;
  $636 = ($635<<24>>24)!=(0);
  if ($636) {
   $637 = HEAP32[$2>>2]|0;
   $638 = HEAP32[$14>>2]|0;
   $639 = HEAP32[$19>>2]|0;
   $640 = ((($639)) + 2092|0);
   $641 = HEAP32[$640>>2]|0;
   $642 = $641<<2;
   _setup_temp_free($637,$638,$642);
   $643 = HEAP32[$2>>2]|0;
   $644 = HEAP32[$19>>2]|0;
   $645 = ((($644)) + 32|0);
   $646 = HEAP32[$645>>2]|0;
   $647 = HEAP32[$19>>2]|0;
   $648 = ((($647)) + 2092|0);
   $649 = HEAP32[$648>>2]|0;
   $650 = $649<<2;
   _setup_temp_free($643,$646,$650);
   $651 = HEAP32[$2>>2]|0;
   $652 = HEAP32[$18>>2]|0;
   $653 = HEAP32[$19>>2]|0;
   $654 = ((($653)) + 4|0);
   $655 = HEAP32[$654>>2]|0;
   _setup_temp_free($651,$652,$655);
   $656 = HEAP32[$19>>2]|0;
   $657 = ((($656)) + 32|0);
   HEAP32[$657>>2] = 0;
  }
  $658 = HEAP32[$19>>2]|0;
  _compute_accelerated_huffman($658);
  $659 = HEAP32[$2>>2]|0;
  $660 = (_get_bits($659,4)|0);
  $661 = $660&255;
  $662 = HEAP32[$19>>2]|0;
  $663 = ((($662)) + 21|0);
  HEAP8[$663>>0] = $661;
  $664 = HEAP32[$19>>2]|0;
  $665 = ((($664)) + 21|0);
  $666 = HEAP8[$665>>0]|0;
  $667 = $666&255;
  $668 = ($667|0)>(2);
  if ($668) {
   label = 129;
   break;
  }
  $671 = HEAP32[$19>>2]|0;
  $672 = ((($671)) + 21|0);
  $673 = HEAP8[$672>>0]|0;
  $674 = $673&255;
  $675 = ($674|0)>(0);
  if ($675) {
   $676 = HEAP32[$2>>2]|0;
   $677 = (_get_bits($676,32)|0);
   $678 = (+_float32_unpack($677));
   $679 = HEAP32[$19>>2]|0;
   $680 = ((($679)) + 12|0);
   HEAPF32[$680>>2] = $678;
   $681 = HEAP32[$2>>2]|0;
   $682 = (_get_bits($681,32)|0);
   $683 = (+_float32_unpack($682));
   $684 = HEAP32[$19>>2]|0;
   $685 = ((($684)) + 16|0);
   HEAPF32[$685>>2] = $683;
   $686 = HEAP32[$2>>2]|0;
   $687 = (_get_bits($686,4)|0);
   $688 = (($687) + 1)|0;
   $689 = $688&255;
   $690 = HEAP32[$19>>2]|0;
   $691 = ((($690)) + 20|0);
   HEAP8[$691>>0] = $689;
   $692 = HEAP32[$2>>2]|0;
   $693 = (_get_bits($692,1)|0);
   $694 = $693&255;
   $695 = HEAP32[$19>>2]|0;
   $696 = ((($695)) + 22|0);
   HEAP8[$696>>0] = $694;
   $697 = HEAP32[$19>>2]|0;
   $698 = ((($697)) + 21|0);
   $699 = HEAP8[$698>>0]|0;
   $700 = $699&255;
   $701 = ($700|0)==(1);
   $702 = HEAP32[$19>>2]|0;
   $703 = ((($702)) + 4|0);
   $704 = HEAP32[$703>>2]|0;
   $705 = HEAP32[$19>>2]|0;
   $706 = HEAP32[$705>>2]|0;
   if ($701) {
    $707 = (_lookup1_values($704,$706)|0);
    $708 = HEAP32[$19>>2]|0;
    $$sink = $707;$$sink5 = $708;
   } else {
    $709 = Math_imul($704, $706)|0;
    $710 = HEAP32[$19>>2]|0;
    $$sink = $709;$$sink5 = $710;
   }
   $711 = ((($$sink5)) + 24|0);
   HEAP32[$711>>2] = $$sink;
   $712 = HEAP32[$19>>2]|0;
   $713 = ((($712)) + 24|0);
   $714 = HEAP32[$713>>2]|0;
   $715 = ($714|0)==(0);
   $716 = HEAP32[$2>>2]|0;
   if ($715) {
    label = 135;
    break;
   }
   $718 = HEAP32[$19>>2]|0;
   $719 = ((($718)) + 24|0);
   $720 = HEAP32[$719>>2]|0;
   $721 = $720<<1;
   $722 = (_setup_temp_malloc($716,$721)|0);
   HEAP32[$26>>2] = $722;
   $723 = HEAP32[$26>>2]|0;
   $724 = ($723|0)==(0|0);
   if ($724) {
    label = 137;
    break;
   }
   HEAP32[$8>>2] = 0;
   while(1) {
    $727 = HEAP32[$8>>2]|0;
    $728 = HEAP32[$19>>2]|0;
    $729 = ((($728)) + 24|0);
    $730 = HEAP32[$729>>2]|0;
    $731 = ($727|0)<($730|0);
    if (!($731)) {
     break;
    }
    $732 = HEAP32[$2>>2]|0;
    $733 = HEAP32[$19>>2]|0;
    $734 = ((($733)) + 20|0);
    $735 = HEAP8[$734>>0]|0;
    $736 = $735&255;
    $737 = (_get_bits($732,$736)|0);
    HEAP32[$27>>2] = $737;
    $738 = HEAP32[$27>>2]|0;
    $739 = ($738|0)==(-1);
    if ($739) {
     label = 141;
     break L107;
    }
    $748 = HEAP32[$27>>2]|0;
    $749 = $748&65535;
    $750 = HEAP32[$26>>2]|0;
    $751 = HEAP32[$8>>2]|0;
    $752 = (($750) + ($751<<1)|0);
    HEAP16[$752>>1] = $749;
    $753 = HEAP32[$8>>2]|0;
    $754 = (($753) + 1)|0;
    HEAP32[$8>>2] = $754;
   }
   $755 = HEAP32[$19>>2]|0;
   $756 = ((($755)) + 21|0);
   $757 = HEAP8[$756>>0]|0;
   $758 = $757&255;
   $759 = ($758|0)==(1);
   L194: do {
    if ($759) {
     $760 = HEAP32[$19>>2]|0;
     $761 = ((($760)) + 23|0);
     $762 = HEAP8[$761>>0]|0;
     $763 = $762&255;
     HEAP32[$29>>2] = $763;
     HEAPF32[$30>>2] = 0.0;
     $764 = HEAP32[$29>>2]|0;
     $765 = ($764|0)!=(0);
     if ($765) {
      $766 = HEAP32[$19>>2]|0;
      $767 = ((($766)) + 2092|0);
      $768 = HEAP32[$767>>2]|0;
      $769 = ($768|0)==(0);
      if ($769) {
       break;
      }
      $770 = HEAP32[$2>>2]|0;
      $771 = HEAP32[$19>>2]|0;
      $772 = ((($771)) + 2092|0);
      $773 = HEAP32[$772>>2]|0;
      $774 = $773<<2;
      $775 = HEAP32[$19>>2]|0;
      $776 = HEAP32[$775>>2]|0;
      $777 = Math_imul($774, $776)|0;
      $778 = (_setup_malloc($770,$777)|0);
      $779 = HEAP32[$19>>2]|0;
      $$sink6 = $778;$$sink8 = $779;
     } else {
      $780 = HEAP32[$2>>2]|0;
      $781 = HEAP32[$19>>2]|0;
      $782 = ((($781)) + 4|0);
      $783 = HEAP32[$782>>2]|0;
      $784 = $783<<2;
      $785 = HEAP32[$19>>2]|0;
      $786 = HEAP32[$785>>2]|0;
      $787 = Math_imul($784, $786)|0;
      $788 = (_setup_malloc($780,$787)|0);
      $789 = HEAP32[$19>>2]|0;
      $$sink6 = $788;$$sink8 = $789;
     }
     $790 = ((($$sink8)) + 28|0);
     HEAP32[$790>>2] = $$sink6;
     $791 = HEAP32[$19>>2]|0;
     $792 = ((($791)) + 28|0);
     $793 = HEAP32[$792>>2]|0;
     $794 = ($793|0)==(0|0);
     if ($794) {
      label = 149;
      break L107;
     }
     $803 = HEAP32[$29>>2]|0;
     $804 = ($803|0)!=(0);
     $805 = HEAP32[$19>>2]|0;
     $806 = ((($805)) + 4|0);
     $807 = ((($805)) + 2092|0);
     $$sink9 = $804 ? $807 : $806;
     $808 = HEAP32[$$sink9>>2]|0;
     HEAP32[$28>>2] = $808;
     HEAP32[$8>>2] = 0;
     while(1) {
      $809 = HEAP32[$8>>2]|0;
      $810 = HEAP32[$28>>2]|0;
      $811 = ($809|0)<($810|0);
      if (!($811)) {
       break;
      }
      $812 = HEAP32[$29>>2]|0;
      $813 = ($812|0)!=(0);
      if ($813) {
       $814 = HEAP32[$19>>2]|0;
       $815 = ((($814)) + 2088|0);
       $816 = HEAP32[$815>>2]|0;
       $817 = HEAP32[$8>>2]|0;
       $818 = (($816) + ($817<<2)|0);
       $819 = HEAP32[$818>>2]|0;
       $821 = $819;
      } else {
       $820 = HEAP32[$8>>2]|0;
       $821 = $820;
      }
      HEAP32[$31>>2] = $821;
      HEAP32[$32>>2] = 1;
      HEAP32[$9>>2] = 0;
      while(1) {
       $822 = HEAP32[$9>>2]|0;
       $823 = HEAP32[$19>>2]|0;
       $824 = HEAP32[$823>>2]|0;
       $825 = ($822|0)<($824|0);
       if (!($825)) {
        break;
       }
       $826 = HEAP32[$31>>2]|0;
       $827 = HEAP32[$32>>2]|0;
       $828 = (($826>>>0) / ($827>>>0))&-1;
       $829 = HEAP32[$19>>2]|0;
       $830 = ((($829)) + 24|0);
       $831 = HEAP32[$830>>2]|0;
       $832 = (($828>>>0) % ($831>>>0))&-1;
       HEAP32[$33>>2] = $832;
       $833 = HEAP32[$26>>2]|0;
       $834 = HEAP32[$33>>2]|0;
       $835 = (($833) + ($834<<1)|0);
       $836 = HEAP16[$835>>1]|0;
       $837 = (+($836&65535));
       HEAPF32[$34>>2] = $837;
       $838 = HEAP32[$26>>2]|0;
       $839 = HEAP32[$33>>2]|0;
       $840 = (($838) + ($839<<1)|0);
       $841 = HEAP16[$840>>1]|0;
       $842 = $841&65535;
       $843 = (+($842|0));
       $844 = HEAP32[$19>>2]|0;
       $845 = ((($844)) + 16|0);
       $846 = +HEAPF32[$845>>2];
       $847 = $843 * $846;
       $848 = HEAP32[$19>>2]|0;
       $849 = ((($848)) + 12|0);
       $850 = +HEAPF32[$849>>2];
       $851 = $847 + $850;
       $852 = +HEAPF32[$30>>2];
       $853 = $851 + $852;
       HEAPF32[$34>>2] = $853;
       $854 = +HEAPF32[$34>>2];
       $855 = HEAP32[$19>>2]|0;
       $856 = ((($855)) + 28|0);
       $857 = HEAP32[$856>>2]|0;
       $858 = HEAP32[$8>>2]|0;
       $859 = HEAP32[$19>>2]|0;
       $860 = HEAP32[$859>>2]|0;
       $861 = Math_imul($858, $860)|0;
       $862 = HEAP32[$9>>2]|0;
       $863 = (($861) + ($862))|0;
       $864 = (($857) + ($863<<2)|0);
       HEAPF32[$864>>2] = $854;
       $865 = HEAP32[$19>>2]|0;
       $866 = ((($865)) + 22|0);
       $867 = HEAP8[$866>>0]|0;
       $868 = ($867<<24>>24)!=(0);
       if ($868) {
        $869 = +HEAPF32[$34>>2];
        HEAPF32[$30>>2] = $869;
       }
       $870 = HEAP32[$9>>2]|0;
       $871 = (($870) + 1)|0;
       $872 = HEAP32[$19>>2]|0;
       $873 = HEAP32[$872>>2]|0;
       $874 = ($871|0)<($873|0);
       if ($874) {
        $875 = HEAP32[$32>>2]|0;
        $876 = HEAP32[$19>>2]|0;
        $877 = ((($876)) + 24|0);
        $878 = HEAP32[$877>>2]|0;
        $879 = (4294967295 / ($878>>>0))&-1;
        $880 = ($875>>>0)>($879>>>0);
        if ($880) {
         label = 161;
         break L107;
        }
        $889 = HEAP32[$19>>2]|0;
        $890 = ((($889)) + 24|0);
        $891 = HEAP32[$890>>2]|0;
        $892 = HEAP32[$32>>2]|0;
        $893 = Math_imul($892, $891)|0;
        HEAP32[$32>>2] = $893;
       }
       $894 = HEAP32[$9>>2]|0;
       $895 = (($894) + 1)|0;
       HEAP32[$9>>2] = $895;
      }
      $896 = HEAP32[$8>>2]|0;
      $897 = (($896) + 1)|0;
      HEAP32[$8>>2] = $897;
     }
     $898 = HEAP32[$19>>2]|0;
     $899 = ((($898)) + 21|0);
     HEAP8[$899>>0] = 2;
    } else {
     HEAPF32[$35>>2] = 0.0;
     $900 = HEAP32[$2>>2]|0;
     $901 = HEAP32[$19>>2]|0;
     $902 = ((($901)) + 24|0);
     $903 = HEAP32[$902>>2]|0;
     $904 = $903<<2;
     $905 = (_setup_malloc($900,$904)|0);
     $906 = HEAP32[$19>>2]|0;
     $907 = ((($906)) + 28|0);
     HEAP32[$907>>2] = $905;
     $908 = HEAP32[$19>>2]|0;
     $909 = ((($908)) + 28|0);
     $910 = HEAP32[$909>>2]|0;
     $911 = ($910|0)==(0|0);
     if ($911) {
      label = 167;
      break L107;
     }
     HEAP32[$8>>2] = 0;
     while(1) {
      $920 = HEAP32[$8>>2]|0;
      $921 = HEAP32[$19>>2]|0;
      $922 = ((($921)) + 24|0);
      $923 = HEAP32[$922>>2]|0;
      $924 = ($920|0)<($923|0);
      if (!($924)) {
       break L194;
      }
      $925 = HEAP32[$26>>2]|0;
      $926 = HEAP32[$8>>2]|0;
      $927 = (($925) + ($926<<1)|0);
      $928 = HEAP16[$927>>1]|0;
      $929 = $928&65535;
      $930 = (+($929|0));
      $931 = HEAP32[$19>>2]|0;
      $932 = ((($931)) + 16|0);
      $933 = +HEAPF32[$932>>2];
      $934 = $930 * $933;
      $935 = HEAP32[$19>>2]|0;
      $936 = ((($935)) + 12|0);
      $937 = +HEAPF32[$936>>2];
      $938 = $934 + $937;
      $939 = +HEAPF32[$35>>2];
      $940 = $938 + $939;
      HEAPF32[$36>>2] = $940;
      $941 = +HEAPF32[$36>>2];
      $942 = HEAP32[$19>>2]|0;
      $943 = ((($942)) + 28|0);
      $944 = HEAP32[$943>>2]|0;
      $945 = HEAP32[$8>>2]|0;
      $946 = (($944) + ($945<<2)|0);
      HEAPF32[$946>>2] = $941;
      $947 = HEAP32[$19>>2]|0;
      $948 = ((($947)) + 22|0);
      $949 = HEAP8[$948>>0]|0;
      $950 = ($949<<24>>24)!=(0);
      if ($950) {
       $951 = +HEAPF32[$36>>2];
       HEAPF32[$35>>2] = $951;
      }
      $952 = HEAP32[$8>>2]|0;
      $953 = (($952) + 1)|0;
      HEAP32[$8>>2] = $953;
     }
    }
   } while(0);
   $954 = HEAP32[$2>>2]|0;
   $955 = HEAP32[$26>>2]|0;
   $956 = HEAP32[$19>>2]|0;
   $957 = ((($956)) + 24|0);
   $958 = HEAP32[$957>>2]|0;
   $959 = $958<<1;
   _setup_temp_free($954,$955,$959);
  }
  $960 = HEAP32[$7>>2]|0;
  $961 = (($960) + 1)|0;
  HEAP32[$7>>2] = $961;
 }
 switch (label|0) {
  case 59: {
   $266 = (_error($265,20)|0);
   HEAP32[$1>>2] = $266;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 61: {
   $273 = (_error($272,20)|0);
   HEAP32[$1>>2] = $273;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 63: {
   $280 = (_error($279,20)|0);
   HEAP32[$1>>2] = $280;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 68: {
   $325 = HEAP32[$2>>2]|0;
   $326 = (_error($325,20)|0);
   HEAP32[$1>>2] = $326;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 73: {
   $341 = HEAP32[$2>>2]|0;
   $342 = (_error($341,3)|0);
   HEAP32[$1>>2] = $342;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 78: {
   $369 = HEAP32[$2>>2]|0;
   $370 = (_error($369,20)|0);
   HEAP32[$1>>2] = $370;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 86: {
   $412 = HEAP32[$2>>2]|0;
   $413 = (_error($412,20)|0);
   HEAP32[$1>>2] = $413;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 94: {
   $453 = HEAP32[$2>>2]|0;
   $454 = (_error($453,3)|0);
   HEAP32[$1>>2] = $454;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 106: {
   $517 = HEAP32[$2>>2]|0;
   $518 = (_error($517,3)|0);
   HEAP32[$1>>2] = $518;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 109: {
   $535 = (_error($534,3)|0);
   HEAP32[$1>>2] = $535;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 111: {
   $548 = (_error($547,3)|0);
   HEAP32[$1>>2] = $548;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 113: {
   $556 = HEAP32[$2>>2]|0;
   $557 = (_error($556,3)|0);
   HEAP32[$1>>2] = $557;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 117: {
   $583 = ((($582)) + 23|0);
   $584 = HEAP8[$583>>0]|0;
   $585 = ($584<<24>>24)!=(0);
   if ($585) {
    $586 = HEAP32[$2>>2]|0;
    $587 = HEAP32[$14>>2]|0;
    _setup_temp_free($586,$587,0);
   }
   $588 = HEAP32[$2>>2]|0;
   $589 = (_error($588,20)|0);
   HEAP32[$1>>2] = $589;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 122: {
   $607 = (_error($606,3)|0);
   HEAP32[$1>>2] = $607;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 124: {
   $620 = HEAP32[$2>>2]|0;
   $621 = (_error($620,3)|0);
   HEAP32[$1>>2] = $621;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 129: {
   $669 = HEAP32[$2>>2]|0;
   $670 = (_error($669,20)|0);
   HEAP32[$1>>2] = $670;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 135: {
   $717 = (_error($716,20)|0);
   HEAP32[$1>>2] = $717;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 137: {
   $725 = HEAP32[$2>>2]|0;
   $726 = (_error($725,3)|0);
   HEAP32[$1>>2] = $726;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 141: {
   $740 = HEAP32[$2>>2]|0;
   $741 = HEAP32[$26>>2]|0;
   $742 = HEAP32[$19>>2]|0;
   $743 = ((($742)) + 24|0);
   $744 = HEAP32[$743>>2]|0;
   $745 = $744<<1;
   _setup_temp_free($740,$741,$745);
   $746 = HEAP32[$2>>2]|0;
   $747 = (_error($746,20)|0);
   HEAP32[$1>>2] = $747;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 149: {
   $795 = HEAP32[$2>>2]|0;
   $796 = HEAP32[$26>>2]|0;
   $797 = HEAP32[$19>>2]|0;
   $798 = ((($797)) + 24|0);
   $799 = HEAP32[$798>>2]|0;
   $800 = $799<<1;
   _setup_temp_free($795,$796,$800);
   $801 = HEAP32[$2>>2]|0;
   $802 = (_error($801,3)|0);
   HEAP32[$1>>2] = $802;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 161: {
   $881 = HEAP32[$2>>2]|0;
   $882 = HEAP32[$26>>2]|0;
   $883 = HEAP32[$19>>2]|0;
   $884 = ((($883)) + 24|0);
   $885 = HEAP32[$884>>2]|0;
   $886 = $885<<1;
   _setup_temp_free($881,$882,$886);
   $887 = HEAP32[$2>>2]|0;
   $888 = (_error($887,20)|0);
   HEAP32[$1>>2] = $888;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 167: {
   $912 = HEAP32[$2>>2]|0;
   $913 = HEAP32[$26>>2]|0;
   $914 = HEAP32[$19>>2]|0;
   $915 = ((($914)) + 24|0);
   $916 = HEAP32[$915>>2]|0;
   $917 = $916<<1;
   _setup_temp_free($912,$913,$917);
   $918 = HEAP32[$2>>2]|0;
   $919 = (_error($918,3)|0);
   HEAP32[$1>>2] = $919;
   $2087 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($2087|0);
   break;
  }
  case 175: {
   $962 = HEAP32[$2>>2]|0;
   $963 = (_get_bits($962,6)|0);
   $964 = (($963) + 1)|0;
   $965 = $964&255;
   HEAP8[$4>>0] = $965;
   HEAP32[$7>>2] = 0;
   while(1) {
    $966 = HEAP32[$7>>2]|0;
    $967 = HEAP8[$4>>0]|0;
    $968 = $967&255;
    $969 = ($966|0)<($968|0);
    $970 = HEAP32[$2>>2]|0;
    if (!($969)) {
     break;
    }
    $971 = (_get_bits($970,16)|0);
    HEAP32[$37>>2] = $971;
    $972 = HEAP32[$37>>2]|0;
    $973 = ($972|0)!=(0);
    if ($973) {
     label = 178;
     break;
    }
    $976 = HEAP32[$7>>2]|0;
    $977 = (($976) + 1)|0;
    HEAP32[$7>>2] = $977;
   }
   if ((label|0) == 178) {
    $974 = HEAP32[$2>>2]|0;
    $975 = (_error($974,20)|0);
    HEAP32[$1>>2] = $975;
    $2087 = HEAP32[$1>>2]|0;
    STACKTOP = sp;return ($2087|0);
   }
   $978 = (_get_bits($970,6)|0);
   $979 = (($978) + 1)|0;
   $980 = HEAP32[$2>>2]|0;
   $981 = ((($980)) + 128|0);
   HEAP32[$981>>2] = $979;
   $982 = HEAP32[$2>>2]|0;
   $983 = HEAP32[$2>>2]|0;
   $984 = ((($983)) + 128|0);
   $985 = HEAP32[$984>>2]|0;
   $986 = ($985*1596)|0;
   $987 = (_setup_malloc($982,$986)|0);
   $988 = HEAP32[$2>>2]|0;
   $989 = ((($988)) + 260|0);
   HEAP32[$989>>2] = $987;
   $990 = HEAP32[$2>>2]|0;
   $991 = ((($990)) + 260|0);
   $992 = HEAP32[$991>>2]|0;
   $993 = ($992|0)==(0|0);
   if ($993) {
    $994 = HEAP32[$2>>2]|0;
    $995 = (_error($994,3)|0);
    HEAP32[$1>>2] = $995;
    $2087 = HEAP32[$1>>2]|0;
    STACKTOP = sp;return ($2087|0);
   }
   HEAP32[$7>>2] = 0;
   L245: while(1) {
    $996 = HEAP32[$7>>2]|0;
    $997 = HEAP32[$2>>2]|0;
    $998 = ((($997)) + 128|0);
    $999 = HEAP32[$998>>2]|0;
    $1000 = ($996|0)<($999|0);
    $1001 = HEAP32[$2>>2]|0;
    if (!($1000)) {
     label = 225;
     break;
    }
    $1002 = (_get_bits($1001,16)|0);
    $1003 = $1002&65535;
    $1004 = HEAP32[$2>>2]|0;
    $1005 = ((($1004)) + 132|0);
    $1006 = HEAP32[$7>>2]|0;
    $1007 = (($1005) + ($1006<<1)|0);
    HEAP16[$1007>>1] = $1003;
    $1008 = HEAP32[$2>>2]|0;
    $1009 = ((($1008)) + 132|0);
    $1010 = HEAP32[$7>>2]|0;
    $1011 = (($1009) + ($1010<<1)|0);
    $1012 = HEAP16[$1011>>1]|0;
    $1013 = $1012&65535;
    $1014 = ($1013|0)>(1);
    $1015 = HEAP32[$2>>2]|0;
    if ($1014) {
     label = 185;
     break;
    }
    $1017 = ((($1015)) + 132|0);
    $1018 = HEAP32[$7>>2]|0;
    $1019 = (($1017) + ($1018<<1)|0);
    $1020 = HEAP16[$1019>>1]|0;
    $1021 = $1020&65535;
    $1022 = ($1021|0)==(0);
    $1023 = HEAP32[$2>>2]|0;
    $1024 = ((($1023)) + 260|0);
    $1025 = HEAP32[$1024>>2]|0;
    $1026 = HEAP32[$7>>2]|0;
    $1027 = (($1025) + (($1026*1596)|0)|0);
    if ($1022) {
     label = 187;
     break;
    }
    HEAP32[$40>>2] = $1027;
    HEAP32[$41>>2] = -1;
    $1074 = HEAP32[$2>>2]|0;
    $1075 = (_get_bits($1074,5)|0);
    $1076 = $1075&255;
    $1077 = HEAP32[$40>>2]|0;
    HEAP8[$1077>>0] = $1076;
    HEAP32[$8>>2] = 0;
    while(1) {
     $1078 = HEAP32[$8>>2]|0;
     $1079 = HEAP32[$40>>2]|0;
     $1080 = HEAP8[$1079>>0]|0;
     $1081 = $1080&255;
     $1082 = ($1078|0)<($1081|0);
     if (!($1082)) {
      break;
     }
     $1083 = HEAP32[$2>>2]|0;
     $1084 = (_get_bits($1083,4)|0);
     $1085 = $1084&255;
     $1086 = HEAP32[$40>>2]|0;
     $1087 = ((($1086)) + 1|0);
     $1088 = HEAP32[$8>>2]|0;
     $1089 = (($1087) + ($1088)|0);
     HEAP8[$1089>>0] = $1085;
     $1090 = HEAP32[$40>>2]|0;
     $1091 = ((($1090)) + 1|0);
     $1092 = HEAP32[$8>>2]|0;
     $1093 = (($1091) + ($1092)|0);
     $1094 = HEAP8[$1093>>0]|0;
     $1095 = $1094&255;
     $1096 = HEAP32[$41>>2]|0;
     $1097 = ($1095|0)>($1096|0);
     if ($1097) {
      $1098 = HEAP32[$40>>2]|0;
      $1099 = ((($1098)) + 1|0);
      $1100 = HEAP32[$8>>2]|0;
      $1101 = (($1099) + ($1100)|0);
      $1102 = HEAP8[$1101>>0]|0;
      $1103 = $1102&255;
      HEAP32[$41>>2] = $1103;
     }
     $1104 = HEAP32[$8>>2]|0;
     $1105 = (($1104) + 1)|0;
     HEAP32[$8>>2] = $1105;
    }
    HEAP32[$8>>2] = 0;
    while(1) {
     $1106 = HEAP32[$8>>2]|0;
     $1107 = HEAP32[$41>>2]|0;
     $1108 = ($1106|0)<=($1107|0);
     $1109 = HEAP32[$2>>2]|0;
     if (!($1108)) {
      break;
     }
     $1110 = (_get_bits($1109,3)|0);
     $1111 = (($1110) + 1)|0;
     $1112 = $1111&255;
     $1113 = HEAP32[$40>>2]|0;
     $1114 = ((($1113)) + 33|0);
     $1115 = HEAP32[$8>>2]|0;
     $1116 = (($1114) + ($1115)|0);
     HEAP8[$1116>>0] = $1112;
     $1117 = HEAP32[$2>>2]|0;
     $1118 = (_get_bits($1117,2)|0);
     $1119 = $1118&255;
     $1120 = HEAP32[$40>>2]|0;
     $1121 = ((($1120)) + 49|0);
     $1122 = HEAP32[$8>>2]|0;
     $1123 = (($1121) + ($1122)|0);
     HEAP8[$1123>>0] = $1119;
     $1124 = HEAP32[$40>>2]|0;
     $1125 = ((($1124)) + 49|0);
     $1126 = HEAP32[$8>>2]|0;
     $1127 = (($1125) + ($1126)|0);
     $1128 = HEAP8[$1127>>0]|0;
     $1129 = ($1128<<24>>24)!=(0);
     if ($1129) {
      $1130 = HEAP32[$2>>2]|0;
      $1131 = (_get_bits($1130,8)|0);
      $1132 = $1131&255;
      $1133 = HEAP32[$40>>2]|0;
      $1134 = ((($1133)) + 65|0);
      $1135 = HEAP32[$8>>2]|0;
      $1136 = (($1134) + ($1135)|0);
      HEAP8[$1136>>0] = $1132;
      $1137 = HEAP32[$40>>2]|0;
      $1138 = ((($1137)) + 65|0);
      $1139 = HEAP32[$8>>2]|0;
      $1140 = (($1138) + ($1139)|0);
      $1141 = HEAP8[$1140>>0]|0;
      $1142 = $1141&255;
      $1143 = HEAP32[$2>>2]|0;
      $1144 = ((($1143)) + 120|0);
      $1145 = HEAP32[$1144>>2]|0;
      $1146 = ($1142|0)>=($1145|0);
      if ($1146) {
       label = 200;
       break L245;
      }
     }
     HEAP32[$9>>2] = 0;
     while(1) {
      $1149 = HEAP32[$9>>2]|0;
      $1150 = HEAP32[$40>>2]|0;
      $1151 = ((($1150)) + 49|0);
      $1152 = HEAP32[$8>>2]|0;
      $1153 = (($1151) + ($1152)|0);
      $1154 = HEAP8[$1153>>0]|0;
      $1155 = $1154&255;
      $1156 = 1 << $1155;
      $1157 = ($1149|0)<($1156|0);
      if (!($1157)) {
       break;
      }
      $1158 = HEAP32[$2>>2]|0;
      $1159 = (_get_bits($1158,8)|0);
      $1160 = (($1159) - 1)|0;
      $1161 = $1160&65535;
      $1162 = HEAP32[$40>>2]|0;
      $1163 = ((($1162)) + 82|0);
      $1164 = HEAP32[$8>>2]|0;
      $1165 = (($1163) + ($1164<<4)|0);
      $1166 = HEAP32[$9>>2]|0;
      $1167 = (($1165) + ($1166<<1)|0);
      HEAP16[$1167>>1] = $1161;
      $1168 = HEAP32[$40>>2]|0;
      $1169 = ((($1168)) + 82|0);
      $1170 = HEAP32[$8>>2]|0;
      $1171 = (($1169) + ($1170<<4)|0);
      $1172 = HEAP32[$9>>2]|0;
      $1173 = (($1171) + ($1172<<1)|0);
      $1174 = HEAP16[$1173>>1]|0;
      $1175 = $1174 << 16 >> 16;
      $1176 = HEAP32[$2>>2]|0;
      $1177 = ((($1176)) + 120|0);
      $1178 = HEAP32[$1177>>2]|0;
      $1179 = ($1175|0)>=($1178|0);
      if ($1179) {
       label = 204;
       break L245;
      }
      $1182 = HEAP32[$9>>2]|0;
      $1183 = (($1182) + 1)|0;
      HEAP32[$9>>2] = $1183;
     }
     $1184 = HEAP32[$8>>2]|0;
     $1185 = (($1184) + 1)|0;
     HEAP32[$8>>2] = $1185;
    }
    $1186 = (_get_bits($1109,2)|0);
    $1187 = (($1186) + 1)|0;
    $1188 = $1187&255;
    $1189 = HEAP32[$40>>2]|0;
    $1190 = ((($1189)) + 1588|0);
    HEAP8[$1190>>0] = $1188;
    $1191 = HEAP32[$2>>2]|0;
    $1192 = (_get_bits($1191,4)|0);
    $1193 = $1192&255;
    $1194 = HEAP32[$40>>2]|0;
    $1195 = ((($1194)) + 1589|0);
    HEAP8[$1195>>0] = $1193;
    $1196 = HEAP32[$40>>2]|0;
    $1197 = ((($1196)) + 338|0);
    HEAP16[$1197>>1] = 0;
    $1198 = HEAP32[$40>>2]|0;
    $1199 = ((($1198)) + 1589|0);
    $1200 = HEAP8[$1199>>0]|0;
    $1201 = $1200&255;
    $1202 = 1 << $1201;
    $1203 = $1202&65535;
    $1204 = HEAP32[$40>>2]|0;
    $1205 = ((($1204)) + 338|0);
    $1206 = ((($1205)) + 2|0);
    HEAP16[$1206>>1] = $1203;
    $1207 = HEAP32[$40>>2]|0;
    $1208 = ((($1207)) + 1592|0);
    HEAP32[$1208>>2] = 2;
    HEAP32[$8>>2] = 0;
    while(1) {
     $1209 = HEAP32[$8>>2]|0;
     $1210 = HEAP32[$40>>2]|0;
     $1211 = HEAP8[$1210>>0]|0;
     $1212 = $1211&255;
     $1213 = ($1209|0)<($1212|0);
     if (!($1213)) {
      break;
     }
     $1214 = HEAP32[$40>>2]|0;
     $1215 = ((($1214)) + 1|0);
     $1216 = HEAP32[$8>>2]|0;
     $1217 = (($1215) + ($1216)|0);
     $1218 = HEAP8[$1217>>0]|0;
     $1219 = $1218&255;
     HEAP32[$42>>2] = $1219;
     HEAP32[$9>>2] = 0;
     while(1) {
      $1220 = HEAP32[$9>>2]|0;
      $1221 = HEAP32[$40>>2]|0;
      $1222 = ((($1221)) + 33|0);
      $1223 = HEAP32[$42>>2]|0;
      $1224 = (($1222) + ($1223)|0);
      $1225 = HEAP8[$1224>>0]|0;
      $1226 = $1225&255;
      $1227 = ($1220|0)<($1226|0);
      if (!($1227)) {
       break;
      }
      $1228 = HEAP32[$2>>2]|0;
      $1229 = HEAP32[$40>>2]|0;
      $1230 = ((($1229)) + 1589|0);
      $1231 = HEAP8[$1230>>0]|0;
      $1232 = $1231&255;
      $1233 = (_get_bits($1228,$1232)|0);
      $1234 = $1233&65535;
      $1235 = HEAP32[$40>>2]|0;
      $1236 = ((($1235)) + 338|0);
      $1237 = HEAP32[$40>>2]|0;
      $1238 = ((($1237)) + 1592|0);
      $1239 = HEAP32[$1238>>2]|0;
      $1240 = (($1236) + ($1239<<1)|0);
      HEAP16[$1240>>1] = $1234;
      $1241 = HEAP32[$40>>2]|0;
      $1242 = ((($1241)) + 1592|0);
      $1243 = HEAP32[$1242>>2]|0;
      $1244 = (($1243) + 1)|0;
      HEAP32[$1242>>2] = $1244;
      $1245 = HEAP32[$9>>2]|0;
      $1246 = (($1245) + 1)|0;
      HEAP32[$9>>2] = $1246;
     }
     $1247 = HEAP32[$8>>2]|0;
     $1248 = (($1247) + 1)|0;
     HEAP32[$8>>2] = $1248;
    }
    HEAP32[$8>>2] = 0;
    while(1) {
     $1249 = HEAP32[$8>>2]|0;
     $1250 = HEAP32[$40>>2]|0;
     $1251 = ((($1250)) + 1592|0);
     $1252 = HEAP32[$1251>>2]|0;
     $1253 = ($1249|0)<($1252|0);
     if (!($1253)) {
      break;
     }
     $1254 = HEAP32[$40>>2]|0;
     $1255 = ((($1254)) + 338|0);
     $1256 = HEAP32[$8>>2]|0;
     $1257 = (($1255) + ($1256<<1)|0);
     $1258 = HEAP16[$1257>>1]|0;
     $1259 = HEAP32[$8>>2]|0;
     $1260 = (($39) + ($1259<<2)|0);
     HEAP16[$1260>>1] = $1258;
     $1261 = HEAP32[$8>>2]|0;
     $1262 = $1261&65535;
     $1263 = HEAP32[$8>>2]|0;
     $1264 = (($39) + ($1263<<2)|0);
     $1265 = ((($1264)) + 2|0);
     HEAP16[$1265>>1] = $1262;
     $1266 = HEAP32[$8>>2]|0;
     $1267 = (($1266) + 1)|0;
     HEAP32[$8>>2] = $1267;
    }
    $1268 = HEAP32[$40>>2]|0;
    $1269 = ((($1268)) + 1592|0);
    $1270 = HEAP32[$1269>>2]|0;
    _qsort($39,$1270,4,6);
    HEAP32[$8>>2] = 0;
    while(1) {
     $1271 = HEAP32[$8>>2]|0;
     $1272 = HEAP32[$40>>2]|0;
     $1273 = ((($1272)) + 1592|0);
     $1274 = HEAP32[$1273>>2]|0;
     $1275 = ($1271|0)<($1274|0);
     if (!($1275)) {
      break;
     }
     $1276 = HEAP32[$8>>2]|0;
     $1277 = (($39) + ($1276<<2)|0);
     $1278 = ((($1277)) + 2|0);
     $1279 = HEAP16[$1278>>1]|0;
     $1280 = $1279&255;
     $1281 = HEAP32[$40>>2]|0;
     $1282 = ((($1281)) + 838|0);
     $1283 = HEAP32[$8>>2]|0;
     $1284 = (($1282) + ($1283)|0);
     HEAP8[$1284>>0] = $1280;
     $1285 = HEAP32[$8>>2]|0;
     $1286 = (($1285) + 1)|0;
     HEAP32[$8>>2] = $1286;
    }
    HEAP32[$8>>2] = 2;
    while(1) {
     $1287 = HEAP32[$8>>2]|0;
     $1288 = HEAP32[$40>>2]|0;
     $1289 = ((($1288)) + 1592|0);
     $1290 = HEAP32[$1289>>2]|0;
     $1291 = ($1287|0)<($1290|0);
     $1292 = HEAP32[$40>>2]|0;
     if (!($1291)) {
      break;
     }
     $1293 = ((($1292)) + 338|0);
     $1294 = HEAP32[$8>>2]|0;
     _neighbors($1293,$1294,$43,$44);
     $1295 = HEAP32[$43>>2]|0;
     $1296 = $1295&255;
     $1297 = HEAP32[$40>>2]|0;
     $1298 = ((($1297)) + 1088|0);
     $1299 = HEAP32[$8>>2]|0;
     $1300 = (($1298) + ($1299<<1)|0);
     HEAP8[$1300>>0] = $1296;
     $1301 = HEAP32[$44>>2]|0;
     $1302 = $1301&255;
     $1303 = HEAP32[$40>>2]|0;
     $1304 = ((($1303)) + 1088|0);
     $1305 = HEAP32[$8>>2]|0;
     $1306 = (($1304) + ($1305<<1)|0);
     $1307 = ((($1306)) + 1|0);
     HEAP8[$1307>>0] = $1302;
     $1308 = HEAP32[$8>>2]|0;
     $1309 = (($1308) + 1)|0;
     HEAP32[$8>>2] = $1309;
    }
    $1310 = ((($1292)) + 1592|0);
    $1311 = HEAP32[$1310>>2]|0;
    $1312 = HEAP32[$11>>2]|0;
    $1313 = ($1311|0)>($1312|0);
    if ($1313) {
     $1314 = HEAP32[$40>>2]|0;
     $1315 = ((($1314)) + 1592|0);
     $1316 = HEAP32[$1315>>2]|0;
     HEAP32[$11>>2] = $1316;
    }
    $1317 = HEAP32[$7>>2]|0;
    $1318 = (($1317) + 1)|0;
    HEAP32[$7>>2] = $1318;
   }
   if ((label|0) == 185) {
    $1016 = (_error($1015,20)|0);
    HEAP32[$1>>2] = $1016;
    $2087 = HEAP32[$1>>2]|0;
    STACKTOP = sp;return ($2087|0);
   }
   else if ((label|0) == 187) {
    HEAP32[$38>>2] = $1027;
    $1028 = HEAP32[$2>>2]|0;
    $1029 = (_get_bits($1028,8)|0);
    $1030 = $1029&255;
    $1031 = HEAP32[$38>>2]|0;
    HEAP8[$1031>>0] = $1030;
    $1032 = HEAP32[$2>>2]|0;
    $1033 = (_get_bits($1032,16)|0);
    $1034 = $1033&65535;
    $1035 = HEAP32[$38>>2]|0;
    $1036 = ((($1035)) + 2|0);
    HEAP16[$1036>>1] = $1034;
    $1037 = HEAP32[$2>>2]|0;
    $1038 = (_get_bits($1037,16)|0);
    $1039 = $1038&65535;
    $1040 = HEAP32[$38>>2]|0;
    $1041 = ((($1040)) + 4|0);
    HEAP16[$1041>>1] = $1039;
    $1042 = HEAP32[$2>>2]|0;
    $1043 = (_get_bits($1042,6)|0);
    $1044 = $1043&255;
    $1045 = HEAP32[$38>>2]|0;
    $1046 = ((($1045)) + 6|0);
    HEAP8[$1046>>0] = $1044;
    $1047 = HEAP32[$2>>2]|0;
    $1048 = (_get_bits($1047,8)|0);
    $1049 = $1048&255;
    $1050 = HEAP32[$38>>2]|0;
    $1051 = ((($1050)) + 7|0);
    HEAP8[$1051>>0] = $1049;
    $1052 = HEAP32[$2>>2]|0;
    $1053 = (_get_bits($1052,4)|0);
    $1054 = (($1053) + 1)|0;
    $1055 = $1054&255;
    $1056 = HEAP32[$38>>2]|0;
    $1057 = ((($1056)) + 8|0);
    HEAP8[$1057>>0] = $1055;
    HEAP32[$8>>2] = 0;
    while(1) {
     $1058 = HEAP32[$8>>2]|0;
     $1059 = HEAP32[$38>>2]|0;
     $1060 = ((($1059)) + 8|0);
     $1061 = HEAP8[$1060>>0]|0;
     $1062 = $1061&255;
     $1063 = ($1058|0)<($1062|0);
     $1064 = HEAP32[$2>>2]|0;
     if (!($1063)) {
      break;
     }
     $1065 = (_get_bits($1064,8)|0);
     $1066 = $1065&255;
     $1067 = HEAP32[$38>>2]|0;
     $1068 = ((($1067)) + 9|0);
     $1069 = HEAP32[$8>>2]|0;
     $1070 = (($1068) + ($1069)|0);
     HEAP8[$1070>>0] = $1066;
     $1071 = HEAP32[$8>>2]|0;
     $1072 = (($1071) + 1)|0;
     HEAP32[$8>>2] = $1072;
    }
    $1073 = (_error($1064,4)|0);
    HEAP32[$1>>2] = $1073;
    $2087 = HEAP32[$1>>2]|0;
    STACKTOP = sp;return ($2087|0);
   }
   else if ((label|0) == 200) {
    $1147 = HEAP32[$2>>2]|0;
    $1148 = (_error($1147,20)|0);
    HEAP32[$1>>2] = $1148;
    $2087 = HEAP32[$1>>2]|0;
    STACKTOP = sp;return ($2087|0);
   }
   else if ((label|0) == 204) {
    $1180 = HEAP32[$2>>2]|0;
    $1181 = (_error($1180,20)|0);
    HEAP32[$1>>2] = $1181;
    $2087 = HEAP32[$1>>2]|0;
    STACKTOP = sp;return ($2087|0);
   }
   else if ((label|0) == 225) {
    $1319 = (_get_bits($1001,6)|0);
    $1320 = (($1319) + 1)|0;
    $1321 = HEAP32[$2>>2]|0;
    $1322 = ((($1321)) + 264|0);
    HEAP32[$1322>>2] = $1320;
    $1323 = HEAP32[$2>>2]|0;
    $1324 = HEAP32[$2>>2]|0;
    $1325 = ((($1324)) + 264|0);
    $1326 = HEAP32[$1325>>2]|0;
    $1327 = ($1326*24)|0;
    $1328 = (_setup_malloc($1323,$1327)|0);
    $1329 = HEAP32[$2>>2]|0;
    $1330 = ((($1329)) + 396|0);
    HEAP32[$1330>>2] = $1328;
    $1331 = HEAP32[$2>>2]|0;
    $1332 = ((($1331)) + 396|0);
    $1333 = HEAP32[$1332>>2]|0;
    $1334 = ($1333|0)==(0|0);
    $1335 = HEAP32[$2>>2]|0;
    if ($1334) {
     $1336 = (_error($1335,3)|0);
     HEAP32[$1>>2] = $1336;
     $2087 = HEAP32[$1>>2]|0;
     STACKTOP = sp;return ($2087|0);
    }
    $1337 = ((($1335)) + 396|0);
    $1338 = HEAP32[$1337>>2]|0;
    $1339 = HEAP32[$2>>2]|0;
    $1340 = ((($1339)) + 264|0);
    $1341 = HEAP32[$1340>>2]|0;
    $1342 = ($1341*24)|0;
    _memset(($1338|0),0,($1342|0))|0;
    HEAP32[$7>>2] = 0;
    L298: while(1) {
     $1343 = HEAP32[$7>>2]|0;
     $1344 = HEAP32[$2>>2]|0;
     $1345 = ((($1344)) + 264|0);
     $1346 = HEAP32[$1345>>2]|0;
     $1347 = ($1343|0)<($1346|0);
     $1348 = HEAP32[$2>>2]|0;
     if (!($1347)) {
      label = 263;
      break;
     }
     $1349 = ((($1348)) + 396|0);
     $1350 = HEAP32[$1349>>2]|0;
     $1351 = HEAP32[$7>>2]|0;
     $1352 = (($1350) + (($1351*24)|0)|0);
     HEAP32[$46>>2] = $1352;
     $1353 = HEAP32[$2>>2]|0;
     $1354 = (_get_bits($1353,16)|0);
     $1355 = $1354&65535;
     $1356 = HEAP32[$2>>2]|0;
     $1357 = ((($1356)) + 268|0);
     $1358 = HEAP32[$7>>2]|0;
     $1359 = (($1357) + ($1358<<1)|0);
     HEAP16[$1359>>1] = $1355;
     $1360 = HEAP32[$2>>2]|0;
     $1361 = ((($1360)) + 268|0);
     $1362 = HEAP32[$7>>2]|0;
     $1363 = (($1361) + ($1362<<1)|0);
     $1364 = HEAP16[$1363>>1]|0;
     $1365 = $1364&65535;
     $1366 = ($1365|0)>(2);
     $1367 = HEAP32[$2>>2]|0;
     if ($1366) {
      label = 230;
      break;
     }
     $1369 = (_get_bits($1367,24)|0);
     $1370 = HEAP32[$46>>2]|0;
     HEAP32[$1370>>2] = $1369;
     $1371 = HEAP32[$2>>2]|0;
     $1372 = (_get_bits($1371,24)|0);
     $1373 = HEAP32[$46>>2]|0;
     $1374 = ((($1373)) + 4|0);
     HEAP32[$1374>>2] = $1372;
     $1375 = HEAP32[$46>>2]|0;
     $1376 = ((($1375)) + 4|0);
     $1377 = HEAP32[$1376>>2]|0;
     $1378 = HEAP32[$46>>2]|0;
     $1379 = HEAP32[$1378>>2]|0;
     $1380 = ($1377>>>0)<($1379>>>0);
     $1381 = HEAP32[$2>>2]|0;
     if ($1380) {
      label = 232;
      break;
     }
     $1383 = (_get_bits($1381,24)|0);
     $1384 = (($1383) + 1)|0;
     $1385 = HEAP32[$46>>2]|0;
     $1386 = ((($1385)) + 8|0);
     HEAP32[$1386>>2] = $1384;
     $1387 = HEAP32[$2>>2]|0;
     $1388 = (_get_bits($1387,6)|0);
     $1389 = (($1388) + 1)|0;
     $1390 = $1389&255;
     $1391 = HEAP32[$46>>2]|0;
     $1392 = ((($1391)) + 12|0);
     HEAP8[$1392>>0] = $1390;
     $1393 = HEAP32[$2>>2]|0;
     $1394 = (_get_bits($1393,8)|0);
     $1395 = $1394&255;
     $1396 = HEAP32[$46>>2]|0;
     $1397 = ((($1396)) + 13|0);
     HEAP8[$1397>>0] = $1395;
     $1398 = HEAP32[$46>>2]|0;
     $1399 = ((($1398)) + 13|0);
     $1400 = HEAP8[$1399>>0]|0;
     $1401 = $1400&255;
     $1402 = HEAP32[$2>>2]|0;
     $1403 = ((($1402)) + 120|0);
     $1404 = HEAP32[$1403>>2]|0;
     $1405 = ($1401|0)>=($1404|0);
     if ($1405) {
      label = 234;
      break;
     }
     HEAP32[$8>>2] = 0;
     while(1) {
      $1408 = HEAP32[$8>>2]|0;
      $1409 = HEAP32[$46>>2]|0;
      $1410 = ((($1409)) + 12|0);
      $1411 = HEAP8[$1410>>0]|0;
      $1412 = $1411&255;
      $1413 = ($1408|0)<($1412|0);
      if (!($1413)) {
       break;
      }
      HEAP8[$47>>0] = 0;
      $1414 = HEAP32[$2>>2]|0;
      $1415 = (_get_bits($1414,3)|0);
      $1416 = $1415&255;
      HEAP8[$48>>0] = $1416;
      $1417 = HEAP32[$2>>2]|0;
      $1418 = (_get_bits($1417,1)|0);
      $1419 = ($1418|0)!=(0);
      if ($1419) {
       $1420 = HEAP32[$2>>2]|0;
       $1421 = (_get_bits($1420,5)|0);
       $1422 = $1421&255;
       HEAP8[$47>>0] = $1422;
      }
      $1423 = HEAP8[$47>>0]|0;
      $1424 = $1423&255;
      $1425 = $1424<<3;
      $1426 = HEAP8[$48>>0]|0;
      $1427 = $1426&255;
      $1428 = (($1425) + ($1427))|0;
      $1429 = $1428&255;
      $1430 = HEAP32[$8>>2]|0;
      $1431 = (($45) + ($1430)|0);
      HEAP8[$1431>>0] = $1429;
      $1432 = HEAP32[$8>>2]|0;
      $1433 = (($1432) + 1)|0;
      HEAP32[$8>>2] = $1433;
     }
     $1434 = HEAP32[$2>>2]|0;
     $1435 = HEAP32[$46>>2]|0;
     $1436 = ((($1435)) + 12|0);
     $1437 = HEAP8[$1436>>0]|0;
     $1438 = $1437&255;
     $1439 = $1438<<4;
     $1440 = (_setup_malloc($1434,$1439)|0);
     $1441 = HEAP32[$46>>2]|0;
     $1442 = ((($1441)) + 20|0);
     HEAP32[$1442>>2] = $1440;
     $1443 = HEAP32[$46>>2]|0;
     $1444 = ((($1443)) + 20|0);
     $1445 = HEAP32[$1444>>2]|0;
     $1446 = ($1445|0)==(0|0);
     if ($1446) {
      label = 241;
      break;
     }
     HEAP32[$8>>2] = 0;
     while(1) {
      $1449 = HEAP32[$8>>2]|0;
      $1450 = HEAP32[$46>>2]|0;
      $1451 = ((($1450)) + 12|0);
      $1452 = HEAP8[$1451>>0]|0;
      $1453 = $1452&255;
      $1454 = ($1449|0)<($1453|0);
      if (!($1454)) {
       break;
      }
      HEAP32[$9>>2] = 0;
      while(1) {
       $1455 = HEAP32[$9>>2]|0;
       $1456 = ($1455|0)<(8);
       $1457 = HEAP32[$8>>2]|0;
       if (!($1456)) {
        break;
       }
       $1458 = (($45) + ($1457)|0);
       $1459 = HEAP8[$1458>>0]|0;
       $1460 = $1459&255;
       $1461 = HEAP32[$9>>2]|0;
       $1462 = 1 << $1461;
       $1463 = $1460 & $1462;
       $1464 = ($1463|0)!=(0);
       if ($1464) {
        $1465 = HEAP32[$2>>2]|0;
        $1466 = (_get_bits($1465,8)|0);
        $1467 = $1466&65535;
        $1468 = HEAP32[$46>>2]|0;
        $1469 = ((($1468)) + 20|0);
        $1470 = HEAP32[$1469>>2]|0;
        $1471 = HEAP32[$8>>2]|0;
        $1472 = (($1470) + ($1471<<4)|0);
        $1473 = HEAP32[$9>>2]|0;
        $1474 = (($1472) + ($1473<<1)|0);
        HEAP16[$1474>>1] = $1467;
        $1475 = HEAP32[$46>>2]|0;
        $1476 = ((($1475)) + 20|0);
        $1477 = HEAP32[$1476>>2]|0;
        $1478 = HEAP32[$8>>2]|0;
        $1479 = (($1477) + ($1478<<4)|0);
        $1480 = HEAP32[$9>>2]|0;
        $1481 = (($1479) + ($1480<<1)|0);
        $1482 = HEAP16[$1481>>1]|0;
        $1483 = $1482 << 16 >> 16;
        $1484 = HEAP32[$2>>2]|0;
        $1485 = ((($1484)) + 120|0);
        $1486 = HEAP32[$1485>>2]|0;
        $1487 = ($1483|0)>=($1486|0);
        if ($1487) {
         label = 248;
         break L298;
        }
       } else {
        $1490 = HEAP32[$46>>2]|0;
        $1491 = ((($1490)) + 20|0);
        $1492 = HEAP32[$1491>>2]|0;
        $1493 = HEAP32[$8>>2]|0;
        $1494 = (($1492) + ($1493<<4)|0);
        $1495 = HEAP32[$9>>2]|0;
        $1496 = (($1494) + ($1495<<1)|0);
        HEAP16[$1496>>1] = -1;
       }
       $1497 = HEAP32[$9>>2]|0;
       $1498 = (($1497) + 1)|0;
       HEAP32[$9>>2] = $1498;
      }
      $1499 = (($1457) + 1)|0;
      HEAP32[$8>>2] = $1499;
     }
     $1500 = HEAP32[$2>>2]|0;
     $1501 = HEAP32[$2>>2]|0;
     $1502 = ((($1501)) + 124|0);
     $1503 = HEAP32[$1502>>2]|0;
     $1504 = HEAP32[$46>>2]|0;
     $1505 = ((($1504)) + 13|0);
     $1506 = HEAP8[$1505>>0]|0;
     $1507 = $1506&255;
     $1508 = (($1503) + (($1507*2096)|0)|0);
     $1509 = ((($1508)) + 4|0);
     $1510 = HEAP32[$1509>>2]|0;
     $1511 = $1510<<2;
     $1512 = (_setup_malloc($1500,$1511)|0);
     $1513 = HEAP32[$46>>2]|0;
     $1514 = ((($1513)) + 16|0);
     HEAP32[$1514>>2] = $1512;
     $1515 = HEAP32[$46>>2]|0;
     $1516 = ((($1515)) + 16|0);
     $1517 = HEAP32[$1516>>2]|0;
     $1518 = ($1517|0)!=(0|0);
     if (!($1518)) {
      label = 253;
      break;
     }
     $1521 = HEAP32[$46>>2]|0;
     $1522 = ((($1521)) + 16|0);
     $1523 = HEAP32[$1522>>2]|0;
     $1524 = HEAP32[$2>>2]|0;
     $1525 = ((($1524)) + 124|0);
     $1526 = HEAP32[$1525>>2]|0;
     $1527 = HEAP32[$46>>2]|0;
     $1528 = ((($1527)) + 13|0);
     $1529 = HEAP8[$1528>>0]|0;
     $1530 = $1529&255;
     $1531 = (($1526) + (($1530*2096)|0)|0);
     $1532 = ((($1531)) + 4|0);
     $1533 = HEAP32[$1532>>2]|0;
     $1534 = $1533<<2;
     _memset(($1523|0),0,($1534|0))|0;
     HEAP32[$8>>2] = 0;
     while(1) {
      $1535 = HEAP32[$8>>2]|0;
      $1536 = HEAP32[$2>>2]|0;
      $1537 = ((($1536)) + 124|0);
      $1538 = HEAP32[$1537>>2]|0;
      $1539 = HEAP32[$46>>2]|0;
      $1540 = ((($1539)) + 13|0);
      $1541 = HEAP8[$1540>>0]|0;
      $1542 = $1541&255;
      $1543 = (($1538) + (($1542*2096)|0)|0);
      $1544 = ((($1543)) + 4|0);
      $1545 = HEAP32[$1544>>2]|0;
      $1546 = ($1535|0)<($1545|0);
      if (!($1546)) {
       break;
      }
      $1547 = HEAP32[$2>>2]|0;
      $1548 = ((($1547)) + 124|0);
      $1549 = HEAP32[$1548>>2]|0;
      $1550 = HEAP32[$46>>2]|0;
      $1551 = ((($1550)) + 13|0);
      $1552 = HEAP8[$1551>>0]|0;
      $1553 = $1552&255;
      $1554 = (($1549) + (($1553*2096)|0)|0);
      $1555 = HEAP32[$1554>>2]|0;
      HEAP32[$49>>2] = $1555;
      $1556 = HEAP32[$8>>2]|0;
      HEAP32[$50>>2] = $1556;
      $1557 = HEAP32[$2>>2]|0;
      $1558 = HEAP32[$49>>2]|0;
      $1559 = $1558;
      $1560 = (_setup_malloc($1557,$1559)|0);
      $1561 = HEAP32[$46>>2]|0;
      $1562 = ((($1561)) + 16|0);
      $1563 = HEAP32[$1562>>2]|0;
      $1564 = HEAP32[$8>>2]|0;
      $1565 = (($1563) + ($1564<<2)|0);
      HEAP32[$1565>>2] = $1560;
      $1566 = HEAP32[$46>>2]|0;
      $1567 = ((($1566)) + 16|0);
      $1568 = HEAP32[$1567>>2]|0;
      $1569 = HEAP32[$8>>2]|0;
      $1570 = (($1568) + ($1569<<2)|0);
      $1571 = HEAP32[$1570>>2]|0;
      $1572 = ($1571|0)==(0|0);
      if ($1572) {
       label = 257;
       break L298;
      }
      $1575 = HEAP32[$49>>2]|0;
      $1576 = (($1575) - 1)|0;
      HEAP32[$9>>2] = $1576;
      while(1) {
       $1577 = HEAP32[$9>>2]|0;
       $1578 = ($1577|0)>=(0);
       if (!($1578)) {
        break;
       }
       $1579 = HEAP32[$50>>2]|0;
       $1580 = HEAP32[$46>>2]|0;
       $1581 = ((($1580)) + 12|0);
       $1582 = HEAP8[$1581>>0]|0;
       $1583 = $1582&255;
       $1584 = (($1579|0) % ($1583|0))&-1;
       $1585 = $1584&255;
       $1586 = HEAP32[$46>>2]|0;
       $1587 = ((($1586)) + 16|0);
       $1588 = HEAP32[$1587>>2]|0;
       $1589 = HEAP32[$8>>2]|0;
       $1590 = (($1588) + ($1589<<2)|0);
       $1591 = HEAP32[$1590>>2]|0;
       $1592 = HEAP32[$9>>2]|0;
       $1593 = (($1591) + ($1592)|0);
       HEAP8[$1593>>0] = $1585;
       $1594 = HEAP32[$46>>2]|0;
       $1595 = ((($1594)) + 12|0);
       $1596 = HEAP8[$1595>>0]|0;
       $1597 = $1596&255;
       $1598 = HEAP32[$50>>2]|0;
       $1599 = (($1598|0) / ($1597|0))&-1;
       HEAP32[$50>>2] = $1599;
       $1600 = HEAP32[$9>>2]|0;
       $1601 = (($1600) + -1)|0;
       HEAP32[$9>>2] = $1601;
      }
      $1602 = HEAP32[$8>>2]|0;
      $1603 = (($1602) + 1)|0;
      HEAP32[$8>>2] = $1603;
     }
     $1604 = HEAP32[$7>>2]|0;
     $1605 = (($1604) + 1)|0;
     HEAP32[$7>>2] = $1605;
    }
    if ((label|0) == 230) {
     $1368 = (_error($1367,20)|0);
     HEAP32[$1>>2] = $1368;
     $2087 = HEAP32[$1>>2]|0;
     STACKTOP = sp;return ($2087|0);
    }
    else if ((label|0) == 232) {
     $1382 = (_error($1381,20)|0);
     HEAP32[$1>>2] = $1382;
     $2087 = HEAP32[$1>>2]|0;
     STACKTOP = sp;return ($2087|0);
    }
    else if ((label|0) == 234) {
     $1406 = HEAP32[$2>>2]|0;
     $1407 = (_error($1406,20)|0);
     HEAP32[$1>>2] = $1407;
     $2087 = HEAP32[$1>>2]|0;
     STACKTOP = sp;return ($2087|0);
    }
    else if ((label|0) == 241) {
     $1447 = HEAP32[$2>>2]|0;
     $1448 = (_error($1447,3)|0);
     HEAP32[$1>>2] = $1448;
     $2087 = HEAP32[$1>>2]|0;
     STACKTOP = sp;return ($2087|0);
    }
    else if ((label|0) == 248) {
     $1488 = HEAP32[$2>>2]|0;
     $1489 = (_error($1488,20)|0);
     HEAP32[$1>>2] = $1489;
     $2087 = HEAP32[$1>>2]|0;
     STACKTOP = sp;return ($2087|0);
    }
    else if ((label|0) == 253) {
     $1519 = HEAP32[$2>>2]|0;
     $1520 = (_error($1519,3)|0);
     HEAP32[$1>>2] = $1520;
     $2087 = HEAP32[$1>>2]|0;
     STACKTOP = sp;return ($2087|0);
    }
    else if ((label|0) == 257) {
     $1573 = HEAP32[$2>>2]|0;
     $1574 = (_error($1573,3)|0);
     HEAP32[$1>>2] = $1574;
     $2087 = HEAP32[$1>>2]|0;
     STACKTOP = sp;return ($2087|0);
    }
    else if ((label|0) == 263) {
     $1606 = (_get_bits($1348,6)|0);
     $1607 = (($1606) + 1)|0;
     $1608 = HEAP32[$2>>2]|0;
     $1609 = ((($1608)) + 400|0);
     HEAP32[$1609>>2] = $1607;
     $1610 = HEAP32[$2>>2]|0;
     $1611 = HEAP32[$2>>2]|0;
     $1612 = ((($1611)) + 400|0);
     $1613 = HEAP32[$1612>>2]|0;
     $1614 = ($1613*40)|0;
     $1615 = (_setup_malloc($1610,$1614)|0);
     $1616 = HEAP32[$2>>2]|0;
     $1617 = ((($1616)) + 404|0);
     HEAP32[$1617>>2] = $1615;
     $1618 = HEAP32[$2>>2]|0;
     $1619 = ((($1618)) + 404|0);
     $1620 = HEAP32[$1619>>2]|0;
     $1621 = ($1620|0)==(0|0);
     $1622 = HEAP32[$2>>2]|0;
     if ($1621) {
      $1623 = (_error($1622,3)|0);
      HEAP32[$1>>2] = $1623;
      $2087 = HEAP32[$1>>2]|0;
      STACKTOP = sp;return ($2087|0);
     }
     $1624 = ((($1622)) + 404|0);
     $1625 = HEAP32[$1624>>2]|0;
     $1626 = HEAP32[$2>>2]|0;
     $1627 = ((($1626)) + 400|0);
     $1628 = HEAP32[$1627>>2]|0;
     $1629 = ($1628*40)|0;
     _memset(($1625|0),0,($1629|0))|0;
     HEAP32[$7>>2] = 0;
     L340: while(1) {
      $1630 = HEAP32[$7>>2]|0;
      $1631 = HEAP32[$2>>2]|0;
      $1632 = ((($1631)) + 400|0);
      $1633 = HEAP32[$1632>>2]|0;
      $1634 = ($1630|0)<($1633|0);
      $1635 = HEAP32[$2>>2]|0;
      if (!($1634)) {
       label = 304;
       break;
      }
      $1636 = ((($1635)) + 404|0);
      $1637 = HEAP32[$1636>>2]|0;
      $1638 = HEAP32[$7>>2]|0;
      $1639 = (($1637) + (($1638*40)|0)|0);
      HEAP32[$51>>2] = $1639;
      $1640 = HEAP32[$2>>2]|0;
      $1641 = (_get_bits($1640,16)|0);
      HEAP32[$52>>2] = $1641;
      $1642 = HEAP32[$52>>2]|0;
      $1643 = ($1642|0)!=(0);
      $1644 = HEAP32[$2>>2]|0;
      if ($1643) {
       label = 268;
       break;
      }
      $1646 = HEAP32[$2>>2]|0;
      $1647 = ((($1646)) + 4|0);
      $1648 = HEAP32[$1647>>2]|0;
      $1649 = ($1648*3)|0;
      $1650 = (_setup_malloc($1644,$1649)|0);
      $1651 = HEAP32[$51>>2]|0;
      $1652 = ((($1651)) + 4|0);
      HEAP32[$1652>>2] = $1650;
      $1653 = HEAP32[$51>>2]|0;
      $1654 = ((($1653)) + 4|0);
      $1655 = HEAP32[$1654>>2]|0;
      $1656 = ($1655|0)==(0|0);
      $1657 = HEAP32[$2>>2]|0;
      if ($1656) {
       label = 270;
       break;
      }
      $1659 = (_get_bits($1657,1)|0);
      $1660 = ($1659|0)!=(0);
      if ($1660) {
       $1661 = HEAP32[$2>>2]|0;
       $1662 = (_get_bits($1661,4)|0);
       $1663 = (($1662) + 1)|0;
       $1664 = $1663&255;
       $1665 = HEAP32[$51>>2]|0;
       $$sink10 = $1664;$$sink12 = $1665;
      } else {
       $1666 = HEAP32[$51>>2]|0;
       $$sink10 = 1;$$sink12 = $1666;
      }
      $1667 = ((($$sink12)) + 8|0);
      HEAP8[$1667>>0] = $$sink10;
      $1668 = HEAP32[$51>>2]|0;
      $1669 = ((($1668)) + 8|0);
      $1670 = HEAP8[$1669>>0]|0;
      $1671 = $1670&255;
      $1672 = HEAP32[$10>>2]|0;
      $1673 = ($1671|0)>($1672|0);
      if ($1673) {
       $1674 = HEAP32[$51>>2]|0;
       $1675 = ((($1674)) + 8|0);
       $1676 = HEAP8[$1675>>0]|0;
       $1677 = $1676&255;
       HEAP32[$10>>2] = $1677;
      }
      $1678 = HEAP32[$2>>2]|0;
      $1679 = (_get_bits($1678,1)|0);
      $1680 = ($1679|0)!=(0);
      L352: do {
       if ($1680) {
        $1681 = HEAP32[$2>>2]|0;
        $1682 = (_get_bits($1681,8)|0);
        $1683 = (($1682) + 1)|0;
        $1684 = $1683&65535;
        $1685 = HEAP32[$51>>2]|0;
        HEAP16[$1685>>1] = $1684;
        HEAP32[$9>>2] = 0;
        while(1) {
         $1686 = HEAP32[$9>>2]|0;
         $1687 = HEAP32[$51>>2]|0;
         $1688 = HEAP16[$1687>>1]|0;
         $1689 = $1688&65535;
         $1690 = ($1686|0)<($1689|0);
         if (!($1690)) {
          break L352;
         }
         $1691 = HEAP32[$2>>2]|0;
         $1692 = HEAP32[$2>>2]|0;
         $1693 = ((($1692)) + 4|0);
         $1694 = HEAP32[$1693>>2]|0;
         $1695 = (($1694) - 1)|0;
         $1696 = (_ilog($1695)|0);
         $1697 = (_get_bits($1691,$1696)|0);
         $1698 = $1697&255;
         $1699 = HEAP32[$51>>2]|0;
         $1700 = ((($1699)) + 4|0);
         $1701 = HEAP32[$1700>>2]|0;
         $1702 = HEAP32[$9>>2]|0;
         $1703 = (($1701) + (($1702*3)|0)|0);
         HEAP8[$1703>>0] = $1698;
         $1704 = HEAP32[$2>>2]|0;
         $1705 = HEAP32[$2>>2]|0;
         $1706 = ((($1705)) + 4|0);
         $1707 = HEAP32[$1706>>2]|0;
         $1708 = (($1707) - 1)|0;
         $1709 = (_ilog($1708)|0);
         $1710 = (_get_bits($1704,$1709)|0);
         $1711 = $1710&255;
         $1712 = HEAP32[$51>>2]|0;
         $1713 = ((($1712)) + 4|0);
         $1714 = HEAP32[$1713>>2]|0;
         $1715 = HEAP32[$9>>2]|0;
         $1716 = (($1714) + (($1715*3)|0)|0);
         $1717 = ((($1716)) + 1|0);
         HEAP8[$1717>>0] = $1711;
         $1718 = HEAP32[$51>>2]|0;
         $1719 = ((($1718)) + 4|0);
         $1720 = HEAP32[$1719>>2]|0;
         $1721 = HEAP32[$9>>2]|0;
         $1722 = (($1720) + (($1721*3)|0)|0);
         $1723 = HEAP8[$1722>>0]|0;
         $1724 = $1723&255;
         $1725 = HEAP32[$2>>2]|0;
         $1726 = ((($1725)) + 4|0);
         $1727 = HEAP32[$1726>>2]|0;
         $1728 = ($1724|0)>=($1727|0);
         if ($1728) {
          label = 280;
          break L340;
         }
         $1731 = HEAP32[$51>>2]|0;
         $1732 = ((($1731)) + 4|0);
         $1733 = HEAP32[$1732>>2]|0;
         $1734 = HEAP32[$9>>2]|0;
         $1735 = (($1733) + (($1734*3)|0)|0);
         $1736 = ((($1735)) + 1|0);
         $1737 = HEAP8[$1736>>0]|0;
         $1738 = $1737&255;
         $1739 = HEAP32[$2>>2]|0;
         $1740 = ((($1739)) + 4|0);
         $1741 = HEAP32[$1740>>2]|0;
         $1742 = ($1738|0)>=($1741|0);
         if ($1742) {
          label = 282;
          break L340;
         }
         $1745 = HEAP32[$51>>2]|0;
         $1746 = ((($1745)) + 4|0);
         $1747 = HEAP32[$1746>>2]|0;
         $1748 = HEAP32[$9>>2]|0;
         $1749 = (($1747) + (($1748*3)|0)|0);
         $1750 = HEAP8[$1749>>0]|0;
         $1751 = $1750&255;
         $1752 = HEAP32[$51>>2]|0;
         $1753 = ((($1752)) + 4|0);
         $1754 = HEAP32[$1753>>2]|0;
         $1755 = HEAP32[$9>>2]|0;
         $1756 = (($1754) + (($1755*3)|0)|0);
         $1757 = ((($1756)) + 1|0);
         $1758 = HEAP8[$1757>>0]|0;
         $1759 = $1758&255;
         $1760 = ($1751|0)==($1759|0);
         if ($1760) {
          label = 284;
          break L340;
         }
         $1763 = HEAP32[$9>>2]|0;
         $1764 = (($1763) + 1)|0;
         HEAP32[$9>>2] = $1764;
        }
       } else {
        $1765 = HEAP32[$51>>2]|0;
        HEAP16[$1765>>1] = 0;
       }
      } while(0);
      $1766 = HEAP32[$2>>2]|0;
      $1767 = (_get_bits($1766,2)|0);
      $1768 = ($1767|0)!=(0);
      if ($1768) {
       label = 288;
       break;
      }
      $1771 = HEAP32[$51>>2]|0;
      $1772 = ((($1771)) + 8|0);
      $1773 = HEAP8[$1772>>0]|0;
      $1774 = $1773&255;
      $1775 = ($1774|0)>(1);
      HEAP32[$8>>2] = 0;
      L363: do {
       if ($1775) {
        while(1) {
         $1776 = HEAP32[$8>>2]|0;
         $1777 = HEAP32[$2>>2]|0;
         $1778 = ((($1777)) + 4|0);
         $1779 = HEAP32[$1778>>2]|0;
         $1780 = ($1776|0)<($1779|0);
         if (!($1780)) {
          break L363;
         }
         $1781 = HEAP32[$2>>2]|0;
         $1782 = (_get_bits($1781,4)|0);
         $1783 = $1782&255;
         $1784 = HEAP32[$51>>2]|0;
         $1785 = ((($1784)) + 4|0);
         $1786 = HEAP32[$1785>>2]|0;
         $1787 = HEAP32[$8>>2]|0;
         $1788 = (($1786) + (($1787*3)|0)|0);
         $1789 = ((($1788)) + 2|0);
         HEAP8[$1789>>0] = $1783;
         $1790 = HEAP32[$51>>2]|0;
         $1791 = ((($1790)) + 4|0);
         $1792 = HEAP32[$1791>>2]|0;
         $1793 = HEAP32[$8>>2]|0;
         $1794 = (($1792) + (($1793*3)|0)|0);
         $1795 = ((($1794)) + 2|0);
         $1796 = HEAP8[$1795>>0]|0;
         $1797 = $1796&255;
         $1798 = HEAP32[$51>>2]|0;
         $1799 = ((($1798)) + 8|0);
         $1800 = HEAP8[$1799>>0]|0;
         $1801 = $1800&255;
         $1802 = ($1797|0)>=($1801|0);
         if ($1802) {
          label = 292;
          break L340;
         }
         $1805 = HEAP32[$8>>2]|0;
         $1806 = (($1805) + 1)|0;
         HEAP32[$8>>2] = $1806;
        }
       } else {
        while(1) {
         $1807 = HEAP32[$8>>2]|0;
         $1808 = HEAP32[$2>>2]|0;
         $1809 = ((($1808)) + 4|0);
         $1810 = HEAP32[$1809>>2]|0;
         $1811 = ($1807|0)<($1810|0);
         if (!($1811)) {
          break L363;
         }
         $1812 = HEAP32[$51>>2]|0;
         $1813 = ((($1812)) + 4|0);
         $1814 = HEAP32[$1813>>2]|0;
         $1815 = HEAP32[$8>>2]|0;
         $1816 = (($1814) + (($1815*3)|0)|0);
         $1817 = ((($1816)) + 2|0);
         HEAP8[$1817>>0] = 0;
         $1818 = HEAP32[$8>>2]|0;
         $1819 = (($1818) + 1)|0;
         HEAP32[$8>>2] = $1819;
        }
       }
      } while(0);
      HEAP32[$8>>2] = 0;
      while(1) {
       $1820 = HEAP32[$8>>2]|0;
       $1821 = HEAP32[$51>>2]|0;
       $1822 = ((($1821)) + 8|0);
       $1823 = HEAP8[$1822>>0]|0;
       $1824 = $1823&255;
       $1825 = ($1820|0)<($1824|0);
       if (!($1825)) {
        break;
       }
       $1826 = HEAP32[$2>>2]|0;
       (_get_bits($1826,8)|0);
       $1827 = HEAP32[$2>>2]|0;
       $1828 = (_get_bits($1827,8)|0);
       $1829 = $1828&255;
       $1830 = HEAP32[$51>>2]|0;
       $1831 = ((($1830)) + 9|0);
       $1832 = HEAP32[$8>>2]|0;
       $1833 = (($1831) + ($1832)|0);
       HEAP8[$1833>>0] = $1829;
       $1834 = HEAP32[$2>>2]|0;
       $1835 = (_get_bits($1834,8)|0);
       $1836 = $1835&255;
       $1837 = HEAP32[$51>>2]|0;
       $1838 = ((($1837)) + 24|0);
       $1839 = HEAP32[$8>>2]|0;
       $1840 = (($1838) + ($1839)|0);
       HEAP8[$1840>>0] = $1836;
       $1841 = HEAP32[$51>>2]|0;
       $1842 = ((($1841)) + 9|0);
       $1843 = HEAP32[$8>>2]|0;
       $1844 = (($1842) + ($1843)|0);
       $1845 = HEAP8[$1844>>0]|0;
       $1846 = $1845&255;
       $1847 = HEAP32[$2>>2]|0;
       $1848 = ((($1847)) + 128|0);
       $1849 = HEAP32[$1848>>2]|0;
       $1850 = ($1846|0)>=($1849|0);
       if ($1850) {
        label = 299;
        break L340;
       }
       $1853 = HEAP32[$51>>2]|0;
       $1854 = ((($1853)) + 24|0);
       $1855 = HEAP32[$8>>2]|0;
       $1856 = (($1854) + ($1855)|0);
       $1857 = HEAP8[$1856>>0]|0;
       $1858 = $1857&255;
       $1859 = HEAP32[$2>>2]|0;
       $1860 = ((($1859)) + 264|0);
       $1861 = HEAP32[$1860>>2]|0;
       $1862 = ($1858|0)>=($1861|0);
       if ($1862) {
        label = 301;
        break L340;
       }
       $1865 = HEAP32[$8>>2]|0;
       $1866 = (($1865) + 1)|0;
       HEAP32[$8>>2] = $1866;
      }
      $1867 = HEAP32[$7>>2]|0;
      $1868 = (($1867) + 1)|0;
      HEAP32[$7>>2] = $1868;
     }
     switch (label|0) {
      case 268: {
       $1645 = (_error($1644,20)|0);
       HEAP32[$1>>2] = $1645;
       $2087 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2087|0);
       break;
      }
      case 270: {
       $1658 = (_error($1657,3)|0);
       HEAP32[$1>>2] = $1658;
       $2087 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2087|0);
       break;
      }
      case 280: {
       $1729 = HEAP32[$2>>2]|0;
       $1730 = (_error($1729,20)|0);
       HEAP32[$1>>2] = $1730;
       $2087 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2087|0);
       break;
      }
      case 282: {
       $1743 = HEAP32[$2>>2]|0;
       $1744 = (_error($1743,20)|0);
       HEAP32[$1>>2] = $1744;
       $2087 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2087|0);
       break;
      }
      case 284: {
       $1761 = HEAP32[$2>>2]|0;
       $1762 = (_error($1761,20)|0);
       HEAP32[$1>>2] = $1762;
       $2087 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2087|0);
       break;
      }
      case 288: {
       $1769 = HEAP32[$2>>2]|0;
       $1770 = (_error($1769,20)|0);
       HEAP32[$1>>2] = $1770;
       $2087 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2087|0);
       break;
      }
      case 292: {
       $1803 = HEAP32[$2>>2]|0;
       $1804 = (_error($1803,20)|0);
       HEAP32[$1>>2] = $1804;
       $2087 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2087|0);
       break;
      }
      case 299: {
       $1851 = HEAP32[$2>>2]|0;
       $1852 = (_error($1851,20)|0);
       HEAP32[$1>>2] = $1852;
       $2087 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2087|0);
       break;
      }
      case 301: {
       $1863 = HEAP32[$2>>2]|0;
       $1864 = (_error($1863,20)|0);
       HEAP32[$1>>2] = $1864;
       $2087 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2087|0);
       break;
      }
      case 304: {
       $1869 = (_get_bits($1635,6)|0);
       $1870 = (($1869) + 1)|0;
       $1871 = HEAP32[$2>>2]|0;
       $1872 = ((($1871)) + 408|0);
       HEAP32[$1872>>2] = $1870;
       HEAP32[$7>>2] = 0;
       while(1) {
        $1873 = HEAP32[$7>>2]|0;
        $1874 = HEAP32[$2>>2]|0;
        $1875 = ((($1874)) + 408|0);
        $1876 = HEAP32[$1875>>2]|0;
        $1877 = ($1873|0)<($1876|0);
        $1878 = HEAP32[$2>>2]|0;
        if (!($1877)) {
         label = 313;
         break;
        }
        $1879 = ((($1878)) + 412|0);
        $1880 = HEAP32[$7>>2]|0;
        $1881 = (($1879) + (($1880*6)|0)|0);
        HEAP32[$53>>2] = $1881;
        $1882 = HEAP32[$2>>2]|0;
        $1883 = (_get_bits($1882,1)|0);
        $1884 = $1883&255;
        $1885 = HEAP32[$53>>2]|0;
        HEAP8[$1885>>0] = $1884;
        $1886 = HEAP32[$2>>2]|0;
        $1887 = (_get_bits($1886,16)|0);
        $1888 = $1887&65535;
        $1889 = HEAP32[$53>>2]|0;
        $1890 = ((($1889)) + 2|0);
        HEAP16[$1890>>1] = $1888;
        $1891 = HEAP32[$2>>2]|0;
        $1892 = (_get_bits($1891,16)|0);
        $1893 = $1892&65535;
        $1894 = HEAP32[$53>>2]|0;
        $1895 = ((($1894)) + 4|0);
        HEAP16[$1895>>1] = $1893;
        $1896 = HEAP32[$2>>2]|0;
        $1897 = (_get_bits($1896,8)|0);
        $1898 = $1897&255;
        $1899 = HEAP32[$53>>2]|0;
        $1900 = ((($1899)) + 1|0);
        HEAP8[$1900>>0] = $1898;
        $1901 = HEAP32[$53>>2]|0;
        $1902 = ((($1901)) + 2|0);
        $1903 = HEAP16[$1902>>1]|0;
        $1904 = $1903&65535;
        $1905 = ($1904|0)!=(0);
        if ($1905) {
         label = 307;
         break;
        }
        $1908 = HEAP32[$53>>2]|0;
        $1909 = ((($1908)) + 4|0);
        $1910 = HEAP16[$1909>>1]|0;
        $1911 = $1910&65535;
        $1912 = ($1911|0)!=(0);
        if ($1912) {
         label = 309;
         break;
        }
        $1915 = HEAP32[$53>>2]|0;
        $1916 = ((($1915)) + 1|0);
        $1917 = HEAP8[$1916>>0]|0;
        $1918 = $1917&255;
        $1919 = HEAP32[$2>>2]|0;
        $1920 = ((($1919)) + 400|0);
        $1921 = HEAP32[$1920>>2]|0;
        $1922 = ($1918|0)>=($1921|0);
        if ($1922) {
         label = 311;
         break;
        }
        $1925 = HEAP32[$7>>2]|0;
        $1926 = (($1925) + 1)|0;
        HEAP32[$7>>2] = $1926;
       }
       if ((label|0) == 307) {
        $1906 = HEAP32[$2>>2]|0;
        $1907 = (_error($1906,20)|0);
        HEAP32[$1>>2] = $1907;
        $2087 = HEAP32[$1>>2]|0;
        STACKTOP = sp;return ($2087|0);
       }
       else if ((label|0) == 309) {
        $1913 = HEAP32[$2>>2]|0;
        $1914 = (_error($1913,20)|0);
        HEAP32[$1>>2] = $1914;
        $2087 = HEAP32[$1>>2]|0;
        STACKTOP = sp;return ($2087|0);
       }
       else if ((label|0) == 311) {
        $1923 = HEAP32[$2>>2]|0;
        $1924 = (_error($1923,20)|0);
        HEAP32[$1>>2] = $1924;
        $2087 = HEAP32[$1>>2]|0;
        STACKTOP = sp;return ($2087|0);
       }
       else if ((label|0) == 313) {
        _flush_packet($1878);
        $1927 = HEAP32[$2>>2]|0;
        $1928 = ((($1927)) + 992|0);
        HEAP32[$1928>>2] = 0;
        HEAP32[$7>>2] = 0;
        while(1) {
         $1929 = HEAP32[$7>>2]|0;
         $1930 = HEAP32[$2>>2]|0;
         $1931 = ((($1930)) + 4|0);
         $1932 = HEAP32[$1931>>2]|0;
         $1933 = ($1929|0)<($1932|0);
         $1934 = HEAP32[$2>>2]|0;
         $1935 = HEAP32[$2>>2]|0;
         if (!($1933)) {
          break;
         }
         $1936 = ((($1935)) + 116|0);
         $1937 = HEAP32[$1936>>2]|0;
         $1938 = $1937<<2;
         $1939 = (_setup_malloc($1934,$1938)|0);
         $1940 = HEAP32[$2>>2]|0;
         $1941 = ((($1940)) + 800|0);
         $1942 = HEAP32[$7>>2]|0;
         $1943 = (($1941) + ($1942<<2)|0);
         HEAP32[$1943>>2] = $1939;
         $1944 = HEAP32[$2>>2]|0;
         $1945 = HEAP32[$2>>2]|0;
         $1946 = ((($1945)) + 116|0);
         $1947 = HEAP32[$1946>>2]|0;
         $1948 = $1947<<2;
         $1949 = (($1948>>>0) / 2)&-1;
         $1950 = (_setup_malloc($1944,$1949)|0);
         $1951 = HEAP32[$2>>2]|0;
         $1952 = ((($1951)) + 928|0);
         $1953 = HEAP32[$7>>2]|0;
         $1954 = (($1952) + ($1953<<2)|0);
         HEAP32[$1954>>2] = $1950;
         $1955 = HEAP32[$2>>2]|0;
         $1956 = HEAP32[$11>>2]|0;
         $1957 = $1956<<1;
         $1958 = (_setup_malloc($1955,$1957)|0);
         $1959 = HEAP32[$2>>2]|0;
         $1960 = ((($1959)) + 996|0);
         $1961 = HEAP32[$7>>2]|0;
         $1962 = (($1960) + ($1961<<2)|0);
         HEAP32[$1962>>2] = $1958;
         $1963 = HEAP32[$2>>2]|0;
         $1964 = ((($1963)) + 800|0);
         $1965 = HEAP32[$7>>2]|0;
         $1966 = (($1964) + ($1965<<2)|0);
         $1967 = HEAP32[$1966>>2]|0;
         $1968 = ($1967|0)==(0|0);
         if ($1968) {
          label = 318;
          break;
         }
         $1969 = HEAP32[$2>>2]|0;
         $1970 = ((($1969)) + 928|0);
         $1971 = HEAP32[$7>>2]|0;
         $1972 = (($1970) + ($1971<<2)|0);
         $1973 = HEAP32[$1972>>2]|0;
         $1974 = ($1973|0)==(0|0);
         if ($1974) {
          label = 318;
          break;
         }
         $1975 = HEAP32[$2>>2]|0;
         $1976 = ((($1975)) + 996|0);
         $1977 = HEAP32[$7>>2]|0;
         $1978 = (($1976) + ($1977<<2)|0);
         $1979 = HEAP32[$1978>>2]|0;
         $1980 = ($1979|0)==(0|0);
         if ($1980) {
          label = 318;
          break;
         }
         $1983 = HEAP32[$7>>2]|0;
         $1984 = (($1983) + 1)|0;
         HEAP32[$7>>2] = $1984;
        }
        if ((label|0) == 318) {
         $1981 = HEAP32[$2>>2]|0;
         $1982 = (_error($1981,3)|0);
         HEAP32[$1>>2] = $1982;
         $2087 = HEAP32[$1>>2]|0;
         STACKTOP = sp;return ($2087|0);
        }
        $1985 = ((($1935)) + 112|0);
        $1986 = HEAP32[$1985>>2]|0;
        $1987 = (_init_blocksize($1934,0,$1986)|0);
        $1988 = ($1987|0)!=(0);
        if (!($1988)) {
         HEAP32[$1>>2] = 0;
         $2087 = HEAP32[$1>>2]|0;
         STACKTOP = sp;return ($2087|0);
        }
        $1989 = HEAP32[$2>>2]|0;
        $1990 = HEAP32[$2>>2]|0;
        $1991 = ((($1990)) + 116|0);
        $1992 = HEAP32[$1991>>2]|0;
        $1993 = (_init_blocksize($1989,1,$1992)|0);
        $1994 = ($1993|0)!=(0);
        if (!($1994)) {
         HEAP32[$1>>2] = 0;
         $2087 = HEAP32[$1>>2]|0;
         STACKTOP = sp;return ($2087|0);
        }
        $1995 = HEAP32[$2>>2]|0;
        $1996 = ((($1995)) + 112|0);
        $1997 = HEAP32[$1996>>2]|0;
        $1998 = HEAP32[$2>>2]|0;
        $1999 = ((($1998)) + 104|0);
        HEAP32[$1999>>2] = $1997;
        $2000 = HEAP32[$2>>2]|0;
        $2001 = ((($2000)) + 116|0);
        $2002 = HEAP32[$2001>>2]|0;
        $2003 = HEAP32[$2>>2]|0;
        $2004 = ((($2003)) + 104|0);
        $2005 = ((($2004)) + 4|0);
        HEAP32[$2005>>2] = $2002;
        $2006 = HEAP32[$2>>2]|0;
        $2007 = ((($2006)) + 116|0);
        $2008 = HEAP32[$2007>>2]|0;
        $2009 = $2008<<2;
        $2010 = $2009 >>> 1;
        HEAP32[$54>>2] = $2010;
        HEAP32[$57>>2] = 0;
        HEAP32[$56>>2] = 0;
        while(1) {
         $2011 = HEAP32[$56>>2]|0;
         $2012 = HEAP32[$2>>2]|0;
         $2013 = ((($2012)) + 264|0);
         $2014 = HEAP32[$2013>>2]|0;
         $2015 = ($2011|0)<($2014|0);
         $2016 = HEAP32[$2>>2]|0;
         if (!($2015)) {
          break;
         }
         $2017 = ((($2016)) + 396|0);
         $2018 = HEAP32[$2017>>2]|0;
         $2019 = HEAP32[$56>>2]|0;
         $2020 = (($2018) + (($2019*24)|0)|0);
         HEAP32[$58>>2] = $2020;
         $2021 = HEAP32[$58>>2]|0;
         $2022 = ((($2021)) + 4|0);
         $2023 = HEAP32[$2022>>2]|0;
         $2024 = HEAP32[$58>>2]|0;
         $2025 = HEAP32[$2024>>2]|0;
         $2026 = (($2023) - ($2025))|0;
         HEAP32[$59>>2] = $2026;
         $2027 = HEAP32[$59>>2]|0;
         $2028 = HEAP32[$58>>2]|0;
         $2029 = ((($2028)) + 8|0);
         $2030 = HEAP32[$2029>>2]|0;
         $2031 = (($2027>>>0) / ($2030>>>0))&-1;
         HEAP32[$60>>2] = $2031;
         $2032 = HEAP32[$60>>2]|0;
         $2033 = HEAP32[$57>>2]|0;
         $2034 = ($2032|0)>($2033|0);
         if ($2034) {
          $2035 = HEAP32[$60>>2]|0;
          HEAP32[$57>>2] = $2035;
         }
         $2036 = HEAP32[$56>>2]|0;
         $2037 = (($2036) + 1)|0;
         HEAP32[$56>>2] = $2037;
        }
        $2038 = ((($2016)) + 4|0);
        $2039 = HEAP32[$2038>>2]|0;
        $2040 = HEAP32[$57>>2]|0;
        $2041 = $2040<<2;
        $2042 = (4 + ($2041))|0;
        $2043 = Math_imul($2039, $2042)|0;
        HEAP32[$55>>2] = $2043;
        $2044 = HEAP32[$55>>2]|0;
        $2045 = HEAP32[$2>>2]|0;
        $2046 = ((($2045)) + 12|0);
        HEAP32[$2046>>2] = $2044;
        $2047 = HEAP32[$54>>2]|0;
        $2048 = HEAP32[$2>>2]|0;
        $2049 = ((($2048)) + 12|0);
        $2050 = HEAP32[$2049>>2]|0;
        $2051 = ($2047>>>0)>($2050>>>0);
        if ($2051) {
         $2052 = HEAP32[$54>>2]|0;
         $2053 = HEAP32[$2>>2]|0;
         $2054 = ((($2053)) + 12|0);
         HEAP32[$2054>>2] = $2052;
        }
        $2055 = HEAP32[$2>>2]|0;
        $2056 = ((($2055)) + 1377|0);
        HEAP8[$2056>>0] = 1;
        $2057 = HEAP32[$2>>2]|0;
        $2058 = ((($2057)) + 80|0);
        $2059 = HEAP32[$2058>>2]|0;
        $2060 = ($2059|0)!=(0|0);
        do {
         if ($2060) {
          $2061 = HEAP32[$2>>2]|0;
          $2062 = ((($2061)) + 92|0);
          $2063 = HEAP32[$2062>>2]|0;
          $2064 = HEAP32[$2>>2]|0;
          $2065 = ((($2064)) + 80|0);
          $2066 = ((($2065)) + 4|0);
          $2067 = HEAP32[$2066>>2]|0;
          $2068 = ($2063|0)==($2067|0);
          if (!($2068)) {
           ___assert_fail((15167|0),(14636|0),3715,(15223|0));
           // unreachable;
          }
          $2069 = HEAP32[$2>>2]|0;
          $2070 = ((($2069)) + 88|0);
          $2071 = HEAP32[$2070>>2]|0;
          $2072 = (($2071) + 1512)|0;
          $2073 = HEAP32[$2>>2]|0;
          $2074 = ((($2073)) + 12|0);
          $2075 = HEAP32[$2074>>2]|0;
          $2076 = (($2072) + ($2075))|0;
          $2077 = HEAP32[$2>>2]|0;
          $2078 = ((($2077)) + 92|0);
          $2079 = HEAP32[$2078>>2]|0;
          $2080 = ($2076>>>0)>($2079>>>0);
          if (!($2080)) {
           break;
          }
          $2081 = HEAP32[$2>>2]|0;
          $2082 = (_error($2081,3)|0);
          HEAP32[$1>>2] = $2082;
          $2087 = HEAP32[$1>>2]|0;
          STACKTOP = sp;return ($2087|0);
         }
        } while(0);
        $2083 = HEAP32[$2>>2]|0;
        $2084 = (_stb_vorbis_get_file_offset($2083)|0);
        $2085 = HEAP32[$2>>2]|0;
        $2086 = ((($2085)) + 52|0);
        HEAP32[$2086>>2] = $2084;
        HEAP32[$1>>2] = 1;
        $2087 = HEAP32[$1>>2]|0;
        STACKTOP = sp;return ($2087|0);
       }
       break;
      }
     }
    }
   }
   break;
  }
 }
 return (0)|0;
}
function _vorbis_alloc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_setup_malloc($3,1512)|0);
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _vorbis_pump_first_frame($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$1>>2] = $0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (_vorbis_decode_packet($6,$2,$4,$3)|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$5>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $14 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($14|0);
 }
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = HEAP32[$3>>2]|0;
 (_vorbis_finish_frame($10,$11,$12,$13)|0);
 $14 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function _setup_malloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $6 = HEAP32[$4>>2]|0;
 $7 = (($6) + 3)|0;
 $8 = $7 & -4;
 HEAP32[$4>>2] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = HEAP32[$3>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9))|0;
 HEAP32[$11>>2] = $13;
 $14 = HEAP32[$3>>2]|0;
 $15 = ((($14)) + 80|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $40 = HEAP32[$4>>2]|0;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = HEAP32[$4>>2]|0;
   $43 = (_malloc($42)|0);
   $44 = $43;
  } else {
   $44 = 0;
  }
  HEAP32[$2>>2] = $44;
  $45 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($45|0);
 }
 $18 = HEAP32[$3>>2]|0;
 $19 = ((($18)) + 80|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$3>>2]|0;
 $22 = ((($21)) + 88|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20) + ($23)|0);
 HEAP32[$5>>2] = $24;
 $25 = HEAP32[$3>>2]|0;
 $26 = ((($25)) + 88|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$4>>2]|0;
 $29 = (($27) + ($28))|0;
 $30 = HEAP32[$3>>2]|0;
 $31 = ((($30)) + 92|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($29|0)>($32|0);
 if ($33) {
  HEAP32[$2>>2] = 0;
  $45 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($45|0);
 } else {
  $34 = HEAP32[$4>>2]|0;
  $35 = HEAP32[$3>>2]|0;
  $36 = ((($35)) + 88|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($34))|0;
  HEAP32[$36>>2] = $38;
  $39 = HEAP32[$5>>2]|0;
  HEAP32[$2>>2] = $39;
  $45 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function _vorbis_validate($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_memcmp($2,15539,6)|0);
 $4 = ($3|0)==(0);
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _skip($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $23 = HEAP32[$2>>2]|0;
  $24 = ((($23)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_ftell($25)|0);
  HEAP32[$4>>2] = $26;
  $27 = HEAP32[$2>>2]|0;
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$4>>2]|0;
  $31 = HEAP32[$3>>2]|0;
  $32 = (($30) + ($31))|0;
  (_fseek($29,$32,0)|0);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$2>>2]|0;
 $11 = ((($10)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9)|0);
 HEAP32[$11>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 $15 = ((($14)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($17)) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>=($19>>>0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[$2>>2]|0;
 $22 = ((($21)) + 96|0);
 HEAP32[$22>>2] = 1;
 STACKTOP = sp;return;
}
function _is_whole_packet_present($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $10 = HEAP32[$3>>2]|0;
 $11 = ((($10)) + 1380|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$5>>2] = $12;
 HEAP32[$6>>2] = 1;
 $13 = HEAP32[$3>>2]|0;
 $14 = ((($13)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$7>>2] = $15;
 $16 = HEAP32[$5>>2]|0;
 $17 = ($16|0)!=(-1);
 do {
  if ($17) {
   while(1) {
    $18 = HEAP32[$5>>2]|0;
    $19 = HEAP32[$3>>2]|0;
    $20 = ((($19)) + 1116|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($18|0)<($21|0);
    if (!($22)) {
     break;
    }
    $23 = HEAP32[$3>>2]|0;
    $24 = ((($23)) + 1120|0);
    $25 = HEAP32[$5>>2]|0;
    $26 = (($24) + ($25)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = HEAP32[$7>>2]|0;
    $30 = (($29) + ($28)|0);
    HEAP32[$7>>2] = $30;
    $31 = HEAP32[$3>>2]|0;
    $32 = ((($31)) + 1120|0);
    $33 = HEAP32[$5>>2]|0;
    $34 = (($32) + ($33)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = ($36|0)<(255);
    if ($37) {
     break;
    }
    $38 = HEAP32[$5>>2]|0;
    $39 = (($38) + 1)|0;
    HEAP32[$5>>2] = $39;
   }
   $40 = HEAP32[$4>>2]|0;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = HEAP32[$5>>2]|0;
    $43 = HEAP32[$3>>2]|0;
    $44 = ((($43)) + 1116|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - 1)|0;
    $47 = ($42|0)<($46|0);
    if ($47) {
     $48 = HEAP32[$3>>2]|0;
     $49 = (_error($48,21)|0);
     HEAP32[$2>>2] = $49;
     $158 = HEAP32[$2>>2]|0;
     STACKTOP = sp;return ($158|0);
    }
   }
   $50 = HEAP32[$5>>2]|0;
   $51 = HEAP32[$3>>2]|0;
   $52 = ((($51)) + 1116|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($50|0)==($53|0);
   if ($54) {
    HEAP32[$5>>2] = -1;
   }
   $55 = HEAP32[$7>>2]|0;
   $56 = HEAP32[$3>>2]|0;
   $57 = ((($56)) + 40|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($55>>>0)>($58>>>0);
   if (!($59)) {
    HEAP32[$6>>2] = 0;
    break;
   }
   $60 = HEAP32[$3>>2]|0;
   $61 = (_error($60,1)|0);
   HEAP32[$2>>2] = $61;
   $158 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($158|0);
  }
 } while(0);
 while(1) {
  $62 = HEAP32[$5>>2]|0;
  $63 = ($62|0)==(-1);
  if (!($63)) {
   label = 40;
   break;
  }
  $64 = HEAP32[$7>>2]|0;
  $65 = ((($64)) + 26|0);
  $66 = HEAP32[$3>>2]|0;
  $67 = ((($66)) + 40|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($65>>>0)>=($68>>>0);
  if ($69) {
   label = 15;
   break;
  }
  $72 = HEAP32[$7>>2]|0;
  $73 = (_memcmp($72,15160,4)|0);
  $74 = ($73|0)!=(0);
  if ($74) {
   label = 17;
   break;
  }
  $77 = HEAP32[$7>>2]|0;
  $78 = ((($77)) + 4|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = ($80|0)!=(0);
  if ($81) {
   label = 19;
   break;
  }
  $84 = HEAP32[$6>>2]|0;
  $85 = ($84|0)!=(0);
  if ($85) {
   $86 = HEAP32[$3>>2]|0;
   $87 = ((($86)) + 992|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)!=(0);
   if ($89) {
    $90 = HEAP32[$7>>2]|0;
    $91 = ((($90)) + 5|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $94 = $93 & 1;
    $95 = ($94|0)!=(0);
    if ($95) {
     label = 23;
     break;
    }
   }
  } else {
   $98 = HEAP32[$7>>2]|0;
   $99 = ((($98)) + 5|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&255;
   $102 = $101 & 1;
   $103 = ($102|0)!=(0);
   if (!($103)) {
    label = 25;
    break;
   }
  }
  $106 = HEAP32[$7>>2]|0;
  $107 = ((($106)) + 26|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  HEAP32[$9>>2] = $109;
  $110 = HEAP32[$7>>2]|0;
  $111 = ((($110)) + 27|0);
  HEAP32[$8>>2] = $111;
  $112 = HEAP32[$8>>2]|0;
  $113 = HEAP32[$9>>2]|0;
  $114 = (($112) + ($113)|0);
  HEAP32[$7>>2] = $114;
  $115 = HEAP32[$7>>2]|0;
  $116 = HEAP32[$3>>2]|0;
  $117 = ((($116)) + 40|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($115>>>0)>($118>>>0);
  if ($119) {
   label = 27;
   break;
  }
  HEAP32[$5>>2] = 0;
  while(1) {
   $122 = HEAP32[$5>>2]|0;
   $123 = HEAP32[$9>>2]|0;
   $124 = ($122|0)<($123|0);
   if (!($124)) {
    break;
   }
   $125 = HEAP32[$8>>2]|0;
   $126 = HEAP32[$5>>2]|0;
   $127 = (($125) + ($126)|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = $128&255;
   $130 = HEAP32[$7>>2]|0;
   $131 = (($130) + ($129)|0);
   HEAP32[$7>>2] = $131;
   $132 = HEAP32[$8>>2]|0;
   $133 = HEAP32[$5>>2]|0;
   $134 = (($132) + ($133)|0);
   $135 = HEAP8[$134>>0]|0;
   $136 = $135&255;
   $137 = ($136|0)<(255);
   if ($137) {
    break;
   }
   $138 = HEAP32[$5>>2]|0;
   $139 = (($138) + 1)|0;
   HEAP32[$5>>2] = $139;
  }
  $140 = HEAP32[$4>>2]|0;
  $141 = ($140|0)!=(0);
  if ($141) {
   $142 = HEAP32[$5>>2]|0;
   $143 = HEAP32[$9>>2]|0;
   $144 = (($143) - 1)|0;
   $145 = ($142|0)<($144|0);
   if ($145) {
    label = 34;
    break;
   }
  }
  $148 = HEAP32[$5>>2]|0;
  $149 = HEAP32[$9>>2]|0;
  $150 = ($148|0)==($149|0);
  if ($150) {
   HEAP32[$5>>2] = -1;
  }
  $151 = HEAP32[$7>>2]|0;
  $152 = HEAP32[$3>>2]|0;
  $153 = ((($152)) + 40|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ($151>>>0)>($154>>>0);
  if ($155) {
   label = 38;
   break;
  }
  HEAP32[$6>>2] = 0;
 }
 if ((label|0) == 15) {
  $70 = HEAP32[$3>>2]|0;
  $71 = (_error($70,1)|0);
  HEAP32[$2>>2] = $71;
  $158 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($158|0);
 }
 else if ((label|0) == 17) {
  $75 = HEAP32[$3>>2]|0;
  $76 = (_error($75,21)|0);
  HEAP32[$2>>2] = $76;
  $158 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($158|0);
 }
 else if ((label|0) == 19) {
  $82 = HEAP32[$3>>2]|0;
  $83 = (_error($82,21)|0);
  HEAP32[$2>>2] = $83;
  $158 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($158|0);
 }
 else if ((label|0) == 23) {
  $96 = HEAP32[$3>>2]|0;
  $97 = (_error($96,21)|0);
  HEAP32[$2>>2] = $97;
  $158 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($158|0);
 }
 else if ((label|0) == 25) {
  $104 = HEAP32[$3>>2]|0;
  $105 = (_error($104,21)|0);
  HEAP32[$2>>2] = $105;
  $158 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($158|0);
 }
 else if ((label|0) == 27) {
  $120 = HEAP32[$3>>2]|0;
  $121 = (_error($120,1)|0);
  HEAP32[$2>>2] = $121;
  $158 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($158|0);
 }
 else if ((label|0) == 34) {
  $146 = HEAP32[$3>>2]|0;
  $147 = (_error($146,21)|0);
  HEAP32[$2>>2] = $147;
  $158 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($158|0);
 }
 else if ((label|0) == 38) {
  $156 = HEAP32[$3>>2]|0;
  $157 = (_error($156,1)|0);
  HEAP32[$2>>2] = $157;
  $158 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($158|0);
 }
 else if ((label|0) == 40) {
  HEAP32[$2>>2] = 1;
  $158 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($158|0);
 }
 return (0)|0;
}
function _crc32_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$0>>2] = 0;
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)<(256);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$0>>2]|0;
  $6 = $5 << 24;
  HEAP32[$2>>2] = $6;
  HEAP32[$1>>2] = 0;
  while(1) {
   $7 = HEAP32[$1>>2]|0;
   $8 = ($7|0)<(8);
   $9 = HEAP32[$2>>2]|0;
   if (!($8)) {
    break;
   }
   $10 = $9 << 1;
   $11 = HEAP32[$2>>2]|0;
   $12 = ($11>>>0)>=(2147483648);
   $13 = $12 ? 79764919 : 0;
   $14 = $10 ^ $13;
   HEAP32[$2>>2] = $14;
   $15 = HEAP32[$1>>2]|0;
   $16 = (($15) + 1)|0;
   HEAP32[$1>>2] = $16;
  }
  $17 = HEAP32[$0>>2]|0;
  $18 = (63148 + ($17<<2)|0);
  HEAP32[$18>>2] = $9;
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$0>>2] = $20;
 }
 STACKTOP = sp;return;
}
function _setup_temp_free($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[$3>>2]|0;
 $7 = ((($6)) + 80|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[$5>>2]|0;
  $11 = (($10) + 3)|0;
  $12 = $11 & -4;
  $13 = HEAP32[$3>>2]|0;
  $14 = ((($13)) + 92|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12))|0;
  HEAP32[$14>>2] = $16;
  STACKTOP = sp;return;
 } else {
  $17 = HEAP32[$4>>2]|0;
  _free($17);
  STACKTOP = sp;return;
 }
}
function _compute_codewords($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = sp + 172|0;
 $5 = sp + 168|0;
 $6 = sp + 164|0;
 $7 = sp + 160|0;
 $8 = sp + 156|0;
 $9 = sp + 152|0;
 $10 = sp + 148|0;
 $11 = sp + 144|0;
 $12 = sp + 16|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $15 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$11>>2] = 0;
 dest=$12; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$10>>2] = 0;
 while(1) {
  $16 = HEAP32[$10>>2]|0;
  $17 = HEAP32[$7>>2]|0;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = HEAP32[$6>>2]|0;
  $20 = HEAP32[$10>>2]|0;
  $21 = (($19) + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)<(255);
  if ($24) {
   break;
  }
  $25 = HEAP32[$10>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$10>>2] = $26;
 }
 $27 = HEAP32[$10>>2]|0;
 $28 = HEAP32[$7>>2]|0;
 $29 = ($27|0)==($28|0);
 $30 = HEAP32[$5>>2]|0;
 if ($29) {
  $31 = ((($30)) + 2092|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___assert_fail((15436|0),(14636|0),666,(15459|0));
   // unreachable;
  }
  HEAP32[$4>>2] = 1;
  $142 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($142|0);
 }
 $34 = HEAP32[$10>>2]|0;
 $35 = HEAP32[$11>>2]|0;
 $36 = (($35) + 1)|0;
 HEAP32[$11>>2] = $36;
 $37 = HEAP32[$6>>2]|0;
 $38 = HEAP32[$10>>2]|0;
 $39 = (($37) + ($38)|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = HEAP32[$8>>2]|0;
 _add_entry($30,0,$34,$35,$41,$42);
 HEAP32[$9>>2] = 1;
 while(1) {
  $43 = HEAP32[$9>>2]|0;
  $44 = HEAP32[$6>>2]|0;
  $45 = HEAP32[$10>>2]|0;
  $46 = (($44) + ($45)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = ($43|0)<=($48|0);
  if (!($49)) {
   break;
  }
  $50 = HEAP32[$9>>2]|0;
  $51 = (32 - ($50))|0;
  $52 = 1 << $51;
  $53 = HEAP32[$9>>2]|0;
  $54 = (($12) + ($53<<2)|0);
  HEAP32[$54>>2] = $52;
  $55 = HEAP32[$9>>2]|0;
  $56 = (($55) + 1)|0;
  HEAP32[$9>>2] = $56;
 }
 $57 = HEAP32[$10>>2]|0;
 $58 = (($57) + 1)|0;
 HEAP32[$9>>2] = $58;
 L17: while(1) {
  $59 = HEAP32[$9>>2]|0;
  $60 = HEAP32[$7>>2]|0;
  $61 = ($59|0)<($60|0);
  if (!($61)) {
   label = 33;
   break;
  }
  $62 = HEAP32[$6>>2]|0;
  $63 = HEAP32[$9>>2]|0;
  $64 = (($62) + ($63)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  HEAP32[$14>>2] = $66;
  $67 = HEAP32[$14>>2]|0;
  $68 = ($67|0)==(255);
  L20: do {
   if (!($68)) {
    while(1) {
     $69 = HEAP32[$14>>2]|0;
     $70 = ($69|0)>(0);
     if ($70) {
      $71 = HEAP32[$14>>2]|0;
      $72 = (($12) + ($71<<2)|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)!=(0);
      $75 = $74 ^ 1;
      $143 = $75;
     } else {
      $143 = 0;
     }
     $76 = HEAP32[$14>>2]|0;
     if (!($143)) {
      break;
     }
     $77 = (($76) + -1)|0;
     HEAP32[$14>>2] = $77;
    }
    $78 = ($76|0)==(0);
    if ($78) {
     label = 20;
     break L17;
    }
    $79 = HEAP32[$14>>2]|0;
    $80 = (($12) + ($79<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    HEAP32[$13>>2] = $81;
    $82 = HEAP32[$14>>2]|0;
    $83 = ($82|0)>=(0);
    $84 = HEAP32[$14>>2]|0;
    $85 = ($84|0)<(32);
    $or$cond = $83 & $85;
    if (!($or$cond)) {
     label = 22;
     break L17;
    }
    $86 = HEAP32[$14>>2]|0;
    $87 = (($12) + ($86<<2)|0);
    HEAP32[$87>>2] = 0;
    $88 = HEAP32[$5>>2]|0;
    $89 = HEAP32[$13>>2]|0;
    $90 = (_bit_reverse($89)|0);
    $91 = HEAP32[$9>>2]|0;
    $92 = HEAP32[$11>>2]|0;
    $93 = (($92) + 1)|0;
    HEAP32[$11>>2] = $93;
    $94 = HEAP32[$6>>2]|0;
    $95 = HEAP32[$9>>2]|0;
    $96 = (($94) + ($95)|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = HEAP32[$8>>2]|0;
    _add_entry($88,$90,$91,$92,$98,$99);
    $100 = HEAP32[$14>>2]|0;
    $101 = HEAP32[$6>>2]|0;
    $102 = HEAP32[$9>>2]|0;
    $103 = (($101) + ($102)|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = ($100|0)!=($105|0);
    if ($106) {
     $107 = HEAP32[$6>>2]|0;
     $108 = HEAP32[$9>>2]|0;
     $109 = (($107) + ($108)|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = $110&255;
     $112 = ($111|0)>=(0);
     if (!($112)) {
      label = 26;
      break L17;
     }
     $113 = HEAP32[$6>>2]|0;
     $114 = HEAP32[$9>>2]|0;
     $115 = (($113) + ($114)|0);
     $116 = HEAP8[$115>>0]|0;
     $117 = $116&255;
     $118 = ($117|0)<(32);
     if (!($118)) {
      label = 26;
      break L17;
     }
     $119 = HEAP32[$6>>2]|0;
     $120 = HEAP32[$9>>2]|0;
     $121 = (($119) + ($120)|0);
     $122 = HEAP8[$121>>0]|0;
     $123 = $122&255;
     HEAP32[$15>>2] = $123;
     while(1) {
      $124 = HEAP32[$15>>2]|0;
      $125 = HEAP32[$14>>2]|0;
      $126 = ($124|0)>($125|0);
      if (!($126)) {
       break L20;
      }
      $127 = HEAP32[$15>>2]|0;
      $128 = (($12) + ($127<<2)|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ($129|0)==(0);
      if (!($130)) {
       label = 30;
       break L17;
      }
      $131 = HEAP32[$13>>2]|0;
      $132 = HEAP32[$15>>2]|0;
      $133 = (32 - ($132))|0;
      $134 = 1 << $133;
      $135 = (($131) + ($134))|0;
      $136 = HEAP32[$15>>2]|0;
      $137 = (($12) + ($136<<2)|0);
      HEAP32[$137>>2] = $135;
      $138 = HEAP32[$15>>2]|0;
      $139 = (($138) + -1)|0;
      HEAP32[$15>>2] = $139;
     }
    }
   }
  } while(0);
  $140 = HEAP32[$9>>2]|0;
  $141 = (($140) + 1)|0;
  HEAP32[$9>>2] = $141;
 }
 if ((label|0) == 20) {
  HEAP32[$4>>2] = 0;
  $142 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($142|0);
 }
 else if ((label|0) == 22) {
  ___assert_fail((15477|0),(14636|0),689,(15459|0));
  // unreachable;
 }
 else if ((label|0) == 26) {
  ___assert_fail((15494|0),(14636|0),694,(15459|0));
  // unreachable;
 }
 else if ((label|0) == 30) {
  ___assert_fail((15521|0),(14636|0),696,(15459|0));
  // unreachable;
 }
 else if ((label|0) == 33) {
  HEAP32[$4>>2] = 1;
  $142 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($142|0);
 }
 return (0)|0;
}
function _compute_sorted_huffman($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 24|0;
 $8 = sp + 20|0;
 $9 = sp + 16|0;
 $10 = sp + 12|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $14 = HEAP32[$3>>2]|0;
 $15 = ((($14)) + 23|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)!=(0);
 L1: do {
  if ($17) {
   HEAP32[$6>>2] = 0;
   while(1) {
    $50 = HEAP32[$6>>2]|0;
    $51 = HEAP32[$3>>2]|0;
    $52 = ((($51)) + 2092|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($50|0)<($53|0);
    if (!($54)) {
     break L1;
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = ((($55)) + 32|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = HEAP32[$6>>2]|0;
    $59 = (($57) + ($58<<2)|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (_bit_reverse($60)|0);
    $62 = HEAP32[$3>>2]|0;
    $63 = ((($62)) + 2084|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = HEAP32[$6>>2]|0;
    $66 = (($64) + ($65<<2)|0);
    HEAP32[$66>>2] = $61;
    $67 = HEAP32[$6>>2]|0;
    $68 = (($67) + 1)|0;
    HEAP32[$6>>2] = $68;
   }
  } else {
   HEAP32[$8>>2] = 0;
   HEAP32[$6>>2] = 0;
   while(1) {
    $18 = HEAP32[$6>>2]|0;
    $19 = HEAP32[$3>>2]|0;
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($18|0)<($21|0);
    if (!($22)) {
     break;
    }
    $23 = HEAP32[$3>>2]|0;
    $24 = HEAP32[$4>>2]|0;
    $25 = HEAP32[$6>>2]|0;
    $26 = (($24) + ($25)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = (_include_in_sort($23,$27)|0);
    $29 = ($28|0)!=(0);
    if ($29) {
     $30 = HEAP32[$3>>2]|0;
     $31 = ((($30)) + 32|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = HEAP32[$6>>2]|0;
     $34 = (($32) + ($33<<2)|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (_bit_reverse($35)|0);
     $37 = HEAP32[$3>>2]|0;
     $38 = ((($37)) + 2084|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = HEAP32[$8>>2]|0;
     $41 = (($40) + 1)|0;
     HEAP32[$8>>2] = $41;
     $42 = (($39) + ($40<<2)|0);
     HEAP32[$42>>2] = $36;
    }
    $43 = HEAP32[$6>>2]|0;
    $44 = (($43) + 1)|0;
    HEAP32[$6>>2] = $44;
   }
   $45 = HEAP32[$8>>2]|0;
   $46 = HEAP32[$3>>2]|0;
   $47 = ((($46)) + 2092|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($45|0)==($48|0);
   if ($49) {
    break;
   } else {
    ___assert_fail((15328|0),(14636|0),763,(15351|0));
    // unreachable;
   }
  }
 } while(0);
 $69 = HEAP32[$3>>2]|0;
 $70 = ((($69)) + 2084|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = HEAP32[$3>>2]|0;
 $73 = ((($72)) + 2092|0);
 $74 = HEAP32[$73>>2]|0;
 _qsort($71,$74,4,7);
 $75 = HEAP32[$3>>2]|0;
 $76 = ((($75)) + 2084|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = HEAP32[$3>>2]|0;
 $79 = ((($78)) + 2092|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($77) + ($80<<2)|0);
 HEAP32[$81>>2] = -1;
 $82 = HEAP32[$3>>2]|0;
 $83 = ((($82)) + 23|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 $86 = ($85|0)!=(0);
 $87 = HEAP32[$3>>2]|0;
 $88 = ((($87)) + 4|0);
 $89 = ((($87)) + 2092|0);
 $$sink = $86 ? $89 : $88;
 $90 = HEAP32[$$sink>>2]|0;
 HEAP32[$7>>2] = $90;
 HEAP32[$6>>2] = 0;
 L18: while(1) {
  $91 = HEAP32[$6>>2]|0;
  $92 = HEAP32[$7>>2]|0;
  $93 = ($91|0)<($92|0);
  if (!($93)) {
   label = 30;
   break;
  }
  $94 = HEAP32[$3>>2]|0;
  $95 = ((($94)) + 23|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = ($97|0)!=(0);
  $99 = HEAP32[$4>>2]|0;
  if ($98) {
   $100 = HEAP32[$5>>2]|0;
   $101 = HEAP32[$6>>2]|0;
   $102 = (($100) + ($101<<2)|0);
   $103 = HEAP32[$102>>2]|0;
   $$sink3 = $103;
  } else {
   $104 = HEAP32[$6>>2]|0;
   $$sink3 = $104;
  }
  $105 = (($99) + ($$sink3)|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&255;
  HEAP32[$9>>2] = $107;
  $108 = HEAP32[$3>>2]|0;
  $109 = HEAP32[$9>>2]|0;
  $110 = $109&255;
  $111 = (_include_in_sort($108,$110)|0);
  $112 = ($111|0)!=(0);
  do {
   if ($112) {
    $113 = HEAP32[$3>>2]|0;
    $114 = ((($113)) + 32|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = HEAP32[$6>>2]|0;
    $117 = (($115) + ($116<<2)|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (_bit_reverse($118)|0);
    HEAP32[$10>>2] = $119;
    HEAP32[$11>>2] = 0;
    $120 = HEAP32[$3>>2]|0;
    $121 = ((($120)) + 2092|0);
    $122 = HEAP32[$121>>2]|0;
    HEAP32[$12>>2] = $122;
    while(1) {
     $123 = HEAP32[$12>>2]|0;
     $124 = ($123|0)>(1);
     if (!($124)) {
      break;
     }
     $125 = HEAP32[$11>>2]|0;
     $126 = HEAP32[$12>>2]|0;
     $127 = $126 >> 1;
     $128 = (($125) + ($127))|0;
     HEAP32[$13>>2] = $128;
     $129 = HEAP32[$3>>2]|0;
     $130 = ((($129)) + 2084|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = HEAP32[$13>>2]|0;
     $133 = (($131) + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = HEAP32[$10>>2]|0;
     $136 = ($134>>>0)<=($135>>>0);
     if ($136) {
      $137 = HEAP32[$13>>2]|0;
      HEAP32[$11>>2] = $137;
      $138 = HEAP32[$12>>2]|0;
      $139 = $138 >> 1;
      $140 = HEAP32[$12>>2]|0;
      $141 = (($140) - ($139))|0;
      HEAP32[$12>>2] = $141;
      continue;
     } else {
      $142 = HEAP32[$12>>2]|0;
      $143 = $142 >> 1;
      HEAP32[$12>>2] = $143;
      continue;
     }
    }
    $144 = HEAP32[$3>>2]|0;
    $145 = ((($144)) + 2084|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = HEAP32[$11>>2]|0;
    $148 = (($146) + ($147<<2)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = HEAP32[$10>>2]|0;
    $151 = ($149|0)==($150|0);
    if (!($151)) {
     label = 25;
     break L18;
    }
    $152 = HEAP32[$3>>2]|0;
    $153 = ((($152)) + 23|0);
    $154 = HEAP8[$153>>0]|0;
    $155 = ($154<<24>>24)!=(0);
    if ($155) {
     $156 = HEAP32[$5>>2]|0;
     $157 = HEAP32[$6>>2]|0;
     $158 = (($156) + ($157<<2)|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = HEAP32[$3>>2]|0;
     $161 = ((($160)) + 2088|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = HEAP32[$11>>2]|0;
     $164 = (($162) + ($163<<2)|0);
     HEAP32[$164>>2] = $159;
     $165 = HEAP32[$9>>2]|0;
     $166 = $165&255;
     $167 = HEAP32[$3>>2]|0;
     $168 = ((($167)) + 8|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = HEAP32[$11>>2]|0;
     $171 = (($169) + ($170)|0);
     HEAP8[$171>>0] = $166;
     break;
    } else {
     $172 = HEAP32[$6>>2]|0;
     $173 = HEAP32[$3>>2]|0;
     $174 = ((($173)) + 2088|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = HEAP32[$11>>2]|0;
     $177 = (($175) + ($176<<2)|0);
     HEAP32[$177>>2] = $172;
     break;
    }
   }
  } while(0);
  $178 = HEAP32[$6>>2]|0;
  $179 = (($178) + 1)|0;
  HEAP32[$6>>2] = $179;
 }
 if ((label|0) == 25) {
  ___assert_fail((15374|0),(14636|0),793,(15351|0));
  // unreachable;
 }
 else if ((label|0) == 30) {
  STACKTOP = sp;return;
 }
}
function _compute_accelerated_huffman($0) {
 $0 = $0|0;
 var $$ = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = 0;
 while(1) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ($5|0)<(1024);
  $7 = HEAP32[$1>>2]|0;
  if (!($6)) {
   break;
  }
  $8 = ((($7)) + 36|0);
  $9 = HEAP32[$2>>2]|0;
  $10 = (($8) + ($9<<1)|0);
  HEAP16[$10>>1] = -1;
  $11 = HEAP32[$2>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[$2>>2] = $12;
 }
 $13 = ((($7)) + 23|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)!=(0);
 $17 = HEAP32[$1>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = ((($17)) + 2092|0);
 $$sink = $16 ? $19 : $18;
 $20 = HEAP32[$$sink>>2]|0;
 HEAP32[$3>>2] = $20;
 $21 = HEAP32[$3>>2]|0;
 $22 = ($21|0)>(32767);
 $$ = $22 ? 32767 : $20;
 HEAP32[$3>>2] = $$;
 HEAP32[$2>>2] = 0;
 while(1) {
  $23 = HEAP32[$2>>2]|0;
  $24 = HEAP32[$3>>2]|0;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = HEAP32[$1>>2]|0;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($28) + ($29)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = ($32|0)<=(10);
  L8: do {
   if ($33) {
    $34 = HEAP32[$1>>2]|0;
    $35 = ((($34)) + 23|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = ($37|0)!=(0);
    $39 = HEAP32[$1>>2]|0;
    if ($38) {
     $40 = ((($39)) + 2084|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = HEAP32[$2>>2]|0;
     $43 = (($41) + ($42<<2)|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (_bit_reverse($44)|0);
     $51 = $45;
    } else {
     $46 = ((($39)) + 32|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = HEAP32[$2>>2]|0;
     $49 = (($47) + ($48<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $50;
    }
    HEAP32[$4>>2] = $51;
    while(1) {
     $52 = HEAP32[$4>>2]|0;
     $53 = ($52>>>0)<(1024);
     if (!($53)) {
      break L8;
     }
     $54 = HEAP32[$2>>2]|0;
     $55 = $54&65535;
     $56 = HEAP32[$1>>2]|0;
     $57 = ((($56)) + 36|0);
     $58 = HEAP32[$4>>2]|0;
     $59 = (($57) + ($58<<1)|0);
     HEAP16[$59>>1] = $55;
     $60 = HEAP32[$1>>2]|0;
     $61 = ((($60)) + 8|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = HEAP32[$2>>2]|0;
     $64 = (($62) + ($63)|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = $65&255;
     $67 = 1 << $66;
     $68 = HEAP32[$4>>2]|0;
     $69 = (($68) + ($67))|0;
     HEAP32[$4>>2] = $69;
    }
   }
  } while(0);
  $70 = HEAP32[$2>>2]|0;
  $71 = (($70) + 1)|0;
  HEAP32[$2>>2] = $71;
 }
 STACKTOP = sp;return;
}
function _float32_unpack($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp;
 HEAP32[$1>>2] = $0;
 $6 = HEAP32[$1>>2]|0;
 $7 = $6 & 2097151;
 HEAP32[$2>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = $8 & -2147483648;
 HEAP32[$3>>2] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = $10 & 2145386496;
 $12 = $11 >>> 21;
 HEAP32[$4>>2] = $12;
 $13 = HEAP32[$3>>2]|0;
 $14 = ($13|0)!=(0);
 $15 = HEAP32[$2>>2]|0;
 $16 = (+($15>>>0));
 $17 = -$16;
 $18 = $14 ? $17 : $16;
 HEAPF64[$5>>3] = $18;
 $19 = +HEAPF64[$5>>3];
 $20 = $19;
 $21 = $20;
 $22 = HEAP32[$4>>2]|0;
 $23 = (($22) - 788)|0;
 $24 = (+_ldexp($21,$23));
 $25 = $24;
 STACKTOP = sp;return (+$25);
}
function _lookup1_values($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $5 = HEAP32[$2>>2]|0;
 $6 = (+($5|0));
 $7 = $6;
 $8 = (+Math_log((+$7)));
 $9 = $8;
 $10 = HEAP32[$3>>2]|0;
 $11 = (+($10|0));
 $12 = $9 / $11;
 $13 = $12;
 $14 = (+Math_exp((+$13)));
 $15 = (+Math_floor((+$14)));
 $16 = (~~(($15)));
 HEAP32[$4>>2] = $16;
 $17 = HEAP32[$4>>2]|0;
 $18 = (+($17|0));
 $19 = $18 + 1.0;
 $20 = $19;
 $21 = HEAP32[$3>>2]|0;
 $22 = (+($21|0));
 $23 = (+Math_pow((+$20),(+$22)));
 $24 = (+Math_floor((+$23)));
 $25 = (~~(($24)));
 $26 = HEAP32[$2>>2]|0;
 $27 = ($25|0)<=($26|0);
 if ($27) {
  $28 = HEAP32[$4>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$4>>2] = $29;
 }
 $30 = HEAP32[$4>>2]|0;
 $31 = (+($30|0));
 $32 = $31 + 1.0;
 $33 = $32;
 $34 = HEAP32[$3>>2]|0;
 $35 = (+($34|0));
 $36 = (+Math_pow((+$33),(+$35)));
 $37 = HEAP32[$2>>2]|0;
 $38 = (+($37|0));
 $39 = $36 > $38;
 if (!($39)) {
  ___assert_fail((15237|0),(14636|0),818,(15269|0));
  // unreachable;
 }
 $40 = HEAP32[$4>>2]|0;
 $41 = (+($40|0));
 $42 = $41;
 $43 = HEAP32[$3>>2]|0;
 $44 = (+($43|0));
 $45 = (+Math_pow((+$42),(+$44)));
 $46 = (+Math_floor((+$45)));
 $47 = (~~(($46)));
 $48 = HEAP32[$2>>2]|0;
 $49 = ($47|0)<=($48|0);
 if ($49) {
  $50 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($50|0);
 } else {
  ___assert_fail((15284|0),(14636|0),819,(15269|0));
  // unreachable;
 }
 return (0)|0;
}
function _point_compare($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $6 = HEAP32[$2>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$4>>2]|0;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = HEAP32[$5>>2]|0;
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ($10|0)<($13|0);
 if ($14) {
  $23 = -1;
  STACKTOP = sp;return ($23|0);
 }
 $15 = HEAP32[$4>>2]|0;
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = HEAP32[$5>>2]|0;
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = ($17|0)>($20|0);
 $22 = $21&1;
 $23 = $22;
 STACKTOP = sp;return ($23|0);
}
function _neighbors($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 HEAP32[$8>>2] = -1;
 HEAP32[$9>>2] = 65536;
 HEAP32[$10>>2] = 0;
 while(1) {
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$5>>2]|0;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = HEAP32[$4>>2]|0;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($14) + ($15<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = HEAP32[$8>>2]|0;
  $20 = ($18|0)>($19|0);
  if ($20) {
   $21 = HEAP32[$4>>2]|0;
   $22 = HEAP32[$10>>2]|0;
   $23 = (($21) + ($22<<1)|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = $24&65535;
   $26 = HEAP32[$4>>2]|0;
   $27 = HEAP32[$5>>2]|0;
   $28 = (($26) + ($27<<1)|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29&65535;
   $31 = ($25|0)<($30|0);
   if ($31) {
    $32 = HEAP32[$10>>2]|0;
    $33 = HEAP32[$6>>2]|0;
    HEAP32[$33>>2] = $32;
    $34 = HEAP32[$4>>2]|0;
    $35 = HEAP32[$10>>2]|0;
    $36 = (($34) + ($35<<1)|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = $37&65535;
    HEAP32[$8>>2] = $38;
   }
  }
  $39 = HEAP32[$4>>2]|0;
  $40 = HEAP32[$10>>2]|0;
  $41 = (($39) + ($40<<1)|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42&65535;
  $44 = HEAP32[$9>>2]|0;
  $45 = ($43|0)<($44|0);
  if ($45) {
   $46 = HEAP32[$4>>2]|0;
   $47 = HEAP32[$10>>2]|0;
   $48 = (($46) + ($47<<1)|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = $49&65535;
   $51 = HEAP32[$4>>2]|0;
   $52 = HEAP32[$5>>2]|0;
   $53 = (($51) + ($52<<1)|0);
   $54 = HEAP16[$53>>1]|0;
   $55 = $54&65535;
   $56 = ($50|0)>($55|0);
   if ($56) {
    $57 = HEAP32[$10>>2]|0;
    $58 = HEAP32[$7>>2]|0;
    HEAP32[$58>>2] = $57;
    $59 = HEAP32[$4>>2]|0;
    $60 = HEAP32[$10>>2]|0;
    $61 = (($59) + ($60<<1)|0);
    $62 = HEAP16[$61>>1]|0;
    $63 = $62&65535;
    HEAP32[$9>>2] = $63;
   }
  }
  $64 = HEAP32[$10>>2]|0;
  $65 = (($64) + 1)|0;
  HEAP32[$10>>2] = $65;
 }
 STACKTOP = sp;return;
}
function _init_blocksize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 $10 = HEAP32[$6>>2]|0;
 $11 = $10 >> 1;
 HEAP32[$7>>2] = $11;
 $12 = HEAP32[$6>>2]|0;
 $13 = $12 >> 2;
 HEAP32[$8>>2] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = $14 >> 3;
 HEAP32[$9>>2] = $15;
 $16 = HEAP32[$4>>2]|0;
 $17 = HEAP32[$7>>2]|0;
 $18 = $17<<2;
 $19 = (_setup_malloc($16,$18)|0);
 $20 = HEAP32[$4>>2]|0;
 $21 = ((($20)) + 1068|0);
 $22 = HEAP32[$5>>2]|0;
 $23 = (($21) + ($22<<2)|0);
 HEAP32[$23>>2] = $19;
 $24 = HEAP32[$4>>2]|0;
 $25 = HEAP32[$7>>2]|0;
 $26 = $25<<2;
 $27 = (_setup_malloc($24,$26)|0);
 $28 = HEAP32[$4>>2]|0;
 $29 = ((($28)) + 1076|0);
 $30 = HEAP32[$5>>2]|0;
 $31 = (($29) + ($30<<2)|0);
 HEAP32[$31>>2] = $27;
 $32 = HEAP32[$4>>2]|0;
 $33 = HEAP32[$8>>2]|0;
 $34 = $33<<2;
 $35 = (_setup_malloc($32,$34)|0);
 $36 = HEAP32[$4>>2]|0;
 $37 = ((($36)) + 1084|0);
 $38 = HEAP32[$5>>2]|0;
 $39 = (($37) + ($38<<2)|0);
 HEAP32[$39>>2] = $35;
 $40 = HEAP32[$4>>2]|0;
 $41 = ((($40)) + 1068|0);
 $42 = HEAP32[$5>>2]|0;
 $43 = (($41) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = HEAP32[$4>>2]|0;
  $47 = ((($46)) + 1076|0);
  $48 = HEAP32[$5>>2]|0;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0|0);
  if ($51) {
   $52 = HEAP32[$4>>2]|0;
   $53 = ((($52)) + 1084|0);
   $54 = HEAP32[$5>>2]|0;
   $55 = (($53) + ($54<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)!=(0|0);
   if ($57) {
    $60 = HEAP32[$6>>2]|0;
    $61 = HEAP32[$4>>2]|0;
    $62 = ((($61)) + 1068|0);
    $63 = HEAP32[$5>>2]|0;
    $64 = (($62) + ($63<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ((($66)) + 1076|0);
    $68 = HEAP32[$5>>2]|0;
    $69 = (($67) + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = HEAP32[$4>>2]|0;
    $72 = ((($71)) + 1084|0);
    $73 = HEAP32[$5>>2]|0;
    $74 = (($72) + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    _compute_twiddle_factors($60,$65,$70,$75);
    $76 = HEAP32[$4>>2]|0;
    $77 = HEAP32[$7>>2]|0;
    $78 = $77<<2;
    $79 = (_setup_malloc($76,$78)|0);
    $80 = HEAP32[$4>>2]|0;
    $81 = ((($80)) + 1092|0);
    $82 = HEAP32[$5>>2]|0;
    $83 = (($81) + ($82<<2)|0);
    HEAP32[$83>>2] = $79;
    $84 = HEAP32[$4>>2]|0;
    $85 = ((($84)) + 1092|0);
    $86 = HEAP32[$5>>2]|0;
    $87 = (($85) + ($86<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)!=(0|0);
    if (!($89)) {
     $90 = HEAP32[$4>>2]|0;
     $91 = (_error($90,3)|0);
     HEAP32[$3>>2] = $91;
     $120 = HEAP32[$3>>2]|0;
     STACKTOP = sp;return ($120|0);
    }
    $92 = HEAP32[$6>>2]|0;
    $93 = HEAP32[$4>>2]|0;
    $94 = ((($93)) + 1092|0);
    $95 = HEAP32[$5>>2]|0;
    $96 = (($94) + ($95<<2)|0);
    $97 = HEAP32[$96>>2]|0;
    _compute_window($92,$97);
    $98 = HEAP32[$4>>2]|0;
    $99 = HEAP32[$9>>2]|0;
    $100 = $99<<1;
    $101 = (_setup_malloc($98,$100)|0);
    $102 = HEAP32[$4>>2]|0;
    $103 = ((($102)) + 1100|0);
    $104 = HEAP32[$5>>2]|0;
    $105 = (($103) + ($104<<2)|0);
    HEAP32[$105>>2] = $101;
    $106 = HEAP32[$4>>2]|0;
    $107 = ((($106)) + 1100|0);
    $108 = HEAP32[$5>>2]|0;
    $109 = (($107) + ($108<<2)|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($110|0)!=(0|0);
    if ($111) {
     $114 = HEAP32[$6>>2]|0;
     $115 = HEAP32[$4>>2]|0;
     $116 = ((($115)) + 1100|0);
     $117 = HEAP32[$5>>2]|0;
     $118 = (($116) + ($117<<2)|0);
     $119 = HEAP32[$118>>2]|0;
     _compute_bitreverse($114,$119);
     HEAP32[$3>>2] = 1;
     $120 = HEAP32[$3>>2]|0;
     STACKTOP = sp;return ($120|0);
    } else {
     $112 = HEAP32[$4>>2]|0;
     $113 = (_error($112,3)|0);
     HEAP32[$3>>2] = $113;
     $120 = HEAP32[$3>>2]|0;
     STACKTOP = sp;return ($120|0);
    }
   }
  }
 }
 $58 = HEAP32[$4>>2]|0;
 $59 = (_error($58,3)|0);
 HEAP32[$3>>2] = $59;
 $120 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($120|0);
}
function _compute_twiddle_factors($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $12 = HEAP32[$4>>2]|0;
 $13 = $12 >> 2;
 HEAP32[$8>>2] = $13;
 $14 = HEAP32[$4>>2]|0;
 $15 = $14 >> 3;
 HEAP32[$9>>2] = $15;
 HEAP32[$11>>2] = 0;
 HEAP32[$10>>2] = 0;
 while(1) {
  $16 = HEAP32[$10>>2]|0;
  $17 = HEAP32[$8>>2]|0;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = HEAP32[$10>>2]|0;
  $20 = $19<<2;
  $21 = (+($20|0));
  $22 = $21 * 3.1415926535897931;
  $23 = HEAP32[$4>>2]|0;
  $24 = (+($23|0));
  $25 = $22 / $24;
  $26 = (+Math_cos((+$25)));
  $27 = $26;
  $28 = HEAP32[$5>>2]|0;
  $29 = HEAP32[$11>>2]|0;
  $30 = (($28) + ($29<<2)|0);
  HEAPF32[$30>>2] = $27;
  $31 = HEAP32[$10>>2]|0;
  $32 = $31<<2;
  $33 = (+($32|0));
  $34 = $33 * 3.1415926535897931;
  $35 = HEAP32[$4>>2]|0;
  $36 = (+($35|0));
  $37 = $34 / $36;
  $38 = (+Math_sin((+$37)));
  $39 = -$38;
  $40 = $39;
  $41 = HEAP32[$5>>2]|0;
  $42 = HEAP32[$11>>2]|0;
  $43 = (($42) + 1)|0;
  $44 = (($41) + ($43<<2)|0);
  HEAPF32[$44>>2] = $40;
  $45 = HEAP32[$11>>2]|0;
  $46 = (($45) + 1)|0;
  $47 = (+($46|0));
  $48 = $47 * 3.1415926535897931;
  $49 = HEAP32[$4>>2]|0;
  $50 = (+($49|0));
  $51 = $48 / $50;
  $52 = $51 / 2.0;
  $53 = (+Math_cos((+$52)));
  $54 = $53;
  $55 = $54 * 0.5;
  $56 = HEAP32[$6>>2]|0;
  $57 = HEAP32[$11>>2]|0;
  $58 = (($56) + ($57<<2)|0);
  HEAPF32[$58>>2] = $55;
  $59 = HEAP32[$11>>2]|0;
  $60 = (($59) + 1)|0;
  $61 = (+($60|0));
  $62 = $61 * 3.1415926535897931;
  $63 = HEAP32[$4>>2]|0;
  $64 = (+($63|0));
  $65 = $62 / $64;
  $66 = $65 / 2.0;
  $67 = (+Math_sin((+$66)));
  $68 = $67;
  $69 = $68 * 0.5;
  $70 = HEAP32[$6>>2]|0;
  $71 = HEAP32[$11>>2]|0;
  $72 = (($71) + 1)|0;
  $73 = (($70) + ($72<<2)|0);
  HEAPF32[$73>>2] = $69;
  $74 = HEAP32[$10>>2]|0;
  $75 = (($74) + 1)|0;
  HEAP32[$10>>2] = $75;
  $76 = HEAP32[$11>>2]|0;
  $77 = (($76) + 2)|0;
  HEAP32[$11>>2] = $77;
 }
 HEAP32[$11>>2] = 0;
 HEAP32[$10>>2] = 0;
 while(1) {
  $78 = HEAP32[$10>>2]|0;
  $79 = HEAP32[$9>>2]|0;
  $80 = ($78|0)<($79|0);
  if (!($80)) {
   break;
  }
  $81 = HEAP32[$11>>2]|0;
  $82 = (($81) + 1)|0;
  $83 = $82<<1;
  $84 = (+($83|0));
  $85 = $84 * 3.1415926535897931;
  $86 = HEAP32[$4>>2]|0;
  $87 = (+($86|0));
  $88 = $85 / $87;
  $89 = (+Math_cos((+$88)));
  $90 = $89;
  $91 = HEAP32[$7>>2]|0;
  $92 = HEAP32[$11>>2]|0;
  $93 = (($91) + ($92<<2)|0);
  HEAPF32[$93>>2] = $90;
  $94 = HEAP32[$11>>2]|0;
  $95 = (($94) + 1)|0;
  $96 = $95<<1;
  $97 = (+($96|0));
  $98 = $97 * 3.1415926535897931;
  $99 = HEAP32[$4>>2]|0;
  $100 = (+($99|0));
  $101 = $98 / $100;
  $102 = (+Math_sin((+$101)));
  $103 = -$102;
  $104 = $103;
  $105 = HEAP32[$7>>2]|0;
  $106 = HEAP32[$11>>2]|0;
  $107 = (($106) + 1)|0;
  $108 = (($105) + ($107<<2)|0);
  HEAPF32[$108>>2] = $104;
  $109 = HEAP32[$10>>2]|0;
  $110 = (($109) + 1)|0;
  HEAP32[$10>>2] = $110;
  $111 = HEAP32[$11>>2]|0;
  $112 = (($111) + 2)|0;
  HEAP32[$11>>2] = $112;
 }
 STACKTOP = sp;return;
}
function _compute_window($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $6 = HEAP32[$2>>2]|0;
 $7 = $6 >> 1;
 HEAP32[$4>>2] = $7;
 HEAP32[$5>>2] = 0;
 while(1) {
  $8 = HEAP32[$5>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$5>>2]|0;
  $12 = (($11) - 0)|0;
  $13 = (+($12|0));
  $14 = $13 + 0.5;
  $15 = HEAP32[$4>>2]|0;
  $16 = (+($15|0));
  $17 = $14 / $16;
  $18 = $17 * 0.5;
  $19 = $18 * 3.1415926535897931;
  $20 = (+Math_sin((+$19)));
  $21 = $20;
  $22 = (+_square($21));
  $23 = $22;
  $24 = 1.5707963267948966 * $23;
  $25 = (+Math_sin((+$24)));
  $26 = $25;
  $27 = HEAP32[$3>>2]|0;
  $28 = HEAP32[$5>>2]|0;
  $29 = (($27) + ($28<<2)|0);
  HEAPF32[$29>>2] = $26;
  $30 = HEAP32[$5>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$5>>2] = $31;
 }
 STACKTOP = sp;return;
}
function _compute_bitreverse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (_ilog($7)|0);
 $9 = (($8) - 1)|0;
 HEAP32[$4>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = $10 >> 3;
 HEAP32[$6>>2] = $11;
 HEAP32[$5>>2] = 0;
 while(1) {
  $12 = HEAP32[$5>>2]|0;
  $13 = HEAP32[$6>>2]|0;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[$5>>2]|0;
  $16 = (_bit_reverse($15)|0);
  $17 = HEAP32[$4>>2]|0;
  $18 = (32 - ($17))|0;
  $19 = (($18) + 3)|0;
  $20 = $16 >>> $19;
  $21 = $20 << 2;
  $22 = $21&65535;
  $23 = HEAP32[$3>>2]|0;
  $24 = HEAP32[$5>>2]|0;
  $25 = (($23) + ($24<<1)|0);
  HEAP16[$25>>1] = $22;
  $26 = HEAP32[$5>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$5>>2] = $27;
 }
 STACKTOP = sp;return;
}
function _square($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAPF32[$1>>2] = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 * $3;
 STACKTOP = sp;return (+$4);
}
function _include_in_sort($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 $4 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 HEAP8[$4>>0] = $1;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 23|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)!=(0);
 $9 = HEAP8[$4>>0]|0;
 $10 = $9&255;
 do {
  if ($8) {
   $11 = ($10|0)!=(255);
   if ($11) {
    HEAP32[$2>>2] = 1;
    break;
   } else {
    ___assert_fail((15405|0),(14636|0),743,(15420|0));
    // unreachable;
   }
  } else {
   $12 = ($10|0)==(255);
   if ($12) {
    HEAP32[$2>>2] = 0;
    break;
   }
   $13 = HEAP8[$4>>0]|0;
   $14 = $13&255;
   $15 = ($14|0)>(10);
   if ($15) {
    HEAP32[$2>>2] = 1;
    break;
   } else {
    HEAP32[$2>>2] = 0;
    break;
   }
  }
 } while(0);
 $16 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function _uint32_compare($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$4>>2] = $7;
 $8 = HEAP32[$3>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$5>>2] = $9;
 $10 = HEAP32[$4>>2]|0;
 $11 = HEAP32[$5>>2]|0;
 $12 = ($10>>>0)<($11>>>0);
 if ($12) {
  $17 = -1;
  STACKTOP = sp;return ($17|0);
 }
 $13 = HEAP32[$4>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 $15 = ($13>>>0)>($14>>>0);
 $16 = $15&1;
 $17 = $16;
 STACKTOP = sp;return ($17|0);
}
function _add_entry($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 HEAP32[$11>>2] = $5;
 $12 = HEAP32[$6>>2]|0;
 $13 = ((($12)) + 23|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)!=(0);
 $16 = HEAP32[$7>>2]|0;
 $17 = HEAP32[$6>>2]|0;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 if ($15) {
  $22 = HEAP32[$9>>2]|0;
  $23 = (($19) + ($22<<2)|0);
  HEAP32[$23>>2] = $16;
  $24 = HEAP32[$10>>2]|0;
  $25 = $24&255;
  $26 = HEAP32[$6>>2]|0;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$9>>2]|0;
  $30 = (($28) + ($29)|0);
  HEAP8[$30>>0] = $25;
  $31 = HEAP32[$8>>2]|0;
  $32 = HEAP32[$11>>2]|0;
  $33 = HEAP32[$9>>2]|0;
  $34 = (($32) + ($33<<2)|0);
  $$sink = $31;$$sink1 = $34;
  HEAP32[$$sink1>>2] = $$sink;
  STACKTOP = sp;return;
 } else {
  $20 = HEAP32[$8>>2]|0;
  $21 = (($19) + ($20<<2)|0);
  $$sink = $16;$$sink1 = $21;
  HEAP32[$$sink1>>2] = $$sink;
  STACKTOP = sp;return;
 }
}
function _LoadSound($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 16|0;
 $4 = sp;
 HEAP32[$2>>2] = $1;
 $5 = HEAP32[$2>>2]|0;
 _LoadWave($3,$5);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$3+16>>2]|0;
 _LoadSoundFromWave($4,$$byval_copy1);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$3+16>>2]|0;
 _UnloadWave($$byval_copy1);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _LoadSoundFromWave($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 40|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;
  STACKTOP = sp;return;
 }
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(8);
 if ($12) {
  $17 = 1;
 } else {
  $13 = ((($1)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(16);
  $16 = $15 ? 2 : 5;
  $17 = $16;
 }
 HEAP32[$3>>2] = $17;
 $18 = HEAP32[$1>>2]|0;
 HEAP32[$4>>2] = $18;
 $19 = HEAP32[$3>>2]|0;
 $20 = ((($1)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($1)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$4>>2]|0;
 $25 = (_mal_convert_frames(0,5,2,44100,0,$19,$21,$23,$24)|0);
 HEAP32[$5>>2] = $25;
 $26 = HEAP32[$5>>2]|0;
 $27 = ($26|0)==(0);
 if ($27) {
  _TraceLog(2,15886,$vararg_buffer);
 }
 $28 = HEAP32[$5>>2]|0;
 $29 = (_CreateAudioBuffer(5,2,44100,$28,0)|0);
 HEAP32[$6>>2] = $29;
 $30 = HEAP32[$6>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  _TraceLog(2,15956,$vararg_buffer1);
 }
 $32 = HEAP32[$6>>2]|0;
 $33 = ((($32)) + 38108|0);
 $34 = HEAP32[$6>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$6>>2]|0;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$6>>2]|0;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($1)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$3>>2]|0;
 $45 = ((($1)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($1)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$4>>2]|0;
 $50 = (_mal_convert_frames($33,$35,$38,$41,$43,$44,$46,$48,$49)|0);
 HEAP32[$5>>2] = $50;
 $51 = HEAP32[$5>>2]|0;
 $52 = ($51|0)==(0);
 if ($52) {
  _TraceLog(2,16008,$vararg_buffer3);
 }
 $53 = HEAP32[$6>>2]|0;
 HEAP32[$2>>2] = $53;
 ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;
 STACKTOP = sp;return;
}
function _UnloadWave($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = ((($0)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  _free($5);
 }
 _TraceLog(0,15858,$vararg_buffer);
 STACKTOP = sp;return;
}
function _UnloadSound($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 _DeleteAudioBuffer($1);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 _TraceLog(0,16055,$vararg_buffer);
 STACKTOP = sp;return;
}
function _PlaySound($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _PlayAudioBuffer($1);
 return;
}
function _emscripten_GetProcAddress($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (_strlen($5)|0);
 $7 = (($6) + 1)|0;
 $8 = (_malloc($7)|0);
 HEAP32[$3>>2] = $8;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$2>>2]|0;
 (_strcpy($9,$10)|0);
 $11 = HEAP32[$3>>2]|0;
 $12 = (_strstr($11,16108)|0);
 HEAP32[$4>>2] = $12;
 $13 = HEAP32[$4>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = HEAP32[$4>>2]|0;
  HEAP8[$15>>0] = 0;
 }
 $16 = HEAP32[$3>>2]|0;
 $17 = (_strstr($16,16112)|0);
 HEAP32[$4>>2] = $17;
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = HEAP32[$4>>2]|0;
  HEAP8[$20>>0] = 0;
 }
 $21 = HEAP32[$3>>2]|0;
 $22 = (_strstr($21,16116)|0);
 HEAP32[$4>>2] = $22;
 $23 = HEAP32[$4>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = HEAP32[$4>>2]|0;
  HEAP8[$25>>0] = 0;
 }
 $26 = HEAP32[$3>>2]|0;
 $27 = (_strstr($26,16120)|0);
 HEAP32[$4>>2] = $27;
 $28 = HEAP32[$4>>2]|0;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = HEAP32[$4>>2]|0;
  HEAP8[$30>>0] = 0;
 }
 $31 = HEAP32[$3>>2]|0;
 $32 = (_strcmp($31,16126)|0);
 $33 = ($32|0)!=(0);
 do {
  if ($33) {
   $34 = HEAP32[$3>>2]|0;
   $35 = (_strcmp($34,16164)|0);
   $36 = ($35|0)!=(0);
   if (!($36)) {
    HEAP32[$3>>2] = 16183;
    break;
   }
   $37 = HEAP32[$3>>2]|0;
   $38 = (_strcmp($37,16196)|0);
   $39 = ($38|0)!=(0);
   if (!($39)) {
    HEAP32[$3>>2] = 16217;
    break;
   }
   $40 = HEAP32[$3>>2]|0;
   $41 = (_strcmp($40,16232)|0);
   $42 = ($41|0)!=(0);
   if (!($42)) {
    HEAP32[$3>>2] = 16247;
    break;
   }
   $43 = HEAP32[$3>>2]|0;
   $44 = (_strcmp($43,16262)|0);
   $45 = ($44|0)!=(0);
   if (!($45)) {
    HEAP32[$3>>2] = 16277;
   }
  } else {
   HEAP32[$3>>2] = 16148;
  }
 } while(0);
 $46 = HEAP32[$3>>2]|0;
 $47 = (_strcmp($46,16292)|0);
 $48 = ($47|0)!=(0);
 do {
  if ($48) {
   $49 = HEAP32[$3>>2]|0;
   $50 = (_strcmp($49,16306)|0);
   $51 = ($50|0)!=(0);
   if (!($51)) {
    HEAP32[$1>>2] = 9;
    break;
   }
   $52 = HEAP32[$3>>2]|0;
   $53 = (_strcmp($52,16318)|0);
   $54 = ($53|0)!=(0);
   if (!($54)) {
    HEAP32[$1>>2] = 6;
    break;
   }
   $55 = HEAP32[$3>>2]|0;
   $56 = (_strcmp($55,16332)|0);
   $57 = ($56|0)!=(0);
   if (!($57)) {
    HEAP32[$1>>2] = 7;
    break;
   }
   $58 = HEAP32[$3>>2]|0;
   $59 = (_strcmp($58,16344)|0);
   $60 = ($59|0)!=(0);
   if (!($60)) {
    HEAP32[$1>>2] = 8;
    break;
   }
   $61 = HEAP32[$3>>2]|0;
   $62 = (_strcmp($61,16358)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    HEAP32[$1>>2] = 9;
    break;
   }
   $64 = HEAP32[$3>>2]|0;
   $65 = (_strcmp($64,16372)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    HEAP32[$1>>2] = 10;
    break;
   }
   $67 = HEAP32[$3>>2]|0;
   $68 = (_strcmp($67,16389)|0);
   $69 = ($68|0)!=(0);
   if (!($69)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $70 = HEAP32[$3>>2]|0;
   $71 = (_strcmp($70,16412)|0);
   $72 = ($71|0)!=(0);
   if (!($72)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $73 = HEAP32[$3>>2]|0;
   $74 = (_strcmp($73,16438)|0);
   $75 = ($74|0)!=(0);
   if (!($75)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $76 = HEAP32[$3>>2]|0;
   $77 = (_strcmp($76,16451)|0);
   $78 = ($77|0)!=(0);
   if (!($78)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $79 = HEAP32[$3>>2]|0;
   $80 = (_strcmp($79,16467)|0);
   $81 = ($80|0)!=(0);
   if (!($81)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $82 = HEAP32[$3>>2]|0;
   $83 = (_strcmp($82,16480)|0);
   $84 = ($83|0)!=(0);
   if (!($84)) {
    HEAP32[$1>>2] = 11;
    break;
   }
   $85 = HEAP32[$3>>2]|0;
   $86 = (_strcmp($85,16494)|0);
   $87 = ($86|0)!=(0);
   if (!($87)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $88 = HEAP32[$3>>2]|0;
   $89 = (_strcmp($88,16514)|0);
   $90 = ($89|0)!=(0);
   if (!($90)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $91 = HEAP32[$3>>2]|0;
   $92 = (_strcmp($91,16534)|0);
   $93 = ($92|0)!=(0);
   if (!($93)) {
    HEAP32[$1>>2] = 6;
    break;
   }
   $94 = HEAP32[$3>>2]|0;
   $95 = (_strcmp($94,16551)|0);
   $96 = ($95|0)!=(0);
   if (!($96)) {
    HEAP32[$1>>2] = 7;
    break;
   }
   $97 = HEAP32[$3>>2]|0;
   $98 = (_strcmp($97,16568)|0);
   $99 = ($98|0)!=(0);
   if (!($99)) {
    HEAP32[$1>>2] = 10;
    break;
   }
   $100 = HEAP32[$3>>2]|0;
   $101 = (_strcmp($100,16580)|0);
   $102 = ($101|0)!=(0);
   if (!($102)) {
    HEAP32[$1>>2] = 12;
    break;
   }
   $103 = HEAP32[$3>>2]|0;
   $104 = (_strcmp($103,16593)|0);
   $105 = ($104|0)!=(0);
   if (!($105)) {
    HEAP32[$1>>2] = 13;
    break;
   }
   $106 = HEAP32[$3>>2]|0;
   $107 = (_strcmp($106,16609)|0);
   $108 = ($107|0)!=(0);
   if (!($108)) {
    HEAP32[$1>>2] = 8;
    break;
   }
   $109 = HEAP32[$3>>2]|0;
   $110 = (_strcmp($109,16632)|0);
   $111 = ($110|0)!=(0);
   if (!($111)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $112 = HEAP32[$3>>2]|0;
   $113 = (_strcmp($112,16645)|0);
   $114 = ($113|0)!=(0);
   if (!($114)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $115 = HEAP32[$3>>2]|0;
   $116 = (_strcmp($115,16661)|0);
   $117 = ($116|0)!=(0);
   if (!($117)) {
    HEAP32[$1>>2] = 11;
    break;
   }
   $118 = HEAP32[$3>>2]|0;
   $119 = (_strcmp($118,16672)|0);
   $120 = ($119|0)!=(0);
   if (!($120)) {
    HEAP32[$1>>2] = 14;
    break;
   }
   $121 = HEAP32[$3>>2]|0;
   $122 = (_strcmp($121,16691)|0);
   $123 = ($122|0)!=(0);
   if (!($123)) {
    HEAP32[$1>>2] = 15;
    break;
   }
   $124 = HEAP32[$3>>2]|0;
   $125 = (_strcmp($124,16713)|0);
   $126 = ($125|0)!=(0);
   if (!($126)) {
    HEAP32[$1>>2] = 16;
    break;
   }
   $127 = HEAP32[$3>>2]|0;
   $128 = (_strcmp($127,16732)|0);
   $129 = ($128|0)!=(0);
   if (!($129)) {
    HEAP32[$1>>2] = 9;
    break;
   }
   $130 = HEAP32[$3>>2]|0;
   $131 = (_strcmp($130,16761)|0);
   $132 = ($131|0)!=(0);
   if (!($132)) {
    HEAP32[$1>>2] = 12;
    break;
   }
   $133 = HEAP32[$3>>2]|0;
   $134 = (_strcmp($133,16778)|0);
   $135 = ($134|0)!=(0);
   if (!($135)) {
    HEAP32[$1>>2] = 10;
    break;
   }
   $136 = HEAP32[$3>>2]|0;
   $137 = (_strcmp($136,16793)|0);
   $138 = ($137|0)!=(0);
   if (!($138)) {
    HEAP32[$1>>2] = 11;
    break;
   }
   $139 = HEAP32[$3>>2]|0;
   $140 = (_strcmp($139,16808)|0);
   $141 = ($140|0)!=(0);
   if (!($141)) {
    HEAP32[$1>>2] = 8;
    break;
   }
   $142 = HEAP32[$3>>2]|0;
   $143 = (_strcmp($142,16829)|0);
   $144 = ($143|0)!=(0);
   if (!($144)) {
    HEAP32[$1>>2] = 12;
    break;
   }
   $145 = HEAP32[$3>>2]|0;
   $146 = (_strcmp($145,16849)|0);
   $147 = ($146|0)!=(0);
   if (!($147)) {
    HEAP32[$1>>2] = 13;
    break;
   }
   $148 = HEAP32[$3>>2]|0;
   $149 = (_strcmp($148,16869)|0);
   $150 = ($149|0)!=(0);
   if (!($150)) {
    HEAP32[$1>>2] = 14;
    break;
   }
   $151 = HEAP32[$3>>2]|0;
   $152 = (_strcmp($151,16895)|0);
   $153 = ($152|0)!=(0);
   if (!($153)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $154 = HEAP32[$3>>2]|0;
   $155 = (_strcmp($154,16914)|0);
   $156 = ($155|0)!=(0);
   if (!($156)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $157 = HEAP32[$3>>2]|0;
   $158 = (_strcmp($157,16926)|0);
   $159 = ($158|0)!=(0);
   if (!($159)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $160 = HEAP32[$3>>2]|0;
   $161 = (_strcmp($160,16938)|0);
   $162 = ($161|0)!=(0);
   if (!($162)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $163 = HEAP32[$3>>2]|0;
   $164 = (_strcmp($163,16950)|0);
   $165 = ($164|0)!=(0);
   if (!($165)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $166 = HEAP32[$3>>2]|0;
   $167 = (_strcmp($166,16962)|0);
   $168 = ($167|0)!=(0);
   if (!($168)) {
    HEAP32[$1>>2] = 17;
    break;
   }
   $169 = HEAP32[$3>>2]|0;
   $170 = (_strcmp($169,16974)|0);
   $171 = ($170|0)!=(0);
   if (!($171)) {
    HEAP32[$1>>2] = 15;
    break;
   }
   $172 = HEAP32[$3>>2]|0;
   $173 = (_strcmp($172,16986)|0);
   $174 = ($173|0)!=(0);
   if (!($174)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $175 = HEAP32[$3>>2]|0;
   $176 = (_strcmp($175,16998)|0);
   $177 = ($176|0)!=(0);
   if (!($177)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $178 = HEAP32[$3>>2]|0;
   $179 = (_strcmp($178,17010)|0);
   $180 = ($179|0)!=(0);
   if (!($180)) {
    HEAP32[$1>>2] = 16;
    break;
   }
   $181 = HEAP32[$3>>2]|0;
   $182 = (_strcmp($181,17023)|0);
   $183 = ($182|0)!=(0);
   if (!($183)) {
    HEAP32[$1>>2] = 17;
    break;
   }
   $184 = HEAP32[$3>>2]|0;
   $185 = (_strcmp($184,17036)|0);
   $186 = ($185|0)!=(0);
   if (!($186)) {
    HEAP32[$1>>2] = 18;
    break;
   }
   $187 = HEAP32[$3>>2]|0;
   $188 = (_strcmp($187,17049)|0);
   $189 = ($188|0)!=(0);
   if (!($189)) {
    HEAP32[$1>>2] = 19;
    break;
   }
   $190 = HEAP32[$3>>2]|0;
   $191 = (_strcmp($190,17062)|0);
   $192 = ($191|0)!=(0);
   if (!($192)) {
    HEAP32[$1>>2] = 20;
    break;
   }
   $193 = HEAP32[$3>>2]|0;
   $194 = (_strcmp($193,17075)|0);
   $195 = ($194|0)!=(0);
   if (!($195)) {
    HEAP32[$1>>2] = 21;
    break;
   }
   $196 = HEAP32[$3>>2]|0;
   $197 = (_strcmp($196,17088)|0);
   $198 = ($197|0)!=(0);
   if (!($198)) {
    HEAP32[$1>>2] = 22;
    break;
   }
   $199 = HEAP32[$3>>2]|0;
   $200 = (_strcmp($199,17101)|0);
   $201 = ($200|0)!=(0);
   if (!($201)) {
    HEAP32[$1>>2] = 23;
    break;
   }
   $202 = HEAP32[$3>>2]|0;
   $203 = (_strcmp($202,17114)|0);
   $204 = ($203|0)!=(0);
   if (!($204)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $205 = HEAP32[$3>>2]|0;
   $206 = (_strcmp($205,17133)|0);
   $207 = ($206|0)!=(0);
   if (!($207)) {
    HEAP32[$1>>2] = 6;
    break;
   }
   $208 = HEAP32[$3>>2]|0;
   $209 = (_strcmp($208,17152)|0);
   $210 = ($209|0)!=(0);
   if (!($210)) {
    HEAP32[$1>>2] = 7;
    break;
   }
   $211 = HEAP32[$3>>2]|0;
   $212 = (_strcmp($211,17171)|0);
   $213 = ($212|0)!=(0);
   if (!($213)) {
    HEAP32[$1>>2] = 18;
    break;
   }
   $214 = HEAP32[$3>>2]|0;
   $215 = (_strcmp($214,17184)|0);
   $216 = ($215|0)!=(0);
   if (!($216)) {
    HEAP32[$1>>2] = 19;
    break;
   }
   $217 = HEAP32[$3>>2]|0;
   $218 = (_strcmp($217,17202)|0);
   $219 = ($218|0)!=(0);
   if (!($219)) {
    HEAP32[$1>>2] = 20;
    break;
   }
   $220 = HEAP32[$3>>2]|0;
   $221 = (_strcmp($220,17220)|0);
   $222 = ($221|0)!=(0);
   if (!($222)) {
    HEAP32[$1>>2] = 21;
    break;
   }
   $223 = HEAP32[$3>>2]|0;
   $224 = (_strcmp($223,17238)|0);
   $225 = ($224|0)!=(0);
   if (!($225)) {
    HEAP32[$1>>2] = 22;
    break;
   }
   $226 = HEAP32[$3>>2]|0;
   $227 = (_strcmp($226,17256)|0);
   $228 = ($227|0)!=(0);
   if (!($228)) {
    HEAP32[$1>>2] = 9;
    break;
   }
   $229 = HEAP32[$3>>2]|0;
   $230 = (_strcmp($229,17276)|0);
   $231 = ($230|0)!=(0);
   if (!($231)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $232 = HEAP32[$3>>2]|0;
   $233 = (_strcmp($232,16217)|0);
   $234 = ($233|0)!=(0);
   if (!($234)) {
    HEAP32[$1>>2] = 13;
    break;
   }
   $235 = HEAP32[$3>>2]|0;
   $236 = (_strcmp($235,17294)|0);
   $237 = ($236|0)!=(0);
   if (!($237)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $238 = HEAP32[$3>>2]|0;
   $239 = (_strcmp($238,17309)|0);
   $240 = ($239|0)!=(0);
   if (!($240)) {
    HEAP32[$1>>2] = 8;
    break;
   }
   $241 = HEAP32[$3>>2]|0;
   $242 = (_strcmp($241,17330)|0);
   $243 = ($242|0)!=(0);
   if (!($243)) {
    HEAP32[$1>>2] = 9;
    break;
   }
   $244 = HEAP32[$3>>2]|0;
   $245 = (_strcmp($244,17345)|0);
   $246 = ($245|0)!=(0);
   if (!($246)) {
    HEAP32[$1>>2] = 10;
    break;
   }
   $247 = HEAP32[$3>>2]|0;
   $248 = (_strcmp($247,17363)|0);
   $249 = ($248|0)!=(0);
   if (!($249)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $250 = HEAP32[$3>>2]|0;
   $251 = (_strcmp($250,17379)|0);
   $252 = ($251|0)!=(0);
   if (!($252)) {
    HEAP32[$1>>2] = 11;
    break;
   }
   $253 = HEAP32[$3>>2]|0;
   $254 = (_strcmp($253,17398)|0);
   $255 = ($254|0)!=(0);
   if (!($255)) {
    HEAP32[$1>>2] = 24;
    break;
   }
   $256 = HEAP32[$3>>2]|0;
   $257 = (_strcmp($256,17412)|0);
   $258 = ($257|0)!=(0);
   if (!($258)) {
    HEAP32[$1>>2] = 25;
    break;
   }
   $259 = HEAP32[$3>>2]|0;
   $260 = (_strcmp($259,17427)|0);
   $261 = ($260|0)!=(0);
   if (!($261)) {
    HEAP32[$1>>2] = 14;
    break;
   }
   $262 = HEAP32[$3>>2]|0;
   $263 = (_strcmp($262,16148)|0);
   $264 = ($263|0)!=(0);
   if (!($264)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $265 = HEAP32[$3>>2]|0;
   $266 = (_strcmp($265,17438)|0);
   $267 = ($266|0)!=(0);
   if (!($267)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $268 = HEAP32[$3>>2]|0;
   $269 = (_strcmp($268,16247)|0);
   $270 = ($269|0)!=(0);
   if (!($270)) {
    HEAP32[$1>>2] = 23;
    break;
   }
   $271 = HEAP32[$3>>2]|0;
   $272 = (_strcmp($271,16277)|0);
   $273 = ($272|0)!=(0);
   if (!($273)) {
    HEAP32[$1>>2] = 24;
    break;
   }
   $274 = HEAP32[$3>>2]|0;
   $275 = (_strcmp($274,17454)|0);
   $276 = ($275|0)!=(0);
   if (!($276)) {
    HEAP32[$1>>2] = 12;
    break;
   }
   $277 = HEAP32[$3>>2]|0;
   $278 = (_strcmp($277,17481)|0);
   $279 = ($278|0)!=(0);
   if (!($279)) {
    HEAP32[$1>>2] = 6;
    break;
   }
   $280 = HEAP32[$3>>2]|0;
   $281 = (_strcmp($280,17495)|0);
   $282 = ($281|0)!=(0);
   if (!($282)) {
    HEAP32[$1>>2] = 13;
    break;
   }
   $283 = HEAP32[$3>>2]|0;
   $284 = (_strcmp($283,16183)|0);
   $285 = ($284|0)!=(0);
   if (!($285)) {
    HEAP32[$1>>2] = 7;
    break;
   }
   $286 = HEAP32[$3>>2]|0;
   $287 = (_strcmp($286,17515)|0);
   $288 = ($287|0)!=(0);
   if (!($288)) {
    HEAP32[$1>>2] = 8;
    break;
   }
   $289 = HEAP32[$3>>2]|0;
   $290 = (_strcmp($289,17533)|0);
   $291 = ($290|0)!=(0);
   if (!($291)) {
    HEAP32[$1>>2] = 15;
    break;
   }
   $292 = HEAP32[$3>>2]|0;
   $293 = (_strcmp($292,17545)|0);
   $294 = ($293|0)!=(0);
   if (!($294)) {
    HEAP32[$1>>2] = 26;
    break;
   }
   $295 = HEAP32[$3>>2]|0;
   $296 = (_strcmp($295,17566)|0);
   $297 = ($296|0)!=(0);
   if (!($297)) {
    HEAP32[$1>>2] = 25;
    break;
   }
   $298 = HEAP32[$3>>2]|0;
   $299 = (_strcmp($298,17584)|0);
   $300 = ($299|0)!=(0);
   if (!($300)) {
    HEAP32[$1>>2] = 26;
    break;
   }
   $301 = HEAP32[$3>>2]|0;
   $302 = (_strcmp($301,17602)|0);
   $303 = ($302|0)!=(0);
   if (!($303)) {
    HEAP32[$1>>2] = 27;
    break;
   }
   $304 = HEAP32[$3>>2]|0;
   $305 = (_strcmp($304,17623)|0);
   $306 = ($305|0)!=(0);
   if (!($306)) {
    HEAP32[$1>>2] = 14;
    break;
   }
   $307 = HEAP32[$3>>2]|0;
   $308 = (_strcmp($307,17649)|0);
   $309 = ($308|0)!=(0);
   if (!($309)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $310 = HEAP32[$3>>2]|0;
   $311 = (_strcmp($310,17672)|0);
   $312 = ($311|0)!=(0);
   if (!($312)) {
    HEAP32[$1>>2] = 15;
    break;
   }
   $313 = HEAP32[$3>>2]|0;
   $314 = (_strcmp($313,17710)|0);
   $315 = ($314|0)!=(0);
   if (!($315)) {
    HEAP32[$1>>2] = 16;
    break;
   }
   $316 = HEAP32[$3>>2]|0;
   $317 = (_strcmp($316,17726)|0);
   $318 = ($317|0)!=(0);
   if (!($318)) {
    HEAP32[$1>>2] = 9;
    break;
   }
   $319 = HEAP32[$3>>2]|0;
   $320 = (_strcmp($319,17741)|0);
   $321 = ($320|0)!=(0);
   if (!($321)) {
    HEAP32[$1>>2] = 27;
    break;
   }
   $322 = HEAP32[$3>>2]|0;
   $323 = (_strcmp($322,17764)|0);
   $324 = ($323|0)!=(0);
   if (!($324)) {
    HEAP32[$1>>2] = 16;
    break;
   }
   $325 = HEAP32[$3>>2]|0;
   $326 = (_strcmp($325,17777)|0);
   $327 = ($326|0)!=(0);
   if (!($327)) {
    HEAP32[$1>>2] = 28;
    break;
   }
   $328 = HEAP32[$3>>2]|0;
   $329 = (_strcmp($328,17791)|0);
   $330 = ($329|0)!=(0);
   if (!($330)) {
    HEAP32[$1>>2] = 29;
    break;
   }
   $331 = HEAP32[$3>>2]|0;
   $332 = (_strcmp($331,17805)|0);
   $333 = ($332|0)!=(0);
   if (!($333)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $334 = HEAP32[$3>>2]|0;
   $335 = (_strcmp($334,17825)|0);
   $336 = ($335|0)!=(0);
   if (!($336)) {
    HEAP32[$1>>2] = 10;
    break;
   }
   $337 = HEAP32[$3>>2]|0;
   $338 = (_strcmp($337,17845)|0);
   $339 = ($338|0)!=(0);
   if (!($339)) {
    HEAP32[$1>>2] = 17;
    break;
   }
   $340 = HEAP32[$3>>2]|0;
   $341 = (_strcmp($340,17861)|0);
   $342 = ($341|0)!=(0);
   if (!($342)) {
    HEAP32[$1>>2] = 18;
    break;
   }
   $343 = HEAP32[$3>>2]|0;
   $344 = (_strcmp($343,17879)|0);
   $345 = ($344|0)!=(0);
   if (!($345)) {
    HEAP32[$1>>2] = 28;
    break;
   }
   $346 = HEAP32[$3>>2]|0;
   $347 = (_strcmp($346,17895)|0);
   $348 = ($347|0)!=(0);
   if (!($348)) {
    HEAP32[$1>>2] = 19;
    break;
   }
   $349 = HEAP32[$3>>2]|0;
   $350 = (_strcmp($349,17910)|0);
   $351 = ($350|0)!=(0);
   if (!($351)) {
    HEAP32[$1>>2] = 11;
    break;
   }
   $352 = HEAP32[$3>>2]|0;
   $353 = (_strcmp($352,17932)|0);
   $354 = ($353|0)!=(0);
   if (!($354)) {
    HEAP32[$1>>2] = 30;
    break;
   }
   $355 = HEAP32[$3>>2]|0;
   $356 = (_strcmp($355,17950)|0);
   $357 = ($356|0)!=(0);
   if (!($357)) {
    HEAP32[$1>>2] = 31;
    break;
   }
   $358 = HEAP32[$3>>2]|0;
   $359 = (_strcmp($358,17971)|0);
   $360 = ($359|0)!=(0);
   if (!($360)) {
    HEAP32[$1>>2] = 12;
    break;
   }
   $361 = HEAP32[$3>>2]|0;
   $362 = (_strcmp($361,17989)|0);
   $363 = ($362|0)!=(0);
   if (!($363)) {
    HEAP32[$1>>2] = 13;
    break;
   }
   $364 = HEAP32[$3>>2]|0;
   $365 = (_strcmp($364,18002)|0);
   $366 = ($365|0)!=(0);
   if (!($366)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $367 = HEAP32[$3>>2]|0;
   $368 = (_strcmp($367,18017)|0);
   $369 = ($368|0)!=(0);
   if (!($369)) {
    HEAP32[$1>>2] = 14;
    break;
   }
   $370 = HEAP32[$3>>2]|0;
   $371 = (_strcmp($370,18031)|0);
   $372 = ($371|0)!=(0);
   if (!($372)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $373 = HEAP32[$3>>2]|0;
   $374 = (_strcmp($373,18041)|0);
   $375 = ($374|0)!=(0);
   if (!($375)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $376 = HEAP32[$3>>2]|0;
   $377 = (_strcmp($376,18051)|0);
   $378 = ($377|0)!=(0);
   if (!($378)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $379 = HEAP32[$3>>2]|0;
   $380 = (_strcmp($379,18073)|0);
   $381 = ($380|0)!=(0);
   if (!($381)) {
    HEAP32[$1>>2] = 15;
    break;
   }
   $382 = HEAP32[$3>>2]|0;
   $383 = (_strcmp($382,18099)|0);
   $384 = ($383|0)!=(0);
   if (!($384)) {
    HEAP32[$1>>2] = 16;
    break;
   }
   $385 = HEAP32[$3>>2]|0;
   $386 = (_strcmp($385,18126)|0);
   $387 = ($386|0)!=(0);
   if (!($387)) {
    HEAP32[$1>>2] = 29;
    break;
   }
   $388 = HEAP32[$3>>2]|0;
   $389 = (_strcmp($388,18139)|0);
   $390 = ($389|0)!=(0);
   if (!($390)) {
    HEAP32[$1>>2] = 20;
    break;
   }
   $391 = HEAP32[$3>>2]|0;
   $392 = (_strcmp($391,18154)|0);
   $393 = ($392|0)!=(0);
   if (!($393)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $394 = HEAP32[$3>>2]|0;
   $395 = (_strcmp($394,18169)|0);
   $396 = ($395|0)!=(0);
   if (!($396)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $397 = HEAP32[$3>>2]|0;
   $398 = (_strcmp($397,18193)|0);
   $399 = ($398|0)!=(0);
   if (!($399)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $400 = HEAP32[$3>>2]|0;
   $401 = (_strcmp($400,18204)|0);
   $402 = ($401|0)!=(0);
   if (!($402)) {
    HEAP32[$1>>2] = 32;
    break;
   }
   $403 = HEAP32[$3>>2]|0;
   $404 = (_strcmp($403,18226)|0);
   $405 = ($404|0)!=(0);
   if (!($405)) {
    HEAP32[$1>>2] = 21;
    break;
   }
   $406 = HEAP32[$3>>2]|0;
   $407 = (_strcmp($406,18248)|0);
   $408 = ($407|0)!=(0);
   if (!($408)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $409 = HEAP32[$3>>2]|0;
   $410 = (_strcmp($409,18272)|0);
   $411 = ($410|0)!=(0);
   if (!($411)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $412 = HEAP32[$3>>2]|0;
   $413 = (_strcmp($412,18281)|0);
   $414 = ($413|0)!=(0);
   if (!($414)) {
    HEAP32[$1>>2] = 6;
    break;
   }
   $415 = HEAP32[$3>>2]|0;
   $416 = (_strcmp($415,18289)|0);
   $417 = ($416|0)!=(0);
   if (!($417)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $418 = HEAP32[$3>>2]|0;
   $419 = (_strcmp($418,18302)|0);
   $420 = ($419|0)!=(0);
   if (!($420)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $421 = HEAP32[$3>>2]|0;
   $422 = (_strcmp($421,18316)|0);
   $423 = ($422|0)!=(0);
   if (!($423)) {
    HEAP32[$1>>2] = 17;
    break;
   }
   $424 = HEAP32[$3>>2]|0;
   $425 = (_strcmp($424,18328)|0);
   $426 = ($425|0)!=(0);
   if (!($426)) {
    HEAP32[$1>>2] = 18;
    break;
   }
   $427 = HEAP32[$3>>2]|0;
   $428 = (_strcmp($427,18337)|0);
   $429 = ($428|0)!=(0);
   if (!($429)) {
    HEAP32[$1>>2] = 19;
    break;
   }
   $430 = HEAP32[$3>>2]|0;
   $431 = (_strcmp($430,18347)|0);
   $432 = ($431|0)!=(0);
   if (!($432)) {
    HEAP32[$1>>2] = 20;
    break;
   }
   $433 = HEAP32[$3>>2]|0;
   $434 = (_strcmp($433,18359)|0);
   $435 = ($434|0)!=(0);
   if (!($435)) {
    HEAP32[$1>>2] = 21;
    break;
   }
   $436 = HEAP32[$3>>2]|0;
   $437 = (_strcmp($436,18370)|0);
   $438 = ($437|0)!=(0);
   if (!($438)) {
    HEAP32[$1>>2] = 22;
    break;
   }
   $439 = HEAP32[$3>>2]|0;
   $440 = (_strcmp($439,18378)|0);
   $441 = ($440|0)!=(0);
   if (!($441)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $442 = HEAP32[$3>>2]|0;
   $443 = (_strcmp($442,18390)|0);
   $444 = ($443|0)!=(0);
   if (!($444)) {
    HEAP32[$1>>2] = 23;
    break;
   }
   $445 = HEAP32[$3>>2]|0;
   $446 = (_strcmp($445,18405)|0);
   $447 = ($446|0)!=(0);
   if (!($447)) {
    HEAP32[$1>>2] = 24;
    break;
   }
   $448 = HEAP32[$3>>2]|0;
   $449 = (_strcmp($448,18417)|0);
   $450 = ($449|0)!=(0);
   if (!($450)) {
    HEAP32[$1>>2] = 25;
    break;
   }
   $451 = HEAP32[$3>>2]|0;
   $452 = (_strcmp($451,18431)|0);
   $453 = ($452|0)!=(0);
   if (!($453)) {
    HEAP32[$1>>2] = 17;
    break;
   }
   $454 = HEAP32[$3>>2]|0;
   $455 = (_strcmp($454,18456)|0);
   $456 = ($455|0)!=(0);
   if (!($456)) {
    HEAP32[$1>>2] = 26;
    break;
   }
   $457 = HEAP32[$3>>2]|0;
   $458 = (_strcmp($457,18473)|0);
   $459 = ($458|0)!=(0);
   if (!($459)) {
    HEAP32[$1>>2] = 27;
    break;
   }
   $460 = HEAP32[$3>>2]|0;
   $461 = (_strcmp($460,18489)|0);
   $462 = ($461|0)!=(0);
   if (!($462)) {
    HEAP32[$1>>2] = 28;
    break;
   }
   $463 = HEAP32[$3>>2]|0;
   $464 = (_strcmp($463,18505)|0);
   $465 = ($464|0)!=(0);
   if (!($465)) {
    HEAP32[$1>>2] = 18;
    break;
   }
   $466 = HEAP32[$3>>2]|0;
   $467 = (_strcmp($466,18517)|0);
   $468 = ($467|0)!=(0);
   if (!($468)) {
    HEAP32[$1>>2] = 33;
    break;
   }
   $469 = HEAP32[$3>>2]|0;
   $470 = (_strcmp($469,18529)|0);
   $471 = ($470|0)!=(0);
   if (!($471)) {
    HEAP32[$1>>2] = 34;
    break;
   }
   $472 = HEAP32[$3>>2]|0;
   $473 = (_strcmp($472,18553)|0);
   $474 = ($473|0)!=(0);
   if (!($474)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $475 = HEAP32[$3>>2]|0;
   $476 = (_strcmp($475,18566)|0);
   $477 = ($476|0)!=(0);
   if (!($477)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $478 = HEAP32[$3>>2]|0;
   $479 = (_strcmp($478,18580)|0);
   $480 = ($479|0)!=(0);
   if (!($480)) {
    HEAP32[$1>>2] = 35;
    break;
   }
   $481 = HEAP32[$3>>2]|0;
   $482 = (_strcmp($481,18602)|0);
   $483 = ($482|0)!=(0);
   if (!($483)) {
    HEAP32[$1>>2] = 36;
    break;
   }
   $484 = HEAP32[$3>>2]|0;
   $485 = (_strcmp($484,18609)|0);
   $486 = ($485|0)!=(0);
   if (!($486)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $487 = HEAP32[$3>>2]|0;
   $488 = (_strcmp($487,18625)|0);
   $489 = ($488|0)!=(0);
   if (!($489)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $490 = HEAP32[$3>>2]|0;
   $491 = (_strcmp($490,18642)|0);
   $492 = ($491|0)!=(0);
   if (!($492)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $493 = HEAP32[$3>>2]|0;
   $494 = (_strcmp($493,18659)|0);
   $495 = ($494|0)!=(0);
   if (!($495)) {
    HEAP32[$1>>2] = 30;
    break;
   }
   $496 = HEAP32[$3>>2]|0;
   $497 = (_strcmp($496,18675)|0);
   $498 = ($497|0)!=(0);
   if (!($498)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $499 = HEAP32[$3>>2]|0;
   $500 = (_strcmp($499,18691)|0);
   $501 = ($500|0)!=(0);
   if (!($501)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $502 = HEAP32[$3>>2]|0;
   $503 = (_strcmp($502,18708)|0);
   $504 = ($503|0)!=(0);
   if (!($504)) {
    HEAP32[$1>>2] = 31;
    break;
   }
   $505 = HEAP32[$3>>2]|0;
   $506 = (_strcmp($505,18722)|0);
   $507 = ($506|0)!=(0);
   if (!($507)) {
    HEAP32[$1>>2] = 32;
    break;
   }
   $508 = HEAP32[$3>>2]|0;
   $509 = (_strcmp($508,18734)|0);
   $510 = ($509|0)!=(0);
   if (!($510)) {
    HEAP32[$1>>2] = 22;
    break;
   }
   $511 = HEAP32[$3>>2]|0;
   $512 = (_strcmp($511,18745)|0);
   $513 = ($512|0)!=(0);
   if (!($513)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $514 = HEAP32[$3>>2]|0;
   $515 = (_strcmp($514,18758)|0);
   $516 = ($515|0)!=(0);
   if (!($516)) {
    HEAP32[$1>>2] = 23;
    break;
   }
   $517 = HEAP32[$3>>2]|0;
   $518 = (_strcmp($517,18768)|0);
   $519 = ($518|0)!=(0);
   if (!($519)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $520 = HEAP32[$3>>2]|0;
   $521 = (_strcmp($520,18785)|0);
   $522 = ($521|0)!=(0);
   if (!($522)) {
    HEAP32[$1>>2] = 24;
    break;
   }
   $523 = HEAP32[$3>>2]|0;
   $524 = (_strcmp($523,18797)|0);
   $525 = ($524|0)!=(0);
   if (!($525)) {
    HEAP32[$1>>2] = 25;
    break;
   }
   $526 = HEAP32[$3>>2]|0;
   $527 = (_strcmp($526,18819)|0);
   $528 = ($527|0)!=(0);
   if (!($528)) {
    HEAP32[$1>>2] = 26;
    break;
   }
   $529 = HEAP32[$3>>2]|0;
   $530 = (_strcmp($529,18839)|0);
   $531 = ($530|0)!=(0);
   if (!($531)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $532 = HEAP32[$3>>2]|0;
   $533 = (_strcmp($532,18852)|0);
   $534 = ($533|0)!=(0);
   if (!($534)) {
    HEAP32[$1>>2] = 27;
    break;
   }
   $535 = HEAP32[$3>>2]|0;
   $536 = (_strcmp($535,18874)|0);
   $537 = ($536|0)!=(0);
   if (!($537)) {
    HEAP32[$1>>2] = 28;
    break;
   }
   $538 = HEAP32[$3>>2]|0;
   $539 = (_strcmp($538,18894)|0);
   $540 = ($539|0)!=(0);
   if (!($540)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $541 = HEAP32[$3>>2]|0;
   $542 = (_strcmp($541,18911)|0);
   $543 = ($542|0)!=(0);
   if (!($543)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $544 = HEAP32[$3>>2]|0;
   $545 = (_strcmp($544,18928)|0);
   $546 = ($545|0)!=(0);
   if (!($546)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $547 = HEAP32[$3>>2]|0;
   $548 = (_strcmp($547,18948)|0);
   $549 = ($548|0)!=(0);
   if ($549) {
    $550 = HEAP32[$2>>2]|0;
    $551 = HEAP32[$3>>2]|0;
    $552 = _emscripten_asm_const_iii(0, ($550|0), ($551|0))|0;
    HEAP32[$1>>2] = 0;
    break;
   } else {
    HEAP32[$1>>2] = 37;
    break;
   }
  } else {
   HEAP32[$1>>2] = 5;
  }
 } while(0);
 $553 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($553|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4236$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0;
 var $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0;
 var $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0;
 var $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0, $$723948$i = 0, $$749$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i210 = 0, $$pre$i212 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0;
 var $$pre10$i$i = 0, $$sink1$i = 0, $$sink1$i$i = 0, $$sink16$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0, $not$$i$i = 0, $not$$i17$i = 0, $not$$i209 = 0, $not$$i216 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$5$i = 0, $not$7$i$i = 0, $not$8$i = 0, $not$9$i = 0;
 var $or$cond$i = 0, $or$cond$i214 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i215 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[16043]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (64212 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[16043] = $24;
     } else {
      $25 = HEAP32[(64188)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(64180)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (64212 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[16043] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(64188)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(64192)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (64212 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[16043] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(64188)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(64180)>>2] = $84;
     HEAP32[(64192)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(64176)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (64476 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $139 = ((($134)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $not$5$i = ($140|0)==(0|0);
     $$sink16$i = $not$5$i&1;
     $141 = (((($134)) + 16|0) + ($$sink16$i<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==(0|0);
     if ($143) {
      $$0192$lcssa$i = $134;$$0193$lcssa$i = $138;
     } else {
      $$01928$i = $134;$$01937$i = $138;$145 = $142;
      while(1) {
       $144 = ((($145)) + 4|0);
       $146 = HEAP32[$144>>2]|0;
       $147 = $146 & -8;
       $148 = (($147) - ($6))|0;
       $149 = ($148>>>0)<($$01937$i>>>0);
       $$$0193$i = $149 ? $148 : $$01937$i;
       $$$0192$i = $149 ? $145 : $$01928$i;
       $150 = ((($145)) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $not$$i = ($151|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $152 = (((($145)) + 16|0) + ($$sink1$i<<2)|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($153|0)==(0|0);
       if ($154) {
        $$0192$lcssa$i = $$$0192$i;$$0193$lcssa$i = $$$0193$i;
        break;
       } else {
        $$01928$i = $$$0192$i;$$01937$i = $$$0193$i;$145 = $153;
       }
      }
     }
     $155 = HEAP32[(64188)>>2]|0;
     $156 = ($$0192$lcssa$i>>>0)<($155>>>0);
     if ($156) {
      _abort();
      // unreachable;
     }
     $157 = (($$0192$lcssa$i) + ($6)|0);
     $158 = ($$0192$lcssa$i>>>0)<($157>>>0);
     if (!($158)) {
      _abort();
      // unreachable;
     }
     $159 = ((($$0192$lcssa$i)) + 24|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ((($$0192$lcssa$i)) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($162|0)==($$0192$lcssa$i|0);
     do {
      if ($163) {
       $173 = ((($$0192$lcssa$i)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = ((($$0192$lcssa$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $$3$i = 0;
         break;
        } else {
         $$1196$i = $177;$$1198$i = $176;
        }
       } else {
        $$1196$i = $174;$$1198$i = $173;
       }
       while(1) {
        $179 = ((($$1196$i)) + 20|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $$1196$i = $180;$$1198$i = $179;
         continue;
        }
        $182 = ((($$1196$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if ($184) {
         break;
        } else {
         $$1196$i = $183;$$1198$i = $182;
        }
       }
       $185 = ($$1198$i>>>0)<($155>>>0);
       if ($185) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1198$i>>2] = 0;
        $$3$i = $$1196$i;
        break;
       }
      } else {
       $164 = ((($$0192$lcssa$i)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165>>>0)<($155>>>0);
       if ($166) {
        _abort();
        // unreachable;
       }
       $167 = ((($165)) + 12|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==($$0192$lcssa$i|0);
       if (!($169)) {
        _abort();
        // unreachable;
       }
       $170 = ((($162)) + 8|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==($$0192$lcssa$i|0);
       if ($172) {
        HEAP32[$167>>2] = $162;
        HEAP32[$170>>2] = $165;
        $$3$i = $162;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $186 = ($160|0)==(0|0);
     L73: do {
      if (!($186)) {
       $187 = ((($$0192$lcssa$i)) + 28|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = (64476 + ($188<<2)|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = ($$0192$lcssa$i|0)==($190|0);
       do {
        if ($191) {
         HEAP32[$189>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $192 = 1 << $188;
          $193 = $192 ^ -1;
          $194 = $108 & $193;
          HEAP32[(64176)>>2] = $194;
          break L73;
         }
        } else {
         $195 = HEAP32[(64188)>>2]|0;
         $196 = ($160>>>0)<($195>>>0);
         if ($196) {
          _abort();
          // unreachable;
         } else {
          $197 = ((($160)) + 16|0);
          $198 = HEAP32[$197>>2]|0;
          $not$1$i = ($198|0)!=($$0192$lcssa$i|0);
          $$sink2$i = $not$1$i&1;
          $199 = (((($160)) + 16|0) + ($$sink2$i<<2)|0);
          HEAP32[$199>>2] = $$3$i;
          $200 = ($$3$i|0)==(0|0);
          if ($200) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while(0);
       $201 = HEAP32[(64188)>>2]|0;
       $202 = ($$3$i>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       }
       $203 = ((($$3$i)) + 24|0);
       HEAP32[$203>>2] = $160;
       $204 = ((($$0192$lcssa$i)) + 16|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = ($205|0)==(0|0);
       do {
        if (!($206)) {
         $207 = ($205>>>0)<($201>>>0);
         if ($207) {
          _abort();
          // unreachable;
         } else {
          $208 = ((($$3$i)) + 16|0);
          HEAP32[$208>>2] = $205;
          $209 = ((($205)) + 24|0);
          HEAP32[$209>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $210 = ((($$0192$lcssa$i)) + 20|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($211|0)==(0|0);
       if (!($212)) {
        $213 = HEAP32[(64188)>>2]|0;
        $214 = ($211>>>0)<($213>>>0);
        if ($214) {
         _abort();
         // unreachable;
        } else {
         $215 = ((($$3$i)) + 20|0);
         HEAP32[$215>>2] = $211;
         $216 = ((($211)) + 24|0);
         HEAP32[$216>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $217 = ($$0193$lcssa$i>>>0)<(16);
     if ($217) {
      $218 = (($$0193$lcssa$i) + ($6))|0;
      $219 = $218 | 3;
      $220 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$220>>2] = $219;
      $221 = (($$0192$lcssa$i) + ($218)|0);
      $222 = ((($221)) + 4|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = $223 | 1;
      HEAP32[$222>>2] = $224;
     } else {
      $225 = $6 | 3;
      $226 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$226>>2] = $225;
      $227 = $$0193$lcssa$i | 1;
      $228 = ((($157)) + 4|0);
      HEAP32[$228>>2] = $227;
      $229 = (($157) + ($$0193$lcssa$i)|0);
      HEAP32[$229>>2] = $$0193$lcssa$i;
      $230 = ($37|0)==(0);
      if (!($230)) {
       $231 = HEAP32[(64192)>>2]|0;
       $232 = $37 >>> 3;
       $233 = $232 << 1;
       $234 = (64212 + ($233<<2)|0);
       $235 = 1 << $232;
       $236 = $8 & $235;
       $237 = ($236|0)==(0);
       if ($237) {
        $238 = $8 | $235;
        HEAP32[16043] = $238;
        $$pre$i = ((($234)) + 8|0);
        $$0189$i = $234;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $239 = ((($234)) + 8|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = HEAP32[(64188)>>2]|0;
        $242 = ($240>>>0)<($241>>>0);
        if ($242) {
         _abort();
         // unreachable;
        } else {
         $$0189$i = $240;$$pre$phi$iZ2D = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $231;
       $243 = ((($$0189$i)) + 12|0);
       HEAP32[$243>>2] = $231;
       $244 = ((($231)) + 8|0);
       HEAP32[$244>>2] = $$0189$i;
       $245 = ((($231)) + 12|0);
       HEAP32[$245>>2] = $234;
      }
      HEAP32[(64180)>>2] = $$0193$lcssa$i;
      HEAP32[(64192)>>2] = $157;
     }
     $246 = ((($$0192$lcssa$i)) + 8|0);
     $$0 = $246;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $247 = ($0>>>0)>(4294967231);
   if ($247) {
    $$0197 = -1;
   } else {
    $248 = (($0) + 11)|0;
    $249 = $248 & -8;
    $250 = HEAP32[(64176)>>2]|0;
    $251 = ($250|0)==(0);
    if ($251) {
     $$0197 = $249;
    } else {
     $252 = (0 - ($249))|0;
     $253 = $248 >>> 8;
     $254 = ($253|0)==(0);
     if ($254) {
      $$0358$i = 0;
     } else {
      $255 = ($249>>>0)>(16777215);
      if ($255) {
       $$0358$i = 31;
      } else {
       $256 = (($253) + 1048320)|0;
       $257 = $256 >>> 16;
       $258 = $257 & 8;
       $259 = $253 << $258;
       $260 = (($259) + 520192)|0;
       $261 = $260 >>> 16;
       $262 = $261 & 4;
       $263 = $262 | $258;
       $264 = $259 << $262;
       $265 = (($264) + 245760)|0;
       $266 = $265 >>> 16;
       $267 = $266 & 2;
       $268 = $263 | $267;
       $269 = (14 - ($268))|0;
       $270 = $264 << $267;
       $271 = $270 >>> 15;
       $272 = (($269) + ($271))|0;
       $273 = $272 << 1;
       $274 = (($272) + 7)|0;
       $275 = $249 >>> $274;
       $276 = $275 & 1;
       $277 = $276 | $273;
       $$0358$i = $277;
      }
     }
     $278 = (64476 + ($$0358$i<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)==(0|0);
     L117: do {
      if ($280) {
       $$2355$i = 0;$$3$i201 = 0;$$3350$i = $252;
       label = 81;
      } else {
       $281 = ($$0358$i|0)==(31);
       $282 = $$0358$i >>> 1;
       $283 = (25 - ($282))|0;
       $284 = $281 ? 0 : $283;
       $285 = $249 << $284;
       $$0342$i = 0;$$0347$i = $252;$$0353$i = $279;$$0359$i = $285;$$0362$i = 0;
       while(1) {
        $286 = ((($$0353$i)) + 4|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = $287 & -8;
        $289 = (($288) - ($249))|0;
        $290 = ($289>>>0)<($$0347$i>>>0);
        if ($290) {
         $291 = ($289|0)==(0);
         if ($291) {
          $$415$i = $$0353$i;$$435114$i = 0;$$435713$i = $$0353$i;
          label = 85;
          break L117;
         } else {
          $$1343$i = $$0353$i;$$1348$i = $289;
         }
        } else {
         $$1343$i = $$0342$i;$$1348$i = $$0347$i;
        }
        $292 = ((($$0353$i)) + 20|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = $$0359$i >>> 31;
        $295 = (((($$0353$i)) + 16|0) + ($294<<2)|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = ($293|0)==(0|0);
        $298 = ($293|0)==($296|0);
        $or$cond2$i = $297 | $298;
        $$1363$i = $or$cond2$i ? $$0362$i : $293;
        $299 = ($296|0)==(0|0);
        $not$8$i = $299 ^ 1;
        $300 = $not$8$i&1;
        $$0359$$i = $$0359$i << $300;
        if ($299) {
         $$2355$i = $$1363$i;$$3$i201 = $$1343$i;$$3350$i = $$1348$i;
         label = 81;
         break;
        } else {
         $$0342$i = $$1343$i;$$0347$i = $$1348$i;$$0353$i = $296;$$0359$i = $$0359$$i;$$0362$i = $$1363$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 81) {
      $301 = ($$2355$i|0)==(0|0);
      $302 = ($$3$i201|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $$0358$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $250 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $$0197 = $249;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (64476 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $$4$ph$i = 0;$$4357$ph$i = $332;
      } else {
       $$4$ph$i = $$3$i201;$$4357$ph$i = $$2355$i;
      }
      $333 = ($$4357$ph$i|0)==(0|0);
      if ($333) {
       $$4$lcssa$i = $$4$ph$i;$$4351$lcssa$i = $$3350$i;
      } else {
       $$415$i = $$4$ph$i;$$435114$i = $$3350$i;$$435713$i = $$4357$ph$i;
       label = 85;
      }
     }
     if ((label|0) == 85) {
      while(1) {
       label = 0;
       $334 = ((($$435713$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($249))|0;
       $338 = ($337>>>0)<($$435114$i>>>0);
       $$$4351$i = $338 ? $337 : $$435114$i;
       $$4357$$4$i = $338 ? $$435713$i : $$415$i;
       $339 = ((($$435713$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $not$1$i203 = ($340|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $341 = (((($$435713$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = ($342|0)==(0|0);
       if ($343) {
        $$4$lcssa$i = $$4357$$4$i;$$4351$lcssa$i = $$$4351$i;
        break;
       } else {
        $$415$i = $$4357$$4$i;$$435114$i = $$$4351$i;$$435713$i = $342;
        label = 85;
       }
      }
     }
     $344 = ($$4$lcssa$i|0)==(0|0);
     if ($344) {
      $$0197 = $249;
     } else {
      $345 = HEAP32[(64180)>>2]|0;
      $346 = (($345) - ($249))|0;
      $347 = ($$4351$lcssa$i>>>0)<($346>>>0);
      if ($347) {
       $348 = HEAP32[(64188)>>2]|0;
       $349 = ($$4$lcssa$i>>>0)<($348>>>0);
       if ($349) {
        _abort();
        // unreachable;
       }
       $350 = (($$4$lcssa$i) + ($249)|0);
       $351 = ($$4$lcssa$i>>>0)<($350>>>0);
       if (!($351)) {
        _abort();
        // unreachable;
       }
       $352 = ((($$4$lcssa$i)) + 24|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ((($$4$lcssa$i)) + 12|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ($355|0)==($$4$lcssa$i|0);
       do {
        if ($356) {
         $366 = ((($$4$lcssa$i)) + 20|0);
         $367 = HEAP32[$366>>2]|0;
         $368 = ($367|0)==(0|0);
         if ($368) {
          $369 = ((($$4$lcssa$i)) + 16|0);
          $370 = HEAP32[$369>>2]|0;
          $371 = ($370|0)==(0|0);
          if ($371) {
           $$3372$i = 0;
           break;
          } else {
           $$1370$i = $370;$$1374$i = $369;
          }
         } else {
          $$1370$i = $367;$$1374$i = $366;
         }
         while(1) {
          $372 = ((($$1370$i)) + 20|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = ($373|0)==(0|0);
          if (!($374)) {
           $$1370$i = $373;$$1374$i = $372;
           continue;
          }
          $375 = ((($$1370$i)) + 16|0);
          $376 = HEAP32[$375>>2]|0;
          $377 = ($376|0)==(0|0);
          if ($377) {
           break;
          } else {
           $$1370$i = $376;$$1374$i = $375;
          }
         }
         $378 = ($$1374$i>>>0)<($348>>>0);
         if ($378) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1374$i>>2] = 0;
          $$3372$i = $$1370$i;
          break;
         }
        } else {
         $357 = ((($$4$lcssa$i)) + 8|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = ($358>>>0)<($348>>>0);
         if ($359) {
          _abort();
          // unreachable;
         }
         $360 = ((($358)) + 12|0);
         $361 = HEAP32[$360>>2]|0;
         $362 = ($361|0)==($$4$lcssa$i|0);
         if (!($362)) {
          _abort();
          // unreachable;
         }
         $363 = ((($355)) + 8|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==($$4$lcssa$i|0);
         if ($365) {
          HEAP32[$360>>2] = $355;
          HEAP32[$363>>2] = $358;
          $$3372$i = $355;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $379 = ($353|0)==(0|0);
       L164: do {
        if ($379) {
         $470 = $250;
        } else {
         $380 = ((($$4$lcssa$i)) + 28|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = (64476 + ($381<<2)|0);
         $383 = HEAP32[$382>>2]|0;
         $384 = ($$4$lcssa$i|0)==($383|0);
         do {
          if ($384) {
           HEAP32[$382>>2] = $$3372$i;
           $cond$i208 = ($$3372$i|0)==(0|0);
           if ($cond$i208) {
            $385 = 1 << $381;
            $386 = $385 ^ -1;
            $387 = $250 & $386;
            HEAP32[(64176)>>2] = $387;
            $470 = $387;
            break L164;
           }
          } else {
           $388 = HEAP32[(64188)>>2]|0;
           $389 = ($353>>>0)<($388>>>0);
           if ($389) {
            _abort();
            // unreachable;
           } else {
            $390 = ((($353)) + 16|0);
            $391 = HEAP32[$390>>2]|0;
            $not$$i209 = ($391|0)!=($$4$lcssa$i|0);
            $$sink3$i = $not$$i209&1;
            $392 = (((($353)) + 16|0) + ($$sink3$i<<2)|0);
            HEAP32[$392>>2] = $$3372$i;
            $393 = ($$3372$i|0)==(0|0);
            if ($393) {
             $470 = $250;
             break L164;
            } else {
             break;
            }
           }
          }
         } while(0);
         $394 = HEAP32[(64188)>>2]|0;
         $395 = ($$3372$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3372$i)) + 24|0);
         HEAP32[$396>>2] = $353;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3372$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3372$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $250;
         } else {
          $406 = HEAP32[(64188)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3372$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3372$i;
           $470 = $250;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4351$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4351$lcssa$i) + ($249))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $249 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4351$lcssa$i | 1;
         $421 = ((($350)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($350) + ($$4351$lcssa$i)|0);
         HEAP32[$422>>2] = $$4351$lcssa$i;
         $423 = $$4351$lcssa$i >>> 3;
         $424 = ($$4351$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (64212 + ($425<<2)|0);
          $427 = HEAP32[16043]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[16043] = $431;
           $$pre$i210 = ((($426)) + 8|0);
           $$0368$i = $426;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(64188)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0368$i = $433;$$pre$phi$i211Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $350;
          $436 = ((($$0368$i)) + 12|0);
          HEAP32[$436>>2] = $350;
          $437 = ((($350)) + 8|0);
          HEAP32[$437>>2] = $$0368$i;
          $438 = ((($350)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4351$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0361$i = 0;
         } else {
          $441 = ($$4351$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0361$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4351$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0361$i = $463;
          }
         }
         $464 = (64476 + ($$0361$i<<2)|0);
         $465 = ((($350)) + 28|0);
         HEAP32[$465>>2] = $$0361$i;
         $466 = ((($350)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0361$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(64176)>>2] = $472;
          HEAP32[$464>>2] = $350;
          $473 = ((($350)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($350)) + 12|0);
          HEAP32[$474>>2] = $350;
          $475 = ((($350)) + 8|0);
          HEAP32[$475>>2] = $350;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0361$i|0)==(31);
         $478 = $$0361$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4351$lcssa$i << $480;
         $$0344$i = $481;$$0345$i = $476;
         while(1) {
          $482 = ((($$0345$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4351$lcssa$i|0);
          if ($485) {
           label = 139;
           break;
          }
          $486 = $$0344$i >>> 31;
          $487 = (((($$0345$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0344$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 136;
           break;
          } else {
           $$0344$i = $488;$$0345$i = $489;
          }
         }
         if ((label|0) == 136) {
          $491 = HEAP32[(64188)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $350;
           $493 = ((($350)) + 24|0);
           HEAP32[$493>>2] = $$0345$i;
           $494 = ((($350)) + 12|0);
           HEAP32[$494>>2] = $350;
           $495 = ((($350)) + 8|0);
           HEAP32[$495>>2] = $350;
           break;
          }
         }
         else if ((label|0) == 139) {
          $496 = ((($$0345$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(64188)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$9$i = ($$0345$i>>>0)>=($498>>>0);
          $500 = $499 & $not$9$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $350;
           HEAP32[$496>>2] = $350;
           $502 = ((($350)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($350)) + 12|0);
           HEAP32[$503>>2] = $$0345$i;
           $504 = ((($350)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $249;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(64180)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(64192)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(64192)>>2] = $511;
   HEAP32[(64180)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(64180)>>2] = 0;
   HEAP32[(64192)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(64184)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(64184)>>2] = $526;
  $527 = HEAP32[(64196)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(64196)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[16161]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(64652)>>2] = 4096;
  HEAP32[(64648)>>2] = 4096;
  HEAP32[(64656)>>2] = -1;
  HEAP32[(64660)>>2] = -1;
  HEAP32[(64664)>>2] = 0;
  HEAP32[(64616)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[16161] = $538;
  $542 = 4096;
 } else {
  $$pre$i212 = HEAP32[(64652)>>2]|0;
  $542 = $$pre$i212;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(64612)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(64604)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i = $550 | $551;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(64616)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L244: do {
  if ($554) {
   $555 = HEAP32[(64196)>>2]|0;
   $556 = ($555|0)==(0|0);
   L246: do {
    if ($556) {
     label = 163;
    } else {
     $$0$i$i = (64620);
     while(1) {
      $557 = HEAP32[$$0$i$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 163;
       break L246;
      } else {
       $$0$i$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if ($596) {
        $$2234253237$i = $589;
       } else {
        $$723948$i = $589;$$749$i = $591;
        label = 180;
        break L244;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 171;
      }
     } else {
      $$2234253237$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 163) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if ($567) {
      $$2234253237$i = 0;
     } else {
      $568 = $566;
      $569 = HEAP32[(64648)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(64604)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i214 = $580 & $581;
      if ($or$cond$i214) {
       $582 = HEAP32[(64612)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i215 = $584 | $585;
        if ($or$cond2$i215) {
         $$2234253237$i = 0;
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723948$i = $$$i;$$749$i = $566;
        label = 180;
        break L244;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 171;
       }
      } else {
       $$2234253237$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $610 = ($$2247$ph$i|0)==((-1)|0);
      if ($610) {
       $$2234253237$i = 0;
       break;
      } else {
       $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
       label = 180;
       break L244;
      }
     }
     $601 = HEAP32[(64652)>>2]|0;
     $602 = (($540) - ($$2253$ph$i))|0;
     $603 = (($602) + ($601))|0;
     $604 = (0 - ($601))|0;
     $605 = $603 & $604;
     $606 = ($605>>>0)<(2147483647);
     if (!($606)) {
      $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
     $607 = (_sbrk(($605|0))|0);
     $608 = ($607|0)==((-1)|0);
     if ($608) {
      (_sbrk(($597|0))|0);
      $$2234253237$i = 0;
      break;
     } else {
      $609 = (($605) + ($$2253$ph$i))|0;
      $$723948$i = $609;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
    }
   } while(0);
   $611 = HEAP32[(64616)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(64616)>>2] = $612;
   $$4236$i = $$2234253237$i;
   label = 178;
  } else {
   $$4236$i = 0;
   label = 178;
  }
 } while(0);
 if ((label|0) == 178) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   $619 = $615;
   $620 = $614;
   $621 = (($619) - ($620))|0;
   $622 = (($$0197) + 40)|0;
   $623 = ($621>>>0)>($622>>>0);
   $$$4236$i = $623 ? $621 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $624 = ($614|0)==((-1)|0);
   $not$$i216 = $623 ^ 1;
   $625 = $624 | $not$$i216;
   $or$cond50$i = $625 | $or$cond11$not$i;
   if (!($or$cond50$i)) {
    $$723948$i = $$$4236$i;$$749$i = $614;
    label = 180;
   }
  }
 }
 if ((label|0) == 180) {
  $626 = HEAP32[(64604)>>2]|0;
  $627 = (($626) + ($$723948$i))|0;
  HEAP32[(64604)>>2] = $627;
  $628 = HEAP32[(64608)>>2]|0;
  $629 = ($627>>>0)>($628>>>0);
  if ($629) {
   HEAP32[(64608)>>2] = $627;
  }
  $630 = HEAP32[(64196)>>2]|0;
  $631 = ($630|0)==(0|0);
  do {
   if ($631) {
    $632 = HEAP32[(64188)>>2]|0;
    $633 = ($632|0)==(0|0);
    $634 = ($$749$i>>>0)<($632>>>0);
    $or$cond12$i = $633 | $634;
    if ($or$cond12$i) {
     HEAP32[(64188)>>2] = $$749$i;
    }
    HEAP32[(64620)>>2] = $$749$i;
    HEAP32[(64624)>>2] = $$723948$i;
    HEAP32[(64632)>>2] = 0;
    $635 = HEAP32[16161]|0;
    HEAP32[(64208)>>2] = $635;
    HEAP32[(64204)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $636 = $$01$i$i << 1;
     $637 = (64212 + ($636<<2)|0);
     $638 = ((($637)) + 12|0);
     HEAP32[$638>>2] = $637;
     $639 = ((($637)) + 8|0);
     HEAP32[$639>>2] = $637;
     $640 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($640|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $640;
     }
    }
    $641 = (($$723948$i) + -40)|0;
    $642 = ((($$749$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$749$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(64196)>>2] = $649;
    HEAP32[(64184)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($649) + ($650)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(64660)>>2]|0;
    HEAP32[(64200)>>2] = $655;
   } else {
    $$024371$i = (64620);
    while(1) {
     $656 = HEAP32[$$024371$i>>2]|0;
     $657 = ((($$024371$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$749$i|0)==($659|0);
     if ($660) {
      label = 190;
      break;
     }
     $661 = ((($$024371$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024371$i = $662;
     }
    }
    if ((label|0) == 190) {
     $664 = ((($$024371$i)) + 12|0);
     $665 = HEAP32[$664>>2]|0;
     $666 = $665 & 8;
     $667 = ($666|0)==(0);
     if ($667) {
      $668 = ($630>>>0)>=($656>>>0);
      $669 = ($630>>>0)<($$749$i>>>0);
      $or$cond51$i = $669 & $668;
      if ($or$cond51$i) {
       $670 = (($658) + ($$723948$i))|0;
       HEAP32[$657>>2] = $670;
       $671 = HEAP32[(64184)>>2]|0;
       $672 = ((($630)) + 8|0);
       $673 = $672;
       $674 = $673 & 7;
       $675 = ($674|0)==(0);
       $676 = (0 - ($673))|0;
       $677 = $676 & 7;
       $678 = $675 ? 0 : $677;
       $679 = (($630) + ($678)|0);
       $680 = (($$723948$i) - ($678))|0;
       $681 = (($671) + ($680))|0;
       HEAP32[(64196)>>2] = $679;
       HEAP32[(64184)>>2] = $681;
       $682 = $681 | 1;
       $683 = ((($679)) + 4|0);
       HEAP32[$683>>2] = $682;
       $684 = (($679) + ($681)|0);
       $685 = ((($684)) + 4|0);
       HEAP32[$685>>2] = 40;
       $686 = HEAP32[(64660)>>2]|0;
       HEAP32[(64200)>>2] = $686;
       break;
      }
     }
    }
    $687 = HEAP32[(64188)>>2]|0;
    $688 = ($$749$i>>>0)<($687>>>0);
    if ($688) {
     HEAP32[(64188)>>2] = $$749$i;
     $752 = $$749$i;
    } else {
     $752 = $687;
    }
    $689 = (($$749$i) + ($$723948$i)|0);
    $$124470$i = (64620);
    while(1) {
     $690 = HEAP32[$$124470$i>>2]|0;
     $691 = ($690|0)==($689|0);
     if ($691) {
      label = 198;
      break;
     }
     $692 = ((($$124470$i)) + 8|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = ($693|0)==(0|0);
     if ($694) {
      break;
     } else {
      $$124470$i = $693;
     }
    }
    if ((label|0) == 198) {
     $695 = ((($$124470$i)) + 12|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = $696 & 8;
     $698 = ($697|0)==(0);
     if ($698) {
      HEAP32[$$124470$i>>2] = $$749$i;
      $699 = ((($$124470$i)) + 4|0);
      $700 = HEAP32[$699>>2]|0;
      $701 = (($700) + ($$723948$i))|0;
      HEAP32[$699>>2] = $701;
      $702 = ((($$749$i)) + 8|0);
      $703 = $702;
      $704 = $703 & 7;
      $705 = ($704|0)==(0);
      $706 = (0 - ($703))|0;
      $707 = $706 & 7;
      $708 = $705 ? 0 : $707;
      $709 = (($$749$i) + ($708)|0);
      $710 = ((($689)) + 8|0);
      $711 = $710;
      $712 = $711 & 7;
      $713 = ($712|0)==(0);
      $714 = (0 - ($711))|0;
      $715 = $714 & 7;
      $716 = $713 ? 0 : $715;
      $717 = (($689) + ($716)|0);
      $718 = $717;
      $719 = $709;
      $720 = (($718) - ($719))|0;
      $721 = (($709) + ($$0197)|0);
      $722 = (($720) - ($$0197))|0;
      $723 = $$0197 | 3;
      $724 = ((($709)) + 4|0);
      HEAP32[$724>>2] = $723;
      $725 = ($717|0)==($630|0);
      do {
       if ($725) {
        $726 = HEAP32[(64184)>>2]|0;
        $727 = (($726) + ($722))|0;
        HEAP32[(64184)>>2] = $727;
        HEAP32[(64196)>>2] = $721;
        $728 = $727 | 1;
        $729 = ((($721)) + 4|0);
        HEAP32[$729>>2] = $728;
       } else {
        $730 = HEAP32[(64192)>>2]|0;
        $731 = ($717|0)==($730|0);
        if ($731) {
         $732 = HEAP32[(64180)>>2]|0;
         $733 = (($732) + ($722))|0;
         HEAP32[(64180)>>2] = $733;
         HEAP32[(64192)>>2] = $721;
         $734 = $733 | 1;
         $735 = ((($721)) + 4|0);
         HEAP32[$735>>2] = $734;
         $736 = (($721) + ($733)|0);
         HEAP32[$736>>2] = $733;
         break;
        }
        $737 = ((($717)) + 4|0);
        $738 = HEAP32[$737>>2]|0;
        $739 = $738 & 3;
        $740 = ($739|0)==(1);
        if ($740) {
         $741 = $738 & -8;
         $742 = $738 >>> 3;
         $743 = ($738>>>0)<(256);
         L314: do {
          if ($743) {
           $744 = ((($717)) + 8|0);
           $745 = HEAP32[$744>>2]|0;
           $746 = ((($717)) + 12|0);
           $747 = HEAP32[$746>>2]|0;
           $748 = $742 << 1;
           $749 = (64212 + ($748<<2)|0);
           $750 = ($745|0)==($749|0);
           do {
            if (!($750)) {
             $751 = ($745>>>0)<($752>>>0);
             if ($751) {
              _abort();
              // unreachable;
             }
             $753 = ((($745)) + 12|0);
             $754 = HEAP32[$753>>2]|0;
             $755 = ($754|0)==($717|0);
             if ($755) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $756 = ($747|0)==($745|0);
           if ($756) {
            $757 = 1 << $742;
            $758 = $757 ^ -1;
            $759 = HEAP32[16043]|0;
            $760 = $759 & $758;
            HEAP32[16043] = $760;
            break;
           }
           $761 = ($747|0)==($749|0);
           do {
            if ($761) {
             $$pre10$i$i = ((($747)) + 8|0);
             $$pre$phi11$i$iZ2D = $$pre10$i$i;
            } else {
             $762 = ($747>>>0)<($752>>>0);
             if ($762) {
              _abort();
              // unreachable;
             }
             $763 = ((($747)) + 8|0);
             $764 = HEAP32[$763>>2]|0;
             $765 = ($764|0)==($717|0);
             if ($765) {
              $$pre$phi11$i$iZ2D = $763;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $766 = ((($745)) + 12|0);
           HEAP32[$766>>2] = $747;
           HEAP32[$$pre$phi11$i$iZ2D>>2] = $745;
          } else {
           $767 = ((($717)) + 24|0);
           $768 = HEAP32[$767>>2]|0;
           $769 = ((($717)) + 12|0);
           $770 = HEAP32[$769>>2]|0;
           $771 = ($770|0)==($717|0);
           do {
            if ($771) {
             $781 = ((($717)) + 16|0);
             $782 = ((($781)) + 4|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==(0|0);
             if ($784) {
              $785 = HEAP32[$781>>2]|0;
              $786 = ($785|0)==(0|0);
              if ($786) {
               $$3$i$i = 0;
               break;
              } else {
               $$1291$i$i = $785;$$1293$i$i = $781;
              }
             } else {
              $$1291$i$i = $783;$$1293$i$i = $782;
             }
             while(1) {
              $787 = ((($$1291$i$i)) + 20|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if (!($789)) {
               $$1291$i$i = $788;$$1293$i$i = $787;
               continue;
              }
              $790 = ((($$1291$i$i)) + 16|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if ($792) {
               break;
              } else {
               $$1291$i$i = $791;$$1293$i$i = $790;
              }
             }
             $793 = ($$1293$i$i>>>0)<($752>>>0);
             if ($793) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1293$i$i>>2] = 0;
              $$3$i$i = $$1291$i$i;
              break;
             }
            } else {
             $772 = ((($717)) + 8|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773>>>0)<($752>>>0);
             if ($774) {
              _abort();
              // unreachable;
             }
             $775 = ((($773)) + 12|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($717|0);
             if (!($777)) {
              _abort();
              // unreachable;
             }
             $778 = ((($770)) + 8|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($717|0);
             if ($780) {
              HEAP32[$775>>2] = $770;
              HEAP32[$778>>2] = $773;
              $$3$i$i = $770;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $794 = ($768|0)==(0|0);
           if ($794) {
            break;
           }
           $795 = ((($717)) + 28|0);
           $796 = HEAP32[$795>>2]|0;
           $797 = (64476 + ($796<<2)|0);
           $798 = HEAP32[$797>>2]|0;
           $799 = ($717|0)==($798|0);
           do {
            if ($799) {
             HEAP32[$797>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $800 = 1 << $796;
             $801 = $800 ^ -1;
             $802 = HEAP32[(64176)>>2]|0;
             $803 = $802 & $801;
             HEAP32[(64176)>>2] = $803;
             break L314;
            } else {
             $804 = HEAP32[(64188)>>2]|0;
             $805 = ($768>>>0)<($804>>>0);
             if ($805) {
              _abort();
              // unreachable;
             } else {
              $806 = ((($768)) + 16|0);
              $807 = HEAP32[$806>>2]|0;
              $not$$i17$i = ($807|0)!=($717|0);
              $$sink1$i$i = $not$$i17$i&1;
              $808 = (((($768)) + 16|0) + ($$sink1$i$i<<2)|0);
              HEAP32[$808>>2] = $$3$i$i;
              $809 = ($$3$i$i|0)==(0|0);
              if ($809) {
               break L314;
              } else {
               break;
              }
             }
            }
           } while(0);
           $810 = HEAP32[(64188)>>2]|0;
           $811 = ($$3$i$i>>>0)<($810>>>0);
           if ($811) {
            _abort();
            // unreachable;
           }
           $812 = ((($$3$i$i)) + 24|0);
           HEAP32[$812>>2] = $768;
           $813 = ((($717)) + 16|0);
           $814 = HEAP32[$813>>2]|0;
           $815 = ($814|0)==(0|0);
           do {
            if (!($815)) {
             $816 = ($814>>>0)<($810>>>0);
             if ($816) {
              _abort();
              // unreachable;
             } else {
              $817 = ((($$3$i$i)) + 16|0);
              HEAP32[$817>>2] = $814;
              $818 = ((($814)) + 24|0);
              HEAP32[$818>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $819 = ((($813)) + 4|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           if ($821) {
            break;
           }
           $822 = HEAP32[(64188)>>2]|0;
           $823 = ($820>>>0)<($822>>>0);
           if ($823) {
            _abort();
            // unreachable;
           } else {
            $824 = ((($$3$i$i)) + 20|0);
            HEAP32[$824>>2] = $820;
            $825 = ((($820)) + 24|0);
            HEAP32[$825>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $826 = (($717) + ($741)|0);
         $827 = (($741) + ($722))|0;
         $$0$i18$i = $826;$$0287$i$i = $827;
        } else {
         $$0$i18$i = $717;$$0287$i$i = $722;
        }
        $828 = ((($$0$i18$i)) + 4|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = $829 & -2;
        HEAP32[$828>>2] = $830;
        $831 = $$0287$i$i | 1;
        $832 = ((($721)) + 4|0);
        HEAP32[$832>>2] = $831;
        $833 = (($721) + ($$0287$i$i)|0);
        HEAP32[$833>>2] = $$0287$i$i;
        $834 = $$0287$i$i >>> 3;
        $835 = ($$0287$i$i>>>0)<(256);
        if ($835) {
         $836 = $834 << 1;
         $837 = (64212 + ($836<<2)|0);
         $838 = HEAP32[16043]|0;
         $839 = 1 << $834;
         $840 = $838 & $839;
         $841 = ($840|0)==(0);
         do {
          if ($841) {
           $842 = $838 | $839;
           HEAP32[16043] = $842;
           $$pre$i19$i = ((($837)) + 8|0);
           $$0295$i$i = $837;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $843 = ((($837)) + 8|0);
           $844 = HEAP32[$843>>2]|0;
           $845 = HEAP32[(64188)>>2]|0;
           $846 = ($844>>>0)<($845>>>0);
           if (!($846)) {
            $$0295$i$i = $844;$$pre$phi$i20$iZ2D = $843;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $721;
         $847 = ((($$0295$i$i)) + 12|0);
         HEAP32[$847>>2] = $721;
         $848 = ((($721)) + 8|0);
         HEAP32[$848>>2] = $$0295$i$i;
         $849 = ((($721)) + 12|0);
         HEAP32[$849>>2] = $837;
         break;
        }
        $850 = $$0287$i$i >>> 8;
        $851 = ($850|0)==(0);
        do {
         if ($851) {
          $$0296$i$i = 0;
         } else {
          $852 = ($$0287$i$i>>>0)>(16777215);
          if ($852) {
           $$0296$i$i = 31;
           break;
          }
          $853 = (($850) + 1048320)|0;
          $854 = $853 >>> 16;
          $855 = $854 & 8;
          $856 = $850 << $855;
          $857 = (($856) + 520192)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 4;
          $860 = $859 | $855;
          $861 = $856 << $859;
          $862 = (($861) + 245760)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 2;
          $865 = $860 | $864;
          $866 = (14 - ($865))|0;
          $867 = $861 << $864;
          $868 = $867 >>> 15;
          $869 = (($866) + ($868))|0;
          $870 = $869 << 1;
          $871 = (($869) + 7)|0;
          $872 = $$0287$i$i >>> $871;
          $873 = $872 & 1;
          $874 = $873 | $870;
          $$0296$i$i = $874;
         }
        } while(0);
        $875 = (64476 + ($$0296$i$i<<2)|0);
        $876 = ((($721)) + 28|0);
        HEAP32[$876>>2] = $$0296$i$i;
        $877 = ((($721)) + 16|0);
        $878 = ((($877)) + 4|0);
        HEAP32[$878>>2] = 0;
        HEAP32[$877>>2] = 0;
        $879 = HEAP32[(64176)>>2]|0;
        $880 = 1 << $$0296$i$i;
        $881 = $879 & $880;
        $882 = ($881|0)==(0);
        if ($882) {
         $883 = $879 | $880;
         HEAP32[(64176)>>2] = $883;
         HEAP32[$875>>2] = $721;
         $884 = ((($721)) + 24|0);
         HEAP32[$884>>2] = $875;
         $885 = ((($721)) + 12|0);
         HEAP32[$885>>2] = $721;
         $886 = ((($721)) + 8|0);
         HEAP32[$886>>2] = $721;
         break;
        }
        $887 = HEAP32[$875>>2]|0;
        $888 = ($$0296$i$i|0)==(31);
        $889 = $$0296$i$i >>> 1;
        $890 = (25 - ($889))|0;
        $891 = $888 ? 0 : $890;
        $892 = $$0287$i$i << $891;
        $$0288$i$i = $892;$$0289$i$i = $887;
        while(1) {
         $893 = ((($$0289$i$i)) + 4|0);
         $894 = HEAP32[$893>>2]|0;
         $895 = $894 & -8;
         $896 = ($895|0)==($$0287$i$i|0);
         if ($896) {
          label = 265;
          break;
         }
         $897 = $$0288$i$i >>> 31;
         $898 = (((($$0289$i$i)) + 16|0) + ($897<<2)|0);
         $899 = $$0288$i$i << 1;
         $900 = HEAP32[$898>>2]|0;
         $901 = ($900|0)==(0|0);
         if ($901) {
          label = 262;
          break;
         } else {
          $$0288$i$i = $899;$$0289$i$i = $900;
         }
        }
        if ((label|0) == 262) {
         $902 = HEAP32[(64188)>>2]|0;
         $903 = ($898>>>0)<($902>>>0);
         if ($903) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$898>>2] = $721;
          $904 = ((($721)) + 24|0);
          HEAP32[$904>>2] = $$0289$i$i;
          $905 = ((($721)) + 12|0);
          HEAP32[$905>>2] = $721;
          $906 = ((($721)) + 8|0);
          HEAP32[$906>>2] = $721;
          break;
         }
        }
        else if ((label|0) == 265) {
         $907 = ((($$0289$i$i)) + 8|0);
         $908 = HEAP32[$907>>2]|0;
         $909 = HEAP32[(64188)>>2]|0;
         $910 = ($908>>>0)>=($909>>>0);
         $not$7$i$i = ($$0289$i$i>>>0)>=($909>>>0);
         $911 = $910 & $not$7$i$i;
         if ($911) {
          $912 = ((($908)) + 12|0);
          HEAP32[$912>>2] = $721;
          HEAP32[$907>>2] = $721;
          $913 = ((($721)) + 8|0);
          HEAP32[$913>>2] = $908;
          $914 = ((($721)) + 12|0);
          HEAP32[$914>>2] = $$0289$i$i;
          $915 = ((($721)) + 24|0);
          HEAP32[$915>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1047 = ((($709)) + 8|0);
      $$0 = $1047;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (64620);
    while(1) {
     $916 = HEAP32[$$0$i$i$i>>2]|0;
     $917 = ($916>>>0)>($630>>>0);
     if (!($917)) {
      $918 = ((($$0$i$i$i)) + 4|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = (($916) + ($919)|0);
      $921 = ($920>>>0)>($630>>>0);
      if ($921) {
       break;
      }
     }
     $922 = ((($$0$i$i$i)) + 8|0);
     $923 = HEAP32[$922>>2]|0;
     $$0$i$i$i = $923;
    }
    $924 = ((($920)) + -47|0);
    $925 = ((($924)) + 8|0);
    $926 = $925;
    $927 = $926 & 7;
    $928 = ($927|0)==(0);
    $929 = (0 - ($926))|0;
    $930 = $929 & 7;
    $931 = $928 ? 0 : $930;
    $932 = (($924) + ($931)|0);
    $933 = ((($630)) + 16|0);
    $934 = ($932>>>0)<($933>>>0);
    $935 = $934 ? $630 : $932;
    $936 = ((($935)) + 8|0);
    $937 = ((($935)) + 24|0);
    $938 = (($$723948$i) + -40)|0;
    $939 = ((($$749$i)) + 8|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    $943 = (0 - ($940))|0;
    $944 = $943 & 7;
    $945 = $942 ? 0 : $944;
    $946 = (($$749$i) + ($945)|0);
    $947 = (($938) - ($945))|0;
    HEAP32[(64196)>>2] = $946;
    HEAP32[(64184)>>2] = $947;
    $948 = $947 | 1;
    $949 = ((($946)) + 4|0);
    HEAP32[$949>>2] = $948;
    $950 = (($946) + ($947)|0);
    $951 = ((($950)) + 4|0);
    HEAP32[$951>>2] = 40;
    $952 = HEAP32[(64660)>>2]|0;
    HEAP32[(64200)>>2] = $952;
    $953 = ((($935)) + 4|0);
    HEAP32[$953>>2] = 27;
    ;HEAP32[$936>>2]=HEAP32[(64620)>>2]|0;HEAP32[$936+4>>2]=HEAP32[(64620)+4>>2]|0;HEAP32[$936+8>>2]=HEAP32[(64620)+8>>2]|0;HEAP32[$936+12>>2]=HEAP32[(64620)+12>>2]|0;
    HEAP32[(64620)>>2] = $$749$i;
    HEAP32[(64624)>>2] = $$723948$i;
    HEAP32[(64632)>>2] = 0;
    HEAP32[(64628)>>2] = $936;
    $955 = $937;
    while(1) {
     $954 = ((($955)) + 4|0);
     HEAP32[$954>>2] = 7;
     $956 = ((($955)) + 8|0);
     $957 = ($956>>>0)<($920>>>0);
     if ($957) {
      $955 = $954;
     } else {
      break;
     }
    }
    $958 = ($935|0)==($630|0);
    if (!($958)) {
     $959 = $935;
     $960 = $630;
     $961 = (($959) - ($960))|0;
     $962 = HEAP32[$953>>2]|0;
     $963 = $962 & -2;
     HEAP32[$953>>2] = $963;
     $964 = $961 | 1;
     $965 = ((($630)) + 4|0);
     HEAP32[$965>>2] = $964;
     HEAP32[$935>>2] = $961;
     $966 = $961 >>> 3;
     $967 = ($961>>>0)<(256);
     if ($967) {
      $968 = $966 << 1;
      $969 = (64212 + ($968<<2)|0);
      $970 = HEAP32[16043]|0;
      $971 = 1 << $966;
      $972 = $970 & $971;
      $973 = ($972|0)==(0);
      if ($973) {
       $974 = $970 | $971;
       HEAP32[16043] = $974;
       $$pre$i$i = ((($969)) + 8|0);
       $$0211$i$i = $969;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $975 = ((($969)) + 8|0);
       $976 = HEAP32[$975>>2]|0;
       $977 = HEAP32[(64188)>>2]|0;
       $978 = ($976>>>0)<($977>>>0);
       if ($978) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $976;$$pre$phi$i$iZ2D = $975;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $630;
      $979 = ((($$0211$i$i)) + 12|0);
      HEAP32[$979>>2] = $630;
      $980 = ((($630)) + 8|0);
      HEAP32[$980>>2] = $$0211$i$i;
      $981 = ((($630)) + 12|0);
      HEAP32[$981>>2] = $969;
      break;
     }
     $982 = $961 >>> 8;
     $983 = ($982|0)==(0);
     if ($983) {
      $$0212$i$i = 0;
     } else {
      $984 = ($961>>>0)>(16777215);
      if ($984) {
       $$0212$i$i = 31;
      } else {
       $985 = (($982) + 1048320)|0;
       $986 = $985 >>> 16;
       $987 = $986 & 8;
       $988 = $982 << $987;
       $989 = (($988) + 520192)|0;
       $990 = $989 >>> 16;
       $991 = $990 & 4;
       $992 = $991 | $987;
       $993 = $988 << $991;
       $994 = (($993) + 245760)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 2;
       $997 = $992 | $996;
       $998 = (14 - ($997))|0;
       $999 = $993 << $996;
       $1000 = $999 >>> 15;
       $1001 = (($998) + ($1000))|0;
       $1002 = $1001 << 1;
       $1003 = (($1001) + 7)|0;
       $1004 = $961 >>> $1003;
       $1005 = $1004 & 1;
       $1006 = $1005 | $1002;
       $$0212$i$i = $1006;
      }
     }
     $1007 = (64476 + ($$0212$i$i<<2)|0);
     $1008 = ((($630)) + 28|0);
     HEAP32[$1008>>2] = $$0212$i$i;
     $1009 = ((($630)) + 20|0);
     HEAP32[$1009>>2] = 0;
     HEAP32[$933>>2] = 0;
     $1010 = HEAP32[(64176)>>2]|0;
     $1011 = 1 << $$0212$i$i;
     $1012 = $1010 & $1011;
     $1013 = ($1012|0)==(0);
     if ($1013) {
      $1014 = $1010 | $1011;
      HEAP32[(64176)>>2] = $1014;
      HEAP32[$1007>>2] = $630;
      $1015 = ((($630)) + 24|0);
      HEAP32[$1015>>2] = $1007;
      $1016 = ((($630)) + 12|0);
      HEAP32[$1016>>2] = $630;
      $1017 = ((($630)) + 8|0);
      HEAP32[$1017>>2] = $630;
      break;
     }
     $1018 = HEAP32[$1007>>2]|0;
     $1019 = ($$0212$i$i|0)==(31);
     $1020 = $$0212$i$i >>> 1;
     $1021 = (25 - ($1020))|0;
     $1022 = $1019 ? 0 : $1021;
     $1023 = $961 << $1022;
     $$0206$i$i = $1023;$$0207$i$i = $1018;
     while(1) {
      $1024 = ((($$0207$i$i)) + 4|0);
      $1025 = HEAP32[$1024>>2]|0;
      $1026 = $1025 & -8;
      $1027 = ($1026|0)==($961|0);
      if ($1027) {
       label = 292;
       break;
      }
      $1028 = $$0206$i$i >>> 31;
      $1029 = (((($$0207$i$i)) + 16|0) + ($1028<<2)|0);
      $1030 = $$0206$i$i << 1;
      $1031 = HEAP32[$1029>>2]|0;
      $1032 = ($1031|0)==(0|0);
      if ($1032) {
       label = 289;
       break;
      } else {
       $$0206$i$i = $1030;$$0207$i$i = $1031;
      }
     }
     if ((label|0) == 289) {
      $1033 = HEAP32[(64188)>>2]|0;
      $1034 = ($1029>>>0)<($1033>>>0);
      if ($1034) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1029>>2] = $630;
       $1035 = ((($630)) + 24|0);
       HEAP32[$1035>>2] = $$0207$i$i;
       $1036 = ((($630)) + 12|0);
       HEAP32[$1036>>2] = $630;
       $1037 = ((($630)) + 8|0);
       HEAP32[$1037>>2] = $630;
       break;
      }
     }
     else if ((label|0) == 292) {
      $1038 = ((($$0207$i$i)) + 8|0);
      $1039 = HEAP32[$1038>>2]|0;
      $1040 = HEAP32[(64188)>>2]|0;
      $1041 = ($1039>>>0)>=($1040>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1040>>>0);
      $1042 = $1041 & $not$$i$i;
      if ($1042) {
       $1043 = ((($1039)) + 12|0);
       HEAP32[$1043>>2] = $630;
       HEAP32[$1038>>2] = $630;
       $1044 = ((($630)) + 8|0);
       HEAP32[$1044>>2] = $1039;
       $1045 = ((($630)) + 12|0);
       HEAP32[$1045>>2] = $$0207$i$i;
       $1046 = ((($630)) + 24|0);
       HEAP32[$1046>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1048 = HEAP32[(64184)>>2]|0;
  $1049 = ($1048>>>0)>($$0197>>>0);
  if ($1049) {
   $1050 = (($1048) - ($$0197))|0;
   HEAP32[(64184)>>2] = $1050;
   $1051 = HEAP32[(64196)>>2]|0;
   $1052 = (($1051) + ($$0197)|0);
   HEAP32[(64196)>>2] = $1052;
   $1053 = $1050 | 1;
   $1054 = ((($1052)) + 4|0);
   HEAP32[$1054>>2] = $1053;
   $1055 = $$0197 | 3;
   $1056 = ((($1051)) + 4|0);
   HEAP32[$1056>>2] = $1055;
   $1057 = ((($1051)) + 8|0);
   $$0 = $1057;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1058 = (___errno_location()|0);
 HEAP32[$1058>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $$pre442 = 0;
 var $$pre444 = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond421 = 0, $cond422 = 0, $not$ = 0, $not$405 = 0, $not$437 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(64188)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(64192)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $104 = ((($10)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $108 = (($16) + ($17)|0);
    $109 = ((($16)) + 4|0);
    $110 = $17 | 1;
    $111 = $105 & -2;
    HEAP32[(64180)>>2] = $17;
    HEAP32[$104>>2] = $111;
    HEAP32[$109>>2] = $110;
    HEAP32[$108>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (64212 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[16043]|0;
     $38 = $37 & $36;
     HEAP32[16043] = $38;
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre444 = ((($26)) + 8|0);
     $$pre$phi445Z2D = $$pre444;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi445Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi445Z2D>>2] = $24;
    $$1 = $16;$$1382 = $17;$113 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1387 = $63;$$1390 = $59;
      }
     } else {
      $$1387 = $61;$$1390 = $60;
     }
     while(1) {
      $65 = ((($$1387)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1387 = $66;$$1390 = $65;
       continue;
      }
      $68 = ((($$1387)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1387 = $69;$$1390 = $68;
      }
     }
     $71 = ($$1390>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1390>>2] = 0;
      $$3 = $$1387;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1382 = $17;$113 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (64476 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond421 = ($$3|0)==(0|0);
      if ($cond421) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(64176)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(64176)>>2] = $81;
       $$1 = $16;$$1382 = $17;$113 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(64188)>>2]|0;
      $83 = ($46>>>0)<($82>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $not$405 = ($85|0)!=($16|0);
       $$sink3 = $not$405&1;
       $86 = (((($46)) + 16|0) + ($$sink3<<2)|0);
       HEAP32[$86>>2] = $$3;
       $87 = ($$3|0)==(0|0);
       if ($87) {
        $$1 = $16;$$1382 = $17;$113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $88 = HEAP32[(64188)>>2]|0;
    $89 = ($$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($$3)) + 24|0);
    HEAP32[$90>>2] = $46;
    $91 = ((($16)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $$1 = $16;$$1382 = $17;$113 = $16;
    } else {
     $100 = HEAP32[(64188)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $$3;
      $$1 = $16;$$1382 = $17;$113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1382 = $9;$113 = $2;
  }
 } while(0);
 $112 = ($113>>>0)<($10>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(64196)>>2]|0;
  $121 = ($10|0)==($120|0);
  $122 = HEAP32[(64192)>>2]|0;
  if ($121) {
   $123 = HEAP32[(64184)>>2]|0;
   $124 = (($123) + ($$1382))|0;
   HEAP32[(64184)>>2] = $124;
   HEAP32[(64196)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = ($$1|0)==($122|0);
   if (!($127)) {
    return;
   }
   HEAP32[(64192)>>2] = 0;
   HEAP32[(64180)>>2] = 0;
   return;
  }
  $128 = ($10|0)==($122|0);
  if ($128) {
   $129 = HEAP32[(64180)>>2]|0;
   $130 = (($129) + ($$1382))|0;
   HEAP32[(64180)>>2] = $130;
   HEAP32[(64192)>>2] = $113;
   $131 = $130 | 1;
   $132 = ((($$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($113) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $115 & -8;
  $135 = (($134) + ($$1382))|0;
  $136 = $115 >>> 3;
  $137 = ($115>>>0)<(256);
  L108: do {
   if ($137) {
    $138 = ((($10)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($10)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (64212 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(64188)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($10|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[16043]|0;
     $154 = $153 & $152;
     HEAP32[16043] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre442 = ((($141)) + 8|0);
     $$pre$phi443Z2D = $$pre442;
    } else {
     $156 = HEAP32[(64188)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($10|0);
     if ($160) {
      $$pre$phi443Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi443Z2D>>2] = $139;
   } else {
    $162 = ((($10)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($10)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($10|0);
    do {
     if ($166) {
      $177 = ((($10)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $$3400 = 0;
        break;
       } else {
        $$1398 = $181;$$1402 = $177;
       }
      } else {
       $$1398 = $179;$$1402 = $178;
      }
      while(1) {
       $183 = ((($$1398)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $$1398 = $184;$$1402 = $183;
        continue;
       }
       $186 = ((($$1398)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $$1398 = $187;$$1402 = $186;
       }
      }
      $189 = HEAP32[(64188)>>2]|0;
      $190 = ($$1402>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1402>>2] = 0;
       $$3400 = $$1398;
       break;
      }
     } else {
      $167 = ((($10)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(64188)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($10|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($10|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $$3400 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($10)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (64476 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($10|0)==($195|0);
     do {
      if ($196) {
       HEAP32[$194>>2] = $$3400;
       $cond422 = ($$3400|0)==(0|0);
       if ($cond422) {
        $197 = 1 << $193;
        $198 = $197 ^ -1;
        $199 = HEAP32[(64176)>>2]|0;
        $200 = $199 & $198;
        HEAP32[(64176)>>2] = $200;
        break L108;
       }
      } else {
       $201 = HEAP32[(64188)>>2]|0;
       $202 = ($163>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       } else {
        $203 = ((($163)) + 16|0);
        $204 = HEAP32[$203>>2]|0;
        $not$ = ($204|0)!=($10|0);
        $$sink5 = $not$&1;
        $205 = (((($163)) + 16|0) + ($$sink5<<2)|0);
        HEAP32[$205>>2] = $$3400;
        $206 = ($$3400|0)==(0|0);
        if ($206) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while(0);
     $207 = HEAP32[(64188)>>2]|0;
     $208 = ($$3400>>>0)<($207>>>0);
     if ($208) {
      _abort();
      // unreachable;
     }
     $209 = ((($$3400)) + 24|0);
     HEAP32[$209>>2] = $163;
     $210 = ((($10)) + 16|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)==(0|0);
     do {
      if (!($212)) {
       $213 = ($211>>>0)<($207>>>0);
       if ($213) {
        _abort();
        // unreachable;
       } else {
        $214 = ((($$3400)) + 16|0);
        HEAP32[$214>>2] = $211;
        $215 = ((($211)) + 24|0);
        HEAP32[$215>>2] = $$3400;
        break;
       }
      }
     } while(0);
     $216 = ((($210)) + 4|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)==(0|0);
     if (!($218)) {
      $219 = HEAP32[(64188)>>2]|0;
      $220 = ($217>>>0)<($219>>>0);
      if ($220) {
       _abort();
       // unreachable;
      } else {
       $221 = ((($$3400)) + 20|0);
       HEAP32[$221>>2] = $217;
       $222 = ((($217)) + 24|0);
       HEAP32[$222>>2] = $$3400;
       break;
      }
     }
    }
   }
  } while(0);
  $223 = $135 | 1;
  $224 = ((($$1)) + 4|0);
  HEAP32[$224>>2] = $223;
  $225 = (($113) + ($135)|0);
  HEAP32[$225>>2] = $135;
  $226 = HEAP32[(64192)>>2]|0;
  $227 = ($$1|0)==($226|0);
  if ($227) {
   HEAP32[(64180)>>2] = $135;
   return;
  } else {
   $$2 = $135;
  }
 } else {
  $228 = $115 & -2;
  HEAP32[$114>>2] = $228;
  $229 = $$1382 | 1;
  $230 = ((($$1)) + 4|0);
  HEAP32[$230>>2] = $229;
  $231 = (($113) + ($$1382)|0);
  HEAP32[$231>>2] = $$1382;
  $$2 = $$1382;
 }
 $232 = $$2 >>> 3;
 $233 = ($$2>>>0)<(256);
 if ($233) {
  $234 = $232 << 1;
  $235 = (64212 + ($234<<2)|0);
  $236 = HEAP32[16043]|0;
  $237 = 1 << $232;
  $238 = $236 & $237;
  $239 = ($238|0)==(0);
  if ($239) {
   $240 = $236 | $237;
   HEAP32[16043] = $240;
   $$pre = ((($235)) + 8|0);
   $$0403 = $235;$$pre$phiZ2D = $$pre;
  } else {
   $241 = ((($235)) + 8|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = HEAP32[(64188)>>2]|0;
   $244 = ($242>>>0)<($243>>>0);
   if ($244) {
    _abort();
    // unreachable;
   } else {
    $$0403 = $242;$$pre$phiZ2D = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $245 = ((($$0403)) + 12|0);
  HEAP32[$245>>2] = $$1;
  $246 = ((($$1)) + 8|0);
  HEAP32[$246>>2] = $$0403;
  $247 = ((($$1)) + 12|0);
  HEAP32[$247>>2] = $235;
  return;
 }
 $248 = $$2 >>> 8;
 $249 = ($248|0)==(0);
 if ($249) {
  $$0396 = 0;
 } else {
  $250 = ($$2>>>0)>(16777215);
  if ($250) {
   $$0396 = 31;
  } else {
   $251 = (($248) + 1048320)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 8;
   $254 = $248 << $253;
   $255 = (($254) + 520192)|0;
   $256 = $255 >>> 16;
   $257 = $256 & 4;
   $258 = $257 | $253;
   $259 = $254 << $257;
   $260 = (($259) + 245760)|0;
   $261 = $260 >>> 16;
   $262 = $261 & 2;
   $263 = $258 | $262;
   $264 = (14 - ($263))|0;
   $265 = $259 << $262;
   $266 = $265 >>> 15;
   $267 = (($264) + ($266))|0;
   $268 = $267 << 1;
   $269 = (($267) + 7)|0;
   $270 = $$2 >>> $269;
   $271 = $270 & 1;
   $272 = $271 | $268;
   $$0396 = $272;
  }
 }
 $273 = (64476 + ($$0396<<2)|0);
 $274 = ((($$1)) + 28|0);
 HEAP32[$274>>2] = $$0396;
 $275 = ((($$1)) + 16|0);
 $276 = ((($$1)) + 20|0);
 HEAP32[$276>>2] = 0;
 HEAP32[$275>>2] = 0;
 $277 = HEAP32[(64176)>>2]|0;
 $278 = 1 << $$0396;
 $279 = $277 & $278;
 $280 = ($279|0)==(0);
 do {
  if ($280) {
   $281 = $277 | $278;
   HEAP32[(64176)>>2] = $281;
   HEAP32[$273>>2] = $$1;
   $282 = ((($$1)) + 24|0);
   HEAP32[$282>>2] = $273;
   $283 = ((($$1)) + 12|0);
   HEAP32[$283>>2] = $$1;
   $284 = ((($$1)) + 8|0);
   HEAP32[$284>>2] = $$1;
  } else {
   $285 = HEAP32[$273>>2]|0;
   $286 = ($$0396|0)==(31);
   $287 = $$0396 >>> 1;
   $288 = (25 - ($287))|0;
   $289 = $286 ? 0 : $288;
   $290 = $$2 << $289;
   $$0383 = $290;$$0384 = $285;
   while(1) {
    $291 = ((($$0384)) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = $292 & -8;
    $294 = ($293|0)==($$2|0);
    if ($294) {
     label = 124;
     break;
    }
    $295 = $$0383 >>> 31;
    $296 = (((($$0384)) + 16|0) + ($295<<2)|0);
    $297 = $$0383 << 1;
    $298 = HEAP32[$296>>2]|0;
    $299 = ($298|0)==(0|0);
    if ($299) {
     label = 121;
     break;
    } else {
     $$0383 = $297;$$0384 = $298;
    }
   }
   if ((label|0) == 121) {
    $300 = HEAP32[(64188)>>2]|0;
    $301 = ($296>>>0)<($300>>>0);
    if ($301) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$296>>2] = $$1;
     $302 = ((($$1)) + 24|0);
     HEAP32[$302>>2] = $$0384;
     $303 = ((($$1)) + 12|0);
     HEAP32[$303>>2] = $$1;
     $304 = ((($$1)) + 8|0);
     HEAP32[$304>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 124) {
    $305 = ((($$0384)) + 8|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = HEAP32[(64188)>>2]|0;
    $308 = ($306>>>0)>=($307>>>0);
    $not$437 = ($$0384>>>0)>=($307>>>0);
    $309 = $308 & $not$437;
    if ($309) {
     $310 = ((($306)) + 12|0);
     HEAP32[$310>>2] = $$1;
     HEAP32[$305>>2] = $$1;
     $311 = ((($$1)) + 8|0);
     HEAP32[$311>>2] = $306;
     $312 = ((($$1)) + 12|0);
     HEAP32[$312>>2] = $$0384;
     $313 = ((($$1)) + 24|0);
     HEAP32[$313>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $314 = HEAP32[(64204)>>2]|0;
 $315 = (($314) + -1)|0;
 HEAP32[(64204)>>2] = $315;
 $316 = ($315|0)==(0);
 if ($316) {
  $$0212$in$i = (64628);
 } else {
  return;
 }
 while(1) {
  $$0212$i = HEAP32[$$0212$in$i>>2]|0;
  $317 = ($$0212$i|0)==(0|0);
  $318 = ((($$0212$i)) + 8|0);
  if ($317) {
   break;
  } else {
   $$0212$in$i = $318;
  }
 }
 HEAP32[(64204)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (64668|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_738($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_108()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_108() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4600|0);
}
function _dummy_738($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = (($27) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($27)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$27>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 9;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 15]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 15]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01824 = 0, $$01926 = 0, $$01926$in = 0, $$020 = 0, $$025 = 0, $$lcssa = 0, $$lcssa22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = $4&255;
  $6 = ($4<<24>>24)==(0);
  $7 = HEAP8[$1>>0]|0;
  $8 = $7&255;
  L3: do {
   if ($6) {
    $$lcssa = $8;$$lcssa22 = $5;
   } else {
    $$01824 = $0;$$01926$in = $2;$$025 = $1;$10 = $7;$13 = $4;$22 = $8;$23 = $5;
    while(1) {
     $$01926 = (($$01926$in) + -1)|0;
     $9 = ($10<<24>>24)!=(0);
     $11 = ($$01926|0)!=(0);
     $or$cond = $11 & $9;
     $12 = ($13<<24>>24)==($10<<24>>24);
     $or$cond21 = $12 & $or$cond;
     if (!($or$cond21)) {
      $$lcssa = $22;$$lcssa22 = $23;
      break L3;
     }
     $14 = ((($$01824)) + 1|0);
     $15 = ((($$025)) + 1|0);
     $16 = HEAP8[$14>>0]|0;
     $17 = $16&255;
     $18 = ($16<<24>>24)==(0);
     $19 = HEAP8[$15>>0]|0;
     $20 = $19&255;
     if ($18) {
      $$lcssa = $20;$$lcssa22 = $17;
      break;
     } else {
      $$01824 = $14;$$01926$in = $$01926;$$025 = $15;$10 = $19;$13 = $16;$22 = $20;$23 = $17;
     }
    }
   }
  } while(0);
  $21 = (($$lcssa22) - ($$lcssa))|0;
  $$020 = $21;
 }
 return ($$020|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 15]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249306 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249306;$39 = $27;
      break L12;
     }
     $30 = ((($$0249306)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249306 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$377;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)<(32);
  L24: do {
   if ($49) {
    $$0262311 = 0;$329 = $46;$51 = $48;$storemerge273310 = $storemerge;
    while(1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $$0262$lcssa = $$0262311;$$lcssa295 = $329;$62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = ((($storemerge273310)) + 1|0);
     HEAP32[$5>>2] = $55;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (($57) + -32)|0;
     $59 = ($58>>>0)<(32);
     if ($59) {
      $$0262311 = $54;$329 = $56;$51 = $58;$storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;$$lcssa295 = $56;$62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;$$lcssa295 = $46;$62 = $storemerge;
   }
  } while(0);
  $60 = ($$lcssa295<<24>>24)==(42);
  if ($60) {
   $61 = ((($62)) + 1|0);
   $63 = HEAP8[$61>>0]|0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = (($64) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $65 = ((($62)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66<<24>>24)==(36);
    if ($67) {
     $68 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$68>>2] = 10;
     $69 = HEAP8[$61>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = (($70) + -48)|0;
     $72 = (($3) + ($71<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($62)) + 3|0);
     $$0259 = $75;$$2271 = 1;$storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $80 = ($$1270|0)==(0);
    if (!($80)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $81 = $arglist_current;
     $82 = ((0) + 4|0);
     $expanded4 = $82;
     $expanded = (($expanded4) - 1)|0;
     $83 = (($81) + ($expanded))|0;
     $84 = ((0) + 4|0);
     $expanded8 = $84;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $arglist_next = ((($86)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $87;$$2271 = 0;$storemerge278 = $61;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $61;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $88 = ($$0259|0)<(0);
   $89 = $$0262$lcssa | 8192;
   $90 = (0 - ($$0259))|0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$94 = $storemerge278;
  } else {
   $91 = (_getint($5)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $91;$$1263 = $$0262$lcssa;$$3272 = $$1270;$94 = $$pre346;
  }
  $93 = HEAP8[$94>>0]|0;
  $95 = ($93<<24>>24)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)==(42);
    if (!($98)) {
     $125 = ((($94)) + 1|0);
     HEAP32[$5>>2] = $125;
     $126 = (_getint($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $126;$$pre347 = $$pre347$pre;
     break;
    }
    $99 = ((($94)) + 2|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = (($101) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $102 = ((($94)) + 3|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(36);
     if ($104) {
      $105 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$105>>2] = 10;
      $106 = HEAP8[$99>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + -48)|0;
      $109 = (($3) + ($108<<3)|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($94)) + 4|0);
      HEAP32[$5>>2] = $116;
      $$0254 = $112;$$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272|0)==(0);
    if (!($117)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $118 = $arglist_current2;
     $119 = ((0) + 4|0);
     $expanded11 = $119;
     $expanded10 = (($expanded11) - 1)|0;
     $120 = (($118) + ($expanded10))|0;
     $121 = ((0) + 4|0);
     $expanded15 = $121;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $arglist_next3 = ((($123)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5>>2] = $99;
    $$0254 = $330;$$pre347 = $99;
   } else {
    $$0254 = -1;$$pre347 = $94;
   }
  } while(0);
  $$0252 = 0;$128 = $$pre347;
  while(1) {
   $127 = HEAP8[$128>>0]|0;
   $129 = $127 << 24 >> 24;
   $130 = (($129) + -65)|0;
   $131 = ($130>>>0)>(57);
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = ((($128)) + 1|0);
   HEAP32[$5>>2] = $132;
   $133 = HEAP8[$128>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = (($134) + -65)|0;
   $136 = ((19059 + (($$0252*58)|0)|0) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($138) + -1)|0;
   $140 = ($139>>>0)<(8);
   if ($140) {
    $$0252 = $138;$128 = $132;
   } else {
    break;
   }
  }
  $141 = ($137<<24>>24)==(0);
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = ($137<<24>>24)==(19);
  $143 = ($$0253|0)>(-1);
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = (($4) + ($$0253<<2)|0);
     HEAP32[$144>>2] = $138;
     $145 = (($3) + ($$0253<<3)|0);
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($146) + 4)|0;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153>>2] = $148;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     label = 49;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$138,$2);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252|0)!=(0);
  $159 = $157 & 15;
  $160 = ($159|0)==(3);
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162|0)==(0);
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $171 = HEAP32[$6>>2]|0;
     HEAP32[$171>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 1:  {
     $172 = HEAP32[$6>>2]|0;
     HEAP32[$172>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 2:  {
     $173 = ($$1248|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = HEAP32[$6>>2]|0;
     $176 = $175;
     $177 = $176;
     HEAP32[$177>>2] = $$1248;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 3:  {
     $180 = $$1248&65535;
     $181 = HEAP32[$6>>2]|0;
     HEAP16[$181>>1] = $180;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 4:  {
     $182 = $$1248&255;
     $183 = HEAP32[$6>>2]|0;
     HEAP8[$183>>0] = $182;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 6:  {
     $184 = HEAP32[$6>>2]|0;
     HEAP32[$184>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 7:  {
     $185 = ($$1248|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$6>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $$1248;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $192 = ($$0254>>>0)>(8);
    $193 = $192 ? $$0254 : 8;
    $194 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $193;$$3265 = $194;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 61;
    break;
   }
   case 111:  {
    $210 = $6;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (_fmt_o($212,$215,$11)|0);
    $217 = $$1263$ & 8;
    $218 = ($217|0)==(0);
    $219 = $216;
    $220 = (($12) - ($219))|0;
    $221 = ($$0254|0)>($220|0);
    $222 = (($220) + 1)|0;
    $223 = $218 | $221;
    $$0254$$0254$ = $223 ? $$0254 : $222;
    $$0228 = $216;$$1233 = 0;$$1238 = 19523;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$248 = $212;$250 = $215;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $224 = $6;
    $225 = $224;
    $226 = HEAP32[$225>>2]|0;
    $227 = (($224) + 4)|0;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)<(0);
    if ($230) {
     $231 = (_i64Subtract(0,0,($226|0),($229|0))|0);
     $232 = tempRet0;
     $233 = $6;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $$0232 = 1;$$0237 = 19523;$242 = $231;$243 = $232;
     label = 66;
     break L71;
    } else {
     $237 = $$1263$ & 2048;
     $238 = ($237|0)==(0);
     $239 = $$1263$ & 1;
     $240 = ($239|0)==(0);
     $$ = $240 ? 19523 : (19525);
     $$$ = $238 ? $$ : (19524);
     $241 = $$1263$ & 2049;
     $narrow = ($241|0)!=(0);
     $$284$ = $narrow&1;
     $$0232 = $$284$;$$0237 = $$$;$242 = $226;$243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $165 = $6;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + 4)|0;
    $169 = $168;
    $170 = HEAP32[$169>>2]|0;
    $$0232 = 0;$$0237 = 19523;$242 = $167;$243 = $170;
    label = 66;
    break;
   }
   case 99:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $261&255;
    HEAP8[$13>>0] = $265;
    $$2 = $13;$$2234 = 0;$$2239 = 19523;$$2251 = $11;$$5 = 1;$$6268 = $164;
    break;
   }
   case 109:  {
    $266 = (___errno_location()|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_strerror($267)|0);
    $$1 = $268;
    label = 71;
    break;
   }
   case 115:  {
    $269 = HEAP32[$6>>2]|0;
    $270 = ($269|0)!=(0|0);
    $271 = $270 ? $269 : 19533;
    $$1 = $271;
    label = 71;
    break;
   }
   case 67:  {
    $278 = $6;
    $279 = $278;
    $280 = HEAP32[$279>>2]|0;
    $281 = (($278) + 4)|0;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    HEAP32[$8>>2] = $280;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$331 = $8;
    label = 75;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $284 = ($$0254|0)==(0);
    if ($284) {
     _pad_674($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;$331 = $$pre349;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $306 = +HEAPF64[$6>>3];
    $307 = (_fmt_fp($0,$306,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $307;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 19523;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($195) + 4)|0;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = $$1236 & 32;
    $202 = (_fmt_x($197,$200,$11,$201)|0);
    $203 = ($197|0)==(0);
    $204 = ($200|0)==(0);
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206|0)==(0);
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = (19523 + ($208)|0);
    $$289 = $or$cond283 ? 19523 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;$$1233 = $$290;$$1238 = $$289;$$2256 = $$1255;$$4266 = $$3265;$248 = $197;$250 = $200;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $244 = (_fmt_u($242,$243,$11)|0);
    $$0228 = $244;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$248 = $242;$250 = $243;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $272 = (_memchr($$1,0,$$0254)|0);
    $273 = ($272|0)==(0|0);
    $274 = $272;
    $275 = $$1;
    $276 = (($274) - ($275))|0;
    $277 = (($$1) + ($$0254)|0);
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;$$2234 = 0;$$2239 = 19523;$$2251 = $$1250;$$5 = $$3257;$$6268 = $164;
   }
   else if ((label|0) == 75) {
    label = 0;
    $$0229322 = $331;$$0240321 = 0;$$1244320 = 0;
    while(1) {
     $285 = HEAP32[$$0229322>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      $$0240$lcssa = $$0240321;$$2245 = $$1244320;
      break;
     }
     $287 = (_wctomb($9,$285)|0);
     $288 = ($287|0)<(0);
     $289 = (($$4258355) - ($$0240321))|0;
     $290 = ($287>>>0)>($289>>>0);
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;$$2245 = $287;
      break;
     }
     $291 = ((($$0229322)) + 4|0);
     $292 = (($287) + ($$0240321))|0;
     $293 = ($$4258355>>>0)>($292>>>0);
     if ($293) {
      $$0229322 = $291;$$0240321 = $292;$$1244320 = $287;
     } else {
      $$0240$lcssa = $292;$$2245 = $287;
      break;
     }
    }
    $294 = ($$2245|0)<(0);
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_674($0,32,$$1260,$$0240$lcssa,$$1263$);
    $295 = ($$0240$lcssa|0)==(0);
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;$$1241332 = 0;
     while(1) {
      $296 = HEAP32[$$1230333>>2]|0;
      $297 = ($296|0)==(0);
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = (_wctomb($9,$296)|0);
      $299 = (($298) + ($$1241332))|0;
      $300 = ($299|0)>($$0240$lcssa|0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = ((($$1230333)) + 4|0);
      _out($0,$9,$298);
      $302 = ($299>>>0)<($$0240$lcssa>>>0);
      if ($302) {
       $$1230333 = $301;$$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $245 = ($$2256|0)>(-1);
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $247 = ($248|0)!=(0);
   $249 = ($250|0)!=(0);
   $251 = $247 | $249;
   $252 = ($$2256|0)!=(0);
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = (($12) - ($253))|0;
   $255 = $251 ^ 1;
   $256 = $255&1;
   $257 = (($256) + ($254))|0;
   $258 = ($$2256|0)>($257|0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_674($0,32,$$1260,$$0240$lcssa357,$303);
   $304 = ($$1260|0)>($$0240$lcssa357|0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = (($308) - ($309))|0;
  $311 = ($$5|0)<($310|0);
  $$$5 = $311 ? $310 : $$5;
  $312 = (($$$5) + ($$2234))|0;
  $313 = ($$1260|0)<($312|0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_674($0,32,$$2261,$312,$$6268);
  _out($0,$$2239,$$2234);
  $314 = $$6268 ^ 65536;
  _pad_674($0,48,$$2261,$312,$314);
  _pad_674($0,48,$$$5,$310,0);
  _out($0,$$2,$310);
  $315 = $$6268 ^ 8192;
  _pad_674($0,32,$$2261,$312,$315);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
 }
 L114: do {
  if ((label|0) == 87) {
   $316 = ($0|0)==(0|0);
   if ($316) {
    $317 = ($$0269|0)==(0);
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while(1) {
      $318 = (($4) + ($$2242305<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(0);
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = (($3) + ($$2242305<<3)|0);
      _pop_arg($321,$319,$2);
      $322 = (($$2242305) + 1)|0;
      $323 = ($322|0)<(10);
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while(1) {
      $326 = (($4) + ($$3303<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      $325 = (($$3303) + 1)|0;
      if (!($328)) {
       $$0 = -1;
       break L114;
      }
      $324 = ($325|0)<(10);
      if ($324) {
       $$3303 = $325;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (19575 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_105()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad_674($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_675($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 19540;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (19541) : (19546);
  $$$ = $16 ? $$ : (19543);
  $19 = $4 & 2049;
  $narrow = ($19|0)!=(0);
  $$534$ = $narrow&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_675($$0471)|0);
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = ($21>>>0)<(2146435072);
 $23 = (0)<(0);
 $24 = ($21|0)==(2146435072);
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = (+_frexpl($$0471,$7));
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7>>2]|0;
    $39 = (($38) + -1)|0;
    HEAP32[$7>>2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40|0)==(97);
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42|0)==(0);
    $44 = ((($$0521)) + 9|0);
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = ($3>>>0)>(11);
    $47 = (12 - ($3))|0;
    $48 = ($47|0)==(0);
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;$$1508583 = $47;
      while(1) {
       $50 = (($$1508583) + -1)|0;
       $51 = $$0509582 * 16.0;
       $52 = ($50|0)==(0);
       if ($52) {
        break;
       } else {
        $$0509582 = $51;$$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$>>0]|0;
      $54 = ($53<<24>>24)==(45);
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while(0);
    $61 = HEAP32[$7>>2]|0;
    $62 = ($61|0)<(0);
    $63 = (0 - ($61))|0;
    $64 = $62 ? $63 : $61;
    $65 = ($64|0)<(0);
    $66 = $65 << 31 >> 31;
    $67 = (_fmt_u($64,$66,$11)|0);
    $68 = ($67|0)==($11|0);
    if ($68) {
     $69 = ((($10)) + 11|0);
     HEAP8[$69>>0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = (($71) + 43)|0;
    $73 = $72&255;
    $74 = ((($$0511)) + -1|0);
    HEAP8[$74>>0] = $73;
    $75 = (($5) + 15)|0;
    $76 = $75&255;
    $77 = ((($$0511)) + -2|0);
    HEAP8[$77>>0] = $76;
    $notrhs = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (19575 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $42;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3|0)!=(0);
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = (($98) - ($9))|0;
    $100 = (($97) - ($96))|0;
    $101 = (($99) + -2)|0;
    $102 = ($101|0)<($3|0);
    $or$cond537 = $95 & $102;
    $103 = (($3) + 2)|0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = (($100) + ($45))|0;
    $104 = (($$0525) + ($$pn))|0;
    _pad_674($0,32,$2,$104,$4);
    _out($0,$$0521$,$45);
    $105 = $4 ^ 65536;
    _pad_674($0,48,$2,$104,$105);
    _out($0,$8,$99);
    $106 = (($$pn) - ($99))|0;
    _pad_674($0,48,$106,0,0);
    _out($0,$77,$100);
    $107 = $4 ^ 8192;
    _pad_674($0,32,$2,$104,$107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3|0)<(0);
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7>>2]|0;
    $111 = (($110) + -28)|0;
    HEAP32[$7>>2] = $111;
    $$3 = $109;$$pr = $111;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $36;$$pr = $$pre;
   }
   $112 = ($$pr|0)<(0);
   $113 = ((($6)) + 288|0);
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;$$4 = $$3;
   while(1) {
    $114 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $114;
    $115 = ((($$0498)) + 4|0);
    $116 = (+($114>>>0));
    $117 = $$4 - $116;
    $118 = $117 * 1.0E+9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;$$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr|0)>(0);
   if ($120) {
    $$1482661 = $$556;$$1499660 = $115;$122 = $$pr;
    while(1) {
     $121 = ($122|0)<(29);
     $123 = $121 ? $122 : 29;
     $$0488653 = ((($$1499660)) + -4|0);
     $124 = ($$0488653>>>0)<($$1482661>>>0);
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;$$0497654 = 0;
      while(1) {
       $125 = HEAP32[$$0488655>>2]|0;
       $126 = (_bitshift64Shl(($125|0),0,($123|0))|0);
       $127 = tempRet0;
       $128 = (_i64Add(($126|0),($127|0),($$0497654|0),0)|0);
       $129 = tempRet0;
       $130 = (___uremdi3(($128|0),($129|0),1000000000,0)|0);
       $131 = tempRet0;
       HEAP32[$$0488655>>2] = $130;
       $132 = (___udivdi3(($128|0),($129|0),1000000000,0)|0);
       $133 = tempRet0;
       $$0488 = ((($$0488655)) + -4|0);
       $134 = ($$0488>>>0)<($$1482661>>>0);
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;$$0497654 = $132;
       }
      }
      $135 = ($132|0)==(0);
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = ((($$1482661)) + -4|0);
       HEAP32[$136>>2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while(1) {
      $137 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($137)) {
       break;
      }
      $138 = ((($$2500)) + -4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0);
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7>>2]|0;
     $142 = (($141) - ($123))|0;
     HEAP32[$7>>2] = $142;
     $143 = ($142|0)>(0);
     if ($143) {
      $$1482661 = $$2483$ph;$$1499660 = $$2500;$122 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;$$1499$lcssa = $115;$$pr564 = $$pr;
   }
   $144 = ($$pr564|0)<(0);
   if ($144) {
    $145 = (($$539) + 25)|0;
    $146 = (($145|0) / 9)&-1;
    $147 = (($146) + 1)|0;
    $148 = ($40|0)==(102);
    $$3484648 = $$1482$lcssa;$$3501647 = $$1499$lcssa;$150 = $$pr564;
    while(1) {
     $149 = (0 - ($150))|0;
     $151 = ($149|0)<(9);
     $152 = $151 ? $149 : 9;
     $153 = ($$3484648>>>0)<($$3501647>>>0);
     if ($153) {
      $157 = 1 << $152;
      $158 = (($157) + -1)|0;
      $159 = 1000000000 >>> $152;
      $$0487642 = 0;$$1489641 = $$3484648;
      while(1) {
       $160 = HEAP32[$$1489641>>2]|0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = (($162) + ($$0487642))|0;
       HEAP32[$$1489641>>2] = $163;
       $164 = Math_imul($161, $159)|0;
       $165 = ((($$1489641)) + 4|0);
       $166 = ($165>>>0)<($$3501647>>>0);
       if ($166) {
        $$0487642 = $164;$$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648>>2]|0;
      $168 = ($167|0)==(0);
      $169 = ((($$3484648)) + 4|0);
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164|0)==(0);
      if ($170) {
       $$$3484692 = $$$3484;$$4502 = $$3501647;
      } else {
       $171 = ((($$3501647)) + 4|0);
       HEAP32[$$3501647>>2] = $164;
       $$$3484692 = $$$3484;$$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648>>2]|0;
      $155 = ($154|0)==(0);
      $156 = ((($$3484648)) + 4|0);
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;$$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = $175 >> 2;
     $177 = ($176|0)>($147|0);
     $178 = (($172) + ($147<<2)|0);
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7>>2]|0;
     $180 = (($179) + ($152))|0;
     HEAP32[$7>>2] = $180;
     $181 = ($180|0)<(0);
     if ($181) {
      $$3484648 = $$$3484692;$$3501647 = $$$4502;$150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $182 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = (($183) - ($184))|0;
    $186 = $185 >> 2;
    $187 = ($186*9)|0;
    $188 = HEAP32[$$3484$lcssa>>2]|0;
    $189 = ($188>>>0)<(10);
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;$$0530636 = 10;
     while(1) {
      $190 = ($$0530636*10)|0;
      $191 = (($$0514637) + 1)|0;
      $192 = ($188>>>0)<($190>>>0);
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;$$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40|0)!=(102);
   $194 = $193 ? $$1515 : 0;
   $195 = (($$539) - ($194))|0;
   $196 = ($40|0)==(103);
   $197 = ($$539|0)!=(0);
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = (($195) + ($$neg))|0;
   $200 = $$3501$lcssa;
   $201 = (($200) - ($183))|0;
   $202 = $201 >> 2;
   $203 = ($202*9)|0;
   $204 = (($203) + -9)|0;
   $205 = ($199|0)<($204|0);
   if ($205) {
    $206 = ((($$556)) + 4|0);
    $207 = (($199) + 9216)|0;
    $208 = (($207|0) / 9)&-1;
    $209 = (($208) + -1024)|0;
    $210 = (($206) + ($209<<2)|0);
    $211 = (($207|0) % 9)&-1;
    $$0527629 = (($211) + 1)|0;
    $212 = ($$0527629|0)<(9);
    if ($212) {
     $$0527631 = $$0527629;$$1531630 = 10;
     while(1) {
      $213 = ($$1531630*10)|0;
      $$0527 = (($$0527631) + 1)|0;
      $exitcond = ($$0527|0)==(9);
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;$$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210>>2]|0;
    $215 = (($214>>>0) % ($$1531$lcssa>>>0))&-1;
    $216 = ($215|0)==(0);
    $217 = ((($210)) + 4|0);
    $218 = ($217|0)==($$3501$lcssa|0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $219 = (($214>>>0) / ($$1531$lcssa>>>0))&-1;
     $220 = $219 & 1;
     $221 = ($220|0)==(0);
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = (($$1531$lcssa|0) / 2)&-1;
     $223 = ($215>>>0)<($222>>>0);
     $224 = ($215|0)==($222|0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? 0.5 : $$559;
     $225 = ($$0520|0)==(0);
     if ($225) {
      $$1467 = $$$559;$$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521>>0]|0;
      $227 = ($226<<24>>24)==(45);
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;$$1469 = $$$542;
     }
     $230 = (($214) - ($215))|0;
     HEAP32[$210>>2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = (($230) + ($$1531$lcssa))|0;
      HEAP32[$210>>2] = $233;
      $234 = ($233>>>0)>(999999999);
      if ($234) {
       $$5486623 = $$3484$lcssa;$$sink545622 = $210;
       while(1) {
        $235 = ((($$sink545622)) + -4|0);
        HEAP32[$$sink545622>>2] = 0;
        $236 = ($235>>>0)<($$5486623>>>0);
        if ($236) {
         $237 = ((($$5486623)) + -4|0);
         HEAP32[$237>>2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$235>>2] = $239;
        $240 = ($239>>>0)>(999999999);
        if ($240) {
         $$5486623 = $$6;$$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;$$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = (($183) - ($241))|0;
      $243 = $242 >> 2;
      $244 = ($243*9)|0;
      $245 = HEAP32[$$5486$lcssa>>2]|0;
      $246 = ($245>>>0)<(10);
      if ($246) {
       $$4492 = $$sink545$lcssa;$$4518 = $244;$$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;$$2532617 = 10;
       while(1) {
        $247 = ($$2532617*10)|0;
        $248 = (($$2516618) + 1)|0;
        $249 = ($245>>>0)<($247>>>0);
        if ($249) {
         $$4492 = $$sink545$lcssa;$$4518 = $248;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;$$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $250 = ((($$4492)) + 4|0);
    $251 = ($$3501$lcssa>>>0)>($250>>>0);
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $252 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($252)) {
     $$lcssa673 = 0;
     break;
    }
    $253 = ((($$7505)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ($254|0)==(0);
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = (0 - ($$5519$ph))|0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$&1;
     $$539$ = (($257) + ($$539))|0;
     $258 = ($$539$|0)>($$5519$ph|0);
     $259 = ($$5519$ph|0)>(-5);
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = (($5) + -1)|0;
      $$neg567 = (($$539$) + -1)|0;
      $261 = (($$neg567) - ($$5519$ph))|0;
      $$0479 = $260;$$2476 = $261;
     } else {
      $262 = (($5) + -2)|0;
      $263 = (($$539$) + -1)|0;
      $$0479 = $262;$$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264|0)==(0);
     if ($265) {
      if ($$lcssa673) {
       $266 = ((($$7505)) + -4|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = (($267>>>0) % 10)&-1;
        $270 = ($269|0)==(0);
        if ($270) {
         $$1528614 = 0;$$3533613 = 10;
         while(1) {
          $271 = ($$3533613*10)|0;
          $272 = (($$1528614) + 1)|0;
          $273 = (($267>>>0) % ($271>>>0))&-1;
          $274 = ($273|0)==(0);
          if ($274) {
           $$1528614 = $272;$$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275|0)==(102);
      $277 = $$7505;
      $278 = (($277) - ($183))|0;
      $279 = $278 >> 2;
      $280 = ($279*9)|0;
      $281 = (($280) + -9)|0;
      if ($276) {
       $282 = (($281) - ($$2529))|0;
       $283 = ($282|0)>(0);
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476|0)<($$546|0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;$$3477 = $$2476$$547;$$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = (($281) + ($$5519$ph))|0;
       $286 = (($285) - ($$2529))|0;
       $287 = ($286|0)>(0);
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476|0)<($$548|0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;$$3477 = $$539;$$pre$phi690Z2D = $$pre689;
    }
   } while(0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289|0)!=(0);
   $291 = $290&1;
   $292 = $$1480 | 32;
   $293 = ($292|0)==(102);
   if ($293) {
    $294 = ($$5519$ph|0)>(0);
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;$$pn566 = $295;
   } else {
    $296 = ($$5519$ph|0)<(0);
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297|0)<(0);
    $299 = $298 << 31 >> 31;
    $300 = (_fmt_u($297,$299,$11)|0);
    $301 = $11;
    $302 = $300;
    $303 = (($301) - ($302))|0;
    $304 = ($303|0)<(2);
    if ($304) {
     $$1512607 = $300;
     while(1) {
      $305 = ((($$1512607)) + -1|0);
      HEAP8[$305>>0] = 48;
      $306 = $305;
      $307 = (($301) - ($306))|0;
      $308 = ($307|0)<(2);
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = (($310) + 43)|0;
    $312 = $311&255;
    $313 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$313>>0] = $312;
    $314 = $$1480&255;
    $315 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$315>>0] = $314;
    $316 = $315;
    $317 = (($301) - ($316))|0;
    $$2513 = $315;$$pn566 = $317;
   }
   $318 = (($$0520) + 1)|0;
   $319 = (($318) + ($$3477))|0;
   $$1526 = (($319) + ($291))|0;
   $320 = (($$1526) + ($$pn566))|0;
   _pad_674($0,32,$2,$320,$4);
   _out($0,$$0521,$$0520);
   $321 = $4 ^ 65536;
   _pad_674($0,48,$2,$320,$321);
   if ($293) {
    $322 = ($$9$ph>>>0)>($$556>>>0);
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = ((($8)) + 9|0);
    $324 = $323;
    $325 = ((($8)) + 8|0);
    $$5493597 = $$0496$$9;
    while(1) {
     $326 = HEAP32[$$5493597>>2]|0;
     $327 = (_fmt_u($326,0,$323)|0);
     $328 = ($$5493597|0)==($$0496$$9|0);
     if ($328) {
      $334 = ($327|0)==($323|0);
      if ($334) {
       HEAP8[$325>>0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = ($327>>>0)>($8>>>0);
      if ($329) {
       $330 = $327;
       $331 = (($330) - ($9))|0;
       _memset(($8|0),48,($331|0))|0;
       $$0464594 = $327;
       while(1) {
        $332 = ((($$0464594)) + -1|0);
        $333 = ($332>>>0)>($8>>>0);
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = (($324) - ($335))|0;
     _out($0,$$1465,$336);
     $337 = ((($$5493597)) + 4|0);
     $338 = ($337>>>0)>($$556>>>0);
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289|0)==(0);
    if (!($339)) {
     _out($0,19591,1);
    }
    $340 = ($337>>>0)<($$7505>>>0);
    $341 = ($$3477|0)>(0);
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;$$6494589 = $337;
     while(1) {
      $343 = HEAP32[$$6494589>>2]|0;
      $344 = (_fmt_u($343,0,$323)|0);
      $345 = ($344>>>0)>($8>>>0);
      if ($345) {
       $346 = $344;
       $347 = (($346) - ($9))|0;
       _memset(($8|0),48,($347|0))|0;
       $$0463584 = $344;
       while(1) {
        $348 = ((($$0463584)) + -1|0);
        $349 = ($348>>>0)>($8>>>0);
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590|0)<(9);
      $351 = $350 ? $$4478590 : 9;
      _out($0,$$0463$lcssa,$351);
      $352 = ((($$6494589)) + 4|0);
      $353 = (($$4478590) + -9)|0;
      $354 = ($352>>>0)<($$7505>>>0);
      $355 = ($$4478590|0)>(9);
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;$$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = (($$4478$lcssa) + 9)|0;
    _pad_674($0,48,$357,9,0);
   } else {
    $358 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477|0)>(-1);
    if ($359) {
     $360 = ((($8)) + 9|0);
     $361 = ($$pre$phi690Z2D|0)==(0);
     $362 = $360;
     $363 = (0 - ($9))|0;
     $364 = ((($8)) + 8|0);
     $$5602 = $$3477;$$7495601 = $$9$ph;
     while(1) {
      $365 = HEAP32[$$7495601>>2]|0;
      $366 = (_fmt_u($365,0,$360)|0);
      $367 = ($366|0)==($360|0);
      if ($367) {
       HEAP8[$364>>0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601|0)==($$9$ph|0);
      do {
       if ($368) {
        $372 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $373 = ($$5602|0)<(1);
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out($0,19591,1);
        $$2 = $372;
       } else {
        $369 = ($$0>>>0)>($8>>>0);
        if (!($369)) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = (($$0) + ($363)|0);
        $scevgep684685 = $scevgep684;
        _memset(($8|0),48,($scevgep684685|0))|0;
        $$1598 = $$0;
        while(1) {
         $370 = ((($$1598)) + -1|0);
         $371 = ($370>>>0)>($8>>>0);
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while(0);
      $374 = $$2;
      $375 = (($362) - ($374))|0;
      $376 = ($$5602|0)>($375|0);
      $377 = $376 ? $375 : $$5602;
      _out($0,$$2,$377);
      $378 = (($$5602) - ($375))|0;
      $379 = ((($$7495601)) + 4|0);
      $380 = ($379>>>0)<($$7505$>>>0);
      $381 = ($378|0)>(-1);
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;$$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = (($$5$lcssa) + 18)|0;
    _pad_674($0,48,$383,18,0);
    $384 = $11;
    $385 = $$2513;
    $386 = (($384) - ($385))|0;
    _out($0,$$2513,$386);
   }
   $387 = $4 ^ 8192;
   _pad_674($0,32,$2,$320,$387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 19559 : 19563;
   $30 = ($$0471 != $$0471) | (0.0 != 0.0);
   $31 = $28 ? 19567 : 19571;
   $$0510 = $30 ? $31 : $29;
   $32 = (($$0520) + 3)|0;
   $33 = $4 & -65537;
   _pad_674($0,32,$2,$32,$33);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $34 = $4 ^ 8192;
   _pad_674($0,32,$2,$32,$34);
   $$sink562 = $32;
  }
 } while(0);
 $388 = ($$sink562|0)<($2|0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;return ($$555|0);
}
function ___DOUBLE_BITS_675($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_448()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_448() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_105() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (19593 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 19681;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 19681;
  } else {
   $$01214 = 19681;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 15]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 15]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($14) + ($18)|0);
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$2 = 0, $$pre$pre = 0, $$pre76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 L1: do {
  if (!($11)) {
   $12 = (0 - ($2))|0;
   $13 = ((($4)) + 4|0);
   HEAP32[$13>>2] = $2;
   HEAP32[$4>>2] = $2;
   $$0 = 2;$15 = $2;$17 = $2;
   while(1) {
    $14 = (($15) + ($2))|0;
    $16 = (($14) + ($17))|0;
    $18 = (($4) + ($$0<<2)|0);
    HEAP32[$18>>2] = $16;
    $19 = ($16>>>0)<($6>>>0);
    $20 = (($$0) + 1)|0;
    if ($19) {
     $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
    } else {
     break;
    }
   }
   $21 = (($0) + ($6)|0);
   $22 = (($21) + ($12)|0);
   $23 = ($22>>>0)>($0>>>0);
   if ($23) {
    $24 = $22;
    $$06772 = 1;$$06871 = $0;$26 = 1;
    while(1) {
     $25 = $26 & 3;
     $27 = ($25|0)==(3);
     do {
      if ($27) {
       _sift($$06871,$2,$3,$$06772,$4);
       _shr($5,2);
       $28 = (($$06772) + 2)|0;
       $$1 = $28;
      } else {
       $29 = (($$06772) + -1)|0;
       $30 = (($4) + ($29<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $$06871;
       $33 = (($24) - ($32))|0;
       $34 = ($31>>>0)<($33>>>0);
       if ($34) {
        _sift($$06871,$2,$3,$$06772,$4);
       } else {
        _trinkle($$06871,$2,$3,$5,$$06772,0,$4);
       }
       $35 = ($$06772|0)==(1);
       if ($35) {
        _shl($5,1);
        $$1 = 0;
        break;
       } else {
        _shl($5,$29);
        $$1 = 1;
        break;
       }
      }
     } while(0);
     $36 = HEAP32[$5>>2]|0;
     $37 = $36 | 1;
     HEAP32[$5>>2] = $37;
     $38 = (($$06871) + ($2)|0);
     $39 = ($38>>>0)<($22>>>0);
     if ($39) {
      $$06772 = $$1;$$06871 = $38;$26 = $37;
     } else {
      $$067$lcssa = $$1;$$068$lcssa = $38;$61 = $37;
      break;
     }
    }
   } else {
    $$067$lcssa = 1;$$068$lcssa = $0;$61 = 1;
   }
   _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
   $40 = ((($5)) + 4|0);
   $$169 = $$068$lcssa;$$2 = $$067$lcssa;$43 = $61;
   while(1) {
    $41 = ($$2|0)==(1);
    $42 = ($43|0)==(1);
    $or$cond = $41 & $42;
    if ($or$cond) {
     $44 = HEAP32[$40>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      break L1;
     }
    } else {
     $46 = ($$2|0)<(2);
     if (!($46)) {
      _shl($5,2);
      $49 = (($$2) + -2)|0;
      $50 = HEAP32[$5>>2]|0;
      $51 = $50 ^ 7;
      HEAP32[$5>>2] = $51;
      _shr($5,1);
      $52 = (($4) + ($49<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (0 - ($53))|0;
      $55 = (($$169) + ($54)|0);
      $56 = (($55) + ($12)|0);
      $57 = (($$2) + -1)|0;
      _trinkle($56,$2,$3,$5,$57,1,$4);
      _shl($5,1);
      $58 = HEAP32[$5>>2]|0;
      $59 = $58 | 1;
      HEAP32[$5>>2] = $59;
      $60 = (($$169) + ($12)|0);
      _trinkle($60,$2,$3,$5,$49,1,$4);
      $$169 = $60;$$2 = $49;$43 = $59;
      continue;
     }
    }
    $47 = (_pntz($5)|0);
    _shr($5,$47);
    $48 = (($47) + ($$2))|0;
    $$pre$pre = HEAP32[$5>>2]|0;
    $$pre76 = (($$169) + ($12)|0);
    $$169 = $$pre76;$$2 = $48;$43 = $$pre$pre;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$029$be = 0, $$02932 = 0, $$030$be = 0, $$03031 = 0, $$033 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02932 = $0;$$03031 = $3;$$033 = 1;$14 = $0;
   while(1) {
    $8 = (($$02932) + ($7)|0);
    $9 = (($$03031) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 15]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 15]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$033;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 15]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($$033) + 1)|0;
    $22 = (($5) + ($$033<<2)|0);
    if ($20) {
     HEAP32[$22>>2] = $13;
     $23 = (($$03031) + -1)|0;
     $$029$be = $13;$$030$be = $23;
    } else {
     HEAP32[$22>>2] = $8;
     $$029$be = $8;$$030$be = $9;
    }
    $24 = ($$030$be|0)>(1);
    if (!($24)) {
     $$0$lcssa = $21;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02932 = $$029$be;$$03031 = $$030$be;$$033 = $21;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _shr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $5;
  HEAP32[$3>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$0>>2]|0;
  $$pre11 = HEAP32[$3>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 >>> $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 << $8;
 $11 = $9 | $6;
 HEAP32[$0>>2] = $11;
 $12 = $10 >>> $$0;
 HEAP32[$3>>2] = $12;
 return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp + 232|0;
 $8 = sp;
 $9 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$8>>2] = $0;
 $13 = ($9|0)!=(1);
 $14 = ($11|0)!=(0);
 $15 = $13 | $14;
 L1: do {
  if ($15) {
   $16 = (0 - ($1))|0;
   $17 = (($6) + ($4<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (0 - ($18))|0;
   $20 = (($0) + ($19)|0);
   $21 = (FUNCTION_TABLE_iii[$2 & 15]($20,$0)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 9;
   } else {
    $phitmp = ($5|0)==(0);
    $$0455780 = 1;$$0465681 = $4;$$0475582 = $phitmp;$$05879 = $0;$28 = $20;
    while(1) {
     $23 = ($$0465681|0)>(1);
     $or$cond = $$0475582 & $23;
     if ($or$cond) {
      $24 = (($$05879) + ($16)|0);
      $25 = (($$0465681) + -2)|0;
      $26 = (($6) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $29 = (FUNCTION_TABLE_iii[$2 & 15]($24,$28)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
      $31 = (0 - ($27))|0;
      $32 = (($24) + ($31)|0);
      $33 = (FUNCTION_TABLE_iii[$2 & 15]($32,$28)|0);
      $34 = ($33|0)>(-1);
      if ($34) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
     }
     $35 = (($$0455780) + 1)|0;
     $36 = (($8) + ($$0455780<<2)|0);
     HEAP32[$36>>2] = $28;
     $37 = (_pntz($7)|0);
     _shr($7,$37);
     $38 = (($37) + ($$0465681))|0;
     $39 = HEAP32[$7>>2]|0;
     $40 = ($39|0)!=(1);
     $41 = HEAP32[$12>>2]|0;
     $42 = ($41|0)!=(0);
     $43 = $40 | $42;
     if (!($43)) {
      $$04551 = $35;$$04653 = $38;$$049 = $28;
      label = 10;
      break L1;
     }
     $$pre = HEAP32[$8>>2]|0;
     $44 = (($6) + ($38<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (0 - ($45))|0;
     $47 = (($28) + ($46)|0);
     $48 = (FUNCTION_TABLE_iii[$2 & 15]($47,$$pre)|0);
     $49 = ($48|0)<(1);
     if ($49) {
      $$0$lcssa = $28;$$045$lcssa = $35;$$046$lcssa = $38;$$047$lcssa = 0;
      label = 9;
      break;
     } else {
      $$05879$phi = $28;$$0455780 = $35;$$0465681 = $38;$$0475582 = 1;$28 = $47;$$05879 = $$05879$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $50 = ($$047$lcssa|0)==(0);
  if ($50) {
   $$04551 = $$045$lcssa;$$04653 = $$046$lcssa;$$049 = $$0$lcssa;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  _cycle($1,$8,$$04551);
  _sift($$049,$1,$2,$$04653,$6);
 }
 STACKTOP = sp;return;
}
function _shl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$3>>2] = $5;
  HEAP32[$0>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $$pre11 = HEAP32[$0>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 << $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 >>> $8;
 $11 = $9 | $6;
 HEAP32[$3>>2] = $11;
 $12 = $10 << $$0;
 HEAP32[$0>>2] = $12;
 return;
}
function _pntz($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (_a_ctz_l_763($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_a_ctz_l_763($6)|0);
  $8 = (($7) + 32)|0;
  $9 = ($7|0)==(0);
  $$ = $9 ? 0 : $8;
  return ($$|0);
 } else {
  return ($3|0);
 }
 return (0)|0;
}
function _a_ctz_l_763($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $5 & 1;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)<(256);
     $8 = $7 ? $$02527 : 256;
     $9 = HEAP32[$1>>2]|0;
     _memcpy(($10|0),($9|0),($8|0))|0;
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      _memcpy(($12|0),($15|0),($8|0))|0;
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _ldexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $13 = $11;
  } else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $13 = $9;
 }
 $12 = ($13|0)==($4|0);
 if ($12) {
  $15 = $$;
 } else {
  $14 = (($13>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $7 = HEAP32[$$pre>>2]|0;
   $8 = ((($5)) + 112|0);
   HEAP32[$8>>2] = $7;
  }
  $9 = HEAP32[$$pre>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $12 = (___pthread_self_607()|0);
   $13 = ((($12)) + 232|0);
   $$sink = $13;
  } else {
   $11 = ((($9)) + 116|0);
   $$sink = $11;
  }
  HEAP32[$$sink>>2] = $5;
 }
 return;
}
function ___pthread_self_607() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 15]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(21485,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(21485,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $16 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $16 = $$pre;
   }
   $15 = ($16<<24>>24)==(97);
   if ($15) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 10;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 9;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 2;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 1;
   $38 = HEAP32[(64672)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    HEAP32[$40>>2] = -1;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((64732|0));
 return (64740|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((64732|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($15)) + 52|0);
   HEAP32[$17>>2] = $12;
  }
  $18 = HEAP32[$8>>2]|0;
  $19 = ($18|0)==($0|0);
  if ($19) {
   HEAP32[$8>>2] = $15;
  }
  ___ofl_unlock();
 }
 $20 = (_fflush($0)|0);
 $21 = ((($0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 31]($0)|0);
 $24 = $23 | $20;
 $25 = ((($0)) + 92|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _free($26);
 }
 if ($7) {
  $28 = ($29|0)==(0);
  if (!($28)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($24|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1243]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[1243]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 15]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 15]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 15]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 15]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $$0 = $0;
  } else {
   $4 = $2 << 24 >> 24;
   $5 = (_strchr($0,$4)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0 = 0;
   } else {
    $7 = ((($1)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $$0 = $5;
    } else {
     $10 = ((($5)) + 1|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$0 = 0;
     } else {
      $13 = ((($1)) + 2|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)==(0);
      if ($15) {
       $16 = (_twobyte_strstr($5,$1)|0);
       $$0 = $16;
       break;
      }
      $17 = ((($5)) + 2|0);
      $18 = HEAP8[$17>>0]|0;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       $$0 = 0;
      } else {
       $20 = ((($1)) + 3|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = ($21<<24>>24)==(0);
       if ($22) {
        $23 = (_threebyte_strstr($5,$1)|0);
        $$0 = $23;
        break;
       }
       $24 = ((($5)) + 3|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(0);
       if ($26) {
        $$0 = 0;
       } else {
        $27 = ((($1)) + 4|0);
        $28 = HEAP8[$27>>0]|0;
        $29 = ($28<<24>>24)==(0);
        if ($29) {
         $30 = (_fourbyte_strstr($5,$1)|0);
         $$0 = $30;
         break;
        } else {
         $31 = (_twoway_strstr($5,$1)|0);
         $$0 = $31;
         break;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _twobyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $$sink = 0, $$sink$in = 0, $$sink$masked = 0, $$sink17$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 8;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $4 | $7;
 $9 = HEAP8[$0>>0]|0;
 $10 = $9&255;
 $$sink$in = $10;$$sink17$sink = $0;
 while(1) {
  $11 = ((($$sink17$sink)) + 1|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   $$lcssa = 0;
   break;
  }
  $$sink = $$sink$in << 8;
  $14 = $12&255;
  $$sink$masked = $$sink & 65280;
  $15 = $14 | $$sink$masked;
  $16 = ($15|0)==($8|0);
  if ($16) {
   $$lcssa = $$sink17$sink;
   break;
  } else {
   $$sink$in = $15;$$sink17$sink = $11;
  }
 }
 return ($$lcssa|0);
}
function _threebyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016$lcssa = 0, $$01619 = 0, $$020 = 0, $$lcssa = 0, $$not = 0, $$not17 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($1)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = HEAP8[$0>>0]|0;
 $16 = $15&255;
 $17 = $16 << 24;
 $18 = ((($0)) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 16;
 $22 = $21 | $17;
 $23 = ((($0)) + 2|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 8;
 $27 = $22 | $26;
 $28 = ($24<<24>>24)!=(0);
 $$not17 = $28 ^ 1;
 $29 = ($27|0)==($14|0);
 $or$cond18 = $29 | $$not17;
 if ($or$cond18) {
  $$016$lcssa = $23;$$lcssa = $28;
 } else {
  $$01619 = $23;$$020 = $27;
  while(1) {
   $30 = ((($$01619)) + 1|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $32 | $$020;
   $34 = $33 << 8;
   $35 = ($31<<24>>24)!=(0);
   $$not = $35 ^ 1;
   $36 = ($34|0)==($14|0);
   $or$cond = $36 | $$not;
   if ($or$cond) {
    $$016$lcssa = $30;$$lcssa = $35;
    break;
   } else {
    $$01619 = $30;$$020 = $34;
   }
  }
 }
 $37 = ((($$016$lcssa)) + -2|0);
 $38 = $$lcssa ? $37 : 0;
 return ($38|0);
}
function _fourbyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $$not = 0, $$not22 = 0, $$sink21$lcssa = 0, $$sink2124 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($1)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = ((($1)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 | $17;
 $19 = HEAP8[$0>>0]|0;
 $20 = $19&255;
 $21 = $20 << 24;
 $22 = ((($0)) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 16;
 $26 = $25 | $21;
 $27 = ((($0)) + 2|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 8;
 $31 = $26 | $30;
 $32 = ((($0)) + 3|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 | $31;
 $36 = ($33<<24>>24)!=(0);
 $$not22 = $36 ^ 1;
 $37 = ($35|0)==($18|0);
 $or$cond23 = $37 | $$not22;
 if ($or$cond23) {
  $$lcssa = $36;$$sink21$lcssa = $32;
 } else {
  $$sink2124 = $32;$39 = $35;
  while(1) {
   $38 = $39 << 8;
   $40 = ((($$sink2124)) + 1|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = $42 | $38;
   $44 = ($41<<24>>24)!=(0);
   $$not = $44 ^ 1;
   $45 = ($43|0)==($18|0);
   $or$cond = $45 | $$not;
   if ($or$cond) {
    $$lcssa = $44;$$sink21$lcssa = $40;
    break;
   } else {
    $$sink2124 = $40;$39 = $43;
   }
  }
 }
 $46 = ((($$sink21$lcssa)) + -3|0);
 $47 = $$lcssa ? $46 : 0;
 return ($47|0);
}
function _twoway_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa220 = 0, $$0175$ph$ph$lcssa220323 = 0, $$0175$ph$ph256 = 0, $$0179244 = 0, $$0183$ph200$ph255 = 0, $$0183$ph200250 = 0, $$0183$ph262 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa322 = 0, $$0185$ph261 = 0, $$0187$lcssa320321 = 0, $$0187266 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa211 = 0, $$1176$ph$ph235 = 0;
 var $$1180224 = 0, $$1184$ph196$ph234 = 0, $$1184$ph196229 = 0, $$1184$ph241 = 0, $$1186$$0185 = 0, $$1186$$0185$ = 0, $$1186$ph$lcssa = 0, $$1186$ph240 = 0, $$2181 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182223 = 0, $$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond191 = 0, $cond191222 = 0, $cond265 = 0, $div = 0, $div188 = 0, $or$cond = 0, $or$cond190 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $2 = sp + 1024|0;
 $3 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $4 = HEAP8[$1>>0]|0;
 $cond265 = ($4<<24>>24)==(0);
 L1: do {
  if ($cond265) {
   $$0175$ph$ph$lcssa220323 = 1;$$0185$ph$lcssa322 = -1;$$0187$lcssa320321 = 0;$$1176$ph$ph$lcssa211 = 1;$$1186$ph$lcssa = -1;
   label = 27;
  } else {
   $5 = $4&255;
   $$0187266 = 0;$12 = $4;$20 = $5;
   while(1) {
    $8 = (($0) + ($$0187266)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $$3 = 0;
     break L1;
    }
    $11 = $12 & 31;
    $13 = $11&255;
    $14 = 1 << $13;
    $div188 = ($12&255) >>> 5;
    $15 = $div188&255;
    $16 = (($2) + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 | $14;
    HEAP32[$16>>2] = $18;
    $7 = (($$0187266) + 1)|0;
    $19 = (($3) + ($20<<2)|0);
    HEAP32[$19>>2] = $7;
    $21 = (($1) + ($7)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $cond = ($22<<24>>24)==(0);
    if ($cond) {
     break;
    } else {
     $$0187266 = $7;$12 = $22;$20 = $23;
    }
   }
   $6 = ($7>>>0)>(1);
   if ($6) {
    $$0183$ph262 = 0;$$0185$ph261 = -1;$129 = 1;
    L7: while(1) {
     $$0175$ph$ph256 = 1;$$0183$ph200$ph255 = $$0183$ph262;$132 = $129;
     while(1) {
      $$0183$ph200250 = $$0183$ph200$ph255;$131 = $132;
      L11: while(1) {
       $$0179244 = 1;$31 = $131;
       while(1) {
        $27 = (($$0179244) + ($$0185$ph261))|0;
        $28 = (($1) + ($27)|0);
        $29 = HEAP8[$28>>0]|0;
        $30 = (($1) + ($31)|0);
        $32 = HEAP8[$30>>0]|0;
        $33 = ($29<<24>>24)==($32<<24>>24);
        if (!($33)) {
         break L11;
        }
        $34 = ($$0179244|0)==($$0175$ph$ph256|0);
        $25 = (($$0179244) + 1)|0;
        if ($34) {
         break;
        }
        $24 = (($25) + ($$0183$ph200250))|0;
        $26 = ($24>>>0)<($7>>>0);
        if ($26) {
         $$0179244 = $25;$31 = $24;
        } else {
         $$0175$ph$ph$lcssa220 = $$0175$ph$ph256;$$0185$ph$lcssa = $$0185$ph261;
         break L7;
        }
       }
       $35 = (($$0175$ph$ph256) + ($$0183$ph200250))|0;
       $36 = (($35) + 1)|0;
       $37 = ($36>>>0)<($7>>>0);
       if ($37) {
        $$0183$ph200250 = $35;$131 = $36;
       } else {
        $$0175$ph$ph$lcssa220 = $$0175$ph$ph256;$$0185$ph$lcssa = $$0185$ph261;
        break L7;
       }
      }
      $38 = ($29&255)>($32&255);
      $39 = (($31) - ($$0185$ph261))|0;
      if (!($38)) {
       break;
      }
      $43 = (($31) + 1)|0;
      $44 = ($43>>>0)<($7>>>0);
      if ($44) {
       $$0175$ph$ph256 = $39;$$0183$ph200$ph255 = $31;$132 = $43;
      } else {
       $$0175$ph$ph$lcssa220 = $39;$$0185$ph$lcssa = $$0185$ph261;
       break L7;
      }
     }
     $40 = (($$0183$ph200250) + 1)|0;
     $41 = (($$0183$ph200250) + 2)|0;
     $42 = ($41>>>0)<($7>>>0);
     if ($42) {
      $$0183$ph262 = $40;$$0185$ph261 = $$0183$ph200250;$129 = $41;
     } else {
      $$0175$ph$ph$lcssa220 = 1;$$0185$ph$lcssa = $$0183$ph200250;
      break;
     }
    }
    if ($6) {
     $$1184$ph241 = 0;$$1186$ph240 = -1;$130 = 1;
     while(1) {
      $$1176$ph$ph235 = 1;$$1184$ph196$ph234 = $$1184$ph241;$134 = $130;
      while(1) {
       $$1184$ph196229 = $$1184$ph196$ph234;$133 = $134;
       L26: while(1) {
        $$1180224 = 1;$52 = $133;
        while(1) {
         $48 = (($$1180224) + ($$1186$ph240))|0;
         $49 = (($1) + ($48)|0);
         $50 = HEAP8[$49>>0]|0;
         $51 = (($1) + ($52)|0);
         $53 = HEAP8[$51>>0]|0;
         $54 = ($50<<24>>24)==($53<<24>>24);
         if (!($54)) {
          break L26;
         }
         $55 = ($$1180224|0)==($$1176$ph$ph235|0);
         $46 = (($$1180224) + 1)|0;
         if ($55) {
          break;
         }
         $45 = (($46) + ($$1184$ph196229))|0;
         $47 = ($45>>>0)<($7>>>0);
         if ($47) {
          $$1180224 = $46;$52 = $45;
         } else {
          $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $7;$$1176$ph$ph$lcssa211 = $$1176$ph$ph235;$$1186$ph$lcssa = $$1186$ph240;
          label = 27;
          break L1;
         }
        }
        $56 = (($$1176$ph$ph235) + ($$1184$ph196229))|0;
        $57 = (($56) + 1)|0;
        $58 = ($57>>>0)<($7>>>0);
        if ($58) {
         $$1184$ph196229 = $56;$133 = $57;
        } else {
         $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $7;$$1176$ph$ph$lcssa211 = $$1176$ph$ph235;$$1186$ph$lcssa = $$1186$ph240;
         label = 27;
         break L1;
        }
       }
       $59 = ($50&255)<($53&255);
       $60 = (($52) - ($$1186$ph240))|0;
       if (!($59)) {
        break;
       }
       $64 = (($52) + 1)|0;
       $65 = ($64>>>0)<($7>>>0);
       if ($65) {
        $$1176$ph$ph235 = $60;$$1184$ph196$ph234 = $52;$134 = $64;
       } else {
        $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $7;$$1176$ph$ph$lcssa211 = $60;$$1186$ph$lcssa = $$1186$ph240;
        label = 27;
        break L1;
       }
      }
      $61 = (($$1184$ph196229) + 1)|0;
      $62 = (($$1184$ph196229) + 2)|0;
      $63 = ($62>>>0)<($7>>>0);
      if ($63) {
       $$1184$ph241 = $61;$$1186$ph240 = $$1184$ph196229;$130 = $62;
      } else {
       $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $7;$$1176$ph$ph$lcssa211 = 1;$$1186$ph$lcssa = $$1184$ph196229;
       label = 27;
       break;
      }
     }
    } else {
     $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $7;$$1176$ph$ph$lcssa211 = 1;$$1186$ph$lcssa = -1;
     label = 27;
    }
   } else {
    $$0175$ph$ph$lcssa220323 = 1;$$0185$ph$lcssa322 = -1;$$0187$lcssa320321 = $7;$$1176$ph$ph$lcssa211 = 1;$$1186$ph$lcssa = -1;
    label = 27;
   }
  }
 } while(0);
 L36: do {
  if ((label|0) == 27) {
   $66 = (($$1186$ph$lcssa) + 1)|0;
   $67 = (($$0185$ph$lcssa322) + 1)|0;
   $68 = ($66>>>0)>($67>>>0);
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa211 : $$0175$ph$ph$lcssa220323;
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa322;
   $69 = (($1) + ($$1176$$0175)|0);
   $70 = (($$1186$$0185) + 1)|0;
   $71 = (_memcmp($1,$69,$70)|0);
   $72 = ($71|0)==(0);
   if ($72) {
    $77 = (($$0187$lcssa320321) - ($$1176$$0175))|0;
    $$0168 = $77;$$3178 = $$1176$$0175;
   } else {
    $73 = (($$0187$lcssa320321) - ($$1186$$0185))|0;
    $74 = (($73) + -1)|0;
    $75 = ($$1186$$0185>>>0)>($74>>>0);
    $$1186$$0185$ = $75 ? $$1186$$0185 : $74;
    $76 = (($$1186$$0185$) + 1)|0;
    $$0168 = 0;$$3178 = $76;
   }
   $78 = $$0187$lcssa320321 | 63;
   $79 = (($$0187$lcssa320321) + -1)|0;
   $80 = ($$0168|0)!=(0);
   $81 = (($$0187$lcssa320321) - ($$3178))|0;
   $$0166 = $0;$$0169 = 0;$$0170 = $0;
   while(1) {
    $82 = $$0170;
    $83 = $$0166;
    $84 = (($82) - ($83))|0;
    $85 = ($84>>>0)<($$0187$lcssa320321>>>0);
    do {
     if ($85) {
      $86 = (_memchr($$0170,0,$78)|0);
      $87 = ($86|0)==(0|0);
      if ($87) {
       $91 = (($$0170) + ($78)|0);
       $$3173 = $91;
       break;
      } else {
       $88 = $86;
       $89 = (($88) - ($83))|0;
       $90 = ($89>>>0)<($$0187$lcssa320321>>>0);
       if ($90) {
        $$3 = 0;
        break L36;
       } else {
        $$3173 = $86;
        break;
       }
      }
     } else {
      $$3173 = $$0170;
     }
    } while(0);
    $92 = (($$0166) + ($79)|0);
    $93 = HEAP8[$92>>0]|0;
    $div = ($93&255) >>> 5;
    $94 = $div&255;
    $95 = (($2) + ($94<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $93 & 31;
    $98 = $97&255;
    $99 = 1 << $98;
    $100 = $99 & $96;
    $101 = ($100|0)==(0);
    L50: do {
     if ($101) {
      $$0169$be = 0;$$2181$sink = $$0187$lcssa320321;
     } else {
      $102 = $93&255;
      $103 = (($3) + ($102<<2)|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = (($$0187$lcssa320321) - ($104))|0;
      $106 = ($105|0)==(0);
      if (!($106)) {
       $107 = ($$0169|0)!=(0);
       $or$cond = $80 & $107;
       $108 = ($105>>>0)<($$3178>>>0);
       $or$cond190 = $or$cond & $108;
       $$2181 = $or$cond190 ? $81 : $105;
       $$0169$be = 0;$$2181$sink = $$2181;
       break;
      }
      $110 = ($70>>>0)>($$0169>>>0);
      $111 = $110 ? $70 : $$0169;
      $112 = (($1) + ($111)|0);
      $113 = HEAP8[$112>>0]|0;
      $cond191222 = ($113<<24>>24)==(0);
      L55: do {
       if ($cond191222) {
        $$4 = $70;
       } else {
        $$3182223 = $111;$117 = $113;
        while(1) {
         $114 = (($$0166) + ($$3182223)|0);
         $115 = HEAP8[$114>>0]|0;
         $116 = ($117<<24>>24)==($115<<24>>24);
         if (!($116)) {
          break;
         }
         $118 = (($$3182223) + 1)|0;
         $119 = (($1) + ($118)|0);
         $120 = HEAP8[$119>>0]|0;
         $cond191 = ($120<<24>>24)==(0);
         if ($cond191) {
          $$4 = $70;
          break L55;
         } else {
          $$3182223 = $118;$117 = $120;
         }
        }
        $121 = (($$3182223) - ($$1186$$0185))|0;
        $$0169$be = 0;$$2181$sink = $121;
        break L50;
       }
      } while(0);
      while(1) {
       $122 = ($$4>>>0)>($$0169>>>0);
       if (!($122)) {
        $$3 = $$0166;
        break L36;
       }
       $123 = (($$4) + -1)|0;
       $124 = (($1) + ($123)|0);
       $125 = HEAP8[$124>>0]|0;
       $126 = (($$0166) + ($123)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = ($125<<24>>24)==($127<<24>>24);
       if ($128) {
        $$4 = $123;
       } else {
        $$0169$be = $$0168;$$2181$sink = $$3178;
        break;
       }
      }
     }
    } while(0);
    $109 = (($$0166) + ($$2181$sink)|0);
    $$0166 = $109;$$0169 = $$0169$be;$$0170 = $$3173;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $$09 = $2;
 while(1) {
  $4 = (($$09) + -1)|0;
  $5 = ($$09|0)==(0);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = (($0) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==($3<<24>>24);
  if ($8) {
   $$0 = $6;
   break;
  } else {
   $$09 = $4;
  }
 }
 return ($$0|0);
}
function _strspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01925 = 0, $$020 = 0, $$1$lcssa = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $div21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $$020 = $0;
    while(1) {
     $8 = HEAP8[$$020>>0]|0;
     $9 = ($8<<24>>24)==($3<<24>>24);
     $10 = ((($$020)) + 1|0);
     if ($9) {
      $$020 = $10;
     } else {
      break;
     }
    }
    $11 = $$020;
    $12 = $0;
    $13 = (($11) - ($12))|0;
    $$0 = $13;
    break;
   } else {
    $$01925 = $1;$17 = $3;
   }
   while(1) {
    $16 = $17 & 31;
    $18 = $16&255;
    $19 = 1 << $18;
    $div21 = ($17&255) >>> 5;
    $20 = $div21&255;
    $21 = (($2) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 | $19;
    HEAP32[$21>>2] = $23;
    $24 = ((($$01925)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)==(0);
    if ($26) {
     break;
    } else {
     $$01925 = $24;$17 = $25;
    }
   }
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(0);
   L10: do {
    if ($15) {
     $$1$lcssa = $0;
    } else {
     $$123 = $0;$27 = $14;
     while(1) {
      $div = ($27&255) >>> 5;
      $28 = $div&255;
      $29 = (($2) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $27 & 31;
      $32 = $31&255;
      $33 = 1 << $32;
      $34 = $30 & $33;
      $35 = ($34|0)==(0);
      if ($35) {
       $$1$lcssa = $$123;
       break L10;
      }
      $36 = ((($$123)) + 1|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(0);
      if ($38) {
       $$1$lcssa = $36;
       break;
      } else {
       $$123 = $36;$27 = $37;
      }
     }
    }
   } while(0);
   $39 = $$1$lcssa;
   $40 = $0;
   $41 = (($39) - ($40))|0;
   $$0 = $41;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _srand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -1)|0;
 $2 = 21568;
 $3 = $2;
 HEAP32[$3>>2] = $1;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 return;
}
function _fgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   ___unlockfile($0);
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($0);
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 15]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $0&255;
 $6 = $0 & 255;
 if ($4) {
  label = 3;
 } else {
  $7 = (___lockfile($1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($6|0)==($22|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $29;
     HEAP8[$25>>0] = $5;
     $31 = $6;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($1,$0)|0);
    $31 = $30;
   }
   ___unlockfile($1);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($6|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $5;
     $$0 = $6;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19;
 $21 = (($17) - ($20))|0;
 $22 = ($21|0)>(0);
 $23 = ($21>>>0)<($4>>>0);
 $$57 = $23 ? $21 : $4;
 if ($22) {
  $24 = (($4) - ($$57))|0;
  $25 = (($0) + ($$57)|0);
  _memcpy(($0|0),($19|0),($$57|0))|0;
  $26 = (($19) + ($$57)|0);
  HEAP32[$18>>2] = $26;
  $$054$ph = $24;$$056$ph = $25;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $27 = ($$054$ph|0)==(0);
 L7: do {
  if ($27) {
   label = 13;
  } else {
   $28 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $29 = (___toread($3)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     break;
    }
    $31 = HEAP32[$28>>2]|0;
    $32 = (FUNCTION_TABLE_iiii[$31 & 15]($3,$$05659,$$05460)|0);
    $33 = (($32) + 1)|0;
    $34 = ($33>>>0)<(2);
    if ($34) {
     break;
    }
    $39 = (($$05460) - ($32))|0;
    $40 = (($$05659) + ($32)|0);
    $41 = ($39|0)==(0);
    if ($41) {
     label = 13;
     break L7;
    } else {
     $$05460 = $39;$$05659 = $40;
    }
   }
   $35 = ($36|0)==(0);
   if (!($35)) {
    ___unlockfile($3);
   }
   $37 = (($4) - ($$05460))|0;
   $38 = (($37>>>0) / ($1>>>0))&-1;
   $$0 = $38;
  }
 } while(0);
 if ((label|0) == 13) {
  $42 = ($36|0)==(0);
  if ($42) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function _vprintf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[1211]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 return ($3|0);
}
function _strcspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0;
 var $div20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if ($4) {
   label = 3;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 3;
   } else {
    ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
    $$01824 = $1;$13 = $3;
    while(1) {
     $12 = $13 & 31;
     $14 = $12&255;
     $15 = 1 << $14;
     $div20 = ($13&255) >>> 5;
     $16 = $div20&255;
     $17 = (($2) + ($16<<2)|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $18 | $15;
     HEAP32[$17>>2] = $19;
     $20 = ((($$01824)) + 1|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      break;
     } else {
      $$01824 = $20;$13 = $21;
     }
    }
    $10 = HEAP8[$0>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$019$sink = $0;
    } else {
     $$01922 = $0;$23 = $10;
     while(1) {
      $div = ($23&255) >>> 5;
      $24 = $div&255;
      $25 = (($2) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $23 & 31;
      $28 = $27&255;
      $29 = 1 << $28;
      $30 = $26 & $29;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $$019$sink = $$01922;
       break L1;
      }
      $32 = ((($$01922)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$019$sink = $32;
       break;
      } else {
       $$01922 = $32;$23 = $33;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $8 = $3 << 24 >> 24;
  $9 = (___strchrnul($0,$8)|0);
  $$019$sink = $9;
 }
 $35 = $$019$sink;
 $36 = $0;
 $37 = (($35) - ($36))|0;
 STACKTOP = sp;return ($37|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _strtok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$010 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = HEAP32[16186]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $$010 = $3;
   label = 3;
  }
 } else {
  $$010 = $0;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $5 = (_strspn($$010,$1)|0);
   $6 = (($$010) + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    HEAP32[16186] = 0;
    $$0 = 0;
    break;
   }
   $9 = (_strcspn($6,$1)|0);
   $10 = (($6) + ($9)|0);
   HEAP32[16186] = $10;
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    HEAP32[16186] = 0;
    $$0 = $6;
    break;
   } else {
    $13 = ((($10)) + 1|0);
    HEAP32[16186] = $13;
    HEAP8[$10>>0] = 0;
    $$0 = $6;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function runPostSets() {
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _round(d) {
    d = +d;
    return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}

  
function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vd(index,a1) {
  index = index|0;
  a1=+a1;
  FUNCTION_TABLE_vd[index&3](+a1);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&3](a1|0,+a2);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&31](a1|0)|0;
}


function dynCall_viddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viddd[index&3](a1|0,+a2,+a3,+a4);
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&7](a1|0,+a2,+a3);
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&63](a1|0,a2|0,a3|0);
}


function dynCall_vidddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  FUNCTION_TABLE_vidddd[index&3](a1|0,+a2,+a3,+a4,+a5);
}


function dynCall_vdi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  FUNCTION_TABLE_vdi[index&1](+a1,a2|0);
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&3]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6;
  FUNCTION_TABLE_vdddddd[index&1](+a1,+a2,+a3,+a4,+a5,+a6);
}


function dynCall_vdddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_vdddd[index&3](+a1,+a2,+a3,+a4);
}


function dynCall_vdd(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=+a2;
  FUNCTION_TABLE_vdd[index&3](+a1,+a2);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&7]();
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&1](a1|0,a2|0,+a3);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(0);
}
function _emscripten_glUniform4i__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glUniform4i(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glFramebufferTexture2D__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glFramebufferTexture2D(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glShaderBinary__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glShaderBinary(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glDrawElementsInstanced__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glDrawElementsInstanced(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function b1(p0) {
 p0 = +p0; nullFunc_vd(1);
}
function _emscripten_glClearDepth__wrapper(p0) {
 p0 = +p0; _emscripten_glClearDepth(+p0);
}
function _emscripten_glClearDepthf__wrapper(p0) {
 p0 = +p0; _emscripten_glClearDepthf(+p0);
}
function _emscripten_glLineWidth__wrapper(p0) {
 p0 = +p0; _emscripten_glLineWidth(+p0);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(2);
}
function _emscripten_glUniform1f__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; _emscripten_glUniform1f(p0|0,+p1);
}
function _emscripten_glVertexAttrib1f__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; _emscripten_glVertexAttrib1f(p0|0,+p1);
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function _SDL_QuitSubSystem__wrapper(p0) {
 p0 = p0|0; _SDL_QuitSubSystem(p0|0);
}
function _SDL_PauseAudio__wrapper(p0) {
 p0 = p0|0; _SDL_PauseAudio(p0|0);
}
function _emscripten_glDeleteShader__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteShader(p0|0);
}
function _emscripten_glCompileShader__wrapper(p0) {
 p0 = p0|0; _emscripten_glCompileShader(p0|0);
}
function _emscripten_glDeleteProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteProgram(p0|0);
}
function _emscripten_glLinkProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glLinkProgram(p0|0);
}
function _emscripten_glUseProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glUseProgram(p0|0);
}
function _emscripten_glValidateProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glValidateProgram(p0|0);
}
function _emscripten_glDeleteObjectARB__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteObjectARB(p0|0);
}
function _emscripten_glEnableClientState__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnableClientState(p0|0);
}
function _emscripten_glClientActiveTexture__wrapper(p0) {
 p0 = p0|0; _emscripten_glClientActiveTexture(p0|0);
}
function _emscripten_glBindVertexArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glBindVertexArray(p0|0);
}
function _emscripten_glMatrixMode__wrapper(p0) {
 p0 = p0|0; _emscripten_glMatrixMode(p0|0);
}
function _emscripten_glLoadMatrixf__wrapper(p0) {
 p0 = p0|0; _emscripten_glLoadMatrixf(p0|0);
}
function _emscripten_glEnableVertexAttribArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnableVertexAttribArray(p0|0);
}
function _emscripten_glDisableVertexAttribArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glDisableVertexAttribArray(p0|0);
}
function _emscripten_glDepthFunc__wrapper(p0) {
 p0 = p0|0; _emscripten_glDepthFunc(p0|0);
}
function _emscripten_glEnable__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnable(p0|0);
}
function _emscripten_glDisable__wrapper(p0) {
 p0 = p0|0; _emscripten_glDisable(p0|0);
}
function _emscripten_glFrontFace__wrapper(p0) {
 p0 = p0|0; _emscripten_glFrontFace(p0|0);
}
function _emscripten_glCullFace__wrapper(p0) {
 p0 = p0|0; _emscripten_glCullFace(p0|0);
}
function _emscripten_glClear__wrapper(p0) {
 p0 = p0|0; _emscripten_glClear(p0|0);
}
function _emscripten_glClearStencil__wrapper(p0) {
 p0 = p0|0; _emscripten_glClearStencil(p0|0);
}
function _emscripten_glDepthMask__wrapper(p0) {
 p0 = p0|0; _emscripten_glDepthMask(p0|0);
}
function _emscripten_glStencilMask__wrapper(p0) {
 p0 = p0|0; _emscripten_glStencilMask(p0|0);
}
function _emscripten_glGenerateMipmap__wrapper(p0) {
 p0 = p0|0; _emscripten_glGenerateMipmap(p0|0);
}
function _emscripten_glActiveTexture__wrapper(p0) {
 p0 = p0|0; _emscripten_glActiveTexture(p0|0);
}
function _emscripten_glBlendEquation__wrapper(p0) {
 p0 = p0|0; _emscripten_glBlendEquation(p0|0);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function _emscripten_glPixelStorei__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glPixelStorei(p0|0,p1|0);
}
function _emscripten_glGetIntegerv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetIntegerv(p0|0,p1|0);
}
function _emscripten_glGetFloatv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetFloatv(p0|0,p1|0);
}
function _emscripten_glGetBooleanv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetBooleanv(p0|0,p1|0);
}
function _emscripten_glGenTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenTextures(p0|0,p1|0);
}
function _emscripten_glDeleteTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteTextures(p0|0,p1|0);
}
function _emscripten_glBindTexture__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindTexture(p0|0,p1|0);
}
function _emscripten_glGenBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenBuffers(p0|0,p1|0);
}
function _emscripten_glDeleteBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteBuffers(p0|0,p1|0);
}
function _emscripten_glGenRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenRenderbuffers(p0|0,p1|0);
}
function _emscripten_glDeleteRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteRenderbuffers(p0|0,p1|0);
}
function _emscripten_glBindRenderbuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindRenderbuffer(p0|0,p1|0);
}
function _emscripten_glUniform1i__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glUniform1i(p0|0,p1|0);
}
function _emscripten_glBindBuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindBuffer(p0|0,p1|0);
}
function _emscripten_glVertexAttrib1fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib1fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib2fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib2fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib3fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib3fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib4fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib4fv(p0|0,p1|0);
}
function _emscripten_glAttachShader__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glAttachShader(p0|0,p1|0);
}
function _emscripten_glDetachShader__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDetachShader(p0|0,p1|0);
}
function _emscripten_glBindFramebuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindFramebuffer(p0|0,p1|0);
}
function _emscripten_glGenFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenFramebuffers(p0|0,p1|0);
}
function _emscripten_glDeleteFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteFramebuffers(p0|0,p1|0);
}
function _emscripten_glBindProgramARB__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindProgramARB(p0|0,p1|0);
}
function _emscripten_glGetPointerv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetPointerv(p0|0,p1|0);
}
function _emscripten_glGenVertexArrays__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenVertexArrays(p0|0,p1|0);
}
function _emscripten_glDeleteVertexArrays__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteVertexArrays(p0|0,p1|0);
}
function _emscripten_glVertexAttribDivisor__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttribDivisor(p0|0,p1|0);
}
function _emscripten_glBlendFunc__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBlendFunc(p0|0,p1|0);
}
function _emscripten_glBlendEquationSeparate__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBlendEquationSeparate(p0|0,p1|0);
}
function _emscripten_glStencilMaskSeparate__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glStencilMaskSeparate(p0|0,p1|0);
}
function _emscripten_glHint__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glHint(p0|0,p1|0);
}
function _emscripten_glDrawBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDrawBuffers(p0|0,p1|0);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function _SDL_InitSubSystem__wrapper(p0) {
 p0 = p0|0; return _SDL_InitSubSystem(p0|0)|0;
}
function _pthread_mutex_destroy__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_destroy(p0|0)|0;
}
function _pthread_mutex_lock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_lock(p0|0)|0;
}
function _pthread_mutex_unlock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0;
}
function _pthread_cond_destroy__wrapper(p0) {
 p0 = p0|0; return _pthread_cond_destroy(p0|0)|0;
}
function _pthread_cond_signal__wrapper(p0) {
 p0 = p0|0; return _pthread_cond_signal(p0|0)|0;
}
function _emscripten_glGetString__wrapper(p0) {
 p0 = p0|0; return _emscripten_glGetString(p0|0)|0;
}
function _emscripten_glIsTexture__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsTexture(p0|0)|0;
}
function _emscripten_glIsBuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsBuffer(p0|0)|0;
}
function _emscripten_glIsRenderbuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsRenderbuffer(p0|0)|0;
}
function _emscripten_glCreateShader__wrapper(p0) {
 p0 = p0|0; return _emscripten_glCreateShader(p0|0)|0;
}
function _emscripten_glIsShader__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsShader(p0|0)|0;
}
function _emscripten_glIsProgram__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsProgram(p0|0)|0;
}
function _emscripten_glIsFramebuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsFramebuffer(p0|0)|0;
}
function _emscripten_glCheckFramebufferStatus__wrapper(p0) {
 p0 = p0|0; return _emscripten_glCheckFramebufferStatus(p0|0)|0;
}
function _emscripten_glIsEnabled__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsEnabled(p0|0)|0;
}
function b6(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_viddd(6);
}
function _emscripten_glUniform3f__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glUniform3f(p0|0,+p1,+p2,+p3);
}
function _emscripten_glVertexAttrib3f__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glVertexAttrib3f(p0|0,+p1,+p2,+p3);
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(7);
}
function _emscripten_glUniform2f__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glUniform2f(p0|0,+p1,+p2);
}
function _emscripten_glVertexAttrib2f__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glVertexAttrib2f(p0|0,+p1,+p2);
}
function b8(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(9);
}
function _emscripten_glCompressedTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCompressedTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function _emscripten_glCopyTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function _emscripten_glCopyTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function _emscripten_glDrawRangeElements__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glDrawRangeElements(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function _emscripten_glVertexAttribPointer__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glVertexAttribPointer(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function b11(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(11);
}
function _emscripten_glGetTexParameterfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameterfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetTexParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameterfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameterfv(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetBufferParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetBufferParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetRenderbufferParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetRenderbufferParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetUniformfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetUniformiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribPointerv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribPointerv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2i__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2i(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform1iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform3iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform4iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform1fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform3fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform4fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4fv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetShaderiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetShaderiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetProgramiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetProgramiv(p0|0,p1|0,p2|0);
}
function _emscripten_glBindAttribLocation__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glBindAttribLocation(p0|0,p1|0,p2|0);
}
function _emscripten_glGetObjectParameterivARB__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetObjectParameterivARB(p0|0,p1|0,p2|0);
}
function _emscripten_glNormalPointer__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glNormalPointer(p0|0,p1|0,p2|0);
}
function _emscripten_glDrawArrays__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glDrawArrays(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameteri__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteri(p0|0,p1|0,p2|0);
}
function _emscripten_glStencilFunc__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilFunc(p0|0,p1|0,p2|0);
}
function _emscripten_glStencilOp__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilOp(p0|0,p1|0,p2|0);
}
function b12(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_vidddd(12);
}
function _emscripten_glUniform4f__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glUniform4f(p0|0,+p1,+p2,+p3,+p4);
}
function _emscripten_glVertexAttrib4f__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glVertexAttrib4f(p0|0,+p1,+p2,+p3,+p4);
}
function b13(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_vdi(13);
}
function _emscripten_glSampleCoverage__wrapper(p0,p1) {
 p0 = +p0;p1 = p1|0; _emscripten_glSampleCoverage(+p0,p1|0);
}
function b14(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(14);
}
function _emscripten_glReadPixels__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glReadPixels(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function _emscripten_glGetActiveUniform__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveUniform(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function _emscripten_glGetActiveAttrib__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveAttrib(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function b15(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(15);
}
function _emscripten_glCompressedTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glCompressedTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function _emscripten_glTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function _emscripten_glTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function b16(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(16);return 0;
}
function _SDL_OpenAudio__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _SDL_OpenAudio(p0|0,p1|0)|0;
}
function _pthread_join__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _pthread_join(p0|0,p1|0)|0;
}
function _pthread_mutex_init__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _pthread_mutex_init(p0|0,p1|0)|0;
}
function _pthread_cond_init__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _pthread_cond_init(p0|0,p1|0)|0;
}
function _pthread_cond_wait__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _pthread_cond_wait(p0|0,p1|0)|0;
}
function _emscripten_glGetUniformLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _emscripten_glGetUniformLocation(p0|0,p1|0)|0;
}
function _emscripten_glGetAttribLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _emscripten_glGetAttribLocation(p0|0,p1|0)|0;
}
function b17() {
 ; nullFunc_i(17);return 0;
}
function _emscripten_glCreateProgram__wrapper() {
 ; return _emscripten_glCreateProgram()|0;
}
function _emscripten_glGetError__wrapper() {
 ; return _emscripten_glGetError()|0;
}
function b18(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(18);return 0;
}
function _pthread_create__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _pthread_create(p0|0,p1|0,p2|0,p3|0)|0;
}
function b19(p0,p1,p2,p3,p4,p5) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_vdddddd(19);
}
function _emscripten_glFrustum__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; _emscripten_glFrustum(+p0,+p1,+p2,+p3,+p4,+p5);
}
function b20(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_vdddd(20);
}
function _emscripten_glRotatef__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glRotatef(+p0,+p1,+p2,+p3);
}
function _emscripten_glClearColor__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glClearColor(+p0,+p1,+p2,+p3);
}
function _emscripten_glBlendColor__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glBlendColor(+p0,+p1,+p2,+p3);
}
function b21(p0,p1) {
 p0 = +p0;p1 = +p1; nullFunc_vdd(21);
}
function _emscripten_glDepthRange__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glDepthRange(+p0,+p1);
}
function _emscripten_glDepthRangef__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glDepthRangef(+p0,+p1);
}
function _emscripten_glPolygonOffset__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glPolygonOffset(+p0,+p1);
}
function b22() {
 ; nullFunc_v(22);
}
function _SDL_CloseAudio__wrapper() {
 ; _SDL_CloseAudio();
}
function _emscripten_glLoadIdentity__wrapper() {
 ; _emscripten_glLoadIdentity();
}
function _emscripten_glReleaseShaderCompiler__wrapper() {
 ; _emscripten_glReleaseShaderCompiler();
}
function _emscripten_glFinish__wrapper() {
 ; _emscripten_glFinish();
}
function _emscripten_glFlush__wrapper() {
 ; _emscripten_glFlush();
}
function b23(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(23);
}
function _emscripten_glTexParameterf__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; _emscripten_glTexParameterf(p0|0,p1|0,+p2);
}
function b24(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(24);
}
function _emscripten_glBufferData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferData(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glBufferSubData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferSubData(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniform3i__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniform3i(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix2fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix2fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix3fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix3fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix4fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix4fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetAttachedShaders__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetAttachedShaders(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glShaderSource(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderSource(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderPrecisionFormat__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderPrecisionFormat(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetProgramInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetProgramInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glFramebufferRenderbuffer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glFramebufferRenderbuffer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetFramebufferAttachmentParameteriv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetFramebufferAttachmentParameteriv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetInfoLogARB__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetInfoLogARB(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glVertexPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glVertexPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glTexCoordPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glTexCoordPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glColorPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glDrawElements__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawElements(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glDrawArraysInstanced__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawArraysInstanced(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glViewport__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glViewport(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glScissor__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glScissor(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glColorMask__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorMask(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glRenderbufferStorage__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glRenderbufferStorage(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glBlendFuncSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBlendFuncSeparate(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glStencilFuncSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilFuncSeparate(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glStencilOpSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilOpSeparate(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_viiiii = [b0,_KeyCallback,_emscripten_glUniform4i__wrapper,_emscripten_glFramebufferTexture2D__wrapper,_emscripten_glShaderBinary__wrapper,_emscripten_glDrawElementsInstanced__wrapper,b0,b0];
var FUNCTION_TABLE_vd = [b1,_emscripten_glClearDepth__wrapper,_emscripten_glClearDepthf__wrapper,_emscripten_glLineWidth__wrapper];
var FUNCTION_TABLE_vid = [b2,_emscripten_glUniform1f__wrapper,_emscripten_glVertexAttrib1f__wrapper,b2];
var FUNCTION_TABLE_vi = [b3,_SDL_QuitSubSystem__wrapper,_SDL_PauseAudio__wrapper,_emscripten_glDeleteShader__wrapper,_emscripten_glCompileShader__wrapper,_emscripten_glDeleteProgram__wrapper,_emscripten_glLinkProgram__wrapper,_emscripten_glUseProgram__wrapper,_emscripten_glValidateProgram__wrapper,_emscripten_glDeleteObjectARB__wrapper,_emscripten_glEnableClientState__wrapper,_emscripten_glClientActiveTexture__wrapper,_emscripten_glBindVertexArray__wrapper,_emscripten_glMatrixMode__wrapper,_emscripten_glLoadMatrixf__wrapper,_emscripten_glEnableVertexAttribArray__wrapper,_emscripten_glDisableVertexAttribArray__wrapper,_emscripten_glDepthFunc__wrapper,_emscripten_glEnable__wrapper,_emscripten_glDisable__wrapper,_emscripten_glFrontFace__wrapper,_emscripten_glCullFace__wrapper,_emscripten_glClear__wrapper,_emscripten_glClearStencil__wrapper,_emscripten_glDepthMask__wrapper,_emscripten_glStencilMask__wrapper,_emscripten_glGenerateMipmap__wrapper,_emscripten_glActiveTexture__wrapper,_emscripten_glBlendEquation__wrapper,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,_ErrorCallback,_CursorEnterCallback,_CharCallback,_WindowIconifyCallback,_emscripten_glPixelStorei__wrapper,_emscripten_glGetIntegerv__wrapper,_emscripten_glGetFloatv__wrapper,_emscripten_glGetBooleanv__wrapper,_emscripten_glGenTextures__wrapper,_emscripten_glDeleteTextures__wrapper,_emscripten_glBindTexture__wrapper,_emscripten_glGenBuffers__wrapper,_emscripten_glDeleteBuffers__wrapper,_emscripten_glGenRenderbuffers__wrapper,_emscripten_glDeleteRenderbuffers__wrapper,_emscripten_glBindRenderbuffer__wrapper,_emscripten_glUniform1i__wrapper,_emscripten_glBindBuffer__wrapper,_emscripten_glVertexAttrib1fv__wrapper,_emscripten_glVertexAttrib2fv__wrapper,_emscripten_glVertexAttrib3fv__wrapper,_emscripten_glVertexAttrib4fv__wrapper,_emscripten_glAttachShader__wrapper,_emscripten_glDetachShader__wrapper,_emscripten_glBindFramebuffer__wrapper,_emscripten_glGenFramebuffers__wrapper,_emscripten_glDeleteFramebuffers__wrapper,_emscripten_glBindProgramARB__wrapper,_emscripten_glGetPointerv__wrapper,_emscripten_glGenVertexArrays__wrapper,_emscripten_glDeleteVertexArrays__wrapper,_emscripten_glVertexAttribDivisor__wrapper,_emscripten_glBlendFunc__wrapper,_emscripten_glBlendEquationSeparate__wrapper,_emscripten_glStencilMaskSeparate__wrapper,_emscripten_glHint__wrapper,_emscripten_glDrawBuffers__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,___stdio_close,_mal_worker_thread,_SDL_InitSubSystem__wrapper,_pthread_mutex_destroy__wrapper,_pthread_mutex_lock__wrapper,_pthread_mutex_unlock__wrapper,_pthread_cond_destroy__wrapper,_pthread_cond_signal__wrapper,_emscripten_glGetString__wrapper,_emscripten_glIsTexture__wrapper,_emscripten_glIsBuffer__wrapper,_emscripten_glIsRenderbuffer__wrapper,_emscripten_glCreateShader__wrapper,_emscripten_glIsShader__wrapper,_emscripten_glIsProgram__wrapper,_emscripten_glIsFramebuffer__wrapper,_emscripten_glCheckFramebufferStatus__wrapper,_emscripten_glIsEnabled__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_viddd = [b6,_emscripten_glUniform3f__wrapper,_emscripten_glVertexAttrib3f__wrapper,b6];
var FUNCTION_TABLE_vidd = [b7,_MouseCursorPosCallback,_ScrollCallback,_emscripten_glUniform2f__wrapper,_emscripten_glVertexAttrib2f__wrapper,b7,b7,b7];
var FUNCTION_TABLE_iiii = [b8,___stdout_write,___stdio_seek,_EmscriptenFullscreenChangeCallback,_EmscriptenKeyboardCallback,_EmscriptenMouseCallback,_EmscriptenTouchCallback,_EmscriptenGamepadCallback,_OnSendAudioDataToDevice,___stdio_write,___stdio_read,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiiiiii = [b9,_emscripten_glCompressedTexImage2D__wrapper,_emscripten_glCopyTexImage2D__wrapper,_emscripten_glCopyTexSubImage2D__wrapper];
var FUNCTION_TABLE_viiiiii = [b10,_emscripten_glDrawRangeElements__wrapper,_emscripten_glVertexAttribPointer__wrapper,b10];
var FUNCTION_TABLE_viii = [b11,_WindowSizeCallback,_OnLog_MAL,_mal_audio_callback__sdl,_emscripten_glGetTexParameterfv__wrapper,_emscripten_glGetTexParameteriv__wrapper,_emscripten_glTexParameterfv__wrapper,_emscripten_glTexParameteriv__wrapper,_emscripten_glGetBufferParameteriv__wrapper,_emscripten_glGetRenderbufferParameteriv__wrapper,_emscripten_glGetUniformfv__wrapper,_emscripten_glGetUniformiv__wrapper,_emscripten_glGetVertexAttribfv__wrapper,_emscripten_glGetVertexAttribiv__wrapper,_emscripten_glGetVertexAttribPointerv__wrapper,_emscripten_glUniform2i__wrapper,_emscripten_glUniform1iv__wrapper,_emscripten_glUniform2iv__wrapper,_emscripten_glUniform3iv__wrapper,_emscripten_glUniform4iv__wrapper,_emscripten_glUniform1fv__wrapper,_emscripten_glUniform2fv__wrapper,_emscripten_glUniform3fv__wrapper,_emscripten_glUniform4fv__wrapper,_emscripten_glGetShaderiv__wrapper,_emscripten_glGetProgramiv__wrapper,_emscripten_glBindAttribLocation__wrapper,_emscripten_glGetObjectParameterivARB__wrapper,_emscripten_glNormalPointer__wrapper,_emscripten_glDrawArrays__wrapper,_emscripten_glTexParameteri__wrapper,_emscripten_glStencilFunc__wrapper,_emscripten_glStencilOp__wrapper,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_vidddd = [b12,_emscripten_glUniform4f__wrapper,_emscripten_glVertexAttrib4f__wrapper,b12];
var FUNCTION_TABLE_vdi = [b13,_emscripten_glSampleCoverage__wrapper];
var FUNCTION_TABLE_viiiiiii = [b14,_emscripten_glReadPixels__wrapper,_emscripten_glGetActiveUniform__wrapper,_emscripten_glGetActiveAttrib__wrapper];
var FUNCTION_TABLE_viiiiiiiii = [b15,_emscripten_glCompressedTexSubImage2D__wrapper,_emscripten_glTexImage2D__wrapper,_emscripten_glTexSubImage2D__wrapper];
var FUNCTION_TABLE_iii = [b16,_SDL_OpenAudio__wrapper,_pthread_join__wrapper,_pthread_mutex_init__wrapper,_pthread_cond_init__wrapper,_pthread_cond_wait__wrapper,_point_compare,_uint32_compare,_emscripten_glGetUniformLocation__wrapper,_emscripten_glGetAttribLocation__wrapper,b16,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_i = [b17,_emscripten_glCreateProgram__wrapper,_emscripten_glGetError__wrapper,b17];
var FUNCTION_TABLE_iiiii = [b18,_mal_device__on_read_from_client,_mal_device__on_read_from_device,_mal_dsp__src_on_read,_pthread_create__wrapper,_AudioBuffer_OnDSPRead,_mal_convert_frames__on_read,b18];
var FUNCTION_TABLE_vdddddd = [b19,_emscripten_glFrustum__wrapper];
var FUNCTION_TABLE_vdddd = [b20,_emscripten_glRotatef__wrapper,_emscripten_glClearColor__wrapper,_emscripten_glBlendColor__wrapper];
var FUNCTION_TABLE_vdd = [b21,_emscripten_glDepthRange__wrapper,_emscripten_glDepthRangef__wrapper,_emscripten_glPolygonOffset__wrapper];
var FUNCTION_TABLE_v = [b22,_UpdateDrawFrame,_SDL_CloseAudio__wrapper,_emscripten_glLoadIdentity__wrapper,_emscripten_glReleaseShaderCompiler__wrapper,_emscripten_glFinish__wrapper,_emscripten_glFlush__wrapper,b22];
var FUNCTION_TABLE_viid = [b23,_emscripten_glTexParameterf__wrapper];
var FUNCTION_TABLE_viiii = [b24,_MouseButtonCallback,_emscripten_glBufferData__wrapper,_emscripten_glBufferSubData__wrapper,_emscripten_glUniform3i__wrapper,_emscripten_glUniformMatrix2fv__wrapper,_emscripten_glUniformMatrix3fv__wrapper,_emscripten_glUniformMatrix4fv__wrapper,_emscripten_glGetAttachedShaders__wrapper,_emscripten_glShaderSource__wrapper,_emscripten_glGetShaderSource__wrapper,_emscripten_glGetShaderInfoLog__wrapper,_emscripten_glGetShaderPrecisionFormat__wrapper,_emscripten_glGetProgramInfoLog__wrapper,_emscripten_glFramebufferRenderbuffer__wrapper,_emscripten_glGetFramebufferAttachmentParameteriv__wrapper,_emscripten_glGetInfoLogARB__wrapper,_emscripten_glVertexPointer__wrapper,_emscripten_glTexCoordPointer__wrapper,_emscripten_glColorPointer__wrapper,_emscripten_glDrawElements__wrapper,_emscripten_glDrawArraysInstanced__wrapper,_emscripten_glViewport__wrapper,_emscripten_glScissor__wrapper,_emscripten_glColorMask__wrapper,_emscripten_glRenderbufferStorage__wrapper,_emscripten_glBlendFuncSeparate__wrapper,_emscripten_glStencilFuncSeparate__wrapper,_emscripten_glStencilOpSeparate__wrapper,b24,b24,b24];

  return { _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, dynCall_i: dynCall_i, stackSave: stackSave, _i64Subtract: _i64Subtract, ___udivdi3: ___udivdi3, dynCall_vidddd: dynCall_vidddd, setThrew: setThrew, dynCall_viii: dynCall_viii, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, dynCall_iii: dynCall_iii, _memset: _memset, _sbrk: _sbrk, _memcpy: _memcpy, stackAlloc: stackAlloc, dynCall_vd: dynCall_vd, dynCall_vii: dynCall_vii, ___uremdi3: ___uremdi3, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_viiiiiii: dynCall_viiiiiii, getTempRet0: getTempRet0, setTempRet0: setTempRet0, _i64Add: _i64Add, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_iiii: dynCall_iiii, _pthread_mutex_unlock: _pthread_mutex_unlock, _emscripten_get_global_libc: _emscripten_get_global_libc, dynCall_iiiii: dynCall_iiiii, dynCall_viid: dynCall_viid, dynCall_ii: dynCall_ii, _emscripten_GetProcAddress: _emscripten_GetProcAddress, dynCall_viiii: dynCall_viiii, ___errno_location: ___errno_location, dynCall_viiiii: dynCall_viiiii, dynCall_viddd: dynCall_viddd, dynCall_vidd: dynCall_vidd, _free: _free, runPostSets: runPostSets, _round: _round, establishStackSpace: establishStackSpace, _strstr: _strstr, dynCall_viiiiii: dynCall_viiiiii, stackRestore: stackRestore, _malloc: _malloc, _pthread_mutex_lock: _pthread_mutex_lock, dynCall_vdi: dynCall_vdi, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_vdd: dynCall_vdd, dynCall_v: dynCall_v, dynCall_vdddddd: dynCall_vdddddd, dynCall_vdddd: dynCall_vdddd };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real__emscripten_GetProcAddress = asm["_emscripten_GetProcAddress"]; asm["_emscripten_GetProcAddress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_GetProcAddress.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__round = asm["_round"]; asm["_round"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__round.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real__strstr = asm["_strstr"]; asm["_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strstr.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};
var _main = Module["_main"] = asm["_main"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = asm["_emscripten_GetProcAddress"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _round = Module["_round"] = asm["_round"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _strstr = Module["_strstr"] = asm["_strstr"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vd = Module["dynCall_vd"] = asm["dynCall_vd"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_vdi = Module["dynCall_vdi"] = asm["dynCall_vdi"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vdddddd = Module["dynCall_vdddddd"] = asm["dynCall_vdddddd"];
var dynCall_vdddd = Module["dynCall_vdddd"] = asm["dynCall_vdddd"];
var dynCall_vdd = Module["dynCall_vdd"] = asm["dynCall_vdd"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;






/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



