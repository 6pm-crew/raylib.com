
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'koala_seasons.data';
    var REMOTE_PACKAGE_BASE = 'koala_seasons.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'resources', true, true);
Module['FS_createPath']('/resources', 'audio', true, true);
Module['FS_createPath']('/resources', 'graphics', true, true);
Module['FS_createPath']('/resources', 'shaders', true, true);
Module['FS_createPath']('/resources/shaders', 'glsl100', true, true);
Module['FS_createPath']('/resources/shaders', 'glsl330', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_koala_seasons.data');

    };
    Module['addRunDependency']('datafile_koala_seasons.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 1, "start": 0, "crunched": 0, "end": 7449, "filename": "/resources/audio/dash.ogg"}, {"audio": 1, "start": 7449, "crunched": 0, "end": 16241, "filename": "/resources/audio/dingo_die.ogg"}, {"audio": 1, "start": 16241, "crunched": 0, "end": 27868, "filename": "/resources/audio/eat_leaves.ogg"}, {"audio": 0, "start": 27868, "crunched": 0, "end": 876055, "filename": "/resources/audio/jngl.xm"}, {"audio": 1, "start": 876055, "crunched": 0, "end": 884173, "filename": "/resources/audio/jump.ogg"}, {"audio": 1, "start": 884173, "crunched": 0, "end": 890675, "filename": "/resources/audio/owl_die.ogg"}, {"audio": 1, "start": 890675, "crunched": 0, "end": 900020, "filename": "/resources/audio/resin_hit.ogg"}, {"audio": 1, "start": 900020, "crunched": 0, "end": 907144, "filename": "/resources/audio/snake_die.ogg"}, {"audio": 1, "start": 907144, "crunched": 0, "end": 949039, "filename": "/resources/audio/wind_sound.ogg"}, {"audio": 0, "start": 949039, "crunched": 0, "end": 3374346, "filename": "/resources/graphics/atlas01.png"}, {"audio": 0, "start": 3374346, "crunched": 0, "end": 4391961, "filename": "/resources/graphics/atlas02.png"}, {"audio": 0, "start": 4391961, "crunched": 0, "end": 4575008, "filename": "/resources/graphics/mainfont.png"}, {"audio": 0, "start": 4575008, "crunched": 0, "end": 4575571, "filename": "/resources/shaders/glsl100/base.vs"}, {"audio": 0, "start": 4575571, "crunched": 0, "end": 4577580, "filename": "/resources/shaders/glsl100/blend_color.fs"}, {"audio": 0, "start": 4577580, "crunched": 0, "end": 4578114, "filename": "/resources/shaders/glsl330/base.vs"}, {"audio": 0, "start": 4578114, "crunched": 0, "end": 4580160, "filename": "/resources/shaders/glsl330/blend_color.fs"}], "remote_package_size": 4580160, "package_uuid": "00cd7c2c-7d2d-4aa8-8c73-7752fded99be"});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(HEAP32[DYNAMICTOP_PTR>>2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    Module.printErr('Cannot enlarge memory, asked to go up to ' + HEAP32[DYNAMICTOP_PTR>>2] + ' bytes, but the limit is ' + LIMIT + ' bytes!');
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT); // ..., but after that, add smaller increments towards 2GB, which we cannot reach
    }
  }

  var start = Date.now();

  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    Module.printErr('Failed to grow the heap from ' + OLD_TOTAL_MEMORY + ' bytes to ' + TOTAL_MEMORY + ' bytes, not enough memory!');
    if (replacement) {
      Module.printErr('Expected to get back a buffer of size ' + TOTAL_MEMORY + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);
    }
    // restore the state to before this call, we failed
    TOTAL_MEMORY = OLD_TOTAL_MEMORY;
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  if (!Module["usingWasm"]) {
    Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [function($0, $1) { Module.printErr('bad name in getProcAddress: ' + [Pointer_stringify($0), Pointer_stringify($1)]) }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}



STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 342800;
/* global initializers */  __ATINIT__.push();


/* memory initializer */ allocate([255,255,255,255,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,77,33,75,33,0,0,0,0,4,0,0,0,77,46,75,46,0,0,0,0,4,0,0,0,70,76,84,52,0,0,0,0,4,0,0,0,70,76,84,56,0,0,0,0,8,0,0,0,52,67,72,78,0,0,0,0,4,0,0,0,54,67,72,78,0,0,0,0,6,0,0,0,56,67,72,78,0,0,0,0,8,0,0,0,49,48,67,72,0,0,0,0,10,0,0,0,49,50,67,72,0,0,0,0,12,0,0,0,49,52,67,72,0,0,0,0,14,0,0,0,49,54,67,72,0,0,0,0,16,0,0,0,49,56,67,72,0,0,0,0,18,0,0,0,50,48,67,72,0,0,0,0,20,0,0,0,50,50,67,72,0,0,0,0,22,0,0,0,50,52,67,72,0,0,0,0,24,0,0,0,50,54,67,72,0,0,0,0,26,0,0,0,50,56,67,72,0,0,0,0,28,0,0,0,51,48,67,72,0,0,0,0,30,0,0,0,51,50,67,72,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,32,0,0,176,1,0,0,0,0,0,0,0,0,0,32,37,249,142,0,10,2,0,0,128,190,125,95,244,125,31,160,242,43,74,30,9,82,8,0,64,34,65,80,20,4,16,32,32,41,46,18,8,34,8,0,32,34,65,80,20,4,16,32,32,249,16,76,8,250,62,60,16,34,125,222,247,125,16,32,32,161,232,50,8,34,8,0,8,34,5,16,4,69,16,0,240,163,164,50,8,82,8,0,4,34,5,16,4,69,16,32,32,249,226,94,8,2,0,129,2,62,125,31,244,125,16,0,0,32,0,0,176,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,15,0,192,15,224,247,251,125,126,191,95,232,190,80,0,162,8,8,68,232,47,20,10,133,2,129,80,72,160,80,0,162,40,228,73,40,40,20,10,132,2,129,64,72,160,72,0,190,15,2,16,175,235,247,9,132,62,159,216,79,160,71,0,34,136,228,9,161,42,20,10,132,2,129,80,72,160,72,0,34,40,8,4,160,47,20,10,133,2,129,80,72,162,80,0,190,143,0,0,33,32,244,251,125,126,129,95,232,156,208,7,0,128,0,0,224,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,12,0,130,66,191,223,239,247,251,11,5,5,133,66,191,4,72,0,198,66,161,80,40,20,64,8,5,37,133,66,160,8,168,0,170,70,161,80,40,20,64,8,5,37,133,66,144,16,8,0,146,74,161,95,232,247,67,8,5,37,121,126,136,32,8,0,130,82,161,64,40,1,66,8,137,36,133,64,132,64,8,0,130,98,161,64,42,2,66,8,81,36,133,64,130,128,8,0,130,66,191,192,47,244,67,248,33,252,133,126,191,0,9,62,0,0,0,0,4,0,0,0,0,0,0,0,128,1,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,4,0,32,72,65,0,0,0,0,0,8,0,0,4,4,0,4,60,32,0,65,0,0,0,0,0,8,0,0,240,125,223,247,133,239,75,81,190,239,251,190,239,59,81,4,0,69,65,20,133,40,74,73,170,40,138,162,32,8,81,4,240,69,65,244,157,40,74,71,170,40,138,162,224,11,81,4,16,69,65,20,132,40,74,73,170,40,138,162,0,10,145,2,240,125,223,247,133,47,74,209,170,232,251,190,224,123,31,1,0,0,0,0,4,8,64,0,0,0,8,32,0,0,0,0,0,0,0,0,132,15,96,0,0,0,8,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,36,1,15,0,0,0,0,0,0,0,0,0,6,0,0,0,36,1,15,0,0,0,0,0,0,0,128,16,9,162,40,250,36,1,15,0,0,0,0,0,0,0,0,62,1,42,37,66,34,82,15,0,0,0,0,0,0,0,128,138,3,42,34,34,36,41,15,0,0,0,0,0,0,0,128,10,1,42,37,18,36,1,15,0,0,0,0,0,0,0,128,10,1,190,232,251,36,1,15,0,0,0,0,0,0,0,128,190,14,0,0,2,172,1,15,0,0,0,0,0,0,0,128,4,0,0,224,3,0,0,15,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,14,184,67,132,3,58,32,0,128,160,190,2,32,0,0,240,138,32,82,196,2,43,32,4,34,145,2,248,59,0,240,7,142,56,75,228,2,58,32,2,28,138,30,8,42,233,17,4,224,11,66,244,2,130,36,1,20,4,20,232,186,4,209,5,128,184,195,231,10,58,137,0,28,14,60,40,2,9,80,4,128,0,64,196,2,128,68,0,34,132,32,232,2,0,80,4,0,0,64,128,2,0,32,5,0,142,62,8,2,0,16,4,224,3,64,128,66,0,0,7,0,132,0,248,3,0,240,7,0,0,64,128,34,0,0,4,0,0,0,0,0,0,0,0,0,0,64,128,2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,128,0,194,160,72,24,0,0,1,132,33,9,146,2,66,38,4,1,33,81,0,0,127,63,2,66,2,16,41,0,34,20,192,239,247,251,253,126,9,161,223,239,247,187,187,3,18,15,68,40,20,10,133,66,9,129,64,32,16,16,17,1,8,4,68,40,20,10,133,66,127,129,64,32,16,16,17,1,4,130,199,239,247,251,253,126,9,129,207,231,243,17,17,1,50,169,80,40,20,10,133,66,9,161,64,32,16,16,17,1,64,184,80,40,20,10,133,66,121,191,223,239,247,187,187,3,32,160,31,0,0,0,0,0,0,16,0,0,0,0,0,0,112,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,2,8,131,34,1,0,2,8,67,2,1,0,1,1,124,20,4,132,68,1,0,32,4,132,4,128,8,63,130,0,132,66,191,223,239,247,3,126,161,80,40,20,10,33,0,0,132,70,161,80,40,20,138,82,161,80,40,20,122,161,239,3,158,74,161,80,40,20,82,82,161,80,40,20,74,31,8,2,132,82,161,80,40,20,34,74,161,80,40,244,75,161,239,3,132,98,161,80,40,20,82,74,161,80,40,4,122,161,40,2,124,66,191,223,239,247,139,126,191,223,239,247,11,189,239,3,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,32,0,0,4,132,0,34,129,69,17,16,66,1,0,148,66,81,0,0,8,66,81,148,42,162,32,8,165,80,0,0,0,32,0,0,0,0,0,0,0,5,0,0,0,0,8,190,239,251,254,251,190,239,251,20,145,235,251,190,239,251,0,32,8,130,32,10,162,40,138,20,145,40,138,162,40,138,62,190,239,251,254,11,190,239,251,20,145,40,138,162,40,138,0,162,40,138,34,8,130,32,8,20,145,40,138,162,40,138,8,190,239,251,254,251,190,239,251,20,145,47,250,190,239,251,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,33,0,4,0,0,0,0,0,0,0,0,0,0,0,0,130,80,20,2,20,0,0,0,0,0,0,0,0,0,0,16,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,190,40,138,162,40,34,0,0,0,0,0,0,0,0,0,0,170,40,138,162,232,34,0,0,0,0,0,0,0,0,0,0,170,40,138,162,168,34,0,0,0,0,0,0,0,0,0,0,170,40,138,162,232,34,0,0,0,0,0,0,0,0,0,0,190,239,251,190,47,62,0,0,0,0,0,0,0,0,0,0,4,0,0,0,40,32,0,0,0,0,0,0,0,0,0,0,0,0,0,128,15,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,7,0,0,0,1,0,0,0,5,0,0,0,3,0,0,0,7,0,0,0,3,0,0,0,5,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,9,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,5,0,0,0,205,204,12,64,0,0,128,63,0,0,128,63,46,186,232,62,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,27,0,0,0,31,0,0,0,35,0,0,0,43,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,115,0,0,0,131,0,0,0,163,0,0,0,195,0,0,0,227,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,17,0,0,0,25,0,0,0,33,0,0,0,49,0,0,0,65,0,0,0,97,0,0,0,129,0,0,0,193,0,0,0,1,1,0,0,129,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,8,0,0,1,12,0,0,1,16,0,0,1,24,0,0,1,32,0,0,1,48,0,0,1,64,0,0,1,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,128,191,20,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,171,170,42,63,0,0,0,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,192,63,0,0,0,64,0,0,0,0,0,0,128,191,0,0,0,192,0,0,128,192,0,0,0,193,0,0,128,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,64,0,0,128,64,0,0,0,65,0,0,128,65,0,0,0,0,0,0,0,0,172,95,0,0,0,1,0,0,128,0,0,0,86,0,0,0,64,0,0,0,62,180,228,51,9,145,243,51,139,178,1,52,60,32,10,52,35,26,19,52,96,169,28,52,167,215,38,52,75,175,49,52,80,59,61,52,112,135,73,52,35,160,86,52,184,146,100,52,85,109,115,52,136,159,129,52,252,11,138,52,147,4,147,52,105,146,156,52,50,191,166,52,63,149,177,52,147,31,189,52,228,105,201,52,173,128,214,52,54,113,228,52,166,73,243,52,136,140,1,53,192,247,9,53,6,239,18,53,118,123,28,53,192,166,38,53,55,123,49,53,218,3,61,53,94,76,73,53,59,97,86,53,185,79,100,53,252,37,115,53,138,121,129,53,134,227,137,53,124,217,146,53,133,100,156,53,82,142,166,53,51,97,177,53,37,232,188,53,220,46,201,53,206,65,214,53,65,46,228,53,87,2,243,53,143,102,1,54,79,207,9,54,245,195,18,54,152,77,28,54,232,117,38,54,50,71,49,54,116,204,60,54,94,17,73,54,101,34,86,54,206,12,100,54,184,222,114,54,151,83,129,54,28,187,137,54,114,174,146,54,175,54,156,54,129,93,166,54,53,45,177,54,199,176,188,54,228,243,200,54,1,3,214,54,96,235,227,54,30,187,242,54,162,64,1,55,235,166,9,55,241,152,18,55,201,31,28,55,30,69,38,55,61,19,49,55,30,149,60,55,111,214,72,55,162,227,85,55,247,201,99,55,137,151,114,55,175,45,129,55,190,146,137,55,116,131,146,55,230,8,156,55,190,44,166,55,71,249,176,55,121,121,188,55,254,184,200,55,71,196,213,55,146,168,227,55,248,115,242,55,192,26,1,56,147,126,9,56,249,109,18,56,6,242,27,56,98,20,38,56,86,223,48,56,216,93,60,56,146,155,72,56,242,164,85,56,51,135,99,56,110,80,114,56,211,7,129,56,107,106,137,56,130,88,146,56,42,219,155,56,9,252,165,56,104,197,176,56,59,66,188,56,41,126,200,56,160,133,213,56,217,101,227,56,232,44,242,56,233,244,0,57,70,86,9,57,14,67,18,57,81,196,27,57,181,227,37,57,127,171,48,57,162,38,60,57,197,96,72,57,83,102,85,57,131,68,99,57,104,9,114,57,1,226,128,57,36,66,137,57,157,45,146,57,123,173,155,57,99,203,165,57,153,145,176,57,13,11,188,57,102,67,200,57,11,71,213,57,50,35,227,57,237,229,241,57,29,207,0,58,5,46,9,58,48,24,18,58,169,150,27,58,21,179,37,58,183,119,48,58,124,239,59,58,10,38,72,58,199,39,85,58,230,1,99,58,120,194,113,58,59,188,128,58,233,25,137,58,198,2,146,58,219,127,155,58,203,154,165,58,216,93,176,58,239,211,187,58,179,8,200,58,136,8,213,58,159,224,226,58,7,159,241,58,92,169,0,59,208,5,9,59,94,237,17,59,15,105,27,59,132,130,37,59,253,67,48,59,103,184,59,59,97,235,71,59,77,233,84,59,93,191,98,59,156,123,113,59,127,150,128,59,186,241,136,59,249,215,145,59,71,82,155,59,65,106,165,59,39,42,176,59,226,156,187,59,18,206,199,59,23,202,212,59,32,158,226,59,53,88,241,59,166,131,0,60,167,221,8,60,152,194,17,60,130,59,27,60,1,82,37,60,84,16,48,60,97,129,59,60,200,176,71,60,229,170,84,60,232,124,98,60,212,52,113,60,207,112,128,60,150,201,136,60,58,173,145,60,192,36,155,60,197,57,165,60,133,246,175,60,229,101,187,60,130,147,199,60,185,139,212,60,180,91,226,60,121,17,241,60,251,93,0,61,137,181,8,61,223,151,17,61,2,14,27,61,141,33,37,61,185,220,47,61,109,74,59,61,64,118,71,61,145,108,84,61,133,58,98,61,34,238,112,61,42,75,128,61,127,161,136,61,136,130,145,61,72,247,154,61,88,9,165,61,242,194,175,61,248,46,187,61,3,89,199,61,109,77,212,61,92,25,226,61,209,202,240,61,91,56,0,62,119,141,8,62,51,109,17,62,144,224,26,62,39,241,36,62,46,169,47,62,135,19,59,62,202,59,71,62,77,46,84,62,55,248,97,62,132,167,112,62,143,37,128,62,115,121,136,62,226,87,145,62,220,201,154,62,249,216,164,62,109,143,175,62,27,248,186,62,149,30,199,62,51,15,212,62,23,215,225,62,61,132,240,62,198,18,0,63,114,101,8,63,147,66,17,63,43,179,26,63,206,192,36,63,177,117,47,63,178,220,58,63,101,1,71,63,29,240,83,63,251,181,97,63,251,96,112,63,0,0,128,63,79,103,103,83,255,3,0,0,255,255,255,255,255,255,255,255,0,1,0,0,255,255,255,255,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,192,20,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,255,54,5,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,49,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,22,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,7,55,5,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,176,6,80,6,245,5,160,5,77,5,1,5,185,4,117,4,53,4,249,3,193,3,139,3,88,3,0,107,0,101,64,95,0,90,192,84,0,80,128,75,64,71,64,67,128,63,0,60,160,56,128,53,128,50,160,47,0,45,96,42,0,40,192,37,160,35,158,33,192,31,0,30,80,28,192,26,64,25,208,23,128,22,48,21,0,20,224,18,208,17,208,16,224,15,0,15,40,14,96,13,160,12,232,11,64,11,152,10,0,10,112,9,232,8,104,8,240,7,128,7,20,7,176,6,80,6,244,5,160,5,76,5,0,5,184,4,116,4,52,4,248,3,192,3,138,3,88,3,40,3,250,2,208,2,166,2,128,2,92,2,58,2,26,2,252,1,224,1,197,1,172,1,148,1,125,1,104,1,83,1,64,1,46,1,29,1,13,1,254,0,240,0,226,0,214,0,202,0,190,0,180,0,170,0,160,0,151,0,143,0,135,0,127,0,120,0,113,0,107,0,101,0,95,0,90,0,85,0,80,0,75,0,71,0,67,0,63,0,60,0,56,0,53,0,50,0,47,0,45,0,42,0,40,0,37,0,35,0,33,0,31,0,30,0,28,0,27,0,25,0,24,0,22,0,21,0,20,0,19,0,18,0,17,0,16,0,15,0,14,0,13,0,13,0,12,0,11,0,11,0,10,0,9,0,9,0,8,0,8,0,7,0,7,0,0,0,24,0,49,0,74,0,97,0,120,0,141,0,161,0,180,0,197,0,212,0,224,0,235,0,244,0,250,0,253,0,255,0,253,0,250,0,244,0,235,0,224,0,212,0,197,0,180,0,161,0,141,0,120,0,97,0,74,0,49,0,24,0,75,79,65,76,65,32,83,69,65,83,79,78,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,103,114,97,112,104,105,99,115,47,109,97,105,110,102,111,110,116,46,112,110,103,0,114,101,115,111,117,114,99,101,115,47,103,114,97,112,104,105,99,115,47,97,116,108,97,115,48,49,46,112,110,103,0,114,101,115,111,117,114,99,101,115,47,103,114,97,112,104,105,99,115,47,97,116,108,97,115,48,50,46,112,110,103,0,114,101,115,111,117,114,99,101,115,47,115,104,97,100,101,114,115,47,103,108,115,108,49,48,48,47,98,97,115,101,46,118,115,0,114,101,115,111,117,114,99,101,115,47,115,104,97,100,101,114,115,47,103,108,115,108,49,48,48,47,98,108,101,110,100,95,99,111,108,111,114,46,102,115,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,106,117,109,112,46,111,103,103,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,100,97,115,104,46,111,103,103,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,101,97,116,95,108,101,97,118,101,115,46,111,103,103,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,114,101,115,105,110,95,104,105,116,46,111,103,103,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,119,105,110,100,95,115,111,117,110,100,46,111,103,103,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,115,110,97,107,101,95,100,105,101,46,111,103,103,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,100,105,110,103,111,95,100,105,101,46,111,103,103,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,111,119,108,95,100,105,101,46,111,103,103,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,106,110,103,108,46,120,109,0,65,76,80,72,65,32,86,69,82,83,73,79,78,0,65,32,115,105,109,112,108,101,32,97,110,100,32,101,97,115,121,45,116,111,45,117,115,101,32,108,105,98,114,97,114,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,111,32,108,101,97,114,110,32,118,105,100,101,111,103,97,109,101,115,32,112,114,111,103,114,97,109,109,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,114,101,115,115,32,116,111,32,112,108,97,121,0,0,0,80,82,69,83,83,32,84,79,32,80,76,65,89,0,84,72,73,83,32,73,83,78,39,84,32,69,86,69,78,32,77,89,32,70,73,78,65,76,32,70,79,82,77,33,0,0,70,76,79,87,69,82,32,80,79,87,69,82,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,82,69,80,65,82,69,32,70,79,82,32,84,72,69,32,83,85,77,77,69,82,33,0,0,0,0,0,0,0,0,0,72,69,82,69,32,67,79,77,69,83,32,84,72,69,32,70,65,76,76,33,0,0,0,0,0,0,0,0,0,0,0,0,87,73,78,84,69,82,32,73,83,32,67,79,77,73,78,71,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,79,76,76,69,78,32,73,83,32,73,78,32,84,72,69,32,65,73,82,0,0,0,0,0,0,0,0,0,0,0,0,72,65,80,80,89,32,78,69,87,32,89,69,65,82,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,84,39,83,32,82,65,73,78,73,78,71,32,82,65,73,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,69,84,32,73,84,32,83,78,79,87,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,37,48,49,105,0,37,105,0,43,32,37,105,0,84,117,114,110,101,100,32,105,110,116,111,32,97,32,112,114,101,116,116,121,0,0,0,0,0,0,0,0,0,0,0,0,111,119,108,32,112,101,108,108,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,32,100,105,110,103,111,32,116,111,111,107,32,121,111,117,114,32,108,105,102,101,0,0,0,0,0,0,0,0,0,0,75,105,115,115,101,100,32,98,121,32,102,105,114,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,105,103,101,115,116,101,100,32,97,108,105,118,101,32,98,121,32,97,0,0,0,0,0,0,0,0,0,0,0,0,0,98,105,103,32,115,110,97,107,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,73,70,69,32,75,73,76,76,69,68,32,89,79,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,111,117,32,116,117,114,110,32,111,117,116,32,116,111,32,98,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,108,108,101,114,103,105,99,32,116,111,32,98,101,101,32,115,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,75,79,65,76,65,32,73,83,32,68,69,65,68,32,58,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,85,77,77,69,82,0,65,85,84,85,77,78,0,87,73,78,84,69,82,0,83,80,82,73,78,71,0,37,48,51,105,0,37,48,52,105,0,37,115,32,37,105,32,45,32,37,115,32,37,105,0,5,5,4,0,2,3,7,0,3,3,11,0,91,37,115,93,32,114,82,69,83,32,114,97,121,108,105,98,32,114,101,115,111,117,114,99,101,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,91,37,115,93,32,84,104,105,115,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,114,97,121,108,105,98,32,114,101,115,111,117,114,99,101,32,102,105,108,101,0,91,37,115,93,91,73,68,32,37,105,93,32,82,101,115,111,117,114,99,101,32,100,97,116,97,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,37,115,93,91,73,68,32,37,105,93,32,82,101,113,117,101,115,116,101,100,32,114,101,115,111,117,114,99,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,102,111,117,110,100,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,119,104,105,108,101,32,100,101,99,111,109,112,114,101,115,115,105,110,103,32,100,97,116,97,0,68,97,116,97,32,100,101,99,111,109,112,114,101,115,115,105,111,110,32,102,97,105,108,101,100,0,69,120,112,101,99,116,101,100,32,117,110,99,111,109,112,114,101,115,115,101,100,32,115,105,122,101,32,100,111,32,110,111,116,32,109,97,116,99,104,44,32,100,97,116,97,32,109,97,121,32,98,101,32,99,111,114,114,117,112,116,101,100,0,32,45,45,32,69,120,112,101,99,116,101,100,32,117,110,99,111,109,112,114,101,115,115,101,100,32,115,105,122,101,58,32,37,105,0,32,45,45,32,82,101,116,117,114,110,101,100,32,117,110,99,111,109,112,114,101,115,115,101,100,32,115,105,122,101,58,32,37,105,0,68,97,116,97,32,100,101,99,111,109,112,114,101,115,115,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,102,114,111,109,32,37,117,32,98,121,116,101,115,32,116,111,32,37,117,32,98,121,116,101,115,0,73,78,70,79,58,32,0,87,65,82,78,73,78,71,58,32,0,91,84,69,88,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,102,111,110,116,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,84,69,88,32,73,68,32,37,105,93,32,80,97,114,97,109,101,116,101,114,115,58,32,37,105,120,37,105,44,32,37,105,32,109,105,112,115,44,32,102,111,114,109,97,116,32,37,105,0,68,88,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,69,84,67,49,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,69,84,67,50,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,80,86,82,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,83,84,67,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,84,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,91,84,69,88,32,73,68,32,37,105,93,32,84,101,120,116,117,114,101,32,99,114,101,97,116,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,120,37,105,41,0,73,109,97,103,101,32,100,97,116,97,32,102,111,114,109,97,116,32,105,115,32,99,111,109,112,114,101,115,115,101,100,44,32,99,97,110,32,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,0,70,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,112,105,120,101,108,32,100,97,116,97,32,114,101,116,114,105,101,118,97,108,0,91,84,69,88,32,73,68,32,37,105,93,32,85,110,108,111,97,100,101,100,32,116,101,120,116,117,114,101,32,100,97,116,97,32,102,114,111,109,32,86,82,65,77,32,40,71,80,85,41,0,46,116,116,102,0,46,102,110,116,0,91,37,115,93,32,83,112,114,105,116,101,70,111,110,116,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,44,32,117,115,105,110,103,32,100,101,102,97,117,108,116,32,102,111,110,116,0,91,84,69,88,32,73,68,32,37,105,93,32,78,111,32,109,105,112,109,97,112,115,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,84,82,73,76,73,78,69,65,82,32,116,101,120,116,117,114,101,32,102,105,108,116,101,114,105,110,103,0,67,108,97,109,112,32,109,105,114,114,111,114,32,119,114,97,112,32,109,111,100,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,91,84,69,88,32,73,68,32,37,105,93,32,77,97,120,105,109,117,109,32,97,110,105,115,111,116,114,111,112,105,99,32,102,105,108,116,101,114,32,108,101,118,101,108,32,115,117,112,112,111,114,116,101,100,32,105,115,32,37,105,88,0,65,110,105,115,111,116,114,111,112,105,99,32,102,105,108,116,101,114,105,110,103,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,112,114,105,116,101,70,111,110,116,32,100,97,116,97,32,112,97,114,115,101,100,32,99,111,114,114,101,99,116,108,121,32,102,114,111,109,32,105,109,97,103,101,0,73,109,97,103,101,32,102,105,108,101,32,108,111,97,100,101,100,32,99,111,114,114,101,99,116,108,121,32,97,115,32,83,112,114,105,116,101,70,111,110,116,0,91,37,115,93,32,82,101,115,111,117,114,99,101,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,99,111,110,116,97,105,110,32,105,109,97,103,101,32,100,97,116,97,0,46,112,110,103,0,46,103,105,102,0,46,104,100,114,0,91,37,115,93,32,73,109,97,103,101,32,102,105,108,101,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,40,111,110,108,121,32,51,32,99,104,97,110,110,101,108,32,51,50,32,98,105,116,32,102,108,111,97,116,115,41,0,46,100,100,115,0,91,37,115,93,32,73,109,97,103,101,32,102,105,108,101,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,91,37,115,93,32,73,109,97,103,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,120,37,105,41,0,91,37,115,93,32,73,109,97,103,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,68,68,83,32,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,115,101,101,109,32,116,111,32,98,101,32,97,32,118,97,108,105,100,32,105,109,97,103,101,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,104,101,97,100,101,114,32,115,105,122,101,58,32,37,105,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,112,105,120,101,108,32,102,111,114,109,97,116,32,115,105,122,101,58,32,37,105,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,112,105,120,101,108,32,102,111,114,109,97,116,32,102,108,97,103,115,58,32,48,120,37,120,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,102,111,114,109,97,116,58,32,48,120,37,120,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,98,105,116,32,99,111,117,110,116,58,32,48,120,37,120,0,80,105,116,99,104,32,111,114,32,108,105,110,101,97,114,32,115,105,122,101,58,32,37,105,0,117,110,107,110,111,119,110,32,105,109,97,103,101,32,116,121,112,101,0,111,117,116,111,102,109,101,109,0,114,105,46,98,105,116,115,95,112,101,114,95,99,104,97,110,110,101,108,32,61,61,32,49,54,0,46,47,101,120,116,101,114,110,97,108,47,115,116,98,95,105,109,97,103,101,46,104,0,115,116,98,105,95,95,108,111,97,100,95,97,110,100,95,112,111,115,116,112,114,111,99,101,115,115,95,56,98,105,116,0,98,97,100,32,114,101,113,95,99,111,109,112,0,114,101,113,95,99,111,109,112,32,62,61,32,49,32,38,38,32,114,101,113,95,99,111,109,112,32,60,61,32,52,0,115,116,98,105,95,95,99,111,110,118,101,114,116,95,102,111,114,109,97,116,49,54,0,115,116,98,105,95,95,99,111,110,118,101,114,116,95,102,111,114,109,97,116,0,109,117,108,116,105,112,108,101,32,73,72,68,82,0,98,97,100,32,73,72,68,82,32,108,101,110,0,116,111,111,32,108,97,114,103,101,0,49,47,50,47,52,47,56,47,49,54,45,98,105,116,32,111,110,108,121,0,98,97,100,32,99,116,121,112,101,0,98,97,100,32,99,111,109,112,32,109,101,116,104,111,100,0,98,97,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,0,98,97,100,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,0,48,45,112,105,120,101,108,32,105,109,97,103,101,0,102,105,114,115,116,32,110,111,116,32,73,72,68,82,0,105,110,118,97,108,105,100,32,80,76,84,69,0,116,82,78,83,32,97,102,116,101,114,32,73,68,65,84,0,116,82,78,83,32,98,101,102,111,114,101,32,80,76,84,69,0,98,97,100,32,116,82,78,83,32,108,101,110,0,116,82,78,83,32,119,105,116,104,32,97,108,112,104,97,0,0,255,85,0,17,0,0,0,1,110,111,32,80,76,84,69,0,111,117,116,111,102,100,97,116,97,0,110,111,32,73,68,65,84,0,88,88,88,88,32,80,78,71,32,99,104,117,110,107,32,110,111,116,32,107,110,111,119,110,0,115,45,62,105,109,103,95,111,117,116,95,110,32,61,61,32,52,0,115,116,98,105,95,95,100,101,95,105,112,104,111,110,101,0,111,117,116,95,110,32,61,61,32,50,32,124,124,32,111,117,116,95,110,32,61,61,32,52,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,116,114,97,110,115,112,97,114,101,110,99,121], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,116,114,97,110,115,112,97,114,101,110,99,121,49,54,0,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,32,124,124,32,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,43,49,0,115,116,98,105,95,95,99,114,101,97,116,101,95,112,110,103,95,105,109,97,103,101,95,114,97,119,0,110,111,116,32,101,110,111,117,103,104,32,112,105,120,101,108,115,0,105,109,103,95,119,105,100,116,104,95,98,121,116,101,115,32,60,61,32,120,0,0,1,0,5,6,105,109,103,95,110,43,49,32,61,61,32,111,117,116,95,110,0,105,110,118,97,108,105,100,32,102,105,108,116,101,114,0,105,109,103,95,110,32,61,61,32,51,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,98,97,100,32,104,117,102,102,109,97,110,32,99,111,100,101,0,98,97,100,32,100,105,115,116,0,111,117,116,112,117,116,32,98,117,102,102,101,114,32,108,105,109,105,116,0,122,45,62,115,105,122,101,91,98,93,32,61,61,32,115,0,115,116,98,105,95,95,122,104,117,102,102,109,97,110,95,100,101,99,111,100,101,95,115,108,111,119,112,97,116,104,0,98,105,116,115,32,60,61,32,49,54,0,115,116,98,105,95,95,98,105,116,95,114,101,118,101,114,115,101,0,122,45,62,99,111,100,101,95,98,117,102,102,101,114,32,60,32,40,49,85,32,60,60,32,122,45,62,110,117,109,95,98,105,116,115,41,0,115,116,98,105,95,95,102,105,108,108,95,98,105,116,115,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,98,97,100,32,99,111,100,101,108,101,110,103,116,104,115,0,99,32,61,61,32,49,56,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,104,117,102,102,109,97,110,95,99,111,100,101,115,0,98,97,100,32,115,105,122,101,115,0,97,45,62,110,117,109,95,98,105,116,115,32,61,61,32,48,0,115,116,98,105,95,95,112,97,114,115,101,95,117,110,99,111,109,112,114,101,115,115,101,100,95,98,108,111,99,107,0,122,108,105,98,32,99,111,114,114,117,112,116,0,114,101,97,100,32,112,97,115,116,32,98,117,102,102,101,114,0,98,97,100,32,122,108,105,98,32,104,101,97,100,101,114,0,110,111,32,112,114,101,115,101,116,32,100,105,99,116,0,98,97,100,32,99,111,109,112,114,101,115,115,105,111,110,0,98,97,100,32,112,110,103,32,115,105,103,0,35,63,82,65,68,73,65,78,67,69,0,35,63,82,71,66,69,0,110,111,116,32,72,68,82,0,70,79,82,77,65,84,61,51,50,45,98,105,116,95,114,108,101,95,114,103,98,101,0,117,110,115,117,112,112,111,114,116,101,100,32,102,111,114,109,97,116,0,45,89,32,0,117,110,115,117,112,112,111,114,116,101,100,32,100,97,116,97,32,108,97,121,111,117,116,0,43,88,32,0,105,110,118,97,108,105,100,32,100,101,99,111,100,101,100,32,115,99,97,110,108,105,110,101,32,108,101,110,103,116,104,0,99,111,114,114,117,112,116,0,35,63,82,65,68,73,65,78,67,69,10,0,35,63,82,71,66,69,10,0,91,37,115,93,32,70,78,84,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,108,105,110,101,72,101,105,103,104,116,0,108,105,110,101,72,101,105,103,104,116,61,37,105,32,98,97,115,101,61,37,105,32,115,99,97,108,101,87,61,37,105,32,115,99,97,108,101,72,61,37,105,0,91,37,115,93,32,70,111,110,116,32,115,105,122,101,58,32,37,105,0,91,37,115,93,32,70,111,110,116,32,116,101,120,116,117,114,101,32,115,99,97,108,101,58,32,37,105,120,37,105,0,102,105,108,101,0,102,105,108,101,61,34,37,49,50,56,91,94,34,93,34,0,91,37,115,93,32,70,111,110,116,32,116,101,120,116,117,114,101,32,102,105,108,101,110,97,109,101,58,32,37,115,0,99,111,117,110,116,0,99,111,117,110,116,61,37,105,0,91,37,115,93,32,70,111,110,116,32,110,117,109,32,99,104,97,114,115,58,32,37,105,0,91,37,115,93,32,70,111,110,116,32,116,101,120,116,117,114,101,32,108,111,97,100,105,110,103,32,112,97,116,104,58,32,37,115,0,99,104,97,114,32,105,100,61,37,105,32,120,61,37,105,32,121,61,37,105,32,119,105,100,116,104,61,37,105,32,104,101,105,103,104,116,61,37,105,32,120,111,102,102,115,101,116,61,37,105,32,121,111,102,102,115,101,116,61,37,105,32,120,97,100,118,97,110,99,101,61,37,105,0,91,37,115,93,32,83,112,114,105,116,101,70,111,110,116,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,85,110,108,111,97,100,101,100,32,115,112,114,105,116,101,32,102,111,110,116,32,100,97,116,97,0,65,108,112,104,97,32,109,97,115,107,32,109,117,115,116,32,98,101,32,115,97,109,101,32,115,105,122,101,32,97,115,32,105,109,97,103,101,0,65,108,112,104,97,32,109,97,115,107,32,99,97,110,32,110,111,116,32,98,101,32,97,112,112,108,105,101,100,32,116,111,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,32,102,111,114,109,97,116,115,0,73,109,97,103,101,32,102,111,114,109,97,116,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,0,91,37,115,93,32,83,112,114,105,116,101,70,111,110,116,32,99,111,117,108,100,32,110,111,116,32,98,101,32,103,101,110,101,114,97,116,101,100,44,32,117,115,105,110,103,32,100,101,102,97,117,108,116,32,102,111,110,116,0,84,84,70,32,115,112,114,105,116,101,102,111,110,116,32,108,111,97,100,105,110,103,58,32,80,114,101,100,105,99,116,101,100,32,116,101,120,116,117,114,101,32,115,105,122,101,58,32,37,105,120,37,105,0,91,37,115,93,32,84,84,70,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,84,84,70,32,115,112,114,105,116,101,102,111,110,116,32,108,111,97,100,105,110,103,58,32,102,105,114,115,116,32,99,104,97,114,97,99,116,101,114,32,105,115,32,110,111,116,32,83,80,65,67,69,40,51,50,41,32,99,104,97,114,97,99,116,101,114,0,84,84,70,32,115,112,114,105,116,101,102,111,110,116,32,108,111,97,100,105,110,103,58,32,78,111,116,32,97,108,108,32,116,104,101,32,99,104,97,114,97,99,116,101,114,115,32,102,105,116,32,105,110,32,116,104,101,32,102,111,110,116,0,120,43,103,119,32,60,32,112,119,0,46,47,101,120,116,101,114,110,97,108,47,115,116,98,95,116,114,117,101,116,121,112,101,46,104,0,115,116,98,116,116,95,66,97,107,101,70,111,110,116,66,105,116,109,97,112,95,105,110,116,101,114,110,97,108,0,122,45,62,100,105,114,101,99,116,105,111,110,0,115,116,98,116,116,95,95,114,97,115,116,101,114,105,122,101,95,115,111,114,116,101,100,95,101,100,103,101,115,0,122,45,62,101,121,32,62,61,32,115,99,97,110,95,121,95,116,111,112,0,101,45,62,101,121,32,62,61,32,121,95,116,111,112,0,115,116,98,116,116,95,95,102,105,108,108,95,97,99,116,105,118,101,95,101,100,103,101,115,95,110,101,119,0,101,45,62,115,121,32,60,61,32,121,95,98,111,116,116,111,109,32,38,38,32,101,45,62,101,121,32,62,61,32,121,95,116,111,112,0,120,32,62,61,32,48,32,38,38,32,120,32,60,32,108,101,110,0,102,97,98,115,40,97,114,101,97,41,32,60,61,32,49,46,48,49,102,0,121,48,32,60,32,121,49,0,115,116,98,116,116,95,95,104,97,110,100,108,101,95,99,108,105,112,112,101,100,95,101,100,103,101,0,101,45,62,115,121,32,60,61,32,101,45,62,101,121,0,120,49,32,60,61,32,120,43,49,0,120,49,32,62,61,32,120,0,120,49,32,60,61,32,120,0,120,49,32,62,61,32,120,43,49,0,120,49,32,62,61,32,120,32,38,38,32,120,49,32,60,61,32,120,43,49,0,120,48,32,62,61,32,120,32,38,38,32,120,48,32,60,61,32,120,43,49,32,38,38,32,120,49,32,62,61,32,120,32,38,38,32,120,49,32,60,61,32,120,43,49,0,122,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,115,116,98,116,116,95,95,110,101,119,95,97,99,116,105,118,101,0,33,105,110,102,111,45,62,99,102,102,46,115,105,122,101,0,115,116,98,116,116,95,95,71,101,116,71,108,121,102,79,102,102,115,101,116,0,115,116,98,116,116,95,95,99,102,102,95,105,110,116,0,110,32,62,61,32,49,32,38,38,32,110,32,60,61,32,52,0,115,116,98,116,116,95,95,98,117,102,95,103,101,116,0,115,105,122,101,32,60,32,48,120,52,48,48,48,48,48,48,48,0,115,116,98,116,116,95,95,110,101,119,95,98,117,102,0,33,40,111,32,62,32,98,45,62,115,105,122,101,32,124,124,32,111,32,60,32,48,41,0,115,116,98,116,116,95,95,98,117,102,95,115,101,101,107,0,111,102,102,115,105,122,101,32,62,61,32,49,32,38,38,32,111,102,102,115,105,122,101,32,60,61,32,52,0,115,116,98,116,116,95,95,99,102,102,95,103,101,116,95,105,110,100,101,120,0,98,48,32,62,61,32,50,56,0,115,116,98,116,116,95,95,99,102,102,95,115,107,105,112,95,111,112,101,114,97,110,100,0,105,32,62,61,32,48,32,38,38,32,105,32,60,32,99,111,117,110,116,0,115,116,98,116,116,95,95,99,102,102,95,105,110,100,101,120,95,103,101,116,0,111,117,116,112,117,116,95,99,116,120,46,110,117,109,95,118,101,114,116,105,99,101,115,32,61,61,32,99,111,117,110,116,95,99,116,120,46,110,117,109,95,118,101,114,116,105,99,101,115,0,115,116,98,116,116,95,95,71,101,116,71,108,121,112,104,83,104,97,112,101,84,50,0,115,116,98,116,116,95,95,71,101,116,71,108,121,112,104,83,104,97,112,101,84,84,0,115,116,98,116,116,95,70,105,110,100,71,108,121,112,104,73,110,100,101,120,0,117,110,105,99,111,100,101,95,99,111,100,101,112,111,105,110,116,32,60,61,32,116,116,85,83,72,79,82,84,40,100,97,116,97,32,43,32,101,110,100,67,111,117,110,116,32,43,32,50,42,105,116,101,109,41,0,99,109,97,112,0,108,111,99,97,0,104,101,97,100,0,103,108,121,102,0,104,104,101,97,0,104,109,116,120,0,107,101,114,110,0,67,70,70,32,0,109,97,120,112,0,77,65,88,95,76,73,78,69,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,77,65,88,95,84,82,73,65,78,71,76,69,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,77,65,88,95,81,85,65,68,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,83,116,97,99,107,32,66,117,102,102,101,114,32,79,118,101,114,102,108,111,119,32,40,77,65,88,32,37,105,32,77,97,116,114,105,120,41,0,37,50,105,32,70,80,83,0,84,101,120,116,117,114,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,99,114,101,97,116,101,100,0,91,83,72,68,82,32,73,68,32,37,105,93,32,85,110,108,111,97,100,101,100,32,115,104,97,100,101,114,32,112,114,111,103,114,97,109,32,100,97,116,97,0,69,120,116,101,110,100,101,100,32,77,111,100,117,108,101,58,32,0,67,111,117,108,100,32,110,111,116,32,111,112,101,110,32,105,110,112,117,116,32,102,105,108,101,0,102,115,101,101,107,40,41,32,102,97,105,108,101,100,0,102,114,101,97,100,40,41,32,102,97,105,108,101,100,0,99,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,99,111,110,116,101,120,116,58,32,109,111,100,117,108,101,32,105,115,32,110,111,116,32,115,97,110,101,10,0,99,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,99,111,110,116,101,120,116,58,32,109,97,108,108,111,99,32,102,97,105,108,101,100,10,0,99,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,99,111,110,116,101,120,116,58,32,117,110,107,110,111,119,110,32,101,114,114,111,114,10,0,77,46,75,46,0,65,117,100,105,111,32,100,101,118,105,99,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,67,111,117,108,100,32,110,111,116,32,105,110,105,116,105,97,108,105,122,101,32,97,117,100,105,111,32,99,111,110,116,101,120,116,0,65,117,100,105,111,32,100,101,118,105,99,101,32,97,110,100,32,99,111,110,116,101,120,116,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,58,32,37,115,0,67,111,117,108,100,32,110,111,116,32,103,101,116,32,99,117,114,114,101,110,116,32,97,117,100,105,111,32,99,111,110,116,101,120,116,32,102,111,114,32,99,108,111,115,105,110,103,0,65,117,100,105,111,32,100,101,118,105,99,101,32,99,108,111,115,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,46,119,97,118,0,46,111,103,103,0,46,114,114,101,115,0,91,37,115,93,32,82,101,115,111,117,114,99,101,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,99,111,110,116,97,105,110,32,119,97,118,101,32,100,97,116,97,0,91,37,115,93,32,65,117,100,105,111,32,102,105,108,101,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,44,32,105,116,32,99,97,110,39,116,32,98,101,32,108,111,97,100,101,100,0,91,37,115,93,32,79,71,71,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,91,37,115,93,32,79,103,103,32,97,117,100,105,111,32,108,101,110,103,116,104,32,105,115,32,108,97,114,103,101,114,32,116,104,97,110,32,49,48,32,115,101,99,111,110,100,115,32,40,37,102,41,44,32,116,104,97,116,39,115,32,97,32,98,105,103,32,102,105,108,101,32,105,110,32,109,101,109,111,114,121,44,32,99,111,110,115,105,100,101,114,32,109,117,115,105,99,32,115,116,114,101,97,109,105,110,103,0,91,37,115,93,32,83,97,109,112,108,101,115,32,111,98,116,97,105,110,101,100,58,32,37,105,0,77,111,110,111,0,83,116,101,114,101,111,0,91,37,115,93,32,79,71,71,32,102,105,108,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,32,72,122,44,32,37,105,32,98,105,116,44,32,37,115,41,0,48,0,101,120,116,101,114,110,97,108,47,115,116,98,95,118,111,114,98,105,115,46,99,0,103,101,116,95,119,105,110,100,111,119,0,102,45,62,97,108,108,111,99,46,97,108,108,111,99,95,98,117,102,102,101,114,95,108,101,110,103,116,104,95,105,110,95,98,121,116,101,115,32,61,61,32,102,45,62,116,101,109,112,95,111,102,102,115,101,116,0,118,111,114,98,105,115,95,100,101,99,111,100,101,95,112,97,99,107,101,116,95,114,101,115,116,0,102,45,62,98,121,116,101,115,95,105,110,95,115,101,103,32,62,32,48,0,103,101,116,56,95,112,97,99,107,101,116,95,114,97,119,0,102,45,62,98,121,116,101,115,95,105,110,95,115,101,103,32,61,61,32,48,0,110,101,120,116,95,115,101,103,109,101,110,116,0,40,110,32,38,32,51,41,32,61,61,32,48,0,105,109,100,99,116,95,115,116,101,112,51,95,105,116,101,114,48,95,108,111,111,112,0,122,32,60,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,115,116,97,114,116,0,33,99,45,62,115,112,97,114,115,101,32,124,124,32,122,32,60,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,100,101,105,110,116,101,114,108,101,97,118,101,95,114,101,112,101,97,116,0,33,99,45,62,115,112,97,114,115,101,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,115,99,97,108,97,114,95,114,97,119,0,0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,118,111,114,98,105,115,95,100,101,99,111,100,101,95,105,110,105,116,105,97,108,0,98,117,102,95,99,32,61,61,32,50,0,99,111,110,118,101,114,116,95,99,104,97,110,110,101,108,115,95,115,104,111,114,116,95,105,110,116,101,114,108,101,97,118,101,100,0,0,0,0,0,0,0,7,0,0,0,0,0,3,5,0,0,0,0,3,7,5,0,0,0,3,5,3,5,0,0,3,7,5,3,5,0,3,7,5,3,5,7,114,98,0,102,45,62,116,101,109,112,95,111,102,102,115,101,116,32,61,61,32,102,45,62,97,108,108,111,99,46,97,108,108,111,99,95,98,117,102,102,101,114,95,108,101,110,103,116,104,95,105,110,95,98,121,116,101,115,0,115,116,97,114,116,95,100,101,99,111,100,101,114,0,112,111,119,40,40,102,108,111,97,116,41,32,114,43,49,44,32,100,105,109,41,32,62,32,101,110,116,114,105,101,115,0,108,111,111,107,117,112,49,95,118,97,108,117,101,115,0,40,105,110,116,41,32,102,108,111,111,114,40,112,111,119,40,40,102,108,111,97,116,41,32,114,44,32,100,105,109,41,41,32,60,61,32,101,110,116,114,105,101,115,0,107,32,61,61,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,99,111,109,112,117,116,101,95,115,111,114,116,101,100,95,104,117,102,102,109,97,110,0,99,45,62,115,111,114,116,101,100,95,99,111,100,101,119,111,114,100,115,91,120,93,32,61,61,32,99,111,100,101,0,108,101,110,32,33,61,32,78,79,95,67,79,68,69,0,105,110,99,108,117,100,101,95,105,110,95,115,111,114,116,0,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,32,61,61,32,48,0,99,111,109,112,117,116,101,95,99,111,100,101,119,111,114,100,115,0,122,32,62,61,32,48,32,38,38,32,122,32,60,32,51,50,0,108,101,110,91,105,93,32,62,61,32,48,32,38,38,32,108,101,110,91,105,93,32,60,32,51,50,0,97,118,97,105,108,97,98,108,101,91,121,93,32,61,61,32,48,0,118,111,114,98,105,115,91,37,115,93,32,87,65,86,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,82,73,70,70,0,87,65,86,69,0,91,37,115,93,32,73,110,118,97,108,105,100,32,82,73,70,70,32,111,114,32,87,65,86,69,32,72,101,97,100,101,114,0,91,37,115,93,32,73,110,118,97,108,105,100,32,87,97,118,101,32,102,111,114,109,97,116,0,91,37,115,93,32,73,110,118,97,108,105,100,32,100,97,116,97,32,104,101,97,100,101,114,0,91,37,115,93,32,87,65,86,32,115,97,109,112,108,101,32,115,105,122,101,32,40,37,105,98,105,116,41,32,110,111,116,32,115,117,112,112,111,114,116,101,100,44,32,99,111,110,118,101,114,116,101,100,32,116,111,32,49,54,98,105,116,0,91,37,115,93,32,87,65,86,32,99,104,97,110,110,101,108,115,32,110,117,109,98,101,114,32,40,37,105,41,32,110,111,116,32,115,117,112,112,111,114,116,101,100,44,32,99,111,110,118,101,114,116,101,100,32,116,111,32,50,32,99,104,97,110,110,101,108,115,0,91,37,115,93,32,87,65,86,32,102,105,108,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,32,72,122,44,32,37,105,32,98,105,116,44,32,37,115,41,0,85,110,108,111,97,100,101,100,32,119,97,118,101,32,100,97,116,97,32,102,114,111,109,32,82,65,77,0,87,97,118,101,32,115,97,109,112,108,101,32,115,105,122,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,58,32,37,105,0,87,97,118,101,32,110,117,109,98,101,114,32,111,102,32,99,104,97,110,110,101,108,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,58,32,37,105,0,91,83,78,68,32,73,68,32,37,105,93,91,66,85,70,82,32,73,68,32,37,105,93,32,83,111,117,110,100,32,100,97,116,97,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,32,72,122,44,32,37,105,32,98,105,116,44,32,37,115,41,0,91,83,78,68,32,73,68,32,37,105,93,91,66,85,70,82,32,73,68,32,37,105,93,32,85,110,108,111,97,100,101,100,32,115,111,117,110,100,32,100,97,116,97,32,102,114,111,109,32,82,65,77,0,91,37,115,93,32,79,71,71,32,97,117,100,105,111,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,91,37,115,93,32,70,76,65,67,32,116,111,116,97,108,32,115,97,109,112,108,101,115,58,32,37,105,0,91,37,115,93,32,79,71,71,32,115,97,109,112,108,101,32,114,97,116,101,58,32,37,105,0,91,37,115,93,32,79,71,71,32,99,104,97,110,110,101,108,115,58,32,37,105,0,91,37,115,93,32,79,71,71,32,109,101,109,111,114,121,32,114,101,113,117,105,114,101,100,58,32,37,105,0,46,120,109,0,91,37,115,93,32,88,77,32,110,117,109,98,101,114,32,111,102,32,115,97,109,112,108,101,115,58,32,37,105,0,91,37,115,93,32,88,77,32,116,114,97,99,107,32,108,101,110,103,116,104,58,32,37,49,49,46,54,102,32,115,101,99,0,91,37,115,93,32,88,77,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,46,109,111,100,0,91,37,115,93,32,77,79,68,32,110,117,109,98,101,114,32,111,102,32,115,97,109,112,108,101,115,58,32,37,105,0,91,37,115,93,32,77,79,68,32,116,114,97,99,107,32,108,101,110,103,116,104,58,32,37,49,49,46,54,102,32,115,101,99,0,91,37,115,93,32,77,79,68,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,73,110,105,116,32,97,117,100,105,111,32,115,116,114,101,97,109,58,32,78,117,109,98,101,114,32,111,102,32,99,104,97,110,110,101,108,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,58,32,37,105,0,73,110,105,116,32,97,117,100,105,111,32,115,116,114,101,97,109,58,32,83,97,109,112,108,101,32,115,105,122,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,58,32,37,105,0,91,65,85,68,32,73,68,32,37,105,93,32,65,117,100,105,111,32,115,116,114,101,97,109,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,32,72,122,44,32,37,105,32,98,105,116,44,32,37,115,41,0,91,65,85,68,32,73,68,32,37,105,93,32,85,110,108,111,97,100,101,100,32,97,117,100,105,111,32,115,116,114,101,97,109,32,100,97,116,97,0,91,65,85,68,32,73,68,32,37,105,93,32,65,117,100,105,111,32,98,117,102,102,101,114,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,117,110,113,117,101,117,105,110,103,0,73,110,105,116,105,97,108,105,122,105,110,103,32,114,97,121,108,105,98,32,40,118,49,46,56,46,48,41,0,35,99,97,110,118,97,115,0,84,97,114,103,101,116,32,116,105,109,101,32,112,101,114,32,102,114,97,109,101,58,32,37,48,50,46,48,51,102,32,109,105,108,108,105,115,101,99,111,110,100,115,0,69,115,99,97,112,101,0,67,97,110,118,97,115,32,115,99,97,108,101,100,32,116,111,32,102,117,108,108,115,99,114,101,101,110,46,32,69,108,101,109,101,110,116,83,105,122,101,58,32,40,37,105,120,37,105,41,44,32,83,99,114,101,101,110,83,105,122,101,40,37,105,120,37,105,41,0,67,97,110,118,97,115,32,115,99,97,108,101,100,32,116,111,32,119,105,110,100,111,119,101,100,46,32,69,108,101,109,101,110,116,83,105,122,101,58,32,40,37,105,120,37,105,41,44,32,83,99,114,101,101,110,83,105,122,101,40,37,105,120,37,105,41,0,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,71,76,70,87,0,84,114,121,105,110,103,32,116,111,32,101,110,97,98,108,101,32,77,83,65,65,32,120,52,0,67,108,111,115,101,115,116,32,102,117,108,108,115,99,114,101,101,110,32,118,105,100,101,111,109,111,100,101,58,32,37,105,32,120,32,37,105,0,71,76,70,87,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,87,105,110,100,111,119,0,68,105,115,112,108,97,121,32,100,101,118,105,99,101,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,82,101,110,100,101,114,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,83,99,114,101,101,110,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,86,105,101,119,112,111,114,116,32,111,102,102,115,101,116,115,58,32,37,105,44,32,37,105,0,84,114,121,105,110,103,32,116,111,32,101,110,97,98,108,101,32,86,83,89,78,67,0,71,80,85,58,32,86,101,110,100,111,114,58,32,32,32,37,115,0,71,80,85,58,32,82,101,110,100,101,114,101,114,58,32,37,115,0,71,80,85,58,32,86,101,114,115,105,111,110,58,32,32,37,115,0,71,80,85,58,32,71,76,83,76,58,32,32,32,32,32,37,115,0,32,0,78,117,109,98,101,114,32,111,102,32,115,117,112,112,111,114,116,101,100,32,101,120,116,101,110,115,105,111,110,115,58,32,37,105,0,71,76,95,79,69,83,95,118,101,114,116,101,120,95,97,114,114,97,121,95,111,98,106,101,99,116,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,79,69,83,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,79,69,83,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,79,69,83,0,71,76,95,79,69,83,95,116,101,120,116,117,114,101,95,110,112,111,116,0,79,69,83,95,116,101,120,116,117,114,101,95,102,108,111,97,116,0,71,76,95,69,88,84,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,115,51,116,99,0,71,76,95,87,69,66,71,76,95,99,111,109,112,114,101,115,115,101,100,95,116,101,120,116,117,114,101,95,115,51,116,99,0,71,76,95,87,69,66,75,73,84,95,87,69,66,71,76,95,99,111,109,112,114,101,115,115,101,100,95,116,101,120,116,117,114,101,95,115,51,116,99,0,71,76,95,79,69,83,95,99,111,109,112,114,101,115,115,101,100,95,69,84,67,49,95,82,71,66,56,95,116,101,120,116,117,114,101,0,71,76,95,87,69,66,71,76,95,99,111,109,112,114,101,115,115,101,100,95,116,101,120,116,117,114,101,95,101,116,99,49,0,71,76,95,65,82,66,95,69,83,51,95,99,111,109,112,97,116,105,98,105,108,105,116,121,0,71,76,95,73,77,71,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,112,118,114,116,99,0,71,76,95,75,72,82,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,97,115,116,99,95,104,100,114,0,71,76,95,69,88,84,95,116,101,120,116,117,114,101,95,102,105,108,116,101,114,95,97,110,105,115,111,116,114,111,112,105,99,0,71,76,95,69,88,84,95,116,101,120,116,117,114,101,95,109,105,114,114,111,114,95,99,108,97,109,112,0,91,69,88,84,69,78,83,73,79,78,93,32,86,65,79,32,101,120,116,101,110,115,105,111,110,32,100,101,116,101,99,116,101,100,44,32,86,65,79,32,102,117,110,99,116,105,111,110,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,69,88,84,69,78,83,73,79,78,93,32,86,65,79,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,102,111,117,110,100,44,32,86,65,79,32,117,115,97,103,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,78,80,79,84,32,116,101,120,116,117,114,101,115,32,101,120,116,101,110,115,105,111,110,32,100,101,116,101,99,116,101,100,44,32,102,117,108,108,32,78,80,79,84,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,78,80,79,84,32,116,101,120,116,117,114,101,115,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,102,111,117,110,100,44,32,108,105,109,105,116,101,100,32,78,80,79,84,32,115,117,112,112,111,114,116,32,40,110,111,45,109,105,112,109,97,112,115,44,32,110,111,45,114,101,112,101,97,116,41,0,91,69,88,84,69,78,83,73,79,78,93,32,68,88,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,69,84,67,49,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,69,84,67,50,47,69,65,67,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,80,86,82,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,65,83,84,67,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,65,110,105,115,111,116,114,111,112,105,99,32,116,101,120,116,117,114,101,115,32,102,105,108,116,101,114,105,110,103,32,115,117,112,112,111,114,116,101,100,32,40,109,97,120,58,32,37,46,48,102,88,41,0,91,69,88,84,69,78,83,73,79,78,93,32,67,108,97,109,112,32,109,105,114,114,111,114,32,119,114,97,112,32,116,101,120,116,117,114,101,32,109,111,100,101,32,115,117,112,112,111,114,116,101,100,0,91,84,69,88,32,73,68,32,37,105,93,32,66,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,66,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,79,112,101,110,71,76,32,100,101,102,97,117,108,116,32,115,116,97,116,101,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,67,80,85,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,108,105,110,101,115,44,32,116,114,105,97,110,103,108,101,115,44,32,113,117,97,100,115,41,0,91,86,65,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,65,79,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,108,105,110,101,115,41,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,108,105,110,101,115,41,0,91,86,65,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,65,79,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,116,114,105,97,110,103,108,101,115,41,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,116,114,105,97,110,103,108,101,115,41,0,91,86,65,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,65,79,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,113,117,97,100,115,41,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,113,117,97,100,115,41,0,35,118,101,114,115,105,111,110,32,49,48,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,118,101,114,116,101,120,80,111,115,105,116,105,111,110,59,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,118,101,114,116,101,120,84,101,120,67,111,111,114,100,59,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,118,101,114,116,101,120,67,111,108,111,114,59,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,50,32,102,114,97,103,84,101,120,67,111,111,114,100,59,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,52,32,102,114,97,103,67,111,108,111,114,59,32,32,32,32,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,109,97,116,52,32,109,118,112,59,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,118,111,105,100,32,109,97,105,110,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,123,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,32,32,32,32,102,114,97,103,84,101,120,67,111,111,114,100,32,61,32,118,101,114,116,101,120,84,101,120,67,111,111,114,100,59,32,10,32,32,32,32,102,114,97,103,67,111,108,111,114,32,61,32,118,101,114,116,101,120,67,111,108,111,114,59,32,32,32,32,32,32,32,10,32,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,109,118,112,42,118,101,99,52,40,118,101,114,116,101,120,80,111,115,105,116,105,111,110,44,32,49,46,48,41,59,32,10,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,0,35,118,101,114,115,105,111,110,32,49,48,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,32,32,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,50,32,102,114,97,103,84,101,120,67,111,111,114,100,59,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,52,32,102,114,97,103,67,111,108,111,114,59,32,32,32,32,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,48,59,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,118,101,99,52,32,99,111,108,68,105,102,102,117,115,101,59,32,32,32,32,32,32,32,32,32,32,32,10,118,111,105,100,32,109,97,105,110,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,123,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,32,32,32,32,118,101,99,52,32,116,101,120,101,108,67,111,108,111,114,32,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,48,44,32,102,114,97,103,84,101,120,67,111,111,114,100,41,59,32,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,116,101,120,101,108,67,111,108,111,114,42,99,111,108,68,105,102,102,117,115,101,42,102,114,97,103,67,111,108,111,114,59,32,32,32,32,32,32,10,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,0,91,83,72,68,82,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,115,104,97,100,101,114,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,118,101,114,116,101,120,80,111,115,105,116,105,111,110,0,118,101,114,116,101,120,84,101,120,67,111,111,114,100,0,118,101,114,116,101,120,67,111,108,111,114,0,109,118,112,0,99,111,108,68,105,102,102,117,115,101,0,116,101,120,116,117,114,101,48,0,91,83,72,68,82,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,115,104,97,100,101,114,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,91,86,83,72,68,82,32,73,68,32,37,105,93,32,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,118,101,114,116,101,120,32,115,104,97,100,101,114,46,46,46,0,37,115,0,91,86,83,72,68,82,32,73,68,32,37,105,93,32,86,101,114,116,101,120,32,115,104,97,100,101,114,32,99,111,109,112,105,108,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,70,83,72,68,82,32,73,68,32,37,105,93,32,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,102,114,97,103,109,101,110,116,32,115,104,97,100,101,114,46,46,46,0,91,70,83,72,68,82,32,73,68,32,37,105,93,32,70,114,97,103,109,101,110,116,32,115,104,97,100,101,114,32,99,111,109,112,105,108,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,118,101,114,116,101,120,78,111,114,109,97,108,0,118,101,114,116,101,120,84,97,110,103,101,110,116,0,118,101,114,116,101,120,84,101,120,67,111,111,114,100,50,0,91,83,72,68,82,32,73,68,32,37,105,93,32,70,97,105,108,101,100,32,116,111,32,108,105,110,107,32,115,104,97,100,101,114,32,112,114,111,103,114,97,109,46,46,46,0,91,83,72,68,82,32,73,68,32,37,105,93,32,83,104,97,100,101,114,32,112,114,111,103,114,97,109,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,68,79,87,78,83,67,65,76,73,78,71,58,32,82,101,113,117,105,114,101,100,32,115,99,114,101,101,110,32,115,105,122,101,32,40,37,105,120,37,105,41,32,105,115,32,98,105,103,103,101,114,32,116,104,97,110,32,100,105,115,112,108,97,121,32,115,105,122,101,32,40,37,105,120,37,105,41,0,68,111,119,110,115,99,97,108,101,32,109,97,116,114,105,120,32,103,101,110,101,114,97,116,101,100,44,32,99,111,110,116,101,110,116,32,119,105,108,108,32,98,101,32,114,101,110,100,101,114,101,100,32,97,116,58,32,37,105,32,120,32,37,105,0,85,80,83,67,65,76,73,78,71,58,32,82,101,113,117,105,114,101,100,32,115,99,114,101,101,110,32,115,105,122,101,58,32,37,105,32,120,32,37,105,32,45,62,32,68,105,115,112,108,97,121,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,91,71,76,70,87,51,32,69,114,114,111,114,93,32,67,111,100,101,58,32,37,105,32,68,101,99,114,105,112,116,105,111,110,58,32,37,115,0,87,105,110,100,111,119,32,99,108,111,115,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,84,69,88,32,73,68,32,37,105,93,32,85,110,108,111,97,100,101,100,32,116,101,120,116,117,114,101,32,100,97,116,97,32,40,98,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,41,32,102,114,111,109,32,86,82,65,77,0,82,101,113,117,105,114,101,100,32,116,111,117,99,104,32,112,111,105,110,116,32,111,117,116,32,111,102,32,114,97,110,103,101,32,40,77,97,120,32,116,111,117,99,104,32,112,111,105,110,116,115,58,32,37,105,41,0,114,116,0,91,37,115,93,32,84,101,120,116,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,67,117,115,116,111,109,32,115,104,97,100,101,114,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,91,83,72,68,82,32,73,68,32,37,105,93,32,65,99,116,105,118,101,32,117,110,105,102,111,114,109,32,91,37,115,93,32,115,101,116,32,97,116,32,108,111,99,97,116,105,111,110,58,32,37,105,0,112,114,111,106,101,99,116,105,111,110,0,118,105,101,119,0,116,101,120,116,117,114,101,49,0,116,101,120,116,117,114,101,50,0,69,88,84,0,65,82,66,0,79,69,83,0,65,78,71,76,69,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,0,103,108,85,115,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,103,108,85,115,101,80,114,111,103,114,97,109,0,103,108,67,114,101,97,116,101,83,104], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([97,100,101,114,79,98,106,101,99,116,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,0,103,108,65,116,116,97,99,104,79,98,106,101,99,116,0,103,108,65,116,116,97,99,104,83,104,97,100,101,114,0,103,108,68,101,116,97,99,104,79,98,106,101,99,116,0,103,108,68,101,116,97,99,104,83,104,97,100,101,114,0,103,108,80,105,120,101,108,83,116,111,114,101,105,0,103,108,71,101,116,83,116,114,105,110,103,0,103,108,71,101,116,73,110,116,101,103,101,114,118,0,103,108,71,101,116,70,108,111,97,116,118,0,103,108,71,101,116,66,111,111,108,101,97,110,118,0,103,108,71,101,110,84,101,120,116,117,114,101,115,0,103,108,68,101,108,101,116,101,84,101,120,116,117,114,101,115,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,73,109,97,103,101,50,68,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,84,101,120,73,109,97,103,101,50,68,0,103,108,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,82,101,97,100,80,105,120,101,108,115,0,103,108,66,105,110,100,84,101,120,116,117,114,101,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,84,101,120,116,117,114,101,0,103,108,71,101,110,66,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,66,117,102,102,101,114,115,0,103,108,71,101,116,66,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,103,108,66,117,102,102,101,114,68,97,116,97,0,103,108,66,117,102,102,101,114,83,117,98,68,97,116,97,0,103,108,73,115,66,117,102,102,101,114,0,103,108,71,101,110,82,101,110,100,101,114,98,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,82,101,110,100,101,114,98,117,102,102,101,114,115,0,103,108,66,105,110,100,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,71,101,116,82,101,110,100,101,114,98,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,71,101,116,85,110,105,102,111,114,109,102,118,0,103,108,71,101,116,85,110,105,102,111,114,109,105,118,0,103,108,71,101,116,85,110,105,102,111,114,109,76,111,99,97,116,105,111,110,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,102,118,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,105,118,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,118,0,103,108,71,101,116,65,99,116,105,118,101,85,110,105,102,111,114,109,0,103,108,85,110,105,102,111,114,109,49,102,0,103,108,85,110,105,102,111,114,109,50,102,0,103,108,85,110,105,102,111,114,109,51,102,0,103,108,85,110,105,102,111,114,109,52,102,0,103,108,85,110,105,102,111,114,109,49,105,0,103,108,85,110,105,102,111,114,109,50,105,0,103,108,85,110,105,102,111,114,109,51,105,0,103,108,85,110,105,102,111,114,109,52,105,0,103,108,85,110,105,102,111,114,109,49,105,118,0,103,108,85,110,105,102,111,114,109,50,105,118,0,103,108,85,110,105,102,111,114,109,51,105,118,0,103,108,85,110,105,102,111,114,109,52,105,118,0,103,108,85,110,105,102,111,114,109,49,102,118,0,103,108,85,110,105,102,111,114,109,50,102,118,0,103,108,85,110,105,102,111,114,109,51,102,118,0,103,108,85,110,105,102,111,114,109,52,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,50,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,51,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,52,102,118,0,103,108,66,105,110,100,66,117,102,102,101,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,118,0,103,108,71,101,116,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,103,108,71,101,116,65,99,116,105,118,101,65,116,116,114,105,98,0,103,108,68,101,108,101,116,101,83,104,97,100,101,114,0,103,108,71,101,116,65,116,116,97,99,104,101,100,83,104,97,100,101,114,115,0,103,108,83,104,97,100,101,114,83,111,117,114,99,101,0,103,108,71,101,116,83,104,97,100,101,114,83,111,117,114,99,101,0,103,108,67,111,109,112,105,108,101,83,104,97,100,101,114,0,103,108,71,101,116,83,104,97,100,101,114,73,110,102,111,76,111,103,0,103,108,71,101,116,83,104,97,100,101,114,105,118,0,103,108,71,101,116,80,114,111,103,114,97,109,105,118,0,103,108,73,115,83,104,97,100,101,114,0,103,108,68,101,108,101,116,101,80,114,111,103,114,97,109,0,103,108,71,101,116,83,104,97,100,101,114,80,114,101,99,105,115,105,111,110,70,111,114,109,97,116,0,103,108,76,105,110,107,80,114,111,103,114,97,109,0,103,108,71,101,116,80,114,111,103,114,97,109,73,110,102,111,76,111,103,0,103,108,86,97,108,105,100,97,116,101,80,114,111,103,114,97,109,0,103,108,73,115,80,114,111,103,114,97,109,0,103,108,66,105,110,100,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,103,108,66,105,110,100,70,114,97,109,101,98,117,102,102,101,114,0,103,108,71,101,110,70,114,97,109,101,98,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,70,114,97,109,101,98,117,102,102,101,114,115,0,103,108,70,114,97,109,101,98,117,102,102,101,114,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,70,114,97,109,101,98,117,102,102,101,114,84,101,120,116,117,114,101,50,68,0,103,108,71,101,116,70,114,97,109,101,98,117,102,102,101,114,65,116,116,97,99,104,109,101,110,116,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,70,114,97,109,101,98,117,102,102,101,114,0,103,108,68,101,108,101,116,101,79,98,106,101,99,116,0,103,108,71,101,116,79,98,106,101,99,116,80,97,114,97,109,101,116,101,114,105,118,0,103,108,71,101,116,73,110,102,111,76,111,103,0,103,108,66,105,110,100,80,114,111,103,114,97,109,0,103,108,71,101,116,80,111,105,110,116,101,114,118,0,103,108,68,114,97,119,82,97,110,103,101,69,108,101,109,101,110,116,115,0,103,108,69,110,97,98,108,101,67,108,105,101,110,116,83,116,97,116,101,0,103,108,86,101,114,116,101,120,80,111,105,110,116,101,114,0,103,108,84,101,120,67,111,111,114,100,80,111,105,110,116,101,114,0,103,108,78,111,114,109,97,108,80,111,105,110,116,101,114,0,103,108,67,111,108,111,114,80,111,105,110,116,101,114,0,103,108,67,108,105,101,110,116,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,0,103,108,77,97,116,114,105,120,77,111,100,101,0,103,108,76,111,97,100,73,100,101,110,116,105,116,121,0,103,108,76,111,97,100,77,97,116,114,105,120,102,0,103,108,70,114,117,115,116,117,109,0,103,108,82,111,116,97,116,101,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,0,103,108,69,110,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,103,108,68,105,115,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,103,108,68,114,97,119,65,114,114,97,121,115,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,0,103,108,83,104,97,100,101,114,66,105,110,97,114,121,0,103,108,82,101,108,101,97,115,101,83,104,97,100,101,114,67,111,109,112,105,108,101,114,0,103,108,71,101,116,69,114,114,111,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,68,105,118,105,115,111,114,0,103,108,68,114,97,119,65,114,114,97,121,115,73,110,115,116,97,110,99,101,100,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,73,110,115,116,97,110,99,101,100,0,103,108,70,105,110,105,115,104,0,103,108,70,108,117,115,104,0,103,108,67,108,101,97,114,68,101,112,116,104,0,103,108,67,108,101,97,114,68,101,112,116,104,102,0,103,108,68,101,112,116,104,70,117,110,99,0,103,108,69,110,97,98,108,101,0,103,108,68,105,115,97,98,108,101,0,103,108,70,114,111,110,116,70,97,99,101,0,103,108,67,117,108,108,70,97,99,101,0,103,108,67,108,101,97,114,0,103,108,76,105,110,101,87,105,100,116,104,0,103,108,67,108,101,97,114,83,116,101,110,99,105,108,0,103,108,68,101,112,116,104,77,97,115,107,0,103,108,83,116,101,110,99,105,108,77,97,115,107,0,103,108,67,104,101,99,107,70,114,97,109,101,98,117,102,102,101,114,83,116,97,116,117,115,0,103,108,71,101,110,101,114,97,116,101,77,105,112,109,97,112,0,103,108,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,0,103,108,73,115,69,110,97,98,108,101,100,0,103,108,66,108,101,110,100,70,117,110,99,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,83,101,112,97,114,97,116,101,0,103,108,68,101,112,116,104,82,97,110,103,101,0,103,108,68,101,112,116,104,82,97,110,103,101,102,0,103,108,83,116,101,110,99,105,108,77,97,115,107,83,101,112,97,114,97,116,101,0,103,108,72,105,110,116,0,103,108,80,111,108,121,103,111,110,79,102,102,115,101,116,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,0,103,108,83,97,109,112,108,101,67,111,118,101,114,97,103,101,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,0,103,108,83,116,101,110,99,105,108,70,117,110,99,0,103,108,83,116,101,110,99,105,108,79,112,0,103,108,86,105,101,119,112,111,114,116,0,103,108,67,108,101,97,114,67,111,108,111,114,0,103,108,83,99,105,115,115,111,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,0,103,108,67,111,108,111,114,77,97,115,107,0,103,108,82,101,110,100,101,114,98,117,102,102,101,114,83,116,111,114,97,103,101,0,103,108,66,108,101,110,100,70,117,110,99,83,101,112,97,114,97,116,101,0,103,108,66,108,101,110,100,67,111,108,111,114,0,103,108,83,116,101,110,99,105,108,70,117,110,99,83,101,112,97,114,97,116,101,0,103,108,83,116,101,110,99,105,108,79,112,83,101,112,97,114,97,116,101,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,0,103,108,67,111,112,121,84,101,120,73,109,97,103,101,50,68,0,103,108,67,111,112,121,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,68,114,97,119,66,117,102,102,101,114,115,0,77,111,100,117,108,101,46,112,114,105,110,116,69,114,114,40,39,98,97,100,32,110,97,109,101,32,105,110,32,103,101,116,80,114,111,99,65,100,100,114,101,115,115,58,32,39,32,43,32,91,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,41,44,32,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,49,41,93,41,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,110,97,110,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},tempFixedLengthArray:[],packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        // For functions such as glDrawBuffers, glInvalidateFramebuffer and glInvalidateSubFramebuffer that need to pass a short array to the WebGL API,
        // create a set of short fixed-length arrays to avoid having to generate any garbage when calling those functions.
        for (var i = 0; i < 32; i++) {
          GL.tempFixedLengthArray.push(new Array(i));
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes['majorVersion'] === 'undefined' && typeof webGLContextAttributes['minorVersion'] === 'undefined') {
          webGLContextAttributes['majorVersion'] = 1;
          webGLContextAttributes['minorVersion'] = 0;
        }
  
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes['majorVersion'] == 1 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes['majorVersion'] == 2 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes['majorVersion'],
          GLctx: ctx
        };
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes['enableExtensionsByDefault']) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod", "EXT_color_buffer_float"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc != null)
          {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }

  
  
  function _emscripten_get_now() { abort() }
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              window.postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else window.postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        Module['dynCall_vii'](GLFW.active.charFunc, GLFW.active.id, charCode);
      },onKeyChanged:function (keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        Module['dynCall_viiiii'](GLFW.active.keyFunc, GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function (event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function (event) {
        GLFW.refreshJoysticks();
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function (event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        Module['dynCall_vidd'](GLFW.active.cursorPosFunc, GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function (event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Module['dynCall_vii'](GLFW.active.cursorEnterFunc, GLFW.active.id, 1);
      },onMouseleave:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Module['dynCall_vii'](GLFW.active.cursorEnterFunc, GLFW.active.id, 0);
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        Module['dynCall_viiii'](GLFW.active.mouseButtonFunc, GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        Module['dynCall_vidd'](GLFW.active.scrollFunc, GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function (width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requestiong fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        Module['dynCall_viii'](GLFW.active.windowSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        Module['dynCall_viii'](GLFW.active.framebufferSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },requestFullscreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },requestFullScreen:function () {
        Module.printErr('GLFW.requestFullScreen() is deprecated. Please call GLFW.requestFullscreen instead.');
        GLFW.requestFullScreen = function() {
          return GLFW.requestFullscreen();
        }
        return GLFW.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        Module.printErr('GLFW.cancelFullScreen() is deprecated. Please call GLFW.exitFullscreen instead.');
        GLFW.cancelFullScreen = function() {
          return GLFW.exitFullscreen();
        }
        return GLFW.exitFullscreen();
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function (cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function () {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setDropCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.dropFunc = cbfun;
      },onDrop:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = allocate(new Array(event.dataTransfer.files.length*4), 'i8*', ALLOC_NORMAL);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = function(e) {
            if (reader.readyState != 2) { // not DONE
              ++written;
              console.log('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data), { encoding: 'binary' });
            if (++written === count) {
              Module['dynCall_viii'](GLFW.active.dropFunc, GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocate(intArrayFromString(path), 'i8', ALLOC_NORMAL);
          filenamesArray.push(filename);
          setValue(filenames + i*4, filename, 'i8*');
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
       
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },onClickRequestPointerLock:function (e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function (winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullscreen();
          } else {
            GLFW.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        Module['dynCall_viii'](win.windowSizeFunc, win.id, width, height);
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS 
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          Module['dynCall_vi'](win.windowCloseFunc, win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwGetVideoModes(monitor, count) {
      setValue(count, 0, 'i32');
      return 0;
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glUniform3iv(location, count, value) {
  
  
      GLctx.uniform3iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*12)>>2));
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glFrustum() {
  Module['printErr']('missing function: emscripten_glFrustum'); abort(-1);
  }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  
  var AL={contexts:[],currentContext:null,alcErr:0,stringCache:{},alcStringCache:{},QUEUE_INTERVAL:25,QUEUE_LOOKAHEAD:100,newSrcId:1,updateSources:function updateSources(context) {
        // If we are animating using the requestAnimationFrame method, then the main loop does not run when in the background.
        // To give a perfect glitch-free audio stop when switching from foreground to background, we need to avoid updating
        // audio altogether when in the background, so detect that case and kill audio buffer streaming if so.
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && document['visibilityState'] != 'visible') return;
  
        for (var srcId in context.src) {
          AL.updateSource(context.src[srcId]);
        }
      },updateSource:function updateSource(src) {
        // See comment on updateSources above.
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && document['visibilityState'] != 'visible') return;
  
        if (src.state !== 0x1012 /* AL_PLAYING */) {
          return;
        }
  
        var currentTime = src.context.ctx.currentTime;
        var startTime = src.bufferPosition;
  
        for (var i = src.buffersPlayed; i < src.queue.length; i++) {
          var entry = src.queue[i];
  
          var startOffset = (startTime - currentTime) / src.playbackRate;
          var endTime;
          if (entry.src) endTime = startTime + entry.src.duration; // n.b. entry.src.duration already factors in playbackRate, so no divide by src.playbackRate on it.
          else endTime = startTime + entry.buffer.duration / src.playbackRate;
  
          // Clean up old buffers.
          if (currentTime >= endTime) {
            // Update our location in the queue.
            src.bufferPosition = endTime;
            src.buffersPlayed = i + 1;
  
            // Stop / restart the source when we hit the end.
            if (src.buffersPlayed >= src.queue.length) {
              if (src.loop) {
                AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
              } else {
                AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
              }
            }
          }
          // Process all buffers that'll be played before the next tick.
          else if (startOffset < (AL.QUEUE_LOOKAHEAD / 1000) && !entry.src) {
            // If the start offset is negative, we need to offset the actual buffer.
            var offset = Math.abs(Math.min(startOffset, 0));
  
            entry.src = src.context.ctx.createBufferSource();
            entry.src.buffer = entry.buffer;
            entry.src.connect(src.gain);
            if (src.playbackRate != 1.0) entry.src.playbackRate.value = src.playbackRate;
            entry.src.duration = entry.buffer.duration / src.playbackRate;
            if (typeof(entry.src.start) !== 'undefined') {
              entry.src.start(startTime, offset);
            } else if (typeof(entry.src.noteOn) !== 'undefined') {
              entry.src.noteOn(startTime);
            }
          }
  
          startTime = endTime;
        }
      },setSourceState:function setSourceState(src, state) {
        if (state === 0x1012 /* AL_PLAYING */) {
          if (src.state !== 0x1013 /* AL_PAUSED */) {
            src.state = 0x1012 /* AL_PLAYING */;
            // Reset our position.
            src.bufferPosition = AL.currentContext.ctx.currentTime;
            src.buffersPlayed = 0;
          } else {
            src.state = 0x1012 /* AL_PLAYING */;
            // Use the current offset from src.bufferPosition to resume at the correct point.
            src.bufferPosition = AL.currentContext.ctx.currentTime - src.bufferPosition;
          }
          AL.stopSourceQueue(src);
          AL.updateSource(src);
        } else if (state === 0x1013 /* AL_PAUSED */) {
          if (src.state === 0x1012 /* AL_PLAYING */) {
            src.state = 0x1013 /* AL_PAUSED */;
            // Store off the current offset to restore with on resume.
            src.bufferPosition = AL.currentContext.ctx.currentTime - src.bufferPosition;
            AL.stopSourceQueue(src);
          }
        } else if (state === 0x1014 /* AL_STOPPED */) {
          if (src.state !== 0x1011 /* AL_INITIAL */) {
            src.state = 0x1014 /* AL_STOPPED */;
            src.buffersPlayed = src.queue.length;
            AL.stopSourceQueue(src);
          }
        } else if (state == 0x1011 /* AL_INITIAL */) {
          if (src.state !== 0x1011 /* AL_INITIAL */) {
            src.state = 0x1011 /* AL_INITIAL */;
            src.bufferPosition = 0;
            src.buffersPlayed = 0;
          }
        }
      },stopSourceQueue:function stopSourceQueue(src) {
        for (var i = 0; i < src.queue.length; i++) {
          var entry = src.queue[i];
          if (entry.src) {
            entry.src.stop(0);
            entry.src = null;
          }
        }
      }};function _alcGetCurrentContext() {
      for (var i = 0; i < AL.contexts.length; ++i) {
        if (AL.contexts[i] == AL.currentContext) {
          return i + 1;
        }
      }
      return 0;
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,lastGamepadState:null,lastGamepadStateFrame:null,numGamepadsConnected:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,staticInit:function () {
        if (typeof window !== 'undefined') {
          window.addEventListener("gamepadconnected", function() { ++JSEvents.numGamepadsConnected; });
          window.addEventListener("gamepaddisconnected", function() { --JSEvents.numGamepadsConnected; });
          
          // Chromium does not fire the gamepadconnected event on reload, so we need to get the number of gamepads here as a workaround.
          // See https://bugs.chromium.org/p/chromium/issues/detail?id=502824
          var firstState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null);
          if (firstState) {
            JSEvents.numGamepadsConnected = firstState.length;
          }
        }
      },registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
        __ATEXIT__.push(function() {
            for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
              JSEvents._removeHandler(i);
            }
           });
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        if (target) {
          if (typeof target == "number") {
            target = Pointer_stringify(target);
          }
          if (target == '#window') return window;
          else if (target == '#document') return document;
          else if (target == '#screen') return window.screen;
          else if (target == '#canvas') return Module['canvas'];
  
          if (typeof target == 'string') return document.getElementById(target);
          else return target;
        } else {
          // The sensible target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          return window;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
          JSEvents.keyEvent = _malloc( 164 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
          stringToUTF8(e.key ? e.key : "", JSEvents.keyEvent + 0, 32);
          stringToUTF8(e.code ? e.code : "", JSEvents.keyEvent + 32, 32);
          HEAP32[(((JSEvents.keyEvent)+(64))>>2)]=e.location;
          HEAP32[(((JSEvents.keyEvent)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((JSEvents.keyEvent)+(72))>>2)]=e.shiftKey;
          HEAP32[(((JSEvents.keyEvent)+(76))>>2)]=e.altKey;
          HEAP32[(((JSEvents.keyEvent)+(80))>>2)]=e.metaKey;
          HEAP32[(((JSEvents.keyEvent)+(84))>>2)]=e.repeat;
          stringToUTF8(e.locale ? e.locale : "", JSEvents.keyEvent + 88, 32);
          stringToUTF8(e.char ? e.char : "", JSEvents.keyEvent + 120, 32);
          HEAP32[(((JSEvents.keyEvent)+(152))>>2)]=e.charCode;
          HEAP32[(((JSEvents.keyEvent)+(156))>>2)]=e.keyCode;
          HEAP32[(((JSEvents.keyEvent)+(160))>>2)]=e.which;
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.keyEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;        
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/kripken/emscripten/pull/4997
        // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
        if (e.type !== 'wheel' && e.type !== 'mousewheel') {
          JSEvents.previousScreenX = e.screenX;
          JSEvents.previousScreenY = e.screenY;
        }
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
          JSEvents.mouseEvent = _malloc( 72 );
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.mouseEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
          JSEvents.wheelEvent = _malloc( 104 );
        }
        target = JSEvents.findEventTarget(target);
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=e["deltaMode"];
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"] || 0;
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-(e["wheelDeltaY"] ? e["wheelDeltaY"] : e["wheelDelta"]) /* 1. Invert to unify direction with the DOM Level 3 wheel event. 2. MSIE does not provide wheelDeltaY, so wheelDelta is used as a fallback. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
          JSEvents.uiEvent = _malloc( 36 );
        }
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
          HEAP32[((JSEvents.uiEvent)>>2)]=e.detail;
          HEAP32[(((JSEvents.uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((JSEvents.uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((JSEvents.uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((JSEvents.uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((JSEvents.uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((JSEvents.uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((JSEvents.uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((JSEvents.uiEvent)+(32))>>2)]=scrollPos[1];
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.uiEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
          JSEvents.focusEvent = _malloc( 256 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
          stringToUTF8(nodeName, JSEvents.focusEvent + 0, 128);
          stringToUTF8(id, JSEvents.focusEvent + 128, 128);
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.focusEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
          JSEvents.deviceOrientationEvent = _malloc( 40 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(8))>>3)]=e.alpha;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(16))>>3)]=e.beta;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(24))>>3)]=e.gamma;
          HEAP32[(((JSEvents.deviceOrientationEvent)+(32))>>2)]=e.absolute;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceOrientationEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
          JSEvents.deviceMotionEvent = _malloc( 80 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceMotionEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceMotionEvent)+(8))>>3)]=e.acceleration.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(16))>>3)]=e.acceleration.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(24))>>3)]=e.acceleration.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(32))>>3)]=e.accelerationIncludingGravity.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(40))>>3)]=e.accelerationIncludingGravity.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(48))>>3)]=e.accelerationIncludingGravity.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(56))>>3)]=e.rotationRate.alpha;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(64))>>3)]=e.rotationRate.beta;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(72))>>3)]=e.rotationRate.gamma;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceMotionEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
          JSEvents.orientationChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.orientationChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        stringToUTF8(nodeName, eventStruct + 8, 128);
        stringToUTF8(id, eventStruct + 136, 128);
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
          JSEvents.fullscreenChangeEvent = _malloc( 280 );
        }
  
        if (!target) {
          target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.fullscreenChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          target.width = cssWidth * dpiScale;
          target.height = cssHeight * dpiScale;
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Module['dynCall_iiii'](strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        stringToUTF8(nodeName, eventStruct + 4, 128);
        stringToUTF8(id, eventStruct + 132, 128);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
          JSEvents.pointerlockChangeEvent = _malloc( 260 );
        }
  
        if (!target) {
          target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.pointerlockChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerPointerlockErrorEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = document; // Pointer lock events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
          JSEvents.visibilityChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.visibilityChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
          JSEvents.touchEvent = _malloc( 1684 );
        }
  
        target = JSEvents.findEventTarget(target);
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
          
          var ptr = JSEvents.touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((JSEvents.touchEvent)>>2)]=numTouches;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.touchEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        stringToUTF8(e.id, eventStruct + 1304, 64);
        stringToUTF8(e.mapping, eventStruct + 1368, 64);
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
          JSEvents.gamepadEvent = _malloc( 1432 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.gamepadEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var confirmationMessage = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
          JSEvents.batteryEvent = _malloc( 32 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.batteryEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = Module['canvas'];
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};function __emscripten_sample_gamepad_data() {
      // Polling gamepads generates garbage, so don't do it when we know there are no gamepads connected.
      if (!JSEvents.numGamepadsConnected) return;
  
      // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
      if (Browser.mainLoop.currentFrameNumber !== JSEvents.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
        JSEvents.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
        JSEvents.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
      }
    }function _emscripten_get_gamepad_status(index, gamepadState) {
      __emscripten_sample_gamepad_data();
      if (!JSEvents.lastGamepadState) return -1;
  
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      JSEvents.fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    }

  var _llvm_pow_f64=Math_pow;

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _alcGetString(device, param) {
      if (AL.alcStringCache[param]) return AL.alcStringCache[param];
      var ret;
      switch (param) {
      case 0 /* ALC_NO_ERROR */:
        ret = 'No Error';
        break;
      case 0xA001 /* ALC_INVALID_DEVICE */:
        ret = 'Invalid Device';
        break;
      case 0xA002 /* ALC_INVALID_CONTEXT */:
        ret = 'Invalid Context';
        break;
      case 0xA003 /* ALC_INVALID_ENUM */:
        ret = 'Invalid Enum';
        break;
      case 0xA004 /* ALC_INVALID_VALUE */:
        ret = 'Invalid Value';
        break;
      case 0xA005 /* ALC_OUT_OF_MEMORY */:
        ret = 'Out of Memory';
        break;
      case 0x1004 /* ALC_DEFAULT_DEVICE_SPECIFIER */:
        if (typeof(AudioContext) !== "undefined" ||
            typeof(webkitAudioContext) !== "undefined") {
          ret = 'Device';
        } else {
          return 0;
        }
        break;
      case 0x1005 /* ALC_DEVICE_SPECIFIER */:
        if (typeof(AudioContext) !== "undefined" ||
            typeof(webkitAudioContext) !== "undefined") {
          ret = 'Device\0';
        } else {
          ret = '\0';
        }
        break;
      case 0x311 /* ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER */:
        return 0;
        break;
      case 0x310 /* ALC_CAPTURE_DEVICE_SPECIFIER */:
        ret = '\0'
        break;
      case 0x1006 /* ALC_EXTENSIONS */:
        if (!device) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return 0;
        }
        ret = '';
        break;
      default:
        AL.alcErr = 0xA003 /* ALC_INVALID_ENUM */;
        return 0;
      }
  
      ret = allocate(intArrayFromString(ret), 'i8', ALLOC_NORMAL);
  
      AL.alcStringCache[param] = ret;
  
      return ret;
    }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glGetObjectParameterivARB() {
  Module['printErr']('missing function: emscripten_glGetObjectParameterivARB'); abort(-1);
  }

  function _emscripten_glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _alcDestroyContext(context) {
      // Stop playback, etc
      clearInterval(AL.contexts[context - 1].interval);
    }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _emscripten_glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

   

  function _alDeleteBuffers(count, buffers)
    {
      if (!AL.currentContext) {
        return;
      }
      if (count > AL.currentContext.buf.length) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)] - 1;
  
        // Make sure the buffer index is valid.
        if (bufferIdx >= AL.currentContext.buf.length || !AL.currentContext.buf[bufferIdx]) {
          AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
  
        // Make sure the buffer is no longer in use.
        var buffer = AL.currentContext.buf[bufferIdx];
        for (var srcId in AL.currentContext.src) {
          var src = AL.currentContext.src[srcId];
          if (!src) {
            continue;
          }
          for (var k = 0; k < src.queue.length; k++) {
            if (buffer === src.queue[k].buffer) {
              AL.currentContext.err = 0xA004 /* AL_INVALID_OPERATION */;
              return;
            }
          }
        }
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)] - 1;
        delete AL.currentContext.buf[bufferIdx];
      }
    }

  function _alListener3f(param, v1, v2, v3) {
      if (!AL.currentContext) {
        return;
      }
      switch (param) {
      case 0x1004 /* AL_POSITION */:
        AL.currentContext.ctx.listener._position[0] = v1;
        AL.currentContext.ctx.listener._position[1] = v2;
        AL.currentContext.ctx.listener._position[2] = v3;
        AL.currentContext.ctx.listener.setPosition(v1, v2, v3);
        break;
      case 0x1006 /* AL_VELOCITY */:
        AL.currentContext.ctx.listener._velocity[0] = v1;
        AL.currentContext.ctx.listener._velocity[1] = v2;
        AL.currentContext.ctx.listener._velocity[2] = v3;
        // TODO: The velocity values are not currently used to implement a doppler effect.
        // If support for doppler effect is reintroduced, compute the doppler
        // speed pitch factor and apply it here.
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _glfwMakeContextCurrent(winid) {}

  function _emscripten_set_touchcancel_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel");
      return 0;
    }

  function ___lock() {}

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }

  function _alSource3f(source, param, v1, v2, v3) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      switch (param) {
      case 0x1004 /* AL_POSITION */:
        src.position[0] = v1;
        src.position[1] = v2;
        src.position[2] = v3;
        break;
      case 0x1005 /* AL_DIRECTION */:
        src.direction[0] = v1;
        src.direction[1] = v2;
        src.direction[2] = v3;
        break;
      case 0x1006 /* AL_VELOCITY */:
        src.velocity[0] = v1;
        src.velocity[1] = v2;
        src.velocity[2] = v3;
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _emscripten_glEnable(x0) { GLctx['enable'](x0) }

  function _emscripten_glNormalPointer() {
  Module['printErr']('missing function: emscripten_glNormalPointer'); abort(-1);
  }

  
  var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,stringCache:{},setErrorCode:function (code) {
        EGL.errorCode = code;
      },chooseConfig:function (display, attribList, config, config_size, numConfigs) { 
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
        // TODO: read attribList.
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)]=1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAP32[((config)>>2)]=62002; 
        }
        
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      GLFW.setScrollCallback(winid, cbfun);
    }

  function _emscripten_get_pointerlock_status(pointerlockStatus) {
      if (pointerlockStatus) JSEvents.fillPointerlockChangeEventData(pointerlockStatus);
      if (!document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
      return 0;
    }

  function _alSourcePlay(source) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glfwGetPrimaryMonitor() {
      return 1;
    }

  
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)]=data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          case 'FloatToInteger': HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'FloatToInteger': HEAP32[(((params)+(i*4))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'Float');
    }

  function _emscripten_set_touchstart_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart");
      return 0;
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glVertexPointer(){ throw 'Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'FloatToInteger');
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _emscripten_glEnableClientState() {
  Module['printErr']('missing function: emscripten_glEnableClientState'); abort(-1);
  }

  function _emscripten_glGetPointerv() {
  Module['printErr']('missing function: emscripten_glGetPointerv'); abort(-1);
  }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

   

   

  function _emscripten_set_touchend_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend");
      return 0;
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }

  function _emscripten_glFinish() { GLctx['finish']() }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _alcOpenDevice(deviceName) {
      if (typeof(AudioContext) !== "undefined" ||
          typeof(webkitAudioContext) !== "undefined") {
        return 1; // non-null pointer -- we just simulate one device
      } else {
        return 0;
      }
    }

  function _emscripten_get_num_gamepads() {
      // Polling gamepads generates garbage, so don't do it when we know there are no gamepads connected.
      if (!JSEvents.numGamepadsConnected) return 0;
  
      __emscripten_sample_gamepad_data();
      if (!JSEvents.lastGamepadState) return -1;
      return JSEvents.lastGamepadState.length;
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _emscripten_glUniform4iv(location, count, value) {
  
  
      GLctx.uniform4iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*16)>>2));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glLoadIdentity(){ throw 'Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glUniform3fv(location, count, value) {
  
  
      var view;
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _emscripten_glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _alSourceUnqueueBuffers(source, count, buffers) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
  
      if (count > src.buffersPlayed) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      for (var i = 0; i < count; i++) {
        var entry = src.queue.shift();
        // Write the buffers index out to the return list.
        for (var j = 0; j < AL.currentContext.buf.length; j++) {
          var b = AL.currentContext.buf[j];
          if (b && b == entry.buffer) {
            HEAP32[(((buffers)+(i*4))>>2)]=j+1;
            break;
          }
        }
        src.buffersPlayed--;
      }
  
      AL.updateSource(src);
    }

  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
      if (!target) target = '#canvas';
      target = JSEvents.findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock && !target.mozRequestPointerLock && !target.webkitRequestPointerLock && !target.msRequestPointerLock) {
        return -1;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents.requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return JSEvents.requestPointerLock(target);
    }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _alGetSourcei(source, param, value) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
  
      // Being that we have no way to receive end events from buffer nodes,
      // we currently proccess and update a source's buffer queue every
      // ~QUEUE_INTERVAL milliseconds. However, this interval is not precise,
      // so we also forcefully update the source when alGetSourcei is queried
      // to aid in the common scenario of application calling alGetSourcei(AL_BUFFERS_PROCESSED)
      // to recycle buffers.
      AL.updateSource(src);
  
      switch (param) {
      case 0x202 /* AL_SOURCE_RELATIVE */:
        HEAP32[((value)>>2)]=src.panner ? 1 : 0;
        break;
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
        HEAP32[((value)>>2)]=src.coneInnerAngle;
        break;
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
        HEAP32[((value)>>2)]=src.coneOuterAngle;
        break;
      case 0x1007 /* AL_LOOPING */:
        HEAP32[((value)>>2)]=src.loop;
        break;
      case 0x1009 /* AL_BUFFER */:
        if (!src.queue.length) {
          HEAP32[((value)>>2)]=0;
        } else {
          // Find the first unprocessed buffer.
          var buffer = src.queue[src.buffersPlayed].buffer;
          // Return its index.
          for (var i = 0; i < AL.currentContext.buf.length; ++i) {
            if (buffer == AL.currentContext.buf[i]) {
              HEAP32[((value)>>2)]=i+1;
              return;
            }
          }
          HEAP32[((value)>>2)]=0;
        }
        break;
      case 0x1010 /* AL_SOURCE_STATE */:
        HEAP32[((value)>>2)]=src.state;
        break;
      case 0x1015 /* AL_BUFFERS_QUEUED */:
        HEAP32[((value)>>2)]=src.queue.length
        break;
      case 0x1016 /* AL_BUFFERS_PROCESSED */:
        if (src.loop) {
          HEAP32[((value)>>2)]=0
        } else {
          HEAP32[((value)>>2)]=src.buffersPlayed
        }
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _emscripten_glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _alGenSources(count, sources) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        var gain = AL.currentContext.ctx.createGain();
        gain.connect(AL.currentContext.gain);
        AL.currentContext.src[AL.newSrcId] = {
          context: AL.currentContext,
          state: 0x1011 /* AL_INITIAL */,
          queue: [],
          loop: false,
          playbackRate: 1,
          _position: [0, 0, 0],
          _velocity: [0, 0, 0],
          _direction: [0, 0, 0],
          get refDistance() {
            return this._refDistance || 1;
          },
          set refDistance(val) {
            this._refDistance = val;
            if (this.panner) this.panner.refDistance = val;
          },
          get maxDistance() {
            return this._maxDistance || 10000;
          },
          set maxDistance(val) {
            this._maxDistance = val;
            if (this.panner) this.panner.maxDistance = val;
          },
          get rolloffFactor() {
            return this._rolloffFactor || 1;
          },
          set rolloffFactor(val) {
            this._rolloffFactor = val;
            if (this.panner) this.panner.rolloffFactor = val;
          },
          get position() {
            return this._position;
          },
          set position(val) {
            this._position[0] = val[0];
            this._position[1] = val[1];
            this._position[2] = val[2];
            if (this.panner) this.panner.setPosition(val[0], val[1], val[2]);
          },
          get velocity() {
            return this._velocity;
          },
          set velocity(val) {
            this._velocity[0] = val[0];
            this._velocity[1] = val[1];
            this._velocity[2] = val[2];
            // TODO: The velocity values are not currently used to implement a doppler effect.
            // If support for doppler effect is reintroduced, compute the doppler
            // speed pitch factor and apply it here.
          },
          get direction() {
            return this._direction;
          },
          set direction(val) {
            this._direction[0] = val[0];
            this._direction[1] = val[1];
            this._direction[2] = val[2];
            if (this.panner) this.panner.setOrientation(val[0], val[1], val[2]);
          },
          get coneOuterGain() {
            return this._coneOuterGain || 0.0;
          },
          set coneOuterGain(val) {
            this._coneOuterGain = val;
            if (this.panner) this.panner.coneOuterGain = val;
          },
          get coneInnerAngle() {
            return this._coneInnerAngle || 360.0;
          },
          set coneInnerAngle(val) {
            this._coneInnerAngle = val;
            if (this.panner) this.panner.coneInnerAngle = val;
          },
          get coneOuterAngle() {
            return this._coneOuterAngle || 360.0;
          },
          set coneOuterAngle(val) {
            this._coneOuterAngle = val;
            if (this.panner) this.panner.coneOuterAngle = val;
          },
          gain: gain,
          panner: null,
          buffersPlayed: 0,
          bufferPosition: 0
        };
        HEAP32[(((sources)+(i*4))>>2)]=AL.newSrcId;
        AL.newSrcId++;
      }
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _alDeleteSources(count, sources) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        var sourceIdx = HEAP32[(((sources)+(i*4))>>2)];
        delete AL.currentContext.src[sourceIdx];
      }
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _emscripten_glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _emscripten_glHint(x0, x1) { GLctx['hint'](x0, x1) }

  function _emscripten_glUniform2fv(location, count, value) {
  
  
      var view;
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glMatrixMode(){ throw 'Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _abort() {
      Module['abort']();
    }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _alGenBuffers(count, buffers) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        AL.currentContext.buf.push(null);
        HEAP32[(((buffers)+(i*4))>>2)]=AL.currentContext.buf.length;
      }
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glUniform2iv(location, count, value) {
  
  
      GLctx.uniform2iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*8)>>2));
    }

  function _emscripten_glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _alBufferData(buffer, format, data, size, freq) {
      if (!AL.currentContext) {
        return;
      }
      if (buffer > AL.currentContext.buf.length) {
        return;
      }
  
      try {
        switch (format) {
        case 0x1100 /* AL_FORMAT_MONO8 */:
          var buf = AL.currentContext.ctx.createBuffer(1, size, freq);
          buf.bytesPerSample = 1;
          var channel0 = buf.getChannelData(0);
          for (var i = 0; i < size; ++i) channel0[i] = HEAPU8[data++] * 0.0078125 /* 1/128 */ - 1.0;
          break;
        case 0x1101 /* AL_FORMAT_MONO16 */:
          var buf = AL.currentContext.ctx.createBuffer(1, size>>1, freq);
          buf.bytesPerSample = 2;
          var channel0 = buf.getChannelData(0);
          data >>= 1;
          for (var i = 0; i < size>>1; ++i) channel0[i] = HEAP16[data++] * 0.000030517578125 /* 1/32768 */;
          break;
        case 0x1102 /* AL_FORMAT_STEREO8 */:
          var buf = AL.currentContext.ctx.createBuffer(2, size>>1, freq);
          buf.bytesPerSample = 1;
          var channel0 = buf.getChannelData(0);
          var channel1 = buf.getChannelData(1);
          for (var i = 0; i < size>>1; ++i) {
            channel0[i] = HEAPU8[data++] * 0.0078125 /* 1/128 */ - 1.0;
            channel1[i] = HEAPU8[data++] * 0.0078125 /* 1/128 */ - 1.0;
          }
          break;
        case 0x1103 /* AL_FORMAT_STEREO16 */:
          var buf = AL.currentContext.ctx.createBuffer(2, size>>2, freq);
          buf.bytesPerSample = 2;
          var channel0 = buf.getChannelData(0);
          var channel1 = buf.getChannelData(1);
          data >>= 1;
          for (var i = 0; i < size>>2; ++i) {
            channel0[i] = HEAP16[data++] * 0.000030517578125 /* 1/32768 */;
            channel1[i] = HEAP16[data++] * 0.000030517578125 /* 1/32768 */;
          }
          break;
        case 0x10010 /* AL_FORMAT_MONO_FLOAT32 */:
          var buf = AL.currentContext.ctx.createBuffer(1, size>>2, freq);
          buf.bytesPerSample = 4;
          var channel0 = buf.getChannelData(0);
          data >>= 2;
          for (var i = 0; i < size>>2; ++i) channel0[i] = HEAPF32[data++];
          break;
        case 0x10011 /* AL_FORMAT_STEREO_FLOAT32 */:
          var buf = AL.currentContext.ctx.createBuffer(2, size>>3, freq);
          buf.bytesPerSample = 4;
          var channel0 = buf.getChannelData(0);
          var channel1 = buf.getChannelData(1);
          data >>= 2;
          for (var i = 0; i < size>>2; ++i) {
            channel0[i] = HEAPF32[data++];
            channel1[i] = HEAPF32[data++];
          }
          break;
        default:
          AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
          break;
        }
        AL.currentContext.buf[buffer - 1] = buf;
      } catch (e) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
      }
    }

  function _alSourceStop(source) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
    }function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  var _emscripten_asm_const_int=true;

  function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Integer');
    }

  function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }


  function _emscripten_glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDepthRange(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_set_fullscreenchange_callback(target, userData, useCapture, callbackfunc) {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      if (!target) target = document;
      else {
        target = JSEvents.findEventTarget(target);
        if (!target) return -4;
      }
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange");
      return 0;
    }

  
    

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glUniform1fv(location, count, value) {
  
  
      var view;
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _emscripten_set_gamepaddisconnected_callback(userData, useCapture, callbackfunc) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 27, "gamepaddisconnected");
      return 0;
   }

  function _emscripten_glBindProgramARB() {
  Module['printErr']('missing function: emscripten_glBindProgramARB'); abort(-1);
  }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _glfwDefaultWindowHints() {
      GLFW.hints = GLFW.defaultHints;
    }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glLineWidth(x0) { GLctx['lineWidth'](x0) }

  function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _emscripten_glRotatef() {
  Module['printErr']('missing function: emscripten_glRotatef'); abort(-1);
  }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats.length;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else if (result instanceof WebGLBuffer ||
                       result instanceof WebGLProgram ||
                       result instanceof WebGLFramebuffer ||
                       result instanceof WebGLRenderbuffer ||
                       result instanceof WebGLTexture) {
              ret = result.name | 0;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      HEAP32[((params)>>2)]=result;
    }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _emscripten_glClientActiveTexture() {
  Module['printErr']('missing function: emscripten_glClientActiveTexture'); abort(-1);
  }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _alSourcei(source, param, value) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      switch (param) {
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
        src.coneInnerAngle = value;
        break;
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
        src.coneOuterAngle = value;
        break;
      case 0x1007 /* AL_LOOPING */:
        src.loop = (value === 1 /* AL_TRUE */);
        break;
      case 0x1009 /* AL_BUFFER */:
        var buffer = AL.currentContext.buf[value - 1];
        if (value == 0) {
          src.queue = [];
        } else {
          src.queue = [{ buffer: buffer }];
        }
        AL.updateSource(src);
        break;
      case 0x202 /* AL_SOURCE_RELATIVE */:
        if (value === 1 /* AL_TRUE */) {
          if (src.panner) {
            src.panner = null;
  
            // Disconnect from the panner.
            src.gain.disconnect();
  
            src.gain.connect(AL.currentContext.gain);
          }
        } else if (value === 0 /* AL_FALSE */) {
          if (!src.panner) {
            var panner = src.panner = AL.currentContext.ctx.createPanner();
            panner.panningModel = "equalpower";
            panner.distanceModel = "linear";
            panner.refDistance = src.refDistance;
            panner.maxDistance = src.maxDistance;
            panner.rolloffFactor = src.rolloffFactor;
            panner.setPosition(src.position[0], src.position[1], src.position[2]);
            // TODO: If support for doppler effect is reintroduced, compute the doppler
            // speed pitch factor and apply it here.
            panner.connect(AL.currentContext.gain);
  
            // Disconnect from the default source.
            src.gain.disconnect();
  
            src.gain.connect(panner);
          }
        } else {
          AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        }
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _emscripten_glIsEnabled(x0) { return GLctx['isEnabled'](x0) }

  function _alSourceQueueBuffers(source, count, buffers) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)];
        if (bufferIdx > AL.currentContext.buf.length) {
          AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = AL.currentContext.buf[bufferIdx - 1];
        src.queue.push({ buffer: buffer, src: null });
      }
  
      AL.updateSource(src);
    }

  function _alSourcef(source, param, value) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      switch (param) {
      case 0x1003 /* AL_PITCH */:
        if (value <= 0) {
          AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
          return;
        }
        src.playbackRate = value;
  
        if (src.state === 0x1012 /* AL_PLAYING */) {
          // update currently playing entry
          var entry = src.queue[src.buffersPlayed];
          if (!entry || !entry.src) return; // It is possible that AL.updateSources() has not yet fed the next buffer, if so, skip.
          var currentTime = AL.currentContext.ctx.currentTime;
          var oldrate = entry.src.playbackRate.value;
          var offset = currentTime - src.bufferPosition;
          // entry.src.duration is expressed after factoring in playbackRate, so when changing playback rate, need
          // to recompute/rescale the rate to the new playback speed.
          entry.src.duration = (entry.src.duration - offset) * oldrate / src.playbackRate;
          if (entry.src.playbackRate.value != src.playbackRate) entry.src.playbackRate.value = src.playbackRate;
          src.bufferPosition = currentTime;
  
          // stop other buffers
          for (var k = src.buffersPlayed + 1; k < src.queue.length; k++) {
            var entry = src.queue[k];
            if (entry.src) {
              entry.src.stop();
              entry.src = null;
            }
          }
          // update the source to reschedule buffers with the new playbackRate
          AL.updateSource(src);
        }
        break;
      case 0x100A /* AL_GAIN */:
        if (src.gain.gain.value != value) src.gain.gain.value = value;
        break;
      // case 0x100D /* AL_MIN_GAIN */:
      //   break;
      // case 0x100E /* AL_MAX_GAIN */:
      //   break;
      case 0x1023 /* AL_MAX_DISTANCE */:
        src.maxDistance = value;
        break;
      case 0x1021 /* AL_ROLLOFF_FACTOR */:
        src.rolloffFactor = value;
        break;
      case 0x1022 /* AL_CONE_OUTER_GAIN */:
        src.coneOuterGain = value;
        break;
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
        src.coneInnerAngle = value;
        break;
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
        src.coneOuterAngle = value;
        break;
      case 0x1020 /* AL_REFERENCE_DISTANCE */:
        src.refDistance = value;
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

   

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

   

  function _emscripten_glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _alListenerf(param, value) {
      if (!AL.currentContext) {
        return;
      }
      switch (param) {
      case 0x100A /* AL_GAIN */:
        if (AL.currentContext.gain.gain.value != value) AL.currentContext.gain.gain.value = value;
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _emscripten_glClear(x0) { GLctx['clear'](x0) }

  function _alGetError() {
      if (!AL.currentContext) {
        return 0xA004 /* AL_INVALID_OPERATION */;
      } else {
        // Reset error on get.
        var err = AL.currentContext.err;
        AL.currentContext.err = 0 /* AL_NO_ERROR */;
        return err;
      }
    }

  function _emscripten_glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Float');
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          var program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          var program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _alcMakeContextCurrent(context) {
      if (context == 0) {
        AL.currentContext = null;
        return 0;
      } else {
        AL.currentContext = AL.contexts[context - 1];
        return 1;
      }
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        assert(id !== -1, 'shader not bound to local id');
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _emscripten_glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _emscripten_glUniform1iv(location, count, value) {
  
  
      GLctx.uniform1iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*4)>>2));
    }

  function _emscripten_glTexCoordPointer() {
  Module['printErr']('missing function: emscripten_glTexCoordPointer'); abort(-1);
  }

  function _emscripten_glGetInfoLogARB() {
  Module['printErr']('missing function: emscripten_glGetInfoLogARB'); abort(-1);
  }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _glfwSetCursorPosCallback(winid, cbfun) {
      GLFW.setCursorPosCallback(winid, cbfun);
    }

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glIsProgram(program) {
      var program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

   

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  
  
      var view;
      if (9*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }

  function _emscripten_glUniform4fv(location, count, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _llvm_exp2_f32(x) {
      return Math.pow(2, x);
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _glfwSetWindowIconifyCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.windowIconifyFunc = cbfun;
    }

  function _emscripten_glDrawRangeElements() {
  Module['printErr']('missing function: emscripten_glDrawRangeElements'); abort(-1);
  }

  function _emscripten_glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

   

  function _emscripten_glDeleteObjectARB() {
  Module['printErr']('missing function: emscripten_glDeleteObjectARB'); abort(-1);
  }

  function _emscripten_set_touchmove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove");
      return 0;
    }

  function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _alcCreateContext(device, attrList) {
      if (device != 1) {
        return 0;
      }
  
      if (attrList) {
        return 0;
      }
  
      var ctx;
      try {
        ctx = new AudioContext();
      } catch (e) {
        try {
          ctx = new webkitAudioContext();
        } catch (e) {}
      }
  
      if (ctx) {
        // Old Web Audio API (e.g. Safari 6.0.5) had an inconsistently named createGainNode function.
        if (typeof(ctx.createGain) === 'undefined') ctx.createGain = ctx.createGainNode;
  
        var gain = ctx.createGain();
        gain.connect(ctx.destination);
        // Extend the Web Audio API AudioListener object with a few tracking values of our own.
        ctx.listener._position = [0, 0, 0];
        ctx.listener._velocity = [0, 0, 0];
        ctx.listener._orientation = [0, 0, 0, 0, 0, 0];
        var context = {
          ctx: ctx,
          err: 0,
          src: {},
          buf: [],
          interval: setInterval(function() { AL.updateSources(context); }, AL.QUEUE_INTERVAL),
          gain: gain
        };
        AL.contexts.push(context);
        return AL.contexts.length;
      } else {
        return 0;
      }
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _alcCloseDevice(device) {
      // Stop playback, etc
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glClearDepth(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_set_keypress_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress");
      return 0;
    }

  function _glfwSetCharCallback(winid, cbfun) {
      GLFW.setCharCallback(winid, cbfun);
    }

  function _emscripten_glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _emscripten_glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.cursorEnterFunc = cbfun;
    }

   

  function _glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_glDrawBuffers(n, bufs) {
  
      var bufArray = GL.tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }

  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _alcGetContextsDevice(context) {
      if (context <= AL.contexts.length && context > 0) {
        // Returns the only one audio device
        return 1;
      }
      return 0;
    }

  function _emscripten_glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

   

  function _emscripten_exit_pointerlock() {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(JSEvents.requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else if (document.msExitPointerLock) {
        document.msExitPointerLock();
      } else if (document.mozExitPointerLock) {
        document.mozExitPointerLock();
      } else if (document.webkitExitPointerLock) {
        document.webkitExitPointerLock();
      } else {
        return -1;
      }
      return 0;
    }

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      if (bufSize > 0 && source) {
        var numBytesWrittenExclNull = stringToUTF8(result, source, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

   

  function _emscripten_set_click_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click");
      return 0;
    }

  function _glfwSetKeyCallback(winid, cbfun) {
      GLFW.setKeyCallback(winid, cbfun);
    }

  function _emscripten_set_gamepadconnected_callback(userData, useCapture, callbackfunc) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 26, "gamepadconnected");
      return 0;
    }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _emscripten_glLoadMatrixf() {
  Module['printErr']('missing function: emscripten_glLoadMatrixf'); abort(-1);
  }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          var program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          var program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function ___unlock() {}

  function _emscripten_glColorPointer() {
  Module['printErr']('missing function: emscripten_glColorPointer'); abort(-1);
  }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }

  function _glfwDestroyWindow(winid) {
      return GLFW.destroyWindow(winid);
    }

  function _emscripten_glFlush() { GLctx['flush']() }

  function _glfwSetErrorCallback(cbfun) {
      GLFW.errorFunc = cbfun;
    }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glGenVertexArrays(n, arrays) {
  
      for (var i = 0; i < n; i++) {
        var vao = GLctx['createVertexArray']();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
var GLctx; GL.init();
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
JSEvents.staticInit();;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vd(x) { Module["printErr"]("Invalid function pointer called with signature 'vd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddd(x) { Module["printErr"]("Invalid function pointer called with signature 'viddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdi(x) { Module["printErr"]("Invalid function pointer called with signature 'vdi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vd(index,a1) {
  try {
    Module["dynCall_vd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vdi(index,a1,a2) {
  try {
    Module["dynCall_vdi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_vdddddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vdddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vdddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vdd(index,a1,a2) {
  try {
    Module["dynCall_vdd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vd": nullFunc_vd, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viddd": nullFunc_viddd, "nullFunc_vidd": nullFunc_vidd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_vidddd": nullFunc_vidddd, "nullFunc_vdi": nullFunc_vdi, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_i": nullFunc_i, "nullFunc_vdddddd": nullFunc_vdddddd, "nullFunc_vdddd": nullFunc_vdddd, "nullFunc_vdd": nullFunc_vdd, "nullFunc_v": nullFunc_v, "nullFunc_viid": nullFunc_viid, "nullFunc_viiii": nullFunc_viiii, "invoke_viiiii": invoke_viiiii, "invoke_vd": invoke_vd, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viddd": invoke_viddd, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viii": invoke_viii, "invoke_vidddd": invoke_vidddd, "invoke_vdi": invoke_vdi, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_iii": invoke_iii, "invoke_i": invoke_i, "invoke_vdddddd": invoke_vdddddd, "invoke_vdddd": invoke_vdddd, "invoke_vdd": invoke_vdd, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_viiii": invoke_viiii, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_glUseProgram": _glUseProgram, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_glfwCreateWindow": _glfwCreateWindow, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glCullFace": _emscripten_glCullFace, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_alBufferData": _alBufferData, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_glBindBuffer": _glBindBuffer, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_alSource3f": _alSource3f, "_emscripten_set_fullscreenchange_callback": _emscripten_set_fullscreenchange_callback, "_emscripten_set_touchmove_callback": _emscripten_set_touchmove_callback, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_set_gamepaddisconnected_callback": _emscripten_set_gamepaddisconnected_callback, "_glDisable": _glDisable, "_glBlendFunc": _glBlendFunc, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_glGetAttribLocation": _glGetAttribLocation, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_alcGetString": _alcGetString, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glVertexPointer": _emscripten_glVertexPointer, "_emscripten_set_touchstart_callback": _emscripten_set_touchstart_callback, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_glUniform4f": _glUniform4f, "_llvm_stacksave": _llvm_stacksave, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glFrustum": _emscripten_glFrustum, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_glfwInit": _glfwInit, "_emscripten_glGetPointerv": _emscripten_glGetPointerv, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_gmtime_r": _gmtime_r, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_alSourcePlay": _alSourcePlay, "_alSourcei": _alSourcei, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "___syscall140": ___syscall140, "_glfwSetErrorCallback": _glfwSetErrorCallback, "_glfwDefaultWindowHints": _glfwDefaultWindowHints, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "___syscall146": ___syscall146, "_glfwDestroyWindow": _glfwDestroyWindow, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_glVertexAttribPointer": _glVertexAttribPointer, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_alcCreateContext": _alcCreateContext, "_glfwTerminate": _glfwTerminate, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_llvm_stackrestore": _llvm_stackrestore, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_emscripten_glClear": _emscripten_glClear, "_glDrawElements": _glDrawElements, "_alGetSourcei": _alGetSourcei, "_glBufferSubData": _glBufferSubData, "_alcMakeContextCurrent": _alcMakeContextCurrent, "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_glViewport": _glViewport, "_alSourceQueueBuffers": _alSourceQueueBuffers, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "___setErrNo": ___setErrNo, "_eglGetProcAddress": _eglGetProcAddress, "_alcGetCurrentContext": _alcGetCurrentContext, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_glDeleteTextures": _glDeleteTextures, "_glDepthFunc": _glDepthFunc, "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glGetError": _emscripten_glGetError, "_alGenBuffers": _alGenBuffers, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_gmtime": _gmtime, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glRotatef": _emscripten_glRotatef, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_glEnable": _glEnable, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glMatrixMode": _emscripten_glMatrixMode, "_alDeleteSources": _alDeleteSources, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "emscriptenWebGLGet": emscriptenWebGLGet, "_alSourceUnqueueBuffers": _alSourceUnqueueBuffers, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_alGetError": _alGetError, "_emscripten_get_now": _emscripten_get_now, "_emscripten_glNormalPointer": _emscripten_glNormalPointer, "_glAttachShader": _glAttachShader, "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer, "_emscripten_glEnable": _emscripten_glEnable, "_glCreateProgram": _glCreateProgram, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_emscripten_glClearDepth": _emscripten_glClearDepth, "___lock": ___lock, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___syscall145": ___syscall145, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_time": _time, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_exit": _exit, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_glGetString": _glGetString, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_alSourcef": _alSourcef, "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements, "_glCullFace": _glCullFace, "_llvm_pow_f64": _llvm_pow_f64, "_emscripten_set_keypress_callback": _emscripten_set_keypress_callback, "__emscripten_sample_gamepad_data": __emscripten_sample_gamepad_data, "_emscripten_get_gamepad_status": _emscripten_get_gamepad_status, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_glfwSwapInterval": _glfwSwapInterval, "_glfwGetVideoModes": _glfwGetVideoModes, "_emscripten_set_click_callback": _emscripten_set_click_callback, "_emscripten_glFinish": _emscripten_glFinish, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_get_num_gamepads": _emscripten_get_num_gamepads, "___syscall221": ___syscall221, "_glCompressedTexImage2D": _glCompressedTexImage2D, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_glClearDepthf": _glClearDepthf, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "_glfwSetWindowShouldClose": _glfwSetWindowShouldClose, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_glBindTexture": _glBindTexture, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glHint": _emscripten_glHint, "_glfwSetCharCallback": _glfwSetCharCallback, "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib, "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_glfwSetScrollCallback": _glfwSetScrollCallback, "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_alcDestroyContext": _alcDestroyContext, "_glDrawArrays": _glDrawArrays, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_glCreateShader": _glCreateShader, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_glCompileShader": _glCompileShader, "_alListenerf": _alListenerf, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glDepthRange": _emscripten_glDepthRange, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_glActiveTexture": _glActiveTexture, "_emscripten_request_pointerlock": _emscripten_request_pointerlock, "_glGetFloatv": _glGetFloatv, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_glfwSetWindowIconifyCallback": _glfwSetWindowIconifyCallback, "_emscripten_glDrawBuffers": _emscripten_glDrawBuffers, "_alSourceStop": _alSourceStop, "_glFrontFace": _glFrontFace, "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB, "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock, "_alcCloseDevice": _alcCloseDevice, "_glUniform1i": _glUniform1i, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_abort": _abort, "_alcGetContextsDevice": _alcGetContextsDevice, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_glfwGetCursorPos": _glfwGetCursorPos, "_glDeleteBuffers": _glDeleteBuffers, "_glBufferData": _glBufferData, "_glTexImage2D": _glTexImage2D, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity, "_glDeleteShader": _glDeleteShader, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_glGetProgramiv": _glGetProgramiv, "_llvm_exp2_f32": _llvm_exp2_f32, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_glfwGetTime": _glfwGetTime, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_set_gamepadconnected_callback": _emscripten_set_gamepadconnected_callback, "_alListener3f": _alListener3f, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "_emscripten_set_touchcancel_callback": _emscripten_set_touchcancel_callback, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_glfwGetPrimaryMonitor": _glfwGetPrimaryMonitor, "_glLinkProgram": _glLinkProgram, "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "_emscripten_set_touchend_callback": _emscripten_set_touchend_callback, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_glGetShaderiv": _glGetShaderiv, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_glGetUniformLocation": _glGetUniformLocation, "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_glClear": _glClear, "_glGenTextures": _glGenTextures, "_emscripten_glDisable": _emscripten_glDisable, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "__exit": __exit, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_glBindAttribLocation": _glBindAttribLocation, "_glPixelStorei": _glPixelStorei, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_alDeleteBuffers": _alDeleteBuffers, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_emscripten_get_pointerlock_status": _emscripten_get_pointerlock_status, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_glfwSwapBuffers": _glfwSwapBuffers, "_emscripten_glColorPointer": _emscripten_glColorPointer, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_glfwWindowHint": _glfwWindowHint, "_alGenSources": _alGenSources, "_glfwSetCursorPosCallback": _glfwSetCursorPosCallback, "_emscripten_glIsShader": _emscripten_glIsShader, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_alcOpenDevice": _alcOpenDevice, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_glTexParameteri": _glTexParameteri, "_glGetActiveUniform": _glGetActiveUniform, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_glClearColor": _glClearColor, "_emscripten_glEnableClientState": _emscripten_glEnableClientState, "_glTexParameterf": _glTexParameterf, "_glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var Int8View = global.Int8Array;
  var HEAP8 = new Int8View(buffer);
  var Int16View = global.Int16Array;
  var HEAP16 = new Int16View(buffer);
  var Int32View = global.Int32Array;
  var HEAP32 = new Int32View(buffer);
  var Uint8View = global.Uint8Array;
  var HEAPU8 = new Uint8View(buffer);
  var Uint16View = global.Uint16Array;
  var HEAPU16 = new Uint16View(buffer);
  var Uint32View = global.Uint32Array;
  var HEAPU32 = new Uint32View(buffer);
  var Float32View = global.Float32Array;
  var HEAPF32 = new Float32View(buffer);
  var Float64View = global.Float64Array;
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vd=env.nullFunc_vd;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viddd=env.nullFunc_viddd;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_vidddd=env.nullFunc_vidddd;
  var nullFunc_vdi=env.nullFunc_vdi;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vdddddd=env.nullFunc_vdddddd;
  var nullFunc_vdddd=env.nullFunc_vdddd;
  var nullFunc_vdd=env.nullFunc_vdd;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vd=env.invoke_vd;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viddd=env.invoke_viddd;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_vidddd=env.invoke_vidddd;
  var invoke_vdi=env.invoke_vdi;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_i=env.invoke_i;
  var invoke_vdddddd=env.invoke_vdddddd;
  var invoke_vdddd=env.invoke_vdddd;
  var invoke_vdd=env.invoke_vdd;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_viiii=env.invoke_viiii;
  var _emscripten_glGetTexParameterfv=env._emscripten_glGetTexParameterfv;
  var _glUseProgram=env._glUseProgram;
  var _emscripten_glShaderSource=env._emscripten_glShaderSource;
  var _glfwCreateWindow=env._glfwCreateWindow;
  var _emscripten_glReleaseShaderCompiler=env._emscripten_glReleaseShaderCompiler;
  var _emscripten_glBlendFuncSeparate=env._emscripten_glBlendFuncSeparate;
  var _emscripten_glUniform4iv=env._emscripten_glUniform4iv;
  var _emscripten_glVertexAttribPointer=env._emscripten_glVertexAttribPointer;
  var _emscripten_glGetIntegerv=env._emscripten_glGetIntegerv;
  var _emscripten_glCullFace=env._emscripten_glCullFace;
  var _emscripten_glIsProgram=env._emscripten_glIsProgram;
  var _emscripten_glStencilMaskSeparate=env._emscripten_glStencilMaskSeparate;
  var _emscripten_glViewport=env._emscripten_glViewport;
  var _emscripten_glFrontFace=env._emscripten_glFrontFace;
  var _alBufferData=env._alBufferData;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var _emscripten_glUniform3fv=env._emscripten_glUniform3fv;
  var _emscripten_glPolygonOffset=env._emscripten_glPolygonOffset;
  var _emscripten_glUseProgram=env._emscripten_glUseProgram;
  var _emscripten_glBlendColor=env._emscripten_glBlendColor;
  var _glBindBuffer=env._glBindBuffer;
  var _emscripten_glDepthFunc=env._emscripten_glDepthFunc;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _alSource3f=env._alSource3f;
  var _emscripten_set_fullscreenchange_callback=env._emscripten_set_fullscreenchange_callback;
  var _emscripten_set_touchmove_callback=env._emscripten_set_touchmove_callback;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_set_gamepaddisconnected_callback=env._emscripten_set_gamepaddisconnected_callback;
  var _glDisable=env._glDisable;
  var _glBlendFunc=env._glBlendFunc;
  var _emscripten_glDisableVertexAttribArray=env._emscripten_glDisableVertexAttribArray;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _alcGetString=env._alcGetString;
  var _emscripten_glSampleCoverage=env._emscripten_glSampleCoverage;
  var _emscripten_glVertexPointer=env._emscripten_glVertexPointer;
  var _emscripten_set_touchstart_callback=env._emscripten_set_touchstart_callback;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var _emscripten_glGetBooleanv=env._emscripten_glGetBooleanv;
  var _emscripten_glGetShaderSource=env._emscripten_glGetShaderSource;
  var _glUniform4f=env._glUniform4f;
  var _llvm_stacksave=env._llvm_stacksave;
  var _emscripten_glUniform1i=env._emscripten_glUniform1i;
  var _emscripten_glStencilFuncSeparate=env._emscripten_glStencilFuncSeparate;
  var _emscripten_glFrustum=env._emscripten_glFrustum;
  var _emscripten_glGenBuffers=env._emscripten_glGenBuffers;
  var _emscripten_glDeleteObjectARB=env._emscripten_glDeleteObjectARB;
  var _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback;
  var _emscripten_glGetShaderPrecisionFormat=env._emscripten_glGetShaderPrecisionFormat;
  var _glfwInit=env._glfwInit;
  var _emscripten_glGetPointerv=env._emscripten_glGetPointerv;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var _emscripten_glGetString=env._emscripten_glGetString;
  var _emscripten_glIsFramebuffer=env._emscripten_glIsFramebuffer;
  var _gmtime_r=env._gmtime_r;
  var _emscripten_glIsEnabled=env._emscripten_glIsEnabled;
  var _emscripten_glScissor=env._emscripten_glScissor;
  var _emscripten_glVertexAttrib4fv=env._emscripten_glVertexAttrib4fv;
  var _emscripten_glFramebufferTexture2D=env._emscripten_glFramebufferTexture2D;
  var _emscripten_glTexParameteriv=env._emscripten_glTexParameteriv;
  var _emscripten_glBindProgramARB=env._emscripten_glBindProgramARB;
  var _emscripten_glStencilOpSeparate=env._emscripten_glStencilOpSeparate;
  var _alSourcePlay=env._alSourcePlay;
  var _alSourcei=env._alSourcei;
  var _emscripten_glFramebufferRenderbuffer=env._emscripten_glFramebufferRenderbuffer;
  var ___syscall140=env.___syscall140;
  var _glfwSetErrorCallback=env._glfwSetErrorCallback;
  var _glfwDefaultWindowHints=env._glfwDefaultWindowHints;
  var _emscripten_glIsBuffer=env._emscripten_glIsBuffer;
  var ___syscall146=env.___syscall146;
  var _glfwDestroyWindow=env._glfwDestroyWindow;
  var _emscripten_glGetActiveAttrib=env._emscripten_glGetActiveAttrib;
  var _emscripten_glAttachShader=env._emscripten_glAttachShader;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _emscripten_glUniform2i=env._emscripten_glUniform2i;
  var _emscripten_glUniform2f=env._emscripten_glUniform2f;
  var _alcCreateContext=env._alcCreateContext;
  var _glfwTerminate=env._glfwTerminate;
  var _emscripten_glTexParameterfv=env._emscripten_glTexParameterfv;
  var _emscripten_glUniformMatrix2fv=env._emscripten_glUniformMatrix2fv;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _emscripten_glGetUniformiv=env._emscripten_glGetUniformiv;
  var _emscripten_glTexParameterf=env._emscripten_glTexParameterf;
  var _emscripten_glGetAttachedShaders=env._emscripten_glGetAttachedShaders;
  var _emscripten_glGenTextures=env._emscripten_glGenTextures;
  var _emscripten_glTexParameteri=env._emscripten_glTexParameteri;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _glfwMakeContextCurrent=env._glfwMakeContextCurrent;
  var _emscripten_glClear=env._emscripten_glClear;
  var _glDrawElements=env._glDrawElements;
  var _alGetSourcei=env._alGetSourcei;
  var _glBufferSubData=env._glBufferSubData;
  var _alcMakeContextCurrent=env._alcMakeContextCurrent;
  var _emscripten_glGenVertexArrays=env._emscripten_glGenVertexArrays;
  var _emscripten_glVertexAttrib2fv=env._emscripten_glVertexAttrib2fv;
  var _glViewport=env._glViewport;
  var _alSourceQueueBuffers=env._alSourceQueueBuffers;
  var _emscripten_glGetTexParameteriv=env._emscripten_glGetTexParameteriv;
  var ___setErrNo=env.___setErrNo;
  var _eglGetProcAddress=env._eglGetProcAddress;
  var _alcGetCurrentContext=env._alcGetCurrentContext;
  var _emscripten_glBindAttribLocation=env._emscripten_glBindAttribLocation;
  var _glDeleteTextures=env._glDeleteTextures;
  var _glDepthFunc=env._glDepthFunc;
  var _emscripten_glClientActiveTexture=env._emscripten_glClientActiveTexture;
  var _emscripten_glVertexAttrib2f=env._emscripten_glVertexAttrib2f;
  var _emscripten_glFlush=env._emscripten_glFlush;
  var _emscripten_glCheckFramebufferStatus=env._emscripten_glCheckFramebufferStatus;
  var _emscripten_glGenerateMipmap=env._emscripten_glGenerateMipmap;
  var _emscripten_glGetError=env._emscripten_glGetError;
  var _alGenBuffers=env._alGenBuffers;
  var _emscripten_glClearDepthf=env._emscripten_glClearDepthf;
  var _gmtime=env._gmtime;
  var _emscripten_glUniform3i=env._emscripten_glUniform3i;
  var _emscripten_glRotatef=env._emscripten_glRotatef;
  var _emscripten_glDeleteShader=env._emscripten_glDeleteShader;
  var _glEnable=env._glEnable;
  var _emscripten_glReadPixels=env._emscripten_glReadPixels;
  var _emscripten_glMatrixMode=env._emscripten_glMatrixMode;
  var _alDeleteSources=env._alDeleteSources;
  var _emscripten_glClearStencil=env._emscripten_glClearStencil;
  var _emscripten_glGetUniformLocation=env._emscripten_glGetUniformLocation;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var _alSourceUnqueueBuffers=env._alSourceUnqueueBuffers;
  var _emscripten_glEnableVertexAttribArray=env._emscripten_glEnableVertexAttribArray;
  var _alGetError=env._alGetError;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_glNormalPointer=env._emscripten_glNormalPointer;
  var _glAttachShader=env._glAttachShader;
  var _emscripten_glTexCoordPointer=env._emscripten_glTexCoordPointer;
  var _emscripten_glEnable=env._emscripten_glEnable;
  var _glCreateProgram=env._glCreateProgram;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _emscripten_glClearDepth=env._emscripten_glClearDepth;
  var ___lock=env.___lock;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___syscall145=env.___syscall145;
  var _emscripten_glVertexAttrib3f=env._emscripten_glVertexAttrib3f;
  var _time=env._time;
  var _emscripten_glVertexAttrib1f=env._emscripten_glVertexAttrib1f;
  var _glfwSetMouseButtonCallback=env._glfwSetMouseButtonCallback;
  var _emscripten_glBlendEquationSeparate=env._emscripten_glBlendEquationSeparate;
  var _exit=env._exit;
  var _emscripten_glBindFramebuffer=env._emscripten_glBindFramebuffer;
  var _glGetString=env._glGetString;
  var _emscripten_glUniform4i=env._emscripten_glUniform4i;
  var _alSourcef=env._alSourcef;
  var _emscripten_glDrawRangeElements=env._emscripten_glDrawRangeElements;
  var _glCullFace=env._glCullFace;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _emscripten_set_keypress_callback=env._emscripten_set_keypress_callback;
  var __emscripten_sample_gamepad_data=env.__emscripten_sample_gamepad_data;
  var _emscripten_get_gamepad_status=env._emscripten_get_gamepad_status;
  var _emscripten_glUniform4f=env._emscripten_glUniform4f;
  var _glfwSwapInterval=env._glfwSwapInterval;
  var _glfwGetVideoModes=env._glfwGetVideoModes;
  var _emscripten_set_click_callback=env._emscripten_set_click_callback;
  var _emscripten_glFinish=env._emscripten_glFinish;
  var _emscripten_glShaderBinary=env._emscripten_glShaderBinary;
  var _emscripten_glDrawElements=env._emscripten_glDrawElements;
  var _emscripten_glBlendFunc=env._emscripten_glBlendFunc;
  var _emscripten_get_num_gamepads=env._emscripten_get_num_gamepads;
  var ___syscall221=env.___syscall221;
  var _glCompressedTexImage2D=env._glCompressedTexImage2D;
  var _emscripten_glUniform1iv=env._emscripten_glUniform1iv;
  var _emscripten_glGetVertexAttribPointerv=env._emscripten_glGetVertexAttribPointerv;
  var _glClearDepthf=env._glClearDepthf;
  var _emscripten_glCompressedTexSubImage2D=env._emscripten_glCompressedTexSubImage2D;
  var emscriptenWebGLGetUniform=env.emscriptenWebGLGetUniform;
  var _emscripten_glGenRenderbuffers=env._emscripten_glGenRenderbuffers;
  var _emscripten_glDeleteVertexArrays=env._emscripten_glDeleteVertexArrays;
  var _glfwSetWindowShouldClose=env._glfwSetWindowShouldClose;
  var _emscripten_glUniform1fv=env._emscripten_glUniform1fv;
  var _emscripten_glGetActiveUniform=env._emscripten_glGetActiveUniform;
  var _glBindTexture=env._glBindTexture;
  var _emscripten_glUniform3iv=env._emscripten_glUniform3iv;
  var _emscripten_glUniform2iv=env._emscripten_glUniform2iv;
  var _emscripten_glHint=env._emscripten_glHint;
  var _glfwSetCharCallback=env._glfwSetCharCallback;
  var emscriptenWebGLGetVertexAttrib=env.emscriptenWebGLGetVertexAttrib;
  var _emscripten_glLoadMatrixf=env._emscripten_glLoadMatrixf;
  var _emscripten_glDeleteProgram=env._emscripten_glDeleteProgram;
  var _emscripten_glDeleteRenderbuffers=env._emscripten_glDeleteRenderbuffers;
  var _glfwSetScrollCallback=env._glfwSetScrollCallback;
  var _emscripten_glDrawElementsInstanced=env._emscripten_glDrawElementsInstanced;
  var _emscripten_glVertexAttrib4f=env._emscripten_glVertexAttrib4f;
  var _alcDestroyContext=env._alcDestroyContext;
  var _glDrawArrays=env._glDrawArrays;
  var _emscripten_glTexSubImage2D=env._emscripten_glTexSubImage2D;
  var _glCreateShader=env._glCreateShader;
  var _emscripten_glPixelStorei=env._emscripten_glPixelStorei;
  var _glCompileShader=env._glCompileShader;
  var _alListenerf=env._alListenerf;
  var _emscripten_glUniformMatrix3fv=env._emscripten_glUniformMatrix3fv;
  var _emscripten_glDepthRange=env._emscripten_glDepthRange;
  var _emscripten_glGetBufferParameteriv=env._emscripten_glGetBufferParameteriv;
  var _glActiveTexture=env._glActiveTexture;
  var _emscripten_request_pointerlock=env._emscripten_request_pointerlock;
  var _glGetFloatv=env._glGetFloatv;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_glDepthMask=env._emscripten_glDepthMask;
  var _glfwSetWindowIconifyCallback=env._glfwSetWindowIconifyCallback;
  var _emscripten_glDrawBuffers=env._emscripten_glDrawBuffers;
  var _alSourceStop=env._alSourceStop;
  var _glFrontFace=env._glFrontFace;
  var _emscripten_glGetObjectParameterivARB=env._emscripten_glGetObjectParameterivARB;
  var _emscripten_exit_pointerlock=env._emscripten_exit_pointerlock;
  var _alcCloseDevice=env._alcCloseDevice;
  var _glUniform1i=env._glUniform1i;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _emscripten_glStencilFunc=env._emscripten_glStencilFunc;
  var _abort=env._abort;
  var _alcGetContextsDevice=env._alcGetContextsDevice;
  var _emscripten_glUniform2fv=env._emscripten_glUniform2fv;
  var _glfwGetCursorPos=env._glfwGetCursorPos;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glBufferData=env._glBufferData;
  var _glTexImage2D=env._glTexImage2D;
  var _emscripten_glGetShaderiv=env._emscripten_glGetShaderiv;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _emscripten_glGenFramebuffers=env._emscripten_glGenFramebuffers;
  var _emscripten_glUniformMatrix4fv=env._emscripten_glUniformMatrix4fv;
  var _emscripten_glLoadIdentity=env._emscripten_glLoadIdentity;
  var _glDeleteShader=env._glDeleteShader;
  var _emscripten_glUniform1f=env._emscripten_glUniform1f;
  var _glGetProgramiv=env._glGetProgramiv;
  var _llvm_exp2_f32=env._llvm_exp2_f32;
  var _emscripten_glIsRenderbuffer=env._emscripten_glIsRenderbuffer;
  var _glfwGetTime=env._glfwGetTime;
  var _emscripten_glRenderbufferStorage=env._emscripten_glRenderbufferStorage;
  var _emscripten_set_gamepadconnected_callback=env._emscripten_set_gamepadconnected_callback;
  var _alListener3f=env._alListener3f;
  var _emscripten_glGetVertexAttribiv=env._emscripten_glGetVertexAttribiv;
  var _emscripten_glBindVertexArray=env._emscripten_glBindVertexArray;
  var _emscripten_glDrawArraysInstanced=env._emscripten_glDrawArraysInstanced;
  var _emscripten_set_touchcancel_callback=env._emscripten_set_touchcancel_callback;
  var _emscripten_glCreateShader=env._emscripten_glCreateShader;
  var _emscripten_glStencilMask=env._emscripten_glStencilMask;
  var _emscripten_glCopyTexSubImage2D=env._emscripten_glCopyTexSubImage2D;
  var _emscripten_glDeleteTextures=env._emscripten_glDeleteTextures;
  var _emscripten_glBindRenderbuffer=env._emscripten_glBindRenderbuffer;
  var _glfwGetPrimaryMonitor=env._glfwGetPrimaryMonitor;
  var _glLinkProgram=env._glLinkProgram;
  var _emscripten_glVertexAttribDivisor=env._emscripten_glVertexAttribDivisor;
  var _emscripten_set_touchend_callback=env._emscripten_set_touchend_callback;
  var _emscripten_glGetUniformfv=env._emscripten_glGetUniformfv;
  var _emscripten_glGetVertexAttribfv=env._emscripten_glGetVertexAttribfv;
  var _emscripten_glGetRenderbufferParameteriv=env._emscripten_glGetRenderbufferParameteriv;
  var _emscripten_glDeleteFramebuffers=env._emscripten_glDeleteFramebuffers;
  var _glGetShaderiv=env._glGetShaderiv;
  var _emscripten_glVertexAttrib3fv=env._emscripten_glVertexAttrib3fv;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _emscripten_glGetInfoLogARB=env._emscripten_glGetInfoLogARB;
  var _emscripten_glCompileShader=env._emscripten_glCompileShader;
  var _glClear=env._glClear;
  var _glGenTextures=env._glGenTextures;
  var _emscripten_glDisable=env._emscripten_glDisable;
  var _emscripten_glDepthRangef=env._emscripten_glDepthRangef;
  var __exit=env.__exit;
  var _emscripten_glLineWidth=env._emscripten_glLineWidth;
  var _emscripten_glUniform3f=env._emscripten_glUniform3f;
  var _emscripten_glGetShaderInfoLog=env._emscripten_glGetShaderInfoLog;
  var _emscripten_glStencilOp=env._emscripten_glStencilOp;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var _glPixelStorei=env._glPixelStorei;
  var _emscripten_glColorMask=env._emscripten_glColorMask;
  var _emscripten_glLinkProgram=env._emscripten_glLinkProgram;
  var _emscripten_glBlendEquation=env._emscripten_glBlendEquation;
  var _emscripten_glIsTexture=env._emscripten_glIsTexture;
  var _alDeleteBuffers=env._alDeleteBuffers;
  var _emscripten_glGetProgramiv=env._emscripten_glGetProgramiv;
  var _emscripten_glVertexAttrib1fv=env._emscripten_glVertexAttrib1fv;
  var _emscripten_glBindTexture=env._emscripten_glBindTexture;
  var _emscripten_glGetFramebufferAttachmentParameteriv=env._emscripten_glGetFramebufferAttachmentParameteriv;
  var _emscripten_get_pointerlock_status=env._emscripten_get_pointerlock_status;
  var _emscripten_glActiveTexture=env._emscripten_glActiveTexture;
  var _emscripten_glDeleteBuffers=env._emscripten_glDeleteBuffers;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_glBufferSubData=env._emscripten_glBufferSubData;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _emscripten_glColorPointer=env._emscripten_glColorPointer;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_glGetProgramInfoLog=env._emscripten_glGetProgramInfoLog;
  var _glfwWindowHint=env._glfwWindowHint;
  var _alGenSources=env._alGenSources;
  var _glfwSetCursorPosCallback=env._glfwSetCursorPosCallback;
  var _emscripten_glIsShader=env._emscripten_glIsShader;
  var _emscripten_glUniform4fv=env._emscripten_glUniform4fv;
  var _alcOpenDevice=env._alcOpenDevice;
  var _emscripten_glDrawArrays=env._emscripten_glDrawArrays;
  var _emscripten_glCompressedTexImage2D=env._emscripten_glCompressedTexImage2D;
  var _emscripten_glClearColor=env._emscripten_glClearColor;
  var _emscripten_glBufferData=env._emscripten_glBufferData;
  var _emscripten_glCreateProgram=env._emscripten_glCreateProgram;
  var _emscripten_glValidateProgram=env._emscripten_glValidateProgram;
  var _emscripten_glGetAttribLocation=env._emscripten_glGetAttribLocation;
  var _glTexParameteri=env._glTexParameteri;
  var _glGetActiveUniform=env._glGetActiveUniform;
  var _emscripten_glBindBuffer=env._emscripten_glBindBuffer;
  var _emscripten_glGetFloatv=env._emscripten_glGetFloatv;
  var _emscripten_glDetachShader=env._emscripten_glDetachShader;
  var _glClearColor=env._glClearColor;
  var _emscripten_glEnableClientState=env._emscripten_glEnableClientState;
  var _glTexParameterf=env._glTexParameterf;
  var _glfwSetCursorEnterCallback=env._glfwSetCursorEnterCallback;
  var _emscripten_glCopyTexImage2D=env._emscripten_glCopyTexImage2D;
  var _emscripten_glTexImage2D=env._emscripten_glTexImage2D;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fxDieOwl$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $fxDieOwl$byval_copy = sp + 304|0;
 $0 = sp + 272|0;
 $1 = sp + 248|0;
 $2 = sp + 228|0;
 $3 = sp + 96|0;
 $4 = sp + 84|0;
 $5 = sp + 72|0;
 $6 = sp + 60|0;
 $7 = sp + 48|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 _InitWindow(1280,720,6354);
 _LoadSpriteFont($0,6384);
 ;HEAP32[26352>>2]=HEAP32[$0>>2]|0;HEAP32[26352+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[26352+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[26352+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[26352+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[26352+20>>2]=HEAP32[$0+20>>2]|0;HEAP32[26352+24>>2]=HEAP32[$0+24>>2]|0;HEAP32[26352+28>>2]=HEAP32[$0+28>>2]|0;
 _LoadTexture($1,6416);
 ;HEAP32[26384>>2]=HEAP32[$1>>2]|0;HEAP32[26384+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[26384+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[26384+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[26384+16>>2]=HEAP32[$1+16>>2]|0;
 _LoadTexture($2,6447);
 ;HEAP32[26404>>2]=HEAP32[$2>>2]|0;HEAP32[26404+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[26404+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[26404+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[26404+16>>2]=HEAP32[$2+16>>2]|0;
 _LoadShader($3,6478,6512);
 _memcpy((26424|0),($3|0),132)|0;
 _InitAudioDevice();
 _LoadSound($4,6553);
 ;HEAP32[26556>>2]=HEAP32[$4>>2]|0;HEAP32[26556+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[26556+8>>2]=HEAP32[$4+8>>2]|0;
 _LoadSound($5,6578);
 ;HEAP32[26568>>2]=HEAP32[$5>>2]|0;HEAP32[26568+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[26568+8>>2]=HEAP32[$5+8>>2]|0;
 _LoadSound($6,6603);
 ;HEAP32[26580>>2]=HEAP32[$6>>2]|0;HEAP32[26580+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[26580+8>>2]=HEAP32[$6+8>>2]|0;
 _LoadSound($7,6634);
 ;HEAP32[26592>>2]=HEAP32[$7>>2]|0;HEAP32[26592+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[26592+8>>2]=HEAP32[$7+8>>2]|0;
 _LoadSound($8,6664);
 ;HEAP32[26604>>2]=HEAP32[$8>>2]|0;HEAP32[26604+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[26604+8>>2]=HEAP32[$8+8>>2]|0;
 _LoadSound($9,6695);
 ;HEAP32[26616>>2]=HEAP32[$9>>2]|0;HEAP32[26616+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[26616+8>>2]=HEAP32[$9+8>>2]|0;
 _LoadSound($10,6725);
 ;HEAP32[26628>>2]=HEAP32[$10>>2]|0;HEAP32[26628+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[26628+8>>2]=HEAP32[$10+8>>2]|0;
 _LoadSound($11,6755);
 ;HEAP32[26640>>2]=HEAP32[$11>>2]|0;HEAP32[26640+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[26640+8>>2]=HEAP32[$11+8>>2]|0;
 $12 = (_LoadMusicStream(6783)|0);
 HEAP32[6663] = $12;
 _PlayMusicStream($12);
 $13 = HEAP32[6663]|0;
 _SetMusicVolume($13,1.0);
 HEAP32[6664] = 1;
 _InitLogoScreen();
 _InitTitleScreen();
 _InitGameplayScreen();
 _InitEndingScreen();
 _emscripten_set_main_loop((1|0),0,1);
 ;HEAP32[$fxDieOwl$byval_copy>>2]=HEAP32[26384>>2]|0;HEAP32[$fxDieOwl$byval_copy+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$fxDieOwl$byval_copy+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$fxDieOwl$byval_copy+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$fxDieOwl$byval_copy+16>>2]=HEAP32[26384+16>>2]|0;
 _UnloadTexture($fxDieOwl$byval_copy);
 ;HEAP32[$fxDieOwl$byval_copy>>2]=HEAP32[26404>>2]|0;HEAP32[$fxDieOwl$byval_copy+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$fxDieOwl$byval_copy+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$fxDieOwl$byval_copy+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$fxDieOwl$byval_copy+16>>2]=HEAP32[26404+16>>2]|0;
 _UnloadTexture($fxDieOwl$byval_copy);
 ;HEAP32[$fxDieOwl$byval_copy>>2]=HEAP32[26352>>2]|0;HEAP32[$fxDieOwl$byval_copy+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$fxDieOwl$byval_copy+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$fxDieOwl$byval_copy+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$fxDieOwl$byval_copy+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$fxDieOwl$byval_copy+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$fxDieOwl$byval_copy+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$fxDieOwl$byval_copy+28>>2]=HEAP32[26352+28>>2]|0;
 _UnloadSpriteFont($fxDieOwl$byval_copy);
 _memcpy(($fxDieOwl$byval_copy|0),(26424|0),132)|0;
 _UnloadShader($fxDieOwl$byval_copy);
 ;HEAP32[$fxDieOwl$byval_copy>>2]=HEAP32[26556>>2]|0;HEAP32[$fxDieOwl$byval_copy+4>>2]=HEAP32[26556+4>>2]|0;HEAP32[$fxDieOwl$byval_copy+8>>2]=HEAP32[26556+8>>2]|0;
 _UnloadSound($fxDieOwl$byval_copy);
 ;HEAP32[$fxDieOwl$byval_copy>>2]=HEAP32[26568>>2]|0;HEAP32[$fxDieOwl$byval_copy+4>>2]=HEAP32[26568+4>>2]|0;HEAP32[$fxDieOwl$byval_copy+8>>2]=HEAP32[26568+8>>2]|0;
 _UnloadSound($fxDieOwl$byval_copy);
 ;HEAP32[$fxDieOwl$byval_copy>>2]=HEAP32[26580>>2]|0;HEAP32[$fxDieOwl$byval_copy+4>>2]=HEAP32[26580+4>>2]|0;HEAP32[$fxDieOwl$byval_copy+8>>2]=HEAP32[26580+8>>2]|0;
 _UnloadSound($fxDieOwl$byval_copy);
 ;HEAP32[$fxDieOwl$byval_copy>>2]=HEAP32[26592>>2]|0;HEAP32[$fxDieOwl$byval_copy+4>>2]=HEAP32[26592+4>>2]|0;HEAP32[$fxDieOwl$byval_copy+8>>2]=HEAP32[26592+8>>2]|0;
 _UnloadSound($fxDieOwl$byval_copy);
 ;HEAP32[$fxDieOwl$byval_copy>>2]=HEAP32[26604>>2]|0;HEAP32[$fxDieOwl$byval_copy+4>>2]=HEAP32[26604+4>>2]|0;HEAP32[$fxDieOwl$byval_copy+8>>2]=HEAP32[26604+8>>2]|0;
 _UnloadSound($fxDieOwl$byval_copy);
 ;HEAP32[$fxDieOwl$byval_copy>>2]=HEAP32[26616>>2]|0;HEAP32[$fxDieOwl$byval_copy+4>>2]=HEAP32[26616+4>>2]|0;HEAP32[$fxDieOwl$byval_copy+8>>2]=HEAP32[26616+8>>2]|0;
 _UnloadSound($fxDieOwl$byval_copy);
 ;HEAP32[$fxDieOwl$byval_copy>>2]=HEAP32[26628>>2]|0;HEAP32[$fxDieOwl$byval_copy+4>>2]=HEAP32[26628+4>>2]|0;HEAP32[$fxDieOwl$byval_copy+8>>2]=HEAP32[26628+8>>2]|0;
 _UnloadSound($fxDieOwl$byval_copy);
 ;HEAP32[$fxDieOwl$byval_copy>>2]=HEAP32[26640>>2]|0;HEAP32[$fxDieOwl$byval_copy+4>>2]=HEAP32[26640+4>>2]|0;HEAP32[$fxDieOwl$byval_copy+8>>2]=HEAP32[26640+8>>2]|0;
 _UnloadSound($fxDieOwl$byval_copy);
 $14 = HEAP32[6663]|0;
 _UnloadMusicStream($14);
 _CloseAudioDevice();
 _CloseWindow();
 STACKTOP = sp;return 0;
}
function _UpdateDrawFrame() {
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $0 = sp + 4|0;
 $1 = sp + 12|0;
 $2 = sp;
 $3 = sp + 8|0;
 $4 = HEAP32[6665]|0;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[6664]|0;
   switch ($6|0) {
   case 0:  {
    _UpdateLogoScreen();
    $7 = (_FinishLogoScreen()|0);
    $8 = ($7|0)==(0);
    if ($8) {
     break L1;
    }
    _TransitionToScreen(1);
    break L1;
    break;
   }
   case 1:  {
    _UpdateTitleScreen();
    $9 = (_FinishTitleScreen()|0);
    $10 = ($9|0)==(1);
    if ($10) {
     break L1;
    }
    $11 = (_FinishTitleScreen()|0);
    $12 = ($11|0)==(2);
    if (!($12)) {
     break L1;
    }
    _InitGameplayScreen();
    _TransitionToScreen(3);
    break L1;
    break;
   }
   case 3:  {
    _UpdateGameplayScreen();
    $13 = (_FinishGameplayScreen()|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break L1;
    }
    _InitEndingScreen();
    _TransitionToScreen(4);
    break L1;
    break;
   }
   case 4:  {
    _UpdateEndingScreen();
    $15 = (_FinishEndingScreen()|0);
    $16 = ($15|0)==(0);
    if ($16) {
     break L1;
    }
    _InitGameplayScreen();
    _TransitionToScreen(3);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  } else {
   _UpdateTransition();
  }
 } while(0);
 $17 = HEAP32[6663]|0;
 _UpdateMusicStream($17);
 _BeginDrawing();
 HEAP32[$0>>2] = -1;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$0+3>>0]|0;
 _ClearBackground($$byval_copy1);
 $18 = HEAP32[6664]|0;
 switch ($18|0) {
 case 0:  {
  _DrawLogoScreen();
  break;
 }
 case 1:  {
  _DrawTitleScreen();
  break;
 }
 case 3:  {
  _DrawGameplayScreen();
  break;
 }
 case 4:  {
  _DrawEndingScreen();
  break;
 }
 default: {
 }
 }
 $19 = HEAP32[6665]|0;
 $20 = ($19|0)==(0);
 if (!($20)) {
  _DrawTransition();
 }
 $21 = (_GetScreenHeight()|0);
 $22 = (($21) + -30)|0;
 _DrawFPS(20,$22);
 $23 = (_GetScreenWidth()|0);
 $24 = (($23) + -200)|0;
 $25 = (_GetScreenHeight()|0);
 $26 = (($25) + -50)|0;
 HEAP32[$2>>2] = -1;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$2+3>>0]|0;
 _Fade($1,$$byval_copy1,0.60000002384185791);
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$1+3>>0]|0;
 _DrawRectangle($24,$26,200,40,$$byval_copy1);
 $27 = (_GetScreenWidth()|0);
 $28 = (($27) + -180)|0;
 $29 = (_GetScreenHeight()|0);
 $30 = (($29) + -40)|0;
 HEAP8[$3>>0] = 80;
 $31 = ((($3)) + 1|0);
 HEAP8[$31>>0] = 80;
 $32 = ((($3)) + 2|0);
 HEAP8[$32>>0] = 80;
 $33 = ((($3)) + 3|0);
 HEAP8[$33>>0] = -1;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$3+3>>0]|0;
 _DrawText(6807,$28,$30,20,$$byval_copy1);
 _EndDrawing();
 STACKTOP = sp;return;
}
function _TransitionToScreen($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[6665] = 1;
 HEAP32[2] = $0;
 return;
}
function _UpdateTransition() {
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6666]|0;
 $1 = ($0|0)==(0);
 $2 = +HEAPF32[6667];
 if ($1) {
  $3 = $2 + 0.05000000074505806;
  HEAPF32[6667] = $3;
  $4 = !($3 >= 1.0);
  if ($4) {
   return;
  }
  HEAPF32[6667] = 1.0;
  $5 = HEAP32[2]|0;
  HEAP32[6664] = $5;
  HEAP32[6666] = 1;
  return;
 } else {
  $6 = $2 + -0.05000000074505806;
  HEAPF32[6667] = $6;
  $7 = !($6 <= 0.0);
  if ($7) {
   return;
  }
  HEAPF32[6667] = 0.0;
  HEAP32[6666] = 0;
  HEAP32[6665] = 0;
  HEAP32[2] = -1;
  return;
 }
}
function _DrawTransition() {
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (_GetScreenWidth()|0);
 $3 = (_GetScreenHeight()|0);
 HEAP8[$1>>0] = 0;
 $4 = ((($1)) + 1|0);
 HEAP8[$4>>0] = 0;
 $5 = ((($1)) + 2|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($1)) + 3|0);
 HEAP8[$6>>0] = -1;
 $7 = +HEAPF32[6667];
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$1+3>>0]|0;
 _Fade($0,$$byval_copy1,$7);
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawRectangle(0,0,$2,$3,$$byval_copy1);
 STACKTOP = sp;return;
}
function _InitLogoScreen() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[6813] = 0;
 HEAP32[6814] = 0;
 $0 = (_GetScreenWidth()|0);
 $1 = (($0|0) / 2)&-1;
 $2 = (($1) + -128)|0;
 HEAP32[6811] = $2;
 $3 = (_GetScreenHeight()|0);
 $4 = (($3|0) / 2)&-1;
 $5 = (($4) + -128)|0;
 HEAP32[6812] = $5;
 return;
}
function _UpdateLogoScreen() {
 var $$014 = 0, $$0913 = 0, $$pr11 = 0, $$pr12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6813]|0;
 $1 = (($0) + 1)|0;
 HEAP32[6813] = $1;
 $2 = HEAP32[6807]|0;
 L1: do {
  switch ($2|0) {
  case 0:  {
   $3 = (($0) + 2)|0;
   HEAP32[6813] = $3;
   $4 = ($3|0)==(120);
   if ($4) {
    HEAP32[6807] = 1;
    HEAP32[6813] = 0;
    label = 32;
   } else {
    label = 32;
   }
   break;
  }
  case 1:  {
   $5 = HEAP32[3]|0;
   $6 = (($5) + 4)|0;
   HEAP32[3] = $6;
   $7 = HEAP32[4]|0;
   $8 = (($7) + 4)|0;
   HEAP32[4] = $8;
   $9 = ($6|0)==(256);
   if ($9) {
    HEAP32[6807] = 2;
    label = 32;
   } else {
    label = 32;
   }
   break;
  }
  case 2:  {
   $10 = HEAP32[5]|0;
   $11 = (($10) + 4)|0;
   HEAP32[5] = $11;
   $12 = HEAP32[6]|0;
   $13 = (($12) + 4)|0;
   HEAP32[6] = $13;
   $14 = ($11|0)==(256);
   if ($14) {
    HEAP32[6810] = 0;
    $15 = (_strlen(6957)|0);
    $16 = ($15|0)>(0);
    if ($16) {
     $$0913 = 0;
     while(1) {
      $17 = (6957 + ($$0913)|0);
      HEAP8[$17>>0] = 32;
      $18 = (($$0913) + 1)|0;
      $19 = (_strlen(6957)|0);
      $20 = ($18|0)<($19|0);
      if ($20) {
       $$0913 = $18;
      } else {
       break;
      }
     }
    }
    HEAP32[6807] = 3;
    label = 32;
   } else {
    label = 32;
   }
   break;
  }
  case 3:  {
   $21 = (($0) + 2)|0;
   HEAP32[6813] = $21;
   $22 = (($21|0) % 12)&-1;
   $23 = ($22|0)==(0);
   $24 = HEAP32[6806]|0;
   if ($23) {
    $25 = (($24) + 1)|0;
    HEAP32[6806] = $25;
    $26 = $25;
   } else {
    $26 = $24;
   }
   switch ($26|0) {
   case 1:  {
    HEAP8[6949] = 114;
    break;
   }
   case 2:  {
    HEAP8[(6950)>>0] = 97;
    break;
   }
   case 3:  {
    HEAP8[(6951)>>0] = 121;
    break;
   }
   case 4:  {
    HEAP8[(6952)>>0] = 108;
    break;
   }
   case 5:  {
    HEAP8[(6953)>>0] = 105;
    break;
   }
   case 6:  {
    HEAP8[(6954)>>0] = 98;
    break;
   }
   default: {
   }
   }
   $27 = HEAP32[6806]|0;
   $28 = ($27|0)>(9);
   if ($28) {
    $29 = HEAP32[6813]|0;
    $30 = $29 & 1;
    $31 = ($30|0)==(0);
    if ($31) {
     $32 = HEAP32[6810]|0;
     $33 = (($32) + 1)|0;
     HEAP32[6810] = $33;
    }
    $34 = HEAP32[6808]|0;
    $35 = ($34|0)==(0);
    if ($35) {
     $36 = HEAP32[6810]|0;
     $37 = ($36|0)<(33);
     if ($37) {
      (_strncpy(6957,6821,$36)|0);
      label = 32;
      break L1;
     }
     $38 = (_strlen(6957)|0);
     $39 = ($38|0)>(0);
     if ($39) {
      $$014 = 0;
      while(1) {
       $40 = (6957 + ($$014)|0);
       HEAP8[$40>>0] = 32;
       $41 = (($$014) + 1)|0;
       $42 = (_strlen(6957)|0);
       $43 = ($41|0)<($42|0);
       if ($43) {
        $$014 = $41;
       } else {
        break;
       }
      }
     }
     HEAP32[6810] = 0;
     HEAP32[6808] = 1;
     label = 32;
     break L1;
    } else {
     $44 = HEAP32[6809]|0;
     $45 = ($44|0)==(0);
     if (!($45)) {
      break L1;
     }
     $46 = HEAP32[6810]|0;
     $47 = ($46|0)<(32);
     if ($47) {
      (_strncpy(6957,6885,$46)|0);
      label = 32;
      break L1;
     }
     HEAP32[6809] = 1;
     HEAP32[6813] = 1;
     return;
    }
   } else {
    label = 32;
   }
   break;
  }
  default: {
   label = 32;
  }
  }
 } while(0);
 if ((label|0) == 32) {
  $$pr11 = HEAP32[6809]|0;
  $48 = ($$pr11|0)==(0);
  if ($48) {
   return;
  }
 }
 $$pr12 = HEAP32[6813]|0;
 $49 = (($$pr12) + 1)|0;
 HEAP32[6813] = $49;
 $50 = ($$pr12|0)>(149);
 if (!($50)) {
  return;
 }
 HEAP32[6814] = 1;
 return;
}
function _DrawLogoScreen() {
 var $$byval_copy16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy16 = sp + 68|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = sp + 56|0;
 $3 = sp + 52|0;
 $4 = sp + 48|0;
 $5 = sp + 44|0;
 $6 = sp + 40|0;
 $7 = sp + 36|0;
 $8 = sp + 32|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = sp + 12|0;
 $14 = sp + 8|0;
 $15 = sp + 4|0;
 $16 = sp;
 $17 = HEAP32[6807]|0;
 switch ($17|0) {
 case 0:  {
  $18 = HEAP32[6813]|0;
  $19 = (($18|0) / 15)&-1;
  $20 = $19 & 1;
  $21 = ($20|0)==(0);
  if ($21) {
   STACKTOP = sp;return;
  }
  $22 = HEAP32[6811]|0;
  $23 = HEAP32[6812]|0;
  $24 = (($23) + -60)|0;
  HEAP8[$0>>0] = 0;
  $25 = ((($0)) + 1|0);
  HEAP8[$25>>0] = 0;
  $26 = ((($0)) + 2|0);
  HEAP8[$26>>0] = 0;
  $27 = ((($0)) + 3|0);
  HEAP8[$27>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$0+3>>0]|0;
  _DrawRectangle($22,$24,16,16,$$byval_copy16);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $28 = HEAP32[6811]|0;
  $29 = HEAP32[6812]|0;
  $30 = (($29) + -60)|0;
  $31 = HEAP32[3]|0;
  HEAP8[$1>>0] = 0;
  $32 = ((($1)) + 1|0);
  HEAP8[$32>>0] = 0;
  $33 = ((($1)) + 2|0);
  HEAP8[$33>>0] = 0;
  $34 = ((($1)) + 3|0);
  HEAP8[$34>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$1+3>>0]|0;
  _DrawRectangle($28,$30,$31,16,$$byval_copy16);
  $35 = HEAP32[6811]|0;
  $36 = HEAP32[6812]|0;
  $37 = (($36) + -60)|0;
  $38 = HEAP32[4]|0;
  HEAP8[$2>>0] = 0;
  $39 = ((($2)) + 1|0);
  HEAP8[$39>>0] = 0;
  $40 = ((($2)) + 2|0);
  HEAP8[$40>>0] = 0;
  $41 = ((($2)) + 3|0);
  HEAP8[$41>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$2+3>>0]|0;
  _DrawRectangle($35,$37,16,$38,$$byval_copy16);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $42 = HEAP32[6811]|0;
  $43 = HEAP32[6812]|0;
  $44 = (($43) + -60)|0;
  $45 = HEAP32[3]|0;
  HEAP8[$3>>0] = 0;
  $46 = ((($3)) + 1|0);
  HEAP8[$46>>0] = 0;
  $47 = ((($3)) + 2|0);
  HEAP8[$47>>0] = 0;
  $48 = ((($3)) + 3|0);
  HEAP8[$48>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$3+3>>0]|0;
  _DrawRectangle($42,$44,$45,16,$$byval_copy16);
  $49 = HEAP32[6811]|0;
  $50 = HEAP32[6812]|0;
  $51 = (($50) + -60)|0;
  $52 = HEAP32[4]|0;
  HEAP8[$4>>0] = 0;
  $53 = ((($4)) + 1|0);
  HEAP8[$53>>0] = 0;
  $54 = ((($4)) + 2|0);
  HEAP8[$54>>0] = 0;
  $55 = ((($4)) + 3|0);
  HEAP8[$55>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$4+3>>0]|0;
  _DrawRectangle($49,$51,16,$52,$$byval_copy16);
  $56 = HEAP32[6811]|0;
  $57 = (($56) + 240)|0;
  $58 = HEAP32[6812]|0;
  $59 = (($58) + -60)|0;
  $60 = HEAP32[6]|0;
  HEAP8[$5>>0] = 0;
  $61 = ((($5)) + 1|0);
  HEAP8[$61>>0] = 0;
  $62 = ((($5)) + 2|0);
  HEAP8[$62>>0] = 0;
  $63 = ((($5)) + 3|0);
  HEAP8[$63>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$5+3>>0]|0;
  _DrawRectangle($57,$59,16,$60,$$byval_copy16);
  $64 = HEAP32[6811]|0;
  $65 = HEAP32[6812]|0;
  $66 = (($65) + 180)|0;
  $67 = HEAP32[5]|0;
  HEAP8[$6>>0] = 0;
  $68 = ((($6)) + 1|0);
  HEAP8[$68>>0] = 0;
  $69 = ((($6)) + 2|0);
  HEAP8[$69>>0] = 0;
  $70 = ((($6)) + 3|0);
  HEAP8[$70>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$6+3>>0]|0;
  _DrawRectangle($64,$66,$67,16,$$byval_copy16);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $71 = HEAP32[6811]|0;
  $72 = HEAP32[6812]|0;
  $73 = (($72) + -60)|0;
  $74 = HEAP32[3]|0;
  HEAP8[$7>>0] = 0;
  $75 = ((($7)) + 1|0);
  HEAP8[$75>>0] = 0;
  $76 = ((($7)) + 2|0);
  HEAP8[$76>>0] = 0;
  $77 = ((($7)) + 3|0);
  HEAP8[$77>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$7+3>>0]|0;
  _DrawRectangle($71,$73,$74,16,$$byval_copy16);
  $78 = HEAP32[6811]|0;
  $79 = HEAP32[6812]|0;
  $80 = (($79) + -44)|0;
  $81 = HEAP32[4]|0;
  $82 = (($81) + -32)|0;
  HEAP8[$8>>0] = 0;
  $83 = ((($8)) + 1|0);
  HEAP8[$83>>0] = 0;
  $84 = ((($8)) + 2|0);
  HEAP8[$84>>0] = 0;
  $85 = ((($8)) + 3|0);
  HEAP8[$85>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$8+3>>0]|0;
  _DrawRectangle($78,$80,16,$82,$$byval_copy16);
  $86 = HEAP32[6811]|0;
  $87 = (($86) + 240)|0;
  $88 = HEAP32[6812]|0;
  $89 = (($88) + -44)|0;
  $90 = HEAP32[6]|0;
  $91 = (($90) + -32)|0;
  HEAP8[$9>>0] = 0;
  $92 = ((($9)) + 1|0);
  HEAP8[$92>>0] = 0;
  $93 = ((($9)) + 2|0);
  HEAP8[$93>>0] = 0;
  $94 = ((($9)) + 3|0);
  HEAP8[$94>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$9>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$9+3>>0]|0;
  _DrawRectangle($87,$89,16,$91,$$byval_copy16);
  $95 = HEAP32[6811]|0;
  $96 = HEAP32[6812]|0;
  $97 = (($96) + 180)|0;
  $98 = HEAP32[5]|0;
  HEAP8[$10>>0] = 0;
  $99 = ((($10)) + 1|0);
  HEAP8[$99>>0] = 0;
  $100 = ((($10)) + 2|0);
  HEAP8[$100>>0] = 0;
  $101 = ((($10)) + 3|0);
  HEAP8[$101>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$10+3>>0]|0;
  _DrawRectangle($95,$97,$98,16,$$byval_copy16);
  $102 = (_GetScreenWidth()|0);
  $103 = (($102|0) / 2)&-1;
  $104 = (($103) + -112)|0;
  $105 = (_GetScreenHeight()|0);
  $106 = (($105|0) / 2)&-1;
  $107 = (($106) + -172)|0;
  HEAP8[$11>>0] = -11;
  $108 = ((($11)) + 1|0);
  HEAP8[$108>>0] = -11;
  $109 = ((($11)) + 2|0);
  HEAP8[$109>>0] = -11;
  $110 = ((($11)) + 3|0);
  HEAP8[$110>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$11>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$11+3>>0]|0;
  _DrawRectangle($104,$107,224,224,$$byval_copy16);
  $111 = (_GetScreenWidth()|0);
  $112 = (($111|0) / 2)&-1;
  $113 = (($112) + -44)|0;
  $114 = (_GetScreenHeight()|0);
  $115 = (($114|0) / 2)&-1;
  $116 = (($115) + -12)|0;
  HEAP8[$12>>0] = 0;
  $117 = ((($12)) + 1|0);
  HEAP8[$117>>0] = 0;
  $118 = ((($12)) + 2|0);
  HEAP8[$118>>0] = 0;
  $119 = ((($12)) + 3|0);
  HEAP8[$119>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$12>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$12+3>>0]|0;
  _DrawText(6949,$113,$116,50,$$byval_copy16);
  $120 = HEAP32[6808]|0;
  $121 = ($120|0)==(0);
  $122 = (_GetScreenWidth()|0);
  $123 = (($122|0) / 2)&-1;
  $124 = (_MeasureText(6821,30)|0);
  $125 = (($124|0) / 2)&-1;
  $126 = (($123) - ($125))|0;
  $127 = HEAP32[6812]|0;
  $128 = (($127) + 230)|0;
  if ($121) {
   HEAP8[$13>>0] = -126;
   $129 = ((($13)) + 1|0);
   HEAP8[$129>>0] = -126;
   $130 = ((($13)) + 2|0);
   HEAP8[$130>>0] = -126;
   $131 = ((($13)) + 3|0);
   HEAP8[$131>>0] = -1;
   ;HEAP8[$$byval_copy16>>0]=HEAP8[$13>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$13+3>>0]|0;
   _DrawText(6957,$126,$128,30,$$byval_copy16);
   STACKTOP = sp;return;
  }
  HEAP8[$14>>0] = -126;
  $132 = ((($14)) + 1|0);
  HEAP8[$132>>0] = -126;
  $133 = ((($14)) + 2|0);
  HEAP8[$133>>0] = -126;
  $134 = ((($14)) + 3|0);
  HEAP8[$134>>0] = -1;
  ;HEAP8[$$byval_copy16>>0]=HEAP8[$14>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$14+3>>0]|0;
  _DrawText(6821,$126,$128,30,$$byval_copy16);
  $135 = HEAP32[6809]|0;
  $136 = ($135|0)==(0);
  $137 = (_GetScreenWidth()|0);
  $138 = (($137|0) / 2)&-1;
  if ($136) {
   $139 = (_MeasureText(6885,30)|0);
   $140 = (($139|0) / 2)&-1;
   $141 = (($138) - ($140))|0;
   $142 = HEAP32[6812]|0;
   $143 = (($142) + 280)|0;
   HEAP8[$15>>0] = -126;
   $144 = ((($15)) + 1|0);
   HEAP8[$144>>0] = -126;
   $145 = ((($15)) + 2|0);
   HEAP8[$145>>0] = -126;
   $146 = ((($15)) + 3|0);
   HEAP8[$146>>0] = -1;
   ;HEAP8[$$byval_copy16>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$15+3>>0]|0;
   _DrawText(6957,$141,$143,30,$$byval_copy16);
   STACKTOP = sp;return;
  } else {
   $147 = (_MeasureText(6821,30)|0);
   $148 = (($147|0) / 2)&-1;
   $149 = (($138) - ($148))|0;
   $150 = HEAP32[6812]|0;
   $151 = (($150) + 280)|0;
   HEAP8[$16>>0] = -126;
   $152 = ((($16)) + 1|0);
   HEAP8[$152>>0] = -126;
   $153 = ((($16)) + 2|0);
   HEAP8[$153>>0] = -126;
   $154 = ((($16)) + 3|0);
   HEAP8[$154>>0] = -1;
   ;HEAP8[$$byval_copy16>>0]=HEAP8[$16>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$16+3>>0]|0;
   _DrawText(6885,$149,$151,30,$$byval_copy16);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _UnloadLogoScreen() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _FinishLogoScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6814]|0;
 return ($0|0);
}
function _InitTitleScreen() {
 var $$0267277 = 0, $$0268276 = 0, $$0269275 = 0, $$0278 = 0, $$sroa$0103$0$$sroa_idx = 0, $$sroa$0106$0$$sroa_idx = 0, $$sroa$0110$0$$sroa_idx = 0, $$sroa$0113$0$$sroa_idx = 0, $$sroa$0117$0$$sroa_idx = 0, $$sroa$0120$0$$sroa_idx = 0, $$sroa$0124$0$$sroa_idx = 0, $$sroa$0127$0$$sroa_idx = 0, $$sroa$0131$0$$sroa_idx = 0, $$sroa$0134$0$$sroa_idx = 0, $$sroa$0138$0$$sroa_idx = 0, $$sroa$0141$0$$sroa_idx = 0, $$sroa$0145$0$$sroa_idx = 0, $$sroa$0148$0$$sroa_idx = 0, $$sroa$0152$0$$sroa_idx = 0, $$sroa$020$0$$sroa_idx = 0;
 var $$sroa$023$0$$sroa_idx = 0, $$sroa$052$0$$sroa_idx = 0, $$sroa$055$0$$sroa_idx = 0, $$sroa$068$0$$sroa_idx = 0, $$sroa$072$0$$sroa_idx = 0, $$sroa$085$0$$sroa_idx = 0, $$sroa$089$0$$sroa_idx = 0, $$sroa$092$0$$sroa_idx = 0, $$sroa$096$0$$sroa_idx = 0, $$sroa$099$0$$sroa_idx = 0, $$sroa$2104$0$$sroa_idx105 = 0, $$sroa$2111$0$$sroa_idx112 = 0, $$sroa$2118$0$$sroa_idx119 = 0, $$sroa$2125$0$$sroa_idx126 = 0, $$sroa$2132$0$$sroa_idx133 = 0, $$sroa$2139$0$$sroa_idx140 = 0, $$sroa$2146$0$$sroa_idx147 = 0, $$sroa$2153$0$$sroa_idx154 = 0, $$sroa$221$0$$sroa_idx22 = 0, $$sroa$224$0$$sroa_idx25 = 0;
 var $$sroa$256$0$$sroa_idx57 = 0, $$sroa$273$0$$sroa_idx74 = 0, $$sroa$290$0$$sroa_idx91 = 0, $$sroa$297$0$$sroa_idx98 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0;
 var $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0;
 var $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond279 = 0, $exitcond280 = 0, $exitcond281 = 0, $font$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $font$byval_copy = sp + 8|0;
 $0 = sp;
 HEAP32[6815] = 0;
 HEAP32[6816] = 0;
 HEAPF32[6817] = -100.0;
 HEAPF32[6818] = 100.0;
 HEAPF32[6819] = 700.0;
 HEAPF32[6820] = 320.0;
 HEAPF32[6821] = 120.0;
 $1 = (_GetRandomValue(0,3)|0);
 HEAP32[6803] = $1;
 $2 = (_GetRandomValue(10,100)|0);
 HEAP32[6822] = $2;
 $3 = (_GetRandomValue(100,200)|0);
 HEAP32[6823] = $3;
 $4 = (_GetRandomValue(0,100)|0);
 HEAP32[6805] = $4;
 HEAPF32[6824] = 0.0;
 HEAPF32[(27300)>>2] = 0.0;
 HEAP32[(27304)>>2] = 0;
 HEAP32[8109] = 0;
 HEAPF32[8110] = 0.0;
 HEAPF32[(32444)>>2] = 0.0;
 HEAP32[(32448)>>2] = 0;
 HEAP32[(37588)>>2] = 0;
 HEAPF32[10680] = 0.0;
 HEAPF32[(42724)>>2] = 0.0;
 HEAP32[(42728)>>2] = 0;
 HEAPF32[11965] = 0.0;
 HEAPF32[(47864)>>2] = 0.0;
 HEAP32[(47868)>>2] = 0;
 HEAPF32[12150] = 0.0;
 HEAPF32[(48604)>>2] = 0.0;
 HEAP32[(48608)>>2] = 0;
 HEAPF32[22395] = 0.0;
 HEAPF32[(89584)>>2] = 0.0;
 HEAP32[(89588)>>2] = 0;
 $$0278 = 0;
 while(1) {
  $5 = (((27316 + (($$0278*40)|0)|0)) + 36|0);
  HEAP32[$5>>2] = 0;
  $$sroa$0152$0$$sroa_idx = (27316 + (($$0278*40)|0)|0);
  HEAPF32[$$sroa$0152$0$$sroa_idx>>2] = 0.0;
  $$sroa$2153$0$$sroa_idx154 = (((27316 + (($$0278*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2153$0$$sroa_idx154>>2] = 0.0;
  $6 = (_GetRandomValue(3,9)|0);
  $7 = (+($6|0));
  $8 = $7 / 10.0;
  $9 = (((27316 + (($$0278*40)|0)|0)) + 20|0);
  HEAPF32[$9>>2] = $8;
  $10 = (_GetRandomValue(0,360)|0);
  $11 = (+($10|0));
  $12 = (((27316 + (($$0278*40)|0)|0)) + 16|0);
  HEAPF32[$12>>2] = $11;
  $$sroa$0148$0$$sroa_idx = (((27316 + (($$0278*40)|0)|0)) + 24|0);
  $13 = (((27316 + (($$0278*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0148$0$$sroa_idx>>2] = -1;
  HEAPF32[$13>>2] = 1.0;
  $14 = (((130560 + (($$0278*40)|0)|0)) + 36|0);
  HEAP32[$14>>2] = 0;
  $$sroa$0145$0$$sroa_idx = (130560 + (($$0278*40)|0)|0);
  HEAPF32[$$sroa$0145$0$$sroa_idx>>2] = 0.0;
  $$sroa$2146$0$$sroa_idx147 = (((130560 + (($$0278*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2146$0$$sroa_idx147>>2] = 0.0;
  $15 = (_GetRandomValue(2,8)|0);
  $16 = (+($15|0));
  $17 = $16 / 10.0;
  $18 = (((130560 + (($$0278*40)|0)|0)) + 20|0);
  HEAPF32[$18>>2] = $17;
  $19 = (_GetRandomValue(0,360)|0);
  $20 = (+($19|0));
  $21 = (((130560 + (($$0278*40)|0)|0)) + 16|0);
  HEAPF32[$21>>2] = $20;
  $$sroa$0141$0$$sroa_idx = (((130560 + (($$0278*40)|0)|0)) + 24|0);
  $22 = (((130560 + (($$0278*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0141$0$$sroa_idx>>2] = -1;
  HEAPF32[$22>>2] = 0.69999998807907104;
  $23 = (((32460 + (($$0278*40)|0)|0)) + 36|0);
  HEAP32[$23>>2] = 0;
  $$sroa$0138$0$$sroa_idx = (32460 + (($$0278*40)|0)|0);
  HEAPF32[$$sroa$0138$0$$sroa_idx>>2] = 0.0;
  $$sroa$2139$0$$sroa_idx140 = (((32460 + (($$0278*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2139$0$$sroa_idx140>>2] = 0.0;
  $24 = (_GetRandomValue(3,9)|0);
  $25 = (+($24|0));
  $26 = $25 / 10.0;
  $27 = (((32460 + (($$0278*40)|0)|0)) + 20|0);
  HEAPF32[$27>>2] = $26;
  $28 = (_GetRandomValue(0,360)|0);
  $29 = (+($28|0));
  $30 = (((32460 + (($$0278*40)|0)|0)) + 16|0);
  HEAPF32[$30>>2] = $29;
  $$sroa$0134$0$$sroa_idx = (((32460 + (($$0278*40)|0)|0)) + 24|0);
  $31 = (((32460 + (($$0278*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0134$0$$sroa_idx>>2] = -1;
  HEAPF32[$31>>2] = 1.0;
  $32 = (((135680 + (($$0278*40)|0)|0)) + 36|0);
  HEAP32[$32>>2] = 0;
  $$sroa$0131$0$$sroa_idx = (135680 + (($$0278*40)|0)|0);
  HEAPF32[$$sroa$0131$0$$sroa_idx>>2] = 0.0;
  $$sroa$2132$0$$sroa_idx133 = (((135680 + (($$0278*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2132$0$$sroa_idx133>>2] = 0.0;
  $33 = (_GetRandomValue(2,8)|0);
  $34 = (+($33|0));
  $35 = $34 / 10.0;
  $36 = (((135680 + (($$0278*40)|0)|0)) + 20|0);
  HEAPF32[$36>>2] = $35;
  $37 = (_GetRandomValue(0,360)|0);
  $38 = (+($37|0));
  $39 = (((135680 + (($$0278*40)|0)|0)) + 16|0);
  HEAPF32[$39>>2] = $38;
  $$sroa$0127$0$$sroa_idx = (((135680 + (($$0278*40)|0)|0)) + 24|0);
  $40 = (((135680 + (($$0278*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0127$0$$sroa_idx>>2] = -1;
  HEAPF32[$40>>2] = 0.69999998807907104;
  $41 = (((37600 + (($$0278*40)|0)|0)) + 36|0);
  HEAP32[$41>>2] = 0;
  $$sroa$0124$0$$sroa_idx = (37600 + (($$0278*40)|0)|0);
  HEAPF32[$$sroa$0124$0$$sroa_idx>>2] = 0.0;
  $$sroa$2125$0$$sroa_idx126 = (((37600 + (($$0278*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2125$0$$sroa_idx126>>2] = 0.0;
  $42 = (_GetRandomValue(3,9)|0);
  $43 = (+($42|0));
  $44 = $43 / 10.0;
  $45 = (((37600 + (($$0278*40)|0)|0)) + 20|0);
  HEAPF32[$45>>2] = $44;
  $46 = (((37600 + (($$0278*40)|0)|0)) + 16|0);
  HEAPF32[$46>>2] = 0.0;
  $$sroa$0120$0$$sroa_idx = (((37600 + (($$0278*40)|0)|0)) + 24|0);
  $47 = (((37600 + (($$0278*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0120$0$$sroa_idx>>2] = -1;
  HEAPF32[$47>>2] = 1.0;
  $48 = (_GetRandomValue(0,180)|0);
  $49 = (+($48|0));
  $50 = (((37600 + (($$0278*40)|0)|0)) + 32|0);
  HEAPF32[$50>>2] = $49;
  $51 = (((140800 + (($$0278*40)|0)|0)) + 36|0);
  HEAP32[$51>>2] = 0;
  $$sroa$0117$0$$sroa_idx = (140800 + (($$0278*40)|0)|0);
  HEAPF32[$$sroa$0117$0$$sroa_idx>>2] = 0.0;
  $$sroa$2118$0$$sroa_idx119 = (((140800 + (($$0278*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2118$0$$sroa_idx119>>2] = 0.0;
  $52 = (_GetRandomValue(2,8)|0);
  $53 = (+($52|0));
  $54 = $53 / 10.0;
  $55 = (((140800 + (($$0278*40)|0)|0)) + 20|0);
  HEAPF32[$55>>2] = $54;
  $56 = (((140800 + (($$0278*40)|0)|0)) + 16|0);
  HEAPF32[$56>>2] = 0.0;
  $$sroa$0113$0$$sroa_idx = (((140800 + (($$0278*40)|0)|0)) + 24|0);
  $57 = (((140800 + (($$0278*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0113$0$$sroa_idx>>2] = -1;
  HEAPF32[$57>>2] = 0.69999998807907104;
  $58 = (_GetRandomValue(0,180)|0);
  $59 = (+($58|0));
  $60 = (((140800 + (($$0278*40)|0)|0)) + 32|0);
  HEAPF32[$60>>2] = $59;
  $61 = (((42740 + (($$0278*40)|0)|0)) + 36|0);
  HEAP32[$61>>2] = 0;
  $$sroa$0110$0$$sroa_idx = (42740 + (($$0278*40)|0)|0);
  HEAPF32[$$sroa$0110$0$$sroa_idx>>2] = 0.0;
  $$sroa$2111$0$$sroa_idx112 = (((42740 + (($$0278*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2111$0$$sroa_idx112>>2] = 0.0;
  $62 = (_GetRandomValue(3,9)|0);
  $63 = (+($62|0));
  $64 = $63 / 10.0;
  $65 = (((42740 + (($$0278*40)|0)|0)) + 20|0);
  HEAPF32[$65>>2] = $64;
  $66 = (_GetRandomValue(0,360)|0);
  $67 = (+($66|0));
  $68 = (((42740 + (($$0278*40)|0)|0)) + 16|0);
  HEAPF32[$68>>2] = $67;
  $$sroa$0106$0$$sroa_idx = (((42740 + (($$0278*40)|0)|0)) + 24|0);
  $69 = (((42740 + (($$0278*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0106$0$$sroa_idx>>2] = -1;
  HEAPF32[$69>>2] = 1.0;
  $70 = (((145920 + (($$0278*40)|0)|0)) + 36|0);
  HEAP32[$70>>2] = 0;
  $$sroa$0103$0$$sroa_idx = (145920 + (($$0278*40)|0)|0);
  HEAPF32[$$sroa$0103$0$$sroa_idx>>2] = 0.0;
  $$sroa$2104$0$$sroa_idx105 = (((145920 + (($$0278*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2104$0$$sroa_idx105>>2] = 0.0;
  $71 = (_GetRandomValue(2,8)|0);
  $72 = (+($71|0));
  $73 = $72 / 10.0;
  $74 = (((145920 + (($$0278*40)|0)|0)) + 20|0);
  HEAPF32[$74>>2] = $73;
  $75 = (_GetRandomValue(0,360)|0);
  $76 = (+($75|0));
  $77 = (((145920 + (($$0278*40)|0)|0)) + 16|0);
  HEAPF32[$77>>2] = $76;
  $$sroa$099$0$$sroa_idx = (((145920 + (($$0278*40)|0)|0)) + 24|0);
  $78 = (((145920 + (($$0278*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$099$0$$sroa_idx>>2] = -1;
  HEAPF32[$78>>2] = 0.69999998807907104;
  $79 = (((151060 + (($$0278*40)|0)|0)) + 36|0);
  HEAP32[$79>>2] = 0;
  $$sroa$096$0$$sroa_idx = (151060 + (($$0278*40)|0)|0);
  HEAPF32[$$sroa$096$0$$sroa_idx>>2] = 0.0;
  $$sroa$297$0$$sroa_idx98 = (((151060 + (($$0278*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$297$0$$sroa_idx98>>2] = 0.0;
  $80 = (_GetRandomValue(3,9)|0);
  $81 = (+($80|0));
  $82 = $81 / 10.0;
  $83 = (((151060 + (($$0278*40)|0)|0)) + 20|0);
  HEAPF32[$83>>2] = $82;
  $84 = (((151060 + (($$0278*40)|0)|0)) + 16|0);
  HEAPF32[$84>>2] = -20.0;
  $$sroa$092$0$$sroa_idx = (((151060 + (($$0278*40)|0)|0)) + 24|0);
  $85 = (((151060 + (($$0278*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$092$0$$sroa_idx>>2] = -1;
  HEAPF32[$85>>2] = 1.0;
  $86 = (((156180 + (($$0278*40)|0)|0)) + 36|0);
  HEAP32[$86>>2] = 0;
  $$sroa$089$0$$sroa_idx = (156180 + (($$0278*40)|0)|0);
  HEAPF32[$$sroa$089$0$$sroa_idx>>2] = 0.0;
  $$sroa$290$0$$sroa_idx91 = (((156180 + (($$0278*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$290$0$$sroa_idx91>>2] = 0.0;
  $87 = (_GetRandomValue(2,8)|0);
  $88 = (+($87|0));
  $89 = $88 / 10.0;
  $90 = (((156180 + (($$0278*40)|0)|0)) + 20|0);
  HEAPF32[$90>>2] = $89;
  $91 = (((156180 + (($$0278*40)|0)|0)) + 16|0);
  HEAPF32[$91>>2] = -20.0;
  $$sroa$085$0$$sroa_idx = (((156180 + (($$0278*40)|0)|0)) + 24|0);
  $92 = (((156180 + (($$0278*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$085$0$$sroa_idx>>2] = -1;
  HEAPF32[$92>>2] = 0.69999998807907104;
  $93 = (($$0278) + 1)|0;
  $exitcond281 = ($93|0)==(128);
  if ($exitcond281) {
   break;
  } else {
   $$0278 = $93;
  }
 }
 $$0267277 = 0;
 while(1) {
  $94 = (((48620 + (($$0267277*40)|0)|0)) + 36|0);
  HEAP32[$94>>2] = 0;
  $$sroa$072$0$$sroa_idx = (48620 + (($$0267277*40)|0)|0);
  HEAPF32[$$sroa$072$0$$sroa_idx>>2] = 0.0;
  $$sroa$273$0$$sroa_idx74 = (((48620 + (($$0267277*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$273$0$$sroa_idx74>>2] = 0.0;
  $95 = (_GetRandomValue(3,9)|0);
  $96 = (+($95|0));
  $97 = $96 / 10.0;
  $98 = (((48620 + (($$0267277*40)|0)|0)) + 20|0);
  HEAPF32[$98>>2] = $97;
  $99 = (((48620 + (($$0267277*40)|0)|0)) + 16|0);
  HEAPF32[$99>>2] = -40.0;
  $$sroa$068$0$$sroa_idx = (((48620 + (($$0267277*40)|0)|0)) + 24|0);
  $100 = (((48620 + (($$0267277*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$068$0$$sroa_idx>>2] = -1;
  HEAPF32[$100>>2] = 1.0;
  $101 = (($$0267277) + 1)|0;
  $exitcond280 = ($101|0)==(1024);
  if ($exitcond280) {
   $$0268276 = 0;
   break;
  } else {
   $$0267277 = $101;
  }
 }
 while(1) {
  $102 = (((89600 + (($$0268276*40)|0)|0)) + 36|0);
  HEAP32[$102>>2] = 0;
  $$sroa$055$0$$sroa_idx = (89600 + (($$0268276*40)|0)|0);
  HEAPF32[$$sroa$055$0$$sroa_idx>>2] = 0.0;
  $$sroa$256$0$$sroa_idx57 = (((89600 + (($$0268276*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$256$0$$sroa_idx57>>2] = 0.0;
  $103 = (_GetRandomValue(4,8)|0);
  $104 = (+($103|0));
  $105 = $104 / 10.0;
  $106 = (((89600 + (($$0268276*40)|0)|0)) + 20|0);
  HEAPF32[$106>>2] = $105;
  $107 = (((89600 + (($$0268276*40)|0)|0)) + 16|0);
  HEAPF32[$107>>2] = 40.0;
  $$sroa$052$0$$sroa_idx = (((89600 + (($$0268276*40)|0)|0)) + 24|0);
  $108 = (((89600 + (($$0268276*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$052$0$$sroa_idx>>2] = -1;
  HEAPF32[$108>>2] = 1.0;
  $109 = (($$0268276) + 1)|0;
  $exitcond279 = ($109|0)==(256);
  if ($exitcond279) {
   $$0269275 = 0;
   break;
  } else {
   $$0268276 = $109;
  }
 }
 while(1) {
  $$sroa$023$0$$sroa_idx = (47880 + (($$0269275*36)|0)|0);
  HEAPF32[$$sroa$023$0$$sroa_idx>>2] = 0.0;
  $$sroa$224$0$$sroa_idx25 = (((47880 + (($$0269275*36)|0)|0)) + 4|0);
  HEAPF32[$$sroa$224$0$$sroa_idx25>>2] = 0.0;
  $110 = (((47880 + (($$0269275*36)|0)|0)) + 8|0);
  HEAP8[$110>>0] = -1;
  $111 = (((47880 + (($$0269275*36)|0)|0)) + 9|0);
  HEAP8[$111>>0] = -1;
  $112 = (((47880 + (($$0269275*36)|0)|0)) + 10|0);
  HEAP8[$112>>0] = -74;
  $113 = (((47880 + (($$0269275*36)|0)|0)) + 11|0);
  HEAP8[$113>>0] = -1;
  $114 = (((47880 + (($$0269275*36)|0)|0)) + 12|0);
  HEAPF32[$114>>2] = 0.0;
  $115 = (_GetRandomValue(15,20)|0);
  $116 = (+($115|0));
  $117 = $116 / 10.0;
  $118 = (((47880 + (($$0269275*36)|0)|0)) + 16|0);
  HEAPF32[$118>>2] = $117;
  $119 = (((47880 + (($$0269275*36)|0)|0)) + 20|0);
  $$sroa$020$0$$sroa_idx = (161300 + (($$0269275*36)|0)|0);
  ;HEAP32[$119>>2]=0|0;HEAP32[$119+4>>2]=0|0;HEAP32[$119+8>>2]=0|0;HEAP32[$119+12>>2]=0|0;
  HEAPF32[$$sroa$020$0$$sroa_idx>>2] = 0.0;
  $$sroa$221$0$$sroa_idx22 = (((161300 + (($$0269275*36)|0)|0)) + 4|0);
  HEAPF32[$$sroa$221$0$$sroa_idx22>>2] = 0.0;
  $120 = (((161300 + (($$0269275*36)|0)|0)) + 8|0);
  HEAP8[$120>>0] = -1;
  $121 = (((161300 + (($$0269275*36)|0)|0)) + 9|0);
  HEAP8[$121>>0] = -1;
  $122 = (((161300 + (($$0269275*36)|0)|0)) + 10|0);
  HEAP8[$122>>0] = -74;
  $123 = (((161300 + (($$0269275*36)|0)|0)) + 11|0);
  HEAP8[$123>>0] = -1;
  $124 = (((161300 + (($$0269275*36)|0)|0)) + 12|0);
  HEAPF32[$124>>2] = 0.0;
  $125 = (_GetRandomValue(5,10)|0);
  $126 = (+($125|0));
  $127 = $126 / 10.0;
  $128 = (((161300 + (($$0269275*36)|0)|0)) + 16|0);
  HEAPF32[$128>>2] = $127;
  $129 = (((161300 + (($$0269275*36)|0)|0)) + 20|0);
  $130 = (($$0269275) + 1)|0;
  $exitcond = ($130|0)==(20);
  ;HEAP32[$129>>2]=0|0;HEAP32[$129+4>>2]=0|0;HEAP32[$129+8>>2]=0|0;HEAP32[$129+12>>2]=0|0;
  if ($exitcond) {
   break;
  } else {
   $$0269275 = $130;
  }
 }
 HEAP32[40505] = 150;
 HEAP32[(162024)>>2] = 0;
 HEAP32[(162028)>>2] = 30;
 $131 = (_GetScreenHeight()|0);
 HEAP32[(162032)>>2] = $131;
 HEAP32[(162036)>>2] = 350;
 HEAP32[(162040)>>2] = 0;
 HEAP32[(162044)>>2] = 30;
 $132 = (_GetScreenHeight()|0);
 HEAP32[(162048)>>2] = $132;
 HEAP32[(162052)>>2] = 550;
 HEAP32[(162056)>>2] = 0;
 HEAP32[(162060)>>2] = 30;
 $133 = (_GetScreenHeight()|0);
 HEAP32[(162064)>>2] = $133;
 HEAP32[(162068)>>2] = 750;
 HEAP32[(162072)>>2] = 0;
 HEAP32[(162076)>>2] = 30;
 $134 = (_GetScreenHeight()|0);
 HEAP32[(162080)>>2] = $134;
 HEAP32[(162084)>>2] = 950;
 HEAP32[(162088)>>2] = 0;
 HEAP32[(162092)>>2] = 30;
 $135 = (_GetScreenHeight()|0);
 HEAP32[(162096)>>2] = $135;
 HEAP32[40525] = 350;
 HEAP32[40526] = 100;
 HEAP32[40527] = 35;
 HEAP32[40528] = 806;
 HEAP32[(162116)>>2] = 1667;
 HEAP32[(162120)>>2] = 75;
 HEAP32[(162124)>>2] = 100;
 $136 = HEAP32[(26372)>>2]|0;
 $137 = (+($136|0));
 ;HEAP32[$font$byval_copy>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy+28>>2]=HEAP32[26352+28>>2]|0;
 _MeasureTextEx($0,$font$byval_copy,7101,$137,2);
 $138 = $0;
 $139 = $138;
 $140 = HEAP32[$139>>2]|0;
 $141 = (($138) + 4)|0;
 $142 = $141;
 $143 = HEAP32[$142>>2]|0;
 $144 = 26048;
 $145 = $144;
 HEAP32[$145>>2] = $140;
 $146 = (($144) + 4)|0;
 $147 = $146;
 HEAP32[$147>>2] = $143;
 STACKTOP = sp;return;
}
function _UpdateTitleScreen() {
 var $$0323362 = 0, $$0324363 = 0, $$0325365 = 0, $$0326376 = 0, $$0327375 = 0, $$0329374 = 0, $$0330373 = 0, $$0331366 = 0, $$0332372 = 0, $$0333370 = 0, $$0334369 = 0, $$0335367 = 0, $$0336368 = 0, $$0361 = 0, $$sink = 0, $$sink338 = 0, $$sink339 = 0, $$sink340 = 0, $$sink341 = 0, $$sink342 = 0;
 var $$sink343 = 0, $$sink344 = 0, $$sink345 = 0, $$sink346 = 0, $$sink347 = 0, $$sink348 = 0, $$sink349 = 0, $$sroa$0130$0$$sroa_idx = 0, $$sroa$0140$0$$sroa_idx = 0, $$sroa$0143$0$$sroa_idx = 0, $$sroa$0164$0$$sroa_idx = 0, $$sroa$0174$0$$sroa_idx = 0, $$sroa$0190$0$$sroa_idx = 0, $$sroa$0193$0$$sroa_idx = 0, $$sroa$0206$0$$sroa_idx = 0, $$sroa$0209$0$$sroa_idx = 0, $$sroa$0222$0$$sroa_idx = 0, $$sroa$0225$0$$sroa_idx = 0, $$sroa$0238$0$$sroa_idx = 0, $$sroa$0248$0$$sroa_idx = 0;
 var $$sroa$2131$0$$sroa_idx132 = 0, $$sroa$2141$0$$sroa_idx142 = 0, $$sroa$2144$0$$sroa_idx145 = 0, $$sroa$2165$0$$sroa_idx166 = 0, $$sroa$2175$0$$sroa_idx176 = 0, $$sroa$2191$0$$sroa_idx192 = 0, $$sroa$2194$0$$sroa_idx195 = 0, $$sroa$2207$0$$sroa_idx208 = 0, $$sroa$2210$0$$sroa_idx211 = 0, $$sroa$2223$0$$sroa_idx224 = 0, $$sroa$2226$0$$sroa_idx227 = 0, $$sroa$2239$0$$sroa_idx240 = 0, $$sroa$2249$0$$sroa_idx250 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0.0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0.0;
 var $285 = 0.0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0;
 var $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0.0, $32 = 0;
 var $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0;
 var $357 = 0.0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0.0, $373 = 0, $374 = 0.0;
 var $375 = 0.0, $376 = 0.0, $377 = 0, $378 = 0.0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0.0, $386 = 0, $387 = 0.0, $388 = 0.0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0;
 var $393 = 0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0.0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0.0, $426 = 0.0, $427 = 0, $428 = 0.0;
 var $429 = 0.0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0.0;
 var $447 = 0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0.0;
 var $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0.0, $50 = 0;
 var $500 = 0.0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond377 = 0, $exitcond378 = 0, $exitcond379 = 0, $exitcond380 = 0, $exitcond381 = 0, $exitcond382 = 0, $exitcond383 = 0, $exitcond384 = 0, $exitcond385 = 0, $exitcond386 = 0, $exitcond387 = 0, $exitcond388 = 0, $exitcond389 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6815]|0;
 $1 = (($0) + 1)|0;
 HEAP32[6815] = $1;
 $2 = HEAP32[40532]|0;
 $3 = (($2) + 1)|0;
 HEAP32[40532] = $3;
 $4 = (+($1|0));
 $5 = +HEAPF32[6821];
 $6 = $4 < $5;
 if ($6) {
  $7 = +HEAPF32[6817];
  $8 = +HEAPF32[6818];
  $9 = $8 - $7;
  $10 = (+_BounceEaseOut($4,$7,$9,$5));
  HEAPF32[40533] = $10;
  $11 = HEAP32[6815]|0;
  $12 = (+($11|0));
  $13 = +HEAPF32[6819];
  $14 = +HEAPF32[6820];
  $15 = $14 - $13;
  $16 = +HEAPF32[6821];
  $17 = (+_BounceEaseOut($12,$13,$15,$16));
  HEAPF32[40534] = $17;
 }
 $18 = HEAP32[40535]|0;
 $19 = (($18) + 1)|0;
 HEAP32[40535] = $19;
 $20 = ($19|0)>(39);
 $21 = HEAP32[40536]|0;
 if ($20) {
  $22 = (($21) + 1)|0;
  HEAP32[40536] = $22;
  HEAP32[40535] = 0;
  $24 = $22;
 } else {
  $24 = $21;
 }
 $23 = ($24|0)>(1);
 if ($23) {
  HEAP32[40536] = 0;
 }
 $25 = HEAP32[(162120)>>2]|0;
 $26 = HEAP32[40536]|0;
 $27 = Math_imul($26, $25)|0;
 $28 = (($27) + 806)|0;
 HEAP32[40528] = $28;
 $29 = HEAP32[6803]|0;
 L10: do {
  switch ($29|0) {
  case 0:  {
   HEAP32[(37588)>>2] = 1;
   HEAP32[(47868)>>2] = 1;
   HEAP32[(151048)>>2] = 0;
   HEAP32[(48608)>>2] = 0;
   $$sink338 = 51;$$sink339 = 103;$$sink340 = -58;$$sink341 = 73;$$sink342 = -126;$$sink343 = -95;$$sink344 = 125;$$sink345 = -91;$$sink346 = -111;$$sink347 = 86;$$sink348 = -84;$$sink349 = -127;
   label = 14;
   break;
  }
  case 1:  {
   $30 = HEAP32[6805]|0;
   $31 = ($30|0)>(40);
   if ($31) {
    HEAP32[(32448)>>2] = 1;
    HEAP32[(151048)>>2] = 0;
    $$sink338 = 58;$$sink339 = -123;$$sink340 = -42;$$sink341 = 101;$$sink342 = -126;$$sink343 = -112;$$sink344 = 114;$$sink345 = -121;$$sink346 = -66;$$sink347 = 62;$$sink348 = 113;$$sink349 = -14;
    label = 14;
    break L10;
   } else {
    HEAP32[(48608)>>2] = 1;
    $$sink338 = 58;$$sink339 = -123;$$sink340 = -42;$$sink341 = 101;$$sink342 = -126;$$sink343 = -112;$$sink344 = 114;$$sink345 = -121;$$sink346 = -66;$$sink347 = 62;$$sink348 = 113;$$sink349 = -14;
    label = 14;
    break L10;
   }
   break;
  }
  case 2:  {
   $32 = HEAP32[6805]|0;
   $33 = ($32|0)>(40);
   $$sink = $33 ? (27304) : (89588);
   HEAP32[$$sink>>2] = 1;
   HEAP32[8109] = 1;
   HEAP32[(151048)>>2] = 0;
   HEAP32[(48608)>>2] = 0;
   $$sink338 = -83;$$sink339 = -116;$$sink340 = 57;$$sink341 = -112;$$sink342 = -114;$$sink343 = 104;$$sink344 = -90;$$sink345 = -111;$$sink346 = -111;$$sink347 = -75;$$sink348 = -126;$$sink349 = -126;
   label = 14;
   break;
  }
  case 3:  {
   HEAP32[(42728)>>2] = 1;
   HEAP32[(151048)>>2] = 0;
   HEAP32[(48608)>>2] = 0;
   $$sink338 = 42;$$sink339 = -100;$$sink340 = -123;$$sink341 = 90;$$sink342 = -113;$$sink343 = -123;$$sink344 = 67;$$sink345 = -93;$$sink346 = -78;$$sink347 = 49;$$sink348 = -80;$$sink349 = -60;
   label = 14;
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 14) {
  HEAP8[340288] = $$sink349;
  HEAP8[(340289)>>0] = $$sink348;
  HEAP8[(340290)>>0] = $$sink347;
  HEAP8[(340291)>>0] = -1;
  HEAP8[340292] = $$sink346;
  HEAP8[(340293)>>0] = $$sink345;
  HEAP8[(340294)>>0] = $$sink344;
  HEAP8[(340295)>>0] = -1;
  HEAP8[340296] = $$sink343;
  HEAP8[(340297)>>0] = $$sink342;
  HEAP8[(340298)>>0] = $$sink341;
  HEAP8[(340299)>>0] = -1;
  HEAP8[340300] = $$sink340;
  HEAP8[(340301)>>0] = $$sink339;
  HEAP8[(340302)>>0] = $$sink338;
  HEAP8[(340303)>>0] = -1;
 }
 $34 = HEAP32[(27304)>>2]|0;
 $35 = ($34|0)==(0);
 if (!($35)) {
  $36 = HEAP32[(27308)>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[(27308)>>2] = $37;
  $$0326376 = 0;
  while(1) {
   $38 = (((27316 + (($$0326376*40)|0)|0)) + 36|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0);
   if ($40) {
    $41 = HEAP32[(27308)>>2]|0;
    $42 = HEAP32[(27312)>>2]|0;
    $43 = ($41|0)<($42|0);
    if (!($43)) {
     HEAP32[$38>>2] = 1;
     $44 = (_GetScreenWidth()|0);
     $45 = (($44) + 200)|0;
     $46 = (_GetRandomValue(0,$45)|0);
     $47 = (+($46|0));
     $$sroa$0248$0$$sroa_idx = (27316 + (($$0326376*40)|0)|0);
     HEAPF32[$$sroa$0248$0$$sroa_idx>>2] = $47;
     $$sroa$2249$0$$sroa_idx250 = (((27316 + (($$0326376*40)|0)|0)) + 4|0);
     HEAPF32[$$sroa$2249$0$$sroa_idx250>>2] = -10.0;
     HEAP32[(27308)>>2] = 0;
     $48 = (_GetRandomValue(5,20)|0);
     HEAP32[(27312)>>2] = $48;
    }
   }
   $49 = (($$0326376) + 1)|0;
   $exitcond389 = ($49|0)==(128);
   if ($exitcond389) {
    break;
   } else {
    $$0326376 = $49;
   }
  }
 }
 $50 = HEAP32[8109]|0;
 $51 = ($50|0)==(0);
 if (!($51)) {
  $52 = HEAP32[40537]|0;
  $53 = (($52) + 1)|0;
  HEAP32[40537] = $53;
  $$0327375 = 0;
  while(1) {
   $54 = (((130560 + (($$0327375*40)|0)|0)) + 36|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(0);
   if ($56) {
    $57 = HEAP32[40537]|0;
    $58 = HEAP32[40538]|0;
    $59 = ($57|0)<($58|0);
    if (!($59)) {
     HEAP32[$54>>2] = 1;
     $60 = (_GetScreenWidth()|0);
     $61 = (($60) + 200)|0;
     $62 = (_GetRandomValue(0,$61)|0);
     $63 = (+($62|0));
     $$sroa$0238$0$$sroa_idx = (130560 + (($$0327375*40)|0)|0);
     HEAPF32[$$sroa$0238$0$$sroa_idx>>2] = $63;
     $$sroa$2239$0$$sroa_idx240 = (((130560 + (($$0327375*40)|0)|0)) + 4|0);
     HEAPF32[$$sroa$2239$0$$sroa_idx240>>2] = -10.0;
     HEAP32[40537] = 0;
     $64 = (_GetRandomValue(3,10)|0);
     HEAP32[40538] = $64;
    }
   }
   $65 = (($$0327375) + 1)|0;
   $exitcond388 = ($65|0)==(128);
   if ($exitcond388) {
    break;
   } else {
    $$0327375 = $65;
   }
  }
 }
 $66 = HEAP32[(32448)>>2]|0;
 $67 = ($66|0)==(0);
 if (!($67)) {
  $68 = HEAP32[(32452)>>2]|0;
  $69 = (($68) + 1)|0;
  HEAP32[(32452)>>2] = $69;
  $70 = HEAP32[40539]|0;
  $71 = (($70) + 1)|0;
  HEAP32[40539] = $71;
  $$0329374 = 0;
  while(1) {
   $72 = (((32460 + (($$0329374*40)|0)|0)) + 36|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(0);
   if ($74) {
    $75 = HEAP32[(32452)>>2]|0;
    $76 = HEAP32[(32456)>>2]|0;
    $77 = ($75|0)<($76|0);
    if (!($77)) {
     HEAP32[$72>>2] = 1;
     $78 = (_GetScreenWidth()|0);
     $79 = (($78) + 200)|0;
     $80 = (_GetRandomValue(0,$79)|0);
     $81 = (+($80|0));
     $$sroa$0225$0$$sroa_idx = (32460 + (($$0329374*40)|0)|0);
     HEAPF32[$$sroa$0225$0$$sroa_idx>>2] = $81;
     $$sroa$2226$0$$sroa_idx227 = (((32460 + (($$0329374*40)|0)|0)) + 4|0);
     HEAPF32[$$sroa$2226$0$$sroa_idx227>>2] = -10.0;
     HEAP32[(32452)>>2] = 0;
     $82 = (_GetRandomValue(5,20)|0);
     HEAP32[(32456)>>2] = $82;
    }
   }
   $83 = (((135680 + (($$0329374*40)|0)|0)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)==(0);
   if ($85) {
    $86 = HEAP32[40539]|0;
    $87 = HEAP32[40540]|0;
    $88 = ($86|0)<($87|0);
    if (!($88)) {
     HEAP32[$83>>2] = 1;
     $89 = (_GetScreenWidth()|0);
     $90 = (($89) + 200)|0;
     $91 = (_GetRandomValue(0,$90)|0);
     $92 = (+($91|0));
     $$sroa$0222$0$$sroa_idx = (135680 + (($$0329374*40)|0)|0);
     HEAPF32[$$sroa$0222$0$$sroa_idx>>2] = $92;
     $$sroa$2223$0$$sroa_idx224 = (((135680 + (($$0329374*40)|0)|0)) + 4|0);
     HEAPF32[$$sroa$2223$0$$sroa_idx224>>2] = -10.0;
     HEAP32[40539] = 0;
     $93 = (_GetRandomValue(3,10)|0);
     HEAP32[40540] = $93;
    }
   }
   $94 = (($$0329374) + 1)|0;
   $exitcond387 = ($94|0)==(128);
   if ($exitcond387) {
    break;
   } else {
    $$0329374 = $94;
   }
  }
 }
 $95 = HEAP32[(37588)>>2]|0;
 $96 = ($95|0)==(0);
 if (!($96)) {
  $97 = HEAP32[(37592)>>2]|0;
  $98 = (($97) + 1)|0;
  HEAP32[(37592)>>2] = $98;
  $99 = HEAP32[40541]|0;
  $100 = (($99) + 1)|0;
  HEAP32[40541] = $100;
  $$0330373 = 0;
  while(1) {
   $101 = (((37600 + (($$0330373*40)|0)|0)) + 36|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==(0);
   if ($103) {
    $104 = HEAP32[(37592)>>2]|0;
    $105 = HEAP32[(37596)>>2]|0;
    $106 = ($104|0)<($105|0);
    if (!($106)) {
     HEAP32[$101>>2] = 1;
     $107 = (_GetScreenWidth()|0);
     $108 = (($107) + 200)|0;
     $109 = (_GetRandomValue(0,$108)|0);
     $110 = (+($109|0));
     $$sroa$0209$0$$sroa_idx = (37600 + (($$0330373*40)|0)|0);
     HEAPF32[$$sroa$0209$0$$sroa_idx>>2] = $110;
     $$sroa$2210$0$$sroa_idx211 = (((37600 + (($$0330373*40)|0)|0)) + 4|0);
     HEAPF32[$$sroa$2210$0$$sroa_idx211>>2] = -10.0;
     HEAP32[(37592)>>2] = 0;
     $111 = (_GetRandomValue(5,20)|0);
     HEAP32[(37596)>>2] = $111;
    }
   }
   $112 = (((140800 + (($$0330373*40)|0)|0)) + 36|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = HEAP32[40541]|0;
    $116 = HEAP32[40542]|0;
    $117 = ($115|0)<($116|0);
    if (!($117)) {
     HEAP32[$112>>2] = 1;
     $118 = (_GetScreenWidth()|0);
     $119 = (($118) + 200)|0;
     $120 = (_GetRandomValue(0,$119)|0);
     $121 = (+($120|0));
     $$sroa$0206$0$$sroa_idx = (140800 + (($$0330373*40)|0)|0);
     HEAPF32[$$sroa$0206$0$$sroa_idx>>2] = $121;
     $$sroa$2207$0$$sroa_idx208 = (((140800 + (($$0330373*40)|0)|0)) + 4|0);
     HEAPF32[$$sroa$2207$0$$sroa_idx208>>2] = -10.0;
     HEAP32[40541] = 0;
     $122 = (_GetRandomValue(3,10)|0);
     HEAP32[40542] = $122;
    }
   }
   $123 = (($$0330373) + 1)|0;
   $exitcond386 = ($123|0)==(128);
   if ($exitcond386) {
    break;
   } else {
    $$0330373 = $123;
   }
  }
 }
 $124 = HEAP32[(42728)>>2]|0;
 $125 = ($124|0)==(0);
 if (!($125)) {
  $126 = HEAP32[(42732)>>2]|0;
  $127 = (($126) + 1)|0;
  HEAP32[(42732)>>2] = $127;
  $128 = HEAP32[40543]|0;
  $129 = (($128) + 1)|0;
  HEAP32[40543] = $129;
  $$0332372 = 0;
  while(1) {
   $130 = (((42740 + (($$0332372*40)|0)|0)) + 36|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($131|0)==(0);
   if ($132) {
    $133 = HEAP32[(42732)>>2]|0;
    $134 = HEAP32[(42736)>>2]|0;
    $135 = ($133|0)<($134|0);
    if (!($135)) {
     HEAP32[$130>>2] = 1;
     $136 = (_GetScreenWidth()|0);
     $137 = (($136) + 200)|0;
     $138 = (_GetRandomValue(0,$137)|0);
     $139 = (+($138|0));
     $$sroa$0193$0$$sroa_idx = (42740 + (($$0332372*40)|0)|0);
     HEAPF32[$$sroa$0193$0$$sroa_idx>>2] = $139;
     $$sroa$2194$0$$sroa_idx195 = (((42740 + (($$0332372*40)|0)|0)) + 4|0);
     HEAPF32[$$sroa$2194$0$$sroa_idx195>>2] = -10.0;
     HEAP32[(42732)>>2] = 0;
     $140 = (_GetRandomValue(5,20)|0);
     HEAP32[(42736)>>2] = $140;
    }
   }
   $141 = (((145920 + (($$0332372*40)|0)|0)) + 36|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)==(0);
   if ($143) {
    $144 = HEAP32[40543]|0;
    $145 = HEAP32[40544]|0;
    $146 = ($144|0)<($145|0);
    if (!($146)) {
     HEAP32[$141>>2] = 1;
     $147 = (_GetScreenWidth()|0);
     $148 = (($147) + 200)|0;
     $149 = (_GetRandomValue(0,$148)|0);
     $150 = (+($149|0));
     $$sroa$0190$0$$sroa_idx = (145920 + (($$0332372*40)|0)|0);
     HEAPF32[$$sroa$0190$0$$sroa_idx>>2] = $150;
     $$sroa$2191$0$$sroa_idx192 = (((145920 + (($$0332372*40)|0)|0)) + 4|0);
     HEAPF32[$$sroa$2191$0$$sroa_idx192>>2] = -10.0;
     HEAP32[40543] = 0;
     $151 = (_GetRandomValue(3,10)|0);
     HEAP32[40544] = $151;
    }
   }
   $152 = (($$0332372) + 1)|0;
   $exitcond385 = ($152|0)==(128);
   if ($exitcond385) {
    break;
   } else {
    $$0332372 = $152;
   }
  }
 }
 $153 = HEAP32[(48608)>>2]|0;
 $154 = ($153|0)==(0);
 if (!($154)) {
  $155 = HEAP32[(48612)>>2]|0;
  $156 = (($155) + 1)|0;
  HEAP32[(48612)>>2] = $156;
  $$0333370 = 0;
  while(1) {
   $157 = (((48620 + (($$0333370*40)|0)|0)) + 36|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($158|0)==(0);
   if ($159) {
    $160 = HEAP32[(48612)>>2]|0;
    $161 = HEAP32[(48616)>>2]|0;
    $162 = ($160|0)<($161|0);
    if (!($162)) {
     $$0334369 = 0;
     while(1) {
      $163 = (($$0334369) + ($$0333370))|0;
      $164 = (((48620 + (($163*40)|0)|0)) + 36|0);
      HEAP32[$164>>2] = 1;
      $165 = (_GetScreenWidth()|0);
      $166 = (($165) + 1000)|0;
      $167 = (_GetRandomValue(100,$166)|0);
      $168 = (+($167|0));
      $169 = (_GetRandomValue(-10,-20)|0);
      $170 = (+($169|0));
      $$sroa$0174$0$$sroa_idx = (48620 + (($163*40)|0)|0);
      HEAPF32[$$sroa$0174$0$$sroa_idx>>2] = $168;
      $$sroa$2175$0$$sroa_idx176 = (((48620 + (($163*40)|0)|0)) + 4|0);
      HEAPF32[$$sroa$2175$0$$sroa_idx176>>2] = $170;
      $171 = (($$0334369) + 1)|0;
      $exitcond383 = ($171|0)==(16);
      if ($exitcond383) {
       break;
      } else {
       $$0334369 = $171;
      }
     }
     HEAP32[(48612)>>2] = 0;
     HEAP32[(48616)>>2] = 4;
    }
   }
   $172 = (($$0333370) + 1)|0;
   $exitcond384 = ($172|0)==(1024);
   if ($exitcond384) {
    break;
   } else {
    $$0333370 = $172;
   }
  }
 }
 $173 = HEAP32[(89588)>>2]|0;
 $174 = ($173|0)==(0);
 if (!($174)) {
  $175 = HEAP32[(89592)>>2]|0;
  $176 = (($175) + 1)|0;
  HEAP32[(89592)>>2] = $176;
  $$0336368 = 0;
  while(1) {
   $177 = (((89600 + (($$0336368*40)|0)|0)) + 36|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = ($178|0)==(0);
   if ($179) {
    $180 = HEAP32[(89592)>>2]|0;
    $181 = HEAP32[(89596)>>2]|0;
    $182 = ($180|0)<($181|0);
    if (!($182)) {
     HEAP32[$177>>2] = 1;
     $183 = (_GetScreenWidth()|0);
     $184 = (($183) + 800)|0;
     $185 = (_GetRandomValue(100,$184)|0);
     $186 = (+($185|0));
     $$sroa$0164$0$$sroa_idx = (89600 + (($$0336368*40)|0)|0);
     HEAPF32[$$sroa$0164$0$$sroa_idx>>2] = $186;
     $$sroa$2165$0$$sroa_idx166 = (((89600 + (($$0336368*40)|0)|0)) + 4|0);
     HEAPF32[$$sroa$2165$0$$sroa_idx166>>2] = -10.0;
     HEAP32[(89592)>>2] = 0;
     $187 = (_GetRandomValue(1,2)|0);
     HEAP32[(89596)>>2] = $187;
    }
   }
   $188 = (($$0336368) + 1)|0;
   $exitcond382 = ($188|0)==(256);
   if ($exitcond382) {
    break;
   } else {
    $$0336368 = $188;
   }
  }
 }
 $189 = HEAP32[(47868)>>2]|0;
 $190 = ($189|0)==(0);
 if (!($190)) {
  $191 = HEAP32[(47872)>>2]|0;
  $192 = (($191) + 1)|0;
  HEAP32[(47872)>>2] = $192;
  $193 = HEAP32[40545]|0;
  $194 = (($193) + 1)|0;
  HEAP32[40545] = $194;
  $$0335367 = 0;
  while(1) {
   $195 = (((47880 + (($$0335367*36)|0)|0)) + 24|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = ($196|0)==(0);
   if ($197) {
    $198 = HEAP32[(47872)>>2]|0;
    $199 = HEAP32[(47876)>>2]|0;
    $200 = ($198|0)<($199|0);
    if (!($200)) {
     HEAP32[$195>>2] = 1;
     $201 = (((47880 + (($$0335367*36)|0)|0)) + 12|0);
     HEAPF32[$201>>2] = 0.0;
     $202 = (_GetRandomValue(10,20)|0);
     $203 = (($202|0) / 10)&-1;
     $204 = (+($203|0));
     $205 = (((47880 + (($$0335367*36)|0)|0)) + 16|0);
     HEAPF32[$205>>2] = $204;
     $206 = (_GetScreenWidth()|0);
     $207 = (($206) + 200)|0;
     $208 = (_GetRandomValue(300,$207)|0);
     $209 = (+($208|0));
     $$sroa$0143$0$$sroa_idx = (47880 + (($$0335367*36)|0)|0);
     HEAPF32[$$sroa$0143$0$$sroa_idx>>2] = $209;
     $$sroa$2144$0$$sroa_idx145 = (((47880 + (($$0335367*36)|0)|0)) + 4|0);
     HEAPF32[$$sroa$2144$0$$sroa_idx145>>2] = 0.0;
     $210 = (((47880 + (($$0335367*36)|0)|0)) + 20|0);
     HEAPF32[$210>>2] = -35.0;
     HEAP32[(47872)>>2] = 0;
     $211 = (((47880 + (($$0335367*36)|0)|0)) + 32|0);
     HEAPF32[$211>>2] = 0.0;
     $212 = (_GetRandomValue(20,50)|0);
     HEAP32[(47876)>>2] = $212;
    }
   }
   $213 = (((161300 + (($$0335367*36)|0)|0)) + 24|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ($214|0)==(0);
   if ($215) {
    $216 = HEAP32[40545]|0;
    $217 = HEAP32[40546]|0;
    $218 = ($216|0)<($217|0);
    if (!($218)) {
     HEAP32[$213>>2] = 1;
     $219 = (((161300 + (($$0335367*36)|0)|0)) + 12|0);
     HEAPF32[$219>>2] = 0.0;
     $220 = (_GetRandomValue(5,15)|0);
     $221 = (($220|0) / 10)&-1;
     $222 = (+($221|0));
     $223 = (((161300 + (($$0335367*36)|0)|0)) + 16|0);
     HEAPF32[$223>>2] = $222;
     $224 = (_GetScreenWidth()|0);
     $225 = (($224) + 200)|0;
     $226 = (_GetRandomValue(300,$225)|0);
     $227 = (+($226|0));
     $$sroa$0140$0$$sroa_idx = (161300 + (($$0335367*36)|0)|0);
     HEAPF32[$$sroa$0140$0$$sroa_idx>>2] = $227;
     $$sroa$2141$0$$sroa_idx142 = (((161300 + (($$0335367*36)|0)|0)) + 4|0);
     HEAPF32[$$sroa$2141$0$$sroa_idx142>>2] = 0.0;
     $228 = (((161300 + (($$0335367*36)|0)|0)) + 20|0);
     HEAPF32[$228>>2] = -35.0;
     HEAP32[40545] = 0;
     $229 = (((161300 + (($$0335367*36)|0)|0)) + 32|0);
     HEAPF32[$229>>2] = 0.0;
     $230 = (_GetRandomValue(20,50)|0);
     HEAP32[40546] = $230;
    }
   }
   $231 = (($$0335367) + 1)|0;
   $exitcond381 = ($231|0)==(20);
   if ($exitcond381) {
    break;
   } else {
    $$0335367 = $231;
   }
  }
 }
 $232 = HEAP32[(151048)>>2]|0;
 $233 = ($232|0)==(0);
 if ($233) {
  $$0325365 = 0;
 } else {
  $234 = HEAP32[(151052)>>2]|0;
  $235 = (($234) + 1)|0;
  HEAP32[(151052)>>2] = $235;
  $$0331366 = 0;
  while(1) {
   $236 = (((151060 + (($$0331366*40)|0)|0)) + 36|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = ($237|0)==(0);
   if ($238) {
    $239 = HEAP32[(151052)>>2]|0;
    $240 = HEAP32[(151056)>>2]|0;
    $241 = ($239|0)<($240|0);
    if (!($241)) {
     HEAP32[$236>>2] = 1;
     $242 = (_GetScreenWidth()|0);
     $243 = (($242) + 200)|0;
     $244 = (_GetRandomValue(0,$243)|0);
     $245 = (+($244|0));
     $$sroa$0130$0$$sroa_idx = (151060 + (($$0331366*40)|0)|0);
     HEAPF32[$$sroa$0130$0$$sroa_idx>>2] = $245;
     $$sroa$2131$0$$sroa_idx132 = (((151060 + (($$0331366*40)|0)|0)) + 4|0);
     HEAPF32[$$sroa$2131$0$$sroa_idx132>>2] = -10.0;
     HEAP32[(151052)>>2] = 0;
     $246 = (_GetRandomValue(1,8)|0);
     HEAP32[(151056)>>2] = $246;
    }
   }
   $247 = (($$0331366) + 1)|0;
   $exitcond380 = ($247|0)==(128);
   if ($exitcond380) {
    $$0325365 = 0;
    break;
   } else {
    $$0331366 = $247;
   }
  }
 }
 while(1) {
  $248 = (((27316 + (($$0325365*40)|0)|0)) + 36|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = ($249|0)==(0);
  if (!($250)) {
   $251 = (((27316 + (($$0325365*40)|0)|0)) + 4|0);
   $252 = +HEAPF32[$251>>2];
   $253 = $252 + 2.0;
   HEAPF32[$251>>2] = $253;
   $254 = (27316 + (($$0325365*40)|0)|0);
   $255 = +HEAPF32[$254>>2];
   $256 = $255 + -2.0;
   HEAPF32[$254>>2] = $256;
   $257 = (((27316 + (($$0325365*40)|0)|0)) + 16|0);
   $258 = +HEAPF32[$257>>2];
   $259 = $258 + 0.5;
   HEAPF32[$257>>2] = $259;
   $260 = +HEAPF32[$251>>2];
   $261 = (_GetScreenHeight()|0);
   $262 = (+($261|0));
   $263 = !($260 >= $262);
   if (!($263)) {
    HEAP32[$248>>2] = 0;
   }
  }
  $264 = (((130560 + (($$0325365*40)|0)|0)) + 36|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = ($265|0)==(0);
  if (!($266)) {
   $267 = (((130560 + (($$0325365*40)|0)|0)) + 4|0);
   $268 = +HEAPF32[$267>>2];
   $269 = $268 + 4.0;
   HEAPF32[$267>>2] = $269;
   $270 = (130560 + (($$0325365*40)|0)|0);
   $271 = +HEAPF32[$270>>2];
   $272 = $271 + -3.0;
   HEAPF32[$270>>2] = $272;
   $273 = (((130560 + (($$0325365*40)|0)|0)) + 16|0);
   $274 = +HEAPF32[$273>>2];
   $275 = $274 + 0.5;
   HEAPF32[$273>>2] = $275;
   $276 = +HEAPF32[$267>>2];
   $277 = (_GetScreenHeight()|0);
   $278 = (+($277|0));
   $279 = !($276 >= $278);
   if (!($279)) {
    HEAP32[$264>>2] = 0;
   }
  }
  $280 = (((32460 + (($$0325365*40)|0)|0)) + 36|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = ($281|0)==(0);
  if (!($282)) {
   $283 = (((32460 + (($$0325365*40)|0)|0)) + 4|0);
   $284 = +HEAPF32[$283>>2];
   $285 = $284 + 4.0;
   HEAPF32[$283>>2] = $285;
   $286 = (32460 + (($$0325365*40)|0)|0);
   $287 = +HEAPF32[$286>>2];
   $288 = $287 + -2.0;
   HEAPF32[$286>>2] = $288;
   $289 = (((32460 + (($$0325365*40)|0)|0)) + 16|0);
   $290 = +HEAPF32[$289>>2];
   $291 = $290 + 0.5;
   HEAPF32[$289>>2] = $291;
   $292 = +HEAPF32[$283>>2];
   $293 = (_GetScreenHeight()|0);
   $294 = (+($293|0));
   $295 = !($292 >= $294);
   if (!($295)) {
    HEAP32[$280>>2] = 0;
   }
  }
  $296 = (((135680 + (($$0325365*40)|0)|0)) + 36|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = ($297|0)==(0);
  if (!($298)) {
   $299 = (((135680 + (($$0325365*40)|0)|0)) + 4|0);
   $300 = +HEAPF32[$299>>2];
   $301 = $300 + 4.0;
   HEAPF32[$299>>2] = $301;
   $302 = (135680 + (($$0325365*40)|0)|0);
   $303 = +HEAPF32[$302>>2];
   $304 = $303 + -3.0;
   HEAPF32[$302>>2] = $304;
   $305 = (((135680 + (($$0325365*40)|0)|0)) + 16|0);
   $306 = +HEAPF32[$305>>2];
   $307 = $306 + 0.5;
   HEAPF32[$305>>2] = $307;
   $308 = +HEAPF32[$299>>2];
   $309 = (_GetScreenHeight()|0);
   $310 = (+($309|0));
   $311 = !($308 >= $310);
   if (!($311)) {
    HEAP32[$296>>2] = 0;
   }
  }
  $312 = (((37600 + (($$0325365*40)|0)|0)) + 36|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = ($313|0)==(0);
  if (!($314)) {
   $315 = (((37600 + (($$0325365*40)|0)|0)) + 4|0);
   $316 = +HEAPF32[$315>>2];
   $317 = $316 + 2.5;
   HEAPF32[$315>>2] = $317;
   $318 = (37600 + (($$0325365*40)|0)|0);
   $319 = +HEAPF32[$318>>2];
   $320 = $319 + -2.0;
   HEAPF32[$318>>2] = $320;
   $321 = HEAP32[40532]|0;
   $322 = (+($321|0));
   $323 = $322 * 0.052359879016876221;
   $324 = (((37600 + (($$0325365*40)|0)|0)) + 32|0);
   $325 = +HEAPF32[$324>>2];
   $326 = $325 + $323;
   $327 = $326;
   $328 = (+Math_sin((+$327)));
   $329 = $328 * 30.0;
   $330 = $329 + 30.0;
   $331 = $330;
   $332 = -$331;
   $333 = (((37600 + (($$0325365*40)|0)|0)) + 16|0);
   HEAPF32[$333>>2] = $332;
   $334 = +HEAPF32[$315>>2];
   $335 = (_GetScreenHeight()|0);
   $336 = (+($335|0));
   $337 = !($334 >= $336);
   if (!($337)) {
    HEAP32[$312>>2] = 0;
   }
  }
  $338 = (((140800 + (($$0325365*40)|0)|0)) + 36|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = ($339|0)==(0);
  do {
   if (!($340)) {
    $341 = (((140800 + (($$0325365*40)|0)|0)) + 4|0);
    $342 = +HEAPF32[$341>>2];
    $343 = $342 + 2.0;
    HEAPF32[$341>>2] = $343;
    $344 = (140800 + (($$0325365*40)|0)|0);
    $345 = +HEAPF32[$344>>2];
    $346 = $345 + -3.0;
    HEAPF32[$344>>2] = $346;
    $347 = HEAP32[40532]|0;
    $348 = (+($347|0));
    $349 = $348 * 0.052359879016876221;
    $350 = (((37600 + (($$0325365*40)|0)|0)) + 32|0);
    $351 = +HEAPF32[$350>>2];
    $352 = $351 + $349;
    $353 = $352;
    $354 = (+Math_sin((+$353)));
    $355 = $354 * 30.0;
    $356 = $355 + 30.0;
    $357 = $356;
    $358 = -$357;
    $359 = (((140800 + (($$0325365*40)|0)|0)) + 16|0);
    HEAPF32[$359>>2] = $358;
    $360 = +HEAPF32[$341>>2];
    $361 = (_GetScreenHeight()|0);
    $362 = (+($361|0));
    $363 = !($360 >= $362);
    if ($363) {
     break;
    }
    HEAP32[$338>>2] = 0;
   }
  } while(0);
  $364 = (((42740 + (($$0325365*40)|0)|0)) + 36|0);
  $365 = HEAP32[$364>>2]|0;
  $366 = ($365|0)==(0);
  do {
   if (!($366)) {
    $367 = (((42740 + (($$0325365*40)|0)|0)) + 4|0);
    $368 = +HEAPF32[$367>>2];
    $369 = $368 + 2.5;
    HEAPF32[$367>>2] = $369;
    $370 = (42740 + (($$0325365*40)|0)|0);
    $371 = +HEAPF32[$370>>2];
    $372 = $371 + -2.0;
    HEAPF32[$370>>2] = $372;
    $373 = (((42740 + (($$0325365*40)|0)|0)) + 16|0);
    $374 = +HEAPF32[$373>>2];
    $375 = $374 + 0.5;
    HEAPF32[$373>>2] = $375;
    $376 = +HEAPF32[$367>>2];
    $377 = (_GetScreenHeight()|0);
    $378 = (+($377|0));
    $379 = !($376 >= $378);
    if ($379) {
     break;
    }
    HEAP32[$364>>2] = 0;
   }
  } while(0);
  $380 = (((145920 + (($$0325365*40)|0)|0)) + 36|0);
  $381 = HEAP32[$380>>2]|0;
  $382 = ($381|0)==(0);
  do {
   if (!($382)) {
    $383 = (((145920 + (($$0325365*40)|0)|0)) + 4|0);
    $384 = +HEAPF32[$383>>2];
    $385 = $384 + 2.0;
    HEAPF32[$383>>2] = $385;
    $386 = (145920 + (($$0325365*40)|0)|0);
    $387 = +HEAPF32[$386>>2];
    $388 = $387 + -3.0;
    HEAPF32[$386>>2] = $388;
    $389 = (((145920 + (($$0325365*40)|0)|0)) + 16|0);
    $390 = +HEAPF32[$389>>2];
    $391 = $390 + 0.5;
    HEAPF32[$389>>2] = $391;
    $392 = +HEAPF32[$383>>2];
    $393 = (_GetScreenHeight()|0);
    $394 = (+($393|0));
    $395 = !($392 >= $394);
    if ($395) {
     break;
    }
    HEAP32[$380>>2] = 0;
   }
  } while(0);
  $396 = (((151060 + (($$0325365*40)|0)|0)) + 36|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = ($397|0)==(0);
  do {
   if (!($398)) {
    $399 = (((151060 + (($$0325365*40)|0)|0)) + 4|0);
    $400 = +HEAPF32[$399>>2];
    $401 = $400 + 4.0;
    HEAPF32[$399>>2] = $401;
    $402 = (151060 + (($$0325365*40)|0)|0);
    $403 = +HEAPF32[$402>>2];
    $404 = $403 + -5.0;
    HEAPF32[$402>>2] = $404;
    $405 = (_GetScreenHeight()|0);
    $406 = (+($405|0));
    $407 = !($401 >= $406);
    if ($407) {
     break;
    }
    HEAP32[$396>>2] = 0;
   }
  } while(0);
  $408 = (((156180 + (($$0325365*40)|0)|0)) + 36|0);
  $409 = HEAP32[$408>>2]|0;
  $410 = ($409|0)==(0);
  do {
   if (!($410)) {
    $411 = (((156180 + (($$0325365*40)|0)|0)) + 4|0);
    $412 = +HEAPF32[$411>>2];
    $413 = $412 + 3.0;
    HEAPF32[$411>>2] = $413;
    $414 = (156180 + (($$0325365*40)|0)|0);
    $415 = +HEAPF32[$414>>2];
    $416 = $415 + -3.0;
    HEAPF32[$414>>2] = $416;
    $417 = (_GetScreenHeight()|0);
    $418 = (+($417|0));
    $419 = !($413 >= $418);
    if ($419) {
     break;
    }
    HEAP32[$408>>2] = 0;
   }
  } while(0);
  $420 = (($$0325365) + 1)|0;
  $exitcond379 = ($420|0)==(128);
  if ($exitcond379) {
   $$0324363 = 0;
   break;
  } else {
   $$0325365 = $420;
  }
 }
 while(1) {
  $421 = (((48620 + (($$0324363*40)|0)|0)) + 36|0);
  $422 = HEAP32[$421>>2]|0;
  $423 = ($422|0)==(0);
  if (!($423)) {
   $424 = (((48620 + (($$0324363*40)|0)|0)) + 4|0);
   $425 = +HEAPF32[$424>>2];
   $426 = $425 + 12.0;
   HEAPF32[$424>>2] = $426;
   $427 = (48620 + (($$0324363*40)|0)|0);
   $428 = +HEAPF32[$427>>2];
   $429 = $428 + -15.0;
   HEAPF32[$427>>2] = $429;
   $430 = (_GetScreenHeight()|0);
   $431 = (+($430|0));
   $432 = !($426 >= $431);
   if (!($432)) {
    HEAP32[$421>>2] = 0;
   }
   $433 = HEAP32[(48608)>>2]|0;
   $434 = ($433|0)==(0);
   if ($434) {
    $435 = (((48620 + (($$0324363*40)|0)|0)) + 28|0);
    $436 = +HEAPF32[$435>>2];
    $437 = $436;
    $438 = $437 + -0.01;
    $439 = $438;
    HEAPF32[$435>>2] = $439;
   }
  }
  $440 = (($$0324363) + 1)|0;
  $exitcond378 = ($440|0)==(1024);
  if ($exitcond378) {
   $$0323362 = 0;
   break;
  } else {
   $$0324363 = $440;
  }
 }
 while(1) {
  $441 = (((89600 + (($$0323362*40)|0)|0)) + 36|0);
  $442 = HEAP32[$441>>2]|0;
  $443 = ($442|0)==(0);
  if (!($443)) {
   $444 = (((89600 + (($$0323362*40)|0)|0)) + 4|0);
   $445 = +HEAPF32[$444>>2];
   $446 = $445 + 12.0;
   HEAPF32[$444>>2] = $446;
   $447 = (89600 + (($$0323362*40)|0)|0);
   $448 = +HEAPF32[$447>>2];
   $449 = $448 + -15.0;
   HEAPF32[$447>>2] = $449;
   $450 = (((89600 + (($$0323362*40)|0)|0)) + 16|0);
   $451 = +HEAPF32[$450>>2];
   $452 = $451 + 0.5;
   HEAPF32[$450>>2] = $452;
   $453 = +HEAPF32[$444>>2];
   $454 = (_GetScreenHeight()|0);
   $455 = (+($454|0));
   $456 = !($453 >= $455);
   if (!($456)) {
    HEAP32[$441>>2] = 0;
   }
  }
  $457 = (($$0323362) + 1)|0;
  $exitcond377 = ($457|0)==(256);
  if ($exitcond377) {
   $$0361 = 0;
   break;
  } else {
   $$0323362 = $457;
  }
 }
 while(1) {
  $460 = (((47880 + (($$0361*36)|0)|0)) + 24|0);
  $461 = HEAP32[$460>>2]|0;
  $462 = ($461|0)==(0);
  do {
   if (!($462)) {
    $463 = (47880 + (($$0361*36)|0)|0);
    $464 = +HEAPF32[$463>>2];
    $465 = $464 + -0.5;
    HEAPF32[$463>>2] = $465;
    $466 = (((47880 + (($$0361*36)|0)|0)) + 28|0);
    $467 = HEAP32[$466>>2]|0;
    $468 = ($467|0)==(0);
    $469 = (((47880 + (($$0361*36)|0)|0)) + 12|0);
    $470 = +HEAPF32[$469>>2];
    if ($468) {
     $477 = $470 + 0.0099999997764825821;
     HEAPF32[$469>>2] = $477;
     $478 = !($477 >= 0.5);
     if ($478) {
      break;
     }
     HEAPF32[$469>>2] = 0.5;
     $479 = (((47880 + (($$0361*36)|0)|0)) + 32|0);
     $480 = +HEAPF32[$479>>2];
     $481 = $480 + 1.0;
     HEAPF32[$479>>2] = $481;
     $482 = !($481 >= 30.0);
     if ($482) {
      break;
     }
     HEAPF32[$479>>2] = 0.0;
     HEAP32[$466>>2] = 1;
     break;
    } else {
     $471 = $470 + -0.0099999997764825821;
     HEAPF32[$469>>2] = $471;
     $472 = !($471 <= 0.0);
     if ($472) {
      break;
     }
     HEAPF32[$469>>2] = 0.0;
     $473 = (((47880 + (($$0361*36)|0)|0)) + 32|0);
     $474 = +HEAPF32[$473>>2];
     $475 = $474 + 1.0;
     HEAPF32[$473>>2] = $475;
     $476 = !($475 >= 30.0);
     if ($476) {
      break;
     }
     HEAP32[$460>>2] = 0;
     HEAPF32[$473>>2] = 0.0;
     HEAP32[$466>>2] = 0;
     break;
    }
   }
  } while(0);
  $483 = (((161300 + (($$0361*36)|0)|0)) + 24|0);
  $484 = HEAP32[$483>>2]|0;
  $485 = ($484|0)==(0);
  do {
   if (!($485)) {
    $486 = (161300 + (($$0361*36)|0)|0);
    $487 = +HEAPF32[$486>>2];
    $488 = $487 + -0.5;
    HEAPF32[$486>>2] = $488;
    $489 = (((161300 + (($$0361*36)|0)|0)) + 28|0);
    $490 = HEAP32[$489>>2]|0;
    $491 = ($490|0)==(0);
    $492 = (((161300 + (($$0361*36)|0)|0)) + 12|0);
    $493 = +HEAPF32[$492>>2];
    if ($491) {
     $500 = $493 + 0.0099999997764825821;
     HEAPF32[$492>>2] = $500;
     $501 = !($500 >= 0.5);
     if ($501) {
      break;
     }
     HEAPF32[$492>>2] = 0.5;
     $502 = (((161300 + (($$0361*36)|0)|0)) + 32|0);
     $503 = +HEAPF32[$502>>2];
     $504 = $503 + 1.0;
     HEAPF32[$502>>2] = $504;
     $505 = !($504 >= 30.0);
     if ($505) {
      break;
     }
     HEAPF32[$502>>2] = 0.0;
     HEAP32[$489>>2] = 1;
     break;
    } else {
     $494 = $493 + -0.0099999997764825821;
     HEAPF32[$492>>2] = $494;
     $495 = !($494 <= 0.0);
     if ($495) {
      break;
     }
     HEAPF32[$492>>2] = 0.0;
     $496 = (((161300 + (($$0361*36)|0)|0)) + 32|0);
     $497 = +HEAPF32[$496>>2];
     $498 = $497 + 1.0;
     HEAPF32[$496>>2] = $498;
     $499 = !($498 >= 30.0);
     if ($499) {
      break;
     }
     HEAP32[$483>>2] = 0;
     HEAPF32[$496>>2] = 0.0;
     HEAP32[$489>>2] = 0;
     break;
    }
   }
  } while(0);
  $506 = (($$0361) + 1)|0;
  $exitcond = ($506|0)==(20);
  if ($exitcond) {
   break;
  } else {
   $$0361 = $506;
  }
 }
 $458 = (_IsGestureDetected(1)|0);
 $459 = ($458|0)==(0);
 if ($459) {
  $507 = (_GetGestureDetected()|0);
  $508 = ($507|0)==(2);
  if (!($508)) {
   return;
  }
 }
 $509 = HEAP32[6815]|0;
 $510 = (+($509|0));
 $511 = +HEAPF32[6821];
 $512 = !($510 >= $511);
 if ($512) {
  return;
 }
 HEAP32[6816] = 2;
 return;
}
function _BounceEaseOut($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$0 = 0.0, $$pn = 0.0, $$pn29 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0;
 var $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0 / $3;
 $5 = $4 < 0.36363637447357178;
 do {
  if ($5) {
   $6 = $4 * 7.5625;
   $7 = $4 * $6;
   $$pn29 = $7;
  } else {
   $8 = $4 < 0.72727274894714355;
   if ($8) {
    $9 = $4 + -0.54545456171035767;
    $10 = $9 * 7.5625;
    $11 = $9 * $10;
    $12 = $11 + 0.75;
    $$pn29 = $12;
    break;
   }
   $13 = $4;
   $14 = $13 < 0.90909090909090906;
   if ($14) {
    $15 = $4 + -0.81818181276321411;
    $16 = $15 * 7.5625;
    $17 = $15 * $16;
    $18 = $17 + 0.9375;
    $$pn29 = $18;
    break;
   } else {
    $19 = $4 + -0.95454543828964233;
    $20 = $19 * 7.5625;
    $21 = $19 * $20;
    $22 = $21 + 0.984375;
    $$pn29 = $22;
    break;
   }
  }
 } while(0);
 $$pn = $$pn29 * $2;
 $$0 = $$pn + $1;
 return (+$$0);
}
function _DrawTitleScreen() {
 var $$0439454 = 0, $$0441452 = 0, $$0442451 = 0, $$0443450 = 0, $$0444449 = 0, $$0455 = 0, $$byval_copy123 = 0, $$byval_copy124 = 0, $$byval_copy125 = 0, $$byval_copy126 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0;
 var $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0;
 var $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0;
 var $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0;
 var $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0;
 var $341 = 0.0, $342 = 0.0, $343 = 0, $344 = 0.0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0.0, $395 = 0;
 var $396 = 0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0.0, $404 = 0, $405 = 0.0, $406 = 0, $407 = 0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0.0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0, $422 = 0.0, $423 = 0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0.0, $459 = 0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0.0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0, $475 = 0, $476 = 0.0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0, $502 = 0;
 var $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0.0, $509 = 0, $51 = 0, $510 = 0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0, $533 = 0.0, $534 = 0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0.0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0.0, $545 = 0, $546 = 0, $547 = 0.0, $548 = 0, $549 = 0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0.0, $556 = 0.0, $557 = 0;
 var $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $atlas01$byval_copy122 = 0, $exitcond = 0, $exitcond456 = 0, $exitcond457 = 0, $exitcond458 = 0, $exitcond460 = 0, $exitcond461 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1104|0);
 $$byval_copy126 = sp + 880|0;
 $$byval_copy125 = sp + 872|0;
 $$byval_copy124 = sp + 840|0;
 $$byval_copy123 = sp + 820|0;
 $atlas01$byval_copy122 = sp + 800|0;
 $0 = sp + 784|0;
 $1 = sp + 768|0;
 $2 = sp + 760|0;
 $3 = sp + 744|0;
 $4 = sp + 728|0;
 $5 = sp + 720|0;
 $6 = sp + 1092|0;
 $7 = sp + 1088|0;
 $8 = sp + 704|0;
 $9 = sp + 688|0;
 $10 = sp + 680|0;
 $11 = sp + 1084|0;
 $12 = sp + 1080|0;
 $13 = sp + 664|0;
 $14 = sp + 648|0;
 $15 = sp + 640|0;
 $16 = sp + 1076|0;
 $17 = sp + 1072|0;
 $18 = sp + 624|0;
 $19 = sp + 608|0;
 $20 = sp + 600|0;
 $21 = sp + 1068|0;
 $22 = sp + 1064|0;
 $23 = sp + 584|0;
 $24 = sp + 568|0;
 $25 = sp + 560|0;
 $26 = sp + 1060|0;
 $27 = sp + 1056|0;
 $28 = sp + 544|0;
 $29 = sp + 528|0;
 $30 = sp + 520|0;
 $31 = sp + 1052|0;
 $32 = sp + 1048|0;
 $33 = sp + 504|0;
 $34 = sp + 488|0;
 $35 = sp + 480|0;
 $36 = sp + 472|0;
 $37 = sp + 464|0;
 $38 = sp + 448|0;
 $39 = sp + 432|0;
 $40 = sp + 424|0;
 $41 = sp + 408|0;
 $42 = sp + 392|0;
 $43 = sp + 384|0;
 $44 = sp + 376|0;
 $45 = sp + 360|0;
 $46 = sp + 344|0;
 $47 = sp + 336|0;
 $48 = sp + 328|0;
 $49 = sp + 320|0;
 $50 = sp + 1044|0;
 $51 = sp + 304|0;
 $52 = sp + 288|0;
 $53 = sp + 280|0;
 $54 = sp + 1040|0;
 $55 = sp + 264|0;
 $56 = sp + 248|0;
 $57 = sp + 240|0;
 $58 = sp + 1036|0;
 $59 = sp + 224|0;
 $60 = sp + 208|0;
 $61 = sp + 200|0;
 $62 = sp + 1032|0;
 $63 = sp + 184|0;
 $64 = sp + 168|0;
 $65 = sp + 160|0;
 $66 = sp + 1028|0;
 $67 = sp + 144|0;
 $68 = sp + 128|0;
 $69 = sp + 120|0;
 $70 = sp + 1024|0;
 $71 = sp + 104|0;
 $72 = sp + 88|0;
 $73 = sp + 80|0;
 $74 = sp + 1020|0;
 $75 = sp + 64|0;
 $76 = sp + 48|0;
 $77 = sp + 40|0;
 $78 = sp + 1016|0;
 $79 = sp + 24|0;
 $80 = sp + 8|0;
 $81 = sp;
 $82 = sp + 1012|0;
 _memcpy(($$byval_copy126|0),(26424|0),132)|0;
 _BeginShaderMode($$byval_copy126);
 HEAP32[$0>>2] = 2;
 $83 = ((($0)) + 4|0);
 HEAP32[$83>>2] = 2;
 $84 = ((($0)) + 8|0);
 HEAP32[$84>>2] = 640;
 $85 = ((($0)) + 12|0);
 HEAP32[$85>>2] = 360;
 HEAP32[$1>>2] = 0;
 $86 = ((($1)) + 4|0);
 HEAP32[$86>>2] = 0;
 $87 = ((($1)) + 8|0);
 HEAP32[$87>>2] = 1280;
 $88 = ((($1)) + 12|0);
 HEAP32[$88>>2] = 720;
 HEAPF32[$2>>2] = 0.0;
 $89 = ((($2)) + 4|0);
 HEAPF32[$89>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy123>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$0+12>>2]|0;
 ;HEAP32[$$byval_copy124>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$$byval_copy125>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$2+4>>2]|0;
 ;HEAP8[$$byval_copy126>>0]=HEAP8[340296>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,0.0,$$byval_copy126);
 _DrawParallaxBack();
 _DrawParallaxMiddle();
 $90 = ((($23)) + 4|0);
 $91 = ((($23)) + 8|0);
 $92 = ((($23)) + 12|0);
 $93 = ((($24)) + 4|0);
 $94 = ((($24)) + 8|0);
 $95 = ((($24)) + 12|0);
 $96 = ((($25)) + 4|0);
 $97 = ((($27)) + 1|0);
 $98 = ((($27)) + 2|0);
 $99 = ((($27)) + 3|0);
 $100 = ((($18)) + 4|0);
 $101 = ((($18)) + 8|0);
 $102 = ((($18)) + 12|0);
 $103 = ((($19)) + 4|0);
 $104 = ((($19)) + 8|0);
 $105 = ((($19)) + 12|0);
 $106 = ((($20)) + 4|0);
 $107 = ((($22)) + 1|0);
 $108 = ((($22)) + 2|0);
 $109 = ((($22)) + 3|0);
 $110 = ((($13)) + 4|0);
 $111 = ((($13)) + 8|0);
 $112 = ((($13)) + 12|0);
 $113 = ((($14)) + 4|0);
 $114 = ((($14)) + 8|0);
 $115 = ((($14)) + 12|0);
 $116 = ((($15)) + 4|0);
 $117 = ((($17)) + 1|0);
 $118 = ((($17)) + 2|0);
 $119 = ((($17)) + 3|0);
 $120 = ((($8)) + 4|0);
 $121 = ((($8)) + 8|0);
 $122 = ((($8)) + 12|0);
 $123 = ((($9)) + 4|0);
 $124 = ((($9)) + 8|0);
 $125 = ((($9)) + 12|0);
 $126 = ((($10)) + 4|0);
 $127 = ((($12)) + 1|0);
 $128 = ((($12)) + 2|0);
 $129 = ((($12)) + 3|0);
 $130 = ((($3)) + 4|0);
 $131 = ((($3)) + 8|0);
 $132 = ((($3)) + 12|0);
 $133 = ((($4)) + 4|0);
 $134 = ((($4)) + 8|0);
 $135 = ((($4)) + 12|0);
 $136 = ((($5)) + 4|0);
 $137 = ((($7)) + 1|0);
 $138 = ((($7)) + 2|0);
 $139 = ((($7)) + 3|0);
 $$0455 = 0;
 while(1) {
  $150 = (((130560 + (($$0455*40)|0)|0)) + 36|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($151|0)==(0);
  if (!($152)) {
   HEAP32[$3>>2] = 276;
   HEAP32[$130>>2] = 766;
   HEAP32[$131>>2] = 32;
   HEAP32[$132>>2] = 32;
   $153 = (130560 + (($$0455*40)|0)|0);
   $154 = +HEAPF32[$153>>2];
   $155 = (~~(($154)));
   HEAP32[$4>>2] = $155;
   $156 = (((130560 + (($$0455*40)|0)|0)) + 4|0);
   $157 = +HEAPF32[$156>>2];
   $158 = (~~(($157)));
   HEAP32[$133>>2] = $158;
   $159 = (((130560 + (($$0455*40)|0)|0)) + 20|0);
   $160 = +HEAPF32[$159>>2];
   $161 = $160 * 32.0;
   $162 = (~~(($161)));
   HEAP32[$134>>2] = $162;
   HEAP32[$135>>2] = $162;
   $163 = $161 * 0.5;
   HEAPF32[$5>>2] = $163;
   HEAPF32[$136>>2] = $163;
   $164 = (((130560 + (($$0455*40)|0)|0)) + 16|0);
   $165 = +HEAPF32[$164>>2];
   HEAP8[$7>>0] = -112;
   HEAP8[$137>>0] = -42;
   HEAP8[$138>>0] = -1;
   HEAP8[$139>>0] = -1;
   $166 = (((130560 + (($$0455*40)|0)|0)) + 28|0);
   $167 = +HEAPF32[$166>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$7+3>>0]|0;
   _Fade($6,$$byval_copy126,$167);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$3+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$4+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$5+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$6+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$165,$$byval_copy126);
  }
  $168 = (((135680 + (($$0455*40)|0)|0)) + 36|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ($169|0)==(0);
  if (!($170)) {
   HEAP32[$8>>2] = 538;
   HEAP32[$120>>2] = 715;
   HEAP32[$121>>2] = 32;
   HEAP32[$122>>2] = 32;
   $171 = (135680 + (($$0455*40)|0)|0);
   $172 = +HEAPF32[$171>>2];
   $173 = (~~(($172)));
   HEAP32[$9>>2] = $173;
   $174 = (((135680 + (($$0455*40)|0)|0)) + 4|0);
   $175 = +HEAPF32[$174>>2];
   $176 = (~~(($175)));
   HEAP32[$123>>2] = $176;
   $177 = (((135680 + (($$0455*40)|0)|0)) + 20|0);
   $178 = +HEAPF32[$177>>2];
   $179 = $178 * 32.0;
   $180 = (~~(($179)));
   HEAP32[$124>>2] = $180;
   HEAP32[$125>>2] = $180;
   $181 = $179 * 0.5;
   HEAPF32[$10>>2] = $181;
   HEAPF32[$126>>2] = $181;
   $182 = (((135680 + (($$0455*40)|0)|0)) + 16|0);
   $183 = +HEAPF32[$182>>2];
   HEAP8[$12>>0] = -77;
   HEAP8[$127>>0] = 86;
   HEAP8[$128>>0] = 6;
   HEAP8[$129>>0] = -1;
   $184 = (((135680 + (($$0455*40)|0)|0)) + 28|0);
   $185 = +HEAPF32[$184>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$12>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$12+3>>0]|0;
   _Fade($11,$$byval_copy126,$185);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$8+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$9+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$10+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$11>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$11+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$183,$$byval_copy126);
  }
  $186 = (((140800 + (($$0455*40)|0)|0)) + 36|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = ($187|0)==(0);
  if (!($188)) {
   HEAP32[$13>>2] = 504;
   HEAP32[$110>>2] = 715;
   HEAP32[$111>>2] = 32;
   HEAP32[$112>>2] = 32;
   $189 = (140800 + (($$0455*40)|0)|0);
   $190 = +HEAPF32[$189>>2];
   $191 = (~~(($190)));
   HEAP32[$14>>2] = $191;
   $192 = (((140800 + (($$0455*40)|0)|0)) + 4|0);
   $193 = +HEAPF32[$192>>2];
   $194 = (~~(($193)));
   HEAP32[$113>>2] = $194;
   $195 = (((140800 + (($$0455*40)|0)|0)) + 20|0);
   $196 = +HEAPF32[$195>>2];
   $197 = $196 * 32.0;
   $198 = (~~(($197)));
   HEAP32[$114>>2] = $198;
   HEAP32[$115>>2] = $198;
   $199 = $197 * 0.5;
   HEAPF32[$15>>2] = $199;
   HEAPF32[$116>>2] = $199;
   $200 = (((140800 + (($$0455*40)|0)|0)) + 16|0);
   $201 = +HEAPF32[$200>>2];
   HEAP8[$17>>0] = -54;
   HEAP8[$117>>0] = -89;
   HEAP8[$118>>0] = 126;
   HEAP8[$119>>0] = -1;
   $202 = (((140800 + (($$0455*40)|0)|0)) + 28|0);
   $203 = +HEAPF32[$202>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$17+3>>0]|0;
   _Fade($16,$$byval_copy126,$203);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$13+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$14+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$15+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$16>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$16+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$201,$$byval_copy126);
  }
  $204 = (((145920 + (($$0455*40)|0)|0)) + 36|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = ($205|0)==(0);
  if (!($206)) {
   HEAP32[$18>>2] = 808;
   HEAP32[$100>>2] = 315;
   HEAP32[$101>>2] = 32;
   HEAP32[$102>>2] = 32;
   $207 = (145920 + (($$0455*40)|0)|0);
   $208 = +HEAPF32[$207>>2];
   $209 = (~~(($208)));
   HEAP32[$19>>2] = $209;
   $210 = (((145920 + (($$0455*40)|0)|0)) + 4|0);
   $211 = +HEAPF32[$210>>2];
   $212 = (~~(($211)));
   HEAP32[$103>>2] = $212;
   $213 = (((145920 + (($$0455*40)|0)|0)) + 20|0);
   $214 = +HEAPF32[$213>>2];
   $215 = $214 * 32.0;
   $216 = (~~(($215)));
   HEAP32[$104>>2] = $216;
   HEAP32[$105>>2] = $216;
   $217 = $215 * 0.5;
   HEAPF32[$20>>2] = $217;
   HEAPF32[$106>>2] = $217;
   $218 = (((145920 + (($$0455*40)|0)|0)) + 16|0);
   $219 = +HEAPF32[$218>>2];
   HEAP8[$22>>0] = -38;
   HEAP8[$107>>0] = 84;
   HEAP8[$108>>0] = 108;
   HEAP8[$109>>0] = -1;
   $220 = (((145920 + (($$0455*40)|0)|0)) + 28|0);
   $221 = +HEAPF32[$220>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$22>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$22+3>>0]|0;
   _Fade($21,$$byval_copy126,$221);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$18+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$19+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$20+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$21>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$21+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$219,$$byval_copy126);
  }
  $222 = (((156180 + (($$0455*40)|0)|0)) + 36|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = ($223|0)==(0);
  if (!($224)) {
   HEAP32[$23>>2] = 842;
   HEAP32[$90>>2] = 315;
   HEAP32[$91>>2] = 32;
   HEAP32[$92>>2] = 32;
   $225 = (156180 + (($$0455*40)|0)|0);
   $226 = +HEAPF32[$225>>2];
   $227 = (~~(($226)));
   HEAP32[$24>>2] = $227;
   $228 = (((156180 + (($$0455*40)|0)|0)) + 4|0);
   $229 = +HEAPF32[$228>>2];
   $230 = (~~(($229)));
   HEAP32[$93>>2] = $230;
   $231 = (((156180 + (($$0455*40)|0)|0)) + 20|0);
   $232 = +HEAPF32[$231>>2];
   $233 = $232 * 32.0;
   $234 = (~~(($233)));
   HEAP32[$94>>2] = $234;
   HEAP32[$95>>2] = $234;
   $235 = $233 * 0.5;
   HEAPF32[$25>>2] = $235;
   HEAPF32[$96>>2] = $235;
   $236 = (((156180 + (($$0455*40)|0)|0)) + 16|0);
   $237 = +HEAPF32[$236>>2];
   HEAP8[$27>>0] = -112;
   HEAP8[$97>>0] = -73;
   HEAP8[$98>>0] = -69;
   HEAP8[$99>>0] = -1;
   $238 = (((156180 + (($$0455*40)|0)|0)) + 28|0);
   $239 = +HEAPF32[$238>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$27>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$27+3>>0]|0;
   _Fade($26,$$byval_copy126,$239);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$23+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$24+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$25+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$26>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$26+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$237,$$byval_copy126);
  }
  $240 = (($$0455) + 1)|0;
  $exitcond461 = ($240|0)==(128);
  if ($exitcond461) {
   break;
  } else {
   $$0455 = $240;
  }
 }
 $140 = ((($28)) + 4|0);
 $141 = ((($28)) + 8|0);
 $142 = ((($28)) + 12|0);
 $143 = ((($29)) + 4|0);
 $144 = ((($29)) + 8|0);
 $145 = ((($29)) + 12|0);
 $146 = ((($30)) + 4|0);
 $147 = ((($32)) + 1|0);
 $148 = ((($32)) + 2|0);
 $149 = ((($32)) + 3|0);
 $$0439454 = 0;
 while(1) {
  $241 = (((161300 + (($$0439454*36)|0)|0)) + 24|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = ($242|0)==(0);
  if (!($243)) {
   HEAP32[$28>>2] = 260;
   HEAP32[$140>>2] = 766;
   HEAP32[$141>>2] = 14;
   HEAP32[$142>>2] = 216;
   $244 = (161300 + (($$0439454*36)|0)|0);
   $245 = +HEAPF32[$244>>2];
   $246 = (~~(($245)));
   HEAP32[$29>>2] = $246;
   $247 = (((161300 + (($$0439454*36)|0)|0)) + 4|0);
   $248 = +HEAPF32[$247>>2];
   $249 = (~~(($248)));
   HEAP32[$143>>2] = $249;
   $250 = (((161300 + (($$0439454*36)|0)|0)) + 16|0);
   $251 = +HEAPF32[$250>>2];
   $252 = $251 * 14.0;
   $253 = (~~(($252)));
   HEAP32[$144>>2] = $253;
   $254 = $251 * 216.0;
   $255 = (~~(($254)));
   HEAP32[$145>>2] = $255;
   $256 = $252 * 0.5;
   HEAPF32[$30>>2] = $256;
   $257 = $254 * 0.5;
   HEAPF32[$146>>2] = $257;
   $258 = (((161300 + (($$0439454*36)|0)|0)) + 20|0);
   $259 = +HEAPF32[$258>>2];
   HEAP8[$32>>0] = -1;
   HEAP8[$147>>0] = -53;
   HEAP8[$148>>0] = 0;
   HEAP8[$149>>0] = -1;
   $260 = (((161300 + (($$0439454*36)|0)|0)) + 12|0);
   $261 = +HEAPF32[$260>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$32>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$32+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$32+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$32+3>>0]|0;
   _Fade($31,$$byval_copy126,$261);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$28+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$29>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$29+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$30>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$30+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$31>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$31+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$259,$$byval_copy126);
  }
  $262 = (($$0439454) + 1)|0;
  $exitcond460 = ($262|0)==(20);
  if ($exitcond460) {
   break;
  } else {
   $$0439454 = $262;
  }
 }
 _DrawParallaxFront();
 $263 = ((($33)) + 4|0);
 $264 = ((($33)) + 8|0);
 $265 = ((($33)) + 12|0);
 $266 = ((($34)) + 4|0);
 $267 = ((($34)) + 8|0);
 $268 = ((($34)) + 12|0);
 $269 = ((($35)) + 4|0);
 HEAP32[$33>>2] = 1788;
 HEAP32[$263>>2] = 2;
 HEAP32[$264>>2] = 43;
 HEAP32[$265>>2] = 720;
 $270 = HEAP32[40505]|0;
 HEAP32[$34>>2] = $270;
 $271 = HEAP32[(162024)>>2]|0;
 HEAP32[$266>>2] = $271;
 HEAP32[$267>>2] = 43;
 HEAP32[$268>>2] = 720;
 HEAPF32[$35>>2] = 0.0;
 HEAPF32[$269>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy123>>2]=HEAP32[$33>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$33+12>>2]|0;
 ;HEAP32[$$byval_copy124>>2]=HEAP32[$34>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$34+12>>2]|0;
 ;HEAP32[$$byval_copy125>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$35+4>>2]|0;
 ;HEAP8[$$byval_copy126>>0]=HEAP8[340300>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[340300+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[340300+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[340300+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,0.0,$$byval_copy126);
 HEAP32[$33>>2] = 1788;
 HEAP32[$263>>2] = 2;
 HEAP32[$264>>2] = 43;
 HEAP32[$265>>2] = 720;
 $272 = HEAP32[(162036)>>2]|0;
 HEAP32[$34>>2] = $272;
 $273 = HEAP32[(162040)>>2]|0;
 HEAP32[$266>>2] = $273;
 HEAP32[$267>>2] = 43;
 HEAP32[$268>>2] = 720;
 HEAPF32[$35>>2] = 0.0;
 HEAPF32[$269>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy123>>2]=HEAP32[$33>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$33+12>>2]|0;
 ;HEAP32[$$byval_copy124>>2]=HEAP32[$34>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$34+12>>2]|0;
 ;HEAP32[$$byval_copy125>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$35+4>>2]|0;
 ;HEAP8[$$byval_copy126>>0]=HEAP8[340300>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[340300+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[340300+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[340300+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,0.0,$$byval_copy126);
 HEAP32[$33>>2] = 1788;
 HEAP32[$263>>2] = 2;
 HEAP32[$264>>2] = 43;
 HEAP32[$265>>2] = 720;
 $274 = HEAP32[(162052)>>2]|0;
 HEAP32[$34>>2] = $274;
 $275 = HEAP32[(162056)>>2]|0;
 HEAP32[$266>>2] = $275;
 HEAP32[$267>>2] = 43;
 HEAP32[$268>>2] = 720;
 HEAPF32[$35>>2] = 0.0;
 HEAPF32[$269>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy123>>2]=HEAP32[$33>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$33+12>>2]|0;
 ;HEAP32[$$byval_copy124>>2]=HEAP32[$34>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$34+12>>2]|0;
 ;HEAP32[$$byval_copy125>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$35+4>>2]|0;
 ;HEAP8[$$byval_copy126>>0]=HEAP8[340300>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[340300+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[340300+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[340300+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,0.0,$$byval_copy126);
 HEAP32[$33>>2] = 1788;
 HEAP32[$263>>2] = 2;
 HEAP32[$264>>2] = 43;
 HEAP32[$265>>2] = 720;
 $276 = HEAP32[(162068)>>2]|0;
 HEAP32[$34>>2] = $276;
 $277 = HEAP32[(162072)>>2]|0;
 HEAP32[$266>>2] = $277;
 HEAP32[$267>>2] = 43;
 HEAP32[$268>>2] = 720;
 HEAPF32[$35>>2] = 0.0;
 HEAPF32[$269>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy123>>2]=HEAP32[$33>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$33+12>>2]|0;
 ;HEAP32[$$byval_copy124>>2]=HEAP32[$34>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$34+12>>2]|0;
 ;HEAP32[$$byval_copy125>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$35+4>>2]|0;
 ;HEAP8[$$byval_copy126>>0]=HEAP8[340300>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[340300+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[340300+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[340300+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,0.0,$$byval_copy126);
 HEAP32[$33>>2] = 1788;
 HEAP32[$263>>2] = 2;
 HEAP32[$264>>2] = 43;
 HEAP32[$265>>2] = 720;
 $278 = HEAP32[(162084)>>2]|0;
 HEAP32[$34>>2] = $278;
 $279 = HEAP32[(162088)>>2]|0;
 HEAP32[$266>>2] = $279;
 HEAP32[$267>>2] = 43;
 HEAP32[$268>>2] = 720;
 HEAPF32[$35>>2] = 0.0;
 HEAPF32[$269>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy123>>2]=HEAP32[$33>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$33+12>>2]|0;
 ;HEAP32[$$byval_copy124>>2]=HEAP32[$34>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$34+12>>2]|0;
 ;HEAP32[$$byval_copy125>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$35+4>>2]|0;
 ;HEAP8[$$byval_copy126>>0]=HEAP8[340300>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[340300+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[340300+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[340300+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,0.0,$$byval_copy126);
 _EndShaderMode();
 $280 = HEAP32[40525]|0;
 $281 = HEAP32[40527]|0;
 $282 = (($280) - ($281))|0;
 $283 = (+($282|0));
 HEAPF32[$36>>2] = $283;
 $284 = ((($36)) + 4|0);
 $285 = HEAP32[40526]|0;
 $286 = (($285) + -40)|0;
 $287 = (+($286|0));
 HEAPF32[$284>>2] = $287;
 HEAP32[$37>>2] = -1;
 ;HEAP32[$$byval_copy123>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy123+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$$byval_copy124>>2]=HEAP32[162112>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[162112+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[162112+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[162112+12>>2]|0;
 ;HEAP32[$$byval_copy125>>2]=HEAP32[$36>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$36+4>>2]|0;
 ;HEAP8[$$byval_copy126>>0]=HEAP8[$37>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$37+3>>0]|0;
 _DrawTextureRec($$byval_copy123,$$byval_copy124,$$byval_copy125,$$byval_copy126);
 _memcpy(($$byval_copy126|0),(26424|0),132)|0;
 _BeginShaderMode($$byval_copy126);
 HEAP32[$38>>2] = 1146;
 $288 = ((($38)) + 4|0);
 HEAP32[$288>>2] = 2;
 $289 = ((($38)) + 8|0);
 HEAP32[$289>>2] = 640;
 $290 = ((($38)) + 12|0);
 HEAP32[$290>>2] = 77;
 HEAP32[$39>>2] = 0;
 $291 = ((($39)) + 4|0);
 HEAP32[$291>>2] = 637;
 $292 = ((($39)) + 8|0);
 HEAP32[$292>>2] = 1280;
 $293 = ((($39)) + 12|0);
 HEAP32[$293>>2] = 154;
 HEAPF32[$40>>2] = 0.0;
 $294 = ((($40)) + 4|0);
 HEAPF32[$294>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy123>>2]=HEAP32[$38>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$38+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$38+12>>2]|0;
 ;HEAP32[$$byval_copy124>>2]=HEAP32[$39>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$39+12>>2]|0;
 ;HEAP32[$$byval_copy125>>2]=HEAP32[$40>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$40+4>>2]|0;
 ;HEAP8[$$byval_copy126>>0]=HEAP8[340288>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[340288+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[340288+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[340288+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,0.0,$$byval_copy126);
 _EndShaderMode();
 HEAP32[$41>>2] = 2;
 $295 = ((($41)) + 4|0);
 HEAP32[$295>>2] = 678;
 $296 = ((($41)) + 8|0);
 HEAP32[$296>>2] = 512;
 $297 = ((($41)) + 12|0);
 HEAP32[$297>>2] = 230;
 $298 = (_GetScreenWidth()|0);
 $299 = (+($298|0));
 $300 = $299 * 0.49000000953674316;
 $301 = $300 + -256.0;
 $302 = (~~(($301)));
 HEAP32[$42>>2] = $302;
 $303 = ((($42)) + 4|0);
 $304 = +HEAPF32[40533];
 $305 = (~~(($304)));
 HEAP32[$303>>2] = $305;
 $306 = ((($42)) + 8|0);
 HEAP32[$306>>2] = 512;
 $307 = ((($42)) + 12|0);
 HEAP32[$307>>2] = 235;
 HEAPF32[$43>>2] = 0.0;
 $308 = ((($43)) + 4|0);
 HEAPF32[$308>>2] = 0.0;
 HEAP32[$44>>2] = -1;
 ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$$byval_copy123>>2]=HEAP32[$41>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$41+12>>2]|0;
 ;HEAP32[$$byval_copy124>>2]=HEAP32[$42>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$42+12>>2]|0;
 ;HEAP32[$$byval_copy125>>2]=HEAP32[$43>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$43+4>>2]|0;
 ;HEAP8[$$byval_copy126>>0]=HEAP8[$44>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$44+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$44+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$44+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,0.0,$$byval_copy126);
 HEAP32[$45>>2] = 2;
 $309 = ((($45)) + 4|0);
 HEAP32[$309>>2] = 910;
 $310 = ((($45)) + 8|0);
 HEAP32[$310>>2] = 512;
 $311 = ((($45)) + 12|0);
 HEAP32[$311>>2] = 116;
 $312 = (_GetScreenWidth()|0);
 $313 = (+($312|0));
 $314 = $313 * 0.49000000953674316;
 $315 = $314 + -256.0;
 $316 = (~~(($315)));
 HEAP32[$46>>2] = $316;
 $317 = ((($46)) + 4|0);
 $318 = +HEAPF32[40534];
 $319 = (~~(($318)));
 HEAP32[$317>>2] = $319;
 $320 = ((($46)) + 8|0);
 HEAP32[$320>>2] = 512;
 $321 = ((($46)) + 12|0);
 HEAP32[$321>>2] = 116;
 HEAPF32[$47>>2] = 0.0;
 $322 = ((($47)) + 4|0);
 HEAPF32[$322>>2] = 0.0;
 HEAP32[$48>>2] = -1;
 ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$$byval_copy123>>2]=HEAP32[$45>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$45+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$45+12>>2]|0;
 ;HEAP32[$$byval_copy124>>2]=HEAP32[$46>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$46+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$46+12>>2]|0;
 ;HEAP32[$$byval_copy125>>2]=HEAP32[$47>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$47+4>>2]|0;
 ;HEAP8[$$byval_copy126>>0]=HEAP8[$48>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$48+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,0.0,$$byval_copy126);
 $323 = HEAP32[6815]|0;
 $324 = (($323|0) / 60)&-1;
 $325 = $324 & 1;
 $326 = ($325|0)==(0);
 if (!($326)) {
  $327 = (+($323|0));
  $328 = +HEAPF32[6821];
  $329 = !($327 >= $328);
  if (!($329)) {
   $330 = (_GetScreenWidth()|0);
   $331 = (($330|0) / 2)&-1;
   $332 = (+($331|0));
   $333 = +HEAPF32[6512];
   $334 = $333 * 0.5;
   $335 = $332 - $334;
   HEAPF32[$49>>2] = $335;
   $336 = ((($49)) + 4|0);
   $337 = (_GetScreenHeight()|0);
   $338 = (($337|0) / 2)&-1;
   $339 = (+($338|0));
   $340 = +HEAPF32[(26052)>>2];
   $341 = $340 * 2.0;
   $342 = $339 + $341;
   HEAPF32[$336>>2] = $342;
   $343 = HEAP32[(26372)>>2]|0;
   $344 = (+($343|0));
   HEAP8[$50>>0] = -9;
   $345 = ((($50)) + 1|0);
   HEAP8[$345>>0] = -17;
   $346 = ((($50)) + 2|0);
   HEAP8[$346>>0] = -47;
   $347 = ((($50)) + 3|0);
   HEAP8[$347>>0] = -1;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[26352>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$$byval_copy124+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$$byval_copy124+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$$byval_copy124+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$$byval_copy124+28>>2]=HEAP32[26352+28>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$49>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$49+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$50>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$50+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$50+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$50+3>>0]|0;
   _DrawTextEx($$byval_copy124,7085,$$byval_copy125,$344,2,$$byval_copy126);
  }
 }
 $348 = ((($67)) + 4|0);
 $349 = ((($67)) + 8|0);
 $350 = ((($67)) + 12|0);
 $351 = ((($68)) + 4|0);
 $352 = ((($68)) + 8|0);
 $353 = ((($68)) + 12|0);
 $354 = ((($69)) + 4|0);
 $355 = ((($63)) + 4|0);
 $356 = ((($63)) + 8|0);
 $357 = ((($63)) + 12|0);
 $358 = ((($64)) + 4|0);
 $359 = ((($64)) + 8|0);
 $360 = ((($64)) + 12|0);
 $361 = ((($65)) + 4|0);
 $362 = ((($59)) + 4|0);
 $363 = ((($59)) + 8|0);
 $364 = ((($59)) + 12|0);
 $365 = ((($60)) + 4|0);
 $366 = ((($60)) + 8|0);
 $367 = ((($60)) + 12|0);
 $368 = ((($61)) + 4|0);
 $369 = ((($55)) + 4|0);
 $370 = ((($55)) + 8|0);
 $371 = ((($55)) + 12|0);
 $372 = ((($56)) + 4|0);
 $373 = ((($56)) + 8|0);
 $374 = ((($56)) + 12|0);
 $375 = ((($57)) + 4|0);
 $376 = ((($51)) + 4|0);
 $377 = ((($51)) + 8|0);
 $378 = ((($51)) + 12|0);
 $379 = ((($52)) + 4|0);
 $380 = ((($52)) + 8|0);
 $381 = ((($52)) + 12|0);
 $382 = ((($53)) + 4|0);
 $$0441452 = 0;
 while(1) {
  $390 = (((27316 + (($$0441452*40)|0)|0)) + 36|0);
  $391 = HEAP32[$390>>2]|0;
  $392 = ($391|0)==(0);
  if (!($392)) {
   HEAP32[$51>>2] = 419;
   HEAP32[$376>>2] = 1839;
   HEAP32[$377>>2] = 32;
   HEAP32[$378>>2] = 32;
   $393 = (27316 + (($$0441452*40)|0)|0);
   $394 = +HEAPF32[$393>>2];
   $395 = (~~(($394)));
   HEAP32[$52>>2] = $395;
   $396 = (((27316 + (($$0441452*40)|0)|0)) + 4|0);
   $397 = +HEAPF32[$396>>2];
   $398 = (~~(($397)));
   HEAP32[$379>>2] = $398;
   $399 = (((27316 + (($$0441452*40)|0)|0)) + 20|0);
   $400 = +HEAPF32[$399>>2];
   $401 = $400 * 32.0;
   $402 = (~~(($401)));
   HEAP32[$380>>2] = $402;
   HEAP32[$381>>2] = $402;
   $403 = $401 * 0.5;
   HEAPF32[$53>>2] = $403;
   HEAPF32[$382>>2] = $403;
   $404 = (((27316 + (($$0441452*40)|0)|0)) + 16|0);
   $405 = +HEAPF32[$404>>2];
   $406 = (((27316 + (($$0441452*40)|0)|0)) + 24|0);
   $407 = (((27316 + (($$0441452*40)|0)|0)) + 28|0);
   $408 = +HEAPF32[$407>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$406>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$406+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$406+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$406+3>>0]|0;
   _Fade($54,$$byval_copy126,$408);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$51>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$51+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$52>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$52+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$52+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$52+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$53>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$53+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$54>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$54+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$405,$$byval_copy126);
  }
  $409 = (((32460 + (($$0441452*40)|0)|0)) + 36|0);
  $410 = HEAP32[$409>>2]|0;
  $411 = ($410|0)==(0);
  if (!($411)) {
   HEAP32[$55>>2] = 453;
   HEAP32[$369>>2] = 1839;
   HEAP32[$370>>2] = 32;
   HEAP32[$371>>2] = 32;
   $412 = (32460 + (($$0441452*40)|0)|0);
   $413 = +HEAPF32[$412>>2];
   $414 = (~~(($413)));
   HEAP32[$56>>2] = $414;
   $415 = (((32460 + (($$0441452*40)|0)|0)) + 4|0);
   $416 = +HEAPF32[$415>>2];
   $417 = (~~(($416)));
   HEAP32[$372>>2] = $417;
   $418 = (((32460 + (($$0441452*40)|0)|0)) + 20|0);
   $419 = +HEAPF32[$418>>2];
   $420 = $419 * 32.0;
   $421 = (~~(($420)));
   HEAP32[$373>>2] = $421;
   HEAP32[$374>>2] = $421;
   $422 = $420 * 0.5;
   HEAPF32[$57>>2] = $422;
   HEAPF32[$375>>2] = $422;
   $423 = (((32460 + (($$0441452*40)|0)|0)) + 16|0);
   $424 = +HEAPF32[$423>>2];
   $425 = (((32460 + (($$0441452*40)|0)|0)) + 24|0);
   $426 = (((32460 + (($$0441452*40)|0)|0)) + 28|0);
   $427 = +HEAPF32[$426>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$425>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$425+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$425+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$425+3>>0]|0;
   _Fade($58,$$byval_copy126,$427);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$55>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$55+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$55+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$55+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$56>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$56+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$56+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$57>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$57+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$58>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$58+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$58+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$58+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$424,$$byval_copy126);
  }
  $428 = (((37600 + (($$0441452*40)|0)|0)) + 36|0);
  $429 = HEAP32[$428>>2]|0;
  $430 = ($429|0)==(0);
  if (!($430)) {
   HEAP32[$59>>2] = 354;
   HEAP32[$362>>2] = 2006;
   HEAP32[$363>>2] = 32;
   HEAP32[$364>>2] = 32;
   $431 = (37600 + (($$0441452*40)|0)|0);
   $432 = +HEAPF32[$431>>2];
   $433 = (~~(($432)));
   HEAP32[$60>>2] = $433;
   $434 = (((37600 + (($$0441452*40)|0)|0)) + 4|0);
   $435 = +HEAPF32[$434>>2];
   $436 = (~~(($435)));
   HEAP32[$365>>2] = $436;
   $437 = (((37600 + (($$0441452*40)|0)|0)) + 20|0);
   $438 = +HEAPF32[$437>>2];
   $439 = $438 * 32.0;
   $440 = (~~(($439)));
   HEAP32[$366>>2] = $440;
   HEAP32[$367>>2] = $440;
   $441 = $439 * 0.5;
   HEAPF32[$61>>2] = $441;
   HEAPF32[$368>>2] = $441;
   $442 = (((37600 + (($$0441452*40)|0)|0)) + 16|0);
   $443 = +HEAPF32[$442>>2];
   $444 = (((37600 + (($$0441452*40)|0)|0)) + 24|0);
   $445 = (((37600 + (($$0441452*40)|0)|0)) + 28|0);
   $446 = +HEAPF32[$445>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$444>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$444+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$444+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$444+3>>0]|0;
   _Fade($62,$$byval_copy126,$446);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$59>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$59+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$59+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$60>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$60+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$60+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$60+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$61>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$61+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$62>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$62+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$443,$$byval_copy126);
  }
  $447 = (((42740 + (($$0441452*40)|0)|0)) + 36|0);
  $448 = HEAP32[$447>>2]|0;
  $449 = ($448|0)==(0);
  if (!($449)) {
   HEAP32[$63>>2] = 1989;
   HEAP32[$355>>2] = 166;
   HEAP32[$356>>2] = 32;
   HEAP32[$357>>2] = 32;
   $450 = (42740 + (($$0441452*40)|0)|0);
   $451 = +HEAPF32[$450>>2];
   $452 = (~~(($451)));
   HEAP32[$64>>2] = $452;
   $453 = (((42740 + (($$0441452*40)|0)|0)) + 4|0);
   $454 = +HEAPF32[$453>>2];
   $455 = (~~(($454)));
   HEAP32[$358>>2] = $455;
   $456 = (((42740 + (($$0441452*40)|0)|0)) + 20|0);
   $457 = +HEAPF32[$456>>2];
   $458 = $457 * 32.0;
   $459 = (~~(($458)));
   HEAP32[$359>>2] = $459;
   HEAP32[$360>>2] = $459;
   $460 = $458 * 0.5;
   HEAPF32[$65>>2] = $460;
   HEAPF32[$361>>2] = $460;
   $461 = (((42740 + (($$0441452*40)|0)|0)) + 16|0);
   $462 = +HEAPF32[$461>>2];
   $463 = (((42740 + (($$0441452*40)|0)|0)) + 24|0);
   $464 = (((42740 + (($$0441452*40)|0)|0)) + 28|0);
   $465 = +HEAPF32[$464>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$463>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$463+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$463+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$463+3>>0]|0;
   _Fade($66,$$byval_copy126,$465);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$63>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$63+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$63+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$63+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$64>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$64+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$64+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$64+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$65>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$65+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$66>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$66+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$66+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$66+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$462,$$byval_copy126);
  }
  $466 = (((151060 + (($$0441452*40)|0)|0)) + 36|0);
  $467 = HEAP32[$466>>2]|0;
  $468 = ($467|0)==(0);
  if (!($468)) {
   HEAP32[$67>>2] = 487;
   HEAP32[$348>>2] = 1839;
   HEAP32[$349>>2] = 32;
   HEAP32[$350>>2] = 32;
   $469 = (151060 + (($$0441452*40)|0)|0);
   $470 = +HEAPF32[$469>>2];
   $471 = (~~(($470)));
   HEAP32[$68>>2] = $471;
   $472 = (((151060 + (($$0441452*40)|0)|0)) + 4|0);
   $473 = +HEAPF32[$472>>2];
   $474 = (~~(($473)));
   HEAP32[$351>>2] = $474;
   $475 = (((151060 + (($$0441452*40)|0)|0)) + 20|0);
   $476 = +HEAPF32[$475>>2];
   $477 = $476 * 32.0;
   $478 = (~~(($477)));
   HEAP32[$352>>2] = $478;
   HEAP32[$353>>2] = $478;
   $479 = $477 * 0.5;
   HEAPF32[$69>>2] = $479;
   HEAPF32[$354>>2] = $479;
   $480 = (((151060 + (($$0441452*40)|0)|0)) + 16|0);
   $481 = +HEAPF32[$480>>2];
   $482 = (((151060 + (($$0441452*40)|0)|0)) + 24|0);
   $483 = (((151060 + (($$0441452*40)|0)|0)) + 28|0);
   $484 = +HEAPF32[$483>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$482>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$482+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$482+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$482+3>>0]|0;
   _Fade($70,$$byval_copy126,$484);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$67>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$67+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$67+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$67+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$68>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$68+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$68+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$69>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$69+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$70>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$70+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$70+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$70+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$481,$$byval_copy126);
  }
  $485 = (($$0441452) + 1)|0;
  $exitcond458 = ($485|0)==(128);
  if ($exitcond458) {
   break;
  } else {
   $$0441452 = $485;
  }
 }
 $383 = ((($71)) + 4|0);
 $384 = ((($71)) + 8|0);
 $385 = ((($71)) + 12|0);
 $386 = ((($72)) + 4|0);
 $387 = ((($72)) + 8|0);
 $388 = ((($72)) + 12|0);
 $389 = ((($73)) + 4|0);
 $$0442451 = 0;
 while(1) {
  $493 = (((48620 + (($$0442451*40)|0)|0)) + 36|0);
  $494 = HEAP32[$493>>2]|0;
  $495 = ($494|0)==(0);
  if (!($495)) {
   HEAP32[$71>>2] = 487;
   HEAP32[$383>>2] = 1839;
   HEAP32[$384>>2] = 32;
   HEAP32[$385>>2] = 32;
   $496 = (48620 + (($$0442451*40)|0)|0);
   $497 = +HEAPF32[$496>>2];
   $498 = (~~(($497)));
   HEAP32[$72>>2] = $498;
   $499 = (((48620 + (($$0442451*40)|0)|0)) + 4|0);
   $500 = +HEAPF32[$499>>2];
   $501 = (~~(($500)));
   HEAP32[$386>>2] = $501;
   $502 = (((48620 + (($$0442451*40)|0)|0)) + 20|0);
   $503 = +HEAPF32[$502>>2];
   $504 = $503 * 32.0;
   $505 = (~~(($504)));
   HEAP32[$387>>2] = $505;
   HEAP32[$388>>2] = $505;
   $506 = $504 * 0.5;
   HEAPF32[$73>>2] = $506;
   HEAPF32[$389>>2] = $506;
   $507 = (((48620 + (($$0442451*40)|0)|0)) + 16|0);
   $508 = +HEAPF32[$507>>2];
   $509 = (((48620 + (($$0442451*40)|0)|0)) + 24|0);
   $510 = (((48620 + (($$0442451*40)|0)|0)) + 28|0);
   $511 = +HEAPF32[$510>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$509>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$509+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$509+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$509+3>>0]|0;
   _Fade($74,$$byval_copy126,$511);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$71>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$71+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$71+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$71+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$72>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$72+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$72+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$72+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$73>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$73+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$74>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$74+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$508,$$byval_copy126);
  }
  $512 = (($$0442451) + 1)|0;
  $exitcond457 = ($512|0)==(1024);
  if ($exitcond457) {
   break;
  } else {
   $$0442451 = $512;
  }
 }
 $486 = ((($75)) + 4|0);
 $487 = ((($75)) + 8|0);
 $488 = ((($75)) + 12|0);
 $489 = ((($76)) + 4|0);
 $490 = ((($76)) + 8|0);
 $491 = ((($76)) + 12|0);
 $492 = ((($77)) + 4|0);
 $$0443450 = 0;
 while(1) {
  $520 = (((89600 + (($$0443450*40)|0)|0)) + 36|0);
  $521 = HEAP32[$520>>2]|0;
  $522 = ($521|0)==(0);
  if (!($522)) {
   HEAP32[$75>>2] = 419;
   HEAP32[$486>>2] = 1839;
   HEAP32[$487>>2] = 32;
   HEAP32[$488>>2] = 32;
   $523 = (89600 + (($$0443450*40)|0)|0);
   $524 = +HEAPF32[$523>>2];
   $525 = (~~(($524)));
   HEAP32[$76>>2] = $525;
   $526 = (((89600 + (($$0443450*40)|0)|0)) + 4|0);
   $527 = +HEAPF32[$526>>2];
   $528 = (~~(($527)));
   HEAP32[$489>>2] = $528;
   $529 = (((89600 + (($$0443450*40)|0)|0)) + 20|0);
   $530 = +HEAPF32[$529>>2];
   $531 = $530 * 32.0;
   $532 = (~~(($531)));
   HEAP32[$490>>2] = $532;
   HEAP32[$491>>2] = $532;
   $533 = $531 * 0.5;
   HEAPF32[$77>>2] = $533;
   HEAPF32[$492>>2] = $533;
   $534 = (((89600 + (($$0443450*40)|0)|0)) + 16|0);
   $535 = +HEAPF32[$534>>2];
   $536 = (((89600 + (($$0443450*40)|0)|0)) + 24|0);
   $537 = (((89600 + (($$0443450*40)|0)|0)) + 28|0);
   $538 = +HEAPF32[$537>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$536>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$536+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$536+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$536+3>>0]|0;
   _Fade($78,$$byval_copy126,$538);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$75>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$75+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$75+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$75+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$76>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$76+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$76+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$76+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$77>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$77+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$78>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$78+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$78+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$78+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$535,$$byval_copy126);
  }
  $539 = (($$0443450) + 1)|0;
  $exitcond456 = ($539|0)==(256);
  if ($exitcond456) {
   break;
  } else {
   $$0443450 = $539;
  }
 }
 $513 = ((($79)) + 4|0);
 $514 = ((($79)) + 8|0);
 $515 = ((($79)) + 12|0);
 $516 = ((($80)) + 4|0);
 $517 = ((($80)) + 8|0);
 $518 = ((($80)) + 12|0);
 $519 = ((($81)) + 4|0);
 $$0444449 = 0;
 while(1) {
  $540 = (((47880 + (($$0444449*36)|0)|0)) + 24|0);
  $541 = HEAP32[$540>>2]|0;
  $542 = ($541|0)==(0);
  if (!($542)) {
   HEAP32[$79>>2] = 2;
   HEAP32[$513>>2] = 1028;
   HEAP32[$514>>2] = 54;
   HEAP32[$515>>2] = 710;
   $543 = (47880 + (($$0444449*36)|0)|0);
   $544 = +HEAPF32[$543>>2];
   $545 = (~~(($544)));
   HEAP32[$80>>2] = $545;
   $546 = (((47880 + (($$0444449*36)|0)|0)) + 4|0);
   $547 = +HEAPF32[$546>>2];
   $548 = (~~(($547)));
   HEAP32[$516>>2] = $548;
   $549 = (((47880 + (($$0444449*36)|0)|0)) + 16|0);
   $550 = +HEAPF32[$549>>2];
   $551 = $550 * 54.0;
   $552 = (~~(($551)));
   HEAP32[$517>>2] = $552;
   $553 = $550 * 710.0;
   $554 = (~~(($553)));
   HEAP32[$518>>2] = $554;
   $555 = $551 * 0.5;
   HEAPF32[$81>>2] = $555;
   $556 = $553 * 0.5;
   HEAPF32[$519>>2] = $556;
   $557 = (((47880 + (($$0444449*36)|0)|0)) + 20|0);
   $558 = +HEAPF32[$557>>2];
   $559 = (((47880 + (($$0444449*36)|0)|0)) + 8|0);
   $560 = (((47880 + (($$0444449*36)|0)|0)) + 12|0);
   $561 = +HEAPF32[$560>>2];
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$559>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$559+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$559+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$559+3>>0]|0;
   _Fade($82,$$byval_copy126,$561);
   ;HEAP32[$atlas01$byval_copy122>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy122+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy122+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy122+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy122+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy123>>2]=HEAP32[$79>>2]|0;HEAP32[$$byval_copy123+4>>2]=HEAP32[$79+4>>2]|0;HEAP32[$$byval_copy123+8>>2]=HEAP32[$79+8>>2]|0;HEAP32[$$byval_copy123+12>>2]=HEAP32[$79+12>>2]|0;
   ;HEAP32[$$byval_copy124>>2]=HEAP32[$80>>2]|0;HEAP32[$$byval_copy124+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$$byval_copy124+8>>2]=HEAP32[$80+8>>2]|0;HEAP32[$$byval_copy124+12>>2]=HEAP32[$80+12>>2]|0;
   ;HEAP32[$$byval_copy125>>2]=HEAP32[$81>>2]|0;HEAP32[$$byval_copy125+4>>2]=HEAP32[$81+4>>2]|0;
   ;HEAP8[$$byval_copy126>>0]=HEAP8[$82>>0]|0;HEAP8[$$byval_copy126+1>>0]=HEAP8[$82+1>>0]|0;HEAP8[$$byval_copy126+2>>0]=HEAP8[$82+2>>0]|0;HEAP8[$$byval_copy126+3>>0]=HEAP8[$82+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy122,$$byval_copy123,$$byval_copy124,$$byval_copy125,$558,$$byval_copy126);
  }
  $562 = (($$0444449) + 1)|0;
  $exitcond = ($562|0)==(20);
  if ($exitcond) {
   break;
  } else {
   $$0444449 = $562;
  }
 }
 STACKTOP = sp;return;
}
function _DrawParallaxBack() {
 var $$byval_copy43 = 0, $$byval_copy44 = 0, $$byval_copy45 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $atlas02$byval_copy42 = 0, $color01$byval_copy46 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $color01$byval_copy46 = sp + 464|0;
 $$byval_copy45 = sp + 456|0;
 $$byval_copy44 = sp + 440|0;
 $$byval_copy43 = sp + 424|0;
 $atlas02$byval_copy42 = sp + 400|0;
 $0 = sp + 384|0;
 $1 = sp + 368|0;
 $2 = sp + 360|0;
 $3 = sp + 344|0;
 $4 = sp + 328|0;
 $5 = sp + 320|0;
 $6 = sp + 304|0;
 $7 = sp + 288|0;
 $8 = sp + 280|0;
 $9 = sp + 264|0;
 $10 = sp + 248|0;
 $11 = sp + 240|0;
 $12 = sp + 224|0;
 $13 = sp + 208|0;
 $14 = sp + 200|0;
 $15 = sp + 184|0;
 $16 = sp + 168|0;
 $17 = sp + 160|0;
 $18 = sp + 144|0;
 $19 = sp + 128|0;
 $20 = sp + 120|0;
 $21 = sp + 104|0;
 $22 = sp + 88|0;
 $23 = sp + 80|0;
 $24 = sp + 64|0;
 $25 = sp + 48|0;
 $26 = sp + 40|0;
 $27 = sp + 24|0;
 $28 = sp + 8|0;
 $29 = sp;
 HEAP32[$0>>2] = 660;
 $30 = ((($0)) + 4|0);
 HEAP32[$30>>2] = 315;
 $31 = ((($0)) + 8|0);
 HEAP32[$31>>2] = 28;
 $32 = ((($0)) + 12|0);
 HEAP32[$32>>2] = 335;
 $33 = HEAP32[6822]|0;
 HEAP32[$1>>2] = $33;
 $34 = ((($1)) + 4|0);
 HEAP32[$34>>2] = 67;
 $35 = ((($1)) + 8|0);
 HEAP32[$35>>2] = 56;
 $36 = ((($1)) + 12|0);
 HEAP32[$36>>2] = 670;
 HEAPF32[$2>>2] = 0.0;
 $37 = ((($2)) + 4|0);
 HEAPF32[$37>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$0+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$2+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$3>>2] = 746;
 $38 = ((($3)) + 4|0);
 HEAP32[$38>>2] = 315;
 $39 = ((($3)) + 8|0);
 HEAP32[$39>>2] = 26;
 $40 = ((($3)) + 12|0);
 HEAP32[$40>>2] = 332;
 $41 = HEAP32[6822]|0;
 $42 = (($41) + 140)|0;
 HEAP32[$4>>2] = $42;
 $43 = ((($4)) + 4|0);
 HEAP32[$43>>2] = 67;
 $44 = ((($4)) + 8|0);
 HEAP32[$44>>2] = 52;
 $45 = ((($4)) + 12|0);
 HEAP32[$45>>2] = 664;
 HEAPF32[$5>>2] = 0.0;
 $46 = ((($5)) + 4|0);
 HEAPF32[$46>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$3+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$4+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$5+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$6>>2] = 791;
 $47 = ((($6)) + 4|0);
 HEAP32[$47>>2] = 315;
 $48 = ((($6)) + 8|0);
 HEAP32[$48>>2] = 15;
 $49 = ((($6)) + 12|0);
 HEAP32[$49>>2] = 329;
 $50 = HEAP32[6822]|0;
 $51 = (($50) + 280)|0;
 HEAP32[$7>>2] = $51;
 $52 = ((($7)) + 4|0);
 HEAP32[$52>>2] = 67;
 $53 = ((($7)) + 8|0);
 HEAP32[$53>>2] = 30;
 $54 = ((($7)) + 12|0);
 HEAP32[$54>>2] = 658;
 HEAPF32[$8>>2] = 0.0;
 $55 = ((($8)) + 4|0);
 HEAPF32[$55>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$6+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$7+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$8+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$9>>2] = 1940;
 $56 = ((($9)) + 4|0);
 HEAP32[$56>>2] = 2;
 $57 = ((($9)) + 8|0);
 HEAP32[$57>>2] = 38;
 $58 = ((($9)) + 12|0);
 HEAP32[$58>>2] = 334;
 $59 = HEAP32[6822]|0;
 $60 = (($59) + 420)|0;
 HEAP32[$10>>2] = $60;
 $61 = ((($10)) + 4|0);
 HEAP32[$61>>2] = 67;
 $62 = ((($10)) + 8|0);
 HEAP32[$62>>2] = 76;
 $63 = ((($10)) + 12|0);
 HEAP32[$63>>2] = 668;
 HEAPF32[$11>>2] = 0.0;
 $64 = ((($11)) + 4|0);
 HEAPF32[$64>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$9+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$10+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$11+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$12>>2] = 572;
 $65 = ((($12)) + 4|0);
 HEAP32[$65>>2] = 364;
 $66 = ((($12)) + 8|0);
 HEAP32[$66>>2] = 32;
 $67 = ((($12)) + 12|0);
 HEAP32[$67>>2] = 349;
 $68 = HEAP32[6822]|0;
 $69 = (($68) + 560)|0;
 HEAP32[$13>>2] = $69;
 $70 = ((($13)) + 4|0);
 HEAP32[$70>>2] = 67;
 $71 = ((($13)) + 8|0);
 HEAP32[$71>>2] = 64;
 $72 = ((($13)) + 12|0);
 HEAP32[$72>>2] = 698;
 HEAPF32[$14>>2] = 0.0;
 $73 = ((($14)) + 4|0);
 HEAPF32[$73>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$12+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$13+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$14+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$15>>2] = 1863;
 $74 = ((($15)) + 4|0);
 HEAP32[$74>>2] = 338;
 $75 = ((($15)) + 8|0);
 HEAP32[$75>>2] = 31;
 $76 = ((($15)) + 12|0);
 HEAP32[$76>>2] = 334;
 $77 = HEAP32[6822]|0;
 $78 = (($77) + 700)|0;
 HEAP32[$16>>2] = $78;
 $79 = ((($16)) + 4|0);
 HEAP32[$79>>2] = 67;
 $80 = ((($16)) + 8|0);
 HEAP32[$80>>2] = 62;
 $81 = ((($16)) + 12|0);
 HEAP32[$81>>2] = 668;
 HEAPF32[$17>>2] = 0.0;
 $82 = ((($17)) + 4|0);
 HEAPF32[$82>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$15+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$16+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$17+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$18>>2] = 1833;
 $83 = ((($18)) + 4|0);
 HEAP32[$83>>2] = 2;
 $84 = ((($18)) + 8|0);
 HEAP32[$84>>2] = 25;
 $85 = ((($18)) + 12|0);
 HEAP32[$85>>2] = 349;
 $86 = HEAP32[6822]|0;
 $87 = (($86) + 840)|0;
 HEAP32[$19>>2] = $87;
 $88 = ((($19)) + 4|0);
 HEAP32[$88>>2] = 67;
 $89 = ((($19)) + 8|0);
 HEAP32[$89>>2] = 50;
 $90 = ((($19)) + 12|0);
 HEAP32[$90>>2] = 698;
 HEAPF32[$20>>2] = 0.0;
 $91 = ((($20)) + 4|0);
 HEAPF32[$91>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$18+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$19+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$20+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$21>>2] = 1964;
 $92 = ((($21)) + 4|0);
 HEAP32[$92>>2] = 338;
 $93 = ((($21)) + 8|0);
 HEAP32[$93>>2] = 32;
 $94 = ((($21)) + 12|0);
 HEAP32[$94>>2] = 331;
 $95 = HEAP32[6822]|0;
 $96 = (($95) + 980)|0;
 HEAP32[$22>>2] = $96;
 $97 = ((($22)) + 4|0);
 HEAP32[$97>>2] = 67;
 $98 = ((($22)) + 8|0);
 HEAP32[$98>>2] = 64;
 $99 = ((($22)) + 12|0);
 HEAP32[$99>>2] = 662;
 HEAPF32[$23>>2] = 0.0;
 $100 = ((($23)) + 4|0);
 HEAPF32[$100>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$21+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$22+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$23+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$24>>2] = 1146;
 $101 = ((($24)) + 4|0);
 HEAP32[$101>>2] = 239;
 $102 = ((($24)) + 8|0);
 HEAP32[$102>>2] = 640;
 $103 = ((($24)) + 12|0);
 HEAP32[$103>>2] = 77;
 HEAP32[$25>>2] = 0;
 $104 = ((($25)) + 4|0);
 HEAP32[$104>>2] = 469;
 $105 = ((($25)) + 8|0);
 HEAP32[$105>>2] = 1280;
 $106 = ((($25)) + 12|0);
 HEAP32[$106>>2] = 154;
 HEAPF32[$26>>2] = 0.0;
 $107 = ((($26)) + 4|0);
 HEAPF32[$107>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$24+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$25+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$26+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340292>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340292+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340292+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340292+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$27>>2] = 1146;
 $108 = ((($27)) + 4|0);
 HEAP32[$108>>2] = 316;
 $109 = ((($27)) + 8|0);
 HEAP32[$109>>2] = 640;
 $110 = ((($27)) + 12|0);
 HEAP32[$110>>2] = -77;
 HEAP32[$28>>2] = 0;
 $111 = ((($28)) + 4|0);
 HEAP32[$111>>2] = 67;
 $112 = ((($28)) + 8|0);
 HEAP32[$112>>2] = 1280;
 $113 = ((($28)) + 12|0);
 HEAP32[$113>>2] = 154;
 HEAPF32[$29>>2] = 0.0;
 $114 = ((($29)) + 4|0);
 HEAPF32[$114>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$27>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$27+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$28+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$29>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$29+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340292>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340292+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340292+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340292+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 STACKTOP = sp;return;
}
function _DrawParallaxMiddle() {
 var $$byval_copy43 = 0, $$byval_copy44 = 0, $$byval_copy45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $atlas02$byval_copy42 = 0, $color01$byval_copy46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $color01$byval_copy46 = sp + 464|0;
 $$byval_copy45 = sp + 456|0;
 $$byval_copy44 = sp + 440|0;
 $$byval_copy43 = sp + 424|0;
 $atlas02$byval_copy42 = sp + 400|0;
 $0 = sp + 384|0;
 $1 = sp + 368|0;
 $2 = sp + 360|0;
 $3 = sp + 344|0;
 $4 = sp + 328|0;
 $5 = sp + 320|0;
 $6 = sp + 304|0;
 $7 = sp + 288|0;
 $8 = sp + 280|0;
 $9 = sp + 264|0;
 $10 = sp + 248|0;
 $11 = sp + 240|0;
 $12 = sp + 224|0;
 $13 = sp + 208|0;
 $14 = sp + 200|0;
 $15 = sp + 184|0;
 $16 = sp + 168|0;
 $17 = sp + 160|0;
 $18 = sp + 144|0;
 $19 = sp + 128|0;
 $20 = sp + 120|0;
 $21 = sp + 104|0;
 $22 = sp + 88|0;
 $23 = sp + 80|0;
 $24 = sp + 64|0;
 $25 = sp + 48|0;
 $26 = sp + 40|0;
 $27 = sp + 24|0;
 $28 = sp + 8|0;
 $29 = sp;
 HEAP32[$0>>2] = 1998;
 $30 = ((($0)) + 4|0);
 HEAP32[$30>>2] = 338;
 $31 = ((($0)) + 8|0);
 HEAP32[$31>>2] = 28;
 $32 = ((($0)) + 12|0);
 HEAP32[$32>>2] = 335;
 HEAP32[$1>>2] = 0;
 $33 = ((($1)) + 4|0);
 HEAP32[$33>>2] = 67;
 $34 = ((($1)) + 8|0);
 HEAP32[$34>>2] = 56;
 $35 = ((($1)) + 12|0);
 HEAP32[$35>>2] = 670;
 HEAPF32[$2>>2] = 0.0;
 $36 = ((($2)) + 4|0);
 HEAPF32[$36>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$0+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$2+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$3>>2] = 718;
 $37 = ((($3)) + 4|0);
 HEAP32[$37>>2] = 315;
 $38 = ((($3)) + 8|0);
 HEAP32[$38>>2] = 26;
 $39 = ((($3)) + 12|0);
 HEAP32[$39>>2] = 332;
 HEAP32[$4>>2] = 140;
 $40 = ((($4)) + 4|0);
 HEAP32[$40>>2] = 67;
 $41 = ((($4)) + 8|0);
 HEAP32[$41>>2] = 52;
 $42 = ((($4)) + 12|0);
 HEAP32[$42>>2] = 664;
 HEAPF32[$5>>2] = 0.0;
 $43 = ((($5)) + 4|0);
 HEAPF32[$43>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$3+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$4+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$5+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$6>>2] = 774;
 $44 = ((($6)) + 4|0);
 HEAP32[$44>>2] = 315;
 $45 = ((($6)) + 8|0);
 HEAP32[$45>>2] = 15;
 $46 = ((($6)) + 12|0);
 HEAP32[$46>>2] = 329;
 HEAP32[$7>>2] = 280;
 $47 = ((($7)) + 4|0);
 HEAP32[$47>>2] = 67;
 $48 = ((($7)) + 8|0);
 HEAP32[$48>>2] = 30;
 $49 = ((($7)) + 12|0);
 HEAP32[$49>>2] = 658;
 HEAPF32[$8>>2] = 0.0;
 $50 = ((($8)) + 4|0);
 HEAPF32[$50>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$6+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$7+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$8+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$9>>2] = 1900;
 $51 = ((($9)) + 4|0);
 HEAP32[$51>>2] = 2;
 $52 = ((($9)) + 8|0);
 HEAP32[$52>>2] = 38;
 $53 = ((($9)) + 12|0);
 HEAP32[$53>>2] = 334;
 HEAP32[$10>>2] = 420;
 $54 = ((($10)) + 4|0);
 HEAP32[$54>>2] = 67;
 $55 = ((($10)) + 8|0);
 HEAP32[$55>>2] = 76;
 $56 = ((($10)) + 12|0);
 HEAP32[$56>>2] = 668;
 HEAPF32[$11>>2] = 0.0;
 $57 = ((($11)) + 4|0);
 HEAPF32[$57>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$9+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$10+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$11+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$12>>2] = 538;
 $58 = ((($12)) + 4|0);
 HEAP32[$58>>2] = 364;
 $59 = ((($12)) + 8|0);
 HEAP32[$59>>2] = 32;
 $60 = ((($12)) + 12|0);
 HEAP32[$60>>2] = 349;
 HEAP32[$13>>2] = 560;
 $61 = ((($13)) + 4|0);
 HEAP32[$61>>2] = 67;
 $62 = ((($13)) + 8|0);
 HEAP32[$62>>2] = 64;
 $63 = ((($13)) + 12|0);
 HEAP32[$63>>2] = 698;
 HEAPF32[$14>>2] = 0.0;
 $64 = ((($14)) + 4|0);
 HEAPF32[$64>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$12+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$13+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$14+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$15>>2] = 2013;
 $65 = ((($15)) + 4|0);
 HEAP32[$65>>2] = 2;
 $66 = ((($15)) + 8|0);
 HEAP32[$66>>2] = 31;
 $67 = ((($15)) + 12|0);
 HEAP32[$67>>2] = 334;
 HEAP32[$16>>2] = 700;
 $68 = ((($16)) + 4|0);
 HEAP32[$68>>2] = 67;
 $69 = ((($16)) + 8|0);
 HEAP32[$69>>2] = 62;
 $70 = ((($16)) + 12|0);
 HEAP32[$70>>2] = 668;
 HEAPF32[$17>>2] = 0.0;
 $71 = ((($17)) + 4|0);
 HEAPF32[$71>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$15+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$16+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$17+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$18>>2] = 633;
 $72 = ((($18)) + 4|0);
 HEAP32[$72>>2] = 364;
 $73 = ((($18)) + 8|0);
 HEAP32[$73>>2] = 25;
 $74 = ((($18)) + 12|0);
 HEAP32[$74>>2] = 349;
 HEAP32[$19>>2] = 840;
 $75 = ((($19)) + 4|0);
 HEAP32[$75>>2] = 67;
 $76 = ((($19)) + 8|0);
 HEAP32[$76>>2] = 50;
 $77 = ((($19)) + 12|0);
 HEAP32[$77>>2] = 698;
 HEAPF32[$20>>2] = 0.0;
 $78 = ((($20)) + 4|0);
 HEAPF32[$78>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$18+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$19+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$20+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$21>>2] = 1930;
 $79 = ((($21)) + 4|0);
 HEAP32[$79>>2] = 338;
 $80 = ((($21)) + 8|0);
 HEAP32[$80>>2] = 32;
 $81 = ((($21)) + 12|0);
 HEAP32[$81>>2] = 331;
 HEAP32[$22>>2] = 980;
 $82 = ((($22)) + 4|0);
 HEAP32[$82>>2] = 67;
 $83 = ((($22)) + 8|0);
 HEAP32[$83>>2] = 64;
 $84 = ((($22)) + 12|0);
 HEAP32[$84>>2] = 662;
 HEAPF32[$23>>2] = 0.0;
 $85 = ((($23)) + 4|0);
 HEAPF32[$85>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$21+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$22+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$23+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$24>>2] = 1146;
 $86 = ((($24)) + 4|0);
 HEAP32[$86>>2] = 160;
 $87 = ((($24)) + 8|0);
 HEAP32[$87>>2] = 640;
 $88 = ((($24)) + 12|0);
 HEAP32[$88>>2] = 77;
 HEAP32[$25>>2] = 0;
 $89 = ((($25)) + 4|0);
 HEAP32[$89>>2] = 509;
 $90 = ((($25)) + 8|0);
 HEAP32[$90>>2] = 1280;
 $91 = ((($25)) + 12|0);
 HEAP32[$91>>2] = 154;
 HEAPF32[$26>>2] = 0.0;
 $92 = ((($26)) + 4|0);
 HEAPF32[$92>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$24+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$25+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$26+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340292>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340292+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340292+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340292+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$27>>2] = 1146;
 $93 = ((($27)) + 4|0);
 HEAP32[$93>>2] = 237;
 $94 = ((($27)) + 8|0);
 HEAP32[$94>>2] = 640;
 $95 = ((($27)) + 12|0);
 HEAP32[$95>>2] = -77;
 HEAP32[$28>>2] = 0;
 $96 = ((($28)) + 4|0);
 HEAP32[$96>>2] = 19;
 $97 = ((($28)) + 8|0);
 HEAP32[$97>>2] = 1280;
 $98 = ((($28)) + 12|0);
 HEAP32[$98>>2] = 154;
 HEAPF32[$29>>2] = 0.0;
 $99 = ((($29)) + 4|0);
 HEAPF32[$99>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$27>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$27+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$28+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$29>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$29+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340292>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340292+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340292+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340292+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 STACKTOP = sp;return;
}
function _DrawParallaxFront() {
 var $$byval_copy43 = 0, $$byval_copy44 = 0, $$byval_copy45 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $atlas02$byval_copy42 = 0, $color01$byval_copy46 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $color01$byval_copy46 = sp + 464|0;
 $$byval_copy45 = sp + 456|0;
 $$byval_copy44 = sp + 440|0;
 $$byval_copy43 = sp + 424|0;
 $atlas02$byval_copy42 = sp + 400|0;
 $0 = sp + 384|0;
 $1 = sp + 368|0;
 $2 = sp + 360|0;
 $3 = sp + 344|0;
 $4 = sp + 328|0;
 $5 = sp + 320|0;
 $6 = sp + 304|0;
 $7 = sp + 288|0;
 $8 = sp + 280|0;
 $9 = sp + 264|0;
 $10 = sp + 248|0;
 $11 = sp + 240|0;
 $12 = sp + 224|0;
 $13 = sp + 208|0;
 $14 = sp + 200|0;
 $15 = sp + 184|0;
 $16 = sp + 168|0;
 $17 = sp + 160|0;
 $18 = sp + 144|0;
 $19 = sp + 128|0;
 $20 = sp + 120|0;
 $21 = sp + 104|0;
 $22 = sp + 88|0;
 $23 = sp + 80|0;
 $24 = sp + 64|0;
 $25 = sp + 48|0;
 $26 = sp + 40|0;
 $27 = sp + 24|0;
 $28 = sp + 8|0;
 $29 = sp;
 HEAP32[$0>>2] = 1833;
 $30 = ((($0)) + 4|0);
 HEAP32[$30>>2] = 353;
 $31 = ((($0)) + 8|0);
 HEAP32[$31>>2] = 28;
 $32 = ((($0)) + 12|0);
 HEAP32[$32>>2] = 335;
 $33 = HEAP32[6823]|0;
 HEAP32[$1>>2] = $33;
 $34 = ((($1)) + 4|0);
 HEAP32[$34>>2] = 60;
 $35 = ((($1)) + 8|0);
 HEAP32[$35>>2] = 56;
 $36 = ((($1)) + 12|0);
 HEAP32[$36>>2] = 670;
 HEAPF32[$2>>2] = 0.0;
 $37 = ((($2)) + 4|0);
 HEAPF32[$37>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$0+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$2+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$3>>2] = 690;
 $38 = ((($3)) + 4|0);
 HEAP32[$38>>2] = 315;
 $39 = ((($3)) + 8|0);
 HEAP32[$39>>2] = 26;
 $40 = ((($3)) + 12|0);
 HEAP32[$40>>2] = 332;
 $41 = HEAP32[6823]|0;
 $42 = (($41) + 140)|0;
 HEAP32[$4>>2] = $42;
 $43 = ((($4)) + 4|0);
 HEAP32[$43>>2] = 60;
 $44 = ((($4)) + 8|0);
 HEAP32[$44>>2] = 52;
 $45 = ((($4)) + 12|0);
 HEAP32[$45>>2] = 664;
 HEAPF32[$5>>2] = 0.0;
 $46 = ((($5)) + 4|0);
 HEAPF32[$46>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$3+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$4+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$5+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$6>>2] = 2028;
 $47 = ((($6)) + 4|0);
 HEAP32[$47>>2] = 338;
 $48 = ((($6)) + 8|0);
 HEAP32[$48>>2] = 15;
 $49 = ((($6)) + 12|0);
 HEAP32[$49>>2] = 329;
 $50 = HEAP32[6823]|0;
 $51 = (($50) + 280)|0;
 HEAP32[$7>>2] = $51;
 $52 = ((($7)) + 4|0);
 HEAP32[$52>>2] = 55;
 $53 = ((($7)) + 8|0);
 HEAP32[$53>>2] = 52;
 $54 = ((($7)) + 12|0);
 HEAP32[$54>>2] = 664;
 HEAPF32[$8>>2] = 0.0;
 $55 = ((($8)) + 4|0);
 HEAPF32[$55>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$6+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$7+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$8+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$9>>2] = 1860;
 $56 = ((($9)) + 4|0);
 HEAP32[$56>>2] = 2;
 $57 = ((($9)) + 8|0);
 HEAP32[$57>>2] = 38;
 $58 = ((($9)) + 12|0);
 HEAP32[$58>>2] = 334;
 $59 = HEAP32[6823]|0;
 $60 = (($59) + 420)|0;
 HEAP32[$10>>2] = $60;
 $61 = ((($10)) + 4|0);
 HEAP32[$61>>2] = 60;
 $62 = ((($10)) + 8|0);
 HEAP32[$62>>2] = 76;
 $63 = ((($10)) + 12|0);
 HEAP32[$63>>2] = 668;
 HEAPF32[$11>>2] = 0.0;
 $64 = ((($11)) + 4|0);
 HEAPF32[$64>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$9+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$10+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$11+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$12>>2] = 504;
 $65 = ((($12)) + 4|0);
 HEAP32[$65>>2] = 364;
 $66 = ((($12)) + 8|0);
 HEAP32[$66>>2] = 32;
 $67 = ((($12)) + 12|0);
 HEAP32[$67>>2] = 349;
 $68 = HEAP32[6823]|0;
 $69 = (($68) + 560)|0;
 HEAP32[$13>>2] = $69;
 $70 = ((($13)) + 4|0);
 HEAP32[$70>>2] = 60;
 $71 = ((($13)) + 8|0);
 HEAP32[$71>>2] = 64;
 $72 = ((($13)) + 12|0);
 HEAP32[$72>>2] = 698;
 HEAPF32[$14>>2] = 0.0;
 $73 = ((($14)) + 4|0);
 HEAPF32[$73>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$12+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$13+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$14+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$15>>2] = 1980;
 $74 = ((($15)) + 4|0);
 HEAP32[$74>>2] = 2;
 $75 = ((($15)) + 8|0);
 HEAP32[$75>>2] = 31;
 $76 = ((($15)) + 12|0);
 HEAP32[$76>>2] = 334;
 $77 = HEAP32[6823]|0;
 $78 = (($77) + 700)|0;
 HEAP32[$16>>2] = $78;
 $79 = ((($16)) + 4|0);
 HEAP32[$79>>2] = 55;
 $80 = ((($16)) + 8|0);
 HEAP32[$80>>2] = 62;
 $81 = ((($16)) + 12|0);
 HEAP32[$81>>2] = 668;
 HEAPF32[$17>>2] = 0.0;
 $82 = ((($17)) + 4|0);
 HEAPF32[$82>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$15+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$16+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$17+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$18>>2] = 606;
 $83 = ((($18)) + 4|0);
 HEAP32[$83>>2] = 364;
 $84 = ((($18)) + 8|0);
 HEAP32[$84>>2] = 25;
 $85 = ((($18)) + 12|0);
 HEAP32[$85>>2] = 349;
 $86 = HEAP32[6823]|0;
 $87 = (($86) + 840)|0;
 HEAP32[$19>>2] = $87;
 $88 = ((($19)) + 4|0);
 HEAP32[$88>>2] = 60;
 $89 = ((($19)) + 8|0);
 HEAP32[$89>>2] = 50;
 $90 = ((($19)) + 12|0);
 HEAP32[$90>>2] = 698;
 HEAPF32[$20>>2] = 0.0;
 $91 = ((($20)) + 4|0);
 HEAPF32[$91>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$18+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$19+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$20+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$21>>2] = 1896;
 $92 = ((($21)) + 4|0);
 HEAP32[$92>>2] = 338;
 $93 = ((($21)) + 8|0);
 HEAP32[$93>>2] = 32;
 $94 = ((($21)) + 12|0);
 HEAP32[$94>>2] = 331;
 $95 = HEAP32[6823]|0;
 $96 = (($95) + 980)|0;
 HEAP32[$22>>2] = $96;
 $97 = ((($22)) + 4|0);
 HEAP32[$97>>2] = 60;
 $98 = ((($22)) + 8|0);
 HEAP32[$98>>2] = 64;
 $99 = ((($22)) + 12|0);
 HEAP32[$99>>2] = 662;
 HEAPF32[$23>>2] = 0.0;
 $100 = ((($23)) + 4|0);
 HEAPF32[$100>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$21+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$22+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$23+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340296>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340296+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340296+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340296+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$24>>2] = 1146;
 $101 = ((($24)) + 4|0);
 HEAP32[$101>>2] = 81;
 $102 = ((($24)) + 8|0);
 HEAP32[$102>>2] = 640;
 $103 = ((($24)) + 12|0);
 HEAP32[$103>>2] = 77;
 HEAP32[$25>>2] = 0;
 $104 = ((($25)) + 4|0);
 HEAP32[$104>>2] = 559;
 $105 = ((($25)) + 8|0);
 HEAP32[$105>>2] = 1280;
 $106 = ((($25)) + 12|0);
 HEAP32[$106>>2] = 154;
 HEAPF32[$26>>2] = 0.0;
 $107 = ((($26)) + 4|0);
 HEAPF32[$107>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$24+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$25+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$26+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340292>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340292+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340292+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340292+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 HEAP32[$27>>2] = 1146;
 $108 = ((($27)) + 4|0);
 HEAP32[$108>>2] = 158;
 $109 = ((($27)) + 8|0);
 HEAP32[$109>>2] = 640;
 $110 = ((($27)) + 12|0);
 HEAP32[$110>>2] = -77;
 HEAP32[$28>>2] = 0;
 $111 = ((($28)) + 4|0);
 HEAP32[$111>>2] = -33;
 $112 = ((($28)) + 8|0);
 HEAP32[$112>>2] = 1280;
 $113 = ((($28)) + 12|0);
 HEAP32[$113>>2] = 154;
 HEAPF32[$29>>2] = 0.0;
 $114 = ((($29)) + 4|0);
 HEAPF32[$114>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy42>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy42+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy42+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy42+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy42+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy43>>2]=HEAP32[$27>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$27+12>>2]|0;
 ;HEAP32[$$byval_copy44>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy44+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy44+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy44+12>>2]=HEAP32[$28+12>>2]|0;
 ;HEAP32[$$byval_copy45>>2]=HEAP32[$29>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$29+4>>2]|0;
 ;HEAP8[$color01$byval_copy46>>0]=HEAP8[340292>>0]|0;HEAP8[$color01$byval_copy46+1>>0]=HEAP8[340292+1>>0]|0;HEAP8[$color01$byval_copy46+2>>0]=HEAP8[340292+2>>0]|0;HEAP8[$color01$byval_copy46+3>>0]=HEAP8[340292+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy42,$$byval_copy43,$$byval_copy44,$$byval_copy45,0.0,$color01$byval_copy46);
 STACKTOP = sp;return;
}
function _UnloadTitleScreen() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _FinishTitleScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6816]|0;
 return ($0|0);
}
function _InitGameplayScreen() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_time((162188|0))|0);
 $0 = (_gmtime((162188|0))|0);
 HEAP32[40548] = $0;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[40549] = $2;
 HEAP32[40550] = $2;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1900)|0;
 HEAP32[6800] = $5;
 _Reset();
 return;
}
function _Reset() {
 var $$0612664 = 0, $$0613663 = 0, $$0614662 = 0, $$0615661 = 0, $$0617659 = 0, $$0618658 = 0, $$0622654 = 0, $$0623652 = 0, $$0624653 = 0, $$0665 = 0, $$sink = 0, $$sink625 = 0, $$sink626 = 0, $$sink627 = 0, $$sink628 = 0, $$sink629 = 0, $$sink630 = 0, $$sink631 = 0, $$sink632 = 0, $$sink633 = 0;
 var $$sink634 = 0, $$sink635 = 0, $$sink636 = 0, $$sink637 = 0.0, $$sink639 = 0.0, $$sink640 = 0, $$sroa$0155$0$$sroa_idx = 0, $$sroa$0158$0$$sroa_idx = 0, $$sroa$0187$0$$sroa_idx = 0, $$sroa$0191$0$$sroa_idx = 0, $$sroa$020$0$$sroa_idx = 0, $$sroa$0204$0$$sroa_idx = 0, $$sroa$0208$0$$sroa_idx = 0, $$sroa$0221$0$$sroa_idx = 0, $$sroa$0224$0$$sroa_idx = 0, $$sroa$0228$0$$sroa_idx = 0, $$sroa$023$0$$sroa_idx = 0, $$sroa$0241$0$$sroa_idx = 0, $$sroa$0245$0$$sroa_idx = 0, $$sroa$0248$0$$sroa_idx = 0;
 var $$sroa$0252$0$$sroa_idx = 0, $$sroa$0255$0$$sroa_idx = 0, $$sroa$0259$0$$sroa_idx = 0, $$sroa$0262$0$$sroa_idx = 0, $$sroa$0266$0$$sroa_idx = 0, $$sroa$0269$0$$sroa_idx = 0, $$sroa$0273$0$$sroa_idx = 0, $$sroa$0276$0$$sroa_idx = 0, $$sroa$0280$0$$sroa_idx = 0, $$sroa$0283$0$$sroa_idx = 0, $$sroa$0287$0$$sroa_idx = 0, $$sroa$0290$0$$sroa_idx = 0, $$sroa$0294$0$$sroa_idx = 0, $$sroa$0297$0$$sroa_idx = 0, $$sroa$03$0$$sroa_idx = 0, $$sroa$0301$0$$sroa_idx = 0, $$sroa$0304$0$$sroa_idx = 0, $$sroa$0308$0$$sroa_idx = 0, $$sroa$05$0$$sroa_idx = 0, $$sroa$050$0$$sroa_idx = 0;
 var $$sroa$053$0$$sroa_idx = 0, $$sroa$057$0$$sroa_idx = 0, $$sroa$060$0$$sroa_idx = 0, $$sroa$08$0$$sroa_idx = 0, $$sroa$2156$0$$sroa_idx157 = 0, $$sroa$2159$0$$sroa_idx160 = 0, $$sroa$2192$0$$sroa_idx193 = 0, $$sroa$2209$0$$sroa_idx210 = 0, $$sroa$221$0$$sroa_idx22 = 0, $$sroa$2222$0$$sroa_idx223 = 0, $$sroa$2229$0$$sroa_idx230 = 0, $$sroa$224$0$$sroa_idx25 = 0, $$sroa$2246$0$$sroa_idx247 = 0, $$sroa$2253$0$$sroa_idx254 = 0, $$sroa$2260$0$$sroa_idx261 = 0, $$sroa$2267$0$$sroa_idx268 = 0, $$sroa$2274$0$$sroa_idx275 = 0, $$sroa$2281$0$$sroa_idx282 = 0, $$sroa$2288$0$$sroa_idx289 = 0, $$sroa$2295$0$$sroa_idx296 = 0;
 var $$sroa$2302$0$$sroa_idx303 = 0, $$sroa$2309$0$$sroa_idx310 = 0, $$sroa$251$0$$sroa_idx52 = 0, $$sroa$254$0$$sroa_idx = 0, $$sroa$258$0$$sroa_idx59 = 0, $$sroa$26$0$$sroa_idx7 = 0, $$sroa$261$0$$sroa_idx62 = 0, $$sroa$29$0$$sroa_idx10 = 0, $$sroa$355$0$$sroa_idx = 0, $$sroa$456$0$$sroa_idx = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0;
 var $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0.0, $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0, $277 = 0.0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0.0, $289 = 0, $29 = 0.0, $290 = 0.0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0;
 var $305 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $exitcond = 0, $exitcond666 = 0, $exitcond667 = 0, $exitcond671 = 0;
 var $exitcond672 = 0, $exitcond674 = 0, $exitcond675 = 0, $exitcond676 = 0, $exitcond677 = 0, $exitcond678 = 0, $font$byval_copy = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $font$byval_copy = sp + 8|0;
 $0 = sp;
 HEAP32[40551] = 0;
 HEAP32[40552] = 0;
 HEAP32[40553] = 10;
 HEAP32[40554] = 0;
 HEAP32[40555] = 0;
 HEAPF32[40556] = 5.0;
 HEAP32[40557] = 3;
 HEAP32[6668] = 0;
 HEAP32[6669] = 0;
 HEAP32[40558] = 360;
 HEAP32[40559] = 0;
 HEAPF32[40560] = 1.2000000476837158;
 HEAP32[40561] = 0;
 HEAP32[40562] = 0;
 HEAP32[40563] = 360;
 HEAP32[40564] = 1;
 HEAPF32[40565] = 0.0;
 HEAPF32[40566] = 0.0;
 HEAPF32[40567] = 0.0;
 HEAPF32[40568] = 1.6000000238418579;
 HEAPF32[40569] = 0.0;
 HEAP32[40570] = 0;
 HEAP32[40571] = 0;
 HEAP32[40572] = 0;
 HEAP32[40573] = 0;
 HEAP32[40574] = 0;
 HEAP32[40575] = 0;
 HEAP32[40576] = 6;
 HEAP32[40577] = 0;
 HEAP32[40578] = 0;
 HEAP32[40579] = 0;
 HEAP32[40580] = 4;
 HEAP32[40581] = 0;
 HEAP32[40582] = 400;
 HEAP32[40583] = 0;
 HEAP32[40584] = 1;
 HEAP32[40585] = 2;
 HEAP32[40586] = 3;
 HEAP32[40587] = 0;
 HEAP32[40588] = 20;
 HEAP32[40589] = 0;
 HEAP32[6801] = 0;
 HEAPF32[40590] = 0.0;
 HEAP32[40591] = 0;
 HEAP32[40592] = 0;
 HEAPF32[40593] = 1.0;
 HEAPF32[40594] = 2.5;
 HEAP32[7] = 3;
 HEAP32[40595] = 0;
 HEAP32[40596] = 0;
 HEAP32[40597] = 0;
 HEAP32[6800] = 0;
 HEAPF32[40598] = 1.0;
 HEAPF32[40599] = 0.0;
 HEAP32[6799] = 0;
 HEAP32[40600] = 0;
 HEAPF32[40601] = 0.0;
 HEAP32[40602] = 0;
 $1 = (_GetRandomValue(10,100)|0);
 HEAP32[40603] = $1;
 $2 = (_GetRandomValue(100,200)|0);
 HEAP32[40604] = $2;
 HEAP32[40605] = 0;
 HEAP32[40606] = 0;
 HEAPF32[40607] = 0.0;
 HEAP32[40608] = 0;
 HEAP32[40609] = 0;
 HEAP32[40610] = 0;
 HEAP32[40611] = 0;
 HEAP32[40612] = 0;
 HEAP32[40613] = 2;
 HEAP32[40614] = 1;
 HEAPF32[40615] = 0.0;
 HEAPF32[40616] = 1.0;
 HEAPF32[40617] = 1.0;
 $3 = HEAP32[40548]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1900)|0;
 HEAP32[6804] = $6;
 $7 = HEAP32[6803]|0;
 switch ($7|0) {
 case 0:  {
  $$sink625 = 51;$$sink626 = 103;$$sink627 = -58;$$sink628 = 73;$$sink629 = -126;$$sink630 = -95;$$sink631 = 125;$$sink632 = -91;$$sink633 = -111;$$sink634 = 86;$$sink635 = -84;$$sink636 = -127;$$sink637 = 315.0;$$sink639 = 225.0;$$sink640 = 11;
  label = 5;
  break;
 }
 case 1:  {
  $$sink625 = 58;$$sink626 = -123;$$sink627 = -42;$$sink628 = 101;$$sink629 = -126;$$sink630 = -112;$$sink631 = 114;$$sink632 = -121;$$sink633 = -66;$$sink634 = 62;$$sink635 = 113;$$sink636 = -14;$$sink637 = 405.0;$$sink639 = 315.0;$$sink640 = 2;
  label = 5;
  break;
 }
 case 2:  {
  $$sink625 = -83;$$sink626 = -116;$$sink627 = 57;$$sink628 = -112;$$sink629 = -114;$$sink630 = 104;$$sink631 = -90;$$sink632 = -111;$$sink633 = -111;$$sink634 = -75;$$sink635 = -126;$$sink636 = -126;$$sink637 = 135.0;$$sink639 = 45.0;$$sink640 = 5;
  label = 5;
  break;
 }
 case 3:  {
  $$sink625 = 42;$$sink626 = -100;$$sink627 = -123;$$sink628 = 90;$$sink629 = -113;$$sink630 = -123;$$sink631 = 67;$$sink632 = -93;$$sink633 = -78;$$sink634 = 49;$$sink635 = -80;$$sink636 = -60;$$sink637 = 225.0;$$sink639 = 135.0;$$sink640 = 8;
  label = 5;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 5) {
  HEAP32[40550] = $$sink640;
  HEAPF32[40590] = $$sink639;
  HEAPF32[40618] = $$sink639;
  HEAPF32[40619] = $$sink637;
  HEAP8[162480] = $$sink636;
  HEAP8[(162481)>>0] = $$sink635;
  HEAP8[(162482)>>0] = $$sink634;
  HEAP8[(162483)>>0] = -1;
  HEAP8[162484] = $$sink633;
  HEAP8[(162485)>>0] = $$sink632;
  HEAP8[(162486)>>0] = $$sink631;
  HEAP8[(162487)>>0] = -1;
  HEAP8[162488] = $$sink630;
  HEAP8[(162489)>>0] = $$sink629;
  HEAP8[(162490)>>0] = $$sink628;
  HEAP8[(162491)>>0] = -1;
  HEAP8[162492] = $$sink627;
  HEAP8[(162493)>>0] = $$sink626;
  HEAP8[(162494)>>0] = $$sink625;
  HEAP8[(162495)>>0] = -1;
 }
 $8 = HEAP32[40550]|0;
 HEAP32[40549] = $8;
 HEAP32[40624] = 0;
 HEAP32[(162500)>>2] = 200;
 $9 = (_GetScreenWidth()|0);
 $10 = (($9|0) / 2)&-1;
 HEAP32[(162504)>>2] = $10;
 $11 = (_GetScreenHeight()|0);
 HEAP32[(162508)>>2] = $11;
 $12 = (_GetScreenWidth()|0);
 $13 = (($12|0) / 2)&-1;
 HEAP32[40628] = $13;
 HEAP32[(162516)>>2] = 200;
 $14 = (_GetScreenWidth()|0);
 $15 = (($14|0) / 2)&-1;
 HEAP32[(162520)>>2] = $15;
 $16 = (_GetScreenHeight()|0);
 HEAP32[(162524)>>2] = $16;
 HEAP32[40632] = 0;
 HEAP32[(162532)>>2] = 0;
 $17 = (_GetScreenWidth()|0);
 $18 = (($17|0) / 2)&-1;
 HEAP32[(162536)>>2] = $18;
 HEAP32[(162540)>>2] = 200;
 $19 = (_GetRandomValue(0,255)|0);
 $20 = $19&255;
 HEAP8[340304] = $20;
 $21 = (_GetRandomValue(0,255)|0);
 $22 = $21&255;
 HEAP8[(340305)>>0] = $22;
 $23 = (_GetRandomValue(0,255)|0);
 $24 = $23&255;
 HEAP8[(340306)>>0] = $24;
 HEAP8[(340307)>>0] = -1;
 HEAP32[40636] = 516;
 HEAP32[(162548)>>2] = 930;
 HEAP32[(162552)>>2] = 64;
 HEAP32[(162556)>>2] = 128;
 HEAP32[40640] = 1056;
 HEAP32[(162564)>>2] = 2;
 HEAP32[(162568)>>2] = 128;
 HEAP32[(162572)>>2] = 128;
 HEAP32[40644] = 1025;
 HEAP32[(162580)>>2] = 486;
 HEAP32[(162584)>>2] = 50;
 HEAP32[(162588)>>2] = 60;
 HEAP32[40648] = 1570;
 HEAP32[(162596)>>2] = 2;
 HEAP32[(162600)>>2] = 230;
 HEAP32[(162604)>>2] = 80;
 HEAP32[40652] = 1025;
 HEAP32[(162612)>>2] = 254;
 HEAP32[(162616)>>2] = 120;
 HEAP32[(162620)>>2] = 128;
 HEAP32[40656] = 755;
 HEAP32[(162628)>>2] = 1079;
 HEAP32[(162632)>>2] = 80;
 HEAP32[(162636)>>2] = 150;
 HEAP32[40660] = 765;
 HEAP32[(162644)>>2] = 561;
 HEAP32[(162648)>>2] = 80;
 HEAP32[(162652)>>2] = 80;
 HEAP32[40664] = 1025;
 HEAP32[(162660)>>2] = 384;
 HEAP32[(162668)>>2] = 100;
 HEAP32[(162664)>>2] = 100;
 HEAP32[40668] = 114;
 HEAP32[(162676)>>2] = 1946;
 HEAP32[(162684)>>2] = 100;
 HEAP32[(162680)>>2] = 100;
 HEAP32[40672] = 772;
 HEAP32[(162692)>>2] = 1417;
 HEAP32[(162700)>>2] = 100;
 HEAP32[(162696)>>2] = 100;
 HEAPF32[40676] = 0.0;
 HEAPF32[(162708)>>2] = 0.0;
 HEAP32[(162712)>>2] = 0;
 HEAPF32[41961] = 0.0;
 HEAPF32[(167848)>>2] = 0.0;
 HEAP32[(167852)>>2] = 0;
 HEAP32[47086] = 0;
 HEAPF32[47087] = 0.0;
 HEAPF32[(188352)>>2] = 0.0;
 HEAP32[(188356)>>2] = 0;
 HEAP32[(193496)>>2] = 0;
 HEAPF32[49657] = 0.0;
 HEAPF32[(198632)>>2] = 0.0;
 HEAP32[(198636)>>2] = 0;
 HEAPF32[50942] = 0.0;
 HEAPF32[(203772)>>2] = 0.0;
 HEAP32[(203776)>>2] = 0;
 HEAPF32[52227] = 0.0;
 HEAPF32[(208912)>>2] = 0.0;
 HEAP32[(208916)>>2] = 0;
 HEAPF32[57352] = 0.0;
 HEAPF32[(229412)>>2] = 0.0;
 HEAP32[(229416)>>2] = 0;
 HEAPF32[57429] = 0.0;
 HEAPF32[(229720)>>2] = 0.0;
 HEAP32[(229724)>>2] = 0;
 HEAP32[57506] = 0;
 $25 = (_GetScreenWidth()|0);
 $26 = (+($25|0));
 HEAPF32[57507] = $26;
 HEAPF32[(230032)>>2] = 0.0;
 $$0665 = 0;
 while(1) {
  $27 = (((162724 + (($$0665*40)|0)|0)) + 36|0);
  HEAP32[$27>>2] = 0;
  $$sroa$0308$0$$sroa_idx = (162724 + (($$0665*40)|0)|0);
  HEAPF32[$$sroa$0308$0$$sroa_idx>>2] = 0.0;
  $$sroa$2309$0$$sroa_idx310 = (((162724 + (($$0665*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2309$0$$sroa_idx310>>2] = 0.0;
  $28 = (_GetRandomValue(3,9)|0);
  $29 = (+($28|0));
  $30 = $29 / 10.0;
  $31 = (((162724 + (($$0665*40)|0)|0)) + 20|0);
  HEAPF32[$31>>2] = $30;
  $32 = (_GetRandomValue(0,360)|0);
  $33 = (+($32|0));
  $34 = (((162724 + (($$0665*40)|0)|0)) + 16|0);
  HEAPF32[$34>>2] = $33;
  $$sroa$0304$0$$sroa_idx = (((162724 + (($$0665*40)|0)|0)) + 24|0);
  $35 = (((162724 + (($$0665*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0304$0$$sroa_idx>>2] = -1;
  HEAPF32[$35>>2] = 1.0;
  $36 = (((230036 + (($$0665*40)|0)|0)) + 36|0);
  HEAP32[$36>>2] = 0;
  $$sroa$0301$0$$sroa_idx = (230036 + (($$0665*40)|0)|0);
  HEAPF32[$$sroa$0301$0$$sroa_idx>>2] = 0.0;
  $$sroa$2302$0$$sroa_idx303 = (((230036 + (($$0665*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2302$0$$sroa_idx303>>2] = 0.0;
  $37 = (_GetRandomValue(2,8)|0);
  $38 = (+($37|0));
  $39 = $38 / 10.0;
  $40 = (((230036 + (($$0665*40)|0)|0)) + 20|0);
  HEAPF32[$40>>2] = $39;
  $41 = (_GetRandomValue(0,360)|0);
  $42 = (+($41|0));
  $43 = (((230036 + (($$0665*40)|0)|0)) + 16|0);
  HEAPF32[$43>>2] = $42;
  $$sroa$0297$0$$sroa_idx = (((230036 + (($$0665*40)|0)|0)) + 24|0);
  $44 = (((230036 + (($$0665*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0297$0$$sroa_idx>>2] = -1;
  HEAPF32[$44>>2] = 0.69999998807907104;
  $45 = (((188368 + (($$0665*40)|0)|0)) + 36|0);
  HEAP32[$45>>2] = 0;
  $$sroa$0294$0$$sroa_idx = (188368 + (($$0665*40)|0)|0);
  HEAPF32[$$sroa$0294$0$$sroa_idx>>2] = 0.0;
  $$sroa$2295$0$$sroa_idx296 = (((188368 + (($$0665*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2295$0$$sroa_idx296>>2] = 0.0;
  $46 = (_GetRandomValue(3,9)|0);
  $47 = (+($46|0));
  $48 = $47 / 10.0;
  $49 = (((188368 + (($$0665*40)|0)|0)) + 20|0);
  HEAPF32[$49>>2] = $48;
  $50 = (_GetRandomValue(0,360)|0);
  $51 = (+($50|0));
  $52 = (((188368 + (($$0665*40)|0)|0)) + 16|0);
  HEAPF32[$52>>2] = $51;
  $$sroa$0290$0$$sroa_idx = (((188368 + (($$0665*40)|0)|0)) + 24|0);
  $53 = (((188368 + (($$0665*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0290$0$$sroa_idx>>2] = -1;
  HEAPF32[$53>>2] = 1.0;
  $54 = (((235156 + (($$0665*40)|0)|0)) + 36|0);
  HEAP32[$54>>2] = 0;
  $$sroa$0287$0$$sroa_idx = (235156 + (($$0665*40)|0)|0);
  HEAPF32[$$sroa$0287$0$$sroa_idx>>2] = 0.0;
  $$sroa$2288$0$$sroa_idx289 = (((235156 + (($$0665*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2288$0$$sroa_idx289>>2] = 0.0;
  $55 = (_GetRandomValue(2,8)|0);
  $56 = (+($55|0));
  $57 = $56 / 10.0;
  $58 = (((235156 + (($$0665*40)|0)|0)) + 20|0);
  HEAPF32[$58>>2] = $57;
  $59 = (_GetRandomValue(0,360)|0);
  $60 = (+($59|0));
  $61 = (((235156 + (($$0665*40)|0)|0)) + 16|0);
  HEAPF32[$61>>2] = $60;
  $$sroa$0283$0$$sroa_idx = (((235156 + (($$0665*40)|0)|0)) + 24|0);
  $62 = (((235156 + (($$0665*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0283$0$$sroa_idx>>2] = -1;
  HEAPF32[$62>>2] = 0.69999998807907104;
  $63 = (((193508 + (($$0665*40)|0)|0)) + 36|0);
  HEAP32[$63>>2] = 0;
  $$sroa$0280$0$$sroa_idx = (193508 + (($$0665*40)|0)|0);
  HEAPF32[$$sroa$0280$0$$sroa_idx>>2] = 0.0;
  $$sroa$2281$0$$sroa_idx282 = (((193508 + (($$0665*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2281$0$$sroa_idx282>>2] = 0.0;
  $64 = (_GetRandomValue(3,9)|0);
  $65 = (+($64|0));
  $66 = $65 / 10.0;
  $67 = (((193508 + (($$0665*40)|0)|0)) + 20|0);
  HEAPF32[$67>>2] = $66;
  $68 = (((193508 + (($$0665*40)|0)|0)) + 16|0);
  HEAPF32[$68>>2] = 0.0;
  $$sroa$0276$0$$sroa_idx = (((193508 + (($$0665*40)|0)|0)) + 24|0);
  $69 = (((193508 + (($$0665*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0276$0$$sroa_idx>>2] = -1;
  HEAPF32[$69>>2] = 1.0;
  $70 = (_GetRandomValue(0,180)|0);
  $71 = (+($70|0));
  $72 = (((193508 + (($$0665*40)|0)|0)) + 32|0);
  HEAPF32[$72>>2] = $71;
  $73 = (((240276 + (($$0665*40)|0)|0)) + 36|0);
  HEAP32[$73>>2] = 0;
  $$sroa$0273$0$$sroa_idx = (240276 + (($$0665*40)|0)|0);
  HEAPF32[$$sroa$0273$0$$sroa_idx>>2] = 0.0;
  $$sroa$2274$0$$sroa_idx275 = (((240276 + (($$0665*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2274$0$$sroa_idx275>>2] = 0.0;
  $74 = (_GetRandomValue(2,8)|0);
  $75 = (+($74|0));
  $76 = $75 / 10.0;
  $77 = (((240276 + (($$0665*40)|0)|0)) + 20|0);
  HEAPF32[$77>>2] = $76;
  $78 = (((240276 + (($$0665*40)|0)|0)) + 16|0);
  HEAPF32[$78>>2] = 0.0;
  $$sroa$0269$0$$sroa_idx = (((240276 + (($$0665*40)|0)|0)) + 24|0);
  $79 = (((240276 + (($$0665*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0269$0$$sroa_idx>>2] = -1;
  HEAPF32[$79>>2] = 0.69999998807907104;
  $80 = (_GetRandomValue(0,180)|0);
  $81 = (+($80|0));
  $82 = (((240276 + (($$0665*40)|0)|0)) + 32|0);
  HEAPF32[$82>>2] = $81;
  $83 = (((198648 + (($$0665*40)|0)|0)) + 36|0);
  HEAP32[$83>>2] = 0;
  $$sroa$0266$0$$sroa_idx = (198648 + (($$0665*40)|0)|0);
  HEAPF32[$$sroa$0266$0$$sroa_idx>>2] = 0.0;
  $$sroa$2267$0$$sroa_idx268 = (((198648 + (($$0665*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2267$0$$sroa_idx268>>2] = 0.0;
  $84 = (_GetRandomValue(3,9)|0);
  $85 = (+($84|0));
  $86 = $85 / 10.0;
  $87 = (((198648 + (($$0665*40)|0)|0)) + 20|0);
  HEAPF32[$87>>2] = $86;
  $88 = (_GetRandomValue(0,360)|0);
  $89 = (+($88|0));
  $90 = (((198648 + (($$0665*40)|0)|0)) + 16|0);
  HEAPF32[$90>>2] = $89;
  $$sroa$0262$0$$sroa_idx = (((198648 + (($$0665*40)|0)|0)) + 24|0);
  $91 = (((198648 + (($$0665*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0262$0$$sroa_idx>>2] = -1;
  HEAPF32[$91>>2] = 1.0;
  $92 = (((245396 + (($$0665*40)|0)|0)) + 36|0);
  HEAP32[$92>>2] = 0;
  $$sroa$0259$0$$sroa_idx = (245396 + (($$0665*40)|0)|0);
  HEAPF32[$$sroa$0259$0$$sroa_idx>>2] = 0.0;
  $$sroa$2260$0$$sroa_idx261 = (((245396 + (($$0665*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2260$0$$sroa_idx261>>2] = 0.0;
  $93 = (_GetRandomValue(2,8)|0);
  $94 = (+($93|0));
  $95 = $94 / 10.0;
  $96 = (((245396 + (($$0665*40)|0)|0)) + 20|0);
  HEAPF32[$96>>2] = $95;
  $97 = (_GetRandomValue(0,360)|0);
  $98 = (+($97|0));
  $99 = (((245396 + (($$0665*40)|0)|0)) + 16|0);
  HEAPF32[$99>>2] = $98;
  $$sroa$0255$0$$sroa_idx = (((245396 + (($$0665*40)|0)|0)) + 24|0);
  $100 = (((245396 + (($$0665*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0255$0$$sroa_idx>>2] = -1;
  HEAPF32[$100>>2] = 0.69999998807907104;
  $101 = (((203788 + (($$0665*40)|0)|0)) + 36|0);
  HEAP32[$101>>2] = 0;
  $$sroa$0252$0$$sroa_idx = (203788 + (($$0665*40)|0)|0);
  HEAPF32[$$sroa$0252$0$$sroa_idx>>2] = 0.0;
  $$sroa$2253$0$$sroa_idx254 = (((203788 + (($$0665*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2253$0$$sroa_idx254>>2] = 0.0;
  $102 = (_GetRandomValue(3,9)|0);
  $103 = (+($102|0));
  $104 = $103 / 10.0;
  $105 = (((203788 + (($$0665*40)|0)|0)) + 20|0);
  HEAPF32[$105>>2] = $104;
  $106 = (((203788 + (($$0665*40)|0)|0)) + 16|0);
  HEAPF32[$106>>2] = -20.0;
  $$sroa$0248$0$$sroa_idx = (((203788 + (($$0665*40)|0)|0)) + 24|0);
  $107 = (((203788 + (($$0665*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0248$0$$sroa_idx>>2] = -1;
  HEAPF32[$107>>2] = 1.0;
  $108 = (((250516 + (($$0665*40)|0)|0)) + 36|0);
  HEAP32[$108>>2] = 0;
  $$sroa$0245$0$$sroa_idx = (250516 + (($$0665*40)|0)|0);
  HEAPF32[$$sroa$0245$0$$sroa_idx>>2] = 0.0;
  $$sroa$2246$0$$sroa_idx247 = (((250516 + (($$0665*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2246$0$$sroa_idx247>>2] = 0.0;
  $109 = (_GetRandomValue(2,8)|0);
  $110 = (+($109|0));
  $111 = $110 / 10.0;
  $112 = (((250516 + (($$0665*40)|0)|0)) + 20|0);
  HEAPF32[$112>>2] = $111;
  $113 = (((250516 + (($$0665*40)|0)|0)) + 16|0);
  HEAPF32[$113>>2] = -20.0;
  $$sroa$0241$0$$sroa_idx = (((250516 + (($$0665*40)|0)|0)) + 24|0);
  $114 = (((250516 + (($$0665*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0241$0$$sroa_idx>>2] = -1;
  HEAPF32[$114>>2] = 0.69999998807907104;
  $115 = (($$0665) + 1)|0;
  $exitcond678 = ($115|0)==(128);
  if ($exitcond678) {
   $$0612664 = 0;
   break;
  } else {
   $$0665 = $115;
  }
 }
 while(1) {
  $$sroa$0228$0$$sroa_idx = (255636 + (($$0612664*40)|0)|0);
  HEAPF32[$$sroa$0228$0$$sroa_idx>>2] = 0.0;
  $$sroa$2229$0$$sroa_idx230 = (((255636 + (($$0612664*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2229$0$$sroa_idx230>>2] = 0.0;
  $$sroa$0224$0$$sroa_idx = (((255636 + (($$0612664*40)|0)|0)) + 28|0);
  $116 = (((255636 + (($$0612664*40)|0)|0)) + 32|0);
  HEAP32[$$sroa$0224$0$$sroa_idx>>2] = -1;
  HEAPF32[$116>>2] = 1.0;
  $117 = (_GetScreenWidth()|0);
  $118 = (+($117|0));
  $119 = (_GetRandomValue(10,50)|0);
  $120 = (($119|0) / 10)&-1;
  $121 = (+($120|0));
  $$sroa$0221$0$$sroa_idx = (((255636 + (($$0612664*40)|0)|0)) + 20|0);
  HEAPF32[$$sroa$0221$0$$sroa_idx>>2] = $118;
  $$sroa$2222$0$$sroa_idx223 = (((255636 + (($$0612664*40)|0)|0)) + 24|0);
  HEAPF32[$$sroa$2222$0$$sroa_idx223>>2] = $121;
  $122 = (((255636 + (($$0612664*40)|0)|0)) + 16|0);
  HEAPF32[$122>>2] = 0.0;
  $123 = (((255636 + (($$0612664*40)|0)|0)) + 36|0);
  HEAP32[$123>>2] = 0;
  $124 = (($$0612664) + 1)|0;
  $exitcond677 = ($124|0)==(64);
  if ($exitcond677) {
   $$0613663 = 0;
   break;
  } else {
   $$0612664 = $124;
  }
 }
 while(1) {
  $125 = (((208928 + (($$0613663*40)|0)|0)) + 36|0);
  HEAP32[$125>>2] = 0;
  $$sroa$0208$0$$sroa_idx = (208928 + (($$0613663*40)|0)|0);
  HEAPF32[$$sroa$0208$0$$sroa_idx>>2] = 0.0;
  $$sroa$2209$0$$sroa_idx210 = (((208928 + (($$0613663*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2209$0$$sroa_idx210>>2] = 0.0;
  $126 = (_GetRandomValue(3,9)|0);
  $127 = (+($126|0));
  $128 = $127 / 10.0;
  $129 = (((208928 + (($$0613663*40)|0)|0)) + 20|0);
  HEAPF32[$129>>2] = $128;
  $130 = (((208928 + (($$0613663*40)|0)|0)) + 16|0);
  HEAPF32[$130>>2] = -40.0;
  $$sroa$0204$0$$sroa_idx = (((208928 + (($$0613663*40)|0)|0)) + 24|0);
  $131 = (((208928 + (($$0613663*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0204$0$$sroa_idx>>2] = -1;
  HEAPF32[$131>>2] = 1.0;
  $132 = (($$0613663) + 1)|0;
  $exitcond676 = ($132|0)==(512);
  if ($exitcond676) {
   $$0614662 = 0;
   break;
  } else {
   $$0613663 = $132;
  }
 }
 while(1) {
  $133 = (((167864 + (($$0614662*40)|0)|0)) + 36|0);
  HEAP32[$133>>2] = 0;
  $$sroa$0191$0$$sroa_idx = (167864 + (($$0614662*40)|0)|0);
  HEAPF32[$$sroa$0191$0$$sroa_idx>>2] = 0.0;
  $$sroa$2192$0$$sroa_idx193 = (((167864 + (($$0614662*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2192$0$$sroa_idx193>>2] = 0.0;
  $134 = (_GetRandomValue(2,8)|0);
  $135 = (+($134|0));
  $136 = $135 / 10.0;
  $137 = (((167864 + (($$0614662*40)|0)|0)) + 20|0);
  HEAPF32[$137>>2] = $136;
  $138 = (((167864 + (($$0614662*40)|0)|0)) + 16|0);
  HEAPF32[$138>>2] = 40.0;
  $$sroa$0187$0$$sroa_idx = (((167864 + (($$0614662*40)|0)|0)) + 24|0);
  $139 = (((167864 + (($$0614662*40)|0)|0)) + 28|0);
  HEAP32[$$sroa$0187$0$$sroa_idx>>2] = -1;
  HEAPF32[$139>>2] = 1.0;
  $140 = (($$0614662) + 1)|0;
  $exitcond675 = ($140|0)==(512);
  if ($exitcond675) {
   $$0615661 = 0;
   break;
  } else {
   $$0614662 = $140;
  }
 }
 while(1) {
  $$sroa$0158$0$$sroa_idx = (229428 + (($$0615661*36)|0)|0);
  HEAPF32[$$sroa$0158$0$$sroa_idx>>2] = 0.0;
  $$sroa$2159$0$$sroa_idx160 = (((229428 + (($$0615661*36)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2159$0$$sroa_idx160>>2] = 0.0;
  $141 = (((229428 + (($$0615661*36)|0)|0)) + 8|0);
  HEAP8[$141>>0] = -1;
  $142 = (((229428 + (($$0615661*36)|0)|0)) + 9|0);
  HEAP8[$142>>0] = -1;
  $143 = (((229428 + (($$0615661*36)|0)|0)) + 10|0);
  HEAP8[$143>>0] = -74;
  $144 = (((229428 + (($$0615661*36)|0)|0)) + 11|0);
  HEAP8[$144>>0] = -1;
  $145 = (((229428 + (($$0615661*36)|0)|0)) + 12|0);
  HEAPF32[$145>>2] = 0.0;
  $146 = (_GetRandomValue(30,70)|0);
  $147 = (($146|0) / 10)&-1;
  $148 = (+($147|0));
  $149 = (((229428 + (($$0615661*36)|0)|0)) + 16|0);
  HEAPF32[$149>>2] = $148;
  $150 = (((229428 + (($$0615661*36)|0)|0)) + 20|0);
  $$sroa$0155$0$$sroa_idx = (229736 + (($$0615661*36)|0)|0);
  ;HEAP32[$150>>2]=0|0;HEAP32[$150+4>>2]=0|0;HEAP32[$150+8>>2]=0|0;HEAP32[$150+12>>2]=0|0;
  HEAPF32[$$sroa$0155$0$$sroa_idx>>2] = 0.0;
  $$sroa$2156$0$$sroa_idx157 = (((229736 + (($$0615661*36)|0)|0)) + 4|0);
  HEAPF32[$$sroa$2156$0$$sroa_idx157>>2] = 0.0;
  $151 = (((229736 + (($$0615661*36)|0)|0)) + 8|0);
  HEAP8[$151>>0] = -1;
  $152 = (((229736 + (($$0615661*36)|0)|0)) + 9|0);
  HEAP8[$152>>0] = -1;
  $153 = (((229736 + (($$0615661*36)|0)|0)) + 10|0);
  HEAP8[$153>>0] = -74;
  $154 = (((229736 + (($$0615661*36)|0)|0)) + 11|0);
  HEAP8[$154>>0] = -1;
  $155 = (((229736 + (($$0615661*36)|0)|0)) + 12|0);
  HEAPF32[$155>>2] = 0.0;
  $156 = (_GetRandomValue(10,20)|0);
  $157 = (($156|0) / 10)&-1;
  $158 = (+($157|0));
  $159 = (((229736 + (($$0615661*36)|0)|0)) + 16|0);
  HEAPF32[$159>>2] = $158;
  $160 = (((229736 + (($$0615661*36)|0)|0)) + 20|0);
  $161 = (($$0615661) + 1)|0;
  $exitcond674 = ($161|0)==(8);
  ;HEAP32[$160>>2]=0|0;HEAP32[$160+4>>2]=0|0;HEAP32[$160+8>>2]=0|0;HEAP32[$160+12>>2]=0|0;
  if ($exitcond674) {
   break;
  } else {
   $$0615661 = $161;
  }
 }
 _memset((26680|0),0,512)|0;
 $$0617659 = 0;
 while(1) {
  $162 = ($$0617659*200)|0;
  $163 = (($162) + 150)|0;
  $164 = (258196 + ($$0617659<<4)|0);
  HEAP32[$164>>2] = $163;
  $165 = (((258196 + ($$0617659<<4)|0)) + 4|0);
  HEAP32[$165>>2] = 0;
  $166 = (((258196 + ($$0617659<<4)|0)) + 8|0);
  HEAP32[$166>>2] = 50;
  $167 = (_GetScreenHeight()|0);
  $168 = (((258196 + ($$0617659<<4)|0)) + 12|0);
  HEAP32[$168>>2] = $167;
  $169 = (258452 + ($$0617659<<2)|0);
  $not$ = ($$0617659|0)<(6);
  $$sink = $not$&1;
  HEAP32[$169>>2] = $$sink;
  $170 = (($$0617659) + 1)|0;
  $exitcond672 = ($170|0)==(16);
  if ($exitcond672) {
   $$0618658 = 0;
   break;
  } else {
   $$0617659 = $170;
  }
 }
 while(1) {
  $171 = (258516 + ($$0618658<<4)|0);
  HEAP32[$171>>2] = -200;
  $172 = (_GetScreenHeight()|0);
  $173 = (($172) + -30)|0;
  $174 = (((258516 + ($$0618658<<4)|0)) + 4|0);
  HEAP32[$174>>2] = $173;
  $175 = (((258516 + ($$0618658<<4)|0)) + 8|0);
  HEAP32[$175>>2] = 30;
  $176 = (((258516 + ($$0618658<<4)|0)) + 12|0);
  HEAP32[$176>>2] = 720;
  $177 = (258676 + ($$0618658<<2)|0);
  HEAP32[$177>>2] = 0;
  $178 = (258716 + ($$0618658<<2)|0);
  HEAP32[$178>>2] = 0;
  $179 = (258756 + ($$0618658<<2)|0);
  HEAP32[$179>>2] = 0;
  $180 = (($$0618658) + 1)|0;
  $exitcond671 = ($180|0)==(10);
  if ($exitcond671) {
   break;
  } else {
   $$0618658 = $180;
  }
 }
 HEAP32[64699] = -100;
 HEAP32[(258800)>>2] = 0;
 HEAP32[(258804)>>2] = 10;
 $181 = (_GetScreenHeight()|0);
 HEAP32[(258808)>>2] = $181;
 HEAP32[64739] = 0;
 HEAP32[(258812)>>2] = -100;
 HEAP32[(258816)>>2] = 0;
 HEAP32[(258820)>>2] = 10;
 $182 = (_GetScreenHeight()|0);
 HEAP32[(258824)>>2] = $182;
 HEAP32[(258960)>>2] = 0;
 HEAP32[(258828)>>2] = -100;
 HEAP32[(258832)>>2] = 0;
 HEAP32[(258836)>>2] = 10;
 $183 = (_GetScreenHeight()|0);
 HEAP32[(258840)>>2] = $183;
 HEAP32[(258964)>>2] = 0;
 HEAP32[(258844)>>2] = -100;
 HEAP32[(258848)>>2] = 0;
 HEAP32[(258852)>>2] = 10;
 $184 = (_GetScreenHeight()|0);
 HEAP32[(258856)>>2] = $184;
 HEAP32[(258968)>>2] = 0;
 HEAP32[(258860)>>2] = -100;
 HEAP32[(258864)>>2] = 0;
 HEAP32[(258868)>>2] = 10;
 $185 = (_GetScreenHeight()|0);
 HEAP32[(258872)>>2] = $185;
 HEAP32[(258972)>>2] = 0;
 HEAP32[(258876)>>2] = -100;
 HEAP32[(258880)>>2] = 0;
 HEAP32[(258884)>>2] = 10;
 $186 = (_GetScreenHeight()|0);
 HEAP32[(258888)>>2] = $186;
 HEAP32[(258976)>>2] = 0;
 HEAP32[(258892)>>2] = -100;
 HEAP32[(258896)>>2] = 0;
 HEAP32[(258900)>>2] = 10;
 $187 = (_GetScreenHeight()|0);
 HEAP32[(258904)>>2] = $187;
 HEAP32[(258980)>>2] = 0;
 HEAP32[(258908)>>2] = -100;
 HEAP32[(258912)>>2] = 0;
 HEAP32[(258916)>>2] = 10;
 $188 = (_GetScreenHeight()|0);
 HEAP32[(258920)>>2] = $188;
 HEAP32[(258984)>>2] = 0;
 HEAP32[(258924)>>2] = -100;
 HEAP32[(258928)>>2] = 0;
 HEAP32[(258932)>>2] = 10;
 $189 = (_GetScreenHeight()|0);
 HEAP32[(258936)>>2] = $189;
 HEAP32[(258988)>>2] = 0;
 HEAP32[(258940)>>2] = -100;
 HEAP32[(258944)>>2] = 0;
 HEAP32[(258948)>>2] = 10;
 $190 = (_GetScreenHeight()|0);
 HEAP32[(258952)>>2] = $190;
 HEAP32[(258992)>>2] = 0;
 dest=258996; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[64759] = -100;
 HEAP32[(259040)>>2] = 0;
 HEAP32[(259044)>>2] = 32;
 HEAP32[(259048)>>2] = 50;
 HEAP32[(259052)>>2] = -100;
 HEAP32[(259056)>>2] = 0;
 HEAP32[(259060)>>2] = 32;
 HEAP32[(259064)>>2] = 50;
 HEAP32[(259068)>>2] = -100;
 HEAP32[(259072)>>2] = 0;
 HEAP32[(259076)>>2] = 32;
 HEAP32[(259080)>>2] = 50;
 HEAP32[(259084)>>2] = -100;
 HEAP32[(259088)>>2] = 0;
 HEAP32[(259092)>>2] = 32;
 HEAP32[(259096)>>2] = 50;
 HEAP32[(259100)>>2] = -100;
 HEAP32[(259104)>>2] = 0;
 HEAP32[(259108)>>2] = 32;
 HEAP32[(259112)>>2] = 50;
 HEAP32[(259116)>>2] = -100;
 HEAP32[(259120)>>2] = 0;
 HEAP32[(259124)>>2] = 32;
 HEAP32[(259128)>>2] = 50;
 HEAP32[(259132)>>2] = -100;
 HEAP32[(259136)>>2] = 0;
 HEAP32[(259140)>>2] = 32;
 HEAP32[(259144)>>2] = 50;
 HEAP32[(259148)>>2] = -100;
 HEAP32[(259152)>>2] = 0;
 HEAP32[(259156)>>2] = 32;
 HEAP32[(259160)>>2] = 50;
 HEAP32[(259164)>>2] = -100;
 HEAP32[(259168)>>2] = 0;
 HEAP32[(259172)>>2] = 32;
 HEAP32[(259176)>>2] = 50;
 HEAP32[(259180)>>2] = -100;
 HEAP32[(259184)>>2] = 0;
 HEAP32[(259188)>>2] = 32;
 HEAP32[(259192)>>2] = 50;
 dest=259196; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[64809] = -100;
 HEAP32[(259240)>>2] = 0;
 HEAP32[(259244)>>2] = 70;
 HEAP32[(259248)>>2] = 100;
 HEAP32[(259252)>>2] = -100;
 HEAP32[(259256)>>2] = 0;
 HEAP32[(259260)>>2] = 70;
 HEAP32[(259264)>>2] = 100;
 HEAP32[(259268)>>2] = -100;
 HEAP32[(259272)>>2] = 0;
 HEAP32[(259276)>>2] = 70;
 HEAP32[(259280)>>2] = 100;
 HEAP32[(259284)>>2] = -100;
 HEAP32[(259288)>>2] = 0;
 HEAP32[(259292)>>2] = 70;
 HEAP32[(259296)>>2] = 100;
 HEAP32[(259300)>>2] = -100;
 HEAP32[(259304)>>2] = 0;
 HEAP32[(259308)>>2] = 70;
 HEAP32[(259312)>>2] = 100;
 HEAP32[(259316)>>2] = -100;
 HEAP32[(259320)>>2] = 0;
 HEAP32[(259324)>>2] = 70;
 HEAP32[(259328)>>2] = 100;
 HEAP32[(259332)>>2] = -100;
 HEAP32[(259336)>>2] = 0;
 HEAP32[(259340)>>2] = 70;
 HEAP32[(259344)>>2] = 100;
 HEAP32[(259348)>>2] = -100;
 HEAP32[(259352)>>2] = 0;
 HEAP32[(259356)>>2] = 70;
 HEAP32[(259360)>>2] = 100;
 HEAP32[(259364)>>2] = -100;
 HEAP32[(259368)>>2] = 0;
 HEAP32[(259372)>>2] = 70;
 HEAP32[(259376)>>2] = 100;
 HEAP32[(259380)>>2] = -100;
 HEAP32[(259384)>>2] = 0;
 HEAP32[(259388)>>2] = 70;
 HEAP32[(259392)>>2] = 100;
 $$0622654 = 0;
 while(1) {
  $191 = (259396 + ($$0622654<<4)|0);
  HEAP32[$191>>2] = 0;
  $192 = (((259396 + ($$0622654<<4)|0)) + 4|0);
  HEAP32[$192>>2] = 0;
  $193 = (((259396 + ($$0622654<<4)|0)) + 8|0);
  HEAP32[$193>>2] = 50;
  $194 = (((259396 + ($$0622654<<4)|0)) + 12|0);
  HEAP32[$194>>2] = 60;
  $195 = (259652 + ($$0622654<<2)|0);
  HEAP32[$195>>2] = 0;
  $196 = (259716 + ($$0622654<<2)|0);
  HEAP32[$196>>2] = 0;
  $197 = (259780 + ($$0622654<<4)|0);
  HEAP32[$197>>2] = -100;
  $198 = (((259780 + ($$0622654<<4)|0)) + 4|0);
  HEAP32[$198>>2] = 0;
  $199 = (((259780 + ($$0622654<<4)|0)) + 8|0);
  HEAP32[$199>>2] = 64;
  $200 = (((259780 + ($$0622654<<4)|0)) + 12|0);
  HEAP32[$200>>2] = 90;
  $201 = (260036 + ($$0622654<<2)|0);
  HEAP32[$201>>2] = 0;
  $202 = (260100 + ($$0622654<<2)|0);
  HEAP32[$202>>2] = 0;
  $203 = (260164 + ($$0622654<<4)|0);
  HEAP32[$203>>2] = -100;
  $204 = (((260164 + ($$0622654<<4)|0)) + 4|0);
  HEAP32[$204>>2] = 0;
  $205 = (((260164 + ($$0622654<<4)|0)) + 8|0);
  HEAP32[$205>>2] = 40;
  $206 = (((260164 + ($$0622654<<4)|0)) + 12|0);
  HEAP32[$206>>2] = 60;
  $207 = (260420 + ($$0622654<<2)|0);
  HEAP32[$207>>2] = 0;
  $208 = (260484 + ($$0622654<<2)|0);
  HEAP32[$208>>2] = 0;
  $209 = (260548 + ($$0622654<<2)|0);
  HEAP32[$209>>2] = 0;
  $210 = HEAP32[$203>>2]|0;
  $211 = (+($210|0));
  $212 = (260612 + ($$0622654<<3)|0);
  HEAPF32[$212>>2] = $211;
  $213 = HEAP32[$204>>2]|0;
  $214 = (+($213|0));
  $215 = (((260612 + ($$0622654<<3)|0)) + 4|0);
  HEAPF32[$215>>2] = $214;
  $216 = (_GetRandomValue(-20,20)|0);
  $217 = (+($216|0));
  $218 = (_GetRandomValue(-20,20)|0);
  $219 = (+($218|0));
  $$sroa$060$0$$sroa_idx = (260740 + (($$0622654*40)|0)|0);
  HEAPF32[$$sroa$060$0$$sroa_idx>>2] = $217;
  $$sroa$261$0$$sroa_idx62 = (((260740 + (($$0622654*40)|0)|0)) + 4|0);
  HEAPF32[$$sroa$261$0$$sroa_idx62>>2] = $219;
  $220 = (_GetRandomValue(-500,500)|0);
  $221 = (+($220|0));
  $222 = $221 / 100.0;
  $223 = (_GetRandomValue(-500,500)|0);
  $224 = (+($223|0));
  $225 = $224 / 100.0;
  $$sroa$057$0$$sroa_idx = (((260740 + (($$0622654*40)|0)|0)) + 8|0);
  HEAPF32[$$sroa$057$0$$sroa_idx>>2] = $222;
  $$sroa$258$0$$sroa_idx59 = (((260740 + (($$0622654*40)|0)|0)) + 12|0);
  HEAPF32[$$sroa$258$0$$sroa_idx59>>2] = $225;
  $226 = (_GetRandomValue(1,45)|0);
  $227 = (+($226|0));
  $228 = $227 / 30.0;
  $229 = (((260740 + (($$0622654*40)|0)|0)) + 20|0);
  HEAPF32[$229>>2] = $228;
  $230 = (_GetRandomValue(0,360)|0);
  $231 = (+($230|0));
  $232 = (((260740 + (($$0622654*40)|0)|0)) + 16|0);
  HEAPF32[$232>>2] = $231;
  $$sroa$053$0$$sroa_idx = (((260740 + (($$0622654*40)|0)|0)) + 24|0);
  HEAP8[$$sroa$053$0$$sroa_idx>>0] = -26;
  $$sroa$254$0$$sroa_idx = (((260740 + (($$0622654*40)|0)|0)) + 25|0);
  HEAP8[$$sroa$254$0$$sroa_idx>>0] = 41;
  $$sroa$355$0$$sroa_idx = (((260740 + (($$0622654*40)|0)|0)) + 26|0);
  HEAP8[$$sroa$355$0$$sroa_idx>>0] = 55;
  $$sroa$456$0$$sroa_idx = (((260740 + (($$0622654*40)|0)|0)) + 27|0);
  HEAP8[$$sroa$456$0$$sroa_idx>>0] = -1;
  $233 = (((260740 + (($$0622654*40)|0)|0)) + 28|0);
  HEAPF32[$233>>2] = 1.0;
  $234 = (((260740 + (($$0622654*40)|0)|0)) + 36|0);
  HEAP32[$234>>2] = 0;
  $235 = (_GetRandomValue(-20,20)|0);
  $236 = (+($235|0));
  $237 = (_GetRandomValue(-20,20)|0);
  $238 = (+($237|0));
  $$sroa$050$0$$sroa_idx = (261380 + (($$0622654*24)|0)|0);
  HEAPF32[$$sroa$050$0$$sroa_idx>>2] = $236;
  $$sroa$251$0$$sroa_idx52 = (((261380 + (($$0622654*24)|0)|0)) + 4|0);
  HEAPF32[$$sroa$251$0$$sroa_idx52>>2] = $238;
  $239 = (_GetRandomValue(1,45)|0);
  $240 = (+($239|0));
  $241 = $240 / 30.0;
  $242 = (((261380 + (($$0622654*24)|0)|0)) + 16|0);
  HEAPF32[$242>>2] = $241;
  $243 = (((261380 + (($$0622654*24)|0)|0)) + 12|0);
  HEAPF32[$243>>2] = 1.0;
  $244 = (((261380 + (($$0622654*24)|0)|0)) + 8|0);
  HEAP32[$244>>2] = 0;
  $245 = (($$0622654) + 1)|0;
  $exitcond667 = ($245|0)==(16);
  if ($exitcond667) {
   $$0624653 = 0;
   break;
  } else {
   $$0622654 = $245;
  }
 }
 while(1) {
  $267 = (261868 + ($$0624653<<4)|0);
  HEAP32[$267>>2] = 0;
  $268 = (((261868 + ($$0624653<<4)|0)) + 4|0);
  HEAP32[$268>>2] = 0;
  $269 = (((261868 + ($$0624653<<4)|0)) + 8|0);
  HEAP32[$269>>2] = 30;
  $270 = (((261868 + ($$0624653<<4)|0)) + 12|0);
  HEAP32[$270>>2] = 30;
  $271 = (262092 + ($$0624653<<2)|0);
  HEAP32[$271>>2] = 0;
  $272 = (262148 + ($$0624653<<2)|0);
  HEAP32[$272>>2] = -1;
  $$sroa$023$0$$sroa_idx = (262204 + (($$0624653*5140)|0)|0);
  HEAPF32[$$sroa$023$0$$sroa_idx>>2] = 0.0;
  $$sroa$224$0$$sroa_idx25 = (((262204 + (($$0624653*5140)|0)|0)) + 4|0);
  HEAPF32[$$sroa$224$0$$sroa_idx25>>2] = 0.0;
  $273 = (((262204 + (($$0624653*5140)|0)|0)) + 8|0);
  HEAP32[$273>>2] = 0;
  $274 = (_GetRandomValue(-20,20)|0);
  $275 = (+($274|0));
  $276 = (_GetRandomValue(-20,20)|0);
  $277 = (+($276|0));
  $$sroa$020$0$$sroa_idx = (334164 + (($$0624653*24)|0)|0);
  HEAPF32[$$sroa$020$0$$sroa_idx>>2] = $275;
  $$sroa$221$0$$sroa_idx22 = (((334164 + (($$0624653*24)|0)|0)) + 4|0);
  HEAPF32[$$sroa$221$0$$sroa_idx22>>2] = $277;
  $278 = (_GetRandomValue(1,45)|0);
  $279 = (+($278|0));
  $280 = $279 / 30.0;
  $281 = (((334164 + (($$0624653*24)|0)|0)) + 16|0);
  HEAPF32[$281>>2] = $280;
  $282 = (((334164 + (($$0624653*24)|0)|0)) + 12|0);
  HEAPF32[$282>>2] = 1.0;
  $283 = (((334164 + (($$0624653*24)|0)|0)) + 20|0);
  HEAP32[$283>>2] = 0;
  $284 = (((334164 + (($$0624653*24)|0)|0)) + 8|0);
  HEAP32[$284>>2] = 0;
  $$0623652 = 0;
  while(1) {
   $286 = ((((((262204 + (($$0624653*5140)|0)|0)) + 20|0) + (($$0623652*40)|0)|0)) + 36|0);
   HEAP32[$286>>2] = 0;
   $287 = (_GetRandomValue(-20,20)|0);
   $288 = (+($287|0));
   $289 = (_GetRandomValue(-20,20)|0);
   $290 = (+($289|0));
   $$sroa$08$0$$sroa_idx = ((((262204 + (($$0624653*5140)|0)|0)) + 20|0) + (($$0623652*40)|0)|0);
   HEAPF32[$$sroa$08$0$$sroa_idx>>2] = $288;
   $$sroa$29$0$$sroa_idx10 = ((((((262204 + (($$0624653*5140)|0)|0)) + 20|0) + (($$0623652*40)|0)|0)) + 4|0);
   HEAPF32[$$sroa$29$0$$sroa_idx10>>2] = $290;
   $291 = (_GetRandomValue(-500,500)|0);
   $292 = (+($291|0));
   $293 = $292 / 100.0;
   $294 = (_GetRandomValue(-500,500)|0);
   $295 = (+($294|0));
   $296 = $295 / 100.0;
   $$sroa$05$0$$sroa_idx = ((((((262204 + (($$0624653*5140)|0)|0)) + 20|0) + (($$0623652*40)|0)|0)) + 8|0);
   HEAPF32[$$sroa$05$0$$sroa_idx>>2] = $293;
   $$sroa$26$0$$sroa_idx7 = ((((((262204 + (($$0624653*5140)|0)|0)) + 20|0) + (($$0623652*40)|0)|0)) + 12|0);
   HEAPF32[$$sroa$26$0$$sroa_idx7>>2] = $296;
   $297 = (_GetRandomValue(3,10)|0);
   $298 = (+($297|0));
   $299 = $298 / 5.0;
   $300 = ((((((262204 + (($$0624653*5140)|0)|0)) + 20|0) + (($$0623652*40)|0)|0)) + 20|0);
   HEAPF32[$300>>2] = $299;
   $301 = (_GetRandomValue(0,360)|0);
   $302 = (+($301|0));
   $303 = ((((((262204 + (($$0624653*5140)|0)|0)) + 20|0) + (($$0623652*40)|0)|0)) + 16|0);
   HEAPF32[$303>>2] = $302;
   $$sroa$03$0$$sroa_idx = ((((((262204 + (($$0624653*5140)|0)|0)) + 20|0) + (($$0623652*40)|0)|0)) + 24|0);
   $304 = ((((((262204 + (($$0624653*5140)|0)|0)) + 20|0) + (($$0623652*40)|0)|0)) + 28|0);
   HEAP32[$$sroa$03$0$$sroa_idx>>2] = -1;
   HEAPF32[$304>>2] = 1.0;
   $305 = (($$0623652) + 1)|0;
   $exitcond = ($305|0)==(32);
   if ($exitcond) {
    break;
   } else {
    $$0623652 = $305;
   }
  }
  $285 = (($$0624653) + 1)|0;
  $exitcond666 = ($285|0)==(14);
  if ($exitcond666) {
   break;
  } else {
   $$0624653 = $285;
  }
 }
 $246 = (_GetScreenWidth()|0);
 $247 = (+($246|0));
 $248 = $247 * 0.25999999046325684;
 $249 = (~~(($248)));
 HEAP32[65441] = $249;
 HEAP32[(261768)>>2] = 100;
 HEAP32[(261772)>>2] = 35;
 HEAP32[(261776)>>2] = 60;
 HEAP32[65445] = -200;
 HEAP32[(261784)>>2] = 0;
 HEAP32[(261788)>>2] = 50;
 HEAP32[(261792)>>2] = 32;
 HEAP32[65449] = 0;
 $250 = (_GetRandomValue(-20,20)|0);
 $251 = (+($250|0));
 $252 = (_GetRandomValue(-20,20)|0);
 $253 = (+($252|0));
 HEAPF32[65450] = $251;
 HEAPF32[(261804)>>2] = $253;
 $254 = (_GetRandomValue(1,45)|0);
 $255 = (+($254|0));
 $256 = $255 / 30.0;
 HEAPF32[(261816)>>2] = $256;
 HEAPF32[(261812)>>2] = 1.0;
 HEAP32[(261808)>>2] = 0;
 HEAP32[65456] = -128;
 HEAP32[(261828)>>2] = 0;
 HEAP32[(261832)>>2] = 200;
 HEAP32[(261836)>>2] = 80;
 HEAP32[65460] = 0;
 $257 = (_GetRandomValue(-20,20)|0);
 $258 = (+($257|0));
 $259 = (_GetRandomValue(-20,20)|0);
 $260 = (+($259|0));
 HEAPF32[65461] = $258;
 HEAPF32[(261848)>>2] = $260;
 $261 = (_GetRandomValue(1,45)|0);
 $262 = (+($261|0));
 $263 = $262 / 30.0;
 HEAPF32[(261860)>>2] = $263;
 HEAPF32[(261856)>>2] = 1.0;
 HEAP32[(261852)>>2] = 0;
 HEAP8[340308] = -1;
 HEAP8[(340309)>>0] = -32;
 HEAP8[(340310)>>0] = -71;
 HEAP8[(340311)>>0] = -1;
 $264 = HEAP32[(26372)>>2]|0;
 $265 = ($264*5)|0;
 $266 = (+($265|0));
 ;HEAP32[$font$byval_copy>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy+28>>2]=HEAP32[26352+28>>2]|0;
 _MeasureTextEx($0,$font$byval_copy,7403,$266,2);
 STACKTOP = sp;return;
}
function _UpdateGameplayScreen() {
 var $$$ = 0, $$$1098 = 0, $$010501223 = 0, $$010511222 = 0, $$010521221 = 0, $$010531220 = 0, $$010541218 = 0, $$010551213 = 0, $$010561214 = 0, $$010571215 = 0, $$010601212 = 0, $$010611209 = 0, $$010621208 = 0, $$010631206 = 0, $$010641205 = 0, $$010651204 = 0, $$010661203 = 0, $$010671202 = 0, $$010681201 = 0, $$010691200 = 0;
 var $$010701199 = 0, $$010711198 = 0, $$010731196 = 0, $$010741195 = 0, $$010751194 = 0, $$010761193 = 0, $$010771192 = 0, $$010781191 = 0, $$010791190 = 0, $$010801188 = 0, $$010811187 = 0, $$010821186 = 0, $$010831185 = 0, $$01224 = 0, $$1117 = 0, $$1118 = 0, $$1119 = 0, $$1120 = 0, $$1121 = 0, $$1122 = 0;
 var $$1123 = 0, $$1124 = 0, $$1125 = 0, $$byval_copy100 = 0, $$byval_copy101 = 0, $$cmp = 0, $$cmp1086 = 0, $$inv = 0, $$off = 0, $$off1084 = 0, $$off1085 = 0, $$off1092 = 0, $$off1093 = 0, $$pr = 0, $$pr1127 = 0, $$pr1129 = 0, $$pr1131 = 0, $$pr1145 = 0, $$pr1153 = 0, $$sink = 0;
 var $$sink$sink = 0, $$sink1103 = 0, $$sink1114 = 0, $$sink1115 = 0, $$sink1116 = 0, $$sink113 = 0.0, $$sink115 = 0.0, $$sink117 = 0.0, $$sink119 = 0.0, $$sink23 = 0, $$sink24 = 0, $$sink41 = 0.0, $$sink82 = 0, $$sink82$v = 0, $$sink92 = 0.0, $$sink93 = 0.0, $$sroa$0166$0$$sroa_idx = 0, $$sroa$0169$0$$sroa_idx = 0, $$sroa$0172$0$$sroa_idx = 0, $$sroa$0175$0$$sroa_idx = 0;
 var $$sroa$0178$0$$sroa_idx = 0, $$sroa$0181$0$$sroa_idx = 0, $$sroa$0184$0$$sroa_idx = 0, $$sroa$0187$0$$sroa_idx = 0, $$sroa$0190$0$$sroa_idx = 0, $$sroa$0387$0$$sroa_idx = 0, $$sroa$0390$0$$sroa_idx = 0, $$sroa$0421$0$$sroa_idx = 0, $$sroa$0424$0$$sroa_idx = 0, $$sroa$0436$0$$sroa_idx = 0, $$sroa$0446$0$$sroa_idx = 0, $$sroa$0472$0$$sroa_idx = 0, $$sroa$0482$0$$sroa_idx = 0, $$sroa$0485$0$$sroa_idx = 0, $$sroa$0498$0$$sroa_idx = 0, $$sroa$0501$0$$sroa_idx = 0, $$sroa$0514$0$$sroa_idx = 0, $$sroa$0517$0$$sroa_idx = 0, $$sroa$0530$0$$sroa_idx = 0, $$sroa$0540$0$$sroa_idx = 0;
 var $$sroa$0607$0$$sroa_idx = 0, $$sroa$0623$0$$sroa_idx = 0, $$sroa$0665$0$$sroa_idx = 0, $$sroa$0668$0$$sroa_idx = 0, $$sroa$0671$0$$sroa_idx = 0, $$sroa$0674$0$$sroa_idx = 0, $$sroa$0677$0$$sroa_idx = 0, $$sroa$0680$0$$sroa_idx = 0, $$sroa$0683$0$$sroa_idx = 0, $$sroa$0686$0$$sroa_idx = 0, $$sroa$0689$0$$sroa_idx = 0, $$sroa$2167$0$$sroa_idx168 = 0, $$sroa$2170$0$$sroa_idx171 = 0, $$sroa$2173$0$$sroa_idx174 = 0, $$sroa$2176$0$$sroa_idx177 = 0, $$sroa$2179$0$$sroa_idx180 = 0, $$sroa$2182$0$$sroa_idx183 = 0, $$sroa$2185$0$$sroa_idx186 = 0, $$sroa$2188$0$$sroa_idx189 = 0, $$sroa$2191$0$$sroa_idx192 = 0;
 var $$sroa$2388$0$$sroa_idx389 = 0, $$sroa$2391$0$$sroa_idx392 = 0, $$sroa$2422$0$$sroa_idx423 = 0, $$sroa$2425$0$$sroa_idx426 = 0, $$sroa$2437$0$$sroa_idx438 = 0, $$sroa$2447$0$$sroa_idx448 = 0, $$sroa$2473$0$$sroa_idx474 = 0, $$sroa$2483$0$$sroa_idx484 = 0, $$sroa$2486$0$$sroa_idx487 = 0, $$sroa$2499$0$$sroa_idx500 = 0, $$sroa$2502$0$$sroa_idx503 = 0, $$sroa$2515$0$$sroa_idx516 = 0, $$sroa$2518$0$$sroa_idx519 = 0, $$sroa$2531$0$$sroa_idx532 = 0, $$sroa$2541$0$$sroa_idx542 = 0, $$sroa$2608$0$$sroa_idx609 = 0, $$sroa$2611$0$$sroa_idx612 = 0, $$sroa$2624$0$$sroa_idx625 = 0, $$sroa$2627$0$$sroa_idx628 = 0, $$sroa$2666$0$$sroa_idx667 = 0;
 var $$sroa$2669$0$$sroa_idx670 = 0, $$sroa$2672$0$$sroa_idx673 = 0, $$sroa$2675$0$$sroa_idx676 = 0, $$sroa$2678$0$$sroa_idx679 = 0, $$sroa$2681$0$$sroa_idx682 = 0, $$sroa$2684$0$$sroa_idx685 = 0, $$sroa$2687$0$$sroa_idx688 = 0, $$sroa$2690$0$$sroa_idx691 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0.0, $1005 = 0, $1006 = 0.0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0.0, $1022 = 0.0, $1023 = 0, $1024 = 0.0, $1025 = 0.0;
 var $1026 = 0, $1027 = 0.0, $1028 = 0.0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0.0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0.0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0.0, $1043 = 0.0;
 var $1044 = 0.0, $1045 = 0.0, $1046 = 0, $1047 = 0.0, $1048 = 0.0, $1049 = 0.0, $105 = 0, $1050 = 0.0, $1051 = 0, $1052 = 0.0, $1053 = 0, $1054 = 0.0, $1055 = 0.0, $1056 = 0, $1057 = 0.0, $1058 = 0.0, $1059 = 0, $106 = 0, $1060 = 0.0, $1061 = 0.0;
 var $1062 = 0, $1063 = 0.0, $1064 = 0.0, $1065 = 0.0, $1066 = 0.0, $1067 = 0.0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0.0, $1076 = 0.0, $1077 = 0, $1078 = 0.0, $1079 = 0.0, $108 = 0;
 var $1080 = 0, $1081 = 0.0, $1082 = 0.0, $1083 = 0, $1084 = 0.0, $1085 = 0.0, $1086 = 0.0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0.0, $1096 = 0.0, $1097 = 0, $1098 = 0.0;
 var $1099 = 0.0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0.0, $1106 = 0.0, $1107 = 0, $1108 = 0.0, $1109 = 0.0, $111 = 0, $1110 = 0, $1111 = 0.0, $1112 = 0.0, $1113 = 0, $1114 = 0.0, $1115 = 0.0;
 var $1116 = 0.0, $1117 = 0, $1118 = 0, $1119 = 0.0, $112 = 0.0, $1120 = 0.0, $1121 = 0.0, $1122 = 0.0, $1123 = 0.0, $1124 = 0.0, $1125 = 0, $1126 = 0.0, $1127 = 0.0, $1128 = 0.0, $1129 = 0.0, $113 = 0.0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0.0;
 var $1134 = 0.0, $1135 = 0.0, $1136 = 0.0, $1137 = 0.0, $1138 = 0.0, $1139 = 0, $114 = 0.0, $1140 = 0.0, $1141 = 0.0, $1142 = 0.0, $1143 = 0.0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0.0, $1150 = 0, $1151 = 0;
 var $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0.0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0.0;
 var $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0.0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0.0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0;
 var $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0.0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0.0, $1205 = 0;
 var $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0.0, $1223 = 0;
 var $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0.0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0;
 var $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0.0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0;
 var $1260 = 0, $1261 = 0, $1262 = 0.0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0.0;
 var $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0.0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0.0;
 var $1297 = 0, $1298 = 0.0, $1299 = 0, $13 = 0, $130 = 0.0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0.0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0;
 var $1314 = 0.0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0.0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0.0, $133 = 0.0, $1330 = 0, $1331 = 0.0;
 var $1332 = 0, $1333 = 0.0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0.0, $1338 = 0, $1339 = 0, $134 = 0.0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0.0, $1347 = 0.0, $1348 = 0, $1349 = 0.0, $135 = 0.0;
 var $1350 = 0.0, $1351 = 0, $1352 = 0.0, $1353 = 0.0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0.0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0;
 var $1369 = 0.0, $137 = 0.0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0.0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0;
 var $1387 = 0.0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0.0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0.0, $1401 = 0.0, $1402 = 0.0, $1403 = 0.0;
 var $1404 = 0.0, $1405 = 0, $1406 = 0.0, $1407 = 0.0, $1408 = 0.0, $1409 = 0.0, $141 = 0, $1410 = 0.0, $1411 = 0.0, $1412 = 0.0, $1413 = 0.0, $1414 = 0, $1415 = 0.0, $1416 = 0.0, $1417 = 0.0, $1418 = 0.0, $1419 = 0, $142 = 0.0, $1420 = 0.0, $1421 = 0.0;
 var $1422 = 0.0, $1423 = 0, $1424 = 0.0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0.0, $143 = 0.0, $1430 = 0.0, $1431 = 0.0, $1432 = 0.0, $1433 = 0, $1434 = 0.0, $1435 = 0.0, $1436 = 0.0, $1437 = 0.0, $1438 = 0.0, $1439 = 0.0, $144 = 0.0;
 var $1440 = 0.0, $1441 = 0.0, $1442 = 0, $1443 = 0.0, $1444 = 0.0, $1445 = 0.0, $1446 = 0.0, $1447 = 0, $1448 = 0.0, $1449 = 0.0, $145 = 0.0, $1450 = 0.0, $1451 = 0, $1452 = 0.0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0.0, $1458 = 0.0;
 var $1459 = 0.0, $146 = 0.0, $1460 = 0.0, $1461 = 0.0, $1462 = 0, $1463 = 0.0, $1464 = 0.0, $1465 = 0.0, $1466 = 0.0, $1467 = 0.0, $1468 = 0.0, $1469 = 0.0, $147 = 0.0, $1470 = 0.0, $1471 = 0, $1472 = 0.0, $1473 = 0.0, $1474 = 0.0, $1475 = 0.0, $1476 = 0;
 var $1477 = 0.0, $1478 = 0.0, $1479 = 0.0, $148 = 0.0, $1480 = 0, $1481 = 0.0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0.0, $1487 = 0.0, $1488 = 0.0, $1489 = 0.0, $149 = 0, $1490 = 0.0, $1491 = 0, $1492 = 0.0, $1493 = 0.0, $1494 = 0.0;
 var $1495 = 0.0, $1496 = 0.0, $1497 = 0.0, $1498 = 0.0, $1499 = 0.0, $15 = 0, $150 = 0.0, $1500 = 0, $1501 = 0.0, $1502 = 0.0, $1503 = 0.0, $1504 = 0.0, $1505 = 0, $1506 = 0.0, $1507 = 0.0, $1508 = 0.0, $1509 = 0, $151 = 0.0, $1510 = 0.0, $1511 = 0;
 var $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0.0, $1516 = 0.0, $1517 = 0.0, $1518 = 0.0, $1519 = 0.0, $152 = 0, $1520 = 0, $1521 = 0.0, $1522 = 0.0, $1523 = 0.0, $1524 = 0.0, $1525 = 0.0, $1526 = 0.0, $1527 = 0.0, $1528 = 0.0, $1529 = 0, $153 = 0.0;
 var $1530 = 0.0, $1531 = 0.0, $1532 = 0.0, $1533 = 0.0, $1534 = 0, $1535 = 0.0, $1536 = 0.0, $1537 = 0, $1538 = 0.0, $1539 = 0.0, $154 = 0.0, $1540 = 0.0, $1541 = 0.0, $1542 = 0.0, $1543 = 0.0, $1544 = 0.0, $1545 = 0.0, $1546 = 0, $1547 = 0.0, $1548 = 0;
 var $1549 = 0.0, $155 = 0.0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0.0, $1555 = 0.0, $1556 = 0.0, $1557 = 0.0, $1558 = 0, $1559 = 0.0, $156 = 0.0, $1560 = 0.0, $1561 = 0.0, $1562 = 0.0, $1563 = 0.0, $1564 = 0.0, $1565 = 0.0, $1566 = 0.0;
 var $1567 = 0, $1568 = 0.0, $1569 = 0.0, $157 = 0, $1570 = 0.0, $1571 = 0.0, $1572 = 0, $1573 = 0.0, $1574 = 0.0, $1575 = 0, $1576 = 0.0, $1577 = 0.0, $1578 = 0.0, $1579 = 0.0, $158 = 0.0, $1580 = 0.0, $1581 = 0.0, $1582 = 0.0, $1583 = 0, $1584 = 0.0;
 var $1585 = 0, $1586 = 0.0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0.0, $1590 = 0, $1591 = 0.0, $1592 = 0.0, $1593 = 0.0, $1594 = 0.0, $1595 = 0.0, $1596 = 0, $1597 = 0.0, $1598 = 0.0, $1599 = 0.0, $16 = 0, $160 = 0, $1600 = 0.0, $1601 = 0.0;
 var $1602 = 0.0, $1603 = 0.0, $1604 = 0.0, $1605 = 0, $1606 = 0.0, $1607 = 0.0, $1608 = 0.0, $1609 = 0.0, $161 = 0.0, $1610 = 0, $1611 = 0.0, $1612 = 0.0, $1613 = 0.0, $1614 = 0, $1615 = 0.0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0;
 var $1620 = 0.0, $1621 = 0.0, $1622 = 0.0, $1623 = 0.0, $1624 = 0.0, $1625 = 0, $1626 = 0.0, $1627 = 0.0, $1628 = 0.0, $1629 = 0.0, $163 = 0, $1630 = 0.0, $1631 = 0.0, $1632 = 0.0, $1633 = 0.0, $1634 = 0, $1635 = 0.0, $1636 = 0.0, $1637 = 0.0, $1638 = 0.0;
 var $1639 = 0, $164 = 0.0, $1640 = 0.0, $1641 = 0.0, $1642 = 0.0, $1643 = 0, $1644 = 0.0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0.0, $165 = 0, $1650 = 0.0, $1651 = 0.0, $1652 = 0.0, $1653 = 0.0, $1654 = 0, $1655 = 0.0, $1656 = 0.0;
 var $1657 = 0.0, $1658 = 0.0, $1659 = 0.0, $166 = 0.0, $1660 = 0.0, $1661 = 0.0, $1662 = 0.0, $1663 = 0, $1664 = 0.0, $1665 = 0.0, $1666 = 0.0, $1667 = 0.0, $1668 = 0.0, $1669 = 0, $167 = 0.0, $1670 = 0.0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0;
 var $1675 = 0.0, $1676 = 0.0, $1677 = 0.0, $1678 = 0.0, $1679 = 0.0, $168 = 0, $1680 = 0, $1681 = 0.0, $1682 = 0.0, $1683 = 0.0, $1684 = 0.0, $1685 = 0, $1686 = 0.0, $1687 = 0.0, $1688 = 0.0, $1689 = 0.0, $169 = 0, $1690 = 0.0, $1691 = 0, $1692 = 0.0;
 var $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0.0, $1699 = 0.0, $17 = 0, $170 = 0, $1700 = 0.0, $1701 = 0.0, $1702 = 0.0, $1703 = 0, $1704 = 0.0, $1705 = 0.0, $1706 = 0.0, $1707 = 0.0, $1708 = 0.0, $1709 = 0.0, $171 = 0;
 var $1710 = 0.0, $1711 = 0.0, $1712 = 0, $1713 = 0.0, $1714 = 0.0, $1715 = 0.0, $1716 = 0.0, $1717 = 0.0, $1718 = 0, $1719 = 0.0, $172 = 0.0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0.0, $1725 = 0.0, $1726 = 0.0, $1727 = 0.0, $1728 = 0;
 var $1729 = 0.0, $173 = 0, $1730 = 0.0, $1731 = 0.0, $1732 = 0.0, $1733 = 0.0, $1734 = 0.0, $1735 = 0.0, $1736 = 0.0, $1737 = 0.0, $1738 = 0, $1739 = 0, $174 = 0.0, $1740 = 0, $1741 = 0.0, $1742 = 0.0, $1743 = 0.0, $1744 = 0.0, $1745 = 0.0, $1746 = 0;
 var $1747 = 0.0, $1748 = 0.0, $1749 = 0.0, $175 = 0.0, $1750 = 0.0, $1751 = 0.0, $1752 = 0.0, $1753 = 0.0, $1754 = 0.0, $1755 = 0, $1756 = 0.0, $1757 = 0.0, $1758 = 0.0, $1759 = 0.0, $176 = 0.0, $1760 = 0, $1761 = 0.0, $1762 = 0.0, $1763 = 0.0, $1764 = 0;
 var $1765 = 0.0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0.0, $1774 = 0.0, $1775 = 0.0, $1776 = 0.0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0.0, $1780 = 0, $1781 = 0.0, $1782 = 0.0;
 var $1783 = 0, $1784 = 0, $1785 = 0.0, $1786 = 0.0, $1787 = 0, $1788 = 0.0, $1789 = 0, $179 = 0.0, $1790 = 0, $1791 = 0.0, $1792 = 0.0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0.0, $1799 = 0.0, $18 = 0, $180 = 0.0;
 var $1800 = 0.0, $1801 = 0.0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0.0, $1807 = 0.0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0.0, $1811 = 0.0, $1812 = 0, $1813 = 0.0, $1814 = 0, $1815 = 0, $1816 = 0.0, $1817 = 0.0, $1818 = 0;
 var $1819 = 0, $182 = 0.0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0.0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0;
 var $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0;
 var $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0;
 var $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0.0, $1879 = 0.0, $188 = 0, $1880 = 0.0, $1881 = 0, $1882 = 0.0, $1883 = 0.0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0.0, $1890 = 0;
 var $1891 = 0, $1892 = 0, $1893 = 0.0, $1894 = 0.0, $1895 = 0, $1896 = 0.0, $1897 = 0.0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0.0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0;
 var $1909 = 0, $191 = 0.0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0.0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0;
 var $1927 = 0, $1928 = 0.0, $1929 = 0, $193 = 0.0, $1930 = 0, $1931 = 0.0, $1932 = 0, $1933 = 0.0, $1934 = 0, $1935 = 0.0, $1936 = 0, $1937 = 0.0, $1938 = 0.0, $1939 = 0, $194 = 0.0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0.0;
 var $1945 = 0, $1946 = 0.0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0.0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0;
 var $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0.0, $1972 = 0, $1973 = 0, $1974 = 0.0, $1975 = 0, $1976 = 0.0, $1977 = 0, $1978 = 0.0, $1979 = 0, $198 = 0, $1980 = 0.0;
 var $1981 = 0.0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0.0, $1988 = 0, $1989 = 0.0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0.0, $2015 = 0;
 var $2016 = 0, $2017 = 0.0, $2018 = 0, $2019 = 0.0, $202 = 0.0, $2020 = 0, $2021 = 0.0, $2022 = 0, $2023 = 0.0, $2024 = 0.0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0.0, $2030 = 0.0, $2031 = 0, $2032 = 0.0, $2033 = 0;
 var $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0.0, $2049 = 0, $205 = 0.0, $2050 = 0.0, $2051 = 0;
 var $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0.0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0.0, $2066 = 0, $2067 = 0.0, $2068 = 0, $2069 = 0, $207 = 0.0;
 var $2070 = 0, $2071 = 0, $2072 = 0.0, $2073 = 0.0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0.0, $208 = 0, $2080 = 0, $2081 = 0.0, $2082 = 0.0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0;
 var $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0.0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0;
 var $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0.0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0;
 var $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0;
 var $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0.0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0;
 var $2160 = 0, $2161 = 0.0, $2162 = 0.0, $2163 = 0.0, $2164 = 0, $2165 = 0.0, $2166 = 0.0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0.0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0;
 var $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0;
 var $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0.0, $220 = 0.0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0;
 var $2214 = 0.0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0.0, $222 = 0.0, $2220 = 0, $2221 = 0, $2222 = 0.0, $2223 = 0, $2224 = 0, $2225 = 0.0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0;
 var $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0.0;
 var $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0;
 var $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0;
 var $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0.0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0;
 var $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0.0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0;
 var $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0.0, $240 = 0.0;
 var $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0;
 var $26 = 0, $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0;
 var $386 = 0.0, $387 = 0.0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0;
 var $421 = 0.0, $422 = 0.0, $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0.0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0, $464 = 0.0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0.0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0.0, $590 = 0, $591 = 0, $592 = 0.0, $593 = 0.0, $594 = 0.0, $595 = 0.0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0.0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0.0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0.0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0.0, $724 = 0, $725 = 0, $726 = 0.0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0.0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0.0, $799 = 0.0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0.0, $832 = 0, $833 = 0, $834 = 0.0, $835 = 0;
 var $836 = 0.0, $837 = 0.0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0.0, $844 = 0, $845 = 0.0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0.0, $871 = 0;
 var $872 = 0, $873 = 0.0, $874 = 0, $875 = 0.0, $876 = 0.0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0.0, $883 = 0, $884 = 0.0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0.0, $91 = 0, $910 = 0, $911 = 0, $912 = 0.0, $913 = 0, $914 = 0.0, $915 = 0.0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0.0, $922 = 0, $923 = 0.0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0.0;
 var $944 = 0.0, $945 = 0.0, $946 = 0, $947 = 0.0, $948 = 0.0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0.0, $963 = 0.0, $964 = 0.0, $965 = 0, $966 = 0.0, $967 = 0.0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0.0, $986 = 0, $987 = 0, $988 = 0, $989 = 0.0, $99 = 0, $990 = 0, $991 = 0, $992 = 0.0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $exitcond = 0, $exitcond1225 = 0, $exitcond1226 = 0, $exitcond1227 = 0, $exitcond1228 = 0, $exitcond1229 = 0, $exitcond1230 = 0, $exitcond1231 = 0, $exitcond1232 = 0, $exitcond1233 = 0, $exitcond1234 = 0, $exitcond1235 = 0, $exitcond1236 = 0, $exitcond1237 = 0, $exitcond1238 = 0, $exitcond1239 = 0, $exitcond1240 = 0, $exitcond1241 = 0, $exitcond1242 = 0;
 var $exitcond1243 = 0, $exitcond1244 = 0, $exitcond1245 = 0, $exitcond1246 = 0, $exitcond1247 = 0, $exitcond1248 = 0, $exitcond1249 = 0, $exitcond1271 = 0, $exitcond1272 = 0, $exitcond1273 = 0, $exitcond1274 = 0, $exitcond1275 = 0, $exitcond1276 = 0, $narrow = 0, $notlhs = 0, $notlhs1087 = 0, $notrhs = 0, $notrhs1088 = 0, $or$cond = 0, $or$cond101 = 0;
 var $or$cond103 = 0, $or$cond105 = 0, $or$cond1096 = 0, $or$cond1099 = 0, $or$cond11 = 0, $or$cond1100 = 0, $or$cond1105 = 0, $or$cond121 = 0, $or$cond123 = 0, $or$cond125 = 0, $or$cond1278 = 0, $or$cond1280 = 0, $or$cond1282 = 0, $or$cond1284 = 0, $or$cond1286 = 0, $or$cond1288 = 0, $or$cond1290 = 0, $or$cond1292 = 0, $or$cond1294 = 0, $or$cond1296 = 0;
 var $or$cond1298 = 0, $or$cond1300 = 0, $or$cond1302 = 0, $or$cond1304 = 0, $or$cond1306 = 0, $or$cond1308 = 0, $or$cond1310 = 0, $or$cond1312 = 0, $or$cond1314 = 0, $or$cond1316 = 0, $or$cond15 = 0, $or$cond22 = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, $or$cond34 = 0, $or$cond36 = 0, $or$cond38 = 0, $or$cond40 = 0, $or$cond43 = 0;
 var $or$cond53 = 0, $or$cond63 = 0, $or$cond65 = 0, $or$cond67 = 0, $or$cond69 = 0, $or$cond7 = 0, $or$cond71 = 0, $or$cond73 = 0, $or$cond75 = 0, $or$cond77 = 0, $or$cond79 = 0, $or$cond81 = 0, $or$cond87 = 0, $or$cond89 = 0, $or$cond91 = 0, $or$cond95$not = 0, $or$cond97 = 0, $or$cond99$not = 0, $storemerge = 0.0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $$byval_copy101 = sp + 120|0;
 $$byval_copy100 = sp + 104|0;
 $vararg_buffer = sp;
 $0 = sp + 96|0;
 $1 = sp + 92|0;
 $2 = sp + 88|0;
 $3 = sp + 84|0;
 $4 = sp + 80|0;
 $5 = sp + 72|0;
 $6 = sp + 56|0;
 $7 = sp + 48|0;
 $8 = sp + 40|0;
 $9 = sp + 32|0;
 $10 = sp + 24|0;
 $11 = sp + 16|0;
 $12 = sp + 8|0;
 $13 = HEAP32[40573]|0;
 $14 = ($13|0)==(0);
 $15 = HEAP32[40564]|0;
 $16 = ($15|0)!=(0);
 $or$cond = $14 & $16;
 if ($or$cond) {
  $17 = HEAP32[40592]|0;
  $18 = (($17) + 1)|0;
  HEAP32[40592] = $18;
  $$off1093 = (($17) + -20)|0;
  $19 = ($$off1093>>>0)<(89);
  if ($19) {
   $20 = HEAP32[40595]|0;
   $21 = (($20) + 1)|0;
   HEAP32[40595] = $21;
   $22 = +HEAPF32[40593];
   $23 = $22 + -0.032999999821186066;
   HEAPF32[40593] = $23;
   $24 = +HEAPF32[40594];
   $25 = $24 + -0.082500003278255462;
   HEAPF32[40594] = $25;
   $26 = HEAP32[40595]|0;
   $27 = ($26|0)<(31);
   $28 = ($26|0)<(61);
   $$sink = $28 ? 2 : 1;
   $$sink$sink = $27 ? 3 : $$sink;
   HEAP32[7] = $$sink$sink;
  } else {
   $29 = ($18|0)>(109);
   if ($29) {
    HEAP32[40573] = 1;
   }
  }
  $30 = +HEAPF32[40593];
  $31 = !($30 <= 0.0);
  if (!($31)) {
   HEAPF32[40593] = 1.0;
  }
  $32 = +HEAPF32[40594];
  $33 = !($32 <= 0.0);
  if (!($33)) {
   HEAPF32[40594] = 2.5;
  }
  $34 = HEAP32[7]|0;
  HEAP32[$vararg_buffer>>2] = $34;
  $35 = (_FormatText(7405,$vararg_buffer)|0);
  $36 = HEAP32[(26372)>>2]|0;
  $37 = (+($36|0));
  $38 = +HEAPF32[40594];
  $39 = $37 * $38;
  ;HEAP32[$$byval_copy101>>2]=HEAP32[26352>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$$byval_copy101+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$$byval_copy101+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$$byval_copy101+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$$byval_copy101+28>>2]=HEAP32[26352+28>>2]|0;
  _MeasureTextEx($0,$$byval_copy101,$35,$39,2);
  $$pr = HEAP32[40564]|0;
  $41 = $$pr;
 } else {
  $41 = $15;
 }
 $40 = ($41|0)!=(0);
 if ($40) {
  HEAP32[40552] = 0;
  $43 = HEAP32[40573]|0;
  $44 = ($43|0)!=(0);
  $or$cond7 = $40 & $44;
  if ($or$cond7) {
   $45 = +HEAPF32[40560];
   $46 = $45;
   $47 = $46 * 60.0;
   $48 = $47 / 60.0;
   $49 = HEAP32[40581]|0;
   $50 = (+($49|0));
   $51 = $50 + $48;
   $52 = (~~(($51)));
   HEAP32[40581] = $52;
   $53 = HEAP32[83625]|0;
   $54 = (+($53|0));
   $55 = $48 + $54;
   $56 = (~~(($55)));
   HEAP32[83625] = $56;
   $57 = HEAP32[40602]|0;
   $58 = (+($57|0));
   $59 = $48 + $58;
   $60 = (~~(($59)));
   HEAP32[40602] = $60;
   $61 = HEAP32[40591]|0;
   $62 = (($61) + 1)|0;
   HEAP32[40591] = $62;
   $63 = HEAP32[83625]|0;
   $64 = HEAP32[40582]|0;
   $65 = ($63|0)<($64|0);
   $$pr1127 = HEAP32[40549]|0;
   if ($65) {
    $73 = $$pr1127;
   } else {
    switch ($$pr1127|0) {
    case 10:  {
     $$sink113 = 225.0;
     label = 19;
     break;
    }
    case 1:  {
     $$sink113 = 315.0;
     label = 19;
     break;
    }
    case 4:  {
     $$sink113 = 45.0;
     label = 19;
     break;
    }
    case 7:  {
     $$sink113 = 135.0;
     label = 19;
     break;
    }
    default: {
    }
    }
    if ((label|0) == 19) {
     HEAPF32[40618] = $$sink113;
     $66 = $$sink113 + 90.0;
     HEAPF32[40619] = $66;
     $67 = (_GetRandomValue(0,100)|0);
     HEAP32[6805] = $67;
     HEAPF32[40601] = 0.0;
     $68 = HEAP32[6799]|0;
     $69 = (($68) + 1)|0;
     HEAP32[6799] = $69;
    }
    $70 = HEAP32[40549]|0;
    $71 = (($70) + 1)|0;
    HEAP32[40549] = $71;
    HEAP32[83625] = 0;
    $73 = $71;
   }
   $72 = ($73|0)>(11);
   L28: do {
    if ($72) {
     HEAP32[40549] = 0;
     $74 = HEAP32[6800]|0;
     $75 = (($74) + 1)|0;
     HEAP32[6800] = $75;
     label = 25;
    } else {
     $$pr1129 = HEAP32[40549]|0;
     switch ($$pr1129|0) {
     case 0: case 11:  {
      label = 25;
      break L28;
      break;
     }
     default: {
     }
     }
     $76 = ($$pr1129|0)==(1);
     $77 = HEAP32[83625]|0;
     $78 = ($77|0)<(201);
     $or$cond11 = $76 & $78;
     if ($or$cond11) {
      label = 25;
     } else {
      $84 = $$pr1129 | 1;
      $85 = ($84|0)==(3);
      $86 = ($$pr1129|0)==(4);
      $or$cond15 = $86 & $78;
      $or$cond1096 = $85 | $or$cond15;
      if ($or$cond1096) {
       $87 = HEAP32[6805]|0;
       $$off1092 = (($87) + -25)|0;
       $88 = ($$off1092>>>0)<(16);
       $89 = ($87|0)<(25);
       $90 = $89 | $88;
       $$$ = $90 ? (208916) : (188356);
       $narrow = $89 | $88;
       $$$1098 = $narrow&1;
       HEAP32[$$$>>2] = 1;
       HEAP32[40600] = $$$1098;
       HEAP32[83626] = 0;
       $91 = (_GetRandomValue(0,10)|0);
       HEAP32[40597] = $91;
       $92 = HEAP32[40620]|0;
       HEAP32[83627] = $92;
       $93 = HEAP32[40621]|0;
       HEAP32[83628] = $93;
       $94 = HEAP32[40622]|0;
       HEAP32[83629] = $94;
       $95 = HEAP32[40623]|0;
       HEAP32[83630] = $95;
       HEAP8[340312] = -126;
       HEAP8[(340313)>>0] = -126;
       HEAP8[(340314)>>0] = -75;
       HEAP8[(340315)>>0] = -1;
       HEAP8[340316] = -111;
       HEAP8[(340317)>>0] = -111;
       HEAP8[(340318)>>0] = -90;
       HEAP8[(340319)>>0] = -1;
       HEAP8[340320] = 104;
       HEAP8[(340321)>>0] = -114;
       HEAP8[(340322)>>0] = -112;
       HEAP8[(340323)>>0] = -1;
       HEAP8[340324] = 57;
       HEAP8[(340325)>>0] = -116;
       HEAP8[(340326)>>0] = -83;
       HEAP8[(340327)>>0] = -1;
       HEAP32[83631] = 3;
       HEAP32[6802] = 1;
       break;
      }
      $$off = (($$pr1129) + -5)|0;
      $96 = ($$off>>>0)<(2);
      $97 = ($$pr1129|0)==(7);
      $or$cond22 = $97 & $78;
      $or$cond1099 = $96 | $or$cond22;
      if ($or$cond1099) {
       $98 = HEAP32[6805]|0;
       $99 = ($98|0)<(41);
       $$sink24 = $99 ? (167852) : (162712);
       $$sink23 = $99&1;
       HEAP32[$$sink24>>2] = 1;
       HEAP32[47086] = 1;
       HEAP32[40600] = $$sink23;
       HEAP32[83626] = 0;
       $100 = (_GetRandomValue(0,10)|0);
       HEAP32[40597] = $100;
       $101 = HEAP32[40620]|0;
       HEAP32[83627] = $101;
       $102 = HEAP32[40621]|0;
       HEAP32[83628] = $102;
       $103 = HEAP32[40622]|0;
       HEAP32[83629] = $103;
       $104 = HEAP32[40623]|0;
       HEAP32[83630] = $104;
       HEAP8[340312] = -60;
       HEAP8[(340313)>>0] = -80;
       HEAP8[(340314)>>0] = 49;
       HEAP8[(340315)>>0] = -1;
       HEAP8[340316] = -78;
       HEAP8[(340317)>>0] = -93;
       HEAP8[(340318)>>0] = 67;
       HEAP8[(340319)>>0] = -1;
       HEAP8[340320] = -123;
       HEAP8[(340321)>>0] = -113;
       HEAP8[(340322)>>0] = 90;
       HEAP8[(340323)>>0] = -1;
       HEAP8[340324] = -123;
       HEAP8[(340325)>>0] = -100;
       HEAP8[(340326)>>0] = 42;
       HEAP8[(340327)>>0] = -1;
       HEAP32[83631] = 0;
       HEAP32[6802] = 2;
       break;
      }
      $105 = ($84|0)==(9);
      $106 = ($$pr1129|0)==(10);
      $or$cond28 = $106 & $78;
      $or$cond1100 = $105 | $or$cond28;
      if ($or$cond1100) {
       HEAP32[(198636)>>2] = 1;
       HEAP32[83626] = 0;
       $107 = (_GetRandomValue(0,9)|0);
       HEAP32[40597] = $107;
       HEAP32[40600] = 0;
       $108 = HEAP32[40620]|0;
       HEAP32[83627] = $108;
       $109 = HEAP32[40621]|0;
       HEAP32[83628] = $109;
       $110 = HEAP32[40622]|0;
       HEAP32[83629] = $110;
       $111 = HEAP32[40623]|0;
       HEAP32[83630] = $111;
       HEAP8[340312] = -127;
       HEAP8[(340313)>>0] = -84;
       HEAP8[(340314)>>0] = 86;
       HEAP8[(340315)>>0] = -1;
       HEAP8[340316] = -111;
       HEAP8[(340317)>>0] = -91;
       HEAP8[(340318)>>0] = 125;
       HEAP8[(340319)>>0] = -1;
       HEAP8[340320] = -95;
       HEAP8[(340321)>>0] = -126;
       HEAP8[(340322)>>0] = 73;
       HEAP8[(340323)>>0] = -1;
       HEAP8[340324] = -58;
       HEAP8[(340325)>>0] = 103;
       HEAP8[(340326)>>0] = 51;
       HEAP8[(340327)>>0] = -1;
       HEAP32[83631] = 1;
       HEAP32[6802] = 3;
       break;
      }
      HEAP32[(198636)>>2] = 0;
      HEAP32[(162712)>>2] = 0;
      HEAP32[47086] = 0;
      HEAP32[(188356)>>2] = 0;
      HEAP32[(193496)>>2] = 0;
      HEAP32[(203776)>>2] = 0;
      HEAP32[(208916)>>2] = 0;
      HEAP32[(229416)>>2] = 0;
      HEAP32[(229724)>>2] = 0;
      HEAP32[(167852)>>2] = 0;
      HEAP32[40600] = 0;
      $112 = +HEAPF32[40560];
      $113 = $112;
      $114 = $113 * 60.0;
      $115 = $114 / 60.0;
      $116 = HEAP32[83626]|0;
      $117 = (+($116|0));
      $118 = $117 + $115;
      $119 = (~~(($118)));
      HEAP32[83626] = $119;
      $120 = ($119|0)<(201);
      if ($120) {
       ;HEAP8[$$byval_copy100>>0]=HEAP8[334508>>0]|0;HEAP8[$$byval_copy100+1>>0]=HEAP8[334508+1>>0]|0;HEAP8[$$byval_copy100+2>>0]=HEAP8[334508+2>>0]|0;HEAP8[$$byval_copy100+3>>0]=HEAP8[334508+3>>0]|0;
       ;HEAP8[$$byval_copy101>>0]=HEAP8[340312>>0]|0;HEAP8[$$byval_copy101+1>>0]=HEAP8[340312+1>>0]|0;HEAP8[$$byval_copy101+2>>0]=HEAP8[340312+2>>0]|0;HEAP8[$$byval_copy101+3>>0]=HEAP8[340312+3>>0]|0;
       _ColorTransition($1,$$byval_copy100,$$byval_copy101,$119);
       $121 = HEAP32[$1>>2]|0;
       HEAP32[40620] = $121;
       $122 = HEAP32[83626]|0;
       ;HEAP8[$$byval_copy100>>0]=HEAP8[334512>>0]|0;HEAP8[$$byval_copy100+1>>0]=HEAP8[334512+1>>0]|0;HEAP8[$$byval_copy100+2>>0]=HEAP8[334512+2>>0]|0;HEAP8[$$byval_copy100+3>>0]=HEAP8[334512+3>>0]|0;
       ;HEAP8[$$byval_copy101>>0]=HEAP8[340316>>0]|0;HEAP8[$$byval_copy101+1>>0]=HEAP8[340316+1>>0]|0;HEAP8[$$byval_copy101+2>>0]=HEAP8[340316+2>>0]|0;HEAP8[$$byval_copy101+3>>0]=HEAP8[340316+3>>0]|0;
       _ColorTransition($2,$$byval_copy100,$$byval_copy101,$122);
       $123 = HEAP32[$2>>2]|0;
       HEAP32[40621] = $123;
       ;HEAP8[$$byval_copy100>>0]=HEAP8[334516>>0]|0;HEAP8[$$byval_copy100+1>>0]=HEAP8[334516+1>>0]|0;HEAP8[$$byval_copy100+2>>0]=HEAP8[334516+2>>0]|0;HEAP8[$$byval_copy100+3>>0]=HEAP8[334516+3>>0]|0;
       ;HEAP8[$$byval_copy101>>0]=HEAP8[340320>>0]|0;HEAP8[$$byval_copy101+1>>0]=HEAP8[340320+1>>0]|0;HEAP8[$$byval_copy101+2>>0]=HEAP8[340320+2>>0]|0;HEAP8[$$byval_copy101+3>>0]=HEAP8[340320+3>>0]|0;
       _ColorTransition($3,$$byval_copy100,$$byval_copy101,$122);
       $124 = HEAP32[$3>>2]|0;
       HEAP32[40622] = $124;
       $125 = HEAP32[83626]|0;
       ;HEAP8[$$byval_copy100>>0]=HEAP8[334520>>0]|0;HEAP8[$$byval_copy100+1>>0]=HEAP8[334520+1>>0]|0;HEAP8[$$byval_copy100+2>>0]=HEAP8[334520+2>>0]|0;HEAP8[$$byval_copy100+3>>0]=HEAP8[334520+3>>0]|0;
       ;HEAP8[$$byval_copy101>>0]=HEAP8[340324>>0]|0;HEAP8[$$byval_copy101+1>>0]=HEAP8[340324+1>>0]|0;HEAP8[$$byval_copy101+2>>0]=HEAP8[340324+2>>0]|0;HEAP8[$$byval_copy101+3>>0]=HEAP8[340324+3>>0]|0;
       _ColorTransition($4,$$byval_copy100,$$byval_copy101,$125);
       $126 = HEAP32[$4>>2]|0;
       HEAP32[40623] = $126;
      }
      HEAP32[83631] = 4;
     }
    }
   } while(0);
   if ((label|0) == 25) {
    HEAP32[(193496)>>2] = 1;
    HEAP32[(229416)>>2] = 1;
    HEAP32[(229724)>>2] = 1;
    HEAP32[83626] = 0;
    $79 = (_GetRandomValue(0,10)|0);
    HEAP32[40597] = $79;
    HEAP32[40600] = 0;
    $80 = HEAP32[40620]|0;
    HEAP32[83627] = $80;
    $81 = HEAP32[40621]|0;
    HEAP32[83628] = $81;
    $82 = HEAP32[40622]|0;
    HEAP32[83629] = $82;
    $83 = HEAP32[40623]|0;
    HEAP32[83630] = $83;
    HEAP8[340312] = -14;
    HEAP8[(340313)>>0] = 113;
    HEAP8[(340314)>>0] = 62;
    HEAP8[(340315)>>0] = -1;
    HEAP8[340316] = -66;
    HEAP8[(340317)>>0] = -121;
    HEAP8[(340318)>>0] = 114;
    HEAP8[(340319)>>0] = -1;
    HEAP8[340320] = -112;
    HEAP8[(340321)>>0] = -126;
    HEAP8[(340322)>>0] = 101;
    HEAP8[(340323)>>0] = -1;
    HEAP8[340324] = -42;
    HEAP8[(340325)>>0] = -123;
    HEAP8[(340326)>>0] = 58;
    HEAP8[(340327)>>0] = -1;
    HEAP32[83631] = 2;
    HEAP32[6802] = 0;
   }
   $127 = HEAP32[40577]|0;
   $128 = ($127|0)==(0);
   if ($128) {
    $129 = +HEAPF32[40568];
    $130 = +HEAPF32[40565];
    $131 = $130 - $129;
    HEAPF32[40565] = $131;
    $132 = $129 * 0.75;
    $133 = +HEAPF32[40566];
    $134 = $133 - $132;
    HEAPF32[40566] = $134;
    $135 = $129 * 0.5;
    $136 = +HEAPF32[40567];
    $137 = $136 - $135;
    HEAPF32[40567] = $137;
    $138 = HEAP32[40613]|0;
    $139 = HEAP32[83632]|0;
    $140 = (($139) - ($138))|0;
    HEAP32[83632] = $140;
    $141 = HEAP32[40557]|0;
    $142 = (+($141|0));
    $143 = +HEAPF32[40569];
    $144 = $143 - $142;
    HEAPF32[40569] = $144;
    $145 = +HEAPF32[40601];
    $146 = +HEAPF32[40590];
    $147 = $145 + $146;
    HEAPF32[40590] = $147;
   }
   $148 = +HEAPF32[40556];
   $149 = HEAP32[(261768)>>2]|0;
   $150 = (+($149|0));
   $151 = $148 + $150;
   $152 = (~~(($151)));
   HEAP32[(261768)>>2] = $152;
   $153 = +HEAPF32[40560];
   $154 = $153;
   $155 = $154 * 60.0;
   $156 = $155 / 60.0;
   $157 = HEAP32[40554]|0;
   $158 = (+($157|0));
   $159 = $158 + $156;
   $160 = (~~(($159)));
   HEAP32[40554] = $160;
   $161 = $154 * 3.0;
   $162 = (~~(($161)));
   HEAP32[40557] = $162;
   $163 = HEAP32[65441]|0;
   $164 = (+($163|0));
   $165 = (_GetScreenWidth()|0);
   $166 = (+($165|0));
   $167 = $166 * 0.59999999999999998;
   $168 = $164 >= $167;
   $169 = HEAP32[83633]|0;
   $170 = ($169|0)!=(2);
   $or$cond30 = $170 & $168;
   $171 = HEAP32[65441]|0;
   if ($or$cond30) {
    $172 = (+($171|0));
    $173 = (_GetScreenWidth()|0);
    $174 = (+($173|0));
    $175 = $174 * 0.60000002384185791;
    $176 = $172 - $175;
    $177 = (_GetScreenWidth()|0);
    $178 = (+($177|0));
    $179 = $176 / $178;
    $$sink115 = $179;
    label = 40;
   } else {
    $180 = (+($171|0));
    $181 = (_GetScreenWidth()|0);
    $182 = (+($181|0));
    $183 = $182 * 0.59999999999999998;
    $184 = $180 < $183;
    $185 = HEAP32[83633]|0;
    $186 = ($185|0)!=(2);
    $or$cond32 = $186 & $184;
    if ($or$cond32) {
     $$sink115 = 0.0;
     label = 40;
    } else {
     $188 = $185;
    }
   }
   if ((label|0) == 40) {
    HEAPF32[83634] = $$sink115;
    $$pr1131 = HEAP32[83633]|0;
    $188 = $$pr1131;
   }
   $187 = ($188|0)==(2);
   if (!($187)) {
    $189 = +HEAPF32[83634];
    $190 = $189;
    $191 = $190 + 1.2;
    $192 = +HEAPF32[40607];
    $193 = $192;
    $194 = $191 + $193;
    $195 = $194;
    HEAPF32[40560] = $195;
   }
   $196 = HEAP32[40605]|0;
   $197 = (($196) + 1)|0;
   HEAP32[40605] = $197;
   $198 = ($196|0)>(3598);
   if ($198) {
    $199 = HEAP32[40606]|0;
    $200 = (($199) + 1)|0;
    HEAP32[40606] = $200;
    $201 = ($200|0)<(12000);
    if ($201) {
     $202 = (+($200|0));
     $203 = (+_LinearEaseIn($202,0.0,0.5,12000.0));
     HEAPF32[40607] = $203;
     $204 = HEAP32[40606]|0;
     $205 = (+($204|0));
     $206 = (+_LinearEaseIn($205,0.0,30.0,12000.0));
     HEAPF32[83635] = $206;
    }
   }
   $207 = +HEAPF32[40565];
   $208 = (_GetScreenWidth()|0);
   $209 = (0 - ($208))|0;
   $210 = (+($209|0));
   $211 = !($207 <= $210);
   if (!($211)) {
    HEAPF32[40565] = 0.0;
   }
   $212 = +HEAPF32[40566];
   $213 = (_GetScreenWidth()|0);
   $214 = (0 - ($213))|0;
   $215 = (+($214|0));
   $216 = !($212 <= $215);
   if (!($216)) {
    HEAPF32[40566] = 0.0;
   }
   $217 = +HEAPF32[40567];
   $218 = (_GetScreenWidth()|0);
   $219 = (0 - ($218))|0;
   $220 = (+($219|0));
   $221 = !($217 <= $220);
   if (!($221)) {
    HEAPF32[40567] = 0.0;
   }
   $222 = +HEAPF32[40569];
   $223 = (_GetScreenWidth()|0);
   $224 = (0 - ($223))|0;
   $225 = (+($224|0));
   $226 = !($222 <= $225);
   if (!($226)) {
    HEAPF32[40569] = 0.0;
   }
   $227 = HEAP32[83632]|0;
   $228 = (_GetScreenWidth()|0);
   $229 = (0 - ($228))|0;
   $230 = ($227|0)>($229|0);
   if (!($230)) {
    HEAP32[83632] = 0;
   }
   $231 = +HEAPF32[40599];
   $232 = !($231 > 0.0);
   $233 = HEAP32[40600]|0;
   $234 = ($233|0)!=(0);
   $or$cond34 = $232 | $234;
   if ($or$cond34) {
    $238 = $231 < 1.0;
    $or$cond36 = $238 & $234;
    if ($or$cond36) {
     $239 = +HEAPF32[40560];
     $240 = $239 * 0.029999999329447746;
     $241 = $231 + $240;
     $$sink117 = $241;
     label = 60;
    }
   } else {
    $235 = +HEAPF32[40560];
    $236 = $235 * 0.029999999329447746;
    $237 = $231 - $236;
    $$sink117 = $237;
    label = 60;
   }
   if ((label|0) == 60) {
    HEAPF32[40599] = $$sink117;
   }
   $242 = +HEAPF32[83636];
   $243 = !($242 > 0.0);
   $244 = HEAP32[40600]|0;
   $245 = ($244|0)!=(0);
   $or$cond38 = $243 | $245;
   if ($or$cond38) {
    $249 = $242 < 0.15000000596046448;
    $or$cond40 = $249 & $245;
    if ($or$cond40) {
     $250 = +HEAPF32[40560];
     $251 = $250 * 0.019999999552965164;
     $252 = $242 + $251;
     $$sink119 = $252;
     label = 65;
    }
   } else {
    $246 = +HEAPF32[40560];
    $247 = $246 * 0.019999999552965164;
    $248 = $242 - $247;
    $$sink119 = $248;
    label = 65;
   }
   if ((label|0) == 65) {
    HEAPF32[83636] = $$sink119;
   }
   $253 = +HEAPF32[40560];
   $254 = $253;
   $255 = $254 * 60.0;
   $256 = $255 / 60.0;
   $257 = +HEAPF32[40601];
   $258 = $257;
   $259 = $258 + $256;
   $260 = $259;
   HEAPF32[40601] = $260;
   $261 = !($260 <= 1200.0);
   if ($261) {
    $264 = +HEAPF32[40619];
    $$sink41 = $264;
   } else {
    $262 = +HEAPF32[40618];
    $263 = (+_LinearEaseIn($260,$262,90.0,1200.0));
    $$sink41 = $263;
   }
   HEAPF32[40590] = $$sink41;
   ;HEAP32[$$byval_copy100>>2]=HEAP32[230028>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[230028+4>>2]|0;
   ;HEAP32[$$byval_copy101>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[261764+12>>2]|0;
   $265 = (_CheckCollisionCircleRec($$byval_copy100,300.0,$$byval_copy101)|0);
   $266 = ($265|0)==(0);
   $267 = +HEAPF32[40598];
   do {
    if ($266) {
     $270 = $267 < 1.0;
     if (!($270)) {
      break;
     }
     $271 = $267 + 0.0099999997764825821;
     HEAPF32[40598] = $271;
    } else {
     $268 = $267 > 0.40000000596046448;
     if (!($268)) {
      break;
     }
     $269 = $267 + -0.0099999997764825821;
     HEAPF32[40598] = $269;
    }
   } while(0);
   $272 = HEAP32[8]|0;
   $273 = (($272) + 1)|0;
   HEAP32[8] = $273;
   $274 = ($273|0)>(11);
   $275 = HEAP32[83637]|0;
   if ($274) {
    $276 = (($275) + 1)|0;
    HEAP32[83637] = $276;
    HEAP32[8] = 0;
    $278 = $276;
   } else {
    $278 = $275;
   }
   $277 = ($278|0)>(3);
   if ($277) {
    HEAP32[83637] = 0;
   }
   $279 = HEAP32[(162568)>>2]|0;
   $280 = HEAP32[83637]|0;
   $281 = Math_imul($280, $279)|0;
   $282 = (($281) + 1056)|0;
   HEAP32[40640] = $282;
   $283 = HEAP32[9]|0;
   $284 = (($283) + 1)|0;
   HEAP32[9] = $284;
   $285 = ($284|0)>(7);
   if ($285) {
    $286 = HEAP32[40583]|0;
    $287 = (($286) + 1)|0;
    HEAP32[40583] = $287;
    $288 = HEAP32[40584]|0;
    $289 = (($288) + 1)|0;
    HEAP32[40584] = $289;
    $290 = HEAP32[40585]|0;
    $291 = (($290) + 1)|0;
    HEAP32[40585] = $291;
    $292 = HEAP32[40586]|0;
    $293 = (($292) + 1)|0;
    HEAP32[40586] = $293;
    HEAP32[9] = 0;
   }
   $294 = HEAP32[40583]|0;
   $295 = ($294|0)>(3);
   if ($295) {
    HEAP32[40583] = 0;
   }
   $296 = HEAP32[40584]|0;
   $297 = ($296|0)>(3);
   if ($297) {
    HEAP32[40584] = 0;
   }
   $298 = HEAP32[40585]|0;
   $299 = ($298|0)>(3);
   if ($299) {
    HEAP32[40585] = 0;
   }
   $300 = HEAP32[40586]|0;
   $301 = ($300|0)>(3);
   if ($301) {
    HEAP32[40586] = 0;
   }
   $302 = HEAP32[40577]|0;
   $303 = ($302|0)==(0);
   do {
    if ($303) {
     $304 = HEAP32[83638]|0;
     $305 = (($304) + 1)|0;
     HEAP32[83638] = $305;
     $306 = ($305|0)>(5);
     $307 = HEAP32[10]|0;
     if ($306) {
      $308 = (($307) + 1)|0;
      HEAP32[10] = $308;
      HEAP32[83638] = 0;
      $310 = $308;
     } else {
      $310 = $307;
     }
     $309 = ($310|0)>(1);
     if ($309) {
      HEAP32[10] = 0;
     }
     $311 = HEAP32[(162600)>>2]|0;
     $312 = HEAP32[10]|0;
     $313 = Math_imul($312, $311)|0;
     $314 = (($313) + 1570)|0;
     HEAP32[40648] = $314;
     $315 = HEAP32[40587]|0;
     $316 = (($315) + 1)|0;
     HEAP32[40587] = $316;
     $317 = ($316|0)>(2);
     $318 = HEAP32[11]|0;
     if ($317) {
      $319 = (($318) + 1)|0;
      HEAP32[11] = $319;
      HEAP32[40587] = 0;
      $321 = $319;
     } else {
      $321 = $318;
     }
     $320 = ($321|0)>(3);
     if ($320) {
      HEAP32[11] = 0;
     }
     $322 = HEAP32[(162584)>>2]|0;
     $323 = HEAP32[11]|0;
     $324 = Math_imul($323, $322)|0;
     $325 = (($324) + 1025)|0;
     HEAP32[40644] = $325;
     $326 = HEAP32[12]|0;
     $327 = (($326) + 1)|0;
     HEAP32[12] = $327;
     $328 = ($327|0)>(23);
     $329 = HEAP32[83639]|0;
     if ($328) {
      $330 = (($329) + 1)|0;
      HEAP32[83639] = $330;
      HEAP32[12] = 0;
      $332 = $330;
     } else {
      $332 = $329;
     }
     $331 = ($332|0)>(1);
     if ($331) {
      HEAP32[83639] = 0;
     }
     $333 = HEAP32[(162616)>>2]|0;
     $334 = HEAP32[83639]|0;
     $335 = Math_imul($334, $333)|0;
     $336 = (($335) + 1025)|0;
     HEAP32[40652] = $336;
     $337 = HEAP32[83640]|0;
     $338 = (($337) + 1)|0;
     HEAP32[83640] = $338;
     $339 = ($338|0)>(23);
     $340 = HEAP32[13]|0;
     if ($339) {
      $341 = (($340) + 1)|0;
      HEAP32[13] = $341;
      HEAP32[83640] = 0;
      $343 = $341;
     } else {
      $343 = $340;
     }
     $342 = ($343|0)>(1);
     if ($342) {
      HEAP32[13] = 0;
     }
     $344 = HEAP32[(162632)>>2]|0;
     $345 = HEAP32[13]|0;
     $346 = Math_imul($345, $344)|0;
     $347 = (($346) + 755)|0;
     HEAP32[40656] = $347;
     $348 = HEAP32[83641]|0;
     $349 = (($348) + 1)|0;
     HEAP32[83641] = $349;
     $350 = ($349|0)>(23);
     $351 = HEAP32[14]|0;
     if ($350) {
      $352 = (($351) + 1)|0;
      HEAP32[14] = $352;
      HEAP32[83641] = 0;
      $354 = $352;
     } else {
      $354 = $351;
     }
     $353 = ($354|0)>(1);
     if ($353) {
      HEAP32[14] = 0;
     }
     $355 = HEAP32[(162648)>>2]|0;
     $356 = HEAP32[14]|0;
     $357 = Math_imul($356, $355)|0;
     $358 = (($357) + 765)|0;
     HEAP32[40660] = $358;
     $359 = HEAP32[40579]|0;
     $360 = ($359|0)==(0);
     do {
      if (!($360)) {
       $361 = HEAP32[40578]|0;
       $362 = ($361|0)==(0);
       $363 = HEAP32[(334572)>>2]|0;
       if ($362) {
        $372 = HEAP32[(334580)>>2]|0;
        $373 = (($372) + -1)|0;
        HEAP32[(334580)>>2] = $373;
        $374 = (($363) + 1)|0;
        HEAP32[(334572)>>2] = $374;
        $375 = ($373|0)<(1);
        if (!($375)) {
         break;
        }
        HEAP32[40578] = 1;
        HEAP32[65460] = 1;
        HEAP32[40579] = 0;
        break;
       } else {
        $364 = HEAP32[83642]|0;
        $365 = (($364) + -100)|0;
        HEAP32[83642] = $365;
        $366 = HEAP32[(334576)>>2]|0;
        $367 = (($366) + 100)|0;
        HEAP32[(334576)>>2] = $367;
        $368 = HEAP32[(334580)>>2]|0;
        $369 = (($368) + 5)|0;
        HEAP32[(334580)>>2] = $369;
        $370 = (($363) + -5)|0;
        HEAP32[(334572)>>2] = $370;
        $371 = ($369|0)>(99);
        if (!($371)) {
         break;
        }
        HEAP32[40578] = 0;
        break;
       }
      }
     } while(0);
     $376 = HEAP32[65460]|0;
     $377 = ($376|0)!=(1);
     $378 = HEAP32[83646]|0;
     $379 = ($378|0)!=(0);
     $or$cond43 = $377 | $379;
     do {
      if ($or$cond43) {
       if (!($379)) {
        break;
       }
       $411 = HEAP32[(261828)>>2]|0;
       $412 = HEAP32[(261836)>>2]|0;
       $413 = (($412) + ($411))|0;
       $414 = (_GetScreenHeight()|0);
       $415 = ($413|0)>($414|0);
       if ($415) {
        HEAP32[65460] = 0;
        HEAP32[83646] = 0;
       }
       $416 = HEAP32[65456]|0;
       $417 = (($416) + 2)|0;
       HEAP32[65456] = $417;
       $418 = HEAP32[83648]|0;
       $419 = (($418) + -1)|0;
       HEAP32[83648] = $419;
       $420 = (+($419|0));
       $421 = $420 * 60.0;
       $422 = $421 / 60.0;
       $423 = HEAP32[(261828)>>2]|0;
       $424 = (+($423|0));
       $425 = $424 - $422;
       $426 = (~~(($425)));
       HEAP32[(261828)>>2] = $426;
      } else {
       $380 = HEAP32[40557]|0;
       $381 = ($380*10)|0;
       $382 = (+($381|0));
       $383 = $382 * 60.0;
       $384 = $383 / 60.0;
       $385 = HEAP32[65456]|0;
       $386 = (+($385|0));
       $387 = $386 - $384;
       $388 = (~~(($387)));
       HEAP32[65456] = $388;
       ;HEAP32[$$byval_copy100>>2]=HEAP32[261824>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261824+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261824+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261824+12>>2]|0;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[261764+12>>2]|0;
       $389 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
       $390 = ($389|0)!=(0);
       $391 = HEAP32[83633]|0;
       $$off1084 = (($391) + -1)|0;
       $$cmp = ($$off1084>>>0)>(1);
       $392 = $390 & $$cmp;
       if ($392) {
        HEAP32[83647] = 8;
        HEAP32[40576] = 2;
        HEAP32[40573] = 0;
        HEAP32[40564] = 0;
        HEAP32[6798] = 6;
        break;
       }
       ;HEAP32[$$byval_copy100>>2]=HEAP32[261824>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261824+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261824+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261824+12>>2]|0;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[261764+12>>2]|0;
       $393 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
       $394 = ($393|0)!=(0);
       $395 = HEAP32[83633]|0;
       $396 = ($395|0)==(2);
       $397 = $394 & $396;
       if (!($397)) {
        break;
       }
       HEAP32[83646] = 1;
       HEAP32[83648] = 8;
       $398 = HEAP32[40589]|0;
       $399 = (26680 + ($398<<2)|0);
       HEAP32[$399>>2] = 5;
       $400 = (($398) + 1)|0;
       HEAP32[40589] = $400;
       $401 = HEAP32[6668]|0;
       $402 = (($401) + 300)|0;
       HEAP32[6668] = $402;
       $403 = HEAP32[83649]|0;
       $404 = (($403) + 1)|0;
       HEAP32[83649] = $404;
       $405 = HEAP32[83650]|0;
       $406 = (($405) + 1)|0;
       HEAP32[83650] = $406;
       $407 = HEAP32[65456]|0;
       $408 = (+($407|0));
       $409 = HEAP32[(261828)>>2]|0;
       $410 = (+($409|0));
       HEAPF32[65461] = $408;
       HEAPF32[(261848)>>2] = $410;
       HEAPF32[(261860)>>2] = 1.0;
       HEAPF32[(261856)>>2] = 1.0;
       HEAP32[(261864)>>2] = 300;
       HEAP32[(261852)>>2] = 1;
      }
     } while(0);
     $427 = HEAP32[65456]|0;
     $428 = HEAP32[(261832)>>2]|0;
     $429 = (($428) + ($427))|0;
     $430 = ($429|0)<(1);
     if ($430) {
      HEAP32[65460] = 0;
     }
     $431 = HEAP32[83651]|0;
     $432 = ($431|0)==(0);
     do {
      if (!($432)) {
       $433 = HEAP32[83652]|0;
       $434 = (($433) + -100)|0;
       HEAP32[83652] = $434;
       $435 = HEAP32[(334616)>>2]|0;
       $436 = (($435) + 100)|0;
       HEAP32[(334616)>>2] = $436;
       $437 = HEAP32[(334620)>>2]|0;
       $438 = (+($437|0));
       $439 = $438 + 2.5;
       $440 = (~~(($439)));
       HEAP32[(334620)>>2] = $440;
       $441 = HEAP32[(334612)>>2]|0;
       $442 = (+($441|0));
       $443 = $442 + 1.25;
       $444 = (~~(($443)));
       HEAP32[(334612)>>2] = $444;
       $445 = ($440|0)>(99);
       if (!($445)) {
        break;
       }
       HEAP32[65449] = 1;
       HEAP32[83651] = 0;
      }
     } while(0);
     $446 = HEAP32[65449]|0;
     $447 = ($446|0)!=(1);
     $448 = HEAP32[83656]|0;
     $449 = ($448|0)!=(0);
     $or$cond53 = $447 | $449;
     do {
      if ($or$cond53) {
       if (!($449)) {
        break;
       }
       $489 = HEAP32[(261784)>>2]|0;
       $490 = HEAP32[(261792)>>2]|0;
       $491 = (($490) + ($489))|0;
       $492 = (_GetScreenHeight()|0);
       $493 = ($491|0)>($492|0);
       if ($493) {
        HEAP32[65449] = 0;
        HEAP32[83656] = 0;
       }
       $494 = HEAP32[65445]|0;
       $495 = (($494) + 2)|0;
       HEAP32[65445] = $495;
       $496 = HEAP32[83648]|0;
       $497 = (($496) + -1)|0;
       HEAP32[83648] = $497;
       $498 = (+($497|0));
       $499 = $498 * 60.0;
       $500 = $499 / 60.0;
       $501 = HEAP32[(261784)>>2]|0;
       $502 = (+($501|0));
       $503 = $502 - $500;
       $504 = (~~(($503)));
       HEAP32[(261784)>>2] = $504;
      } else {
       $450 = HEAP32[40557]|0;
       $451 = HEAP32[65445]|0;
       $452 = Math_imul($450, -3)|0;
       $453 = (($451) + ($452))|0;
       HEAP32[65445] = $453;
       $454 = (+($453|0));
       $455 = $454 * 0.015707964077591896;
       $456 = $455;
       $457 = (+Math_sin((+$456)));
       $458 = $457 * 5.0;
       $459 = (~~(($458)));
       $460 = (+($459|0));
       $461 = $460 * 60.0;
       $462 = $461 / 60.0;
       $463 = HEAP32[(261784)>>2]|0;
       $464 = (+($463|0));
       $465 = $464 + $462;
       $466 = (~~(($465)));
       HEAP32[(261784)>>2] = $466;
       ;HEAP32[$$byval_copy100>>2]=HEAP32[261780>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261780+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261780+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261780+12>>2]|0;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[261764+12>>2]|0;
       $467 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
       $468 = ($467|0)!=(0);
       $469 = HEAP32[83633]|0;
       $$off1085 = (($469) + -1)|0;
       $$cmp1086 = ($$off1085>>>0)>(1);
       $470 = $468 & $$cmp1086;
       if ($470) {
        HEAP32[83647] = 8;
        HEAP32[40576] = 2;
        HEAP32[40573] = 0;
        HEAP32[40564] = 0;
        HEAP32[6798] = 5;
        break;
       }
       ;HEAP32[$$byval_copy100>>2]=HEAP32[261780>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261780+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261780+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261780+12>>2]|0;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[261764+12>>2]|0;
       $471 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
       $472 = ($471|0)!=(0);
       $473 = HEAP32[83633]|0;
       $474 = ($473|0)==(2);
       $475 = $472 & $474;
       if (!($475)) {
        break;
       }
       HEAP32[83656] = 1;
       HEAP32[83648] = 8;
       $476 = HEAP32[40589]|0;
       $477 = (26680 + ($476<<2)|0);
       HEAP32[$477>>2] = 4;
       $478 = (($476) + 1)|0;
       HEAP32[40589] = $478;
       $479 = HEAP32[6668]|0;
       $480 = (($479) + 300)|0;
       HEAP32[6668] = $480;
       $481 = HEAP32[83657]|0;
       $482 = (($481) + 1)|0;
       HEAP32[83657] = $482;
       $483 = HEAP32[83650]|0;
       $484 = (($483) + 1)|0;
       HEAP32[83650] = $484;
       $485 = HEAP32[65445]|0;
       $486 = (+($485|0));
       $487 = HEAP32[(261784)>>2]|0;
       $488 = (+($487|0));
       HEAPF32[65450] = $486;
       HEAPF32[(261804)>>2] = $488;
       HEAPF32[(261816)>>2] = 1.0;
       HEAPF32[(261812)>>2] = 1.0;
       HEAP32[(261820)>>2] = 300;
       HEAP32[(261808)>>2] = 1;
      }
     } while(0);
     $505 = HEAP32[65445]|0;
     $506 = HEAP32[(261788)>>2]|0;
     $507 = (($506) + ($505))|0;
     $508 = ($507|0)<(1);
     if (!($508)) {
      break;
     }
     HEAP32[65449] = 0;
    }
   } while(0);
   $509 = HEAP32[40558]|0;
   $510 = HEAP32[40563]|0;
   $511 = ($509|0)<($510|0);
   if (!($511)) {
    HEAP32[40558] = $510;
   }
   $512 = HEAP32[6801]|0;
   $513 = ($512|0)<(100);
   $514 = HEAP32[83658]|0;
   $515 = ($514|0)!=(0);
   $or$cond63 = $513 | $515;
   if ($or$cond63) {
    $538 = $514;
   } else {
    $516 = HEAP32[40614]|0;
    $517 = ($516|0)==(0);
    $518 = +HEAPF32[40615];
    do {
     if ($517) {
      $521 = $518 + -0.0099999997764825821;
      HEAPF32[40615] = $521;
      $522 = !($521 <= 0.0);
      if ($522) {
       break;
      }
      HEAP32[40614] = 1;
     } else {
      $519 = $518 + 0.0099999997764825821;
      HEAPF32[40615] = $519;
      $520 = !($519 >= 1.0);
      if ($520) {
       break;
      }
      HEAP32[40614] = 0;
     }
    } while(0);
    $523 = +HEAPF32[40616];
    $524 = $523 + -0.0099999997764825821;
    HEAPF32[40616] = $524;
    $525 = +HEAPF32[40617];
    $526 = $525 + 0.004999999888241291;
    HEAPF32[40617] = $526;
    $527 = !($524 <= 0.0);
    if (!($527)) {
     HEAPF32[40616] = 1.0;
     HEAPF32[40617] = 1.0;
    }
    $528 = (_IsGestureDetected(1)|0);
    $529 = ($528|0)==(0);
    do {
     if (!($529)) {
      _GetTouchPosition($5,0);
      ;HEAP32[$$byval_copy100>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$5+4>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[162528>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[162528+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[162528+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[162528+12>>2]|0;
      $530 = (_CheckCollisionPointRec($$byval_copy100,$$byval_copy101)|0);
      $531 = ($530|0)!=(0);
      $532 = HEAP32[83633]|0;
      $533 = ($532|0)!=(2);
      $or$cond65 = $531 & $533;
      if (!($or$cond65)) {
       break;
      }
      HEAP32[83633] = 2;
      HEAP32[40577] = 1;
      $534 = HEAP32[6801]|0;
      HEAP32[83659] = $534;
      HEAP32[83660] = 0;
      HEAP32[83661] = 0;
      $535 = HEAP32[40612]|0;
      $536 = (($535) + 1)|0;
      HEAP32[40612] = $536;
     }
    } while(0);
    $$pr1145 = HEAP32[83658]|0;
    $538 = $$pr1145;
   }
   $537 = ($538|0)==(0);
   do {
    if (!($537)) {
     $539 = HEAP32[40558]|0;
     $540 = (($539) + 20)|0;
     HEAP32[40558] = $540;
     $541 = HEAP32[40563]|0;
     $542 = ($540|0)<($541|0);
     if ($542) {
      break;
     }
     HEAP32[83658] = 0;
    }
   } while(0);
   $543 = HEAP32[40572]|0;
   $544 = (($543) + 1)|0;
   HEAP32[40572] = $544;
   $545 = ($544|0)>(10);
   if ($545) {
    $546 = (_GetRandomValue(0,255)|0);
    $547 = $546&255;
    HEAP8[340304] = $547;
    $548 = (_GetRandomValue(0,255)|0);
    $549 = $548&255;
    HEAP8[(340305)>>0] = $549;
    $550 = (_GetRandomValue(0,255)|0);
    $551 = $550&255;
    HEAP8[(340306)>>0] = $551;
    HEAP32[40572] = 0;
    $$01224 = 0;
   } else {
    $$01224 = 0;
   }
   while(1) {
    $552 = (258956 + ($$01224<<2)|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = ($553|0)==(0);
    if ($554) {
     $555 = (258796 + ($$01224<<4)|0);
     HEAP32[$555>>2] = -100;
    }
    $556 = (258796 + ($$01224<<4)|0);
    $557 = HEAP32[$556>>2]|0;
    $558 = (((258796 + ($$01224<<4)|0)) + 8|0);
    $559 = HEAP32[$558>>2]|0;
    $560 = (0 - ($559))|0;
    $561 = ($557|0)>($560|0);
    if (!($561)) {
     HEAP32[$552>>2] = 0;
    }
    ;HEAP32[$$byval_copy100>>2]=HEAP32[$556>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$556+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[$556+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[$556+12>>2]|0;
    ;HEAP32[$$byval_copy101>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[261764+12>>2]|0;
    $562 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
    $563 = ($562|0)!=(0);
    $564 = HEAP32[83633]|0;
    $565 = ($564|0)==(3);
    $or$cond67 = $563 & $565;
    if ($or$cond67) {
     HEAP32[40574] = 1;
    }
    $566 = (($$01224) + 1)|0;
    $exitcond1276 = ($566|0)==(10);
    if ($exitcond1276) {
     $$010501223 = 0;
     break;
    } else {
     $$01224 = $566;
    }
   }
   while(1) {
    $567 = (258996 + ($$010501223<<2)|0);
    $568 = HEAP32[$567>>2]|0;
    $569 = ($568|0)==(0);
    if ($569) {
     $570 = (259036 + ($$010501223<<4)|0);
     HEAP32[$570>>2] = -100;
    }
    $571 = (259036 + ($$010501223<<4)|0);
    $572 = HEAP32[$571>>2]|0;
    $573 = (((259036 + ($$010501223<<4)|0)) + 8|0);
    $574 = HEAP32[$573>>2]|0;
    $575 = (0 - ($574))|0;
    $576 = ($572|0)>($575|0);
    if (!($576)) {
     HEAP32[$567>>2] = 0;
    }
    ;HEAP32[$$byval_copy100>>2]=HEAP32[$571>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$571+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[$571+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[$571+12>>2]|0;
    ;HEAP32[$$byval_copy101>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[261764+12>>2]|0;
    $577 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
    $578 = ($577|0)==(0);
    do {
     if (!($578)) {
      $579 = HEAP32[40559]|0;
      $580 = ($579|0)>(29);
      $581 = HEAP32[83633]|0;
      $582 = ($581|0)!=(2);
      $or$cond69 = $580 & $582;
      if (!($or$cond69)) {
       break;
      }
      $583 = HEAP32[40575]|0;
      $584 = ($583|0)==(0);
      if ($584) {
       ;HEAP32[$$byval_copy101>>2]=HEAP32[26592>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[26592+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[26592+8>>2]|0;
       _PlaySound($$byval_copy101);
       $585 = HEAP32[40609]|0;
       $586 = (($585) + 1)|0;
       HEAP32[40609] = $586;
      }
      HEAP32[40575] = 1;
      HEAP32[40553] = 10;
      HEAP32[83633] = 3;
     }
    } while(0);
    $587 = (($$010501223) + 1)|0;
    $exitcond1275 = ($587|0)==(10);
    if ($exitcond1275) {
     $$010511222 = 0;
     break;
    } else {
     $$010501223 = $587;
    }
   }
   while(1) {
    $588 = (259196 + ($$010511222<<2)|0);
    $589 = HEAP32[$588>>2]|0;
    $590 = ($589|0)==(0);
    if ($590) {
     $591 = (259236 + ($$010511222<<4)|0);
     HEAP32[$591>>2] = -500;
    } else {
     $592 = +HEAPF32[40560];
     $593 = $592 * 9.0;
     $594 = $593;
     $595 = $594 * 60.0;
     $596 = $595 / 60.0;
     $597 = (259236 + ($$010511222<<4)|0);
     $598 = HEAP32[$597>>2]|0;
     $599 = (+($598|0));
     $600 = $599 - $596;
     $601 = (~~(($600)));
     HEAP32[$597>>2] = $601;
    }
    $602 = (259236 + ($$010511222<<4)|0);
    $603 = HEAP32[$602>>2]|0;
    $604 = (((259236 + ($$010511222<<4)|0)) + 8|0);
    $605 = HEAP32[$604>>2]|0;
    $606 = (0 - ($605))|0;
    $607 = ($603|0)>($606|0);
    if (!($607)) {
     HEAP32[$588>>2] = 0;
    }
    ;HEAP32[$$byval_copy100>>2]=HEAP32[$602>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$602+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[$602+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[$602+12>>2]|0;
    ;HEAP32[$$byval_copy101>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[261764+12>>2]|0;
    $608 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
    $609 = ($608|0)!=(0);
    $610 = HEAP32[83633]|0;
    $611 = ($610|0)!=(4);
    $or$cond71 = $609 & $611;
    $612 = HEAP32[40562]|0;
    $613 = ($612|0)>(34);
    $or$cond73 = $or$cond71 & $613;
    $614 = ($610|0)!=(2);
    $or$cond75 = $614 & $or$cond73;
    if ($or$cond75) {
     HEAP32[83633] = 4;
     HEAP32[40562] = 0;
     HEAP32[83647] = 15;
     HEAP32[40553] = 0;
     HEAP32[40576] = 10;
     HEAP32[40574] = 0;
     HEAP32[40575] = 0;
     HEAP32[40570] = 0;
     HEAP32[40571] = 0;
     $615 = HEAP32[40610]|0;
     $616 = (($615) + 1)|0;
     HEAP32[40610] = $616;
    }
    $617 = (($$010511222) + 1)|0;
    $exitcond1274 = ($617|0)==(10);
    if ($exitcond1274) {
     $$010521221 = 0;
     break;
    } else {
     $$010511222 = $617;
    }
   }
   while(1) {
    $621 = (258676 + ($$010521221<<2)|0);
    $622 = HEAP32[$621>>2]|0;
    $623 = ($622|0)==(0);
    if ($623) {
     $624 = (258516 + ($$010521221<<4)|0);
     HEAP32[$624>>2] = -200;
    }
    $625 = (258516 + ($$010521221<<4)|0);
    $626 = HEAP32[$625>>2]|0;
    $627 = HEAP32[65441]|0;
    $628 = HEAP32[(261772)>>2]|0;
    $629 = (($628) + ($627))|0;
    $630 = ($626|0)>($629|0);
    do {
     if (!($630)) {
      $631 = (258716 + ($$010521221<<2)|0);
      $632 = HEAP32[$631>>2]|0;
      $633 = ($632|0)==(0);
      if (!($633)) {
       break;
      }
      HEAP32[$631>>2] = 1;
     }
    } while(0);
    $634 = (258716 + ($$010521221<<2)|0);
    $635 = HEAP32[$634>>2]|0;
    $636 = ($635|0)==(0);
    do {
     if (!($636)) {
      $637 = (((258516 + ($$010521221<<4)|0)) + 4|0);
      $638 = HEAP32[$637>>2]|0;
      $639 = ($638|0)<(-49);
      $640 = HEAP32[40577]|0;
      $641 = ($640|0)!=(0);
      $or$cond77 = $639 | $641;
      if ($or$cond77) {
       break;
      }
      $642 = (258756 + ($$010521221<<2)|0);
      $643 = HEAP32[40580]|0;
      $644 = (+($643|0));
      $645 = $644 * 60.0;
      $646 = $645 / 60.0;
      $647 = (+($638|0));
      $648 = $647 - $646;
      $649 = (~~(($648)));
      HEAP32[$637>>2] = $649;
      HEAP32[$642>>2] = 0;
     }
    } while(0);
    $650 = HEAP32[$625>>2]|0;
    $651 = (((258516 + ($$010521221<<4)|0)) + 8|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = (0 - ($652))|0;
    $654 = ($650|0)>($653|0);
    if (!($654)) {
     HEAP32[$621>>2] = 0;
     HEAP32[$634>>2] = 0;
    }
    ;HEAP32[$$byval_copy100>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261764+12>>2]|0;
    ;HEAP32[$$byval_copy101>>2]=HEAP32[$625>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$625+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$625+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$625+12>>2]|0;
    $655 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
    $656 = ($655|0)!=(0);
    $657 = HEAP32[83633]|0;
    $658 = ($657|0)!=(2);
    $or$cond121 = $656 & $658;
    if ($or$cond121) {
     HEAP32[83647] = 8;
     HEAP32[40576] = 2;
     HEAP32[40573] = 0;
     HEAP32[40564] = 0;
     HEAP32[6798] = 0;
     $$010531220 = 0;
    } else {
     $$010531220 = 0;
    }
    while(1) {
     $660 = (259396 + ($$010531220<<4)|0);
     ;HEAP32[$$byval_copy100>>2]=HEAP32[$625>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$625+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[$625+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[$625+12>>2]|0;
     ;HEAP32[$$byval_copy101>>2]=HEAP32[$660>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$660+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$660+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$660+12>>2]|0;
     $661 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
     $662 = ($661|0)==(0);
     do {
      if (!($662)) {
       $663 = (259716 + ($$010531220<<2)|0);
       $664 = HEAP32[$663>>2]|0;
       $665 = ($664|0)==(0);
       if (!($665)) {
        break;
       }
       $666 = (334648 + ($$010531220<<2)|0);
       HEAP32[$663>>2] = 1;
       HEAP32[$666>>2] = 8;
      }
     } while(0);
     $667 = (($$010531220) + 1)|0;
     $exitcond1272 = ($667|0)==(16);
     if ($exitcond1272) {
      break;
     } else {
      $$010531220 = $667;
     }
    }
    $659 = (($$010521221) + 1)|0;
    $exitcond1273 = ($659|0)==(10);
    if ($exitcond1273) {
     break;
    } else {
     $$010521221 = $659;
    }
   }
   $618 = ((($6)) + 4|0);
   $619 = ((($6)) + 8|0);
   $620 = ((($6)) + 12|0);
   $$010541218 = 0;
   while(1) {
    $668 = (258452 + ($$010541218<<2)|0);
    $669 = HEAP32[$668>>2]|0;
    $670 = ($669|0)==(0);
    do {
     if (!($670)) {
      $671 = HEAP32[40557]|0;
      $672 = (258196 + ($$010541218<<4)|0);
      $673 = HEAP32[$672>>2]|0;
      $674 = (($673) - ($671))|0;
      HEAP32[$672>>2] = $674;
      ;HEAP32[$$byval_copy100>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261764+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $675 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $676 = ($675|0)!=(0);
      $677 = HEAP32[83633]|0;
      $678 = ($677|0)!=(2);
      $or$cond79 = $676 & $678;
      $679 = HEAP32[40553]|0;
      $680 = ($679|0)>(9);
      $or$cond123 = $or$cond79 & $680;
      if ($or$cond123) {
       $681 = HEAP32[$672>>2]|0;
       $682 = (($681) + -25)|0;
       HEAP32[65441] = $682;
       HEAP32[83633] = 3;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261764+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $683 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $684 = ($683|0)!=(0);
      $685 = HEAP32[83633]|0;
      $686 = ($685|0)==(2);
      $or$cond81 = $684 & $686;
      $687 = HEAP32[40558]|0;
      $688 = ($687|0)<(2);
      $or$cond125 = $or$cond81 & $688;
      if ($or$cond125) {
       HEAP32[83633] = 0;
       HEAP32[83647] = 15;
       HEAP32[40576] = 6;
       HEAPF32[40568] = 1.6000000238418579;
       HEAPF32[40560] = 1.2000000476837158;
       HEAP32[83658] = 1;
       HEAP32[57506] = 0;
       $$010551213 = 0;
      } else {
       $$010551213 = 0;
      }
      while(1) {
       $689 = (259396 + ($$010551213<<4)|0);
       ;HEAP32[$$byval_copy100>>2]=HEAP32[$689>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$689+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[$689+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[$689+12>>2]|0;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
       $690 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
       $691 = ($690|0)==(0);
       do {
        if (!($691)) {
         $692 = (259652 + ($$010551213<<2)|0);
         $693 = HEAP32[$692>>2]|0;
         $694 = ($693|0)==(0);
         if ($694) {
          break;
         }
         $695 = (259716 + ($$010551213<<2)|0);
         $696 = HEAP32[$695>>2]|0;
         $697 = ($696|0)==(0);
         if (!($697)) {
          break;
         }
         $698 = HEAP32[$672>>2]|0;
         $699 = (($698) + -15)|0;
         HEAP32[$689>>2] = $699;
        }
       } while(0);
       $700 = (259780 + ($$010551213<<4)|0);
       ;HEAP32[$$byval_copy100>>2]=HEAP32[$700>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$700+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[$700+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[$700+12>>2]|0;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
       $701 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
       $702 = ($701|0)==(0);
       do {
        if (!($702)) {
         $703 = (260036 + ($$010551213<<2)|0);
         $704 = HEAP32[$703>>2]|0;
         $705 = ($704|0)==(0);
         if ($705) {
          break;
         }
         $706 = (260100 + ($$010551213<<2)|0);
         $707 = HEAP32[$706>>2]|0;
         $708 = ($707|0)==(0);
         if (!($708)) {
          break;
         }
         $709 = HEAP32[$672>>2]|0;
         $710 = (($709) + -15)|0;
         HEAP32[$700>>2] = $710;
        }
       } while(0);
       $711 = (260164 + ($$010551213<<4)|0);
       ;HEAP32[$$byval_copy100>>2]=HEAP32[$711>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$711+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[$711+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[$711+12>>2]|0;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
       $712 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
       $713 = ($712|0)==(0);
       do {
        if (!($713)) {
         $714 = (260420 + ($$010551213<<2)|0);
         $715 = HEAP32[$714>>2]|0;
         $716 = ($715|0)==(0);
         if ($716) {
          break;
         }
         $717 = (260548 + ($$010551213<<2)|0);
         $718 = HEAP32[$717>>2]|0;
         $719 = ($718|0)==(0);
         if (!($719)) {
          break;
         }
         $720 = HEAP32[$672>>2]|0;
         $721 = (($720) + -22)|0;
         HEAP32[$711>>2] = $721;
        }
       } while(0);
       $722 = (260612 + ($$010551213<<3)|0);
       $723 = +HEAPF32[$722>>2];
       $724 = (~~(($723)));
       HEAP32[$6>>2] = $724;
       $725 = (((260612 + ($$010551213<<3)|0)) + 4|0);
       $726 = +HEAPF32[$725>>2];
       $727 = (~~(($726)));
       HEAP32[$618>>2] = $727;
       HEAP32[$619>>2] = 36;
       HEAP32[$620>>2] = 24;
       ;HEAP32[$$byval_copy100>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[$6+12>>2]|0;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
       $728 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
       $729 = ($728|0)==(0);
       do {
        if (!($729)) {
         $730 = (260484 + ($$010551213<<2)|0);
         $731 = HEAP32[$730>>2]|0;
         $732 = ($731|0)==(0);
         if ($732) {
          break;
         }
         $733 = HEAP32[$672>>2]|0;
         $734 = (($733) + -24)|0;
         $735 = (+($734|0));
         HEAPF32[$722>>2] = $735;
        }
       } while(0);
       $736 = (($$010551213) + 1)|0;
       $exitcond1247 = ($736|0)==(16);
       if ($exitcond1247) {
        $$010561214 = 0;
        break;
       } else {
        $$010551213 = $736;
       }
      }
      while(1) {
       $737 = (261868 + ($$010561214<<4)|0);
       ;HEAP32[$$byval_copy100>>2]=HEAP32[$737>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$737+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[$737+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[$737+12>>2]|0;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
       $738 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
       $739 = ($738|0)==(0);
       do {
        if (!($739)) {
         $740 = (262092 + ($$010561214<<2)|0);
         $741 = HEAP32[$740>>2]|0;
         $742 = ($741|0)==(0);
         if ($742) {
          break;
         }
         $743 = (334712 + ($$010561214<<2)|0);
         $744 = HEAP32[$743>>2]|0;
         $745 = ($744|0)!=(0);
         $746 = HEAP32[$672>>2]|0;
         $$sink82$v = $745 ? 18 : -18;
         $$sink82 = (($$sink82$v) + ($746))|0;
         HEAP32[$737>>2] = $$sink82;
        }
       } while(0);
       $747 = (($$010561214) + 1)|0;
       $exitcond1248 = ($747|0)==(14);
       if ($exitcond1248) {
        $$010571215 = 0;
        break;
       } else {
        $$010561214 = $747;
       }
      }
      while(1) {
       $748 = (258516 + ($$010571215<<4)|0);
       ;HEAP32[$$byval_copy100>>2]=HEAP32[$748>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$748+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[$748+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[$748+12>>2]|0;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
       $749 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
       $750 = ($749|0)==(0);
       do {
        if (!($750)) {
         $751 = (258676 + ($$010571215<<2)|0);
         $752 = HEAP32[$751>>2]|0;
         $753 = ($752|0)==(0);
         if ($753) {
          break;
         }
         $754 = HEAP32[$672>>2]|0;
         $755 = (($754) + -5)|0;
         HEAP32[$748>>2] = $755;
        }
       } while(0);
       $756 = (($$010571215) + 1)|0;
       $exitcond1249 = ($756|0)==(10);
       if ($exitcond1249) {
        break;
       } else {
        $$010571215 = $756;
       }
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[258796>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[258796+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[258796+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[258796+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $757 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $758 = ($757|0)==(0);
      $759 = HEAP32[64739]|0;
      $760 = ($759|0)==(0);
      $or$cond1278 = $758 | $760;
      if (!($or$cond1278)) {
       $761 = HEAP32[$672>>2]|0;
       HEAP32[64699] = $761;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(258812)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(258812)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(258812)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(258812)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $762 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $763 = ($762|0)==(0);
      $764 = HEAP32[(258960)>>2]|0;
      $765 = ($764|0)==(0);
      $or$cond1282 = $763 | $765;
      if (!($or$cond1282)) {
       $2246 = HEAP32[$672>>2]|0;
       HEAP32[(258812)>>2] = $2246;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(258828)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(258828)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(258828)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(258828)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2247 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2248 = ($2247|0)==(0);
      $2249 = HEAP32[(258964)>>2]|0;
      $2250 = ($2249|0)==(0);
      $or$cond1284 = $2248 | $2250;
      if (!($or$cond1284)) {
       $2251 = HEAP32[$672>>2]|0;
       HEAP32[(258828)>>2] = $2251;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(258844)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(258844)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(258844)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(258844)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2252 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2253 = ($2252|0)==(0);
      $2254 = HEAP32[(258968)>>2]|0;
      $2255 = ($2254|0)==(0);
      $or$cond1286 = $2253 | $2255;
      if (!($or$cond1286)) {
       $2256 = HEAP32[$672>>2]|0;
       HEAP32[(258844)>>2] = $2256;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(258860)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(258860)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(258860)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(258860)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2257 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2258 = ($2257|0)==(0);
      $2259 = HEAP32[(258972)>>2]|0;
      $2260 = ($2259|0)==(0);
      $or$cond1288 = $2258 | $2260;
      if (!($or$cond1288)) {
       $2261 = HEAP32[$672>>2]|0;
       HEAP32[(258860)>>2] = $2261;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(258876)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(258876)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(258876)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(258876)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2262 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2263 = ($2262|0)==(0);
      $2264 = HEAP32[(258976)>>2]|0;
      $2265 = ($2264|0)==(0);
      $or$cond1290 = $2263 | $2265;
      if (!($or$cond1290)) {
       $2266 = HEAP32[$672>>2]|0;
       HEAP32[(258876)>>2] = $2266;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(258892)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(258892)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(258892)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(258892)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2267 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2268 = ($2267|0)==(0);
      $2269 = HEAP32[(258980)>>2]|0;
      $2270 = ($2269|0)==(0);
      $or$cond1292 = $2268 | $2270;
      if (!($or$cond1292)) {
       $2271 = HEAP32[$672>>2]|0;
       HEAP32[(258892)>>2] = $2271;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(258908)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(258908)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(258908)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(258908)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2272 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2273 = ($2272|0)==(0);
      $2274 = HEAP32[(258984)>>2]|0;
      $2275 = ($2274|0)==(0);
      $or$cond1294 = $2273 | $2275;
      if (!($or$cond1294)) {
       $2276 = HEAP32[$672>>2]|0;
       HEAP32[(258908)>>2] = $2276;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(258924)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(258924)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(258924)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(258924)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2277 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2278 = ($2277|0)==(0);
      $2279 = HEAP32[(258988)>>2]|0;
      $2280 = ($2279|0)==(0);
      $or$cond1296 = $2278 | $2280;
      if (!($or$cond1296)) {
       $2281 = HEAP32[$672>>2]|0;
       HEAP32[(258924)>>2] = $2281;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(258940)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(258940)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(258940)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(258940)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2282 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2283 = ($2282|0)==(0);
      $2284 = HEAP32[(258992)>>2]|0;
      $2285 = ($2284|0)==(0);
      $or$cond1298 = $2283 | $2285;
      if (!($or$cond1298)) {
       $2286 = HEAP32[$672>>2]|0;
       HEAP32[(258940)>>2] = $2286;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[259036>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[259036+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[259036+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[259036+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $766 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $767 = ($766|0)==(0);
      $768 = HEAP32[64749]|0;
      $769 = ($768|0)==(0);
      $or$cond1280 = $767 | $769;
      if (!($or$cond1280)) {
       $770 = HEAP32[$672>>2]|0;
       HEAP32[64759] = $770;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(259052)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(259052)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(259052)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(259052)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $771 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $772 = ($771|0)==(0);
      $773 = HEAP32[(259000)>>2]|0;
      $774 = ($773|0)==(0);
      $or$cond1300 = $772 | $774;
      if (!($or$cond1300)) {
       $2287 = HEAP32[$672>>2]|0;
       HEAP32[(259052)>>2] = $2287;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(259068)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(259068)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(259068)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(259068)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2288 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2289 = ($2288|0)==(0);
      $2290 = HEAP32[(259004)>>2]|0;
      $2291 = ($2290|0)==(0);
      $or$cond1302 = $2289 | $2291;
      if (!($or$cond1302)) {
       $2292 = HEAP32[$672>>2]|0;
       HEAP32[(259068)>>2] = $2292;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(259084)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(259084)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(259084)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(259084)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2293 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2294 = ($2293|0)==(0);
      $2295 = HEAP32[(259008)>>2]|0;
      $2296 = ($2295|0)==(0);
      $or$cond1304 = $2294 | $2296;
      if (!($or$cond1304)) {
       $2297 = HEAP32[$672>>2]|0;
       HEAP32[(259084)>>2] = $2297;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(259100)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(259100)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(259100)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(259100)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2298 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2299 = ($2298|0)==(0);
      $2300 = HEAP32[(259012)>>2]|0;
      $2301 = ($2300|0)==(0);
      $or$cond1306 = $2299 | $2301;
      if (!($or$cond1306)) {
       $2302 = HEAP32[$672>>2]|0;
       HEAP32[(259100)>>2] = $2302;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(259116)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(259116)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(259116)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(259116)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2303 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2304 = ($2303|0)==(0);
      $2305 = HEAP32[(259016)>>2]|0;
      $2306 = ($2305|0)==(0);
      $or$cond1308 = $2304 | $2306;
      if (!($or$cond1308)) {
       $2307 = HEAP32[$672>>2]|0;
       HEAP32[(259116)>>2] = $2307;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(259132)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(259132)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(259132)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(259132)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2308 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2309 = ($2308|0)==(0);
      $2310 = HEAP32[(259020)>>2]|0;
      $2311 = ($2310|0)==(0);
      $or$cond1310 = $2309 | $2311;
      if (!($or$cond1310)) {
       $2312 = HEAP32[$672>>2]|0;
       HEAP32[(259132)>>2] = $2312;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(259148)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(259148)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(259148)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(259148)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2313 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2314 = ($2313|0)==(0);
      $2315 = HEAP32[(259024)>>2]|0;
      $2316 = ($2315|0)==(0);
      $or$cond1312 = $2314 | $2316;
      if (!($or$cond1312)) {
       $2317 = HEAP32[$672>>2]|0;
       HEAP32[(259148)>>2] = $2317;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(259164)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(259164)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(259164)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(259164)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2318 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2319 = ($2318|0)==(0);
      $2320 = HEAP32[(259028)>>2]|0;
      $2321 = ($2320|0)==(0);
      $or$cond1314 = $2319 | $2321;
      if (!($or$cond1314)) {
       $2322 = HEAP32[$672>>2]|0;
       HEAP32[(259164)>>2] = $2322;
      }
      ;HEAP32[$$byval_copy100>>2]=HEAP32[(259180)>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[(259180)+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[(259180)+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[(259180)+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$672>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$672+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$672+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$672+12>>2]|0;
      $2323 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $2324 = ($2323|0)==(0);
      $2325 = HEAP32[(259032)>>2]|0;
      $2326 = ($2325|0)==(0);
      $or$cond1316 = $2324 | $2326;
      if (!($or$cond1316)) {
       $2327 = HEAP32[$672>>2]|0;
       HEAP32[(259180)>>2] = $2327;
      }
      $2328 = HEAP32[$672>>2]|0;
      $2329 = (((258196 + ($$010541218<<4)|0)) + 8|0);
      $2330 = HEAP32[$2329>>2]|0;
      $2331 = (-30 - ($2330))|0;
      $2332 = ($2328|0)>($2331|0);
      if ($2332) {
       break;
      }
      HEAP32[$668>>2] = 0;
     }
    } while(0);
    $775 = (($$010541218) + 1)|0;
    $exitcond1271 = ($775|0)==(16);
    if ($exitcond1271) {
     $$010601212 = 0;
     break;
    } else {
     $$010541218 = $775;
    }
   }
   while(1) {
    $776 = (259396 + ($$010601212<<4)|0);
    $777 = HEAP32[$776>>2]|0;
    $778 = (((259396 + ($$010601212<<4)|0)) + 8|0);
    $779 = HEAP32[$778>>2]|0;
    $780 = (0 - ($779))|0;
    $781 = ($777|0)>($780|0);
    if (!($781)) {
     $782 = (259652 + ($$010601212<<2)|0);
     HEAP32[$782>>2] = 0;
    }
    $783 = (259780 + ($$010601212<<4)|0);
    $784 = HEAP32[$783>>2]|0;
    $785 = (((259780 + ($$010601212<<4)|0)) + 8|0);
    $786 = HEAP32[$785>>2]|0;
    $787 = (0 - ($786))|0;
    $788 = ($784|0)>($787|0);
    if (!($788)) {
     $789 = (260036 + ($$010601212<<2)|0);
     HEAP32[$789>>2] = 0;
    }
    $790 = (260164 + ($$010601212<<4)|0);
    $791 = HEAP32[$790>>2]|0;
    $792 = (((260164 + ($$010601212<<4)|0)) + 8|0);
    $793 = HEAP32[$792>>2]|0;
    $794 = (0 - ($793))|0;
    $795 = ($791|0)>($794|0);
    if (!($795)) {
     $796 = (260420 + ($$010601212<<2)|0);
     HEAP32[$796>>2] = 0;
    }
    $797 = (260612 + ($$010601212<<3)|0);
    $798 = +HEAPF32[$797>>2];
    $799 = (+($794|0));
    $800 = !($798 <= $799);
    if (!($800)) {
     $801 = (260484 + ($$010601212<<2)|0);
     HEAP32[$801>>2] = 0;
    }
    $802 = (259652 + ($$010601212<<2)|0);
    $803 = HEAP32[$802>>2]|0;
    $804 = ($803|0)==(0);
    if ($804) {
     HEAP32[$776>>2] = -500;
    }
    $805 = (260036 + ($$010601212<<2)|0);
    $806 = HEAP32[$805>>2]|0;
    $807 = ($806|0)==(0);
    if ($807) {
     HEAP32[$783>>2] = -500;
    }
    $808 = (260420 + ($$010601212<<2)|0);
    $809 = HEAP32[$808>>2]|0;
    $810 = ($809|0)==(0);
    if ($810) {
     HEAP32[$790>>2] = -500;
    }
    ;HEAP32[$$byval_copy100>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261764+12>>2]|0;
    ;HEAP32[$$byval_copy101>>2]=HEAP32[$776>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$776+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$776+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$776+12>>2]|0;
    $811 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
    $812 = ($811|0)!=(0);
    $813 = HEAP32[83633]|0;
    $814 = ($813|0)!=(1);
    $or$cond87 = $812 & $814;
    do {
     if ($or$cond87) {
      $815 = (259716 + ($$010601212<<2)|0);
      $816 = HEAP32[$815>>2]|0;
      $817 = ($816|0)==(0);
      if (!($817)) {
       break;
      }
      $818 = ($813|0)==(2);
      if ($818) {
       HEAP32[$815>>2] = 1;
       $820 = (334648 + ($$010601212<<2)|0);
       HEAP32[$820>>2] = 8;
       $821 = HEAP32[40589]|0;
       $822 = (26680 + ($821<<2)|0);
       HEAP32[$822>>2] = 1;
       $823 = (($821) + 1)|0;
       HEAP32[40589] = $823;
       $824 = HEAP32[83692]|0;
       $825 = (($824) + 1)|0;
       HEAP32[83692] = $825;
       $826 = HEAP32[83650]|0;
       $827 = (($826) + 1)|0;
       HEAP32[83650] = $827;
       $828 = HEAP32[6668]|0;
       $829 = (($828) + 100)|0;
       HEAP32[6668] = $829;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[26616>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[26616+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[26616+8>>2]|0;
       _PlaySound($$byval_copy101);
       $830 = HEAP32[$776>>2]|0;
       $831 = (+($830|0));
       $832 = (((259396 + ($$010601212<<4)|0)) + 4|0);
       $833 = HEAP32[$832>>2]|0;
       $834 = (+($833|0));
       $$sroa$0689$0$$sroa_idx = (260740 + (($$010601212*40)|0)|0);
       HEAPF32[$$sroa$0689$0$$sroa_idx>>2] = $831;
       $$sroa$2690$0$$sroa_idx691 = (((260740 + (($$010601212*40)|0)|0)) + 4|0);
       HEAPF32[$$sroa$2690$0$$sroa_idx691>>2] = $834;
       $$sroa$0686$0$$sroa_idx = (((260740 + (($$010601212*40)|0)|0)) + 8|0);
       HEAPF32[$$sroa$0686$0$$sroa_idx>>2] = 0.0;
       $$sroa$2687$0$$sroa_idx688 = (((260740 + (($$010601212*40)|0)|0)) + 12|0);
       HEAPF32[$$sroa$2687$0$$sroa_idx688>>2] = 0.0;
       $835 = (_GetRandomValue(0,10)|0);
       $836 = (+($835|0));
       $837 = $836 / 30.0;
       $838 = (((260740 + (($$010601212*40)|0)|0)) + 20|0);
       HEAPF32[$838>>2] = $837;
       $839 = (((260740 + (($$010601212*40)|0)|0)) + 16|0);
       HEAPF32[$839>>2] = 0.0;
       $840 = (((260740 + (($$010601212*40)|0)|0)) + 28|0);
       HEAPF32[$840>>2] = 1.0;
       $841 = (((260740 + (($$010601212*40)|0)|0)) + 36|0);
       HEAP32[$841>>2] = 1;
       $842 = HEAP32[$776>>2]|0;
       $843 = (+($842|0));
       $844 = HEAP32[$832>>2]|0;
       $845 = (+($844|0));
       $$sroa$0683$0$$sroa_idx = (261380 + (($$010601212*24)|0)|0);
       HEAPF32[$$sroa$0683$0$$sroa_idx>>2] = $843;
       $$sroa$2684$0$$sroa_idx685 = (((261380 + (($$010601212*24)|0)|0)) + 4|0);
       HEAPF32[$$sroa$2684$0$$sroa_idx685>>2] = $845;
       $846 = (((261380 + (($$010601212*24)|0)|0)) + 16|0);
       HEAPF32[$846>>2] = 1.0;
       $847 = (((261380 + (($$010601212*24)|0)|0)) + 12|0);
       HEAPF32[$847>>2] = 1.0;
       $848 = (((261380 + (($$010601212*24)|0)|0)) + 20|0);
       HEAP32[$848>>2] = 100;
       $849 = (((261380 + (($$010601212*24)|0)|0)) + 8|0);
       HEAP32[$849>>2] = 1;
       break;
      } else {
       HEAP32[83647] = 8;
       HEAP32[40576] = 2;
       $819 = (334648 + ($$010601212<<2)|0);
       HEAP32[$819>>2] = 8;
       HEAP32[40573] = 0;
       HEAP32[40564] = 0;
       HEAP32[6798] = 1;
       break;
      }
     }
    } while(0);
    ;HEAP32[$$byval_copy100>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261764+12>>2]|0;
    ;HEAP32[$$byval_copy101>>2]=HEAP32[$783>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$783+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$783+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$783+12>>2]|0;
    $850 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
    $851 = ($850|0)!=(0);
    $852 = HEAP32[83633]|0;
    $853 = ($852|0)!=(1);
    $or$cond89 = $851 & $853;
    do {
     if ($or$cond89) {
      $854 = (260100 + ($$010601212<<2)|0);
      $855 = HEAP32[$854>>2]|0;
      $856 = ($855|0)==(0);
      if (!($856)) {
       break;
      }
      $857 = ($852|0)==(2);
      if ($857) {
       HEAP32[$854>>2] = 1;
       $859 = (334648 + ($$010601212<<2)|0);
       HEAP32[$859>>2] = 8;
       $860 = HEAP32[40589]|0;
       $861 = (26680 + ($860<<2)|0);
       HEAP32[$861>>2] = 2;
       $862 = (($860) + 1)|0;
       HEAP32[40589] = $862;
       $863 = HEAP32[6668]|0;
       $864 = (($863) + 100)|0;
       HEAP32[6668] = $864;
       $865 = HEAP32[83693]|0;
       $866 = (($865) + 1)|0;
       HEAP32[83693] = $866;
       $867 = HEAP32[83650]|0;
       $868 = (($867) + 1)|0;
       HEAP32[83650] = $868;
       $869 = HEAP32[$783>>2]|0;
       $870 = (+($869|0));
       $871 = (((259780 + ($$010601212<<4)|0)) + 4|0);
       $872 = HEAP32[$871>>2]|0;
       $873 = (+($872|0));
       $$sroa$0680$0$$sroa_idx = (260740 + (($$010601212*40)|0)|0);
       HEAPF32[$$sroa$0680$0$$sroa_idx>>2] = $870;
       $$sroa$2681$0$$sroa_idx682 = (((260740 + (($$010601212*40)|0)|0)) + 4|0);
       HEAPF32[$$sroa$2681$0$$sroa_idx682>>2] = $873;
       $$sroa$0677$0$$sroa_idx = (((260740 + (($$010601212*40)|0)|0)) + 8|0);
       HEAPF32[$$sroa$0677$0$$sroa_idx>>2] = 0.0;
       $$sroa$2678$0$$sroa_idx679 = (((260740 + (($$010601212*40)|0)|0)) + 12|0);
       HEAPF32[$$sroa$2678$0$$sroa_idx679>>2] = 0.0;
       $874 = (_GetRandomValue(5,10)|0);
       $875 = (+($874|0));
       $876 = $875 / 30.0;
       $877 = (((260740 + (($$010601212*40)|0)|0)) + 20|0);
       HEAPF32[$877>>2] = $876;
       $878 = (((260740 + (($$010601212*40)|0)|0)) + 16|0);
       HEAPF32[$878>>2] = 0.0;
       $879 = (((260740 + (($$010601212*40)|0)|0)) + 28|0);
       HEAPF32[$879>>2] = 1.0;
       $880 = (((260740 + (($$010601212*40)|0)|0)) + 36|0);
       HEAP32[$880>>2] = 1;
       $881 = HEAP32[$783>>2]|0;
       $882 = (+($881|0));
       $883 = HEAP32[$871>>2]|0;
       $884 = (+($883|0));
       $$sroa$0674$0$$sroa_idx = (261380 + (($$010601212*24)|0)|0);
       HEAPF32[$$sroa$0674$0$$sroa_idx>>2] = $882;
       $$sroa$2675$0$$sroa_idx676 = (((261380 + (($$010601212*24)|0)|0)) + 4|0);
       HEAPF32[$$sroa$2675$0$$sroa_idx676>>2] = $884;
       $885 = (((261380 + (($$010601212*24)|0)|0)) + 16|0);
       HEAPF32[$885>>2] = 1.0;
       $886 = (((261380 + (($$010601212*24)|0)|0)) + 12|0);
       HEAPF32[$886>>2] = 1.0;
       $887 = (((261380 + (($$010601212*24)|0)|0)) + 20|0);
       HEAP32[$887>>2] = 100;
       $888 = (((261380 + (($$010601212*24)|0)|0)) + 8|0);
       HEAP32[$888>>2] = 1;
       break;
      } else {
       HEAP32[83647] = 8;
       HEAP32[40576] = 2;
       HEAP32[40573] = 0;
       $858 = (334648 + ($$010601212<<2)|0);
       HEAP32[$858>>2] = 8;
       HEAP32[40564] = 0;
       HEAP32[6798] = 2;
       break;
      }
     }
    } while(0);
    ;HEAP32[$$byval_copy100>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261764+12>>2]|0;
    ;HEAP32[$$byval_copy101>>2]=HEAP32[$790>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$790+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$790+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$790+12>>2]|0;
    $889 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
    $890 = ($889|0)!=(0);
    $891 = HEAP32[83633]|0;
    $892 = ($891|0)!=(1);
    $or$cond91 = $890 & $892;
    do {
     if ($or$cond91) {
      $893 = (260548 + ($$010601212<<2)|0);
      $894 = HEAP32[$893>>2]|0;
      $895 = ($894|0)==(0);
      if (!($895)) {
       break;
      }
      $896 = ($891|0)==(2);
      if ($896) {
       HEAP32[$893>>2] = 1;
       $898 = (334648 + ($$010601212<<2)|0);
       HEAP32[$898>>2] = 8;
       $899 = HEAP32[40589]|0;
       $900 = (26680 + ($899<<2)|0);
       HEAP32[$900>>2] = 3;
       $901 = (($899) + 1)|0;
       HEAP32[40589] = $901;
       $902 = HEAP32[6668]|0;
       $903 = (($902) + 100)|0;
       HEAP32[6668] = $903;
       $904 = HEAP32[83694]|0;
       $905 = (($904) + 1)|0;
       HEAP32[83694] = $905;
       $906 = HEAP32[83650]|0;
       $907 = (($906) + 1)|0;
       HEAP32[83650] = $907;
       $908 = HEAP32[$790>>2]|0;
       $909 = (+($908|0));
       $910 = (((260164 + ($$010601212<<4)|0)) + 4|0);
       $911 = HEAP32[$910>>2]|0;
       $912 = (+($911|0));
       $$sroa$0671$0$$sroa_idx = (260740 + (($$010601212*40)|0)|0);
       HEAPF32[$$sroa$0671$0$$sroa_idx>>2] = $909;
       $$sroa$2672$0$$sroa_idx673 = (((260740 + (($$010601212*40)|0)|0)) + 4|0);
       HEAPF32[$$sroa$2672$0$$sroa_idx673>>2] = $912;
       $$sroa$0668$0$$sroa_idx = (((260740 + (($$010601212*40)|0)|0)) + 8|0);
       HEAPF32[$$sroa$0668$0$$sroa_idx>>2] = $909;
       $$sroa$2669$0$$sroa_idx670 = (((260740 + (($$010601212*40)|0)|0)) + 12|0);
       HEAPF32[$$sroa$2669$0$$sroa_idx670>>2] = $912;
       $913 = (_GetRandomValue(5,10)|0);
       $914 = (+($913|0));
       $915 = $914 / 30.0;
       $916 = (((260740 + (($$010601212*40)|0)|0)) + 20|0);
       HEAPF32[$916>>2] = $915;
       $917 = (((260740 + (($$010601212*40)|0)|0)) + 16|0);
       HEAPF32[$917>>2] = 0.0;
       $918 = (((260740 + (($$010601212*40)|0)|0)) + 28|0);
       HEAPF32[$918>>2] = 1.0;
       $919 = (((260740 + (($$010601212*40)|0)|0)) + 36|0);
       HEAP32[$919>>2] = 1;
       $920 = HEAP32[$790>>2]|0;
       $921 = (+($920|0));
       $922 = HEAP32[$910>>2]|0;
       $923 = (+($922|0));
       $$sroa$0665$0$$sroa_idx = (261380 + (($$010601212*24)|0)|0);
       HEAPF32[$$sroa$0665$0$$sroa_idx>>2] = $921;
       $$sroa$2666$0$$sroa_idx667 = (((261380 + (($$010601212*24)|0)|0)) + 4|0);
       HEAPF32[$$sroa$2666$0$$sroa_idx667>>2] = $923;
       $924 = (((261380 + (($$010601212*24)|0)|0)) + 16|0);
       HEAPF32[$924>>2] = 1.0;
       $925 = (((261380 + (($$010601212*24)|0)|0)) + 12|0);
       HEAPF32[$925>>2] = 1.0;
       $926 = (((261380 + (($$010601212*24)|0)|0)) + 20|0);
       HEAP32[$926>>2] = 100;
       $927 = (((261380 + (($$010601212*24)|0)|0)) + 8|0);
       HEAP32[$927>>2] = 1;
       break;
      } else {
       HEAP32[83647] = 8;
       $897 = (334648 + ($$010601212<<2)|0);
       HEAP32[$897>>2] = 8;
       HEAP32[40576] = 2;
       HEAP32[40573] = 0;
       HEAP32[40564] = 0;
       HEAP32[6798] = 3;
       break;
      }
     }
    } while(0);
    $928 = (259716 + ($$010601212<<2)|0);
    $929 = HEAP32[$928>>2]|0;
    $930 = ($929|0)==(0);
    if (!($930)) {
     $931 = (((259396 + ($$010601212<<4)|0)) + 4|0);
     $932 = HEAP32[$931>>2]|0;
     $933 = (((259396 + ($$010601212<<4)|0)) + 12|0);
     $934 = HEAP32[$933>>2]|0;
     $935 = (($934) + ($932))|0;
     $936 = (_GetScreenHeight()|0);
     $937 = ($935|0)>($936|0);
     if ($937) {
      HEAP32[$802>>2] = 0;
      HEAP32[$928>>2] = 0;
     }
     $938 = HEAP32[$776>>2]|0;
     $939 = (($938) + 2)|0;
     HEAP32[$776>>2] = $939;
     $940 = (334648 + ($$010601212<<2)|0);
     $941 = HEAP32[$940>>2]|0;
     $942 = (($941) + -1)|0;
     HEAP32[$940>>2] = $942;
     $943 = (+($942|0));
     $944 = $943 * 60.0;
     $945 = $944 / 60.0;
     $946 = HEAP32[$931>>2]|0;
     $947 = (+($946|0));
     $948 = $947 - $945;
     $949 = (~~(($948)));
     HEAP32[$931>>2] = $949;
    }
    $950 = (260100 + ($$010601212<<2)|0);
    $951 = HEAP32[$950>>2]|0;
    $952 = ($951|0)==(0);
    if (!($952)) {
     $953 = (((259780 + ($$010601212<<4)|0)) + 4|0);
     $954 = HEAP32[$953>>2]|0;
     $955 = (_GetScreenHeight()|0);
     $956 = ($954|0)>($955|0);
     if ($956) {
      HEAP32[$805>>2] = 0;
      HEAP32[$950>>2] = 0;
     }
     $957 = HEAP32[$783>>2]|0;
     $958 = (($957) + 2)|0;
     HEAP32[$783>>2] = $958;
     $959 = (334648 + ($$010601212<<2)|0);
     $960 = HEAP32[$959>>2]|0;
     $961 = (($960) + -1)|0;
     HEAP32[$959>>2] = $961;
     $962 = (+($961|0));
     $963 = $962 * 60.0;
     $964 = $963 / 60.0;
     $965 = HEAP32[$953>>2]|0;
     $966 = (+($965|0));
     $967 = $966 - $964;
     $968 = (~~(($967)));
     HEAP32[$953>>2] = $968;
    }
    $969 = (260548 + ($$010601212<<2)|0);
    $970 = HEAP32[$969>>2]|0;
    $971 = ($970|0)==(0);
    if (!($971)) {
     $972 = (((260164 + ($$010601212<<4)|0)) + 4|0);
     $973 = HEAP32[$972>>2]|0;
     $974 = (_GetScreenHeight()|0);
     $975 = ($973|0)>($974|0);
     if ($975) {
      HEAP32[$808>>2] = 0;
      HEAP32[$969>>2] = 0;
     }
     $976 = HEAP32[$790>>2]|0;
     $977 = (($976) + 2)|0;
     HEAP32[$790>>2] = $977;
     $978 = (334648 + ($$010601212<<2)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = (($979) + -1)|0;
     HEAP32[$978>>2] = $980;
     $981 = HEAP32[$972>>2]|0;
     $982 = (($981) - ($980))|0;
     HEAP32[$972>>2] = $982;
    }
    $983 = (($$010601212) + 1)|0;
    $exitcond1246 = ($983|0)==(16);
    if ($exitcond1246) {
     $$010611209 = 0;
     break;
    } else {
     $$010601212 = $983;
    }
   }
   while(1) {
    $986 = (262204 + (($$010611209*5140)|0)|0);
    $987 = (261868 + ($$010611209<<4)|0);
    $988 = HEAP32[$987>>2]|0;
    $989 = (+($988|0));
    $990 = (((261868 + ($$010611209<<4)|0)) + 4|0);
    $991 = HEAP32[$990>>2]|0;
    $992 = (+($991|0));
    HEAPF32[$986>>2] = $989;
    $$sroa$2627$0$$sroa_idx628 = (((262204 + (($$010611209*5140)|0)|0)) + 4|0);
    HEAPF32[$$sroa$2627$0$$sroa_idx628>>2] = $992;
    $993 = (((261868 + ($$010611209<<4)|0)) + 8|0);
    $994 = HEAP32[$993>>2]|0;
    $995 = (0 - ($994))|0;
    $996 = ($988|0)>($995|0);
    if (!($996)) {
     $997 = (262092 + ($$010611209<<2)|0);
     HEAP32[$997>>2] = 0;
    }
    ;HEAP32[$$byval_copy100>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261764+12>>2]|0;
    ;HEAP32[$$byval_copy101>>2]=HEAP32[$987>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$987+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$987+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$987+12>>2]|0;
    $998 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
    $999 = ($998|0)==(0);
    do {
     if (!($999)) {
      $1000 = (262092 + ($$010611209<<2)|0);
      $1001 = HEAP32[$1000>>2]|0;
      $1002 = ($1001|0)==(0);
      if ($1002) {
       break;
      }
      $1003 = HEAP32[$987>>2]|0;
      $1004 = (+($1003|0));
      $1005 = HEAP32[$990>>2]|0;
      $1006 = (+($1005|0));
      $$sroa$0623$0$$sroa_idx = (334164 + (($$010611209*24)|0)|0);
      HEAPF32[$$sroa$0623$0$$sroa_idx>>2] = $1004;
      $$sroa$2624$0$$sroa_idx625 = (((334164 + (($$010611209*24)|0)|0)) + 4|0);
      HEAPF32[$$sroa$2624$0$$sroa_idx625>>2] = $1006;
      $1007 = (((334164 + (($$010611209*24)|0)|0)) + 16|0);
      HEAPF32[$1007>>2] = 1.0;
      $1008 = (((334164 + (($$010611209*24)|0)|0)) + 12|0);
      HEAPF32[$1008>>2] = 1.0;
      $1009 = (((334164 + (($$010611209*24)|0)|0)) + 8|0);
      HEAP32[$1009>>2] = 1;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[26580>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[26580+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[26580+8>>2]|0;
      _PlaySound($$byval_copy101);
      $1010 = (262148 + ($$010611209<<2)|0);
      $1011 = HEAP32[$1010>>2]|0;
      switch ($1011|0) {
      case 0:  {
       $$sink1103 = 1;
       label = 290;
       break;
      }
      case 1:  {
       $$sink1103 = 2;
       label = 290;
       break;
      }
      case 2:  {
       $$sink1103 = 3;
       label = 290;
       break;
      }
      case 3:  {
       $$sink1103 = 4;
       label = 290;
       break;
      }
      default: {
      }
      }
      if ((label|0) == 290) {
       label = 0;
       $1012 = HEAP32[6801]|0;
       $1013 = (($1012) + ($$sink1103))|0;
       HEAP32[6801] = $1013;
       $1014 = (((334164 + (($$010611209*24)|0)|0)) + 20|0);
       HEAP32[$1014>>2] = $$sink1103;
      }
      HEAP32[$1000>>2] = 0;
      $1015 = (((262204 + (($$010611209*5140)|0)|0)) + 8|0);
      HEAP32[$1015>>2] = 1;
      $$010621208 = 0;
      while(1) {
       $1016 = ((((262204 + (($$010611209*5140)|0)|0)) + 20|0) + (($$010621208*40)|0)|0);
       $1017 = ((((((262204 + (($$010611209*5140)|0)|0)) + 20|0) + (($$010621208*40)|0)|0)) + 36|0);
       HEAP32[$1017>>2] = 1;
       $1018 = HEAP32[$986>>2]|0;
       $1019 = HEAP32[$$sroa$2627$0$$sroa_idx628>>2]|0;
       HEAP32[$1016>>2] = $1018;
       $$sroa$2611$0$$sroa_idx612 = ((((((262204 + (($$010611209*5140)|0)|0)) + 20|0) + (($$010621208*40)|0)|0)) + 4|0);
       HEAP32[$$sroa$2611$0$$sroa_idx612>>2] = $1019;
       $1020 = (_GetRandomValue(-400,400)|0);
       $1021 = (+($1020|0));
       $1022 = $1021 / 100.0;
       $1023 = (_GetRandomValue(-400,400)|0);
       $1024 = (+($1023|0));
       $1025 = $1024 / 100.0;
       $$sroa$0607$0$$sroa_idx = ((((((262204 + (($$010611209*5140)|0)|0)) + 20|0) + (($$010621208*40)|0)|0)) + 8|0);
       HEAPF32[$$sroa$0607$0$$sroa_idx>>2] = $1022;
       $$sroa$2608$0$$sroa_idx609 = ((((((262204 + (($$010611209*5140)|0)|0)) + 20|0) + (($$010621208*40)|0)|0)) + 12|0);
       HEAPF32[$$sroa$2608$0$$sroa_idx609>>2] = $1025;
       $1026 = (_GetRandomValue(4,8)|0);
       $1027 = (+($1026|0));
       $1028 = $1027 / 10.0;
       $1029 = ((((((262204 + (($$010611209*5140)|0)|0)) + 20|0) + (($$010621208*40)|0)|0)) + 20|0);
       HEAPF32[$1029>>2] = $1028;
       $1030 = (_GetRandomValue(-180,180)|0);
       $1031 = (+($1030|0));
       $1032 = ((((((262204 + (($$010611209*5140)|0)|0)) + 20|0) + (($$010621208*40)|0)|0)) + 16|0);
       HEAPF32[$1032>>2] = $1031;
       $1033 = ((((((262204 + (($$010611209*5140)|0)|0)) + 20|0) + (($$010621208*40)|0)|0)) + 28|0);
       HEAPF32[$1033>>2] = 1.0;
       $1034 = (($$010621208) + 1)|0;
       $exitcond1244 = ($1034|0)==(32);
       if ($exitcond1244) {
        break;
       } else {
        $$010621208 = $1034;
       }
      }
     }
    } while(0);
    $1035 = (($$010611209) + 1)|0;
    $exitcond1245 = ($1035|0)==(14);
    if ($exitcond1245) {
     break;
    } else {
     $$010611209 = $1035;
    }
   }
   $984 = HEAP32[40557]|0;
   $985 = (+($984|0));
   $$010631206 = 0;
   while(1) {
    $1038 = (((262204 + (($$010631206*5140)|0)|0)) + 8|0);
    $1039 = HEAP32[$1038>>2]|0;
    $1040 = ($1039|0)==(1);
    if ($1040) {
     $$010641205 = 0;
     while(1) {
      $1041 = ((((((262204 + (($$010631206*5140)|0)|0)) + 20|0) + (($$010641205*40)|0)|0)) + 8|0);
      $1042 = +HEAPF32[$1041>>2];
      $1043 = $1042;
      $1044 = $1043 * 60.0;
      $1045 = $1044 / 60.0;
      $1046 = ((((262204 + (($$010631206*5140)|0)|0)) + 20|0) + (($$010641205*40)|0)|0);
      $1047 = +HEAPF32[$1046>>2];
      $1048 = $1047;
      $1049 = $1048 + $1045;
      $1050 = $1049;
      HEAPF32[$1046>>2] = $1050;
      $1051 = ((((((262204 + (($$010631206*5140)|0)|0)) + 20|0) + (($$010641205*40)|0)|0)) + 12|0);
      $1052 = +HEAPF32[$1051>>2];
      $1053 = ((((((262204 + (($$010631206*5140)|0)|0)) + 20|0) + (($$010641205*40)|0)|0)) + 4|0);
      $1054 = +HEAPF32[$1053>>2];
      $1055 = $1052 + $1054;
      HEAPF32[$1053>>2] = $1055;
      $1056 = ((((((262204 + (($$010631206*5140)|0)|0)) + 20|0) + (($$010641205*40)|0)|0)) + 16|0);
      $1057 = +HEAPF32[$1056>>2];
      $1058 = $1057 + 6.0;
      HEAPF32[$1056>>2] = $1058;
      $1059 = ((((((262204 + (($$010631206*5140)|0)|0)) + 20|0) + (($$010641205*40)|0)|0)) + 28|0);
      $1060 = +HEAPF32[$1059>>2];
      $1061 = $1060 + -0.029999999329447746;
      HEAPF32[$1059>>2] = $1061;
      $1062 = ((((((262204 + (($$010631206*5140)|0)|0)) + 20|0) + (($$010641205*40)|0)|0)) + 20|0);
      $1063 = +HEAPF32[$1062>>2];
      $1064 = $1063;
      $1065 = $1064 + -0.0040000000000000001;
      $1066 = $1065;
      $$inv = $1066 <= 0.0;
      $storemerge = $$inv ? 0.0 : $1066;
      HEAPF32[$1062>>2] = $storemerge;
      $1067 = +HEAPF32[$1059>>2];
      $1068 = !($1067 <= 0.0);
      if (!($1068)) {
       $1069 = ((((((262204 + (($$010631206*5140)|0)|0)) + 20|0) + (($$010641205*40)|0)|0)) + 36|0);
       HEAPF32[$1059>>2] = 0.0;
       HEAP32[$1069>>2] = 0;
       HEAP32[$1038>>2] = 0;
      }
      $1070 = (($$010641205) + 1)|0;
      $exitcond1242 = ($1070|0)==(32);
      if ($exitcond1242) {
       break;
      } else {
       $$010641205 = $1070;
      }
     }
    }
    $1071 = (((334164 + (($$010631206*24)|0)|0)) + 8|0);
    $1072 = HEAP32[$1071>>2]|0;
    $1073 = ($1072|0)==(0);
    do {
     if (!($1073)) {
      $1074 = (((334164 + (($$010631206*24)|0)|0)) + 12|0);
      $1075 = +HEAPF32[$1074>>2];
      $1076 = $1075 + -0.019999999552965164;
      HEAPF32[$1074>>2] = $1076;
      $1077 = (((334164 + (($$010631206*24)|0)|0)) + 16|0);
      $1078 = +HEAPF32[$1077>>2];
      $1079 = $1078 + 0.10000000149011612;
      HEAPF32[$1077>>2] = $1079;
      $1080 = (((334164 + (($$010631206*24)|0)|0)) + 4|0);
      $1081 = +HEAPF32[$1080>>2];
      $1082 = $1081 + -3.0;
      HEAPF32[$1080>>2] = $1082;
      $1083 = (334164 + (($$010631206*24)|0)|0);
      $1084 = +HEAPF32[$1083>>2];
      $1085 = $1084 - $985;
      HEAPF32[$1083>>2] = $1085;
      $1086 = +HEAPF32[$1074>>2];
      $1087 = !($1086 <= 0.0);
      if ($1087) {
       break;
      }
      HEAP32[$1071>>2] = 0;
     }
    } while(0);
    $1088 = (($$010631206) + 1)|0;
    $exitcond1243 = ($1088|0)==(14);
    if ($exitcond1243) {
     break;
    } else {
     $$010631206 = $1088;
    }
   }
   $1036 = HEAP32[40557]|0;
   $1037 = (+($1036|0));
   $$010651204 = 0;
   while(1) {
    $1091 = (((260740 + (($$010651204*40)|0)|0)) + 36|0);
    $1092 = HEAP32[$1091>>2]|0;
    $1093 = ($1092|0)==(0);
    do {
     if (!($1093)) {
      $1094 = (((260740 + (($$010651204*40)|0)|0)) + 28|0);
      $1095 = +HEAPF32[$1094>>2];
      $1096 = $1095 + -0.10000000149011612;
      HEAPF32[$1094>>2] = $1096;
      $1097 = (((260740 + (($$010651204*40)|0)|0)) + 20|0);
      $1098 = +HEAPF32[$1097>>2];
      $1099 = $1098 + 0.10000000149011612;
      HEAPF32[$1097>>2] = $1099;
      $1100 = !($1096 <= 0.0);
      if ($1100) {
       break;
      }
      HEAP32[$1091>>2] = 0;
     }
    } while(0);
    $1101 = (((261380 + (($$010651204*24)|0)|0)) + 8|0);
    $1102 = HEAP32[$1101>>2]|0;
    $1103 = ($1102|0)==(0);
    do {
     if (!($1103)) {
      $1104 = (((261380 + (($$010651204*24)|0)|0)) + 12|0);
      $1105 = +HEAPF32[$1104>>2];
      $1106 = $1105 + -0.019999999552965164;
      HEAPF32[$1104>>2] = $1106;
      $1107 = (((261380 + (($$010651204*24)|0)|0)) + 16|0);
      $1108 = +HEAPF32[$1107>>2];
      $1109 = $1108 + 0.20000000298023224;
      HEAPF32[$1107>>2] = $1109;
      $1110 = (((261380 + (($$010651204*24)|0)|0)) + 4|0);
      $1111 = +HEAPF32[$1110>>2];
      $1112 = $1111 + -4.0;
      HEAPF32[$1110>>2] = $1112;
      $1113 = (261380 + (($$010651204*24)|0)|0);
      $1114 = +HEAPF32[$1113>>2];
      $1115 = $1114 - $1037;
      HEAPF32[$1113>>2] = $1115;
      $1116 = +HEAPF32[$1104>>2];
      $1117 = !($1116 <= 0.0);
      if ($1117) {
       break;
      }
      HEAP32[$1101>>2] = 0;
     }
    } while(0);
    $1118 = (($$010651204) + 1)|0;
    $exitcond1241 = ($1118|0)==(16);
    if ($exitcond1241) {
     break;
    } else {
     $$010651204 = $1118;
    }
   }
   $1089 = HEAP32[(261808)>>2]|0;
   $1090 = ($1089|0)==(0);
   do {
    if (!($1090)) {
     $1119 = +HEAPF32[(261812)>>2];
     $1120 = $1119 + -0.019999999552965164;
     HEAPF32[(261812)>>2] = $1120;
     $1121 = +HEAPF32[(261816)>>2];
     $1122 = $1121 + 0.20000000298023224;
     HEAPF32[(261816)>>2] = $1122;
     $1123 = +HEAPF32[(261804)>>2];
     $1124 = $1123 + -4.0;
     HEAPF32[(261804)>>2] = $1124;
     $1125 = HEAP32[40557]|0;
     $1126 = (+($1125|0));
     $1127 = +HEAPF32[65450];
     $1128 = $1127 - $1126;
     HEAPF32[65450] = $1128;
     $1129 = +HEAPF32[(261812)>>2];
     $1130 = !($1129 <= 0.0);
     if ($1130) {
      break;
     }
     HEAP32[(261808)>>2] = 0;
    }
   } while(0);
   $1131 = HEAP32[(261852)>>2]|0;
   $1132 = ($1131|0)==(0);
   do {
    if (!($1132)) {
     $1133 = +HEAPF32[(261856)>>2];
     $1134 = $1133 + -0.019999999552965164;
     HEAPF32[(261856)>>2] = $1134;
     $1135 = +HEAPF32[(261860)>>2];
     $1136 = $1135 + 0.20000000298023224;
     HEAPF32[(261860)>>2] = $1136;
     $1137 = +HEAPF32[(261848)>>2];
     $1138 = $1137 + -4.0;
     HEAPF32[(261848)>>2] = $1138;
     $1139 = HEAP32[40557]|0;
     $1140 = (+($1139|0));
     $1141 = +HEAPF32[65461];
     $1142 = $1141 - $1140;
     HEAPF32[65461] = $1142;
     $1143 = +HEAPF32[(261856)>>2];
     $1144 = !($1143 <= 0.0);
     if ($1144) {
      break;
     }
     HEAP32[(261852)>>2] = 0;
    }
   } while(0);
   $1145 = HEAP32[83633]|0;
   $1146 = ($1145|0)==(2);
   do {
    if (!($1146)) {
     $1147 = HEAP32[(162712)>>2]|0;
     $1148 = ($1147|0)==(0);
     if (!($1148)) {
      $1149 = HEAP32[(162716)>>2]|0;
      $1150 = (($1149) + 1)|0;
      HEAP32[(162716)>>2] = $1150;
      $$010661203 = 0;
      while(1) {
       $1151 = (((162724 + (($$010661203*40)|0)|0)) + 36|0);
       $1152 = HEAP32[$1151>>2]|0;
       $1153 = ($1152|0)==(0);
       do {
        if ($1153) {
         $1154 = HEAP32[(162716)>>2]|0;
         $1155 = HEAP32[(162720)>>2]|0;
         $1156 = ($1154|0)<($1155|0);
         if ($1156) {
          break;
         }
         HEAP32[$1151>>2] = 1;
         $1157 = (_GetScreenWidth()|0);
         $1158 = (($1157) + 200)|0;
         $1159 = (_GetRandomValue(0,$1158)|0);
         $1160 = (+($1159|0));
         $$sroa$0540$0$$sroa_idx = (162724 + (($$010661203*40)|0)|0);
         HEAPF32[$$sroa$0540$0$$sroa_idx>>2] = $1160;
         $$sroa$2541$0$$sroa_idx542 = (((162724 + (($$010661203*40)|0)|0)) + 4|0);
         HEAPF32[$$sroa$2541$0$$sroa_idx542>>2] = -10.0;
         HEAP32[(162716)>>2] = 0;
         $1161 = (_GetRandomValue(5,20)|0);
         HEAP32[(162720)>>2] = $1161;
        }
       } while(0);
       $1162 = (($$010661203) + 1)|0;
       $exitcond1240 = ($1162|0)==(128);
       if ($exitcond1240) {
        break;
       } else {
        $$010661203 = $1162;
       }
      }
     }
     $1163 = HEAP32[47086]|0;
     $1164 = ($1163|0)==(0);
     if (!($1164)) {
      $1165 = HEAP32[(162716)>>2]|0;
      $1166 = (($1165) + 1)|0;
      HEAP32[(162716)>>2] = $1166;
      $$010671202 = 0;
      while(1) {
       $1167 = (((230036 + (($$010671202*40)|0)|0)) + 36|0);
       $1168 = HEAP32[$1167>>2]|0;
       $1169 = ($1168|0)==(0);
       $1170 = HEAP32[83695]|0;
       $1171 = ($1170|0)<(1);
       $or$cond1105 = $1169 & $1171;
       if ($or$cond1105) {
        HEAP32[$1167>>2] = 1;
        $1172 = (_GetScreenWidth()|0);
        $1173 = (($1172) + 200)|0;
        $1174 = (_GetRandomValue(0,$1173)|0);
        $1175 = (+($1174|0));
        $$sroa$0530$0$$sroa_idx = (230036 + (($$010671202*40)|0)|0);
        HEAPF32[$$sroa$0530$0$$sroa_idx>>2] = $1175;
        $$sroa$2531$0$$sroa_idx532 = (((230036 + (($$010671202*40)|0)|0)) + 4|0);
        HEAPF32[$$sroa$2531$0$$sroa_idx532>>2] = -10.0;
        $1176 = (_GetRandomValue(3,10)|0);
        HEAP32[83695] = $1176;
       }
       $1177 = (($$010671202) + 1)|0;
       $exitcond1239 = ($1177|0)==(128);
       if ($exitcond1239) {
        break;
       } else {
        $$010671202 = $1177;
       }
      }
     }
     $1178 = HEAP32[(188356)>>2]|0;
     $1179 = ($1178|0)==(0);
     if (!($1179)) {
      $1180 = HEAP32[(188360)>>2]|0;
      $1181 = (($1180) + 1)|0;
      HEAP32[(188360)>>2] = $1181;
      $1182 = HEAP32[83696]|0;
      $1183 = (($1182) + 1)|0;
      HEAP32[83696] = $1183;
      $$010681201 = 0;
      while(1) {
       $1184 = (((188368 + (($$010681201*40)|0)|0)) + 36|0);
       $1185 = HEAP32[$1184>>2]|0;
       $1186 = ($1185|0)==(0);
       do {
        if ($1186) {
         $1187 = HEAP32[(188360)>>2]|0;
         $1188 = HEAP32[(188364)>>2]|0;
         $1189 = ($1187|0)<($1188|0);
         if ($1189) {
          break;
         }
         HEAP32[$1184>>2] = 1;
         $1190 = (_GetScreenWidth()|0);
         $1191 = (($1190) + 200)|0;
         $1192 = (_GetRandomValue(0,$1191)|0);
         $1193 = (+($1192|0));
         $$sroa$0517$0$$sroa_idx = (188368 + (($$010681201*40)|0)|0);
         HEAPF32[$$sroa$0517$0$$sroa_idx>>2] = $1193;
         $$sroa$2518$0$$sroa_idx519 = (((188368 + (($$010681201*40)|0)|0)) + 4|0);
         HEAPF32[$$sroa$2518$0$$sroa_idx519>>2] = -10.0;
         HEAP32[(188360)>>2] = 0;
         $1194 = (_GetRandomValue(5,20)|0);
         HEAP32[(188364)>>2] = $1194;
        }
       } while(0);
       $1195 = (((235156 + (($$010681201*40)|0)|0)) + 36|0);
       $1196 = HEAP32[$1195>>2]|0;
       $1197 = ($1196|0)==(0);
       do {
        if ($1197) {
         $1198 = HEAP32[83696]|0;
         $1199 = HEAP32[83697]|0;
         $1200 = ($1198|0)<($1199|0);
         if ($1200) {
          break;
         }
         HEAP32[$1195>>2] = 1;
         $1201 = (_GetScreenWidth()|0);
         $1202 = (($1201) + 200)|0;
         $1203 = (_GetRandomValue(0,$1202)|0);
         $1204 = (+($1203|0));
         $$sroa$0514$0$$sroa_idx = (235156 + (($$010681201*40)|0)|0);
         HEAPF32[$$sroa$0514$0$$sroa_idx>>2] = $1204;
         $$sroa$2515$0$$sroa_idx516 = (((235156 + (($$010681201*40)|0)|0)) + 4|0);
         HEAPF32[$$sroa$2515$0$$sroa_idx516>>2] = -10.0;
         HEAP32[83696] = 0;
         $1205 = (_GetRandomValue(3,10)|0);
         HEAP32[83697] = $1205;
        }
       } while(0);
       $1206 = (($$010681201) + 1)|0;
       $exitcond1238 = ($1206|0)==(128);
       if ($exitcond1238) {
        break;
       } else {
        $$010681201 = $1206;
       }
      }
     }
     $1207 = HEAP32[(193496)>>2]|0;
     $1208 = ($1207|0)==(0);
     if (!($1208)) {
      $1209 = HEAP32[(193500)>>2]|0;
      $1210 = (($1209) + 1)|0;
      HEAP32[(193500)>>2] = $1210;
      $1211 = HEAP32[83698]|0;
      $1212 = (($1211) + 1)|0;
      HEAP32[83698] = $1212;
      $$010691200 = 0;
      while(1) {
       $1213 = (((193508 + (($$010691200*40)|0)|0)) + 36|0);
       $1214 = HEAP32[$1213>>2]|0;
       $1215 = ($1214|0)==(0);
       do {
        if ($1215) {
         $1216 = HEAP32[(193500)>>2]|0;
         $1217 = HEAP32[(193504)>>2]|0;
         $1218 = ($1216|0)<($1217|0);
         if ($1218) {
          break;
         }
         HEAP32[$1213>>2] = 1;
         $1219 = (_GetScreenWidth()|0);
         $1220 = (($1219) + 200)|0;
         $1221 = (_GetRandomValue(0,$1220)|0);
         $1222 = (+($1221|0));
         $$sroa$0501$0$$sroa_idx = (193508 + (($$010691200*40)|0)|0);
         HEAPF32[$$sroa$0501$0$$sroa_idx>>2] = $1222;
         $$sroa$2502$0$$sroa_idx503 = (((193508 + (($$010691200*40)|0)|0)) + 4|0);
         HEAPF32[$$sroa$2502$0$$sroa_idx503>>2] = -10.0;
         HEAP32[(193500)>>2] = 0;
         $1223 = (_GetRandomValue(5,20)|0);
         HEAP32[(193504)>>2] = $1223;
        }
       } while(0);
       $1224 = (((240276 + (($$010691200*40)|0)|0)) + 36|0);
       $1225 = HEAP32[$1224>>2]|0;
       $1226 = ($1225|0)==(0);
       do {
        if ($1226) {
         $1227 = HEAP32[83698]|0;
         $1228 = HEAP32[83699]|0;
         $1229 = ($1227|0)<($1228|0);
         if ($1229) {
          break;
         }
         HEAP32[$1224>>2] = 1;
         $1230 = (_GetScreenWidth()|0);
         $1231 = (($1230) + 200)|0;
         $1232 = (_GetRandomValue(0,$1231)|0);
         $1233 = (+($1232|0));
         $$sroa$0498$0$$sroa_idx = (240276 + (($$010691200*40)|0)|0);
         HEAPF32[$$sroa$0498$0$$sroa_idx>>2] = $1233;
         $$sroa$2499$0$$sroa_idx500 = (((240276 + (($$010691200*40)|0)|0)) + 4|0);
         HEAPF32[$$sroa$2499$0$$sroa_idx500>>2] = -10.0;
         HEAP32[83698] = 0;
         $1234 = (_GetRandomValue(3,10)|0);
         HEAP32[83699] = $1234;
        }
       } while(0);
       $1235 = (($$010691200) + 1)|0;
       $exitcond1237 = ($1235|0)==(128);
       if ($exitcond1237) {
        break;
       } else {
        $$010691200 = $1235;
       }
      }
     }
     $1236 = HEAP32[(198636)>>2]|0;
     $1237 = ($1236|0)==(0);
     if (!($1237)) {
      $1238 = HEAP32[(198640)>>2]|0;
      $1239 = (($1238) + 1)|0;
      HEAP32[(198640)>>2] = $1239;
      $1240 = HEAP32[83700]|0;
      $1241 = (($1240) + 1)|0;
      HEAP32[83700] = $1241;
      $$010701199 = 0;
      while(1) {
       $1242 = (((198648 + (($$010701199*40)|0)|0)) + 36|0);
       $1243 = HEAP32[$1242>>2]|0;
       $1244 = ($1243|0)==(0);
       do {
        if ($1244) {
         $1245 = HEAP32[(198640)>>2]|0;
         $1246 = HEAP32[(198644)>>2]|0;
         $1247 = ($1245|0)<($1246|0);
         if ($1247) {
          break;
         }
         HEAP32[$1242>>2] = 1;
         $1248 = (_GetScreenWidth()|0);
         $1249 = (($1248) + 200)|0;
         $1250 = (_GetRandomValue(0,$1249)|0);
         $1251 = (+($1250|0));
         $$sroa$0485$0$$sroa_idx = (198648 + (($$010701199*40)|0)|0);
         HEAPF32[$$sroa$0485$0$$sroa_idx>>2] = $1251;
         $$sroa$2486$0$$sroa_idx487 = (((198648 + (($$010701199*40)|0)|0)) + 4|0);
         HEAPF32[$$sroa$2486$0$$sroa_idx487>>2] = -10.0;
         HEAP32[(198640)>>2] = 0;
         $1252 = (_GetRandomValue(5,20)|0);
         HEAP32[(198644)>>2] = $1252;
        }
       } while(0);
       $1253 = (((245396 + (($$010701199*40)|0)|0)) + 36|0);
       $1254 = HEAP32[$1253>>2]|0;
       $1255 = ($1254|0)==(0);
       do {
        if ($1255) {
         $1256 = HEAP32[83700]|0;
         $1257 = HEAP32[83701]|0;
         $1258 = ($1256|0)<($1257|0);
         if ($1258) {
          break;
         }
         HEAP32[$1253>>2] = 1;
         $1259 = (_GetScreenWidth()|0);
         $1260 = (($1259) + 200)|0;
         $1261 = (_GetRandomValue(0,$1260)|0);
         $1262 = (+($1261|0));
         $$sroa$0482$0$$sroa_idx = (245396 + (($$010701199*40)|0)|0);
         HEAPF32[$$sroa$0482$0$$sroa_idx>>2] = $1262;
         $$sroa$2483$0$$sroa_idx484 = (((245396 + (($$010701199*40)|0)|0)) + 4|0);
         HEAPF32[$$sroa$2483$0$$sroa_idx484>>2] = -10.0;
         HEAP32[83700] = 0;
         $1263 = (_GetRandomValue(3,10)|0);
         HEAP32[83701] = $1263;
        }
       } while(0);
       $1264 = (($$010701199) + 1)|0;
       $exitcond1236 = ($1264|0)==(128);
       if ($exitcond1236) {
        break;
       } else {
        $$010701199 = $1264;
       }
      }
     }
     $1265 = HEAP32[(203776)>>2]|0;
     $1266 = ($1265|0)==(0);
     if (!($1266)) {
      $1267 = HEAP32[(203780)>>2]|0;
      $1268 = (($1267) + 1)|0;
      HEAP32[(203780)>>2] = $1268;
      $$010711198 = 0;
      while(1) {
       $1269 = (((203788 + (($$010711198*40)|0)|0)) + 36|0);
       $1270 = HEAP32[$1269>>2]|0;
       $1271 = ($1270|0)==(0);
       do {
        if ($1271) {
         $1272 = HEAP32[(203780)>>2]|0;
         $1273 = HEAP32[(203784)>>2]|0;
         $1274 = ($1272|0)<($1273|0);
         if ($1274) {
          break;
         }
         HEAP32[$1269>>2] = 1;
         $1275 = (_GetScreenWidth()|0);
         $1276 = (($1275) + 200)|0;
         $1277 = (_GetRandomValue(0,$1276)|0);
         $1278 = (+($1277|0));
         $$sroa$0472$0$$sroa_idx = (203788 + (($$010711198*40)|0)|0);
         HEAPF32[$$sroa$0472$0$$sroa_idx>>2] = $1278;
         $$sroa$2473$0$$sroa_idx474 = (((203788 + (($$010711198*40)|0)|0)) + 4|0);
         HEAPF32[$$sroa$2473$0$$sroa_idx474>>2] = -10.0;
         HEAP32[(203780)>>2] = 0;
         $1279 = (_GetRandomValue(1,8)|0);
         HEAP32[(203784)>>2] = $1279;
        }
       } while(0);
       $1280 = (($$010711198) + 1)|0;
       $exitcond1235 = ($1280|0)==(128);
       if ($exitcond1235) {
        break;
       } else {
        $$010711198 = $1280;
       }
      }
     }
     $1281 = HEAP32[(208916)>>2]|0;
     $1282 = ($1281|0)==(0);
     if (!($1282)) {
      $1283 = HEAP32[(208920)>>2]|0;
      $1284 = (($1283) + 1)|0;
      HEAP32[(208920)>>2] = $1284;
      $$010731196 = 0;
      while(1) {
       $1285 = (((208928 + (($$010731196*40)|0)|0)) + 36|0);
       $1286 = HEAP32[$1285>>2]|0;
       $1287 = ($1286|0)==(0);
       do {
        if ($1287) {
         $1288 = HEAP32[(208920)>>2]|0;
         $1289 = HEAP32[(208924)>>2]|0;
         $1290 = ($1288|0)<($1289|0);
         if ($1290) {
          break;
         } else {
          $$010741195 = 0;
         }
         while(1) {
          $1291 = (($$010741195) + ($$010731196))|0;
          $1292 = (((208928 + (($1291*40)|0)|0)) + 36|0);
          HEAP32[$1292>>2] = 1;
          $1293 = (_GetScreenWidth()|0);
          $1294 = (($1293) + 1000)|0;
          $1295 = (_GetRandomValue(100,$1294)|0);
          $1296 = (+($1295|0));
          $1297 = (_GetRandomValue(-10,-20)|0);
          $1298 = (+($1297|0));
          $$sroa$0446$0$$sroa_idx = (208928 + (($1291*40)|0)|0);
          HEAPF32[$$sroa$0446$0$$sroa_idx>>2] = $1296;
          $$sroa$2447$0$$sroa_idx448 = (((208928 + (($1291*40)|0)|0)) + 4|0);
          HEAPF32[$$sroa$2447$0$$sroa_idx448>>2] = $1298;
          $1299 = (($$010741195) + 1)|0;
          $exitcond1233 = ($1299|0)==(16);
          if ($exitcond1233) {
           break;
          } else {
           $$010741195 = $1299;
          }
         }
         HEAP32[(208920)>>2] = 0;
         HEAP32[(208924)>>2] = 4;
        }
       } while(0);
       $1300 = (($$010731196) + 1)|0;
       $exitcond1234 = ($1300|0)==(512);
       if ($exitcond1234) {
        break;
       } else {
        $$010731196 = $1300;
       }
      }
     }
     $1301 = HEAP32[(167852)>>2]|0;
     $1302 = ($1301|0)==(0);
     if ($1302) {
      break;
     }
     $1303 = HEAP32[(167856)>>2]|0;
     $1304 = (($1303) + 1)|0;
     HEAP32[(167856)>>2] = $1304;
     $$010751194 = 0;
     while(1) {
      $1305 = (((167864 + (($$010751194*40)|0)|0)) + 36|0);
      $1306 = HEAP32[$1305>>2]|0;
      $1307 = ($1306|0)==(0);
      do {
       if ($1307) {
        $1308 = HEAP32[(167856)>>2]|0;
        $1309 = HEAP32[(167860)>>2]|0;
        $1310 = ($1308|0)<($1309|0);
        if ($1310) {
         break;
        }
        HEAP32[$1305>>2] = 1;
        $1311 = (_GetScreenWidth()|0);
        $1312 = (($1311) + 800)|0;
        $1313 = (_GetRandomValue(100,$1312)|0);
        $1314 = (+($1313|0));
        $$sroa$0436$0$$sroa_idx = (167864 + (($$010751194*40)|0)|0);
        HEAPF32[$$sroa$0436$0$$sroa_idx>>2] = $1314;
        $$sroa$2437$0$$sroa_idx438 = (((167864 + (($$010751194*40)|0)|0)) + 4|0);
        HEAPF32[$$sroa$2437$0$$sroa_idx438>>2] = -10.0;
        HEAP32[(167856)>>2] = 0;
        $1315 = (_GetRandomValue(1,2)|0);
        HEAP32[(167860)>>2] = $1315;
       }
      } while(0);
      $1316 = (($$010751194) + 1)|0;
      $exitcond1232 = ($1316|0)==(512);
      if ($exitcond1232) {
       break;
      } else {
       $$010751194 = $1316;
      }
     }
    }
   } while(0);
   $1317 = HEAP32[57506]|0;
   $1318 = ($1317|0)==(0);
   if ($1318) {
    $$010771192 = 0;
   } else {
    $1319 = HEAP32[83702]|0;
    $1320 = (($1319) + 1)|0;
    HEAP32[83702] = $1320;
    $$010761193 = 0;
    while(1) {
     $1321 = (((255636 + (($$010761193*40)|0)|0)) + 36|0);
     $1322 = HEAP32[$1321>>2]|0;
     $1323 = ($1322|0)==(0);
     do {
      if ($1323) {
       $1324 = HEAP32[83702]|0;
       $1325 = HEAP32[83703]|0;
       $1326 = ($1324|0)<($1325|0);
       if ($1326) {
        break;
       }
       HEAP32[$1321>>2] = 1;
       $1327 = (((255636 + (($$010761193*40)|0)|0)) + 32|0);
       HEAPF32[$1327>>2] = 0.69999998807907104;
       $1328 = (_GetScreenWidth()|0);
       $1329 = (+($1328|0));
       $1330 = (_GetRandomValue(5,30)|0);
       $1331 = (+($1330|0));
       $$sroa$0424$0$$sroa_idx = (((255636 + (($$010761193*40)|0)|0)) + 20|0);
       HEAPF32[$$sroa$0424$0$$sroa_idx>>2] = $1329;
       $$sroa$2425$0$$sroa_idx426 = (((255636 + (($$010761193*40)|0)|0)) + 24|0);
       HEAPF32[$$sroa$2425$0$$sroa_idx426>>2] = $1331;
       $1332 = (_GetScreenWidth()|0);
       $1333 = (+($1332|0));
       $1334 = (_GetScreenHeight()|0);
       $1335 = (($1334) + -10)|0;
       $1336 = (_GetRandomValue(0,$1335)|0);
       $1337 = (+($1336|0));
       $$sroa$0421$0$$sroa_idx = (255636 + (($$010761193*40)|0)|0);
       HEAPF32[$$sroa$0421$0$$sroa_idx>>2] = $1333;
       $$sroa$2422$0$$sroa_idx423 = (((255636 + (($$010761193*40)|0)|0)) + 4|0);
       HEAPF32[$$sroa$2422$0$$sroa_idx423>>2] = $1337;
       HEAP32[83702] = 0;
       $1338 = (_GetRandomValue(1,10)|0);
       HEAP32[83703] = $1338;
      }
     } while(0);
     $1339 = (($$010761193) + 1)|0;
     $exitcond1231 = ($1339|0)==(64);
     if ($exitcond1231) {
      $$010771192 = 0;
      break;
     } else {
      $$010761193 = $1339;
     }
    }
   }
   while(1) {
    $1342 = (((255636 + (($$010771192*40)|0)|0)) + 36|0);
    $1343 = HEAP32[$1342>>2]|0;
    $1344 = ($1343|0)==(0);
    do {
     if (!($1344)) {
      $1345 = (255636 + (($$010771192*40)|0)|0);
      $1346 = +HEAPF32[$1345>>2];
      $1347 = $1346 + -40.0;
      HEAPF32[$1345>>2] = $1347;
      $1348 = (((255636 + (($$010771192*40)|0)|0)) + 32|0);
      $1349 = +HEAPF32[$1348>>2];
      $1350 = $1349 + -0.014999999664723873;
      HEAPF32[$1348>>2] = $1350;
      $1351 = (((255636 + (($$010771192*40)|0)|0)) + 24|0);
      $1352 = +HEAPF32[$1351>>2];
      $1353 = $1352 + -0.10000000149011612;
      HEAPF32[$1351>>2] = $1353;
      $1354 = !($1353 <= 0.0);
      if ($1354) {
       break;
      }
      HEAP32[$1342>>2] = 0;
     }
    } while(0);
    $1355 = (($$010771192) + 1)|0;
    $exitcond1230 = ($1355|0)==(64);
    if ($exitcond1230) {
     break;
    } else {
     $$010771192 = $1355;
    }
   }
   $1340 = HEAP32[(229416)>>2]|0;
   $1341 = ($1340|0)==(0);
   if ($1341) {
    $$010791190 = 0;
   } else {
    $1356 = HEAP32[(229420)>>2]|0;
    $1357 = (($1356) + 1)|0;
    HEAP32[(229420)>>2] = $1357;
    $1358 = HEAP32[(229728)>>2]|0;
    $1359 = (($1358) + 1)|0;
    HEAP32[(229728)>>2] = $1359;
    $$010781191 = 0;
    while(1) {
     $1360 = (((229428 + (($$010781191*36)|0)|0)) + 24|0);
     $1361 = HEAP32[$1360>>2]|0;
     $1362 = ($1361|0)==(0);
     do {
      if ($1362) {
       $1363 = HEAP32[(229420)>>2]|0;
       $1364 = HEAP32[(229424)>>2]|0;
       $1365 = ($1363|0)<($1364|0);
       if ($1365) {
        break;
       }
       HEAP32[$1360>>2] = 1;
       $1366 = (((229428 + (($$010781191*36)|0)|0)) + 12|0);
       HEAPF32[$1366>>2] = 0.0;
       $1367 = (_GetRandomValue(10,20)|0);
       $1368 = (($1367|0) / 10)&-1;
       $1369 = (+($1368|0));
       $1370 = (((229428 + (($$010781191*36)|0)|0)) + 16|0);
       HEAPF32[$1370>>2] = $1369;
       $1371 = (_GetScreenWidth()|0);
       $1372 = (($1371) + 200)|0;
       $1373 = (_GetRandomValue(300,$1372)|0);
       $1374 = (+($1373|0));
       $$sroa$0390$0$$sroa_idx = (229428 + (($$010781191*36)|0)|0);
       HEAPF32[$$sroa$0390$0$$sroa_idx>>2] = $1374;
       $$sroa$2391$0$$sroa_idx392 = (((229428 + (($$010781191*36)|0)|0)) + 4|0);
       HEAPF32[$$sroa$2391$0$$sroa_idx392>>2] = 0.0;
       $1375 = (((229428 + (($$010781191*36)|0)|0)) + 20|0);
       HEAPF32[$1375>>2] = -35.0;
       HEAP32[(229420)>>2] = 0;
       $1376 = (((229428 + (($$010781191*36)|0)|0)) + 32|0);
       HEAPF32[$1376>>2] = 0.0;
       $1377 = (_GetRandomValue(20,50)|0);
       HEAP32[(229424)>>2] = $1377;
      }
     } while(0);
     $1378 = (((229736 + (($$010781191*36)|0)|0)) + 24|0);
     $1379 = HEAP32[$1378>>2]|0;
     $1380 = ($1379|0)==(0);
     do {
      if ($1380) {
       $1381 = HEAP32[(229728)>>2]|0;
       $1382 = HEAP32[(229732)>>2]|0;
       $1383 = ($1381|0)<($1382|0);
       if ($1383) {
        break;
       }
       HEAP32[$1378>>2] = 1;
       $1384 = (((229736 + (($$010781191*36)|0)|0)) + 12|0);
       HEAPF32[$1384>>2] = 0.0;
       $1385 = (_GetRandomValue(5,15)|0);
       $1386 = (($1385|0) / 10)&-1;
       $1387 = (+($1386|0));
       $1388 = (((229736 + (($$010781191*36)|0)|0)) + 16|0);
       HEAPF32[$1388>>2] = $1387;
       $1389 = (_GetScreenWidth()|0);
       $1390 = (($1389) + 200)|0;
       $1391 = (_GetRandomValue(300,$1390)|0);
       $1392 = (+($1391|0));
       $$sroa$0387$0$$sroa_idx = (229736 + (($$010781191*36)|0)|0);
       HEAPF32[$$sroa$0387$0$$sroa_idx>>2] = $1392;
       $$sroa$2388$0$$sroa_idx389 = (((229736 + (($$010781191*36)|0)|0)) + 4|0);
       HEAPF32[$$sroa$2388$0$$sroa_idx389>>2] = 0.0;
       $1393 = (((229736 + (($$010781191*36)|0)|0)) + 20|0);
       HEAPF32[$1393>>2] = -35.0;
       HEAP32[(229728)>>2] = 0;
       $1394 = (((229736 + (($$010781191*36)|0)|0)) + 32|0);
       HEAPF32[$1394>>2] = 0.0;
       $1395 = (_GetRandomValue(20,50)|0);
       HEAP32[(229732)>>2] = $1395;
      }
     } while(0);
     $1396 = (($$010781191) + 1)|0;
     $exitcond1229 = ($1396|0)==(8);
     if ($exitcond1229) {
      $$010791190 = 0;
      break;
     } else {
      $$010781191 = $1396;
     }
    }
   }
   while(1) {
    $1397 = (((162724 + (($$010791190*40)|0)|0)) + 36|0);
    $1398 = HEAP32[$1397>>2]|0;
    $1399 = ($1398|0)==(0);
    do {
     if (!($1399)) {
      $1400 = +HEAPF32[40560];
      $1401 = $1400 * 2.0;
      $1402 = $1401;
      $1403 = $1402 * 60.0;
      $1404 = $1403 / 60.0;
      $1405 = (((162724 + (($$010791190*40)|0)|0)) + 4|0);
      $1406 = +HEAPF32[$1405>>2];
      $1407 = $1406;
      $1408 = $1407 + $1404;
      $1409 = $1408;
      HEAPF32[$1405>>2] = $1409;
      $1410 = $1400 * 4.0;
      $1411 = $1410;
      $1412 = $1411 * 60.0;
      $1413 = $1412 / 60.0;
      $1414 = (162724 + (($$010791190*40)|0)|0);
      $1415 = +HEAPF32[$1414>>2];
      $1416 = $1415;
      $1417 = $1416 - $1413;
      $1418 = $1417;
      HEAPF32[$1414>>2] = $1418;
      $1419 = (((162724 + (($$010791190*40)|0)|0)) + 16|0);
      $1420 = +HEAPF32[$1419>>2];
      $1421 = $1420 + 0.5;
      HEAPF32[$1419>>2] = $1421;
      $1422 = +HEAPF32[$1405>>2];
      $1423 = (_GetScreenHeight()|0);
      $1424 = (+($1423|0));
      $1425 = !($1422 >= $1424);
      if ($1425) {
       break;
      }
      HEAP32[$1397>>2] = 0;
     }
    } while(0);
    $1426 = (((230036 + (($$010791190*40)|0)|0)) + 36|0);
    $1427 = HEAP32[$1426>>2]|0;
    $1428 = ($1427|0)==(0);
    do {
     if (!($1428)) {
      $1429 = +HEAPF32[40560];
      $1430 = $1429;
      $1431 = $1430 * 60.0;
      $1432 = $1431 / 60.0;
      $1433 = (((230036 + (($$010791190*40)|0)|0)) + 4|0);
      $1434 = +HEAPF32[$1433>>2];
      $1435 = $1434;
      $1436 = $1435 + $1432;
      $1437 = $1436;
      HEAPF32[$1433>>2] = $1437;
      $1438 = $1429 * 5.0;
      $1439 = $1438;
      $1440 = $1439 * 60.0;
      $1441 = $1440 / 60.0;
      $1442 = (230036 + (($$010791190*40)|0)|0);
      $1443 = +HEAPF32[$1442>>2];
      $1444 = $1443;
      $1445 = $1444 - $1441;
      $1446 = $1445;
      HEAPF32[$1442>>2] = $1446;
      $1447 = (((230036 + (($$010791190*40)|0)|0)) + 16|0);
      $1448 = +HEAPF32[$1447>>2];
      $1449 = $1448 + 0.5;
      HEAPF32[$1447>>2] = $1449;
      $1450 = +HEAPF32[$1433>>2];
      $1451 = (_GetScreenHeight()|0);
      $1452 = (+($1451|0));
      $1453 = !($1450 >= $1452);
      if ($1453) {
       break;
      }
      HEAP32[$1426>>2] = 0;
     }
    } while(0);
    $1454 = (((188368 + (($$010791190*40)|0)|0)) + 36|0);
    $1455 = HEAP32[$1454>>2]|0;
    $1456 = ($1455|0)==(0);
    do {
     if (!($1456)) {
      $1457 = +HEAPF32[40560];
      $1458 = $1457 * 4.0;
      $1459 = $1458;
      $1460 = $1459 * 60.0;
      $1461 = $1460 / 60.0;
      $1462 = (((188368 + (($$010791190*40)|0)|0)) + 4|0);
      $1463 = +HEAPF32[$1462>>2];
      $1464 = $1463;
      $1465 = $1464 + $1461;
      $1466 = $1465;
      HEAPF32[$1462>>2] = $1466;
      $1467 = $1457 * 5.0;
      $1468 = $1467;
      $1469 = $1468 * 60.0;
      $1470 = $1469 / 60.0;
      $1471 = (188368 + (($$010791190*40)|0)|0);
      $1472 = +HEAPF32[$1471>>2];
      $1473 = $1472;
      $1474 = $1473 - $1470;
      $1475 = $1474;
      HEAPF32[$1471>>2] = $1475;
      $1476 = (((188368 + (($$010791190*40)|0)|0)) + 16|0);
      $1477 = +HEAPF32[$1476>>2];
      $1478 = $1477 + 0.5;
      HEAPF32[$1476>>2] = $1478;
      $1479 = +HEAPF32[$1462>>2];
      $1480 = (_GetScreenHeight()|0);
      $1481 = (+($1480|0));
      $1482 = !($1479 >= $1481);
      if ($1482) {
       break;
      }
      HEAP32[$1454>>2] = 0;
     }
    } while(0);
    $1483 = (((235156 + (($$010791190*40)|0)|0)) + 36|0);
    $1484 = HEAP32[$1483>>2]|0;
    $1485 = ($1484|0)==(0);
    do {
     if (!($1485)) {
      $1486 = +HEAPF32[40560];
      $1487 = $1486 * 3.0;
      $1488 = $1487;
      $1489 = $1488 * 60.0;
      $1490 = $1489 / 60.0;
      $1491 = (((235156 + (($$010791190*40)|0)|0)) + 4|0);
      $1492 = +HEAPF32[$1491>>2];
      $1493 = $1492;
      $1494 = $1493 + $1490;
      $1495 = $1494;
      HEAPF32[$1491>>2] = $1495;
      $1496 = $1486 * 5.0;
      $1497 = $1496;
      $1498 = $1497 * 60.0;
      $1499 = $1498 / 60.0;
      $1500 = (235156 + (($$010791190*40)|0)|0);
      $1501 = +HEAPF32[$1500>>2];
      $1502 = $1501;
      $1503 = $1502 - $1499;
      $1504 = $1503;
      HEAPF32[$1500>>2] = $1504;
      $1505 = (((235156 + (($$010791190*40)|0)|0)) + 16|0);
      $1506 = +HEAPF32[$1505>>2];
      $1507 = $1506 + 0.5;
      HEAPF32[$1505>>2] = $1507;
      $1508 = +HEAPF32[$1491>>2];
      $1509 = (_GetScreenHeight()|0);
      $1510 = (+($1509|0));
      $1511 = !($1508 >= $1510);
      if ($1511) {
       break;
      }
      HEAP32[$1483>>2] = 0;
     }
    } while(0);
    $1512 = (((193508 + (($$010791190*40)|0)|0)) + 36|0);
    $1513 = HEAP32[$1512>>2]|0;
    $1514 = ($1513|0)==(0);
    do {
     if (!($1514)) {
      $1515 = +HEAPF32[40560];
      $1516 = $1515 * 3.0;
      $1517 = $1516;
      $1518 = $1517 * 60.0;
      $1519 = $1518 / 60.0;
      $1520 = (((193508 + (($$010791190*40)|0)|0)) + 4|0);
      $1521 = +HEAPF32[$1520>>2];
      $1522 = $1521;
      $1523 = $1522 + $1519;
      $1524 = $1523;
      HEAPF32[$1520>>2] = $1524;
      $1525 = $1515 * 5.0;
      $1526 = $1525;
      $1527 = $1526 * 60.0;
      $1528 = $1527 / 60.0;
      $1529 = (193508 + (($$010791190*40)|0)|0);
      $1530 = +HEAPF32[$1529>>2];
      $1531 = $1530;
      $1532 = $1531 - $1528;
      $1533 = $1532;
      HEAPF32[$1529>>2] = $1533;
      $1534 = HEAP32[40591]|0;
      $1535 = (+($1534|0));
      $1536 = $1535 * 0.052359879016876221;
      $1537 = (((193508 + (($$010791190*40)|0)|0)) + 32|0);
      $1538 = +HEAPF32[$1537>>2];
      $1539 = $1538 + $1536;
      $1540 = $1539;
      $1541 = (+Math_sin((+$1540)));
      $1542 = $1541 * 30.0;
      $1543 = $1542 + 30.0;
      $1544 = $1543;
      $1545 = -$1544;
      $1546 = (((193508 + (($$010791190*40)|0)|0)) + 16|0);
      HEAPF32[$1546>>2] = $1545;
      $1547 = +HEAPF32[$1520>>2];
      $1548 = (_GetScreenHeight()|0);
      $1549 = (+($1548|0));
      $1550 = !($1547 >= $1549);
      if ($1550) {
       break;
      }
      HEAP32[$1512>>2] = 0;
     }
    } while(0);
    $1551 = (((240276 + (($$010791190*40)|0)|0)) + 36|0);
    $1552 = HEAP32[$1551>>2]|0;
    $1553 = ($1552|0)==(0);
    do {
     if (!($1553)) {
      $1554 = +HEAPF32[40560];
      $1555 = $1554;
      $1556 = $1555 * 60.0;
      $1557 = $1556 / 60.0;
      $1558 = (((240276 + (($$010791190*40)|0)|0)) + 4|0);
      $1559 = +HEAPF32[$1558>>2];
      $1560 = $1559;
      $1561 = $1560 + $1557;
      $1562 = $1561;
      HEAPF32[$1558>>2] = $1562;
      $1563 = $1554 * 5.0;
      $1564 = $1563;
      $1565 = $1564 * 60.0;
      $1566 = $1565 / 60.0;
      $1567 = (240276 + (($$010791190*40)|0)|0);
      $1568 = +HEAPF32[$1567>>2];
      $1569 = $1568;
      $1570 = $1569 - $1566;
      $1571 = $1570;
      HEAPF32[$1567>>2] = $1571;
      $1572 = HEAP32[40591]|0;
      $1573 = (+($1572|0));
      $1574 = $1573 * 0.052359879016876221;
      $1575 = (((193508 + (($$010791190*40)|0)|0)) + 32|0);
      $1576 = +HEAPF32[$1575>>2];
      $1577 = $1576 + $1574;
      $1578 = $1577;
      $1579 = (+Math_sin((+$1578)));
      $1580 = $1579 * 30.0;
      $1581 = $1580 + 30.0;
      $1582 = $1581;
      $1583 = (((240276 + (($$010791190*40)|0)|0)) + 16|0);
      HEAPF32[$1583>>2] = $1582;
      $1584 = +HEAPF32[$1558>>2];
      $1585 = (_GetScreenHeight()|0);
      $1586 = (+($1585|0));
      $1587 = !($1584 >= $1586);
      if ($1587) {
       break;
      }
      HEAP32[$1551>>2] = 0;
     }
    } while(0);
    $1588 = (((198648 + (($$010791190*40)|0)|0)) + 36|0);
    $1589 = HEAP32[$1588>>2]|0;
    $1590 = ($1589|0)==(0);
    do {
     if (!($1590)) {
      $1591 = +HEAPF32[40560];
      $1592 = $1591 * 2.5;
      $1593 = $1592;
      $1594 = $1593 * 60.0;
      $1595 = $1594 / 60.0;
      $1596 = (((198648 + (($$010791190*40)|0)|0)) + 4|0);
      $1597 = +HEAPF32[$1596>>2];
      $1598 = $1597;
      $1599 = $1598 + $1595;
      $1600 = $1599;
      HEAPF32[$1596>>2] = $1600;
      $1601 = $1591 * 4.0;
      $1602 = $1601;
      $1603 = $1602 * 60.0;
      $1604 = $1603 / 60.0;
      $1605 = (198648 + (($$010791190*40)|0)|0);
      $1606 = +HEAPF32[$1605>>2];
      $1607 = $1606;
      $1608 = $1607 - $1604;
      $1609 = $1608;
      HEAPF32[$1605>>2] = $1609;
      $1610 = (((198648 + (($$010791190*40)|0)|0)) + 16|0);
      $1611 = +HEAPF32[$1610>>2];
      $1612 = $1611 + 0.5;
      HEAPF32[$1610>>2] = $1612;
      $1613 = +HEAPF32[$1596>>2];
      $1614 = (_GetScreenHeight()|0);
      $1615 = (+($1614|0));
      $1616 = !($1613 >= $1615);
      if ($1616) {
       break;
      }
      HEAP32[$1588>>2] = 0;
     }
    } while(0);
    $1617 = (((245396 + (($$010791190*40)|0)|0)) + 36|0);
    $1618 = HEAP32[$1617>>2]|0;
    $1619 = ($1618|0)==(0);
    do {
     if (!($1619)) {
      $1620 = +HEAPF32[40560];
      $1621 = $1620 * 2.5;
      $1622 = $1621;
      $1623 = $1622 * 60.0;
      $1624 = $1623 / 60.0;
      $1625 = (((245396 + (($$010791190*40)|0)|0)) + 4|0);
      $1626 = +HEAPF32[$1625>>2];
      $1627 = $1626;
      $1628 = $1627 + $1624;
      $1629 = $1628;
      HEAPF32[$1625>>2] = $1629;
      $1630 = $1620 * 5.0;
      $1631 = $1630;
      $1632 = $1631 * 60.0;
      $1633 = $1632 / 60.0;
      $1634 = (245396 + (($$010791190*40)|0)|0);
      $1635 = +HEAPF32[$1634>>2];
      $1636 = $1635;
      $1637 = $1636 - $1633;
      $1638 = $1637;
      HEAPF32[$1634>>2] = $1638;
      $1639 = (((245396 + (($$010791190*40)|0)|0)) + 16|0);
      $1640 = +HEAPF32[$1639>>2];
      $1641 = $1640 + 0.5;
      HEAPF32[$1639>>2] = $1641;
      $1642 = +HEAPF32[$1625>>2];
      $1643 = (_GetScreenHeight()|0);
      $1644 = (+($1643|0));
      $1645 = !($1642 >= $1644);
      if ($1645) {
       break;
      }
      HEAP32[$1617>>2] = 0;
     }
    } while(0);
    $1646 = (((203788 + (($$010791190*40)|0)|0)) + 36|0);
    $1647 = HEAP32[$1646>>2]|0;
    $1648 = ($1647|0)==(0);
    do {
     if (!($1648)) {
      $1649 = +HEAPF32[40560];
      $1650 = $1649 * 8.0;
      $1651 = $1650;
      $1652 = $1651 * 60.0;
      $1653 = $1652 / 60.0;
      $1654 = (((203788 + (($$010791190*40)|0)|0)) + 4|0);
      $1655 = +HEAPF32[$1654>>2];
      $1656 = $1655;
      $1657 = $1656 + $1653;
      $1658 = $1657;
      HEAPF32[$1654>>2] = $1658;
      $1659 = $1649 * 10.0;
      $1660 = $1659;
      $1661 = $1660 * 60.0;
      $1662 = $1661 / 60.0;
      $1663 = (203788 + (($$010791190*40)|0)|0);
      $1664 = +HEAPF32[$1663>>2];
      $1665 = $1664;
      $1666 = $1665 - $1662;
      $1667 = $1666;
      HEAPF32[$1663>>2] = $1667;
      $1668 = +HEAPF32[$1654>>2];
      $1669 = (_GetScreenHeight()|0);
      $1670 = (+($1669|0));
      $1671 = !($1668 >= $1670);
      if ($1671) {
       break;
      }
      HEAP32[$1646>>2] = 0;
     }
    } while(0);
    $1672 = (((250516 + (($$010791190*40)|0)|0)) + 36|0);
    $1673 = HEAP32[$1672>>2]|0;
    $1674 = ($1673|0)==(0);
    do {
     if (!($1674)) {
      $1675 = +HEAPF32[40560];
      $1676 = $1675 * 6.0;
      $1677 = $1676;
      $1678 = $1677 * 60.0;
      $1679 = $1678 / 60.0;
      $1680 = (((250516 + (($$010791190*40)|0)|0)) + 4|0);
      $1681 = +HEAPF32[$1680>>2];
      $1682 = $1681;
      $1683 = $1682 + $1679;
      $1684 = $1683;
      HEAPF32[$1680>>2] = $1684;
      $1685 = (250516 + (($$010791190*40)|0)|0);
      $1686 = +HEAPF32[$1685>>2];
      $1687 = $1686;
      $1688 = $1687 - $1679;
      $1689 = $1688;
      HEAPF32[$1685>>2] = $1689;
      $1690 = +HEAPF32[$1680>>2];
      $1691 = (_GetScreenHeight()|0);
      $1692 = (+($1691|0));
      $1693 = !($1690 >= $1692);
      if ($1693) {
       break;
      }
      HEAP32[$1672>>2] = 0;
     }
    } while(0);
    $1694 = (($$010791190) + 1)|0;
    $exitcond1228 = ($1694|0)==(128);
    if ($exitcond1228) {
     $$010801188 = 0;
     break;
    } else {
     $$010791190 = $1694;
    }
   }
   while(1) {
    $1695 = (((208928 + (($$010801188*40)|0)|0)) + 36|0);
    $1696 = HEAP32[$1695>>2]|0;
    $1697 = ($1696|0)==(0);
    do {
     if (!($1697)) {
      $1698 = +HEAPF32[40560];
      $1699 = $1698 * 12.0;
      $1700 = $1699;
      $1701 = $1700 * 60.0;
      $1702 = $1701 / 60.0;
      $1703 = (((208928 + (($$010801188*40)|0)|0)) + 4|0);
      $1704 = +HEAPF32[$1703>>2];
      $1705 = $1704;
      $1706 = $1705 + $1702;
      $1707 = $1706;
      HEAPF32[$1703>>2] = $1707;
      $1708 = $1698 * 15.0;
      $1709 = $1708;
      $1710 = $1709 * 60.0;
      $1711 = $1710 / 60.0;
      $1712 = (208928 + (($$010801188*40)|0)|0);
      $1713 = +HEAPF32[$1712>>2];
      $1714 = $1713;
      $1715 = $1714 - $1711;
      $1716 = $1715;
      HEAPF32[$1712>>2] = $1716;
      $1717 = +HEAPF32[$1703>>2];
      $1718 = (_GetScreenHeight()|0);
      $1719 = (+($1718|0));
      $1720 = !($1717 >= $1719);
      if (!($1720)) {
       HEAP32[$1695>>2] = 0;
      }
      $1721 = HEAP32[(208916)>>2]|0;
      $1722 = ($1721|0)==(0);
      if (!($1722)) {
       break;
      }
      $1723 = (((208928 + (($$010801188*40)|0)|0)) + 28|0);
      $1724 = +HEAPF32[$1723>>2];
      $1725 = $1724;
      $1726 = $1725 + -0.01;
      $1727 = $1726;
      HEAPF32[$1723>>2] = $1727;
     }
    } while(0);
    $1728 = (($$010801188) + 1)|0;
    $exitcond1227 = ($1728|0)==(512);
    if ($exitcond1227) {
     $$010811187 = 0;
     break;
    } else {
     $$010801188 = $1728;
    }
   }
   while(1) {
    $1738 = (((167864 + (($$010811187*40)|0)|0)) + 36|0);
    $1739 = HEAP32[$1738>>2]|0;
    $1740 = ($1739|0)==(0);
    do {
     if (!($1740)) {
      $1741 = +HEAPF32[40560];
      $1742 = $1741 * 12.0;
      $1743 = $1742;
      $1744 = $1743 * 60.0;
      $1745 = $1744 / 60.0;
      $1746 = (((167864 + (($$010811187*40)|0)|0)) + 4|0);
      $1747 = +HEAPF32[$1746>>2];
      $1748 = $1747;
      $1749 = $1748 + $1745;
      $1750 = $1749;
      HEAPF32[$1746>>2] = $1750;
      $1751 = $1741 * 15.0;
      $1752 = $1751;
      $1753 = $1752 * 60.0;
      $1754 = $1753 / 60.0;
      $1755 = (167864 + (($$010811187*40)|0)|0);
      $1756 = +HEAPF32[$1755>>2];
      $1757 = $1756;
      $1758 = $1757 - $1754;
      $1759 = $1758;
      HEAPF32[$1755>>2] = $1759;
      $1760 = (((167864 + (($$010811187*40)|0)|0)) + 16|0);
      $1761 = +HEAPF32[$1760>>2];
      $1762 = $1761 + 0.5;
      HEAPF32[$1760>>2] = $1762;
      $1763 = +HEAPF32[$1746>>2];
      $1764 = (_GetScreenHeight()|0);
      $1765 = (+($1764|0));
      $1766 = !($1763 >= $1765);
      if ($1766) {
       break;
      }
      HEAP32[$1738>>2] = 0;
     }
    } while(0);
    $1767 = (($$010811187) + 1)|0;
    $exitcond1226 = ($1767|0)==(512);
    if ($exitcond1226) {
     break;
    } else {
     $$010811187 = $1767;
    }
   }
   $1729 = +HEAPF32[40560];
   $1730 = $1729;
   $1731 = $1730 * 0.5;
   $1732 = $1731 * 60.0;
   $1733 = $1732 / 60.0;
   $1734 = $1729;
   $1735 = $1734 * 0.5;
   $1736 = $1735 * 60.0;
   $1737 = $1736 / 60.0;
   $$010821186 = 0;
   while(1) {
    $1769 = (((229428 + (($$010821186*36)|0)|0)) + 24|0);
    $1770 = HEAP32[$1769>>2]|0;
    $1771 = ($1770|0)==(0);
    do {
     if (!($1771)) {
      $1772 = (229428 + (($$010821186*36)|0)|0);
      $1773 = +HEAPF32[$1772>>2];
      $1774 = $1773;
      $1775 = $1774 - $1737;
      $1776 = $1775;
      HEAPF32[$1772>>2] = $1776;
      $1777 = (((229428 + (($$010821186*36)|0)|0)) + 28|0);
      $1778 = HEAP32[$1777>>2]|0;
      $1779 = ($1778|0)==(0);
      $1780 = (((229428 + (($$010821186*36)|0)|0)) + 12|0);
      $1781 = +HEAPF32[$1780>>2];
      if ($1779) {
       $1788 = $1781 + 0.0099999997764825821;
       HEAPF32[$1780>>2] = $1788;
       $1789 = !($1788 >= 0.5);
       if ($1789) {
        break;
       }
       HEAPF32[$1780>>2] = 0.5;
       $1790 = (((229428 + (($$010821186*36)|0)|0)) + 32|0);
       $1791 = +HEAPF32[$1790>>2];
       $1792 = $1791 + 1.0;
       HEAPF32[$1790>>2] = $1792;
       $1793 = !($1792 >= 30.0);
       if ($1793) {
        break;
       }
       HEAPF32[$1790>>2] = 0.0;
       HEAP32[$1777>>2] = 1;
       break;
      } else {
       $1782 = $1781 + -0.0099999997764825821;
       HEAPF32[$1780>>2] = $1782;
       $1783 = !($1782 <= 0.0);
       if ($1783) {
        break;
       }
       HEAPF32[$1780>>2] = 0.0;
       $1784 = (((229428 + (($$010821186*36)|0)|0)) + 32|0);
       $1785 = +HEAPF32[$1784>>2];
       $1786 = $1785 + 1.0;
       HEAPF32[$1784>>2] = $1786;
       $1787 = !($1786 >= 30.0);
       if ($1787) {
        break;
       }
       HEAP32[$1769>>2] = 0;
       HEAPF32[$1784>>2] = 0.0;
       HEAP32[$1777>>2] = 0;
       break;
      }
     }
    } while(0);
    $1794 = (((229736 + (($$010821186*36)|0)|0)) + 24|0);
    $1795 = HEAP32[$1794>>2]|0;
    $1796 = ($1795|0)==(0);
    do {
     if (!($1796)) {
      $1797 = (229736 + (($$010821186*36)|0)|0);
      $1798 = +HEAPF32[$1797>>2];
      $1799 = $1798;
      $1800 = $1799 - $1733;
      $1801 = $1800;
      HEAPF32[$1797>>2] = $1801;
      $1802 = (((229736 + (($$010821186*36)|0)|0)) + 28|0);
      $1803 = HEAP32[$1802>>2]|0;
      $1804 = ($1803|0)==(0);
      $1805 = (((229736 + (($$010821186*36)|0)|0)) + 12|0);
      $1806 = +HEAPF32[$1805>>2];
      if ($1804) {
       $1813 = $1806 + 0.0099999997764825821;
       HEAPF32[$1805>>2] = $1813;
       $1814 = !($1813 >= 0.5);
       if ($1814) {
        break;
       }
       HEAPF32[$1805>>2] = 0.5;
       $1815 = (((229736 + (($$010821186*36)|0)|0)) + 32|0);
       $1816 = +HEAPF32[$1815>>2];
       $1817 = $1816 + 1.0;
       HEAPF32[$1815>>2] = $1817;
       $1818 = !($1817 >= 30.0);
       if ($1818) {
        break;
       }
       HEAPF32[$1815>>2] = 0.0;
       HEAP32[$1802>>2] = 1;
       break;
      } else {
       $1807 = $1806 + -0.0099999997764825821;
       HEAPF32[$1805>>2] = $1807;
       $1808 = !($1807 <= 0.0);
       if ($1808) {
        break;
       }
       HEAPF32[$1805>>2] = 0.0;
       $1809 = (((229736 + (($$010821186*36)|0)|0)) + 32|0);
       $1810 = +HEAPF32[$1809>>2];
       $1811 = $1810 + 1.0;
       HEAPF32[$1809>>2] = $1811;
       $1812 = !($1811 >= 30.0);
       if ($1812) {
        break;
       }
       HEAP32[$1794>>2] = 0;
       HEAPF32[$1809>>2] = 0.0;
       HEAP32[$1802>>2] = 0;
       break;
      }
     }
    } while(0);
    $1819 = (($$010821186) + 1)|0;
    $exitcond1225 = ($1819|0)==(8);
    if ($exitcond1225) {
     break;
    } else {
     $$010821186 = $1819;
    }
   }
   $1768 = HEAP32[83633]|0;
   L699: do {
    switch ($1768|0) {
    case 3:  {
     $1820 = HEAP32[40562]|0;
     $1821 = (($1820) + 1)|0;
     HEAP32[40562] = $1821;
     $1822 = HEAP32[40559]|0;
     $1823 = (($1822) + 1)|0;
     HEAP32[40559] = $1823;
     $1824 = HEAP32[83661]|0;
     $1825 = (($1824) + 1)|0;
     HEAP32[83661] = $1825;
     $1826 = ($1825|0)>(23);
     $1827 = HEAP32[83660]|0;
     if ($1826) {
      $1828 = (($1827) + 1)|0;
      HEAP32[83660] = $1828;
      HEAP32[83661] = 0;
      $1830 = $1828;
     } else {
      $1830 = $1827;
     }
     $1829 = ($1830|0)>(2);
     if ($1829) {
      HEAP32[83660] = 0;
     }
     $1831 = HEAP32[(162664)>>2]|0;
     $1832 = HEAP32[83660]|0;
     $1833 = Math_imul($1832, $1831)|0;
     $1834 = (($1833) + 1025)|0;
     HEAP32[40664] = $1834;
     $1835 = HEAP32[40575]|0;
     $1836 = ($1835|0)==(0);
     $1837 = (_IsGestureDetected(1)|0);
     $1838 = ($1837|0)!=(0);
     if ($1836) {
      if ($1838) {
       label = 460;
      } else {
       $1839 = (_GetGestureDetected()|0);
       $1840 = ($1839|0)==(2);
       if ($1840) {
        label = 460;
       }
      }
      do {
       if ((label|0) == 460) {
        _GetTouchPosition($7,0);
        ;HEAP32[$$byval_copy100>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$7+4>>2]|0;
        ;HEAP32[$$byval_copy101>>2]=HEAP32[162512>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[162512+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[162512+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[162512+12>>2]|0;
        $1841 = (_CheckCollisionPointRec($$byval_copy100,$$byval_copy101)|0);
        $1842 = ($1841|0)==(0);
        if ($1842) {
         break;
        }
        HEAP32[83633] = 0;
        HEAP32[83647] = 15;
        HEAP32[40553] = 0;
        HEAP32[40576] = 6;
        HEAP32[40574] = 0;
        HEAP32[40575] = 0;
        HEAP32[83661] = 0;
        ;HEAP32[$$byval_copy101>>2]=HEAP32[26556>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[26556+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[26556+8>>2]|0;
        _PlaySound($$byval_copy101);
        $1843 = HEAP32[40608]|0;
        $1844 = (($1843) + 1)|0;
        HEAP32[40608] = $1844;
       }
      } while(0);
      $1845 = (_IsGestureDetected(1)|0);
      $1846 = ($1845|0)==(0);
      if ($1846) {
       $1847 = (_GetGestureDetected()|0);
       $1848 = ($1847|0)==(2);
       if ($1848) {
        label = 464;
       }
      } else {
       label = 464;
      }
      do {
       if ((label|0) == 464) {
        _GetTouchPosition($8,0);
        ;HEAP32[$$byval_copy100>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$8+4>>2]|0;
        ;HEAP32[$$byval_copy101>>2]=HEAP32[162496>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[162496+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[162496+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[162496+12>>2]|0;
        $1849 = (_CheckCollisionPointRec($$byval_copy100,$$byval_copy101)|0);
        $1850 = ($1849|0)==(0);
        if ($1850) {
         break;
        }
        $1851 = HEAP32[40574]|0;
        $1852 = ($1851|0)!=(0);
        $$sink92 = $1852 ? 4.0 : 3.0;
        HEAPF32[40556] = $$sink92;
        ;HEAP32[$$byval_copy101>>2]=HEAP32[26568>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[26568+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[26568+8>>2]|0;
        _PlaySound($$byval_copy101);
        HEAP32[83633] = 1;
        HEAP32[40553] = 0;
        HEAP32[40575] = 0;
        $1853 = HEAP32[40611]|0;
        $1854 = (($1853) + 1)|0;
        HEAP32[40611] = $1854;
        break L699;
       }
      } while(0);
      $1855 = HEAP32[40574]|0;
      $1856 = ($1855|0)!=(0);
      $$sink93 = $1856 ? 4.0 : 1.0;
      HEAPF32[40556] = $$sink93;
      break L699;
     }
     if ($1838) {
      label = 469;
     } else {
      $1857 = (_GetGestureDetected()|0);
      $1858 = ($1857|0)==(2);
      if ($1858) {
       label = 469;
      }
     }
     do {
      if ((label|0) == 469) {
       _GetTouchPosition($9,0);
       ;HEAP32[$$byval_copy100>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$9+4>>2]|0;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[162512>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[162512+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[162512+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[162512+12>>2]|0;
       $1859 = (_CheckCollisionPointRec($$byval_copy100,$$byval_copy101)|0);
       $1860 = ($1859|0)==(0);
       if ($1860) {
        break;
       }
       $1861 = HEAP32[40570]|0;
       $1862 = (($1861) + 1)|0;
       HEAP32[40570] = $1862;
       $1863 = ($1861|0)>(0);
       if (!($1863)) {
        break;
       }
       HEAP32[83633] = 0;
       HEAP32[83647] = 15;
       HEAP32[40553] = 0;
       HEAP32[40576] = 6;
       HEAP32[40574] = 0;
       HEAP32[40575] = 0;
       HEAP32[40570] = 0;
       HEAP32[40571] = 0;
       HEAP32[40559] = 0;
       $1864 = HEAP32[40608]|0;
       $1865 = (($1864) + 1)|0;
       HEAP32[40608] = $1865;
      }
     } while(0);
     $1866 = (_IsGestureDetected(1)|0);
     $1867 = ($1866|0)==(0);
     if ($1867) {
      $1868 = (_GetGestureDetected()|0);
      $1869 = ($1868|0)==(2);
      if ($1869) {
       label = 474;
      }
     } else {
      label = 474;
     }
     do {
      if ((label|0) == 474) {
       _GetTouchPosition($10,0);
       ;HEAP32[$$byval_copy100>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$10+4>>2]|0;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[162496>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[162496+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[162496+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[162496+12>>2]|0;
       $1870 = (_CheckCollisionPointRec($$byval_copy100,$$byval_copy101)|0);
       $1871 = ($1870|0)==(0);
       if ($1871) {
        break;
       }
       $1872 = HEAP32[40571]|0;
       $1873 = (($1872) + 1)|0;
       HEAP32[40571] = $1873;
       $1874 = ($1872|0)>(0);
       if (!($1874)) {
        break L699;
       }
       HEAPF32[40556] = 3.0;
       HEAP32[83633] = 1;
       HEAP32[40553] = 0;
       HEAP32[40575] = 0;
       HEAP32[40570] = 0;
       HEAP32[40571] = 0;
       HEAP32[40559] = 0;
       $1875 = HEAP32[40611]|0;
       $1876 = (($1875) + 1)|0;
       HEAP32[40611] = $1876;
       break L699;
      }
     } while(0);
     HEAPF32[40556] = 0.0;
     break;
    }
    case 0:  {
     $1877 = HEAP32[40576]|0;
     $1878 = (+($1877|0));
     $1879 = $1878 * 60.0;
     $1880 = $1879 / 60.0;
     $1881 = HEAP32[65441]|0;
     $1882 = (+($1881|0));
     $1883 = $1882 + $1880;
     $1884 = (~~(($1883)));
     HEAP32[65441] = $1884;
     $1885 = HEAP32[83647]|0;
     $1886 = (($1885) + -1)|0;
     HEAP32[83647] = $1886;
     $1887 = HEAP32[(261768)>>2]|0;
     $1888 = (($1887) - ($1886))|0;
     HEAP32[(261768)>>2] = $1888;
     $1889 = HEAP32[40551]|0;
     $1890 = (($1889) + 1)|0;
     HEAP32[40551] = $1890;
     $1891 = HEAP32[40553]|0;
     $1892 = (($1891) + 1)|0;
     HEAP32[40553] = $1892;
     break;
    }
    case 1:  {
     $1893 = +HEAPF32[40556];
     $1894 = $1893 + 1.0;
     HEAPF32[40556] = $1894;
     $1895 = HEAP32[(261768)>>2]|0;
     $1896 = (+($1895|0));
     $1897 = $1894 + $1896;
     $1898 = (~~(($1897)));
     HEAP32[(261768)>>2] = $1898;
     $1899 = HEAP32[40557]|0;
     $1900 = HEAP32[65441]|0;
     $1901 = (($1900) - ($1899))|0;
     HEAP32[65441] = $1901;
     $1902 = HEAP32[40553]|0;
     $1903 = (($1902) + 1)|0;
     HEAP32[40553] = $1903;
     $$010831185 = 0;
     while(1) {
      $1908 = (259396 + ($$010831185<<4)|0);
      ;HEAP32[$$byval_copy100>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261764+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$1908>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$1908+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$1908+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$1908+12>>2]|0;
      $1909 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $1910 = ($1909|0)==(0);
      do {
       if (!($1910)) {
        $1911 = (259716 + ($$010831185<<2)|0);
        $1912 = HEAP32[$1911>>2]|0;
        $1913 = ($1912|0)==(0);
        if (!($1913)) {
         break;
        }
        $1914 = (259652 + ($$010831185<<2)|0);
        $1915 = HEAP32[$1914>>2]|0;
        $1916 = ($1915|0)==(0);
        if ($1916) {
         break;
        }
        HEAP32[83633] = 0;
        HEAP32[83647] = 15;
        $1917 = (334648 + ($$010831185<<2)|0);
        HEAP32[$1917>>2] = 8;
        HEAP32[40553] = 3;
        HEAPF32[40556] = 3.0;
        HEAP32[$1911>>2] = 1;
        HEAP32[40576] = -3;
        $1918 = HEAP32[6668]|0;
        $1919 = (($1918) + 100)|0;
        HEAP32[6668] = $1919;
        $1920 = HEAP32[40589]|0;
        $1921 = (26680 + ($1920<<2)|0);
        HEAP32[$1921>>2] = 1;
        $1922 = (($1920) + 1)|0;
        HEAP32[40589] = $1922;
        ;HEAP32[$$byval_copy101>>2]=HEAP32[26616>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[26616+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[26616+8>>2]|0;
        _PlaySound($$byval_copy101);
        $1923 = HEAP32[83692]|0;
        $1924 = (($1923) + 1)|0;
        HEAP32[83692] = $1924;
        $1925 = HEAP32[83650]|0;
        $1926 = (($1925) + 1)|0;
        HEAP32[83650] = $1926;
        $1927 = HEAP32[$1908>>2]|0;
        $1928 = (+($1927|0));
        $1929 = (((259396 + ($$010831185<<4)|0)) + 4|0);
        $1930 = HEAP32[$1929>>2]|0;
        $1931 = (+($1930|0));
        $$sroa$0190$0$$sroa_idx = (260740 + (($$010831185*40)|0)|0);
        HEAPF32[$$sroa$0190$0$$sroa_idx>>2] = $1928;
        $$sroa$2191$0$$sroa_idx192 = (((260740 + (($$010831185*40)|0)|0)) + 4|0);
        HEAPF32[$$sroa$2191$0$$sroa_idx192>>2] = $1931;
        $1932 = HEAP32[$1908>>2]|0;
        $1933 = (+($1932|0));
        $1934 = HEAP32[$1929>>2]|0;
        $1935 = (+($1934|0));
        $$sroa$0187$0$$sroa_idx = (((260740 + (($$010831185*40)|0)|0)) + 8|0);
        HEAPF32[$$sroa$0187$0$$sroa_idx>>2] = $1933;
        $$sroa$2188$0$$sroa_idx189 = (((260740 + (($$010831185*40)|0)|0)) + 12|0);
        HEAPF32[$$sroa$2188$0$$sroa_idx189>>2] = $1935;
        $1936 = (_GetRandomValue(5,10)|0);
        $1937 = (+($1936|0));
        $1938 = $1937 / 30.0;
        $1939 = (((260740 + (($$010831185*40)|0)|0)) + 20|0);
        HEAPF32[$1939>>2] = $1938;
        $1940 = (((260740 + (($$010831185*40)|0)|0)) + 16|0);
        HEAPF32[$1940>>2] = 0.0;
        $1941 = (((260740 + (($$010831185*40)|0)|0)) + 28|0);
        HEAPF32[$1941>>2] = 1.0;
        $1942 = (((260740 + (($$010831185*40)|0)|0)) + 36|0);
        HEAP32[$1942>>2] = 1;
        $1943 = HEAP32[$1908>>2]|0;
        $1944 = (+($1943|0));
        $1945 = HEAP32[$1929>>2]|0;
        $1946 = (+($1945|0));
        $$sroa$0184$0$$sroa_idx = (261380 + (($$010831185*24)|0)|0);
        HEAPF32[$$sroa$0184$0$$sroa_idx>>2] = $1944;
        $$sroa$2185$0$$sroa_idx186 = (((261380 + (($$010831185*24)|0)|0)) + 4|0);
        HEAPF32[$$sroa$2185$0$$sroa_idx186>>2] = $1946;
        $1947 = (((261380 + (($$010831185*24)|0)|0)) + 16|0);
        HEAPF32[$1947>>2] = 1.0;
        $1948 = (((261380 + (($$010831185*24)|0)|0)) + 12|0);
        HEAPF32[$1948>>2] = 1.0;
        $1949 = (((261380 + (($$010831185*24)|0)|0)) + 20|0);
        HEAP32[$1949>>2] = 100;
        $1950 = (((261380 + (($$010831185*24)|0)|0)) + 8|0);
        HEAP32[$1950>>2] = 1;
       }
      } while(0);
      $1951 = (259780 + ($$010831185<<4)|0);
      ;HEAP32[$$byval_copy100>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261764+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$1951>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$1951+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$1951+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$1951+12>>2]|0;
      $1952 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $1953 = ($1952|0)==(0);
      do {
       if (!($1953)) {
        $1954 = (260100 + ($$010831185<<2)|0);
        $1955 = HEAP32[$1954>>2]|0;
        $1956 = ($1955|0)==(0);
        if (!($1956)) {
         break;
        }
        $1957 = (260036 + ($$010831185<<2)|0);
        $1958 = HEAP32[$1957>>2]|0;
        $1959 = ($1958|0)==(0);
        if ($1959) {
         break;
        }
        HEAP32[83633] = 0;
        HEAP32[83647] = 15;
        $1960 = (334648 + ($$010831185<<2)|0);
        HEAP32[$1960>>2] = 8;
        HEAP32[40553] = 3;
        HEAPF32[40556] = 3.0;
        HEAP32[$1954>>2] = 1;
        HEAP32[40576] = -3;
        $1961 = HEAP32[6668]|0;
        $1962 = (($1961) + 100)|0;
        HEAP32[6668] = $1962;
        $1963 = HEAP32[40589]|0;
        $1964 = (26680 + ($1963<<2)|0);
        HEAP32[$1964>>2] = 2;
        $1965 = (($1963) + 1)|0;
        HEAP32[40589] = $1965;
        ;HEAP32[$$byval_copy101>>2]=HEAP32[26628>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[26628+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[26628+8>>2]|0;
        _PlaySound($$byval_copy101);
        $1966 = HEAP32[83693]|0;
        $1967 = (($1966) + 1)|0;
        HEAP32[83693] = $1967;
        $1968 = HEAP32[83650]|0;
        $1969 = (($1968) + 1)|0;
        HEAP32[83650] = $1969;
        $1970 = HEAP32[$1951>>2]|0;
        $1971 = (+($1970|0));
        $1972 = (((259780 + ($$010831185<<4)|0)) + 4|0);
        $1973 = HEAP32[$1972>>2]|0;
        $1974 = (+($1973|0));
        $$sroa$0181$0$$sroa_idx = (260740 + (($$010831185*40)|0)|0);
        HEAPF32[$$sroa$0181$0$$sroa_idx>>2] = $1971;
        $$sroa$2182$0$$sroa_idx183 = (((260740 + (($$010831185*40)|0)|0)) + 4|0);
        HEAPF32[$$sroa$2182$0$$sroa_idx183>>2] = $1974;
        $1975 = HEAP32[$1951>>2]|0;
        $1976 = (+($1975|0));
        $1977 = HEAP32[$1972>>2]|0;
        $1978 = (+($1977|0));
        $$sroa$0178$0$$sroa_idx = (((260740 + (($$010831185*40)|0)|0)) + 8|0);
        HEAPF32[$$sroa$0178$0$$sroa_idx>>2] = $1976;
        $$sroa$2179$0$$sroa_idx180 = (((260740 + (($$010831185*40)|0)|0)) + 12|0);
        HEAPF32[$$sroa$2179$0$$sroa_idx180>>2] = $1978;
        $1979 = (_GetRandomValue(5,10)|0);
        $1980 = (+($1979|0));
        $1981 = $1980 / 30.0;
        $1982 = (((260740 + (($$010831185*40)|0)|0)) + 20|0);
        HEAPF32[$1982>>2] = $1981;
        $1983 = (((260740 + (($$010831185*40)|0)|0)) + 16|0);
        HEAPF32[$1983>>2] = 0.0;
        $1984 = (((260740 + (($$010831185*40)|0)|0)) + 28|0);
        HEAPF32[$1984>>2] = 1.0;
        $1985 = (((260740 + (($$010831185*40)|0)|0)) + 36|0);
        HEAP32[$1985>>2] = 1;
        $1986 = HEAP32[$1951>>2]|0;
        $1987 = (+($1986|0));
        $1988 = HEAP32[$1972>>2]|0;
        $1989 = (+($1988|0));
        $$sroa$0175$0$$sroa_idx = (261380 + (($$010831185*24)|0)|0);
        HEAPF32[$$sroa$0175$0$$sroa_idx>>2] = $1987;
        $$sroa$2176$0$$sroa_idx177 = (((261380 + (($$010831185*24)|0)|0)) + 4|0);
        HEAPF32[$$sroa$2176$0$$sroa_idx177>>2] = $1989;
        $1990 = (((261380 + (($$010831185*24)|0)|0)) + 16|0);
        HEAPF32[$1990>>2] = 1.0;
        $1991 = (((261380 + (($$010831185*24)|0)|0)) + 12|0);
        HEAPF32[$1991>>2] = 1.0;
        $1992 = (((261380 + (($$010831185*24)|0)|0)) + 20|0);
        HEAP32[$1992>>2] = 100;
        $1993 = (((261380 + (($$010831185*24)|0)|0)) + 8|0);
        HEAP32[$1993>>2] = 1;
       }
      } while(0);
      $1994 = (260164 + ($$010831185<<4)|0);
      ;HEAP32[$$byval_copy100>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261764+12>>2]|0;
      ;HEAP32[$$byval_copy101>>2]=HEAP32[$1994>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[$1994+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[$1994+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[$1994+12>>2]|0;
      $1995 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
      $1996 = ($1995|0)==(0);
      do {
       if (!($1996)) {
        $1997 = (260548 + ($$010831185<<2)|0);
        $1998 = HEAP32[$1997>>2]|0;
        $1999 = ($1998|0)==(0);
        if (!($1999)) {
         break;
        }
        $2000 = (260420 + ($$010831185<<2)|0);
        $2001 = HEAP32[$2000>>2]|0;
        $2002 = ($2001|0)==(0);
        if ($2002) {
         break;
        }
        HEAP32[83633] = 0;
        HEAP32[83647] = 15;
        $2003 = (334648 + ($$010831185<<2)|0);
        HEAP32[$2003>>2] = 8;
        HEAP32[40553] = 3;
        HEAPF32[40556] = 3.0;
        HEAP32[$1997>>2] = 1;
        HEAP32[40576] = -3;
        $2004 = HEAP32[6668]|0;
        $2005 = (($2004) + 100)|0;
        HEAP32[6668] = $2005;
        $2006 = HEAP32[40589]|0;
        $2007 = (26680 + ($2006<<2)|0);
        HEAP32[$2007>>2] = 3;
        $2008 = (($2006) + 1)|0;
        HEAP32[40589] = $2008;
        ;HEAP32[$$byval_copy101>>2]=HEAP32[26640>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[26640+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[26640+8>>2]|0;
        _PlaySound($$byval_copy101);
        $2009 = HEAP32[83694]|0;
        $2010 = (($2009) + 1)|0;
        HEAP32[83694] = $2010;
        $2011 = HEAP32[83650]|0;
        $2012 = (($2011) + 1)|0;
        HEAP32[83650] = $2012;
        $2013 = HEAP32[$1994>>2]|0;
        $2014 = (+($2013|0));
        $2015 = (((260164 + ($$010831185<<4)|0)) + 4|0);
        $2016 = HEAP32[$2015>>2]|0;
        $2017 = (+($2016|0));
        $$sroa$0172$0$$sroa_idx = (260740 + (($$010831185*40)|0)|0);
        HEAPF32[$$sroa$0172$0$$sroa_idx>>2] = $2014;
        $$sroa$2173$0$$sroa_idx174 = (((260740 + (($$010831185*40)|0)|0)) + 4|0);
        HEAPF32[$$sroa$2173$0$$sroa_idx174>>2] = $2017;
        $2018 = HEAP32[$1994>>2]|0;
        $2019 = (+($2018|0));
        $2020 = HEAP32[$2015>>2]|0;
        $2021 = (+($2020|0));
        $$sroa$0169$0$$sroa_idx = (((260740 + (($$010831185*40)|0)|0)) + 8|0);
        HEAPF32[$$sroa$0169$0$$sroa_idx>>2] = $2019;
        $$sroa$2170$0$$sroa_idx171 = (((260740 + (($$010831185*40)|0)|0)) + 12|0);
        HEAPF32[$$sroa$2170$0$$sroa_idx171>>2] = $2021;
        $2022 = (_GetRandomValue(5,10)|0);
        $2023 = (+($2022|0));
        $2024 = $2023 / 30.0;
        $2025 = (((260740 + (($$010831185*40)|0)|0)) + 20|0);
        HEAPF32[$2025>>2] = $2024;
        $2026 = (((260740 + (($$010831185*40)|0)|0)) + 16|0);
        HEAPF32[$2026>>2] = 0.0;
        $2027 = (((260740 + (($$010831185*40)|0)|0)) + 28|0);
        HEAPF32[$2027>>2] = 1.0;
        $2028 = (((260740 + (($$010831185*40)|0)|0)) + 36|0);
        HEAP32[$2028>>2] = 1;
        $2029 = HEAP32[$1994>>2]|0;
        $2030 = (+($2029|0));
        $2031 = HEAP32[$2015>>2]|0;
        $2032 = (+($2031|0));
        $$sroa$0166$0$$sroa_idx = (261380 + (($$010831185*24)|0)|0);
        HEAPF32[$$sroa$0166$0$$sroa_idx>>2] = $2030;
        $$sroa$2167$0$$sroa_idx168 = (((261380 + (($$010831185*24)|0)|0)) + 4|0);
        HEAPF32[$$sroa$2167$0$$sroa_idx168>>2] = $2032;
        $2033 = (((261380 + (($$010831185*24)|0)|0)) + 16|0);
        HEAPF32[$2033>>2] = 1.0;
        $2034 = (((261380 + (($$010831185*24)|0)|0)) + 12|0);
        HEAPF32[$2034>>2] = 1.0;
        $2035 = (((261380 + (($$010831185*24)|0)|0)) + 20|0);
        HEAP32[$2035>>2] = 100;
        $2036 = (((261380 + (($$010831185*24)|0)|0)) + 8|0);
        HEAP32[$2036>>2] = 1;
       }
      } while(0);
      $2037 = (($$010831185) + 1)|0;
      $exitcond = ($2037|0)==(16);
      if ($exitcond) {
       break;
      } else {
       $$010831185 = $2037;
      }
     }
     ;HEAP32[$$byval_copy100>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261764+12>>2]|0;
     ;HEAP32[$$byval_copy101>>2]=HEAP32[261780>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[261780+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[261780+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[261780+12>>2]|0;
     $1904 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
     $1905 = HEAP32[83656]|0;
     $notlhs = ($1904|0)!=(0);
     $notrhs = ($1905|0)==(0);
     $or$cond95$not = $notlhs & $notrhs;
     $1906 = HEAP32[65449]|0;
     $1907 = ($1906|0)!=(0);
     $or$cond97 = $or$cond95$not & $1907;
     if ($or$cond97) {
      HEAP32[83633] = 0;
      HEAP32[83647] = 15;
      HEAP32[83648] = 8;
      HEAP32[40553] = 3;
      HEAPF32[40556] = 3.0;
      HEAP32[83656] = 1;
      HEAP32[40576] = -3;
      $2038 = HEAP32[6668]|0;
      $2039 = (($2038) + 300)|0;
      HEAP32[6668] = $2039;
      $2040 = HEAP32[40589]|0;
      $2041 = (26680 + ($2040<<2)|0);
      HEAP32[$2041>>2] = 4;
      $2042 = (($2040) + 1)|0;
      HEAP32[40589] = $2042;
      $2043 = HEAP32[83657]|0;
      $2044 = (($2043) + 1)|0;
      HEAP32[83657] = $2044;
      $2045 = HEAP32[83650]|0;
      $2046 = (($2045) + 1)|0;
      HEAP32[83650] = $2046;
      $2047 = HEAP32[65445]|0;
      $2048 = (+($2047|0));
      $2049 = HEAP32[(261784)>>2]|0;
      $2050 = (+($2049|0));
      HEAPF32[65450] = $2048;
      HEAPF32[(261804)>>2] = $2050;
      HEAPF32[(261816)>>2] = 1.0;
      HEAPF32[(261812)>>2] = 1.0;
      HEAP32[(261820)>>2] = 300;
      HEAP32[(261808)>>2] = 1;
     }
     ;HEAP32[$$byval_copy100>>2]=HEAP32[261764>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[261764+4>>2]|0;HEAP32[$$byval_copy100+8>>2]=HEAP32[261764+8>>2]|0;HEAP32[$$byval_copy100+12>>2]=HEAP32[261764+12>>2]|0;
     ;HEAP32[$$byval_copy101>>2]=HEAP32[261824>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[261824+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[261824+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[261824+12>>2]|0;
     $2051 = (_CheckCollisionRecs($$byval_copy100,$$byval_copy101)|0);
     $2052 = HEAP32[83646]|0;
     $notlhs1087 = ($2051|0)!=(0);
     $notrhs1088 = ($2052|0)==(0);
     $or$cond99$not = $notlhs1087 & $notrhs1088;
     $2053 = HEAP32[65460]|0;
     $2054 = ($2053|0)!=(0);
     $or$cond101 = $or$cond99$not & $2054;
     if (!($or$cond101)) {
      break L699;
     }
     HEAP32[83633] = 0;
     HEAP32[83647] = 15;
     HEAP32[83648] = 8;
     HEAP32[40553] = 3;
     HEAPF32[40556] = 3.0;
     HEAP32[83646] = 1;
     HEAP32[40576] = -3;
     $2055 = HEAP32[6668]|0;
     $2056 = (($2055) + 300)|0;
     HEAP32[6668] = $2056;
     $2057 = HEAP32[40589]|0;
     $2058 = (26680 + ($2057<<2)|0);
     HEAP32[$2058>>2] = 5;
     $2059 = (($2057) + 1)|0;
     HEAP32[40589] = $2059;
     $2060 = HEAP32[83649]|0;
     $2061 = (($2060) + 1)|0;
     HEAP32[83649] = $2061;
     $2062 = HEAP32[83650]|0;
     $2063 = (($2062) + 1)|0;
     HEAP32[83650] = $2063;
     $2064 = HEAP32[65456]|0;
     $2065 = (+($2064|0));
     $2066 = HEAP32[(261828)>>2]|0;
     $2067 = (+($2066|0));
     HEAPF32[65461] = $2065;
     HEAPF32[(261848)>>2] = $2067;
     HEAPF32[(261860)>>2] = 1.0;
     HEAPF32[(261856)>>2] = 1.0;
     HEAP32[(261864)>>2] = 300;
     HEAP32[(261852)>>2] = 1;
     break;
    }
    case 2:  {
     $2068 = HEAP32[40577]|0;
     $2069 = ($2068|0)==(0);
     do {
      if ($2069) {
       HEAPF32[40560] = 5.0;
       HEAPF32[40568] = 3.2000000476837158;
       $2104 = HEAP32[40558]|0;
       $2105 = (($2104) + -1)|0;
       HEAP32[40558] = $2105;
       $2106 = HEAP32[83661]|0;
       $2107 = (($2106) + 1)|0;
       HEAP32[83661] = $2107;
       $2108 = ($2107|0)>(11);
       $2109 = HEAP32[83660]|0;
       if ($2108) {
        $2110 = (($2109) + 1)|0;
        HEAP32[83660] = $2110;
        HEAP32[83661] = 0;
        $2112 = $2110;
       } else {
        $2112 = $2109;
       }
       $2111 = ($2112|0)>(1);
       if ($2111) {
        HEAP32[83660] = 0;
        $2116 = 0;
        label = 511;
       } else {
        $$pr1153 = HEAP32[83660]|0;
        $2113 = ($$pr1153|0)<(2);
        if ($2113) {
         $2116 = $$pr1153;
         label = 511;
        }
       }
       if ((label|0) == 511) {
        $2114 = HEAP32[(162680)>>2]|0;
        $2115 = Math_imul($2114, $2116)|0;
        $2117 = (($2115) + 114)|0;
        HEAP32[40668] = $2117;
       }
       $2118 = HEAP32[65441]|0;
       $2119 = (_GetScreenWidth()|0);
       $2120 = (($2119|0) / 3)&-1;
       $2121 = ($2118|0)>($2120|0);
       if ($2121) {
        $2122 = HEAP32[65441]|0;
        $2123 = (($2122) + -2)|0;
        HEAP32[65441] = $2123;
       }
       $2124 = HEAP32[65441]|0;
       $2125 = (_GetScreenWidth()|0);
       $2126 = (($2125|0) / 3)&-1;
       $2127 = ($2124|0)<($2126|0);
       if ($2127) {
        $2128 = HEAP32[65441]|0;
        $2129 = (($2128) + 1)|0;
        HEAP32[65441] = $2129;
       }
       $2130 = HEAP32[40558]|0;
       $2131 = HEAP32[40563]|0;
       $2132 = (($2131>>>0) / 5)&-1;
       $2133 = ($2130|0)>($2132|0);
       if ($2133) {
        $$sink1114 = -1;$$sink1115 = -1;$$sink1116 = -1;
       } else {
        $2134 = HEAP32[40596]|0;
        $2135 = (($2134) + 1)|0;
        HEAP32[40596] = $2135;
        $2136 = ($2135|0)>(4);
        if ($2136) {
         $2137 = HEAP32[83706]|0;
         $2138 = ($2137|0)==(0);
         $2139 = $2138&1;
         HEAP32[83706] = $2139;
         HEAP32[40596] = 0;
        }
        $2140 = HEAP32[83706]|0;
        $2141 = ($2140|0)!=(0);
        $$1123 = $2141 ? -26 : -1;
        $$1124 = $2141 ? 41 : -1;
        $$1125 = $2141 ? 55 : -1;
        $$sink1114 = $$1125;$$sink1115 = $$1124;$$sink1116 = $$1123;
       }
       HEAP8[340304] = $$sink1116;
       HEAP8[(340305)>>0] = $$sink1115;
       HEAP8[(340306)>>0] = $$sink1114;
       HEAP8[(340307)>>0] = -1;
       $2142 = (_IsGestureDetected(4)|0);
       $2143 = ($2142|0)==(0);
       if ($2143) {
        $2144 = (_GetGestureDetected()|0);
        $2145 = ($2144|0)==(8);
        if ($2145) {
         label = 522;
        }
       } else {
        label = 522;
       }
       do {
        if ((label|0) == 522) {
         _GetTouchPosition($11,0);
         ;HEAP32[$$byval_copy100>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$11+4>>2]|0;
         ;HEAP32[$$byval_copy101>>2]=HEAP32[162496>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[162496+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[162496+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[162496+12>>2]|0;
         $2146 = (_CheckCollisionPointRec($$byval_copy100,$$byval_copy101)|0);
         $2147 = ($2146|0)==(0);
         if ($2147) {
          break;
         }
         $2148 = HEAP32[(261768)>>2]|0;
         $2149 = (($2148) + 10)|0;
         HEAP32[(261768)>>2] = $2149;
        }
       } while(0);
       $2150 = (_IsGestureDetected(4)|0);
       $2151 = ($2150|0)==(0);
       if ($2151) {
        $2152 = (_GetGestureDetected()|0);
        $2153 = ($2152|0)==(8);
        if (!($2153)) {
         break;
        }
       }
       _GetTouchPosition($12,0);
       ;HEAP32[$$byval_copy100>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy100+4>>2]=HEAP32[$12+4>>2]|0;
       ;HEAP32[$$byval_copy101>>2]=HEAP32[162512>>2]|0;HEAP32[$$byval_copy101+4>>2]=HEAP32[162512+4>>2]|0;HEAP32[$$byval_copy101+8>>2]=HEAP32[162512+8>>2]|0;HEAP32[$$byval_copy101+12>>2]=HEAP32[162512+12>>2]|0;
       $2154 = (_CheckCollisionPointRec($$byval_copy100,$$byval_copy101)|0);
       $2155 = ($2154|0)==(0);
       if ($2155) {
        break;
       }
       $2156 = HEAP32[(261768)>>2]|0;
       $2157 = (($2156) + -10)|0;
       HEAP32[(261768)>>2] = $2157;
      } else {
       HEAPF32[40560] = 0.0;
       $2070 = HEAP32[40561]|0;
       $2071 = (($2070) + 1)|0;
       HEAP32[40561] = $2071;
       $2072 = +HEAPF32[83704];
       $2073 = $2072 + 1.0;
       HEAPF32[83704] = $2073;
       $2074 = HEAP32[83705]|0;
       $2075 = (($2074) + 1)|0;
       HEAP32[83705] = $2075;
       $2076 = HEAP32[83661]|0;
       $2077 = (($2076) + 1)|0;
       HEAP32[83661] = $2077;
       $2078 = HEAP32[40561]|0;
       $2079 = (+($2078|0));
       $2080 = HEAP32[83659]|0;
       $2081 = (+($2080|0));
       $2082 = (+_LinearEaseIn($2079,$2081,-100.0,120.0));
       $2083 = (~~(($2082)));
       HEAP32[6801] = $2083;
       $2084 = HEAP32[83661]|0;
       $2085 = ($2084|0)>(23);
       $2086 = HEAP32[83660]|0;
       if ($2085) {
        $2087 = (($2086) + 1)|0;
        HEAP32[83660] = $2087;
        HEAP32[83661] = 0;
        $2089 = $2087;
       } else {
        $2089 = $2086;
       }
       $2088 = ($2089|0)<(2);
       if ($2088) {
        $2090 = HEAP32[(162696)>>2]|0;
        $2091 = Math_imul($2090, $2089)|0;
        $2092 = (($2091) + 772)|0;
        HEAP32[40672] = $2092;
       }
       $2093 = HEAP32[83705]|0;
       $2094 = ($2093|0)>(4);
       if ($2094) {
        $2095 = HEAP32[83706]|0;
        $2096 = ($2095|0)==(0);
        $2097 = $2096&1;
        HEAP32[83706] = $2097;
        HEAP32[83705] = 0;
       }
       $2098 = HEAP32[83706]|0;
       $2099 = ($2098|0)!=(0);
       $$1117 = $2099 ? -26 : -1;
       $$1118 = $2099 ? 41 : -1;
       $$1119 = $2099 ? 55 : -1;
       $$1120 = $2099 ? -1 : -26;
       $$1121 = $2099 ? -1 : 41;
       $$1122 = $2099 ? -1 : 55;
       HEAP8[340304] = $$1117;
       HEAP8[(340305)>>0] = $$1118;
       HEAP8[(340306)>>0] = $$1119;
       HEAP8[(340307)>>0] = -1;
       HEAP8[340328] = $$1120;
       HEAP8[(340329)>>0] = $$1121;
       HEAP8[(340330)>>0] = $$1122;
       HEAP8[(340331)>>0] = -1;
       $2100 = HEAP32[40561]|0;
       $2101 = ($2100|0)>(119);
       if (!($2101)) {
        break;
       }
       HEAP32[40577] = 0;
       HEAP32[83661] = 0;
       HEAP32[83660] = 0;
       HEAP32[57506] = 1;
       HEAP32[40561] = 0;
       $2102 = HEAP32[40554]|0;
       $2103 = (($2102) + 15)|0;
       HEAP32[40554] = $2103;
      }
     } while(0);
     HEAPF32[40556] = 0.0;
     $2158 = HEAP32[40553]|0;
     $2159 = (($2158) + 1)|0;
     HEAP32[40553] = $2159;
     break;
    }
    case 4:  {
     $2160 = HEAP32[40576]|0;
     $2161 = (+($2160|0));
     $2162 = $2161 * 60.0;
     $2163 = $2162 / 60.0;
     $2164 = HEAP32[65441]|0;
     $2165 = (+($2164|0));
     $2166 = $2165 - $2163;
     $2167 = (~~(($2166)));
     HEAP32[65441] = $2167;
     $2168 = HEAP32[83647]|0;
     $2169 = (($2168) + -2)|0;
     HEAP32[83647] = $2169;
     $2170 = HEAP32[(261768)>>2]|0;
     $2171 = (($2170) - ($2169))|0;
     HEAP32[(261768)>>2] = $2171;
     $2172 = HEAP32[40551]|0;
     $2173 = (($2172) + 1)|0;
     HEAP32[40551] = $2173;
     $2174 = HEAP32[40553]|0;
     $2175 = (($2174) + 1)|0;
     HEAP32[40553] = $2175;
     break;
    }
    default: {
    }
    }
   } while(0);
   $2176 = HEAP32[65441]|0;
   $2177 = HEAP32[(261772)>>2]|0;
   $2178 = (0 - ($2177))|0;
   $2179 = ($2176|0)>($2178|0);
   if (!($2179)) {
    HEAP32[40573] = 0;
    HEAP32[40564] = 0;
    HEAP32[6798] = 4;
   }
   $2180 = HEAP32[(261768)>>2]|0;
   $2181 = HEAP32[(261776)>>2]|0;
   $2182 = (($2181) + ($2180))|0;
   $2183 = (_GetScreenHeight()|0);
   $2184 = ($2182|0)<($2183|0);
   do {
    if (!($2184)) {
     $2185 = HEAP32[83633]|0;
     $2186 = ($2185|0)==(2);
     if ($2186) {
      $2187 = (_GetScreenHeight()|0);
      $2188 = HEAP32[(261776)>>2]|0;
      $2189 = (($2187) - ($2188))|0;
      HEAP32[(261768)>>2] = $2189;
      break;
     } else {
      HEAP32[40573] = 0;
      HEAP32[40564] = 0;
      HEAP32[6798] = 4;
      break;
     }
    }
   } while(0);
   $2190 = HEAP32[(261768)>>2]|0;
   $2191 = ($2190|0)<(1);
   $2192 = HEAP32[83633]|0;
   $2193 = ($2192|0)==(2);
   $or$cond103 = $2191 & $2193;
   if ($or$cond103) {
    HEAP32[(261768)>>2] = 0;
   }
   $2194 = HEAP32[65441]|0;
   $2195 = (_GetScreenWidth()|0);
   $2196 = HEAP32[(261772)>>2]|0;
   $2197 = (($2195) - ($2196))|0;
   $2198 = ($2194|0)<($2197|0);
   if (!($2198)) {
    $2199 = (_GetScreenWidth()|0);
    $2200 = HEAP32[(261772)>>2]|0;
    $2201 = (($2199) - ($2200))|0;
    HEAP32[65441] = $2201;
   }
   $2202 = HEAP32[(261768)>>2]|0;
   $2203 = ($2202|0)<(-31);
   if ($2203) {
    HEAP32[(261768)>>2] = -32;
   }
   $2204 = HEAP32[40554]|0;
   $2205 = HEAP32[40555]|0;
   $2206 = ($2204|0)>($2205|0);
   if (!($2206)) {
    STACKTOP = sp;return;
   }
   $2207 = HEAP32[40577]|0;
   $2208 = ($2207|0)==(0);
   if ($2208) {
    _BambooSpawn();
    $2209 = HEAP32[83633]|0;
    $2210 = ($2209|0)!=(2);
    $2211 = HEAP32[40602]|0;
    $2212 = ($2211|0)>(599);
    $or$cond105 = $2210 & $2212;
    if ($or$cond105) {
     _EagleSpawn();
    }
    $2213 = HEAP32[83631]|0;
    switch ($2213|0) {
    case 0:  {
     _IceSpawn();
     $2214 = +HEAPF32[83635];
     $2215 = (~~(($2214)));
     $2216 = (($2215) + 30)|0;
     _OwlSpawn($2216);
     break;
    }
    case 1:  {
     _ResinSpawn();
     $2217 = HEAP32[83633]|0;
     $2218 = ($2217|0)==(2);
     if (!($2218)) {
      _BeeSpawn();
     }
     $2219 = +HEAPF32[83635];
     $2220 = (~~(($2219)));
     $2221 = (($2220) + 30)|0;
     _DingoSpawn($2221);
     break;
    }
    case 2:  {
     _FireSpawn();
     $2222 = +HEAPF32[83635];
     $2223 = (~~(($2222)));
     $2224 = (($2223) + 30)|0;
     _SnakeSpawn($2224);
     break;
    }
    case 3:  {
     _WindSpawn();
     $2225 = +HEAPF32[83635];
     $2226 = (~~(($2225)));
     $2227 = (($2226) + 30)|0;
     _SnakeSpawn($2227);
     break;
    }
    default: {
    }
    }
    _LeafSpawn();
   }
   HEAP32[40554] = 0;
   $2228 = (_GetRandomValue(35,85)|0);
   HEAP32[40555] = $2228;
   STACKTOP = sp;return;
  } else {
   $2230 = $43;
  }
 } else {
  $42 = HEAP32[40573]|0;
  $2230 = $42;
 }
 $2229 = $2230 | $41;
 $2231 = ($2229|0)==(0);
 if (!($2231)) {
  STACKTOP = sp;return;
 }
 $2232 = HEAP32[6668]|0;
 $2233 = HEAP32[6669]|0;
 $2234 = ($2232|0)>($2233|0);
 if ($2234) {
  HEAP32[6669] = $2232;
 }
 $2235 = HEAP32[40576]|0;
 $2236 = HEAP32[65441]|0;
 $2237 = (($2236) - ($2235))|0;
 HEAP32[65441] = $2237;
 $2238 = HEAP32[83647]|0;
 $2239 = (($2238) + -1)|0;
 HEAP32[83647] = $2239;
 $2240 = HEAP32[(261768)>>2]|0;
 $2241 = (($2240) - ($2239))|0;
 HEAP32[(261768)>>2] = $2241;
 $2242 = (_GetScreenHeight()|0);
 $2243 = ($2241|0)<($2242|0);
 if ($2243) {
  STACKTOP = sp;return;
 }
 $2244 = HEAP32[83707]|0;
 $2245 = (($2244) + 1)|0;
 HEAP32[83707] = $2245;
 HEAP32[40552] = 1;
 STACKTOP = sp;return;
}
function _ColorTransition($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sroa$4$0$$sroa_idx = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$6$0$$sroa_idx = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (+($3|0));
 $5 = HEAP8[$1>>0]|0;
 $6 = (+($5&255));
 $7 = HEAP8[$2>>0]|0;
 $8 = $7&255;
 $9 = $5&255;
 $10 = (($8) - ($9))|0;
 $11 = (+($10|0));
 $12 = (+_LinearEaseIn($4,$6,$11,200.0));
 $13 = (~~(($12))&255);
 $14 = ((($1)) + 1|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = (+($15&255));
 $17 = ((($2)) + 1|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $15&255;
 $21 = (($19) - ($20))|0;
 $22 = (+($21|0));
 $23 = (+_LinearEaseIn($4,$16,$22,200.0));
 $24 = (~~(($23))&255);
 $25 = ((($1)) + 2|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = (+($26&255));
 $28 = ((($2)) + 2|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $26&255;
 $32 = (($30) - ($31))|0;
 $33 = (+($32|0));
 $34 = (+_LinearEaseIn($4,$27,$33,200.0));
 $35 = (~~(($34))&255);
 HEAP8[$0>>0] = $13;
 $$sroa$4$0$$sroa_idx = ((($0)) + 1|0);
 HEAP8[$$sroa$4$0$$sroa_idx>>0] = $24;
 $$sroa$5$0$$sroa_idx = ((($0)) + 2|0);
 HEAP8[$$sroa$5$0$$sroa_idx>>0] = $35;
 $$sroa$6$0$$sroa_idx = ((($0)) + 3|0);
 HEAP8[$$sroa$6$0$$sroa_idx>>0] = -1;
 return;
}
function _LinearEaseIn($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0 * $2;
 $5 = $4 / $3;
 $6 = $5 + $1;
 return (+$6);
}
function _BambooSpawn() {
 var $$01213 = 0, $$014 = 0, $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01213 = 0;$$014 = 0;
 while(1) {
  $0 = (258452 + ($$014<<2)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ($$01213|0)<(1);
  $or$cond = $3 & $2;
  if ($or$cond) {
   $4 = (($$01213) + 1)|0;
   $5 = (258196 + ($$014<<4)|0);
   $6 = (((258196 + ($$014<<4)|0)) + 4|0);
   HEAP32[$6>>2] = 0;
   $7 = (_GetScreenWidth()|0);
   HEAP32[$5>>2] = $7;
   HEAP32[$0>>2] = 1;
   $$1 = $4;
  } else {
   $$1 = $$01213;
  }
  $8 = (($$014) + 1)|0;
  $exitcond = ($8|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $$01213 = $$1;$$014 = $8;
  }
 }
 return;
}
function _EagleSpawn() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_GetRandomValue(0,100)|0);
 $1 = ($0|0)>(5);
 $2 = HEAP32[65460]|0;
 $3 = HEAP32[40579]|0;
 $4 = $3 | $2;
 $5 = ($4|0)!=(0);
 $6 = $1 | $5;
 if ($6) {
  return;
 }
 HEAP32[40602] = 0;
 $7 = (_GetScreenWidth()|0);
 HEAP32[65456] = $7;
 $8 = HEAP32[(261768)>>2]|0;
 HEAP32[(261828)>>2] = $8;
 $9 = (_GetScreenWidth()|0);
 $10 = HEAP32[(261828)>>2]|0;
 $11 = (($10) + 40)|0;
 HEAP32[83642] = $9;
 HEAP32[(334572)>>2] = $11;
 HEAP32[(334576)>>2] = 0;
 HEAP32[(334580)>>2] = 0;
 HEAP32[65460] = 0;
 HEAP32[40578] = 1;
 HEAP32[40579] = 1;
 return;
}
function _IceSpawn() {
 var $$0131 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_GetRandomValue(0,100)|0);
 $1 = ($0|0)<(31);
 if ($1) {
  $$0131 = 0;$$02 = 0;
 } else {
  return;
 }
 while(1) {
  $2 = (258956 + ($$02<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  $5 = ($$0131|0)<(1);
  $or$cond = $5 & $4;
  if ($or$cond) {
   $6 = (((258796 + ($$02<<4)|0)) + 4|0);
   HEAP32[$6>>2] = 0;
   $7 = (_GetScreenWidth()|0);
   $8 = (($7) + 5)|0;
   $9 = (258796 + ($$02<<4)|0);
   HEAP32[$9>>2] = $8;
   HEAP32[$2>>2] = 1;
   $10 = (($$0131) + 1)|0;
   $$1 = $10;
  } else {
   $$1 = $$0131;
  }
  $11 = (($$02) + 1)|0;
  $exitcond = ($11|0)==(10);
  if ($exitcond) {
   break;
  } else {
   $$0131 = $$1;$$02 = $11;
  }
 }
 return;
}
function _OwlSpawn($0) {
 $0 = $0|0;
 var $$03132 = 0, $$033 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = 26072;
 $2 = $1;
 HEAP32[$2>>2] = -1;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = -1;
 $5 = (_GetRandomValue(0,100)|0);
 $6 = ($5|0)>($0|0);
 if ($6) {
  return;
 } else {
  $$03132 = 0;$$033 = 0;
 }
 while(1) {
  $7 = (260420 + ($$033<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = (260484 + ($$033<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   $13 = ($$03132|0)<(1);
   $or$cond = $13 & $12;
   if ($or$cond) {
    $14 = (_GetRandomValue(1,3)|0);
    $15 = ($$03132|0)==(0);
    if ($15) {
     $16 = (26072 + ($$03132<<2)|0);
     HEAP32[$16>>2] = $14;
    }
    $17 = (_GetScreenWidth()|0);
    $18 = (($17) + -15)|0;
    $19 = (260164 + ($$033<<4)|0);
    HEAP32[$19>>2] = $18;
    $20 = (_GetScreenHeight()|0);
    $21 = (($20|0) / 5)&-1;
    $22 = Math_imul($21, $14)|0;
    $23 = (($22) + 25)|0;
    $24 = (((260164 + ($$033<<4)|0)) + 4|0);
    HEAP32[$24>>2] = $23;
    HEAP32[$7>>2] = 1;
    $25 = HEAP32[$19>>2]|0;
    $26 = (+($25|0));
    $27 = (260612 + ($$033<<3)|0);
    HEAPF32[$27>>2] = $26;
    $28 = (($22) + 89)|0;
    $29 = (+($28|0));
    $30 = (((260612 + ($$033<<3)|0)) + 4|0);
    HEAPF32[$30>>2] = $29;
    HEAP32[$10>>2] = 1;
    $31 = (($$03132) + 1)|0;
    $$1 = $31;
   } else {
    $$1 = $$03132;
   }
  } else {
   $$1 = $$03132;
  }
  $32 = (($$033) + 1)|0;
  $exitcond = ($32|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $$03132 = $$1;$$033 = $32;
  }
 }
 return;
}
function _ResinSpawn() {
 var $$0173 = 0, $$0182 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_GetRandomValue(0,100)|0);
 $1 = ($0|0)<(31);
 if ($1) {
  $$0173 = 0;$$0182 = 0;
 } else {
  return;
 }
 while(1) {
  $2 = (258996 + ($$0173<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  $5 = ($$0182|0)<(1);
  $or$cond = $5 & $4;
  if ($or$cond) {
   while(1) {
    $6 = (_GetRandomValue(0,4)|0);
    $7 = (_CheckArrayValue($6)|0);
    $8 = ($7|0)==(0);
    if ($8) {
     break;
    }
   }
   $9 = (_GetScreenHeight()|0);
   $10 = (($9|0) / 5)&-1;
   $11 = Math_imul($10, $6)|0;
   $12 = (($11) + 25)|0;
   $13 = (((259036 + ($$0173<<4)|0)) + 4|0);
   HEAP32[$13>>2] = $12;
   $14 = (_GetScreenWidth()|0);
   $15 = (($14) + 5)|0;
   $16 = (259036 + ($$0173<<4)|0);
   HEAP32[$16>>2] = $15;
   HEAP32[$2>>2] = 1;
   $17 = (($$0182) + 1)|0;
   $$1 = $17;
  } else {
   $$1 = $$0182;
  }
  $18 = (($$0173) + 1)|0;
  $exitcond = ($18|0)==(10);
  if ($exitcond) {
   break;
  } else {
   $$0173 = $18;$$0182 = $$1;
  }
 }
 return;
}
function _BeeSpawn() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_GetRandomValue(0,100)|0);
 $1 = ($0|0)>(10);
 $2 = HEAP32[65449]|0;
 $3 = HEAP32[83651]|0;
 $4 = $3 | $2;
 $5 = ($4|0)!=(0);
 $6 = $1 | $5;
 if ($6) {
  return;
 }
 $7 = (_GetScreenWidth()|0);
 HEAP32[65445] = $7;
 $8 = (_GetScreenHeight()|0);
 $9 = HEAP32[(261792)>>2]|0;
 $10 = (($8) + -40)|0;
 $11 = (($10) - ($9))|0;
 $12 = (_GetRandomValue(40,$11)|0);
 HEAP32[(261784)>>2] = $12;
 $13 = (_GetScreenWidth()|0);
 $14 = HEAP32[(261784)>>2]|0;
 $15 = (($14) + 30)|0;
 HEAP32[83652] = $13;
 HEAP32[(334612)>>2] = $15;
 HEAP32[(334616)>>2] = 0;
 HEAP32[(334620)>>2] = 0;
 HEAP32[65449] = 0;
 HEAP32[83651] = 1;
 return;
}
function _DingoSpawn($0) {
 $0 = $0|0;
 var $$02627 = 0, $$028 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_GetRandomValue(0,100)|0);
 $2 = ($1|0)>($0|0);
 if ($2) {
  return;
 } else {
  $$02627 = 0;$$028 = 0;
 }
 while(1) {
  $3 = (260036 + ($$028<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  $6 = ($$02627|0)<(1);
  $or$cond = $6 & $5;
  if ($or$cond) {
   $7 = (_GetRandomValue(1,3)|0);
   $8 = ($$02627|0)==(0);
   if ($8) {
    $9 = (26072 + ($$02627<<2)|0);
    HEAP32[$9>>2] = $7;
   }
   $10 = (_GetScreenWidth()|0);
   $11 = (($10) + -15)|0;
   $12 = (259780 + ($$028<<4)|0);
   HEAP32[$12>>2] = $11;
   $13 = (_GetScreenHeight()|0);
   $14 = (($13|0) / 5)&-1;
   $15 = Math_imul($14, $7)|0;
   $16 = (($15) + 25)|0;
   $17 = (((259780 + ($$028<<4)|0)) + 4|0);
   HEAP32[$17>>2] = $16;
   HEAP32[$3>>2] = 1;
   $18 = (260100 + ($$028<<2)|0);
   HEAP32[$18>>2] = 0;
   $19 = (($$02627) + 1)|0;
   $$1 = $19;
  } else {
   $$1 = $$02627;
  }
  $20 = (($$028) + 1)|0;
  $exitcond = ($20|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $$02627 = $$1;$$028 = $20;
  }
 }
 return;
}
function _FireSpawn() {
 var $$0141 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_GetRandomValue(0,100)|0);
 $1 = ($0|0)<(31);
 if ($1) {
  $$0141 = 0;$$02 = 0;
 } else {
  return;
 }
 while(1) {
  $2 = (258676 + ($$02<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  $5 = ($$0141|0)<(1);
  $or$cond = $5 & $4;
  if ($or$cond) {
   $6 = (_GetScreenHeight()|0);
   $7 = (($6) + -30)|0;
   $8 = (((258516 + ($$02<<4)|0)) + 4|0);
   HEAP32[$8>>2] = $7;
   $9 = (_GetScreenWidth()|0);
   $10 = (($9) + -5)|0;
   $11 = (258516 + ($$02<<4)|0);
   HEAP32[$11>>2] = $10;
   HEAP32[$2>>2] = 1;
   $12 = (258716 + ($$02<<2)|0);
   HEAP32[$12>>2] = 0;
   $13 = (($$0141) + 1)|0;
   $$1 = $13;
  } else {
   $$1 = $$0141;
  }
  $14 = (($$02) + 1)|0;
  $exitcond = ($14|0)==(10);
  if ($exitcond) {
   break;
  } else {
   $$0141 = $$1;$$02 = $14;
  }
 }
 return;
}
function _SnakeSpawn($0) {
 $0 = $0|0;
 var $$02627 = 0, $$028 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = 26072;
 $2 = $1;
 HEAP32[$2>>2] = -1;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = -1;
 $5 = (_GetRandomValue(0,100)|0);
 $6 = ($5|0)>($0|0);
 if ($6) {
  return;
 } else {
  $$02627 = 0;$$028 = 0;
 }
 while(1) {
  $7 = (259652 + ($$028<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  $10 = ($$02627|0)<(1);
  $or$cond = $10 & $9;
  if ($or$cond) {
   $11 = (_GetRandomValue(0,4)|0);
   $12 = ($$02627|0)==(0);
   if ($12) {
    $13 = (26072 + ($$02627<<2)|0);
    HEAP32[$13>>2] = $11;
   }
   $14 = (_GetScreenWidth()|0);
   $15 = (($14) + -15)|0;
   $16 = (259396 + ($$028<<4)|0);
   HEAP32[$16>>2] = $15;
   $17 = (_GetScreenHeight()|0);
   $18 = (($17|0) / 5)&-1;
   $19 = Math_imul($18, $11)|0;
   $20 = (($19) + 25)|0;
   $21 = (((259396 + ($$028<<4)|0)) + 4|0);
   HEAP32[$21>>2] = $20;
   HEAP32[$7>>2] = 1;
   $22 = (259716 + ($$028<<2)|0);
   HEAP32[$22>>2] = 0;
   $23 = (($$02627) + 1)|0;
   $$1 = $23;
  } else {
   $$1 = $$02627;
  }
  $24 = (($$028) + 1)|0;
  $exitcond = ($24|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $$02627 = $$1;$$028 = $24;
  }
 }
 return;
}
function _WindSpawn() {
 var $$0173 = 0, $$0182 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_GetRandomValue(0,100)|0);
 $1 = ($0|0)<(31);
 if ($1) {
  $$0173 = 0;$$0182 = 0;
 } else {
  return;
 }
 while(1) {
  $2 = (259196 + ($$0173<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  $5 = ($$0182|0)<(1);
  $or$cond = $5 & $4;
  if ($or$cond) {
   while(1) {
    $6 = (_GetRandomValue(0,4)|0);
    $7 = (_CheckArrayValue($6)|0);
    $8 = ($7|0)==(0);
    if ($8) {
     break;
    }
   }
   $9 = (_GetScreenHeight()|0);
   $10 = (($9|0) / 5)&-1;
   $11 = Math_imul($10, $6)|0;
   $12 = (($11) + 25)|0;
   $13 = (((259236 + ($$0173<<4)|0)) + 4|0);
   HEAP32[$13>>2] = $12;
   $14 = (_GetScreenWidth()|0);
   $15 = (($14) + 5)|0;
   $16 = (259236 + ($$0173<<4)|0);
   HEAP32[$16>>2] = $15;
   HEAP32[$2>>2] = 1;
   $17 = (($$0182) + 1)|0;
   $$1 = $17;
  } else {
   $$1 = $$0182;
  }
  $18 = (($$0173) + 1)|0;
  $exitcond = ($18|0)==(10);
  if ($exitcond) {
   break;
  } else {
   $$0173 = $18;$$0182 = $$1;
  }
 }
 return;
}
function _LeafSpawn() {
 var $$$sink = 0, $$07076 = 0, $$078 = 0, $$1 = 0, $$169 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$sink = 0, $$sink$sink$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_GetRandomValue(0,2)|0);
 $1 = 26056;
 $2 = $1;
 HEAP32[$2>>2] = -1;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = -1;
 $$07076 = 0;$$078 = 0;
 while(1) {
  $5 = (262092 + ($$07076<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0);
  $8 = ($$078|0)>($0|0);
  $or$cond = $8 | $7;
  if ($or$cond) {
   $$1 = $$078;
  } else {
   $9 = (_GetRandomValue(0,4)|0);
   $10 = (_GetRandomValue(0,99)|0);
   $11 = (_GetRandomValue(0,1)|0);
   $12 = (334712 + ($$07076<<2)|0);
   HEAP32[$12>>2] = $11;
   L5: do {
    switch ($$078|0) {
    case 0:  {
     $19 = (_CheckArrayValue($9)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $$3 = $9;
      label = 16;
     } else {
      while(1) {
       $21 = (_GetRandomValue(0,4)|0);
       $22 = (_CheckArrayValue($21)|0);
       $23 = ($22|0)==(0);
       if ($23) {
        $$3 = $21;
        label = 16;
        break;
       }
      }
     }
     break;
    }
    case 1:  {
     $17 = (($$078) + -1)|0;
     $18 = (26056 + ($17<<2)|0);
     $$169 = $9;
     while(1) {
      $24 = HEAP32[$18>>2]|0;
      $25 = ($$169|0)==($24|0);
      if (!($25)) {
       $26 = (_CheckArrayValue($$169)|0);
       $27 = ($26|0)==(0);
       if ($27) {
        $$3 = $$169;
        label = 16;
        break L5;
       }
      }
      $28 = (_GetRandomValue(0,4)|0);
      $$169 = $28;
     }
     break;
    }
    case 2:  {
     $13 = (($$078) + -1)|0;
     $14 = (26056 + ($13<<2)|0);
     $15 = (($$078) + -2)|0;
     $16 = (26056 + ($15<<2)|0);
     $$2 = $9;
     while(1) {
      $29 = HEAP32[$14>>2]|0;
      $30 = ($$2|0)==($29|0);
      if (!($30)) {
       $31 = HEAP32[$16>>2]|0;
       $32 = ($$2|0)==($31|0);
       if (!($32)) {
        $33 = (_CheckArrayValue($$2)|0);
        $34 = ($33|0)==(0);
        if ($34) {
         $$3 = $$2;
         label = 16;
         break L5;
        }
       }
      }
      $35 = (_GetRandomValue(0,4)|0);
      $$2 = $35;
     }
     break;
    }
    default: {
     $$4 = $9;
    }
    }
   } while(0);
   if ((label|0) == 16) {
    label = 0;
    $36 = (26056 + ($$078<<2)|0);
    HEAP32[$36>>2] = $$3;
    $$4 = $$3;
   }
   $37 = (_GetScreenHeight()|0);
   $38 = (($37|0) / 5)&-1;
   $39 = Math_imul($38, $$4)|0;
   $40 = (($39) + 30)|0;
   $41 = (((261868 + ($$07076<<4)|0)) + 4|0);
   HEAP32[$41>>2] = $40;
   $42 = (_GetScreenWidth()|0);
   $43 = (($42) + -18)|0;
   $44 = (261868 + ($$07076<<4)|0);
   HEAP32[$44>>2] = $43;
   HEAP32[$5>>2] = 1;
   $45 = ($10|0)<(25);
   if ($45) {
    $$sink$sink$sink = 0;
   } else {
    $46 = ($10|0)<(51);
    $47 = ($10|0)<(76);
    $$sink = $47 ? 2 : 3;
    $$$sink = $46 ? 1 : $$sink;
    $$sink$sink$sink = $$$sink;
   }
   $48 = (262148 + ($$07076<<2)|0);
   HEAP32[$48>>2] = $$sink$sink$sink;
   $49 = (($$078) + 1)|0;
   $$1 = $49;
  }
  $50 = (($$07076) + 1)|0;
  $exitcond = ($50|0)==(14);
  if ($exitcond) {
   break;
  } else {
   $$07076 = $50;$$078 = $$1;
  }
 }
 return;
}
function _CheckArrayValue($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[6518]|0;
 $2 = ($1|0)==($0|0);
 $3 = HEAP32[(26076)>>2]|0;
 $4 = ($3|0)==($0|0);
 $or$cond = $2 | $4;
 $5 = $or$cond&1;
 return ($5|0);
}
function _DrawGameplayScreen() {
 var $$011051147 = 0, $$011061169 = 0, $$011071168 = 0, $$011081167 = 0, $$011091166 = 0, $$011101165 = 0, $$011111164 = 0, $$011121163 = 0, $$011131162 = 0, $$011141161 = 0, $$011151160 = 0, $$011161158 = 0, $$011171157 = 0, $$011181156 = 0, $$011191155 = 0, $$011201154 = 0, $$011211153 = 0, $$011221152 = 0, $$011231151 = 0, $$011241150 = 0;
 var $$011251149 = 0, $$011261148 = 0, $$01146 = 0, $$byval_copy319 = 0, $$byval_copy365 = 0, $$byval_copy366 = 0, $$sink6$sink11 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0;
 var $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0;
 var $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0;
 var $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0.0, $1055 = 0, $1056 = 0.0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0;
 var $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0.0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0.0, $108 = 0, $1080 = 0;
 var $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0;
 var $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0;
 var $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0;
 var $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0.0, $1141 = 0, $1142 = 0, $1143 = 0.0, $1144 = 0, $1145 = 0, $1146 = 0.0, $1147 = 0.0, $1148 = 0, $1149 = 0.0, $115 = 0, $1150 = 0, $1151 = 0.0, $1152 = 0;
 var $1153 = 0, $1154 = 0.0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0.0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0.0, $1163 = 0, $1164 = 0, $1165 = 0.0, $1166 = 0.0, $1167 = 0, $1168 = 0.0, $1169 = 0, $117 = 0, $1170 = 0.0;
 var $1171 = 0, $1172 = 0, $1173 = 0.0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0.0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0.0, $1182 = 0, $1183 = 0, $1184 = 0.0, $1185 = 0.0, $1186 = 0, $1187 = 0.0, $1188 = 0, $1189 = 0.0;
 var $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0.0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0.0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0.0, $1201 = 0, $1202 = 0, $1203 = 0.0, $1204 = 0.0, $1205 = 0, $1206 = 0.0;
 var $1207 = 0, $1208 = 0.0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0.0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0.0, $1217 = 0, $1218 = 0, $1219 = 0.0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0.0, $1223 = 0.0, $1224 = 0;
 var $1225 = 0.0, $1226 = 0, $1227 = 0.0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0.0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0;
 var $1243 = 0.0, $1244 = 0, $1245 = 0, $1246 = 0.0, $1247 = 0, $1248 = 0, $1249 = 0.0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0.0, $1253 = 0, $1254 = 0, $1255 = 0.0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0;
 var $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0.0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0.0, $1272 = 0, $1273 = 0, $1274 = 0.0, $1275 = 0.0, $1276 = 0, $1277 = 0.0, $1278 = 0, $1279 = 0.0;
 var $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0.0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0.0, $1296 = 0, $1297 = 0;
 var $1298 = 0.0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0.0, $1302 = 0.0, $1303 = 0, $1304 = 0.0, $1305 = 0, $1306 = 0.0, $1307 = 0, $1308 = 0, $1309 = 0.0, $131 = 0, $1310 = 0, $1311 = 0.0, $1312 = 0, $1313 = 0, $1314 = 0;
 var $1315 = 0, $1316 = 0, $1317 = 0.0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0.0, $1321 = 0, $1322 = 0, $1323 = 0.0, $1324 = 0.0, $1325 = 0, $1326 = 0.0, $1327 = 0, $1328 = 0.0, $1329 = 0.0, $133 = 0, $1330 = 0, $1331 = 0.0, $1332 = 0;
 var $1333 = 0, $1334 = 0.0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0.0, $1343 = 0.0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0.0, $135 = 0, $1350 = 0;
 var $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0.0, $1359 = 0.0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0.0, $1366 = 0.0, $1367 = 0, $1368 = 0, $1369 = 0;
 var $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0.0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0;
 var $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0.0, $1392 = 0.0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0.0, $1403 = 0, $1404 = 0;
 var $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0;
 var $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0.0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0.0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0;
 var $1441 = 0, $1442 = 0, $1443 = 0.0, $1444 = 0.0, $1445 = 0, $1446 = 0, $1447 = 0.0, $1448 = 0, $1449 = 0.0, $145 = 0, $1450 = 0.0, $1451 = 0.0, $1452 = 0, $1453 = 0.0, $1454 = 0.0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0.0, $1459 = 0;
 var $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0.0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0;
 var $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0.0, $1482 = 0.0, $1483 = 0, $1484 = 0, $1485 = 0.0, $1486 = 0, $1487 = 0.0, $1488 = 0.0, $1489 = 0.0, $149 = 0, $1490 = 0, $1491 = 0.0, $1492 = 0.0, $1493 = 0, $1494 = 0, $1495 = 0;
 var $1496 = 0.0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0.0, $1507 = 0.0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0.0, $1511 = 0, $1512 = 0.0;
 var $1513 = 0.0, $1514 = 0.0, $1515 = 0, $1516 = 0.0, $1517 = 0.0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0.0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0;
 var $1531 = 0.0, $1532 = 0.0, $1533 = 0, $1534 = 0, $1535 = 0.0, $1536 = 0, $1537 = 0.0, $1538 = 0.0, $1539 = 0.0, $154 = 0, $1540 = 0, $1541 = 0.0, $1542 = 0.0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0.0, $1547 = 0, $1548 = 0, $1549 = 0;
 var $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0.0, $1562 = 0, $1563 = 0.0, $1564 = 0.0, $1565 = 0, $1566 = 0.0, $1567 = 0;
 var $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0.0, $1573 = 0.0, $1574 = 0.0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0.0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0.0;
 var $1586 = 0.0, $1587 = 0.0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0.0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0.0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0;
 var $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0.0, $1612 = 0, $1613 = 0.0, $1614 = 0.0, $1615 = 0, $1616 = 0.0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0;
 var $1621 = 0, $1622 = 0, $1623 = 0.0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0.0, $1628 = 0, $1629 = 0.0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0;
 var $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0.0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0.0, $1649 = 0, $165 = 0, $1650 = 0.0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0;
 var $1658 = 0, $1659 = 0.0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0.0, $1664 = 0, $1665 = 0.0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0;
 var $1676 = 0, $1677 = 0.0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0.0, $1682 = 0, $1683 = 0.0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0.0, $1693 = 0;
 var $1694 = 0, $1695 = 0, $1696 = 0.0, $1697 = 0, $1698 = 0.0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0.0;
 var $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0.0, $1715 = 0, $1716 = 0.0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0.0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0.0;
 var $173 = 0, $1730 = 0, $1731 = 0.0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0.0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0.0;
 var $1748 = 0, $1749 = 0.0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0.0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0.0, $1763 = 0, $1764 = 0.0, $1765 = 0;
 var $1766 = 0, $1767 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0;
 var $373 = 0.0, $374 = 0, $375 = 0.0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0.0, $386 = 0, $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0;
 var $391 = 0.0, $392 = 0, $393 = 0.0, $394 = 0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0;
 var $409 = 0.0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0;
 var $427 = 0.0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0;
 var $445 = 0.0, $446 = 0, $447 = 0.0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0.0;
 var $463 = 0, $464 = 0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0.0, $477 = 0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0.0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0.0, $533 = 0, $534 = 0;
 var $535 = 0.0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0.0, $55 = 0, $550 = 0, $551 = 0, $552 = 0.0;
 var $553 = 0, $554 = 0, $555 = 0.0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0.0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0.0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0.0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0.0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0.0, $702 = 0, $703 = 0.0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0.0, $729 = 0, $73 = 0, $730 = 0.0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0.0, $75 = 0, $750 = 0.0;
 var $751 = 0.0, $752 = 0.0, $753 = 0.0, $754 = 0.0, $755 = 0.0, $756 = 0.0, $757 = 0.0, $758 = 0.0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0.0, $766 = 0, $767 = 0, $768 = 0.0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0.0, $774 = 0, $775 = 0, $776 = 0.0, $777 = 0, $778 = 0, $779 = 0.0, $78 = 0, $780 = 0.0, $781 = 0, $782 = 0.0, $783 = 0, $784 = 0.0, $785 = 0.0, $786 = 0, $787 = 0.0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0.0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0.0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0.0, $812 = 0, $813 = 0, $814 = 0.0, $815 = 0, $816 = 0, $817 = 0, $818 = 0.0, $819 = 0, $82 = 0, $820 = 0, $821 = 0.0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0.0, $826 = 0, $827 = 0, $828 = 0.0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0.0, $833 = 0, $834 = 0, $835 = 0, $836 = 0.0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0.0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0.0, $845 = 0, $846 = 0, $847 = 0, $848 = 0.0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0.0, $853 = 0, $854 = 0, $855 = 0, $856 = 0.0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0.0, $861 = 0, $862 = 0, $863 = 0, $864 = 0.0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0.0, $87 = 0, $870 = 0, $871 = 0, $872 = 0.0, $873 = 0, $874 = 0, $875 = 0.0, $876 = 0.0, $877 = 0;
 var $878 = 0.0, $879 = 0, $88 = 0, $880 = 0.0, $881 = 0, $882 = 0.0, $883 = 0, $884 = 0, $885 = 0, $886 = 0.0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0.0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0.0, $91 = 0, $910 = 0, $911 = 0, $912 = 0.0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0.0, $919 = 0, $92 = 0, $920 = 0, $921 = 0.0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0.0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0.0, $977 = 0.0, $978 = 0.0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0.0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0.0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $atlas01$byval_copy318 = 0, $curFrame3$sink$sink = 0, $exitcond = 0, $exitcond1171 = 0, $exitcond1172 = 0;
 var $exitcond1173 = 0, $exitcond1174 = 0, $exitcond1175 = 0, $exitcond1176 = 0, $exitcond1177 = 0, $exitcond1178 = 0, $exitcond1179 = 0, $exitcond1180 = 0, $exitcond1181 = 0, $exitcond1182 = 0, $exitcond1183 = 0, $exitcond1184 = 0, $exitcond1185 = 0, $exitcond1186 = 0, $exitcond1187 = 0, $exitcond1188 = 0, $exitcond1189 = 0, $exitcond1190 = 0, $font$byval_copy364 = 0, $or$cond = 0;
 var $or$cond14 = 0, $or$cond16 = 0, $or$cond18 = 0, $or$cond20 = 0, $or$cond22 = 0, $or$cond24 = 0, $or$cond26 = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, $or$cond34 = 0, $or$cond36 = 0, $or$cond38 = 0, $or$cond40 = 0, $or$cond42 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3200|0);
 $$byval_copy366 = sp + 2784|0;
 $$byval_copy365 = sp + 2776|0;
 $font$byval_copy364 = sp + 2744|0;
 $$byval_copy319 = sp + 2328|0;
 $atlas01$byval_copy318 = sp + 2300|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 2728|0;
 $1 = sp + 2712|0;
 $2 = sp + 2704|0;
 $3 = sp + 2688|0;
 $4 = sp + 2672|0;
 $5 = sp + 2664|0;
 $6 = sp + 3184|0;
 $7 = sp + 3180|0;
 $8 = sp + 2648|0;
 $9 = sp + 2632|0;
 $10 = sp + 2624|0;
 $11 = sp + 3176|0;
 $12 = sp + 3172|0;
 $13 = sp + 2608|0;
 $14 = sp + 2592|0;
 $15 = sp + 2584|0;
 $16 = sp + 3168|0;
 $17 = sp + 3164|0;
 $18 = sp + 2568|0;
 $19 = sp + 2552|0;
 $20 = sp + 2544|0;
 $21 = sp + 3160|0;
 $22 = sp + 3156|0;
 $23 = sp + 2528|0;
 $24 = sp + 2512|0;
 $25 = sp + 2504|0;
 $26 = sp + 3152|0;
 $27 = sp + 3148|0;
 $28 = sp + 2488|0;
 $29 = sp + 2472|0;
 $30 = sp + 2464|0;
 $31 = sp + 3144|0;
 $32 = sp + 2448|0;
 $33 = sp + 2432|0;
 $34 = sp + 2424|0;
 $35 = sp + 2408|0;
 $36 = sp + 2392|0;
 $37 = sp + 2384|0;
 $38 = sp + 2368|0;
 $39 = sp + 2352|0;
 $40 = sp + 2320|0;
 $41 = sp + 2296|0;
 $42 = sp + 2288|0;
 $43 = sp + 2280|0;
 $44 = sp + 2272|0;
 $45 = sp + 2264|0;
 $46 = sp + 2248|0;
 $47 = sp + 2240|0;
 $48 = sp + 2232|0;
 $49 = sp + 2216|0;
 $50 = sp + 2208|0;
 $51 = sp + 2200|0;
 $52 = sp + 2184|0;
 $53 = sp + 2168|0;
 $54 = sp + 2152|0;
 $55 = sp + 2144|0;
 $56 = sp + 2136|0;
 $57 = sp + 2120|0;
 $58 = sp + 2104|0;
 $59 = sp + 2096|0;
 $60 = sp + 2080|0;
 $61 = sp + 2064|0;
 $62 = sp + 2056|0;
 $63 = sp + 2040|0;
 $64 = sp + 2032|0;
 $65 = sp + 2024|0;
 $66 = sp + 2016|0;
 $67 = sp + 2008|0;
 $68 = sp + 1992|0;
 $69 = sp + 1984|0;
 $70 = sp + 1976|0;
 $71 = sp + 1968|0;
 $72 = sp + 1960|0;
 $73 = sp + 1944|0;
 $74 = sp + 1936|0;
 $75 = sp + 1928|0;
 $76 = sp + 1920|0;
 $77 = sp + 1912|0;
 $78 = sp + 1896|0;
 $79 = sp + 1888|0;
 $80 = sp + 1880|0;
 $81 = sp + 1864|0;
 $82 = sp + 1848|0;
 $83 = sp + 1840|0;
 $84 = sp + 3140|0;
 $85 = sp + 1824|0;
 $86 = sp + 1816|0;
 $87 = sp + 1808|0;
 $88 = sp + 1792|0;
 $89 = sp + 1784|0;
 $90 = sp + 1776|0;
 $91 = sp + 1760|0;
 $92 = sp + 1752|0;
 $93 = sp + 1744|0;
 $94 = sp + 1728|0;
 $95 = sp + 1720|0;
 $96 = sp + 1712|0;
 $97 = sp + 1696|0;
 $98 = sp + 1688|0;
 $99 = sp + 1680|0;
 $100 = sp + 1664|0;
 $101 = sp + 1656|0;
 $102 = sp + 1648|0;
 $103 = sp + 1632|0;
 $104 = sp + 1624|0;
 $105 = sp + 1616|0;
 $106 = sp + 1600|0;
 $107 = sp + 1592|0;
 $108 = sp + 1584|0;
 $109 = sp + 1568|0;
 $110 = sp + 1552|0;
 $111 = sp + 1544|0;
 $112 = sp + 3136|0;
 $113 = sp + 1536|0;
 $114 = sp + 1528|0;
 $115 = sp + 1520|0;
 $116 = sp + 1504|0;
 $117 = sp + 1488|0;
 $118 = sp + 1480|0;
 $119 = sp + 1472|0;
 $120 = sp + 1464|0;
 $121 = sp + 1456|0;
 $122 = sp + 1440|0;
 $123 = sp + 1432|0;
 $124 = sp + 1424|0;
 $125 = sp + 1408|0;
 $126 = sp + 1400|0;
 $127 = sp + 3132|0;
 $128 = sp + 3128|0;
 $129 = sp + 1384|0;
 $130 = sp + 1376|0;
 $131 = sp + 3124|0;
 $132 = sp + 3120|0;
 $133 = sp + 1360|0;
 $134 = sp + 1344|0;
 $135 = sp + 1336|0;
 $136 = sp + 3116|0;
 $137 = sp + 1320|0;
 $138 = sp + 1304|0;
 $139 = sp + 1296|0;
 $140 = sp + 3112|0;
 $141 = sp + 1288|0;
 $142 = sp + 1280|0;
 $143 = sp + 1264|0;
 $144 = sp + 1248|0;
 $145 = sp + 1240|0;
 $146 = sp + 1232|0;
 $147 = sp + 1216|0;
 $148 = sp + 1200|0;
 $149 = sp + 1192|0;
 $150 = sp + 1184|0;
 $151 = sp + 1168|0;
 $152 = sp + 1160|0;
 $153 = sp + 1144|0;
 $154 = sp + 1136|0;
 $155 = sp + 1120|0;
 $156 = sp + 1104|0;
 $157 = sp + 1096|0;
 $158 = sp + 1088|0;
 $159 = sp + 1072|0;
 $160 = sp + 1064|0;
 $161 = sp + 1056|0;
 $162 = sp + 1040|0;
 $163 = sp + 1024|0;
 $164 = sp + 1016|0;
 $165 = sp + 1008|0;
 $166 = sp + 1000|0;
 $167 = sp + 992|0;
 $168 = sp + 3108|0;
 $169 = sp + 3104|0;
 $170 = sp + 3100|0;
 $171 = sp + 3096|0;
 $172 = sp + 3092|0;
 $173 = sp + 3088|0;
 $174 = sp + 3084|0;
 $175 = sp + 3080|0;
 $176 = sp + 976|0;
 $177 = sp + 960|0;
 $178 = sp + 952|0;
 $179 = sp + 3076|0;
 $180 = sp + 936|0;
 $181 = sp + 920|0;
 $182 = sp + 912|0;
 $183 = sp + 3072|0;
 $184 = sp + 896|0;
 $185 = sp + 880|0;
 $186 = sp + 872|0;
 $187 = sp + 3068|0;
 $188 = sp + 856|0;
 $189 = sp + 840|0;
 $190 = sp + 832|0;
 $191 = sp + 3064|0;
 $192 = sp + 816|0;
 $193 = sp + 800|0;
 $194 = sp + 792|0;
 $195 = sp + 3060|0;
 $196 = sp + 3056|0;
 $197 = sp + 784|0;
 $198 = sp + 768|0;
 $199 = sp + 752|0;
 $200 = sp + 744|0;
 $201 = sp + 3052|0;
 $202 = sp + 728|0;
 $203 = sp + 712|0;
 $204 = sp + 704|0;
 $205 = sp + 3048|0;
 $206 = sp + 688|0;
 $207 = sp + 672|0;
 $208 = sp + 664|0;
 $209 = sp + 3044|0;
 $210 = sp + 648|0;
 $211 = sp + 632|0;
 $212 = sp + 624|0;
 $213 = sp + 3040|0;
 $214 = sp + 616|0;
 $215 = sp + 600|0;
 $216 = sp + 584|0;
 $217 = sp + 576|0;
 $218 = sp + 3036|0;
 $219 = sp + 568|0;
 $220 = sp + 3032|0;
 $221 = sp + 3028|0;
 $222 = sp + 552|0;
 $223 = sp + 536|0;
 $224 = sp + 528|0;
 $225 = sp + 520|0;
 $226 = sp + 504|0;
 $227 = sp + 488|0;
 $228 = sp + 480|0;
 $229 = sp + 3024|0;
 $230 = sp + 472|0;
 $231 = sp + 456|0;
 $232 = sp + 440|0;
 $233 = sp + 432|0;
 $234 = sp + 3020|0;
 $235 = sp + 424|0;
 $236 = sp + 408|0;
 $237 = sp + 392|0;
 $238 = sp + 384|0;
 $239 = sp + 376|0;
 $240 = sp + 360|0;
 $241 = sp + 344|0;
 $242 = sp + 336|0;
 $243 = sp + 328|0;
 $244 = sp + 312|0;
 $245 = sp + 296|0;
 $246 = sp + 288|0;
 $247 = sp + 3016|0;
 $248 = sp + 3012|0;
 $249 = sp + 272|0;
 $250 = sp + 256|0;
 $251 = sp + 248|0;
 $252 = sp + 3008|0;
 $253 = sp + 240|0;
 $254 = sp + 224|0;
 $255 = sp + 208|0;
 $256 = sp + 200|0;
 $257 = sp + 3004|0;
 $258 = sp + 3000|0;
 $259 = sp + 184|0;
 $260 = sp + 168|0;
 $261 = sp + 160|0;
 $262 = sp + 2996|0;
 $263 = sp + 2992|0;
 $264 = sp + 144|0;
 $265 = sp + 128|0;
 $266 = sp + 120|0;
 $267 = sp + 2988|0;
 $268 = sp + 2984|0;
 $269 = sp + 2980|0;
 $270 = sp + 2976|0;
 $271 = sp + 2972|0;
 $272 = sp + 2968|0;
 $273 = sp + 2964|0;
 $274 = sp + 2960|0;
 $275 = sp + 2956|0;
 $276 = sp + 2952|0;
 $277 = sp + 112|0;
 $278 = sp + 104|0;
 $279 = sp + 2948|0;
 $280 = sp + 96|0;
 $281 = sp + 2944|0;
 $282 = sp + 88|0;
 $283 = sp + 2940|0;
 $284 = sp + 80|0;
 $285 = sp + 2936|0;
 $286 = sp + 72|0;
 $287 = sp + 2932|0;
 $288 = sp + 64|0;
 $289 = sp + 2928|0;
 $290 = sp + 56|0;
 $291 = sp + 2924|0;
 $292 = sp + 48|0;
 $293 = sp + 2920|0;
 $294 = sp + 40|0;
 $295 = sp + 2916|0;
 _memcpy(($$byval_copy366|0),(26424|0),132)|0;
 _BeginShaderMode($$byval_copy366);
 HEAP32[$0>>2] = 2;
 $296 = ((($0)) + 4|0);
 HEAP32[$296>>2] = 2;
 $297 = ((($0)) + 8|0);
 HEAP32[$297>>2] = 640;
 $298 = ((($0)) + 12|0);
 HEAP32[$298>>2] = 360;
 HEAP32[$1>>2] = 0;
 $299 = ((($1)) + 4|0);
 HEAP32[$299>>2] = 0;
 $300 = ((($1)) + 8|0);
 HEAP32[$300>>2] = 1280;
 $301 = ((($1)) + 12|0);
 HEAP32[$301>>2] = 720;
 HEAPF32[$2>>2] = 0.0;
 $302 = ((($2)) + 4|0);
 HEAPF32[$302>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy319>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$0+12>>2]|0;
 ;HEAP32[$font$byval_copy364>>2]=HEAP32[$1>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$$byval_copy365>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$2+4>>2]|0;
 ;HEAP8[$$byval_copy366>>0]=HEAP8[162488>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
 _DrawParallaxBack_63();
 _DrawParallaxMiddle_64();
 $303 = ((($23)) + 4|0);
 $304 = ((($23)) + 8|0);
 $305 = ((($23)) + 12|0);
 $306 = ((($24)) + 4|0);
 $307 = ((($24)) + 8|0);
 $308 = ((($24)) + 12|0);
 $309 = ((($25)) + 4|0);
 $310 = ((($27)) + 1|0);
 $311 = ((($27)) + 2|0);
 $312 = ((($27)) + 3|0);
 $313 = ((($18)) + 4|0);
 $314 = ((($18)) + 8|0);
 $315 = ((($18)) + 12|0);
 $316 = ((($19)) + 4|0);
 $317 = ((($19)) + 8|0);
 $318 = ((($19)) + 12|0);
 $319 = ((($20)) + 4|0);
 $320 = ((($22)) + 1|0);
 $321 = ((($22)) + 2|0);
 $322 = ((($22)) + 3|0);
 $323 = ((($13)) + 4|0);
 $324 = ((($13)) + 8|0);
 $325 = ((($13)) + 12|0);
 $326 = ((($14)) + 4|0);
 $327 = ((($14)) + 8|0);
 $328 = ((($14)) + 12|0);
 $329 = ((($15)) + 4|0);
 $330 = ((($17)) + 1|0);
 $331 = ((($17)) + 2|0);
 $332 = ((($17)) + 3|0);
 $333 = ((($8)) + 4|0);
 $334 = ((($8)) + 8|0);
 $335 = ((($8)) + 12|0);
 $336 = ((($9)) + 4|0);
 $337 = ((($9)) + 8|0);
 $338 = ((($9)) + 12|0);
 $339 = ((($10)) + 4|0);
 $340 = ((($12)) + 1|0);
 $341 = ((($12)) + 2|0);
 $342 = ((($12)) + 3|0);
 $343 = ((($3)) + 4|0);
 $344 = ((($3)) + 8|0);
 $345 = ((($3)) + 12|0);
 $346 = ((($4)) + 4|0);
 $347 = ((($4)) + 8|0);
 $348 = ((($4)) + 12|0);
 $349 = ((($5)) + 4|0);
 $350 = ((($7)) + 1|0);
 $351 = ((($7)) + 2|0);
 $352 = ((($7)) + 3|0);
 $$011061169 = 0;
 while(1) {
  $360 = (((230036 + (($$011061169*40)|0)|0)) + 36|0);
  $361 = HEAP32[$360>>2]|0;
  $362 = ($361|0)==(0);
  if (!($362)) {
   HEAP32[$3>>2] = 276;
   HEAP32[$343>>2] = 766;
   HEAP32[$344>>2] = 32;
   HEAP32[$345>>2] = 32;
   $363 = (230036 + (($$011061169*40)|0)|0);
   $364 = +HEAPF32[$363>>2];
   $365 = (~~(($364)));
   HEAP32[$4>>2] = $365;
   $366 = (((230036 + (($$011061169*40)|0)|0)) + 4|0);
   $367 = +HEAPF32[$366>>2];
   $368 = (~~(($367)));
   HEAP32[$346>>2] = $368;
   $369 = (((230036 + (($$011061169*40)|0)|0)) + 20|0);
   $370 = +HEAPF32[$369>>2];
   $371 = $370 * 32.0;
   $372 = (~~(($371)));
   HEAP32[$347>>2] = $372;
   HEAP32[$348>>2] = $372;
   $373 = $371 * 0.5;
   HEAPF32[$5>>2] = $373;
   HEAPF32[$349>>2] = $373;
   $374 = (((230036 + (($$011061169*40)|0)|0)) + 16|0);
   $375 = +HEAPF32[$374>>2];
   HEAP8[$7>>0] = -112;
   HEAP8[$350>>0] = -42;
   HEAP8[$351>>0] = -1;
   HEAP8[$352>>0] = -1;
   $376 = (((230036 + (($$011061169*40)|0)|0)) + 28|0);
   $377 = +HEAPF32[$376>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$7+3>>0]|0;
   _Fade($6,$$byval_copy366,$377);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$3+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$4>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$4+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$5+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$6+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$375,$$byval_copy366);
  }
  $378 = (((235156 + (($$011061169*40)|0)|0)) + 36|0);
  $379 = HEAP32[$378>>2]|0;
  $380 = ($379|0)==(0);
  if (!($380)) {
   HEAP32[$8>>2] = 538;
   HEAP32[$333>>2] = 715;
   HEAP32[$334>>2] = 32;
   HEAP32[$335>>2] = 32;
   $381 = (235156 + (($$011061169*40)|0)|0);
   $382 = +HEAPF32[$381>>2];
   $383 = (~~(($382)));
   HEAP32[$9>>2] = $383;
   $384 = (((235156 + (($$011061169*40)|0)|0)) + 4|0);
   $385 = +HEAPF32[$384>>2];
   $386 = (~~(($385)));
   HEAP32[$336>>2] = $386;
   $387 = (((235156 + (($$011061169*40)|0)|0)) + 20|0);
   $388 = +HEAPF32[$387>>2];
   $389 = $388 * 32.0;
   $390 = (~~(($389)));
   HEAP32[$337>>2] = $390;
   HEAP32[$338>>2] = $390;
   $391 = $389 * 0.5;
   HEAPF32[$10>>2] = $391;
   HEAPF32[$339>>2] = $391;
   $392 = (((235156 + (($$011061169*40)|0)|0)) + 16|0);
   $393 = +HEAPF32[$392>>2];
   HEAP8[$12>>0] = -77;
   HEAP8[$340>>0] = 86;
   HEAP8[$341>>0] = 6;
   HEAP8[$342>>0] = -1;
   $394 = (((235156 + (($$011061169*40)|0)|0)) + 28|0);
   $395 = +HEAPF32[$394>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$12>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$12+3>>0]|0;
   _Fade($11,$$byval_copy366,$395);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$8+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$9>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$9+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$10+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$11>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$11+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$393,$$byval_copy366);
  }
  $396 = (((240276 + (($$011061169*40)|0)|0)) + 36|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = ($397|0)==(0);
  if (!($398)) {
   HEAP32[$13>>2] = 504;
   HEAP32[$323>>2] = 715;
   HEAP32[$324>>2] = 32;
   HEAP32[$325>>2] = 32;
   $399 = (240276 + (($$011061169*40)|0)|0);
   $400 = +HEAPF32[$399>>2];
   $401 = (~~(($400)));
   HEAP32[$14>>2] = $401;
   $402 = (((240276 + (($$011061169*40)|0)|0)) + 4|0);
   $403 = +HEAPF32[$402>>2];
   $404 = (~~(($403)));
   HEAP32[$326>>2] = $404;
   $405 = (((240276 + (($$011061169*40)|0)|0)) + 20|0);
   $406 = +HEAPF32[$405>>2];
   $407 = $406 * 32.0;
   $408 = (~~(($407)));
   HEAP32[$327>>2] = $408;
   HEAP32[$328>>2] = $408;
   $409 = $407 * 0.5;
   HEAPF32[$15>>2] = $409;
   HEAPF32[$329>>2] = $409;
   $410 = (((240276 + (($$011061169*40)|0)|0)) + 16|0);
   $411 = +HEAPF32[$410>>2];
   HEAP8[$17>>0] = -54;
   HEAP8[$330>>0] = -89;
   HEAP8[$331>>0] = 126;
   HEAP8[$332>>0] = -1;
   $412 = (((240276 + (($$011061169*40)|0)|0)) + 28|0);
   $413 = +HEAPF32[$412>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$17+3>>0]|0;
   _Fade($16,$$byval_copy366,$413);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$13+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$14>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$14+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$15+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$16>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$16+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$411,$$byval_copy366);
  }
  $414 = (((245396 + (($$011061169*40)|0)|0)) + 36|0);
  $415 = HEAP32[$414>>2]|0;
  $416 = ($415|0)==(0);
  if (!($416)) {
   HEAP32[$18>>2] = 808;
   HEAP32[$313>>2] = 315;
   HEAP32[$314>>2] = 32;
   HEAP32[$315>>2] = 32;
   $417 = (245396 + (($$011061169*40)|0)|0);
   $418 = +HEAPF32[$417>>2];
   $419 = (~~(($418)));
   HEAP32[$19>>2] = $419;
   $420 = (((245396 + (($$011061169*40)|0)|0)) + 4|0);
   $421 = +HEAPF32[$420>>2];
   $422 = (~~(($421)));
   HEAP32[$316>>2] = $422;
   $423 = (((245396 + (($$011061169*40)|0)|0)) + 20|0);
   $424 = +HEAPF32[$423>>2];
   $425 = $424 * 32.0;
   $426 = (~~(($425)));
   HEAP32[$317>>2] = $426;
   HEAP32[$318>>2] = $426;
   $427 = $425 * 0.5;
   HEAPF32[$20>>2] = $427;
   HEAPF32[$319>>2] = $427;
   $428 = (((245396 + (($$011061169*40)|0)|0)) + 16|0);
   $429 = +HEAPF32[$428>>2];
   HEAP8[$22>>0] = -38;
   HEAP8[$320>>0] = 84;
   HEAP8[$321>>0] = 108;
   HEAP8[$322>>0] = -1;
   $430 = (((245396 + (($$011061169*40)|0)|0)) + 28|0);
   $431 = +HEAPF32[$430>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$22>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$22+3>>0]|0;
   _Fade($21,$$byval_copy366,$431);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$18+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$19>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$19+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$20+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$21>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$21+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$429,$$byval_copy366);
  }
  $432 = (((250516 + (($$011061169*40)|0)|0)) + 36|0);
  $433 = HEAP32[$432>>2]|0;
  $434 = ($433|0)==(0);
  if (!($434)) {
   HEAP32[$23>>2] = 842;
   HEAP32[$303>>2] = 315;
   HEAP32[$304>>2] = 32;
   HEAP32[$305>>2] = 32;
   $435 = (250516 + (($$011061169*40)|0)|0);
   $436 = +HEAPF32[$435>>2];
   $437 = (~~(($436)));
   HEAP32[$24>>2] = $437;
   $438 = (((250516 + (($$011061169*40)|0)|0)) + 4|0);
   $439 = +HEAPF32[$438>>2];
   $440 = (~~(($439)));
   HEAP32[$306>>2] = $440;
   $441 = (((250516 + (($$011061169*40)|0)|0)) + 20|0);
   $442 = +HEAPF32[$441>>2];
   $443 = $442 * 32.0;
   $444 = (~~(($443)));
   HEAP32[$307>>2] = $444;
   HEAP32[$308>>2] = $444;
   $445 = $443 * 0.5;
   HEAPF32[$25>>2] = $445;
   HEAPF32[$309>>2] = $445;
   $446 = (((250516 + (($$011061169*40)|0)|0)) + 16|0);
   $447 = +HEAPF32[$446>>2];
   HEAP8[$27>>0] = -112;
   HEAP8[$310>>0] = -73;
   HEAP8[$311>>0] = -69;
   HEAP8[$312>>0] = -1;
   $448 = (((250516 + (($$011061169*40)|0)|0)) + 28|0);
   $449 = +HEAPF32[$448>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$27>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$27+3>>0]|0;
   _Fade($26,$$byval_copy366,$449);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$23+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$24>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$24+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$25+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$26>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$26+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$447,$$byval_copy366);
  }
  $450 = (($$011061169) + 1)|0;
  $exitcond1190 = ($450|0)==(128);
  if ($exitcond1190) {
   break;
  } else {
   $$011061169 = $450;
  }
 }
 $353 = ((($28)) + 4|0);
 $354 = ((($28)) + 8|0);
 $355 = ((($28)) + 12|0);
 $356 = ((($29)) + 4|0);
 $357 = ((($29)) + 8|0);
 $358 = ((($29)) + 12|0);
 $359 = ((($30)) + 4|0);
 $$011071168 = 0;
 while(1) {
  $458 = (((229736 + (($$011071168*36)|0)|0)) + 24|0);
  $459 = HEAP32[$458>>2]|0;
  $460 = ($459|0)==(0);
  if (!($460)) {
   HEAP32[$28>>2] = 260;
   HEAP32[$353>>2] = 766;
   HEAP32[$354>>2] = 14;
   HEAP32[$355>>2] = 216;
   $461 = (229736 + (($$011071168*36)|0)|0);
   $462 = +HEAPF32[$461>>2];
   $463 = (~~(($462)));
   HEAP32[$29>>2] = $463;
   $464 = (((229736 + (($$011071168*36)|0)|0)) + 4|0);
   $465 = +HEAPF32[$464>>2];
   $466 = (~~(($465)));
   HEAP32[$356>>2] = $466;
   $467 = (((229736 + (($$011071168*36)|0)|0)) + 16|0);
   $468 = +HEAPF32[$467>>2];
   $469 = $468 * 14.0;
   $470 = (~~(($469)));
   HEAP32[$357>>2] = $470;
   $471 = $468 * 216.0;
   $472 = (~~(($471)));
   HEAP32[$358>>2] = $472;
   $473 = $469 * 0.5;
   HEAPF32[$30>>2] = $473;
   $474 = $471 * 0.5;
   HEAPF32[$359>>2] = $474;
   $475 = (((229736 + (($$011071168*36)|0)|0)) + 20|0);
   $476 = +HEAPF32[$475>>2];
   $477 = (((229736 + (($$011071168*36)|0)|0)) + 8|0);
   $478 = (((229736 + (($$011071168*36)|0)|0)) + 12|0);
   $479 = +HEAPF32[$478>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$477>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$477+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$477+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$477+3>>0]|0;
   _Fade($31,$$byval_copy366,$479);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$28+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$29>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$29+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$30>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$30+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$31>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$31+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$476,$$byval_copy366);
  }
  $480 = (($$011071168) + 1)|0;
  $exitcond1189 = ($480|0)==(8);
  if ($exitcond1189) {
   break;
  } else {
   $$011071168 = $480;
  }
 }
 _DrawParallaxFront_65();
 $451 = ((($32)) + 4|0);
 $452 = ((($32)) + 8|0);
 $453 = ((($32)) + 12|0);
 $454 = ((($33)) + 4|0);
 $455 = ((($33)) + 8|0);
 $456 = ((($33)) + 12|0);
 $457 = ((($34)) + 4|0);
 $$011081167 = 0;
 while(1) {
  $488 = (258452 + ($$011081167<<2)|0);
  $489 = HEAP32[$488>>2]|0;
  $490 = ($489|0)==(0);
  if (!($490)) {
   HEAP32[$32>>2] = 1788;
   HEAP32[$451>>2] = 2;
   HEAP32[$452>>2] = 43;
   HEAP32[$453>>2] = 720;
   $491 = (258196 + ($$011081167<<4)|0);
   $492 = HEAP32[$491>>2]|0;
   HEAP32[$33>>2] = $492;
   $493 = (((258196 + ($$011081167<<4)|0)) + 4|0);
   $494 = HEAP32[$493>>2]|0;
   HEAP32[$454>>2] = $494;
   HEAP32[$455>>2] = 43;
   HEAP32[$456>>2] = 720;
   HEAPF32[$34>>2] = 0.0;
   HEAPF32[$457>>2] = 0.0;
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$32+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$33>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$33+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$34>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$34+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[162492>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[162492+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[162492+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[162492+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
  }
  $495 = (($$011081167) + 1)|0;
  $exitcond1188 = ($495|0)==(16);
  if ($exitcond1188) {
   break;
  } else {
   $$011081167 = $495;
  }
 }
 $481 = ((($35)) + 4|0);
 $482 = ((($35)) + 8|0);
 $483 = ((($35)) + 12|0);
 $484 = ((($36)) + 4|0);
 $485 = ((($36)) + 8|0);
 $486 = ((($36)) + 12|0);
 $487 = ((($37)) + 4|0);
 $$011091166 = 0;
 while(1) {
  $507 = (260484 + ($$011091166<<2)|0);
  $508 = HEAP32[$507>>2]|0;
  $509 = ($508|0)==(0);
  if (!($509)) {
   HEAP32[$35>>2] = 808;
   HEAP32[$481>>2] = 349;
   HEAP32[$482>>2] = 36;
   HEAP32[$483>>2] = 24;
   $510 = (260612 + ($$011091166<<3)|0);
   $511 = +HEAPF32[$510>>2];
   $512 = (~~(($511)));
   HEAP32[$36>>2] = $512;
   $513 = (((260612 + ($$011091166<<3)|0)) + 4|0);
   $514 = +HEAPF32[$513>>2];
   $515 = (~~(($514)));
   HEAP32[$484>>2] = $515;
   HEAP32[$485>>2] = 36;
   HEAP32[$486>>2] = 20;
   HEAPF32[$37>>2] = 0.0;
   HEAPF32[$487>>2] = 0.0;
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$35+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$35+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$36>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$36+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$37>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$37+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[162492>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[162492+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[162492+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[162492+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
  }
  $516 = (($$011091166) + 1)|0;
  $exitcond1187 = ($516|0)==(16);
  if ($exitcond1187) {
   break;
  } else {
   $$011091166 = $516;
  }
 }
 _EndShaderMode();
 $496 = ((($38)) + 4|0);
 $497 = ((($38)) + 8|0);
 $498 = ((($38)) + 12|0);
 $499 = ((($39)) + 4|0);
 $500 = ((($39)) + 8|0);
 $501 = ((($39)) + 12|0);
 $502 = ((($40)) + 4|0);
 $503 = ((($42)) + 4|0);
 $504 = ((($44)) + 4|0);
 $505 = ((($47)) + 4|0);
 $506 = ((($50)) + 4|0);
 $$011101165 = 0;
 while(1) {
  HEAP32[$38>>2] = 58;
  $524 = (((258516 + ($$011101165<<4)|0)) + 4|0);
  $525 = HEAP32[$524>>2]|0;
  $526 = (($525) + 1079)|0;
  HEAP32[$496>>2] = $526;
  HEAP32[$497>>2] = 43;
  HEAP32[$498>>2] = 720;
  $527 = (258516 + ($$011101165<<4)|0);
  $528 = HEAP32[$527>>2]|0;
  $529 = (($528) + 5)|0;
  HEAP32[$39>>2] = $529;
  $530 = (($525) + 51)|0;
  HEAP32[$499>>2] = $530;
  HEAP32[$500>>2] = 43;
  HEAP32[$501>>2] = 720;
  HEAPF32[$40>>2] = 0.0;
  HEAPF32[$502>>2] = 0.0;
  HEAP32[$41>>2] = -1;
  ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$$byval_copy319>>2]=HEAP32[$38>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$38+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$38+12>>2]|0;
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[$39>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$39+12>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[$40>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$40+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$41>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$41+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$41+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$41+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
  $531 = HEAP32[$527>>2]|0;
  $532 = (+($531|0));
  HEAPF32[$42>>2] = $532;
  $533 = (_GetScreenHeight()|0);
  $534 = (($533) + -102)|0;
  $535 = (+($534|0));
  HEAPF32[$503>>2] = $535;
  HEAP32[$43>>2] = -1;
  ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[162544>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[162544+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[162544+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[162544+12>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[$42>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$42+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$43>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$43+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$43+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$43+3>>0]|0;
  _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
  $536 = (258676 + ($$011101165<<2)|0);
  $$011111164 = 20;
  while(1) {
   $538 = HEAP32[$524>>2]|0;
   $539 = (($538) + -25)|0;
   $540 = ($$011111164*43)|0;
   $541 = ($539|0)>($540|0);
   if (!($541)) {
    $542 = HEAP32[$536>>2]|0;
    $543 = ($542|0)==(0);
    if (!($543)) {
     $544 = (($$011111164|0) % 2)&-1;
     $545 = ($544|0)>(0);
     $546 = ($$011111164*40)|0;
     $547 = HEAP32[40588]|0;
     $548 = HEAP32[$527>>2]|0;
     $549 = (+($546|0));
     do {
      if ($545) {
       $550 = (($547) + -10)|0;
       $551 = (($550) + ($548))|0;
       $552 = (+($551|0));
       HEAPF32[$44>>2] = $552;
       HEAPF32[$504>>2] = $549;
       HEAP32[$45>>2] = -1;
       ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
       ;HEAP32[$font$byval_copy364>>2]=HEAP32[162544>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[162544+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[162544+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[162544+12>>2]|0;
       ;HEAP32[$$byval_copy365>>2]=HEAP32[$44>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$44+4>>2]|0;
       ;HEAP8[$$byval_copy366>>0]=HEAP8[$45>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$45+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$45+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$45+3>>0]|0;
       _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
       $$sink6$sink11 = $46;$curFrame3$sink$sink = 162336;
      } else {
       $553 = ($544|0)==(0);
       $554 = (($548) - ($547))|0;
       $555 = (+($554|0));
       if ($553) {
        HEAPF32[$47>>2] = $555;
        HEAPF32[$505>>2] = $549;
        HEAP32[$48>>2] = -1;
        ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
        ;HEAP32[$font$byval_copy364>>2]=HEAP32[162544>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[162544+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[162544+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[162544+12>>2]|0;
        ;HEAP32[$$byval_copy365>>2]=HEAP32[$47>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$47+4>>2]|0;
        ;HEAP8[$$byval_copy366>>0]=HEAP8[$48>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$48+3>>0]|0;
        _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
        $$sink6$sink11 = $49;$curFrame3$sink$sink = 162340;
        break;
       } else {
        HEAPF32[$50>>2] = $555;
        HEAPF32[$506>>2] = $549;
        HEAP32[$51>>2] = -1;
        ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
        ;HEAP32[$font$byval_copy364>>2]=HEAP32[162544>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[162544+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[162544+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[162544+12>>2]|0;
        ;HEAP32[$$byval_copy365>>2]=HEAP32[$50>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$50+4>>2]|0;
        ;HEAP8[$$byval_copy366>>0]=HEAP8[$51>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$51+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$51+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$51+3>>0]|0;
        _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
        $$sink6$sink11 = $52;$curFrame3$sink$sink = 162344;
        break;
       }
      }
     } while(0);
     HEAP32[$$sink6$sink11>>2] = 516;
     $556 = ((($$sink6$sink11)) + 4|0);
     HEAP32[$556>>2] = 930;
     $557 = ((($$sink6$sink11)) + 8|0);
     HEAP32[$557>>2] = 256;
     $558 = ((($$sink6$sink11)) + 12|0);
     HEAP32[$558>>2] = 128;
     $559 = HEAP32[(162552)>>2]|0;
     $560 = HEAP32[$curFrame3$sink$sink>>2]|0;
     $561 = Math_imul($560, $559)|0;
     $562 = (($561) + 516)|0;
     HEAP32[40636] = $562;
    }
   }
   $563 = (($$011111164) + -1)|0;
   $564 = ($563|0)>(-2);
   if ($564) {
    $$011111164 = $563;
   } else {
    break;
   }
  }
  $537 = (($$011101165) + 1)|0;
  $exitcond1186 = ($537|0)==(10);
  if ($exitcond1186) {
   break;
  } else {
   $$011101165 = $537;
  }
 }
 $517 = ((($53)) + 4|0);
 $518 = ((($53)) + 8|0);
 $519 = ((($53)) + 12|0);
 $520 = ((($54)) + 4|0);
 $521 = ((($54)) + 8|0);
 $522 = ((($54)) + 12|0);
 $523 = ((($55)) + 4|0);
 $$011121163 = 0;
 while(1) {
  $589 = (258956 + ($$011121163<<2)|0);
  $590 = HEAP32[$589>>2]|0;
  $591 = ($590|0)==(0);
  if (!($591)) {
   $592 = (_GetScreenHeight()|0);
   $593 = ($592|0)>(0);
   if ($593) {
    $594 = (258796 + ($$011121163<<4)|0);
    $595 = (((258796 + ($$011121163<<4)|0)) + 4|0);
    $$011131162 = 0;
    while(1) {
     HEAP32[$53>>2] = 385;
     HEAP32[$517>>2] = 1728;
     HEAP32[$518>>2] = 32;
     HEAP32[$519>>2] = 128;
     $596 = HEAP32[$594>>2]|0;
     $597 = (($596) + -5)|0;
     HEAP32[$54>>2] = $597;
     $598 = HEAP32[$595>>2]|0;
     $599 = (($598) + ($$011131162))|0;
     HEAP32[$520>>2] = $599;
     HEAP32[$521>>2] = 32;
     HEAP32[$522>>2] = 128;
     HEAPF32[$55>>2] = 0.0;
     HEAPF32[$523>>2] = 0.0;
     HEAP32[$56>>2] = -1;
     ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$$byval_copy319>>2]=HEAP32[$53>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$53+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$53+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$53+12>>2]|0;
     ;HEAP32[$font$byval_copy364>>2]=HEAP32[$54>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$54+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$54+12>>2]|0;
     ;HEAP32[$$byval_copy365>>2]=HEAP32[$55>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$55+4>>2]|0;
     ;HEAP8[$$byval_copy366>>0]=HEAP8[$56>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$56+3>>0]|0;
     _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
     $600 = (_GetScreenHeight()|0);
     $601 = (($600|0) / 6)&-1;
     $602 = (($601) + ($$011131162))|0;
     $603 = (_GetScreenHeight()|0);
     $604 = ($602|0)<($603|0);
     if ($604) {
      $$011131162 = $602;
     } else {
      break;
     }
    }
   }
  }
  $605 = (($$011121163) + 1)|0;
  $exitcond1185 = ($605|0)==(10);
  if ($exitcond1185) {
   break;
  } else {
   $$011121163 = $605;
  }
 }
 _memcpy(($$byval_copy366|0),(26424|0),132)|0;
 _BeginShaderMode($$byval_copy366);
 HEAP32[$57>>2] = 1146;
 $565 = ((($57)) + 4|0);
 HEAP32[$565>>2] = 2;
 $566 = ((($57)) + 8|0);
 HEAP32[$566>>2] = 640;
 $567 = ((($57)) + 12|0);
 HEAP32[$567>>2] = 77;
 $568 = +HEAPF32[40569];
 $569 = (~~(($568)));
 $570 = (_GetScreenWidth()|0);
 $571 = (($569) + ($570))|0;
 HEAP32[$58>>2] = $571;
 $572 = ((($58)) + 4|0);
 HEAP32[$572>>2] = 637;
 $573 = ((($58)) + 8|0);
 HEAP32[$573>>2] = 1280;
 $574 = ((($58)) + 12|0);
 HEAP32[$574>>2] = 154;
 HEAPF32[$59>>2] = 0.0;
 $575 = ((($59)) + 4|0);
 HEAPF32[$575>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy319>>2]=HEAP32[$57>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$57+12>>2]|0;
 ;HEAP32[$font$byval_copy364>>2]=HEAP32[$58>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$58+12>>2]|0;
 ;HEAP32[$$byval_copy365>>2]=HEAP32[$59>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$59+4>>2]|0;
 ;HEAP8[$$byval_copy366>>0]=HEAP8[162480>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[162480+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[162480+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[162480+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
 HEAP32[$60>>2] = 1146;
 $576 = ((($60)) + 4|0);
 HEAP32[$576>>2] = 2;
 $577 = ((($60)) + 8|0);
 HEAP32[$577>>2] = 640;
 $578 = ((($60)) + 12|0);
 HEAP32[$578>>2] = 77;
 $579 = +HEAPF32[40569];
 $580 = (~~(($579)));
 HEAP32[$61>>2] = $580;
 $581 = ((($61)) + 4|0);
 HEAP32[$581>>2] = 637;
 $582 = ((($61)) + 8|0);
 HEAP32[$582>>2] = 1280;
 $583 = ((($61)) + 12|0);
 HEAP32[$583>>2] = 154;
 HEAPF32[$62>>2] = 0.0;
 $584 = ((($62)) + 4|0);
 HEAPF32[$584>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy319>>2]=HEAP32[$60>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$60+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$60+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$60+12>>2]|0;
 ;HEAP32[$font$byval_copy364>>2]=HEAP32[$61>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$61+12>>2]|0;
 ;HEAP32[$$byval_copy365>>2]=HEAP32[$62>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$62+4>>2]|0;
 ;HEAP8[$$byval_copy366>>0]=HEAP8[162480>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[162480+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[162480+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[162480+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
 _EndShaderMode();
 $585 = ((($63)) + 4|0);
 $586 = ((($63)) + 8|0);
 $587 = ((($63)) + 12|0);
 $588 = ((($64)) + 4|0);
 $$011141161 = 0;
 while(1) {
  $628 = (258996 + ($$011141161<<2)|0);
  $629 = HEAP32[$628>>2]|0;
  $630 = ($629|0)==(0);
  if (!($630)) {
   HEAP32[$63>>2] = 405;
   HEAP32[$585>>2] = 1423;
   HEAP32[$586>>2] = 32;
   HEAP32[$587>>2] = 64;
   $631 = (259036 + ($$011141161<<4)|0);
   $632 = HEAP32[$631>>2]|0;
   $633 = (((259036 + ($$011141161<<4)|0)) + 8|0);
   $634 = HEAP32[$633>>2]|0;
   $635 = (($634|0) / 3)&-1;
   $636 = (($632) - ($635))|0;
   $637 = (+($636|0));
   HEAPF32[$64>>2] = $637;
   $638 = (((259036 + ($$011141161<<4)|0)) + 4|0);
   $639 = HEAP32[$638>>2]|0;
   $640 = (((259036 + ($$011141161<<4)|0)) + 12|0);
   $641 = HEAP32[$640>>2]|0;
   $642 = (($641|0) / 5)&-1;
   $643 = (($639) - ($642))|0;
   $644 = (+($643|0));
   HEAPF32[$588>>2] = $644;
   HEAP32[$65>>2] = -1;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$63>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$63+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$63+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$63+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$64>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$64+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$65>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$65+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$65+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$65+3>>0]|0;
   _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
  }
  $645 = (($$011141161) + 1)|0;
  $exitcond1184 = ($645|0)==(10);
  if ($exitcond1184) {
   break;
  } else {
   $$011141161 = $645;
  }
 }
 $606 = ((($81)) + 4|0);
 $607 = ((($81)) + 8|0);
 $608 = ((($81)) + 12|0);
 $609 = ((($82)) + 4|0);
 $610 = ((($82)) + 8|0);
 $611 = ((($82)) + 12|0);
 $612 = ((($83)) + 4|0);
 $613 = ((($76)) + 4|0);
 $614 = ((($78)) + 4|0);
 $615 = ((($78)) + 8|0);
 $616 = ((($78)) + 12|0);
 $617 = ((($79)) + 4|0);
 $618 = ((($71)) + 4|0);
 $619 = ((($73)) + 4|0);
 $620 = ((($73)) + 8|0);
 $621 = ((($73)) + 12|0);
 $622 = ((($74)) + 4|0);
 $623 = ((($66)) + 4|0);
 $624 = ((($68)) + 4|0);
 $625 = ((($68)) + 8|0);
 $626 = ((($68)) + 12|0);
 $627 = ((($69)) + 4|0);
 $$011151160 = 0;
 while(1) {
  $685 = (259652 + ($$011151160<<2)|0);
  $686 = HEAP32[$685>>2]|0;
  $687 = ($686|0)==(0);
  do {
   if (!($687)) {
    $688 = (259716 + ($$011151160<<2)|0);
    $689 = HEAP32[$688>>2]|0;
    $690 = ($689|0)==(0);
    $691 = (259396 + ($$011151160<<4)|0);
    $692 = HEAP32[$691>>2]|0;
    $693 = (((259396 + ($$011151160<<4)|0)) + 8|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = (((259396 + ($$011151160<<4)|0)) + 4|0);
    $696 = HEAP32[$695>>2]|0;
    $697 = (((259396 + ($$011151160<<4)|0)) + 12|0);
    $698 = HEAP32[$697>>2]|0;
    $699 = (($698|0) / 2)&-1;
    $700 = (($696) - ($699))|0;
    $701 = (+($700|0));
    if ($690) {
     $702 = (($692) - ($694))|0;
     $703 = (+($702|0));
     HEAPF32[$66>>2] = $703;
     HEAPF32[$623>>2] = $701;
     HEAP32[$67>>2] = -1;
     ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$font$byval_copy364>>2]=HEAP32[162608>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[162608+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[162608+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[162608+12>>2]|0;
     ;HEAP32[$$byval_copy365>>2]=HEAP32[$66>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$66+4>>2]|0;
     ;HEAP8[$$byval_copy366>>0]=HEAP8[$67>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$67+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$67+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$67+3>>0]|0;
     _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
     break;
    } else {
     $704 = HEAP32[(162616)>>2]|0;
     $705 = $704 << 1;
     $706 = (($705) + 1025)|0;
     HEAP32[$68>>2] = $706;
     HEAP32[$624>>2] = 254;
     HEAP32[$625>>2] = $704;
     $707 = HEAP32[(162620)>>2]|0;
     HEAP32[$626>>2] = $707;
     $708 = (($694|0) / 2)&-1;
     $709 = (($692) - ($708))|0;
     $710 = (+($709|0));
     HEAPF32[$69>>2] = $710;
     HEAPF32[$627>>2] = $701;
     HEAP32[$70>>2] = -1;
     ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$font$byval_copy364>>2]=HEAP32[$68>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$68+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$68+12>>2]|0;
     ;HEAP32[$$byval_copy365>>2]=HEAP32[$69>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$69+4>>2]|0;
     ;HEAP8[$$byval_copy366>>0]=HEAP8[$70>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$70+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$70+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$70+3>>0]|0;
     _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
     break;
    }
   }
  } while(0);
  $711 = (260036 + ($$011151160<<2)|0);
  $712 = HEAP32[$711>>2]|0;
  $713 = ($712|0)==(0);
  do {
   if (!($713)) {
    $714 = (260100 + ($$011151160<<2)|0);
    $715 = HEAP32[$714>>2]|0;
    $716 = ($715|0)==(0);
    $717 = (259780 + ($$011151160<<4)|0);
    $718 = HEAP32[$717>>2]|0;
    $719 = (((259780 + ($$011151160<<4)|0)) + 12|0);
    $720 = HEAP32[$719>>2]|0;
    $721 = (((259780 + ($$011151160<<4)|0)) + 8|0);
    $722 = HEAP32[$721>>2]|0;
    $723 = (((259780 + ($$011151160<<4)|0)) + 4|0);
    $724 = HEAP32[$723>>2]|0;
    $725 = (($722|0) / 2)&-1;
    $726 = (($720|0) / 4)&-1;
    $727 = (($718) - ($725))|0;
    $728 = (+($727|0));
    $729 = (($724) - ($726))|0;
    $730 = (+($729|0));
    if ($716) {
     HEAPF32[$71>>2] = $728;
     HEAPF32[$618>>2] = $730;
     HEAP32[$72>>2] = -1;
     ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$font$byval_copy364>>2]=HEAP32[162624>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[162624+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[162624+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[162624+12>>2]|0;
     ;HEAP32[$$byval_copy365>>2]=HEAP32[$71>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$71+4>>2]|0;
     ;HEAP8[$$byval_copy366>>0]=HEAP8[$72>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$72+3>>0]|0;
     _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
     break;
    } else {
     $731 = HEAP32[(162632)>>2]|0;
     $732 = $731 << 1;
     $733 = (($732) + 755)|0;
     HEAP32[$73>>2] = $733;
     HEAP32[$619>>2] = 1079;
     HEAP32[$620>>2] = $731;
     $734 = HEAP32[(162636)>>2]|0;
     HEAP32[$621>>2] = $734;
     HEAPF32[$74>>2] = $728;
     HEAPF32[$622>>2] = $730;
     HEAP32[$75>>2] = -1;
     ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$font$byval_copy364>>2]=HEAP32[$73>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$73+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$73+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$73+12>>2]|0;
     ;HEAP32[$$byval_copy365>>2]=HEAP32[$74>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$74+4>>2]|0;
     ;HEAP8[$$byval_copy366>>0]=HEAP8[$75>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$75+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$75+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$75+3>>0]|0;
     _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
     break;
    }
   }
  } while(0);
  $735 = (260420 + ($$011151160<<2)|0);
  $736 = HEAP32[$735>>2]|0;
  $737 = ($736|0)==(0);
  do {
   if (!($737)) {
    $738 = (260548 + ($$011151160<<2)|0);
    $739 = HEAP32[$738>>2]|0;
    $740 = ($739|0)==(0);
    $741 = (((260164 + ($$011151160<<4)|0)) + 12|0);
    $742 = HEAP32[$741>>2]|0;
    $743 = (((260164 + ($$011151160<<4)|0)) + 4|0);
    $744 = HEAP32[$743>>2]|0;
    $745 = (((260164 + ($$011151160<<4)|0)) + 8|0);
    $746 = HEAP32[$745>>2]|0;
    $747 = (260164 + ($$011151160<<4)|0);
    $748 = HEAP32[$747>>2]|0;
    if ($740) {
     $749 = (+($748|0));
     $750 = (+($746|0));
     $751 = $750 * 0.69999999999999996;
     $752 = $749 - $751;
     $753 = $752;
     HEAPF32[$76>>2] = $753;
     $754 = (+($744|0));
     $755 = (+($742|0));
     $756 = $755 * 0.10000000000000001;
     $757 = $754 - $756;
     $758 = $757;
     HEAPF32[$613>>2] = $758;
     HEAP32[$77>>2] = -1;
     ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$font$byval_copy364>>2]=HEAP32[162640>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[162640+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[162640+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[162640+12>>2]|0;
     ;HEAP32[$$byval_copy365>>2]=HEAP32[$76>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$76+4>>2]|0;
     ;HEAP8[$$byval_copy366>>0]=HEAP8[$77>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$77+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$77+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$77+3>>0]|0;
     _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
     break;
    } else {
     $759 = HEAP32[(162648)>>2]|0;
     $760 = $759 << 1;
     $761 = (($760) + 765)|0;
     HEAP32[$78>>2] = $761;
     HEAP32[$614>>2] = 561;
     HEAP32[$615>>2] = $759;
     $762 = HEAP32[(162652)>>2]|0;
     HEAP32[$616>>2] = $762;
     $763 = (($746|0) / 2)&-1;
     $764 = (($748) - ($763))|0;
     $765 = (+($764|0));
     HEAPF32[$79>>2] = $765;
     $766 = (($742|0) / 6)&-1;
     $767 = (($744) - ($766))|0;
     $768 = (+($767|0));
     HEAPF32[$617>>2] = $768;
     HEAP32[$80>>2] = -1;
     ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$font$byval_copy364>>2]=HEAP32[$78>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$78+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$78+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$78+12>>2]|0;
     ;HEAP32[$$byval_copy365>>2]=HEAP32[$79>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$79+4>>2]|0;
     ;HEAP8[$$byval_copy366>>0]=HEAP8[$80>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$80+3>>0]|0;
     _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
     break;
    }
   }
  } while(0);
  $769 = (((260740 + (($$011151160*40)|0)|0)) + 36|0);
  $770 = HEAP32[$769>>2]|0;
  $771 = ($770|0)==(0);
  if (!($771)) {
   HEAP32[$81>>2] = 296;
   HEAP32[$606>>2] = 1885;
   HEAP32[$607>>2] = 56;
   HEAP32[$608>>2] = 53;
   $772 = (260740 + (($$011151160*40)|0)|0);
   $773 = +HEAPF32[$772>>2];
   $774 = (~~(($773)));
   HEAP32[$82>>2] = $774;
   $775 = (((260740 + (($$011151160*40)|0)|0)) + 4|0);
   $776 = +HEAPF32[$775>>2];
   $777 = (~~(($776)));
   HEAP32[$609>>2] = $777;
   $778 = (((260740 + (($$011151160*40)|0)|0)) + 20|0);
   $779 = +HEAPF32[$778>>2];
   $780 = $779 * 56.0;
   $781 = (~~(($780)));
   HEAP32[$610>>2] = $781;
   $782 = $779 * 53.0;
   $783 = (~~(($782)));
   HEAP32[$611>>2] = $783;
   $784 = $780 * 0.5;
   HEAPF32[$83>>2] = $784;
   $785 = $782 * 0.5;
   HEAPF32[$612>>2] = $785;
   $786 = (((260740 + (($$011151160*40)|0)|0)) + 16|0);
   $787 = +HEAPF32[$786>>2];
   $788 = (((260740 + (($$011151160*40)|0)|0)) + 24|0);
   $789 = (((260740 + (($$011151160*40)|0)|0)) + 28|0);
   $790 = +HEAPF32[$789>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$788>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$788+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$788+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$788+3>>0]|0;
   _Fade($84,$$byval_copy366,$790);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$81>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$81+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$81+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$81+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$82>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$82+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$82+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$82+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$83>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$83+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$84>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$84+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$787,$$byval_copy366);
  }
  $791 = (($$011151160) + 1)|0;
  $exitcond1183 = ($791|0)==(16);
  if ($exitcond1183) {
   break;
  } else {
   $$011151160 = $791;
  }
 }
 $646 = ((($109)) + 4|0);
 $647 = ((($109)) + 8|0);
 $648 = ((($109)) + 12|0);
 $649 = ((($110)) + 4|0);
 $650 = ((($110)) + 8|0);
 $651 = ((($110)) + 12|0);
 $652 = ((($111)) + 4|0);
 $653 = ((($97)) + 4|0);
 $654 = ((($97)) + 8|0);
 $655 = ((($97)) + 12|0);
 $656 = ((($98)) + 4|0);
 $657 = ((($100)) + 4|0);
 $658 = ((($100)) + 8|0);
 $659 = ((($100)) + 12|0);
 $660 = ((($101)) + 4|0);
 $661 = ((($103)) + 4|0);
 $662 = ((($103)) + 8|0);
 $663 = ((($103)) + 12|0);
 $664 = ((($104)) + 4|0);
 $665 = ((($106)) + 4|0);
 $666 = ((($106)) + 8|0);
 $667 = ((($106)) + 12|0);
 $668 = ((($107)) + 4|0);
 $669 = ((($85)) + 4|0);
 $670 = ((($85)) + 8|0);
 $671 = ((($85)) + 12|0);
 $672 = ((($86)) + 4|0);
 $673 = ((($88)) + 4|0);
 $674 = ((($88)) + 8|0);
 $675 = ((($88)) + 12|0);
 $676 = ((($89)) + 4|0);
 $677 = ((($91)) + 4|0);
 $678 = ((($91)) + 8|0);
 $679 = ((($91)) + 12|0);
 $680 = ((($92)) + 4|0);
 $681 = ((($94)) + 4|0);
 $682 = ((($94)) + 8|0);
 $683 = ((($94)) + 12|0);
 $684 = ((($95)) + 4|0);
 $$011161158 = 0;
 while(1) {
  $796 = (262092 + ($$011161158<<2)|0);
  $797 = HEAP32[$796>>2]|0;
  $798 = ($797|0)==(0);
  L95: do {
   if (!($798)) {
    $799 = (334712 + ($$011161158<<2)|0);
    $800 = HEAP32[$799>>2]|0;
    $801 = ($800|0)==(0);
    $802 = (262148 + ($$011161158<<2)|0);
    $803 = HEAP32[$802>>2]|0;
    $804 = ($803|0)==(0);
    if ($801) {
     if ($804) {
      HEAP32[$97>>2] = 1923;
      HEAP32[$653>>2] = 166;
      HEAP32[$654>>2] = 64;
      HEAP32[$655>>2] = 64;
      $833 = (261868 + ($$011161158<<4)|0);
      $834 = HEAP32[$833>>2]|0;
      $835 = (($834) + -25)|0;
      $836 = (+($835|0));
      HEAPF32[$98>>2] = $836;
      $837 = (((261868 + ($$011161158<<4)|0)) + 4|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = (($838) + -15)|0;
      $840 = (+($839|0));
      HEAPF32[$656>>2] = $840;
      HEAP32[$99>>2] = -1;
      ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
      ;HEAP32[$font$byval_copy364>>2]=HEAP32[$97>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$97+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$97+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$97+12>>2]|0;
      ;HEAP32[$$byval_copy365>>2]=HEAP32[$98>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$98+4>>2]|0;
      ;HEAP8[$$byval_copy366>>0]=HEAP8[$99>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$99+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$99+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$99+3>>0]|0;
      _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
      break;
     }
     switch ($803|0) {
     case 1:  {
      HEAP32[$100>>2] = 1923;
      HEAP32[$657>>2] = 166;
      HEAP32[$658>>2] = 64;
      HEAP32[$659>>2] = 64;
      $841 = (261868 + ($$011161158<<4)|0);
      $842 = HEAP32[$841>>2]|0;
      $843 = (($842) + -25)|0;
      $844 = (+($843|0));
      HEAPF32[$101>>2] = $844;
      $845 = (((261868 + ($$011161158<<4)|0)) + 4|0);
      $846 = HEAP32[$845>>2]|0;
      $847 = (($846) + 10)|0;
      $848 = (+($847|0));
      HEAPF32[$660>>2] = $848;
      HEAP32[$102>>2] = -1;
      ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
      ;HEAP32[$font$byval_copy364>>2]=HEAP32[$100>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$100+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$100+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$100+12>>2]|0;
      ;HEAP32[$$byval_copy365>>2]=HEAP32[$101>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$101+4>>2]|0;
      ;HEAP8[$$byval_copy366>>0]=HEAP8[$102>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$102+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$102+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$102+3>>0]|0;
      _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
      break L95;
      break;
     }
     case 2:  {
      HEAP32[$103>>2] = 316;
      HEAP32[$661>>2] = 1940;
      HEAP32[$662>>2] = 64;
      HEAP32[$663>>2] = 64;
      $849 = (261868 + ($$011161158<<4)|0);
      $850 = HEAP32[$849>>2]|0;
      $851 = (($850) + -25)|0;
      $852 = (+($851|0));
      HEAPF32[$104>>2] = $852;
      $853 = (((261868 + ($$011161158<<4)|0)) + 4|0);
      $854 = HEAP32[$853>>2]|0;
      $855 = (($854) + -15)|0;
      $856 = (+($855|0));
      HEAPF32[$664>>2] = $856;
      HEAP32[$105>>2] = -1;
      ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
      ;HEAP32[$font$byval_copy364>>2]=HEAP32[$103>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$103+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$103+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$103+12>>2]|0;
      ;HEAP32[$$byval_copy365>>2]=HEAP32[$104>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$104+4>>2]|0;
      ;HEAP8[$$byval_copy366>>0]=HEAP8[$105>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$105+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$105+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$105+3>>0]|0;
      _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
      break L95;
      break;
     }
     case 3:  {
      HEAP32[$106>>2] = 1857;
      HEAP32[$665>>2] = 166;
      HEAP32[$666>>2] = 64;
      HEAP32[$667>>2] = 64;
      $857 = (261868 + ($$011161158<<4)|0);
      $858 = HEAP32[$857>>2]|0;
      $859 = (($858) + -25)|0;
      $860 = (+($859|0));
      HEAPF32[$107>>2] = $860;
      $861 = (((261868 + ($$011161158<<4)|0)) + 4|0);
      $862 = HEAP32[$861>>2]|0;
      $863 = (($862) + -15)|0;
      $864 = (+($863|0));
      HEAPF32[$668>>2] = $864;
      HEAP32[$108>>2] = -1;
      ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
      ;HEAP32[$font$byval_copy364>>2]=HEAP32[$106>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$106+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$106+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$106+12>>2]|0;
      ;HEAP32[$$byval_copy365>>2]=HEAP32[$107>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$107+4>>2]|0;
      ;HEAP8[$$byval_copy366>>0]=HEAP8[$108>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$108+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$108+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$108+3>>0]|0;
      _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
      break L95;
      break;
     }
     default: {
      break L95;
     }
     }
    } else {
     if ($804) {
      HEAP32[$85>>2] = 1923;
      HEAP32[$669>>2] = 166;
      HEAP32[$670>>2] = -64;
      HEAP32[$671>>2] = 64;
      $805 = (261868 + ($$011161158<<4)|0);
      $806 = HEAP32[$805>>2]|0;
      $807 = (+($806|0));
      HEAPF32[$86>>2] = $807;
      $808 = (((261868 + ($$011161158<<4)|0)) + 4|0);
      $809 = HEAP32[$808>>2]|0;
      $810 = (($809) + -15)|0;
      $811 = (+($810|0));
      HEAPF32[$672>>2] = $811;
      HEAP32[$87>>2] = -1;
      ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
      ;HEAP32[$font$byval_copy364>>2]=HEAP32[$85>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$85+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$85+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$85+12>>2]|0;
      ;HEAP32[$$byval_copy365>>2]=HEAP32[$86>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$86+4>>2]|0;
      ;HEAP8[$$byval_copy366>>0]=HEAP8[$87>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$87+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$87+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$87+3>>0]|0;
      _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
      break;
     }
     switch ($803|0) {
     case 1:  {
      HEAP32[$88>>2] = 1923;
      HEAP32[$673>>2] = 166;
      HEAP32[$674>>2] = -64;
      HEAP32[$675>>2] = 64;
      $812 = (261868 + ($$011161158<<4)|0);
      $813 = HEAP32[$812>>2]|0;
      $814 = (+($813|0));
      HEAPF32[$89>>2] = $814;
      $815 = (((261868 + ($$011161158<<4)|0)) + 4|0);
      $816 = HEAP32[$815>>2]|0;
      $817 = (($816) + 10)|0;
      $818 = (+($817|0));
      HEAPF32[$676>>2] = $818;
      HEAP32[$90>>2] = -1;
      ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
      ;HEAP32[$font$byval_copy364>>2]=HEAP32[$88>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$88+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$88+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$88+12>>2]|0;
      ;HEAP32[$$byval_copy365>>2]=HEAP32[$89>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$89+4>>2]|0;
      ;HEAP8[$$byval_copy366>>0]=HEAP8[$90>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$90+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$90+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$90+3>>0]|0;
      _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
      break L95;
      break;
     }
     case 2:  {
      HEAP32[$91>>2] = 316;
      HEAP32[$677>>2] = 1940;
      HEAP32[$678>>2] = -64;
      HEAP32[$679>>2] = 64;
      $819 = (261868 + ($$011161158<<4)|0);
      $820 = HEAP32[$819>>2]|0;
      $821 = (+($820|0));
      HEAPF32[$92>>2] = $821;
      $822 = (((261868 + ($$011161158<<4)|0)) + 4|0);
      $823 = HEAP32[$822>>2]|0;
      $824 = (($823) + -15)|0;
      $825 = (+($824|0));
      HEAPF32[$680>>2] = $825;
      HEAP32[$93>>2] = -1;
      ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
      ;HEAP32[$font$byval_copy364>>2]=HEAP32[$91>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$91+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$91+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$91+12>>2]|0;
      ;HEAP32[$$byval_copy365>>2]=HEAP32[$92>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$92+4>>2]|0;
      ;HEAP8[$$byval_copy366>>0]=HEAP8[$93>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$93+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$93+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$93+3>>0]|0;
      _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
      break L95;
      break;
     }
     case 3:  {
      HEAP32[$94>>2] = 1857;
      HEAP32[$681>>2] = 166;
      HEAP32[$682>>2] = -64;
      HEAP32[$683>>2] = 64;
      $826 = (261868 + ($$011161158<<4)|0);
      $827 = HEAP32[$826>>2]|0;
      $828 = (+($827|0));
      HEAPF32[$95>>2] = $828;
      $829 = (((261868 + ($$011161158<<4)|0)) + 4|0);
      $830 = HEAP32[$829>>2]|0;
      $831 = (($830) + -15)|0;
      $832 = (+($831|0));
      HEAPF32[$684>>2] = $832;
      HEAP32[$96>>2] = -1;
      ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
      ;HEAP32[$font$byval_copy364>>2]=HEAP32[$94>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$94+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$94+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$94+12>>2]|0;
      ;HEAP32[$$byval_copy365>>2]=HEAP32[$95>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$95+4>>2]|0;
      ;HEAP8[$$byval_copy366>>0]=HEAP8[$96>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$96+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$96+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$96+3>>0]|0;
      _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
      break L95;
      break;
     }
     default: {
      break L95;
     }
     }
    }
   }
  } while(0);
  $865 = (((262204 + (($$011161158*5140)|0)|0)) + 8|0);
  $866 = HEAP32[$865>>2]|0;
  $867 = ($866|0)==(0);
  if (!($867)) {
   $$011171157 = 0;
   while(1) {
    HEAP32[$109>>2] = 1989;
    HEAP32[$646>>2] = 200;
    HEAP32[$647>>2] = 32;
    HEAP32[$648>>2] = 32;
    $868 = ((((262204 + (($$011161158*5140)|0)|0)) + 20|0) + (($$011171157*40)|0)|0);
    $869 = +HEAPF32[$868>>2];
    $870 = (~~(($869)));
    HEAP32[$110>>2] = $870;
    $871 = ((((((262204 + (($$011161158*5140)|0)|0)) + 20|0) + (($$011171157*40)|0)|0)) + 4|0);
    $872 = +HEAPF32[$871>>2];
    $873 = (~~(($872)));
    HEAP32[$649>>2] = $873;
    $874 = ((((((262204 + (($$011161158*5140)|0)|0)) + 20|0) + (($$011171157*40)|0)|0)) + 20|0);
    $875 = +HEAPF32[$874>>2];
    $876 = $875 * 32.0;
    $877 = (~~(($876)));
    HEAP32[$650>>2] = $877;
    HEAP32[$651>>2] = $877;
    $878 = $875 * 16.0;
    HEAPF32[$111>>2] = $878;
    HEAPF32[$652>>2] = $878;
    $879 = ((((((262204 + (($$011161158*5140)|0)|0)) + 20|0) + (($$011171157*40)|0)|0)) + 16|0);
    $880 = +HEAPF32[$879>>2];
    $881 = ((((((262204 + (($$011161158*5140)|0)|0)) + 20|0) + (($$011171157*40)|0)|0)) + 28|0);
    HEAP32[$113>>2] = -1;
    $882 = +HEAPF32[$881>>2];
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$113>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$113+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$113+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$113+3>>0]|0;
    _Fade($112,$$byval_copy366,$882);
    ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
    ;HEAP32[$$byval_copy319>>2]=HEAP32[$109>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$109+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$109+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$109+12>>2]|0;
    ;HEAP32[$font$byval_copy364>>2]=HEAP32[$110>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$110+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$110+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$110+12>>2]|0;
    ;HEAP32[$$byval_copy365>>2]=HEAP32[$111>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$111+4>>2]|0;
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$112>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$112+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$112+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$112+3>>0]|0;
    _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$880,$$byval_copy366);
    $883 = (($$011171157) + 1)|0;
    $exitcond1181 = ($883|0)==(32);
    if ($exitcond1181) {
     break;
    } else {
     $$011171157 = $883;
    }
   }
  }
  $884 = (($$011161158) + 1)|0;
  $exitcond1182 = ($884|0)==(14);
  if ($exitcond1182) {
   break;
  } else {
   $$011161158 = $884;
  }
 }
 $792 = HEAP32[65449]|0;
 $793 = ($792|0)==(0);
 $794 = HEAP32[83656]|0;
 $795 = ($794|0)!=(0);
 $or$cond = $793 | $795;
 if ($or$cond) {
  $891 = ($792|0)!=(0);
  $or$cond14 = $891 & $795;
  if ($or$cond14) {
   $892 = HEAP32[(162584)>>2]|0;
   $893 = $892 << 2;
   $894 = (($893) + 1025)|0;
   HEAP32[$116>>2] = $894;
   $895 = ((($116)) + 4|0);
   HEAP32[$895>>2] = 486;
   $896 = ((($116)) + 8|0);
   HEAP32[$896>>2] = $892;
   $897 = ((($116)) + 12|0);
   HEAP32[$897>>2] = 60;
   $898 = HEAP32[65445]|0;
   HEAP32[$117>>2] = $898;
   $899 = ((($117)) + 4|0);
   $900 = HEAP32[(261784)>>2]|0;
   HEAP32[$899>>2] = $900;
   $901 = ((($117)) + 8|0);
   HEAP32[$901>>2] = $892;
   $902 = ((($117)) + 12|0);
   HEAP32[$902>>2] = 60;
   HEAPF32[$118>>2] = 0.0;
   $903 = ((($118)) + 4|0);
   HEAPF32[$903>>2] = 0.0;
   HEAP32[$119>>2] = -1;
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$116>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$116+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$116+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$116+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$117>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$117+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$117+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$117+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$118>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$118+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$119>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$119+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$119+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$119+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
  }
 } else {
  $885 = HEAP32[65445]|0;
  $886 = (+($885|0));
  HEAPF32[$114>>2] = $886;
  $887 = ((($114)) + 4|0);
  $888 = HEAP32[(261784)>>2]|0;
  $889 = (($888) + -30)|0;
  $890 = (+($889|0));
  HEAPF32[$887>>2] = $890;
  HEAP32[$115>>2] = -1;
  ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[162576>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[162576+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[162576+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[162576+12>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[$114>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$114+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$115>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$115+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$115+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$115+3>>0]|0;
  _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
 }
 $904 = HEAP32[65460]|0;
 $905 = ($904|0)==(0);
 $906 = HEAP32[83646]|0;
 $907 = ($906|0)!=(0);
 $or$cond16 = $905 | $907;
 if ($or$cond16) {
  $913 = ($904|0)!=(0);
  $or$cond18 = $913 & $907;
  if ($or$cond18) {
   HEAP32[$122>>2] = 1327;
   $914 = ((($122)) + 4|0);
   HEAP32[$914>>2] = 386;
   $915 = ((($122)) + 8|0);
   HEAP32[$915>>2] = 150;
   $916 = ((($122)) + 12|0);
   HEAP32[$916>>2] = 128;
   $917 = HEAP32[65456]|0;
   $918 = (+($917|0));
   HEAPF32[$123>>2] = $918;
   $919 = ((($123)) + 4|0);
   $920 = HEAP32[(261828)>>2]|0;
   $921 = (+($920|0));
   HEAPF32[$919>>2] = $921;
   HEAP32[$124>>2] = -1;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$122>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$122+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$122+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$122+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$123>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$123+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$124>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$124+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$124+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$124+3>>0]|0;
   _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
  }
 } else {
  $908 = HEAP32[65456]|0;
  $909 = (+($908|0));
  HEAPF32[$120>>2] = $909;
  $910 = ((($120)) + 4|0);
  $911 = HEAP32[(261828)>>2]|0;
  $912 = (+($911|0));
  HEAPF32[$910>>2] = $912;
  HEAP32[$121>>2] = -1;
  ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[162592>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[162592+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[162592+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[162592+12>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[$120>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$120+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$121>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$121+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$121+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$121+3>>0]|0;
  _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
 }
 $922 = HEAP32[40579]|0;
 $923 = ($922|0)==(0);
 if (!($923)) {
  HEAP32[$125>>2] = 660;
  $924 = ((($125)) + 4|0);
  HEAP32[$924>>2] = 1060;
  $925 = ((($125)) + 8|0);
  HEAP32[$925>>2] = 93;
  $926 = ((($125)) + 12|0);
  HEAP32[$926>>2] = 240;
  HEAPF32[$126>>2] = 0.0;
  $927 = ((($126)) + 4|0);
  HEAPF32[$927>>2] = 0.0;
  HEAP8[$128>>0] = -26;
  $928 = ((($128)) + 1|0);
  HEAP8[$928>>0] = 41;
  $929 = ((($128)) + 2|0);
  HEAP8[$929>>0] = 55;
  $930 = ((($128)) + 3|0);
  HEAP8[$930>>0] = -1;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$128>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$128+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$128+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$128+3>>0]|0;
  _Fade($127,$$byval_copy366,0.69999998807907104);
  ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$$byval_copy319>>2]=HEAP32[$125>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$125+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$125+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$125+12>>2]|0;
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[334568>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[334568+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[334568+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[334568+12>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[$126>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$126+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$127>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$127+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$127+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$127+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
 }
 $931 = HEAP32[83651]|0;
 $932 = ($931|0)==(0);
 if (!($932)) {
  HEAP32[$129>>2] = 660;
  $933 = ((($129)) + 4|0);
  HEAP32[$933>>2] = 1060;
  $934 = ((($129)) + 8|0);
  HEAP32[$934>>2] = 93;
  $935 = ((($129)) + 12|0);
  HEAP32[$935>>2] = 240;
  HEAPF32[$130>>2] = 0.0;
  $936 = ((($130)) + 4|0);
  HEAPF32[$936>>2] = 0.0;
  HEAP8[$132>>0] = -1;
  $937 = ((($132)) + 1|0);
  HEAP8[$937>>0] = -95;
  $938 = ((($132)) + 2|0);
  HEAP8[$938>>0] = 0;
  $939 = ((($132)) + 3|0);
  HEAP8[$939>>0] = -1;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$132>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$132+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$132+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$132+3>>0]|0;
  _Fade($131,$$byval_copy366,0.69999998807907104);
  ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$$byval_copy319>>2]=HEAP32[$129>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$129+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$129+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$129+12>>2]|0;
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[334608>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[334608+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[334608+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[334608+12>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[$130>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$130+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$131>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$131+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$131+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$131+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
 }
 $940 = HEAP32[40577]|0;
 $941 = ($940|0)==(0);
 if (!($941)) {
  $942 = ((($133)) + 4|0);
  $943 = ((($133)) + 8|0);
  $944 = ((($133)) + 12|0);
  $945 = ((($134)) + 4|0);
  $946 = ((($134)) + 8|0);
  $947 = ((($134)) + 12|0);
  $948 = ((($135)) + 4|0);
  $$011181156 = 0;
  while(1) {
   HEAP32[$133>>2] = 2;
   HEAP32[$942>>2] = 364;
   HEAP32[$943>>2] = 500;
   HEAP32[$944>>2] = 400;
   $956 = HEAP32[65441]|0;
   $957 = HEAP32[(261772)>>2]|0;
   $958 = (($957|0) / 2)&-1;
   $959 = (($958) + ($956))|0;
   HEAP32[$134>>2] = $959;
   $960 = HEAP32[(261768)>>2]|0;
   $961 = HEAP32[(261776)>>2]|0;
   $962 = (($961|0) / 2)&-1;
   $963 = (($962) + ($960))|0;
   HEAP32[$945>>2] = $963;
   HEAP32[$946>>2] = 2000;
   HEAP32[$947>>2] = 1600;
   HEAPF32[$135>>2] = 0.0;
   HEAPF32[$948>>2] = 800.0;
   $964 = ($$011181156*45)|0;
   $965 = (+($964|0));
   ;HEAP8[$$byval_copy366>>0]=HEAP8[340304>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[340304+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[340304+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[340304+3>>0]|0;
   _Fade($136,$$byval_copy366,0.69999998807907104);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$133>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$133+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$133+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$133+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$134>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$134+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$134+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$134+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$135>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$135+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$136>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$136+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$136+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$136+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$965,$$byval_copy366);
   $966 = (($$011181156) + 1)|0;
   $exitcond1180 = ($966|0)==(8);
   if ($exitcond1180) {
    break;
   } else {
    $$011181156 = $966;
   }
  }
  $949 = ((($137)) + 4|0);
  $950 = ((($137)) + 8|0);
  $951 = ((($137)) + 12|0);
  $952 = ((($138)) + 4|0);
  $953 = ((($138)) + 8|0);
  $954 = ((($138)) + 12|0);
  $955 = ((($139)) + 4|0);
  $$011191155 = 0;
  while(1) {
   HEAP32[$137>>2] = 2;
   HEAP32[$949>>2] = 364;
   HEAP32[$950>>2] = 500;
   HEAP32[$951>>2] = 400;
   $967 = HEAP32[65441]|0;
   $968 = HEAP32[(261772)>>2]|0;
   $969 = (($968|0) / 2)&-1;
   $970 = (($969) + ($967))|0;
   HEAP32[$138>>2] = $970;
   $971 = HEAP32[(261768)>>2]|0;
   $972 = HEAP32[(261776)>>2]|0;
   $973 = (($972|0) / 2)&-1;
   $974 = (($973) + ($971))|0;
   HEAP32[$952>>2] = $974;
   HEAP32[$953>>2] = 2000;
   HEAP32[$954>>2] = 400;
   HEAPF32[$139>>2] = 0.0;
   HEAPF32[$955>>2] = 200.0;
   $975 = ($$011191155*45)|0;
   $976 = (+($975|0));
   $977 = $976 + 22.5;
   $978 = $977;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[340328>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[340328+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[340328+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[340328+3>>0]|0;
   _Fade($140,$$byval_copy366,0.69999998807907104);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$137>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$137+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$137+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$137+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$138>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$138+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$138+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$138+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$139>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$139+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$140>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$140+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$140+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$140+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$978,$$byval_copy366);
   $979 = (($$011191155) + 1)|0;
   $exitcond1179 = ($979|0)==(8);
   if ($exitcond1179) {
    break;
   } else {
    $$011191155 = $979;
   }
  }
 }
 $980 = HEAP32[40564]|0;
 $981 = ($980|0)!=(0);
 $982 = HEAP32[40573]|0;
 $983 = ($982|0)!=(0);
 $or$cond20 = $981 & $983;
 L144: do {
  if ($or$cond20) {
   $984 = HEAP32[83633]|0;
   switch ($984|0) {
   case 3:  {
    $985 = HEAP32[65441]|0;
    $986 = HEAP32[(261772)>>2]|0;
    $987 = (($985) - ($986))|0;
    $988 = (+($987|0));
    HEAPF32[$141>>2] = $988;
    $989 = ((($141)) + 4|0);
    $990 = HEAP32[(261768)>>2]|0;
    $991 = (($990) + -25)|0;
    $992 = (+($991|0));
    HEAPF32[$989>>2] = $992;
    HEAP32[$142>>2] = -1;
    ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
    ;HEAP32[$font$byval_copy364>>2]=HEAP32[162656>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[162656+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[162656+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[162656+12>>2]|0;
    ;HEAP32[$$byval_copy365>>2]=HEAP32[$141>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$141+4>>2]|0;
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$142>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$142+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$142+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$142+3>>0]|0;
    _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
    break L144;
    break;
   }
   case 0:  {
    HEAP32[$143>>2] = 1083;
    $993 = ((($143)) + 4|0);
    HEAP32[$993>>2] = 1732;
    $994 = ((($143)) + 8|0);
    HEAP32[$994>>2] = 100;
    $995 = ((($143)) + 12|0);
    HEAP32[$995>>2] = 100;
    $996 = HEAP32[65441]|0;
    $997 = HEAP32[(261772)>>2]|0;
    $998 = (($996) - ($997))|0;
    HEAP32[$144>>2] = $998;
    $999 = ((($144)) + 4|0);
    $1000 = HEAP32[(261768)>>2]|0;
    $1001 = (($1000) + -25)|0;
    HEAP32[$999>>2] = $1001;
    $1002 = ((($144)) + 8|0);
    HEAP32[$1002>>2] = 100;
    $1003 = ((($144)) + 12|0);
    HEAP32[$1003>>2] = 100;
    HEAPF32[$145>>2] = 0.0;
    $1004 = ((($145)) + 4|0);
    HEAPF32[$1004>>2] = 0.0;
    HEAP32[$146>>2] = -1;
    ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
    ;HEAP32[$$byval_copy319>>2]=HEAP32[$143>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$143+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$143+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$143+12>>2]|0;
    ;HEAP32[$font$byval_copy364>>2]=HEAP32[$144>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$144+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$144+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$144+12>>2]|0;
    ;HEAP32[$$byval_copy365>>2]=HEAP32[$145>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$145+4>>2]|0;
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$146>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$146+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$146+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$146+3>>0]|0;
    _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
    break L144;
    break;
   }
   case 1:  {
    HEAP32[$147>>2] = 1079;
    $1005 = ((($147)) + 4|0);
    HEAP32[$1005>>2] = 1528;
    $1006 = ((($147)) + 8|0);
    HEAP32[$1006>>2] = 100;
    $1007 = ((($147)) + 12|0);
    HEAP32[$1007>>2] = 100;
    $1008 = HEAP32[65441]|0;
    $1009 = HEAP32[(261772)>>2]|0;
    $1010 = (($1008) - ($1009))|0;
    HEAP32[$148>>2] = $1010;
    $1011 = ((($148)) + 4|0);
    $1012 = HEAP32[(261768)>>2]|0;
    $1013 = (($1012) + -25)|0;
    HEAP32[$1011>>2] = $1013;
    $1014 = ((($148)) + 8|0);
    HEAP32[$1014>>2] = 100;
    $1015 = ((($148)) + 12|0);
    HEAP32[$1015>>2] = 100;
    HEAPF32[$149>>2] = 0.0;
    $1016 = ((($149)) + 4|0);
    HEAPF32[$1016>>2] = 0.0;
    HEAP32[$150>>2] = -1;
    ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
    ;HEAP32[$$byval_copy319>>2]=HEAP32[$147>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$147+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$147+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$147+12>>2]|0;
    ;HEAP32[$font$byval_copy364>>2]=HEAP32[$148>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$148+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$148+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$148+12>>2]|0;
    ;HEAP32[$$byval_copy365>>2]=HEAP32[$149>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$149+4>>2]|0;
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$150>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$150+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$150+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$150+3>>0]|0;
    _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
    break L144;
    break;
   }
   case 2:  {
    $1017 = HEAP32[40577]|0;
    $1018 = ($1017|0)==(0);
    $1019 = HEAP32[65441]|0;
    $1020 = HEAP32[(261768)>>2]|0;
    $1021 = (($1020) + -25)|0;
    if ($1018) {
     $1028 = (($1019) + -66)|0;
     HEAP32[$153>>2] = $1028;
     $1029 = ((($153)) + 4|0);
     HEAP32[$1029>>2] = $1021;
     $1030 = ((($153)) + 8|0);
     HEAP32[$1030>>2] = 100;
     $1031 = ((($153)) + 12|0);
     HEAP32[$1031>>2] = 100;
     HEAPF32[$154>>2] = 0.0;
     $1032 = ((($154)) + 4|0);
     HEAPF32[$1032>>2] = 0.0;
     ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$$byval_copy319>>2]=HEAP32[162672>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[162672+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[162672+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[162672+12>>2]|0;
     ;HEAP32[$font$byval_copy364>>2]=HEAP32[$153>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$153+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$153+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$153+12>>2]|0;
     ;HEAP32[$$byval_copy365>>2]=HEAP32[$154>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$154+4>>2]|0;
     ;HEAP8[$$byval_copy366>>0]=HEAP8[340304>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[340304+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[340304+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[340304+3>>0]|0;
     _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
     break L144;
    } else {
     $1022 = HEAP32[(261772)>>2]|0;
     $1023 = (($1019) - ($1022))|0;
     HEAP32[$151>>2] = $1023;
     $1024 = ((($151)) + 4|0);
     HEAP32[$1024>>2] = $1021;
     $1025 = ((($151)) + 8|0);
     HEAP32[$1025>>2] = 100;
     $1026 = ((($151)) + 12|0);
     HEAP32[$1026>>2] = 100;
     HEAPF32[$152>>2] = 0.0;
     $1027 = ((($152)) + 4|0);
     HEAPF32[$1027>>2] = 0.0;
     ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$$byval_copy319>>2]=HEAP32[162688>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[162688+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[162688+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[162688+12>>2]|0;
     ;HEAP32[$font$byval_copy364>>2]=HEAP32[$151>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$151+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$151+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$151+12>>2]|0;
     ;HEAP32[$$byval_copy365>>2]=HEAP32[$152>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$152+4>>2]|0;
     ;HEAP8[$$byval_copy366>>0]=HEAP8[340304>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[340304+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[340304+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[340304+3>>0]|0;
     _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
     break L144;
    }
    break;
   }
   case 4:  {
    HEAP32[$155>>2] = 1083;
    $1033 = ((($155)) + 4|0);
    HEAP32[$1033>>2] = 1732;
    $1034 = ((($155)) + 8|0);
    HEAP32[$1034>>2] = 100;
    $1035 = ((($155)) + 12|0);
    HEAP32[$1035>>2] = 100;
    $1036 = HEAP32[65441]|0;
    $1037 = HEAP32[(261772)>>2]|0;
    $1038 = (($1036) - ($1037))|0;
    HEAP32[$156>>2] = $1038;
    $1039 = ((($156)) + 4|0);
    $1040 = HEAP32[(261768)>>2]|0;
    $1041 = (($1040) + -25)|0;
    HEAP32[$1039>>2] = $1041;
    $1042 = ((($156)) + 8|0);
    HEAP32[$1042>>2] = 100;
    $1043 = ((($156)) + 12|0);
    HEAP32[$1043>>2] = 100;
    HEAPF32[$157>>2] = 0.0;
    $1044 = ((($157)) + 4|0);
    HEAPF32[$1044>>2] = 0.0;
    HEAP32[$158>>2] = -1;
    ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
    ;HEAP32[$$byval_copy319>>2]=HEAP32[$155>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$155+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$155+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$155+12>>2]|0;
    ;HEAP32[$font$byval_copy364>>2]=HEAP32[$156>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$156+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$156+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$156+12>>2]|0;
    ;HEAP32[$$byval_copy365>>2]=HEAP32[$157>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$157+4>>2]|0;
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$158>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$158+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$158+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$158+3>>0]|0;
    _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
    break L144;
    break;
   }
   default: {
    break L144;
   }
   }
  } else {
   $1045 = ($982|0)==(0);
   $or$cond22 = $981 & $1045;
   $1046 = HEAP32[65441]|0;
   $1047 = HEAP32[(261768)>>2]|0;
   $1048 = HEAP32[(261772)>>2]|0;
   $1049 = (($1047) + -25)|0;
   $1050 = (($1046) - ($1048))|0;
   if ($or$cond22) {
    HEAP32[$159>>2] = 1025;
    $1051 = ((($159)) + 4|0);
    HEAP32[$1051>>2] = 384;
    $1052 = ((($159)) + 8|0);
    HEAP32[$1052>>2] = 100;
    $1053 = ((($159)) + 12|0);
    HEAP32[$1053>>2] = 100;
    $1054 = (+($1050|0));
    HEAPF32[$160>>2] = $1054;
    $1055 = ((($160)) + 4|0);
    $1056 = (+($1049|0));
    HEAPF32[$1055>>2] = $1056;
    HEAP32[$161>>2] = -1;
    ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
    ;HEAP32[$font$byval_copy364>>2]=HEAP32[$159>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$159+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$159+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$159+12>>2]|0;
    ;HEAP32[$$byval_copy365>>2]=HEAP32[$160>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$160+4>>2]|0;
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$161>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$161+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$161+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$161+3>>0]|0;
    _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
    break;
   } else {
    HEAP32[$162>>2] = 1083;
    $1057 = ((($162)) + 4|0);
    HEAP32[$1057>>2] = 1630;
    $1058 = ((($162)) + 8|0);
    HEAP32[$1058>>2] = 100;
    $1059 = ((($162)) + 12|0);
    HEAP32[$1059>>2] = 100;
    HEAP32[$163>>2] = $1050;
    $1060 = ((($163)) + 4|0);
    HEAP32[$1060>>2] = $1049;
    $1061 = ((($163)) + 8|0);
    HEAP32[$1061>>2] = 100;
    $1062 = ((($163)) + 12|0);
    HEAP32[$1062>>2] = 100;
    HEAPF32[$164>>2] = 0.0;
    $1063 = ((($164)) + 4|0);
    HEAPF32[$1063>>2] = 0.0;
    HEAP32[$165>>2] = -1;
    ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
    ;HEAP32[$$byval_copy319>>2]=HEAP32[$162>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$162+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$162+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$162+12>>2]|0;
    ;HEAP32[$font$byval_copy364>>2]=HEAP32[$163>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$163+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$163+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$163+12>>2]|0;
    ;HEAP32[$$byval_copy365>>2]=HEAP32[$164>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$164+4>>2]|0;
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$165>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$165+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$165+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$165+3>>0]|0;
    _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
    break;
   }
  }
 } while(0);
 $1064 = ((($166)) + 4|0);
 $$011201154 = 0;
 while(1) {
  $1069 = (259196 + ($$011201154<<2)|0);
  $1070 = HEAP32[$1069>>2]|0;
  $1071 = ($1070|0)==(0);
  if (!($1071)) {
   $1072 = (259236 + ($$011201154<<4)|0);
   $1073 = HEAP32[$1072>>2]|0;
   $1074 = (($1073) + -14)|0;
   $1075 = (+($1074|0));
   HEAPF32[$166>>2] = $1075;
   $1076 = (((259236 + ($$011201154<<4)|0)) + 4|0);
   $1077 = HEAP32[$1076>>2]|0;
   $1078 = (($1077) + -14)|0;
   $1079 = (+($1078|0));
   HEAPF32[$1064>>2] = $1079;
   HEAP32[$167>>2] = -1;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[26384>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$$byval_copy319+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[162560>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[162560+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[162560+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[162560+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$166>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$166+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$167>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$167+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$167+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$167+3>>0]|0;
   _DrawTextureRec($$byval_copy319,$font$byval_copy364,$$byval_copy365,$$byval_copy366);
  }
  $1080 = (($$011201154) + 1)|0;
  $exitcond1178 = ($1080|0)==(10);
  if ($exitcond1178) {
   break;
  } else {
   $$011201154 = $1080;
  }
 }
 $1065 = HEAP32[40564]|0;
 $1066 = ($1065|0)==(0);
 $1067 = HEAP32[40573]|0;
 $1068 = ($1067|0)!=(0);
 $or$cond24 = $1066 | $1068;
 L166: do {
  if (!($or$cond24)) {
   $1081 = HEAP32[6803]|0;
   switch ($1081|0) {
   case 0:  {
    $1082 = (_GetScreenWidth()|0);
    $1083 = (_GetScreenHeight()|0);
    HEAP8[$169>>0] = -40;
    $1084 = ((($169)) + 1|0);
    HEAP8[$1084>>0] = -56;
    $1085 = ((($169)) + 2|0);
    HEAP8[$1085>>0] = 39;
    $1086 = ((($169)) + 3|0);
    HEAP8[$1086>>0] = -1;
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$169>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$169+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$169+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$169+3>>0]|0;
    _Fade($168,$$byval_copy366,0.40000000596046448);
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$168>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$168+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$168+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$168+3>>0]|0;
    _DrawRectangle(0,0,$1082,$1083,$$byval_copy366);
    break L166;
    break;
   }
   case 1:  {
    $1087 = (_GetScreenWidth()|0);
    $1088 = (_GetScreenHeight()|0);
    HEAP8[$171>>0] = -101;
    $1089 = ((($171)) + 1|0);
    HEAP8[$1089>>0] = 70;
    $1090 = ((($171)) + 2|0);
    HEAP8[$1090>>0] = 22;
    $1091 = ((($171)) + 3|0);
    HEAP8[$1091>>0] = -1;
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$171>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$171+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$171+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$171+3>>0]|0;
    _Fade($170,$$byval_copy366,0.40000000596046448);
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$170>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$170+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$170+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$170+3>>0]|0;
    _DrawRectangle(0,0,$1087,$1088,$$byval_copy366);
    break L166;
    break;
   }
   default: {
    $1092 = ($1081|0)==(2);
    $1093 = (_GetScreenWidth()|0);
    $1094 = (_GetScreenHeight()|0);
    if ($1092) {
     HEAP8[$173>>0] = 17;
     $1095 = ((($173)) + 1|0);
     HEAP8[$1095>>0] = -127;
     $1096 = ((($173)) + 2|0);
     HEAP8[$1096>>0] = -94;
     $1097 = ((($173)) + 3|0);
     HEAP8[$1097>>0] = -1;
     ;HEAP8[$$byval_copy366>>0]=HEAP8[$173>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$173+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$173+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$173+3>>0]|0;
     _Fade($172,$$byval_copy366,0.40000000596046448);
     ;HEAP8[$$byval_copy366>>0]=HEAP8[$172>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$172+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$172+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$172+3>>0]|0;
     _DrawRectangle(0,0,$1093,$1094,$$byval_copy366);
     break L166;
    } else {
     HEAP8[$175>>0] = 82;
     $1098 = ((($175)) + 1|0);
     HEAP8[$1098>>0] = -82;
     $1099 = ((($175)) + 2|0);
     HEAP8[$1099>>0] = 7;
     $1100 = ((($175)) + 3|0);
     HEAP8[$1100>>0] = -1;
     ;HEAP8[$$byval_copy366>>0]=HEAP8[$175>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$175+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$175+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$175+3>>0]|0;
     _Fade($174,$$byval_copy366,0.40000000596046448);
     ;HEAP8[$$byval_copy366>>0]=HEAP8[$174>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$174+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$174+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$174+3>>0]|0;
     _DrawRectangle(0,0,$1093,$1094,$$byval_copy366);
     break L166;
    }
   }
   }
  }
 } while(0);
 $1101 = ((($192)) + 4|0);
 $1102 = ((($192)) + 8|0);
 $1103 = ((($192)) + 12|0);
 $1104 = ((($193)) + 4|0);
 $1105 = ((($193)) + 8|0);
 $1106 = ((($193)) + 12|0);
 $1107 = ((($194)) + 4|0);
 $1108 = ((($188)) + 4|0);
 $1109 = ((($188)) + 8|0);
 $1110 = ((($188)) + 12|0);
 $1111 = ((($189)) + 4|0);
 $1112 = ((($189)) + 8|0);
 $1113 = ((($189)) + 12|0);
 $1114 = ((($190)) + 4|0);
 $1115 = ((($184)) + 4|0);
 $1116 = ((($184)) + 8|0);
 $1117 = ((($184)) + 12|0);
 $1118 = ((($185)) + 4|0);
 $1119 = ((($185)) + 8|0);
 $1120 = ((($185)) + 12|0);
 $1121 = ((($186)) + 4|0);
 $1122 = ((($180)) + 4|0);
 $1123 = ((($180)) + 8|0);
 $1124 = ((($180)) + 12|0);
 $1125 = ((($181)) + 4|0);
 $1126 = ((($181)) + 8|0);
 $1127 = ((($181)) + 12|0);
 $1128 = ((($182)) + 4|0);
 $1129 = ((($176)) + 4|0);
 $1130 = ((($176)) + 8|0);
 $1131 = ((($176)) + 12|0);
 $1132 = ((($177)) + 4|0);
 $1133 = ((($177)) + 8|0);
 $1134 = ((($177)) + 12|0);
 $1135 = ((($178)) + 4|0);
 $$011211153 = 0;
 while(1) {
  $1136 = (((162724 + (($$011211153*40)|0)|0)) + 36|0);
  $1137 = HEAP32[$1136>>2]|0;
  $1138 = ($1137|0)==(0);
  if (!($1138)) {
   HEAP32[$176>>2] = 419;
   HEAP32[$1129>>2] = 1839;
   HEAP32[$1130>>2] = 32;
   HEAP32[$1131>>2] = 32;
   $1139 = (162724 + (($$011211153*40)|0)|0);
   $1140 = +HEAPF32[$1139>>2];
   $1141 = (~~(($1140)));
   HEAP32[$177>>2] = $1141;
   $1142 = (((162724 + (($$011211153*40)|0)|0)) + 4|0);
   $1143 = +HEAPF32[$1142>>2];
   $1144 = (~~(($1143)));
   HEAP32[$1132>>2] = $1144;
   $1145 = (((162724 + (($$011211153*40)|0)|0)) + 20|0);
   $1146 = +HEAPF32[$1145>>2];
   $1147 = $1146 * 32.0;
   $1148 = (~~(($1147)));
   HEAP32[$1133>>2] = $1148;
   HEAP32[$1134>>2] = $1148;
   $1149 = $1147 * 0.5;
   HEAPF32[$178>>2] = $1149;
   HEAPF32[$1135>>2] = $1149;
   $1150 = (((162724 + (($$011211153*40)|0)|0)) + 16|0);
   $1151 = +HEAPF32[$1150>>2];
   $1152 = (((162724 + (($$011211153*40)|0)|0)) + 24|0);
   $1153 = (((162724 + (($$011211153*40)|0)|0)) + 28|0);
   $1154 = +HEAPF32[$1153>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$1152>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$1152+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$1152+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$1152+3>>0]|0;
   _Fade($179,$$byval_copy366,$1154);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$176>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$176+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$176+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$176+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$177>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$177+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$177+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$177+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$178>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$178+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$179>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$179+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$179+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$179+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$1151,$$byval_copy366);
  }
  $1155 = (((188368 + (($$011211153*40)|0)|0)) + 36|0);
  $1156 = HEAP32[$1155>>2]|0;
  $1157 = ($1156|0)==(0);
  if (!($1157)) {
   HEAP32[$180>>2] = 453;
   HEAP32[$1122>>2] = 1839;
   HEAP32[$1123>>2] = 32;
   HEAP32[$1124>>2] = 32;
   $1158 = (188368 + (($$011211153*40)|0)|0);
   $1159 = +HEAPF32[$1158>>2];
   $1160 = (~~(($1159)));
   HEAP32[$181>>2] = $1160;
   $1161 = (((188368 + (($$011211153*40)|0)|0)) + 4|0);
   $1162 = +HEAPF32[$1161>>2];
   $1163 = (~~(($1162)));
   HEAP32[$1125>>2] = $1163;
   $1164 = (((188368 + (($$011211153*40)|0)|0)) + 20|0);
   $1165 = +HEAPF32[$1164>>2];
   $1166 = $1165 * 32.0;
   $1167 = (~~(($1166)));
   HEAP32[$1126>>2] = $1167;
   HEAP32[$1127>>2] = $1167;
   $1168 = $1166 * 0.5;
   HEAPF32[$182>>2] = $1168;
   HEAPF32[$1128>>2] = $1168;
   $1169 = (((188368 + (($$011211153*40)|0)|0)) + 16|0);
   $1170 = +HEAPF32[$1169>>2];
   $1171 = (((188368 + (($$011211153*40)|0)|0)) + 24|0);
   $1172 = (((188368 + (($$011211153*40)|0)|0)) + 28|0);
   $1173 = +HEAPF32[$1172>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$1171>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$1171+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$1171+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$1171+3>>0]|0;
   _Fade($183,$$byval_copy366,$1173);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$180>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$180+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$180+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$180+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$181>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$181+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$181+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$181+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$182>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$182+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$183>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$183+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$183+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$183+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$1170,$$byval_copy366);
  }
  $1174 = (((193508 + (($$011211153*40)|0)|0)) + 36|0);
  $1175 = HEAP32[$1174>>2]|0;
  $1176 = ($1175|0)==(0);
  if (!($1176)) {
   HEAP32[$184>>2] = 354;
   HEAP32[$1115>>2] = 2006;
   HEAP32[$1116>>2] = 32;
   HEAP32[$1117>>2] = 32;
   $1177 = (193508 + (($$011211153*40)|0)|0);
   $1178 = +HEAPF32[$1177>>2];
   $1179 = (~~(($1178)));
   HEAP32[$185>>2] = $1179;
   $1180 = (((193508 + (($$011211153*40)|0)|0)) + 4|0);
   $1181 = +HEAPF32[$1180>>2];
   $1182 = (~~(($1181)));
   HEAP32[$1118>>2] = $1182;
   $1183 = (((193508 + (($$011211153*40)|0)|0)) + 20|0);
   $1184 = +HEAPF32[$1183>>2];
   $1185 = $1184 * 32.0;
   $1186 = (~~(($1185)));
   HEAP32[$1119>>2] = $1186;
   HEAP32[$1120>>2] = $1186;
   $1187 = $1185 * 0.5;
   HEAPF32[$186>>2] = $1187;
   HEAPF32[$1121>>2] = $1187;
   $1188 = (((193508 + (($$011211153*40)|0)|0)) + 16|0);
   $1189 = +HEAPF32[$1188>>2];
   $1190 = (((193508 + (($$011211153*40)|0)|0)) + 24|0);
   $1191 = (((193508 + (($$011211153*40)|0)|0)) + 28|0);
   $1192 = +HEAPF32[$1191>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$1190>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$1190+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$1190+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$1190+3>>0]|0;
   _Fade($187,$$byval_copy366,$1192);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$184>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$184+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$184+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$184+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$185>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$185+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$185+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$185+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$186>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$186+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$187>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$187+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$187+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$187+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$1189,$$byval_copy366);
  }
  $1193 = (((198648 + (($$011211153*40)|0)|0)) + 36|0);
  $1194 = HEAP32[$1193>>2]|0;
  $1195 = ($1194|0)==(0);
  if (!($1195)) {
   HEAP32[$188>>2] = 1989;
   HEAP32[$1108>>2] = 166;
   HEAP32[$1109>>2] = 32;
   HEAP32[$1110>>2] = 32;
   $1196 = (198648 + (($$011211153*40)|0)|0);
   $1197 = +HEAPF32[$1196>>2];
   $1198 = (~~(($1197)));
   HEAP32[$189>>2] = $1198;
   $1199 = (((198648 + (($$011211153*40)|0)|0)) + 4|0);
   $1200 = +HEAPF32[$1199>>2];
   $1201 = (~~(($1200)));
   HEAP32[$1111>>2] = $1201;
   $1202 = (((198648 + (($$011211153*40)|0)|0)) + 20|0);
   $1203 = +HEAPF32[$1202>>2];
   $1204 = $1203 * 32.0;
   $1205 = (~~(($1204)));
   HEAP32[$1112>>2] = $1205;
   HEAP32[$1113>>2] = $1205;
   $1206 = $1204 * 0.5;
   HEAPF32[$190>>2] = $1206;
   HEAPF32[$1114>>2] = $1206;
   $1207 = (((198648 + (($$011211153*40)|0)|0)) + 16|0);
   $1208 = +HEAPF32[$1207>>2];
   $1209 = (((198648 + (($$011211153*40)|0)|0)) + 24|0);
   $1210 = (((198648 + (($$011211153*40)|0)|0)) + 28|0);
   $1211 = +HEAPF32[$1210>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$1209>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$1209+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$1209+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$1209+3>>0]|0;
   _Fade($191,$$byval_copy366,$1211);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$188>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$188+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$188+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$188+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$189>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$189+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$189+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$189+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$190>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$190+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$191>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$191+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$191+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$191+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$1208,$$byval_copy366);
  }
  $1212 = (((203788 + (($$011211153*40)|0)|0)) + 36|0);
  $1213 = HEAP32[$1212>>2]|0;
  $1214 = ($1213|0)==(0);
  if (!($1214)) {
   HEAP32[$192>>2] = 487;
   HEAP32[$1101>>2] = 1839;
   HEAP32[$1102>>2] = 32;
   HEAP32[$1103>>2] = 32;
   $1215 = (203788 + (($$011211153*40)|0)|0);
   $1216 = +HEAPF32[$1215>>2];
   $1217 = (~~(($1216)));
   HEAP32[$193>>2] = $1217;
   $1218 = (((203788 + (($$011211153*40)|0)|0)) + 4|0);
   $1219 = +HEAPF32[$1218>>2];
   $1220 = (~~(($1219)));
   HEAP32[$1104>>2] = $1220;
   $1221 = (((203788 + (($$011211153*40)|0)|0)) + 20|0);
   $1222 = +HEAPF32[$1221>>2];
   $1223 = $1222 * 32.0;
   $1224 = (~~(($1223)));
   HEAP32[$1105>>2] = $1224;
   HEAP32[$1106>>2] = $1224;
   $1225 = $1223 * 0.5;
   HEAPF32[$194>>2] = $1225;
   HEAPF32[$1107>>2] = $1225;
   $1226 = (((203788 + (($$011211153*40)|0)|0)) + 16|0);
   $1227 = +HEAPF32[$1226>>2];
   $1228 = (((203788 + (($$011211153*40)|0)|0)) + 24|0);
   $1229 = (((203788 + (($$011211153*40)|0)|0)) + 28|0);
   $1230 = +HEAPF32[$1229>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$1228>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$1228+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$1228+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$1228+3>>0]|0;
   _Fade($195,$$byval_copy366,$1230);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$192>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$192+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$192+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$192+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$193>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$193+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$193+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$193+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$194>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$194+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$195>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$195+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$195+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$195+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$1227,$$byval_copy366);
  }
  $1231 = (($$011211153) + 1)|0;
  $exitcond1177 = ($1231|0)==(128);
  if ($exitcond1177) {
   $$011221152 = 0;
   break;
  } else {
   $$011211153 = $1231;
  }
 }
 while(1) {
  $1239 = (((255636 + (($$011221152*40)|0)|0)) + 36|0);
  $1240 = HEAP32[$1239>>2]|0;
  $1241 = ($1240|0)==(0);
  if (!($1241)) {
   $1242 = (255636 + (($$011221152*40)|0)|0);
   $1243 = +HEAPF32[$1242>>2];
   $1244 = (~~(($1243)));
   $1245 = (((255636 + (($$011221152*40)|0)|0)) + 4|0);
   $1246 = +HEAPF32[$1245>>2];
   $1247 = (~~(($1246)));
   $1248 = (((255636 + (($$011221152*40)|0)|0)) + 20|0);
   $1249 = +HEAPF32[$1248>>2];
   $1250 = (~~(($1249)));
   $1251 = (((255636 + (($$011221152*40)|0)|0)) + 24|0);
   $1252 = +HEAPF32[$1251>>2];
   $1253 = (~~(($1252)));
   $1254 = (((255636 + (($$011221152*40)|0)|0)) + 32|0);
   HEAP32[$197>>2] = -1;
   $1255 = +HEAPF32[$1254>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$197>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$197+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$197+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$197+3>>0]|0;
   _Fade($196,$$byval_copy366,$1255);
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$196>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$196+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$196+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$196+3>>0]|0;
   _DrawRectangle($1244,$1247,$1250,$1253,$$byval_copy366);
  }
  $1256 = (($$011221152) + 1)|0;
  $exitcond1176 = ($1256|0)==(64);
  if ($exitcond1176) {
   break;
  } else {
   $$011221152 = $1256;
  }
 }
 $1232 = ((($198)) + 4|0);
 $1233 = ((($198)) + 8|0);
 $1234 = ((($198)) + 12|0);
 $1235 = ((($199)) + 4|0);
 $1236 = ((($199)) + 8|0);
 $1237 = ((($199)) + 12|0);
 $1238 = ((($200)) + 4|0);
 $$011231151 = 0;
 while(1) {
  $1264 = (((208928 + (($$011231151*40)|0)|0)) + 36|0);
  $1265 = HEAP32[$1264>>2]|0;
  $1266 = ($1265|0)==(0);
  if (!($1266)) {
   HEAP32[$198>>2] = 487;
   HEAP32[$1232>>2] = 1839;
   HEAP32[$1233>>2] = 32;
   HEAP32[$1234>>2] = 32;
   $1267 = (208928 + (($$011231151*40)|0)|0);
   $1268 = +HEAPF32[$1267>>2];
   $1269 = (~~(($1268)));
   HEAP32[$199>>2] = $1269;
   $1270 = (((208928 + (($$011231151*40)|0)|0)) + 4|0);
   $1271 = +HEAPF32[$1270>>2];
   $1272 = (~~(($1271)));
   HEAP32[$1235>>2] = $1272;
   $1273 = (((208928 + (($$011231151*40)|0)|0)) + 20|0);
   $1274 = +HEAPF32[$1273>>2];
   $1275 = $1274 * 32.0;
   $1276 = (~~(($1275)));
   HEAP32[$1236>>2] = $1276;
   HEAP32[$1237>>2] = $1276;
   $1277 = $1275 * 0.5;
   HEAPF32[$200>>2] = $1277;
   HEAPF32[$1238>>2] = $1277;
   $1278 = (((208928 + (($$011231151*40)|0)|0)) + 16|0);
   $1279 = +HEAPF32[$1278>>2];
   $1280 = (((208928 + (($$011231151*40)|0)|0)) + 24|0);
   $1281 = (((208928 + (($$011231151*40)|0)|0)) + 28|0);
   $1282 = +HEAPF32[$1281>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$1280>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$1280+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$1280+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$1280+3>>0]|0;
   _Fade($201,$$byval_copy366,$1282);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$198>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$198+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$198+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$198+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$199>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$199+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$199+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$199+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$200>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$200+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$201>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$201+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$201+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$201+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$1279,$$byval_copy366);
  }
  $1283 = (($$011231151) + 1)|0;
  $exitcond1175 = ($1283|0)==(512);
  if ($exitcond1175) {
   break;
  } else {
   $$011231151 = $1283;
  }
 }
 $1257 = ((($202)) + 4|0);
 $1258 = ((($202)) + 8|0);
 $1259 = ((($202)) + 12|0);
 $1260 = ((($203)) + 4|0);
 $1261 = ((($203)) + 8|0);
 $1262 = ((($203)) + 12|0);
 $1263 = ((($204)) + 4|0);
 $$011241150 = 0;
 while(1) {
  $1291 = (((167864 + (($$011241150*40)|0)|0)) + 36|0);
  $1292 = HEAP32[$1291>>2]|0;
  $1293 = ($1292|0)==(0);
  if (!($1293)) {
   HEAP32[$202>>2] = 419;
   HEAP32[$1257>>2] = 1839;
   HEAP32[$1258>>2] = 32;
   HEAP32[$1259>>2] = 32;
   $1294 = (167864 + (($$011241150*40)|0)|0);
   $1295 = +HEAPF32[$1294>>2];
   $1296 = (~~(($1295)));
   HEAP32[$203>>2] = $1296;
   $1297 = (((167864 + (($$011241150*40)|0)|0)) + 4|0);
   $1298 = +HEAPF32[$1297>>2];
   $1299 = (~~(($1298)));
   HEAP32[$1260>>2] = $1299;
   $1300 = (((167864 + (($$011241150*40)|0)|0)) + 20|0);
   $1301 = +HEAPF32[$1300>>2];
   $1302 = $1301 * 32.0;
   $1303 = (~~(($1302)));
   HEAP32[$1261>>2] = $1303;
   HEAP32[$1262>>2] = $1303;
   $1304 = $1302 * 0.5;
   HEAPF32[$204>>2] = $1304;
   HEAPF32[$1263>>2] = $1304;
   $1305 = (((167864 + (($$011241150*40)|0)|0)) + 16|0);
   $1306 = +HEAPF32[$1305>>2];
   $1307 = (((167864 + (($$011241150*40)|0)|0)) + 24|0);
   $1308 = (((167864 + (($$011241150*40)|0)|0)) + 28|0);
   $1309 = +HEAPF32[$1308>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$1307>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$1307+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$1307+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$1307+3>>0]|0;
   _Fade($205,$$byval_copy366,$1309);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$202>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$202+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$202+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$202+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$203>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$203+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$203+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$203+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$204>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$204+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$205>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$205+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$205+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$205+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$1306,$$byval_copy366);
  }
  $1310 = (($$011241150) + 1)|0;
  $exitcond1174 = ($1310|0)==(512);
  if ($exitcond1174) {
   break;
  } else {
   $$011241150 = $1310;
  }
 }
 $1284 = ((($206)) + 4|0);
 $1285 = ((($206)) + 8|0);
 $1286 = ((($206)) + 12|0);
 $1287 = ((($207)) + 4|0);
 $1288 = ((($207)) + 8|0);
 $1289 = ((($207)) + 12|0);
 $1290 = ((($208)) + 4|0);
 $$011251149 = 0;
 while(1) {
  $1313 = (((229428 + (($$011251149*36)|0)|0)) + 24|0);
  $1314 = HEAP32[$1313>>2]|0;
  $1315 = ($1314|0)==(0);
  if (!($1315)) {
   HEAP32[$206>>2] = 2;
   HEAP32[$1284>>2] = 1028;
   HEAP32[$1285>>2] = 54;
   HEAP32[$1286>>2] = 710;
   $1316 = (229428 + (($$011251149*36)|0)|0);
   $1317 = +HEAPF32[$1316>>2];
   $1318 = (~~(($1317)));
   HEAP32[$207>>2] = $1318;
   $1319 = (((229428 + (($$011251149*36)|0)|0)) + 4|0);
   $1320 = +HEAPF32[$1319>>2];
   $1321 = (~~(($1320)));
   HEAP32[$1287>>2] = $1321;
   $1322 = (((229428 + (($$011251149*36)|0)|0)) + 16|0);
   $1323 = +HEAPF32[$1322>>2];
   $1324 = $1323 * 54.0;
   $1325 = (~~(($1324)));
   HEAP32[$1288>>2] = $1325;
   $1326 = $1323 * 710.0;
   $1327 = (~~(($1326)));
   HEAP32[$1289>>2] = $1327;
   $1328 = $1324 * 0.5;
   HEAPF32[$208>>2] = $1328;
   $1329 = $1326 * 0.5;
   HEAPF32[$1290>>2] = $1329;
   $1330 = (((229428 + (($$011251149*36)|0)|0)) + 20|0);
   $1331 = +HEAPF32[$1330>>2];
   $1332 = (((229428 + (($$011251149*36)|0)|0)) + 8|0);
   $1333 = (((229428 + (($$011251149*36)|0)|0)) + 12|0);
   $1334 = +HEAPF32[$1333>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$1332>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$1332+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$1332+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$1332+3>>0]|0;
   _Fade($209,$$byval_copy366,$1334);
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$206>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$206+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$206+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$206+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$207>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$207+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$207+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$207+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$208>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$208+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$209>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$209+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$209+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$209+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$1331,$$byval_copy366);
  }
  $1335 = (($$011251149) + 1)|0;
  $exitcond1173 = ($1335|0)==(8);
  if ($exitcond1173) {
   break;
  } else {
   $$011251149 = $1335;
  }
 }
 $1311 = +HEAPF32[40599];
 $1312 = $1311 != 0.0;
 if ($1312) {
  HEAP32[$210>>2] = 644;
  $1336 = ((($210)) + 4|0);
  HEAP32[$1336>>2] = 2;
  $1337 = ((($210)) + 8|0);
  HEAP32[$1337>>2] = 500;
  $1338 = ((($210)) + 12|0);
  HEAP32[$1338>>2] = 311;
  $1339 = HEAP32[83632]|0;
  HEAP32[$211>>2] = $1339;
  $1340 = ((($211)) + 4|0);
  $1341 = (_GetScreenHeight()|0);
  $1342 = (+($1341|0));
  $1343 = $1342 * 0.59999999999999998;
  $1344 = (~~(($1343)));
  HEAP32[$1340>>2] = $1344;
  $1345 = ((($211)) + 8|0);
  $1346 = (_GetScreenWidth()|0);
  HEAP32[$1345>>2] = $1346;
  $1347 = ((($211)) + 12|0);
  HEAP32[$1347>>2] = 311;
  HEAPF32[$212>>2] = 0.0;
  $1348 = ((($212)) + 4|0);
  HEAPF32[$1348>>2] = 0.0;
  HEAP32[$214>>2] = -1;
  $1349 = +HEAPF32[40599];
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$214>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$214+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$214+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$214+3>>0]|0;
  _Fade($213,$$byval_copy366,$1349);
  ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
  ;HEAP32[$$byval_copy319>>2]=HEAP32[$210>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$210+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$210+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$210+12>>2]|0;
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[$211>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$211+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$211+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$211+12>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[$212>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$212+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$213>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$213+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$213+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$213+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
  HEAP32[$215>>2] = 644;
  $1350 = ((($215)) + 4|0);
  HEAP32[$1350>>2] = 2;
  $1351 = ((($215)) + 8|0);
  HEAP32[$1351>>2] = 500;
  $1352 = ((($215)) + 12|0);
  HEAP32[$1352>>2] = 311;
  $1353 = HEAP32[83632]|0;
  $1354 = (_GetScreenWidth()|0);
  $1355 = (($1354) + ($1353))|0;
  HEAP32[$216>>2] = $1355;
  $1356 = ((($216)) + 4|0);
  $1357 = (_GetScreenHeight()|0);
  $1358 = (+($1357|0));
  $1359 = $1358 * 0.59999999999999998;
  $1360 = (~~(($1359)));
  HEAP32[$1356>>2] = $1360;
  $1361 = ((($216)) + 8|0);
  $1362 = (_GetScreenWidth()|0);
  HEAP32[$1361>>2] = $1362;
  $1363 = ((($216)) + 12|0);
  HEAP32[$1363>>2] = 311;
  HEAPF32[$217>>2] = 0.0;
  $1364 = ((($217)) + 4|0);
  HEAPF32[$1364>>2] = 0.0;
  HEAP32[$219>>2] = -1;
  $1365 = +HEAPF32[40599];
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$219>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$219+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$219+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$219+3>>0]|0;
  _Fade($218,$$byval_copy366,$1365);
  ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26404+16>>2]|0;
  ;HEAP32[$$byval_copy319>>2]=HEAP32[$215>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$215+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$215+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$215+12>>2]|0;
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[$216>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$216+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$216+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$216+12>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[$217>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$217+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$218>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$218+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$218+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$218+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
 }
 $1366 = +HEAPF32[83636];
 $1367 = $1366 != 0.0;
 $1368 = HEAP32[83633]|0;
 $1369 = ($1368|0)!=(2);
 $or$cond26 = $1367 & $1369;
 if ($or$cond26) {
  $1370 = (_GetScreenWidth()|0);
  $1371 = (_GetScreenHeight()|0);
  HEAP8[$221>>0] = 102;
  $1372 = ((($221)) + 1|0);
  HEAP8[$1372>>0] = -65;
  $1373 = ((($221)) + 2|0);
  HEAP8[$1373>>0] = -1;
  $1374 = ((($221)) + 3|0);
  HEAP8[$1374>>0] = -1;
  $1375 = +HEAPF32[83636];
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$221>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$221+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$221+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$221+3>>0]|0;
  _Fade($220,$$byval_copy366,$1375);
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$220>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$220+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$220+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$220+3>>0]|0;
  _DrawRectangle(0,0,$1370,$1371,$$byval_copy366);
 }
 HEAP32[$222>>2] = 626;
 $1376 = ((($222)) + 4|0);
 HEAP32[$1376>>2] = 1520;
 $1377 = ((($222)) + 8|0);
 HEAP32[$1377>>2] = 178;
 $1378 = ((($222)) + 12|0);
 HEAP32[$1378>>2] = 175;
 HEAP32[$223>>2] = 0;
 $1379 = ((($223)) + 4|0);
 HEAP32[$1379>>2] = 0;
 $1380 = ((($223)) + 8|0);
 HEAP32[$1380>>2] = 178;
 $1381 = ((($223)) + 12|0);
 HEAP32[$1381>>2] = 175;
 HEAPF32[$224>>2] = 0.0;
 $1382 = ((($224)) + 4|0);
 HEAPF32[$1382>>2] = 0.0;
 HEAP32[$225>>2] = -1;
 ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$$byval_copy319>>2]=HEAP32[$222>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$222+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$222+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$222+12>>2]|0;
 ;HEAP32[$font$byval_copy364>>2]=HEAP32[$223>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$223+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$223+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$223+12>>2]|0;
 ;HEAP32[$$byval_copy365>>2]=HEAP32[$224>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$224+4>>2]|0;
 ;HEAP8[$$byval_copy366>>0]=HEAP8[$225>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$225+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$225+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$225+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
 HEAP32[$226>>2] = 103;
 $1383 = ((($226)) + 4|0);
 HEAP32[$1383>>2] = 1423;
 $1384 = ((($226)) + 8|0);
 HEAP32[$1384>>2] = 300;
 $1385 = ((($226)) + 12|0);
 HEAP32[$1385>>2] = 303;
 $1386 = (_GetScreenWidth()|0);
 HEAP32[$227>>2] = $1386;
 $1387 = ((($227)) + 4|0);
 HEAP32[$1387>>2] = 0;
 $1388 = ((($227)) + 8|0);
 HEAP32[$1388>>2] = 300;
 $1389 = ((($227)) + 12|0);
 HEAP32[$1389>>2] = 303;
 HEAPF32[$228>>2] = 150.0;
 $1390 = ((($228)) + 4|0);
 HEAPF32[$1390>>2] = 151.0;
 $1391 = +HEAPF32[40590];
 HEAP32[$230>>2] = -1;
 $1392 = +HEAPF32[40598];
 ;HEAP8[$$byval_copy366>>0]=HEAP8[$230>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$230+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$230+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$230+3>>0]|0;
 _Fade($229,$$byval_copy366,$1392);
 ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$$byval_copy319>>2]=HEAP32[$226>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$226+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$226+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$226+12>>2]|0;
 ;HEAP32[$font$byval_copy364>>2]=HEAP32[$227>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$227+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$227+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$227+12>>2]|0;
 ;HEAP32[$$byval_copy365>>2]=HEAP32[$228>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$228+4>>2]|0;
 ;HEAP8[$$byval_copy366>>0]=HEAP8[$229>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$229+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$229+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$229+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$1391,$$byval_copy366);
 HEAP32[$231>>2] = 772;
 $1393 = ((($231)) + 4|0);
 HEAP32[$1393>>2] = 1265;
 $1394 = ((($231)) + 8|0);
 HEAP32[$1394>>2] = 151;
 $1395 = ((($231)) + 12|0);
 HEAP32[$1395>>2] = 150;
 $1396 = (_GetScreenWidth()|0);
 $1397 = (($1396) + -151)|0;
 HEAP32[$232>>2] = $1397;
 $1398 = ((($232)) + 4|0);
 HEAP32[$1398>>2] = 0;
 $1399 = ((($232)) + 8|0);
 HEAP32[$1399>>2] = 151;
 $1400 = ((($232)) + 12|0);
 HEAP32[$1400>>2] = 150;
 HEAPF32[$233>>2] = 0.0;
 $1401 = ((($233)) + 4|0);
 HEAPF32[$1401>>2] = 0.0;
 HEAP32[$235>>2] = -1;
 $1402 = +HEAPF32[40598];
 ;HEAP8[$$byval_copy366>>0]=HEAP8[$235>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$235+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$235+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$235+3>>0]|0;
 _Fade($234,$$byval_copy366,$1402);
 ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$$byval_copy319>>2]=HEAP32[$231>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$231+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$231+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$231+12>>2]|0;
 ;HEAP32[$font$byval_copy364>>2]=HEAP32[$232>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$232+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$232+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$232+12>>2]|0;
 ;HEAP32[$$byval_copy365>>2]=HEAP32[$233>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$233+4>>2]|0;
 ;HEAP8[$$byval_copy366>>0]=HEAP8[$234>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$234+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$234+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$234+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
 $1403 = HEAP32[83633]|0;
 $1404 = HEAP32[6801]|0;
 $1405 = ($1403|0)!=(2);
 $1406 = ((($236)) + 4|0);
 $1407 = ((($236)) + 8|0);
 $1408 = ((($236)) + 12|0);
 $1409 = ((($237)) + 4|0);
 $1410 = ((($237)) + 8|0);
 $1411 = ((($237)) + 12|0);
 $1412 = ((($238)) + 4|0);
 $1413 = ((($240)) + 4|0);
 $1414 = ((($240)) + 8|0);
 $1415 = ((($240)) + 12|0);
 $1416 = ((($241)) + 4|0);
 $1417 = ((($241)) + 8|0);
 $1418 = ((($241)) + 12|0);
 $1419 = ((($242)) + 4|0);
 $$011261148 = 0;$1424 = $1404;$1426 = $1405;$1433 = $1403;
 while(1) {
  $1423 = (($1424|0) / 5)&-1;
  $1425 = ($1423|0)>($$011261148|0);
  $or$cond28 = $1426 & $1425;
  if ($or$cond28) {
   HEAP32[$236>>2] = 972;
   HEAP32[$1406>>2] = 1231;
   HEAP32[$1407>>2] = 32;
   HEAP32[$1408>>2] = 32;
   HEAP32[$237>>2] = 87;
   HEAP32[$1409>>2] = 83;
   HEAP32[$1410>>2] = 32;
   HEAP32[$1411>>2] = 32;
   HEAPF32[$238>>2] = 8.0;
   HEAPF32[$1412>>2] = 69.0;
   $1427 = Math_imul($$011261148, -18)|0;
   $1428 = (+($1427|0));
   HEAP32[$239>>2] = -1;
   ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$$byval_copy319>>2]=HEAP32[$236>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$236+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$236+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$236+12>>2]|0;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[$237>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$237+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$237+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$237+12>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$238>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$238+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$239>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$239+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$239+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$239+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$1428,$$byval_copy366);
  } else {
   $1429 = HEAP32[40558]|0;
   $1430 = (($1429|0) / 18)&-1;
   $1431 = ($1430|0)>=($$011261148|0);
   $1432 = ($1433|0)==(2);
   $or$cond30 = $1432 & $1431;
   if ($or$cond30) {
    HEAP32[$240>>2] = 972;
    HEAP32[$1413>>2] = 1231;
    HEAP32[$1414>>2] = 32;
    HEAP32[$1415>>2] = 32;
    HEAP32[$241>>2] = 87;
    HEAP32[$1416>>2] = 83;
    HEAP32[$1417>>2] = 32;
    HEAP32[$1418>>2] = 32;
    HEAPF32[$242>>2] = 8.0;
    HEAPF32[$1419>>2] = 69.0;
    $1434 = Math_imul($$011261148, -18)|0;
    $1435 = (+($1434|0));
    HEAP32[$243>>2] = -1;
    ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
    ;HEAP32[$$byval_copy319>>2]=HEAP32[$240>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$240+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$240+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$240+12>>2]|0;
    ;HEAP32[$font$byval_copy364>>2]=HEAP32[$241>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$241+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$241+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$241+12>>2]|0;
    ;HEAP32[$$byval_copy365>>2]=HEAP32[$242>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$242+4>>2]|0;
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$243>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$243+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$243+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$243+3>>0]|0;
    _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,$1435,$$byval_copy366);
   }
  }
  $1436 = (($$011261148) + 1)|0;
  $1437 = HEAP32[83633]|0;
  $1421 = HEAP32[6801]|0;
  $1422 = ($1437|0)!=(2);
  $exitcond1172 = ($1436|0)==(20);
  if ($exitcond1172) {
   break;
  } else {
   $$011261148 = $1436;$1424 = $1421;$1426 = $1422;$1433 = $1437;
  }
 }
 $1420 = ($1421|0)>(99);
 $or$cond32 = $1422 & $1420;
 if ($or$cond32) {
  HEAP32[$244>>2] = 226;
  $1438 = ((($244)) + 4|0);
  HEAP32[$1438>>2] = 1728;
  $1439 = ((($244)) + 8|0);
  HEAP32[$1439>>2] = 157;
  $1440 = ((($244)) + 12|0);
  HEAP32[$1440>>2] = 155;
  HEAP32[$245>>2] = 85;
  $1441 = ((($245)) + 4|0);
  HEAP32[$1441>>2] = 84;
  $1442 = ((($245)) + 8|0);
  $1443 = +HEAPF32[40617];
  $1444 = $1443 * 157.0;
  $1445 = (~~(($1444)));
  HEAP32[$1442>>2] = $1445;
  $1446 = ((($245)) + 12|0);
  $1447 = $1443 * 155.0;
  $1448 = (~~(($1447)));
  HEAP32[$1446>>2] = $1448;
  $1449 = +HEAPF32[40617];
  $1450 = $1449 * 157.0;
  $1451 = $1450 * 0.5;
  HEAPF32[$246>>2] = $1451;
  $1452 = ((($246)) + 4|0);
  $1453 = $1449 * 155.0;
  $1454 = $1453 * 0.5;
  HEAPF32[$1452>>2] = $1454;
  HEAP8[$248>>0] = 126;
  $1455 = ((($248)) + 1|0);
  HEAP8[$1455>>0] = -8;
  $1456 = ((($248)) + 2|0);
  HEAP8[$1456>>0] = 25;
  $1457 = ((($248)) + 3|0);
  HEAP8[$1457>>0] = -1;
  $1458 = +HEAPF32[40616];
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$248>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$248+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$248+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$248+3>>0]|0;
  _Fade($247,$$byval_copy366,$1458);
  ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$$byval_copy319>>2]=HEAP32[$244>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$244+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$244+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$244+12>>2]|0;
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[$245>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$245+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$245+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$245+12>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[$246>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$246+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$247>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$247+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$247+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$247+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
  HEAP32[$249>>2] = 806;
  $1459 = ((($249)) + 4|0);
  HEAP32[$1459>>2] = 1519;
  $1460 = ((($249)) + 8|0);
  HEAP32[$1460>>2] = 146;
  $1461 = ((($249)) + 12|0);
  HEAP32[$1461>>2] = 146;
  HEAP32[$250>>2] = 84;
  $1462 = ((($250)) + 4|0);
  HEAP32[$1462>>2] = 83;
  $1463 = ((($250)) + 8|0);
  HEAP32[$1463>>2] = 146;
  $1464 = ((($250)) + 12|0);
  HEAP32[$1464>>2] = 146;
  HEAPF32[$251>>2] = 73.0;
  $1465 = ((($251)) + 4|0);
  HEAPF32[$1465>>2] = 73.0;
  HEAP32[$253>>2] = -1;
  $1466 = +HEAPF32[40615];
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$253>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$253+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$253+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$253+3>>0]|0;
  _Fade($252,$$byval_copy366,$1466);
  ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$$byval_copy319>>2]=HEAP32[$249>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$249+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$249+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$249+12>>2]|0;
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[$250>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$250+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$250+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$250+12>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[$251>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$251+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$252>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$252+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$252+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$252+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
 }
 $1467 = HEAP32[40573]|0;
 $1468 = ($1467|0)==(0);
 $1469 = HEAP32[40564]|0;
 $1470 = ($1469|0)!=(0);
 $or$cond34 = $1468 & $1470;
 L234: do {
  if ($or$cond34) {
   $1471 = HEAP32[7]|0;
   switch ($1471|0) {
   case 3:  {
    HEAP32[$254>>2] = 114;
    $1472 = ((($254)) + 4|0);
    HEAP32[$1472>>2] = 1728;
    $1473 = ((($254)) + 8|0);
    HEAP32[$1473>>2] = 110;
    $1474 = ((($254)) + 12|0);
    HEAP32[$1474>>2] = 216;
    $1475 = (_GetScreenWidth()|0);
    $1476 = (($1475|0) / 2)&-1;
    HEAP32[$255>>2] = $1476;
    $1477 = ((($255)) + 4|0);
    $1478 = (_GetScreenHeight()|0);
    $1479 = (($1478|0) / 2)&-1;
    HEAP32[$1477>>2] = $1479;
    $1480 = ((($255)) + 8|0);
    $1481 = +HEAPF32[40594];
    $1482 = $1481 * 110.0;
    $1483 = (~~(($1482)));
    HEAP32[$1480>>2] = $1483;
    $1484 = ((($255)) + 12|0);
    $1485 = $1481 * 216.0;
    $1486 = (~~(($1485)));
    HEAP32[$1484>>2] = $1486;
    $1487 = +HEAPF32[40594];
    $1488 = $1487 * 110.0;
    $1489 = $1488 * 0.5;
    HEAPF32[$256>>2] = $1489;
    $1490 = ((($256)) + 4|0);
    $1491 = $1487 * 216.0;
    $1492 = $1491 * 0.5;
    HEAPF32[$1490>>2] = $1492;
    HEAP8[$258>>0] = -26;
    $1493 = ((($258)) + 1|0);
    HEAP8[$1493>>0] = 41;
    $1494 = ((($258)) + 2|0);
    HEAP8[$1494>>0] = 55;
    $1495 = ((($258)) + 3|0);
    HEAP8[$1495>>0] = -1;
    $1496 = +HEAPF32[40593];
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$258>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$258+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$258+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$258+3>>0]|0;
    _Fade($257,$$byval_copy366,$1496);
    ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
    ;HEAP32[$$byval_copy319>>2]=HEAP32[$254>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$254+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$254+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$254+12>>2]|0;
    ;HEAP32[$font$byval_copy364>>2]=HEAP32[$255>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$255+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$255+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$255+12>>2]|0;
    ;HEAP32[$$byval_copy365>>2]=HEAP32[$256>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$256+4>>2]|0;
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$257>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$257+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$257+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$257+3>>0]|0;
    _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
    break L234;
    break;
   }
   case 2:  {
    HEAP32[$259>>2] = 2;
    $1497 = ((($259)) + 4|0);
    HEAP32[$1497>>2] = 1750;
    $1498 = ((($259)) + 8|0);
    HEAP32[$1498>>2] = 110;
    $1499 = ((($259)) + 12|0);
    HEAP32[$1499>>2] = 216;
    $1500 = (_GetScreenWidth()|0);
    $1501 = (($1500|0) / 2)&-1;
    HEAP32[$260>>2] = $1501;
    $1502 = ((($260)) + 4|0);
    $1503 = (_GetScreenHeight()|0);
    $1504 = (($1503|0) / 2)&-1;
    HEAP32[$1502>>2] = $1504;
    $1505 = ((($260)) + 8|0);
    $1506 = +HEAPF32[40594];
    $1507 = $1506 * 110.0;
    $1508 = (~~(($1507)));
    HEAP32[$1505>>2] = $1508;
    $1509 = ((($260)) + 12|0);
    $1510 = $1506 * 216.0;
    $1511 = (~~(($1510)));
    HEAP32[$1509>>2] = $1511;
    $1512 = +HEAPF32[40594];
    $1513 = $1512 * 110.0;
    $1514 = $1513 * 0.5;
    HEAPF32[$261>>2] = $1514;
    $1515 = ((($261)) + 4|0);
    $1516 = $1512 * 216.0;
    $1517 = $1516 * 0.5;
    HEAPF32[$1515>>2] = $1517;
    HEAP8[$263>>0] = -26;
    $1518 = ((($263)) + 1|0);
    HEAP8[$1518>>0] = 41;
    $1519 = ((($263)) + 2|0);
    HEAP8[$1519>>0] = 55;
    $1520 = ((($263)) + 3|0);
    HEAP8[$1520>>0] = -1;
    $1521 = +HEAPF32[40616];
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$263>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$263+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$263+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$263+3>>0]|0;
    _Fade($262,$$byval_copy366,$1521);
    ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
    ;HEAP32[$$byval_copy319>>2]=HEAP32[$259>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$259+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$259+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$259+12>>2]|0;
    ;HEAP32[$font$byval_copy364>>2]=HEAP32[$260>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$260+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$260+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$260+12>>2]|0;
    ;HEAP32[$$byval_copy365>>2]=HEAP32[$261>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$261+4>>2]|0;
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$262>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$262+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$262+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$262+3>>0]|0;
    _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
    break L234;
    break;
   }
   case 1:  {
    HEAP32[$264>>2] = 660;
    $1522 = ((($264)) + 4|0);
    HEAP32[$1522>>2] = 1302;
    $1523 = ((($264)) + 8|0);
    HEAP32[$1523>>2] = 110;
    $1524 = ((($264)) + 12|0);
    HEAP32[$1524>>2] = 216;
    $1525 = (_GetScreenWidth()|0);
    $1526 = (($1525|0) / 2)&-1;
    HEAP32[$265>>2] = $1526;
    $1527 = ((($265)) + 4|0);
    $1528 = (_GetScreenHeight()|0);
    $1529 = (($1528|0) / 2)&-1;
    HEAP32[$1527>>2] = $1529;
    $1530 = ((($265)) + 8|0);
    $1531 = +HEAPF32[40594];
    $1532 = $1531 * 110.0;
    $1533 = (~~(($1532)));
    HEAP32[$1530>>2] = $1533;
    $1534 = ((($265)) + 12|0);
    $1535 = $1531 * 216.0;
    $1536 = (~~(($1535)));
    HEAP32[$1534>>2] = $1536;
    $1537 = +HEAPF32[40594];
    $1538 = $1537 * 110.0;
    $1539 = $1538 * 0.5;
    HEAPF32[$266>>2] = $1539;
    $1540 = ((($266)) + 4|0);
    $1541 = $1537 * 216.0;
    $1542 = $1541 * 0.5;
    HEAPF32[$1540>>2] = $1542;
    HEAP8[$268>>0] = -26;
    $1543 = ((($268)) + 1|0);
    HEAP8[$1543>>0] = 41;
    $1544 = ((($268)) + 2|0);
    HEAP8[$1544>>0] = 55;
    $1545 = ((($268)) + 3|0);
    HEAP8[$1545>>0] = -1;
    $1546 = +HEAPF32[40616];
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$268>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$268+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$268+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$268+3>>0]|0;
    _Fade($267,$$byval_copy366,$1546);
    ;HEAP32[$atlas01$byval_copy318>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy318+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy318+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy318+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy318+16>>2]=HEAP32[26384+16>>2]|0;
    ;HEAP32[$$byval_copy319>>2]=HEAP32[$264>>2]|0;HEAP32[$$byval_copy319+4>>2]=HEAP32[$264+4>>2]|0;HEAP32[$$byval_copy319+8>>2]=HEAP32[$264+8>>2]|0;HEAP32[$$byval_copy319+12>>2]=HEAP32[$264+12>>2]|0;
    ;HEAP32[$font$byval_copy364>>2]=HEAP32[$265>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[$265+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[$265+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[$265+12>>2]|0;
    ;HEAP32[$$byval_copy365>>2]=HEAP32[$266>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$266+4>>2]|0;
    ;HEAP8[$$byval_copy366>>0]=HEAP8[$267>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$267+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$267+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$267+3>>0]|0;
    _DrawTexturePro($atlas01$byval_copy318,$$byval_copy319,$font$byval_copy364,$$byval_copy365,0.0,$$byval_copy366);
    break L234;
    break;
   }
   default: {
    break L234;
   }
   }
  }
 } while(0);
 $1547 = ((($270)) + 1|0);
 $1548 = ((($270)) + 2|0);
 $1549 = ((($270)) + 3|0);
 $$011051147 = 0;
 while(1) {
  $1552 = (((261380 + (($$011051147*24)|0)|0)) + 8|0);
  $1553 = HEAP32[$1552>>2]|0;
  $1554 = ($1553|0)==(0);
  if (!($1554)) {
   $1555 = (((261380 + (($$011051147*24)|0)|0)) + 20|0);
   $1556 = HEAP32[$1555>>2]|0;
   HEAP32[$vararg_buffer>>2] = $1556;
   $1557 = (_FormatText(7410,$vararg_buffer)|0);
   $1558 = (261380 + (($$011051147*24)|0)|0);
   $1559 = HEAP32[(26372)>>2]|0;
   $1560 = (($1559|0) / 4)&-1;
   $1561 = (+($1560|0));
   $1562 = (((261380 + (($$011051147*24)|0)|0)) + 16|0);
   $1563 = +HEAPF32[$1562>>2];
   $1564 = $1563 * $1561;
   HEAP8[$270>>0] = -1;
   HEAP8[$1547>>0] = 73;
   HEAP8[$1548>>0] = 73;
   HEAP8[$1549>>0] = -1;
   $1565 = (((261380 + (($$011051147*24)|0)|0)) + 12|0);
   $1566 = +HEAPF32[$1565>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$270>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$270+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$270+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$270+3>>0]|0;
   _Fade($269,$$byval_copy366,$1566);
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$1558>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$1558+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$269>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$269+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$269+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$269+3>>0]|0;
   _DrawTextEx($font$byval_copy364,$1557,$$byval_copy365,$1564,-5,$$byval_copy366);
  }
  $1567 = (($$011051147) + 1)|0;
  $exitcond1171 = ($1567|0)==(16);
  if ($exitcond1171) {
   break;
  } else {
   $$011051147 = $1567;
  }
 }
 $1550 = HEAP32[(261808)>>2]|0;
 $1551 = ($1550|0)==(0);
 if (!($1551)) {
  $1568 = HEAP32[(261820)>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $1568;
  $1569 = (_FormatText(7410,$vararg_buffer1)|0);
  $1570 = HEAP32[(26372)>>2]|0;
  $1571 = (($1570|0) / 4)&-1;
  $1572 = (+($1571|0));
  $1573 = +HEAPF32[(261816)>>2];
  $1574 = $1573 * $1572;
  HEAP8[$272>>0] = -1;
  $1575 = ((($272)) + 1|0);
  HEAP8[$1575>>0] = 73;
  $1576 = ((($272)) + 2|0);
  HEAP8[$1576>>0] = 73;
  $1577 = ((($272)) + 3|0);
  HEAP8[$1577>>0] = -1;
  $1578 = +HEAPF32[(261812)>>2];
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$272>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$272+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$272+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$272+3>>0]|0;
  _Fade($271,$$byval_copy366,$1578);
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[261800>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[261800+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$271>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$271+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$271+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$271+3>>0]|0;
  _DrawTextEx($font$byval_copy364,$1569,$$byval_copy365,$1574,-5,$$byval_copy366);
 }
 $1579 = HEAP32[(261852)>>2]|0;
 $1580 = ($1579|0)==(0);
 if (!($1580)) {
  $1581 = HEAP32[(261864)>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $1581;
  $1582 = (_FormatText(7410,$vararg_buffer4)|0);
  $1583 = HEAP32[(26372)>>2]|0;
  $1584 = (($1583|0) / 4)&-1;
  $1585 = (+($1584|0));
  $1586 = +HEAPF32[(261860)>>2];
  $1587 = $1586 * $1585;
  HEAP8[$274>>0] = -1;
  $1588 = ((($274)) + 1|0);
  HEAP8[$1588>>0] = 73;
  $1589 = ((($274)) + 2|0);
  HEAP8[$1589>>0] = 73;
  $1590 = ((($274)) + 3|0);
  HEAP8[$1590>>0] = -1;
  $1591 = +HEAPF32[(261856)>>2];
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$274>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$274+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$274+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$274+3>>0]|0;
  _Fade($273,$$byval_copy366,$1591);
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[261844>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[261844+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$273>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$273+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$273+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$273+3>>0]|0;
  _DrawTextEx($font$byval_copy364,$1582,$$byval_copy365,$1587,-5,$$byval_copy366);
 }
 $1592 = ((($276)) + 1|0);
 $1593 = ((($276)) + 2|0);
 $1594 = ((($276)) + 3|0);
 $$01146 = 0;
 while(1) {
  $1602 = (((334164 + (($$01146*24)|0)|0)) + 8|0);
  $1603 = HEAP32[$1602>>2]|0;
  $1604 = ($1603|0)==(0);
  if (!($1604)) {
   $1605 = (((334164 + (($$01146*24)|0)|0)) + 20|0);
   $1606 = HEAP32[$1605>>2]|0;
   HEAP32[$vararg_buffer10>>2] = $1606;
   $1607 = (_FormatText(7413,$vararg_buffer10)|0);
   $1608 = (334164 + (($$01146*24)|0)|0);
   $1609 = HEAP32[(26372)>>2]|0;
   $1610 = (($1609|0) / 4)&-1;
   $1611 = (+($1610|0));
   $1612 = (((334164 + (($$01146*24)|0)|0)) + 16|0);
   $1613 = +HEAPF32[$1612>>2];
   $1614 = $1613 * $1611;
   HEAP8[$276>>0] = -117;
   HEAP8[$1592>>0] = -77;
   HEAP8[$1593>>0] = 0;
   HEAP8[$1594>>0] = -1;
   $1615 = (((334164 + (($$01146*24)|0)|0)) + 12|0);
   $1616 = +HEAPF32[$1615>>2];
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$276>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$276+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$276+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$276+3>>0]|0;
   _Fade($275,$$byval_copy366,$1616);
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$1608>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$1608+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$275>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$275+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$275+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$275+3>>0]|0;
   _DrawTextEx($font$byval_copy364,$1607,$$byval_copy365,$1614,-5,$$byval_copy366);
  }
  $1617 = (($$01146) + 1)|0;
  $exitcond = ($1617|0)==(14);
  if ($exitcond) {
   break;
  } else {
   $$01146 = $1617;
  }
 }
 $1595 = HEAP32[6801]|0;
 HEAP32[$vararg_buffer7>>2] = $1595;
 $1596 = (_FormatText(7766,$vararg_buffer7)|0);
 HEAPF32[$277>>2] = 47.0;
 $1597 = ((($277)) + 4|0);
 HEAPF32[$1597>>2] = 50.0;
 $1598 = HEAP32[(26372)>>2]|0;
 $1599 = (+($1598|0));
 ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
 ;HEAP32[$$byval_copy365>>2]=HEAP32[$277>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$277+4>>2]|0;
 ;HEAP8[$$byval_copy366>>0]=HEAP8[340308>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[340308+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[340308+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[340308+3>>0]|0;
 _DrawTextEx($font$byval_copy364,$1596,$$byval_copy365,$1599,-8,$$byval_copy366);
 $1600 = HEAP32[40577]|0;
 $1601 = ($1600|0)==(0);
 if (!($1601)) {
  $1618 = (_GetScreenWidth()|0);
  $1619 = (($1618|0) / 2)&-1;
  $1620 = (_MeasureText(7115,40)|0);
  $1621 = (($1620|0) / 2)&-1;
  $1622 = (($1619) - ($1621))|0;
  $1623 = (+($1622|0));
  HEAPF32[$278>>2] = $1623;
  $1624 = ((($278)) + 4|0);
  $1625 = (_GetScreenHeight()|0);
  $1626 = (($1625|0) / 4)&-1;
  $1627 = (+($1626|0));
  HEAPF32[$1624>>2] = $1627;
  $1628 = HEAP32[(26372)>>2]|0;
  $1629 = (+($1628|0));
  HEAP8[$279>>0] = -10;
  $1630 = ((($279)) + 1|0);
  HEAP8[$1630>>0] = -123;
  $1631 = ((($279)) + 2|0);
  HEAP8[$1631>>0] = -123;
  $1632 = ((($279)) + 3|0);
  HEAP8[$1632>>0] = -1;
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[$278>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$278+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$279>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$279+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$279+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$279+3>>0]|0;
  _DrawTextEx($font$byval_copy364,7115,$$byval_copy365,$1629,-5,$$byval_copy366);
 }
 $1633 = HEAP32[40549]|0;
 $1634 = ($1633|0)==(7);
 $1635 = HEAP32[83626]|0;
 $1636 = ($1635|0)>(99);
 $or$cond36 = $1634 & $1636;
 if ($or$cond36) {
  $1637 = HEAP32[40597]|0;
  $1638 = ($1637|0)<(5);
  if ($1638) {
   $1639 = (_GetScreenWidth()|0);
   $1640 = (($1639|0) / 2)&-1;
   $1641 = (_MeasureText(7147,40)|0);
   $1642 = (($1641|0) / 2)&-1;
   $1643 = (($1640) - ($1642))|0;
   $1644 = (+($1643|0));
   HEAPF32[$280>>2] = $1644;
   $1645 = ((($280)) + 4|0);
   $1646 = (_GetScreenHeight()|0);
   $1647 = (($1646|0) / 3)&-1;
   $1648 = (+($1647|0));
   HEAPF32[$1645>>2] = $1648;
   $1649 = HEAP32[(26372)>>2]|0;
   $1650 = (+($1649|0));
   HEAP8[$281>>0] = -71;
   $1651 = ((($281)) + 1|0);
   HEAP8[$1651>>0] = -34;
   $1652 = ((($281)) + 2|0);
   HEAP8[$1652>>0] = 105;
   $1653 = ((($281)) + 3|0);
   HEAP8[$1653>>0] = -1;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$280>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$280+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$281>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$281+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$281+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$281+3>>0]|0;
   _DrawTextEx($font$byval_copy364,7147,$$byval_copy365,$1650,-5,$$byval_copy366);
   STACKTOP = sp;return;
  } else {
   $1654 = (_GetScreenWidth()|0);
   $1655 = (($1654|0) / 2)&-1;
   $1656 = (_MeasureText(7275,40)|0);
   $1657 = (($1656|0) / 2)&-1;
   $1658 = (($1655) - ($1657))|0;
   $1659 = (+($1658|0));
   HEAPF32[$282>>2] = $1659;
   $1660 = ((($282)) + 4|0);
   $1661 = (_GetScreenHeight()|0);
   $1662 = (($1661|0) / 3)&-1;
   $1663 = (+($1662|0));
   HEAPF32[$1660>>2] = $1663;
   $1664 = HEAP32[(26372)>>2]|0;
   $1665 = (+($1664|0));
   HEAP8[$283>>0] = -71;
   $1666 = ((($283)) + 1|0);
   HEAP8[$1666>>0] = -34;
   $1667 = ((($283)) + 2|0);
   HEAP8[$1667>>0] = 105;
   $1668 = ((($283)) + 3|0);
   HEAP8[$1668>>0] = -1;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$282>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$282+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$283>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$283+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$283+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$283+3>>0]|0;
   _DrawTextEx($font$byval_copy364,7275,$$byval_copy365,$1665,-5,$$byval_copy366);
   STACKTOP = sp;return;
  }
 }
 $1669 = ($1633|0)==(10);
 $or$cond38 = $1669 & $1636;
 if ($or$cond38) {
  $1670 = HEAP32[40597]|0;
  $1671 = ($1670|0)<(5);
  if ($1671) {
   $1672 = (_GetScreenWidth()|0);
   $1673 = (($1672|0) / 2)&-1;
   $1674 = (_MeasureText(7179,40)|0);
   $1675 = (($1674|0) / 2)&-1;
   $1676 = (($1673) - ($1675))|0;
   $1677 = (+($1676|0));
   HEAPF32[$284>>2] = $1677;
   $1678 = ((($284)) + 4|0);
   $1679 = (_GetScreenHeight()|0);
   $1680 = (($1679|0) / 3)&-1;
   $1681 = (+($1680|0));
   HEAPF32[$1678>>2] = $1681;
   $1682 = HEAP32[(26372)>>2]|0;
   $1683 = (+($1682|0));
   HEAP8[$285>>0] = -3;
   $1684 = ((($285)) + 1|0);
   HEAP8[$1684>>0] = -56;
   $1685 = ((($285)) + 2|0);
   HEAP8[$1685>>0] = 108;
   $1686 = ((($285)) + 3|0);
   HEAP8[$1686>>0] = -1;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$284>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$284+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$285>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$285+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$285+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$285+3>>0]|0;
   _DrawTextEx($font$byval_copy364,7179,$$byval_copy365,$1683,-5,$$byval_copy366);
   STACKTOP = sp;return;
  } else {
   $1687 = (_GetScreenWidth()|0);
   $1688 = (($1687|0) / 2)&-1;
   $1689 = (_MeasureText(7307,40)|0);
   $1690 = (($1689|0) / 2)&-1;
   $1691 = (($1688) - ($1690))|0;
   $1692 = (+($1691|0));
   HEAPF32[$286>>2] = $1692;
   $1693 = ((($286)) + 4|0);
   $1694 = (_GetScreenHeight()|0);
   $1695 = (($1694|0) / 3)&-1;
   $1696 = (+($1695|0));
   HEAPF32[$1693>>2] = $1696;
   $1697 = HEAP32[(26372)>>2]|0;
   $1698 = (+($1697|0));
   HEAP8[$287>>0] = -3;
   $1699 = ((($287)) + 1|0);
   HEAP8[$1699>>0] = -56;
   $1700 = ((($287)) + 2|0);
   HEAP8[$1700>>0] = 108;
   $1701 = ((($287)) + 3|0);
   HEAP8[$1701>>0] = -1;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$286>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$286+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$287>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$287+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$287+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$287+3>>0]|0;
   _DrawTextEx($font$byval_copy364,7307,$$byval_copy365,$1698,-5,$$byval_copy366);
   STACKTOP = sp;return;
  }
 }
 $1702 = ($1633|0)==(1);
 $or$cond40 = $1702 & $1636;
 if ($or$cond40) {
  $1703 = HEAP32[40597]|0;
  $1704 = ($1703|0)<(5);
  if ($1704) {
   $1705 = (_GetScreenWidth()|0);
   $1706 = (($1705|0) / 2)&-1;
   $1707 = (_MeasureText(7211,40)|0);
   $1708 = (($1707|0) / 2)&-1;
   $1709 = (($1706) - ($1708))|0;
   $1710 = (+($1709|0));
   HEAPF32[$288>>2] = $1710;
   $1711 = ((($288)) + 4|0);
   $1712 = (_GetScreenHeight()|0);
   $1713 = (($1712|0) / 3)&-1;
   $1714 = (+($1713|0));
   HEAPF32[$1711>>2] = $1714;
   $1715 = HEAP32[(26372)>>2]|0;
   $1716 = (+($1715|0));
   HEAP8[$289>>0] = -1;
   $1717 = ((($289)) + 1|0);
   HEAP8[$1717>>0] = -107;
   $1718 = ((($289)) + 2|0);
   HEAP8[$1718>>0] = 107;
   $1719 = ((($289)) + 3|0);
   HEAP8[$1719>>0] = -1;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$288>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$288+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$289>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$289+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$289+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$289+3>>0]|0;
   _DrawTextEx($font$byval_copy364,7211,$$byval_copy365,$1716,-5,$$byval_copy366);
   STACKTOP = sp;return;
  } else {
   $1720 = (_GetScreenWidth()|0);
   $1721 = (($1720|0) / 2)&-1;
   $1722 = (_MeasureText(7339,40)|0);
   $1723 = (($1722|0) / 2)&-1;
   $1724 = (($1721) - ($1723))|0;
   $1725 = (+($1724|0));
   HEAPF32[$290>>2] = $1725;
   $1726 = ((($290)) + 4|0);
   $1727 = (_GetScreenHeight()|0);
   $1728 = (($1727|0) / 3)&-1;
   $1729 = (+($1728|0));
   HEAPF32[$1726>>2] = $1729;
   $1730 = HEAP32[(26372)>>2]|0;
   $1731 = (+($1730|0));
   HEAP8[$291>>0] = -1;
   $1732 = ((($291)) + 1|0);
   HEAP8[$1732>>0] = -107;
   $1733 = ((($291)) + 2|0);
   HEAP8[$1733>>0] = 107;
   $1734 = ((($291)) + 3|0);
   HEAP8[$1734>>0] = -1;
   ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
   ;HEAP32[$$byval_copy365>>2]=HEAP32[$290>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$290+4>>2]|0;
   ;HEAP8[$$byval_copy366>>0]=HEAP8[$291>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$291+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$291+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$291+3>>0]|0;
   _DrawTextEx($font$byval_copy364,7339,$$byval_copy365,$1731,-5,$$byval_copy366);
   STACKTOP = sp;return;
  }
 }
 $1735 = ($1633|0)==(4);
 $or$cond42 = $1735 & $1636;
 if (!($or$cond42)) {
  STACKTOP = sp;return;
 }
 $1736 = HEAP32[40597]|0;
 $1737 = ($1736|0)<(5);
 if ($1737) {
  $1738 = (_GetScreenWidth()|0);
  $1739 = (($1738|0) / 2)&-1;
  $1740 = (_MeasureText(7243,40)|0);
  $1741 = (($1740|0) / 2)&-1;
  $1742 = (($1739) - ($1741))|0;
  $1743 = (+($1742|0));
  HEAPF32[$292>>2] = $1743;
  $1744 = ((($292)) + 4|0);
  $1745 = (_GetScreenHeight()|0);
  $1746 = (($1745|0) / 3)&-1;
  $1747 = (+($1746|0));
  HEAPF32[$1744>>2] = $1747;
  $1748 = HEAP32[(26372)>>2]|0;
  $1749 = (+($1748|0));
  HEAP8[$293>>0] = -123;
  $1750 = ((($293)) + 1|0);
  HEAP8[$1750>>0] = -7;
  $1751 = ((($293)) + 2|0);
  HEAP8[$1751>>0] = -3;
  $1752 = ((($293)) + 3|0);
  HEAP8[$1752>>0] = -1;
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[$292>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$292+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$293>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$293+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$293+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$293+3>>0]|0;
  _DrawTextEx($font$byval_copy364,7243,$$byval_copy365,$1749,-5,$$byval_copy366);
  STACKTOP = sp;return;
 } else {
  $1753 = (_GetScreenWidth()|0);
  $1754 = (($1753|0) / 2)&-1;
  $1755 = (_MeasureText(7371,40)|0);
  $1756 = (($1755|0) / 2)&-1;
  $1757 = (($1754) - ($1756))|0;
  $1758 = (+($1757|0));
  HEAPF32[$294>>2] = $1758;
  $1759 = ((($294)) + 4|0);
  $1760 = (_GetScreenHeight()|0);
  $1761 = (($1760|0) / 3)&-1;
  $1762 = (+($1761|0));
  HEAPF32[$1759>>2] = $1762;
  $1763 = HEAP32[(26372)>>2]|0;
  $1764 = (+($1763|0));
  HEAP8[$295>>0] = -123;
  $1765 = ((($295)) + 1|0);
  HEAP8[$1765>>0] = -7;
  $1766 = ((($295)) + 2|0);
  HEAP8[$1766>>0] = -3;
  $1767 = ((($295)) + 3|0);
  HEAP8[$1767>>0] = -1;
  ;HEAP32[$font$byval_copy364>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy364+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy364+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy364+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy364+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy364+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy364+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy364+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy365>>2]=HEAP32[$294>>2]|0;HEAP32[$$byval_copy365+4>>2]=HEAP32[$294+4>>2]|0;
  ;HEAP8[$$byval_copy366>>0]=HEAP8[$295>>0]|0;HEAP8[$$byval_copy366+1>>0]=HEAP8[$295+1>>0]|0;HEAP8[$$byval_copy366+2>>0]=HEAP8[$295+2>>0]|0;HEAP8[$$byval_copy366+3>>0]=HEAP8[$295+3>>0]|0;
  _DrawTextEx($font$byval_copy364,7371,$$byval_copy365,$1764,-5,$$byval_copy366);
  STACKTOP = sp;return;
 }
}
function _DrawParallaxBack_63() {
 var $$byval_copy93 = 0, $$byval_copy94 = 0, $$byval_copy95 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $atlas02$byval_copy92 = 0, $color01$32$byval_copy96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(880|0);
 $color01$32$byval_copy96 = sp + 864|0;
 $$byval_copy95 = sp + 856|0;
 $$byval_copy94 = sp + 840|0;
 $$byval_copy93 = sp + 824|0;
 $atlas02$byval_copy92 = sp + 800|0;
 $0 = sp + 784|0;
 $1 = sp + 768|0;
 $2 = sp + 760|0;
 $3 = sp + 744|0;
 $4 = sp + 728|0;
 $5 = sp + 720|0;
 $6 = sp + 704|0;
 $7 = sp + 688|0;
 $8 = sp + 680|0;
 $9 = sp + 664|0;
 $10 = sp + 648|0;
 $11 = sp + 640|0;
 $12 = sp + 624|0;
 $13 = sp + 608|0;
 $14 = sp + 600|0;
 $15 = sp + 584|0;
 $16 = sp + 568|0;
 $17 = sp + 560|0;
 $18 = sp + 544|0;
 $19 = sp + 528|0;
 $20 = sp + 520|0;
 $21 = sp + 504|0;
 $22 = sp + 488|0;
 $23 = sp + 480|0;
 $24 = sp + 464|0;
 $25 = sp + 448|0;
 $26 = sp + 440|0;
 $27 = sp + 424|0;
 $28 = sp + 408|0;
 $29 = sp + 400|0;
 $30 = sp + 384|0;
 $31 = sp + 368|0;
 $32 = sp + 360|0;
 $33 = sp + 344|0;
 $34 = sp + 328|0;
 $35 = sp + 320|0;
 $36 = sp + 304|0;
 $37 = sp + 288|0;
 $38 = sp + 280|0;
 $39 = sp + 264|0;
 $40 = sp + 248|0;
 $41 = sp + 240|0;
 $42 = sp + 224|0;
 $43 = sp + 208|0;
 $44 = sp + 200|0;
 $45 = sp + 184|0;
 $46 = sp + 168|0;
 $47 = sp + 160|0;
 $48 = sp + 144|0;
 $49 = sp + 128|0;
 $50 = sp + 120|0;
 $51 = sp + 104|0;
 $52 = sp + 88|0;
 $53 = sp + 80|0;
 $54 = sp + 64|0;
 $55 = sp + 48|0;
 $56 = sp + 40|0;
 $57 = sp + 24|0;
 $58 = sp + 8|0;
 $59 = sp;
 HEAP32[$0>>2] = 660;
 $60 = ((($0)) + 4|0);
 HEAP32[$60>>2] = 315;
 $61 = ((($0)) + 8|0);
 HEAP32[$61>>2] = 28;
 $62 = ((($0)) + 12|0);
 HEAP32[$62>>2] = 335;
 $63 = +HEAPF32[40567];
 $64 = (~~(($63)));
 $65 = HEAP32[40603]|0;
 $66 = (($64) + ($65))|0;
 HEAP32[$1>>2] = $66;
 $67 = ((($1)) + 4|0);
 HEAP32[$67>>2] = 67;
 $68 = ((($1)) + 8|0);
 HEAP32[$68>>2] = 56;
 $69 = ((($1)) + 12|0);
 HEAP32[$69>>2] = 670;
 HEAPF32[$2>>2] = 0.0;
 $70 = ((($2)) + 4|0);
 HEAPF32[$70>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$0+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$2+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$3>>2] = 746;
 $71 = ((($3)) + 4|0);
 HEAP32[$71>>2] = 315;
 $72 = ((($3)) + 8|0);
 HEAP32[$72>>2] = 26;
 $73 = ((($3)) + 12|0);
 HEAP32[$73>>2] = 332;
 $74 = +HEAPF32[40567];
 $75 = (~~(($74)));
 $76 = HEAP32[40603]|0;
 $77 = (($76) + 140)|0;
 $78 = (($77) + ($75))|0;
 HEAP32[$4>>2] = $78;
 $79 = ((($4)) + 4|0);
 HEAP32[$79>>2] = 67;
 $80 = ((($4)) + 8|0);
 HEAP32[$80>>2] = 52;
 $81 = ((($4)) + 12|0);
 HEAP32[$81>>2] = 664;
 HEAPF32[$5>>2] = 0.0;
 $82 = ((($5)) + 4|0);
 HEAPF32[$82>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$3+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$4+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$5+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$6>>2] = 791;
 $83 = ((($6)) + 4|0);
 HEAP32[$83>>2] = 315;
 $84 = ((($6)) + 8|0);
 HEAP32[$84>>2] = 15;
 $85 = ((($6)) + 12|0);
 HEAP32[$85>>2] = 329;
 $86 = +HEAPF32[40567];
 $87 = (~~(($86)));
 $88 = HEAP32[40603]|0;
 $89 = (($88) + 280)|0;
 $90 = (($89) + ($87))|0;
 HEAP32[$7>>2] = $90;
 $91 = ((($7)) + 4|0);
 HEAP32[$91>>2] = 67;
 $92 = ((($7)) + 8|0);
 HEAP32[$92>>2] = 30;
 $93 = ((($7)) + 12|0);
 HEAP32[$93>>2] = 658;
 HEAPF32[$8>>2] = 0.0;
 $94 = ((($8)) + 4|0);
 HEAPF32[$94>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$6+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$7+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$8+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$9>>2] = 1940;
 $95 = ((($9)) + 4|0);
 HEAP32[$95>>2] = 2;
 $96 = ((($9)) + 8|0);
 HEAP32[$96>>2] = 38;
 $97 = ((($9)) + 12|0);
 HEAP32[$97>>2] = 334;
 $98 = +HEAPF32[40567];
 $99 = (~~(($98)));
 $100 = HEAP32[40603]|0;
 $101 = (($100) + 420)|0;
 $102 = (($101) + ($99))|0;
 HEAP32[$10>>2] = $102;
 $103 = ((($10)) + 4|0);
 HEAP32[$103>>2] = 67;
 $104 = ((($10)) + 8|0);
 HEAP32[$104>>2] = 76;
 $105 = ((($10)) + 12|0);
 HEAP32[$105>>2] = 668;
 HEAPF32[$11>>2] = 0.0;
 $106 = ((($11)) + 4|0);
 HEAPF32[$106>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$9+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$10+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$11+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$12>>2] = 572;
 $107 = ((($12)) + 4|0);
 HEAP32[$107>>2] = 364;
 $108 = ((($12)) + 8|0);
 HEAP32[$108>>2] = 32;
 $109 = ((($12)) + 12|0);
 HEAP32[$109>>2] = 349;
 $110 = +HEAPF32[40567];
 $111 = (~~(($110)));
 $112 = HEAP32[40603]|0;
 $113 = (($112) + 560)|0;
 $114 = (($113) + ($111))|0;
 HEAP32[$13>>2] = $114;
 $115 = ((($13)) + 4|0);
 HEAP32[$115>>2] = 67;
 $116 = ((($13)) + 8|0);
 HEAP32[$116>>2] = 64;
 $117 = ((($13)) + 12|0);
 HEAP32[$117>>2] = 698;
 HEAPF32[$14>>2] = 0.0;
 $118 = ((($14)) + 4|0);
 HEAPF32[$118>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$12+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$13+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$14+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$15>>2] = 1863;
 $119 = ((($15)) + 4|0);
 HEAP32[$119>>2] = 338;
 $120 = ((($15)) + 8|0);
 HEAP32[$120>>2] = 31;
 $121 = ((($15)) + 12|0);
 HEAP32[$121>>2] = 334;
 $122 = +HEAPF32[40567];
 $123 = (~~(($122)));
 $124 = HEAP32[40603]|0;
 $125 = (($124) + 700)|0;
 $126 = (($125) + ($123))|0;
 HEAP32[$16>>2] = $126;
 $127 = ((($16)) + 4|0);
 HEAP32[$127>>2] = 67;
 $128 = ((($16)) + 8|0);
 HEAP32[$128>>2] = 62;
 $129 = ((($16)) + 12|0);
 HEAP32[$129>>2] = 668;
 HEAPF32[$17>>2] = 0.0;
 $130 = ((($17)) + 4|0);
 HEAPF32[$130>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$15+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$16+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$17+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$18>>2] = 1833;
 $131 = ((($18)) + 4|0);
 HEAP32[$131>>2] = 2;
 $132 = ((($18)) + 8|0);
 HEAP32[$132>>2] = 25;
 $133 = ((($18)) + 12|0);
 HEAP32[$133>>2] = 349;
 $134 = +HEAPF32[40567];
 $135 = (~~(($134)));
 $136 = HEAP32[40603]|0;
 $137 = (($136) + 840)|0;
 $138 = (($137) + ($135))|0;
 HEAP32[$19>>2] = $138;
 $139 = ((($19)) + 4|0);
 HEAP32[$139>>2] = 67;
 $140 = ((($19)) + 8|0);
 HEAP32[$140>>2] = 50;
 $141 = ((($19)) + 12|0);
 HEAP32[$141>>2] = 698;
 HEAPF32[$20>>2] = 0.0;
 $142 = ((($20)) + 4|0);
 HEAPF32[$142>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$18+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$19+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$20+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$21>>2] = 1964;
 $143 = ((($21)) + 4|0);
 HEAP32[$143>>2] = 338;
 $144 = ((($21)) + 8|0);
 HEAP32[$144>>2] = 32;
 $145 = ((($21)) + 12|0);
 HEAP32[$145>>2] = 331;
 $146 = +HEAPF32[40567];
 $147 = (~~(($146)));
 $148 = HEAP32[40603]|0;
 $149 = (($148) + 980)|0;
 $150 = (($149) + ($147))|0;
 HEAP32[$22>>2] = $150;
 $151 = ((($22)) + 4|0);
 HEAP32[$151>>2] = 67;
 $152 = ((($22)) + 8|0);
 HEAP32[$152>>2] = 64;
 $153 = ((($22)) + 12|0);
 HEAP32[$153>>2] = 662;
 HEAPF32[$23>>2] = 0.0;
 $154 = ((($23)) + 4|0);
 HEAPF32[$154>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$21+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$22+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$23+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$24>>2] = 1146;
 $155 = ((($24)) + 4|0);
 HEAP32[$155>>2] = 239;
 $156 = ((($24)) + 8|0);
 HEAP32[$156>>2] = 640;
 $157 = ((($24)) + 12|0);
 HEAP32[$157>>2] = 77;
 $158 = +HEAPF32[40567];
 $159 = (~~(($158)));
 HEAP32[$25>>2] = $159;
 $160 = ((($25)) + 4|0);
 HEAP32[$160>>2] = 469;
 $161 = ((($25)) + 8|0);
 HEAP32[$161>>2] = 1280;
 $162 = ((($25)) + 12|0);
 HEAP32[$162>>2] = 154;
 HEAPF32[$26>>2] = 0.0;
 $163 = ((($26)) + 4|0);
 HEAPF32[$163>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$24+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$25+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$26+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162484>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162484+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162484+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162484+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$27>>2] = 1146;
 $164 = ((($27)) + 4|0);
 HEAP32[$164>>2] = 316;
 $165 = ((($27)) + 8|0);
 HEAP32[$165>>2] = 640;
 $166 = ((($27)) + 12|0);
 HEAP32[$166>>2] = -77;
 $167 = +HEAPF32[40567];
 $168 = (~~(($167)));
 HEAP32[$28>>2] = $168;
 $169 = ((($28)) + 4|0);
 HEAP32[$169>>2] = 67;
 $170 = ((($28)) + 8|0);
 HEAP32[$170>>2] = 1280;
 $171 = ((($28)) + 12|0);
 HEAP32[$171>>2] = 154;
 HEAPF32[$29>>2] = 0.0;
 $172 = ((($29)) + 4|0);
 HEAPF32[$172>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$27>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$27+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$28+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$29>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$29+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162484>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162484+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162484+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162484+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$30>>2] = 660;
 $173 = ((($30)) + 4|0);
 HEAP32[$173>>2] = 315;
 $174 = ((($30)) + 8|0);
 HEAP32[$174>>2] = 28;
 $175 = ((($30)) + 12|0);
 HEAP32[$175>>2] = 335;
 $176 = +HEAPF32[40567];
 $177 = (~~(($176)));
 $178 = HEAP32[40603]|0;
 $179 = (($177) + ($178))|0;
 $180 = (_GetScreenWidth()|0);
 $181 = (($179) + ($180))|0;
 HEAP32[$31>>2] = $181;
 $182 = ((($31)) + 4|0);
 HEAP32[$182>>2] = 67;
 $183 = ((($31)) + 8|0);
 HEAP32[$183>>2] = 56;
 $184 = ((($31)) + 12|0);
 HEAP32[$184>>2] = 670;
 HEAPF32[$32>>2] = 0.0;
 $185 = ((($32)) + 4|0);
 HEAPF32[$185>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$30>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$30+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$30+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$31>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$31+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$32+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$33>>2] = 746;
 $186 = ((($33)) + 4|0);
 HEAP32[$186>>2] = 315;
 $187 = ((($33)) + 8|0);
 HEAP32[$187>>2] = 26;
 $188 = ((($33)) + 12|0);
 HEAP32[$188>>2] = 332;
 $189 = +HEAPF32[40567];
 $190 = (~~(($189)));
 $191 = HEAP32[40603]|0;
 $192 = (_GetScreenWidth()|0);
 $193 = (($191) + 140)|0;
 $194 = (($193) + ($190))|0;
 $195 = (($194) + ($192))|0;
 HEAP32[$34>>2] = $195;
 $196 = ((($34)) + 4|0);
 HEAP32[$196>>2] = 67;
 $197 = ((($34)) + 8|0);
 HEAP32[$197>>2] = 52;
 $198 = ((($34)) + 12|0);
 HEAP32[$198>>2] = 664;
 HEAPF32[$35>>2] = 0.0;
 $199 = ((($35)) + 4|0);
 HEAPF32[$199>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$33>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$33+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$34>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$34+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$35+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$36>>2] = 791;
 $200 = ((($36)) + 4|0);
 HEAP32[$200>>2] = 315;
 $201 = ((($36)) + 8|0);
 HEAP32[$201>>2] = 15;
 $202 = ((($36)) + 12|0);
 HEAP32[$202>>2] = 329;
 $203 = +HEAPF32[40567];
 $204 = (~~(($203)));
 $205 = HEAP32[40603]|0;
 $206 = (_GetScreenWidth()|0);
 $207 = (($205) + 280)|0;
 $208 = (($207) + ($204))|0;
 $209 = (($208) + ($206))|0;
 HEAP32[$37>>2] = $209;
 $210 = ((($37)) + 4|0);
 HEAP32[$210>>2] = 67;
 $211 = ((($37)) + 8|0);
 HEAP32[$211>>2] = 30;
 $212 = ((($37)) + 12|0);
 HEAP32[$212>>2] = 658;
 HEAPF32[$38>>2] = 0.0;
 $213 = ((($38)) + 4|0);
 HEAPF32[$213>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$36>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$36+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$37>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$37+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$38>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$38+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$39>>2] = 1940;
 $214 = ((($39)) + 4|0);
 HEAP32[$214>>2] = 2;
 $215 = ((($39)) + 8|0);
 HEAP32[$215>>2] = 38;
 $216 = ((($39)) + 12|0);
 HEAP32[$216>>2] = 334;
 $217 = +HEAPF32[40567];
 $218 = (~~(($217)));
 $219 = HEAP32[40603]|0;
 $220 = (_GetScreenWidth()|0);
 $221 = (($219) + 420)|0;
 $222 = (($221) + ($218))|0;
 $223 = (($222) + ($220))|0;
 HEAP32[$40>>2] = $223;
 $224 = ((($40)) + 4|0);
 HEAP32[$224>>2] = 67;
 $225 = ((($40)) + 8|0);
 HEAP32[$225>>2] = 76;
 $226 = ((($40)) + 12|0);
 HEAP32[$226>>2] = 668;
 HEAPF32[$41>>2] = 0.0;
 $227 = ((($41)) + 4|0);
 HEAPF32[$227>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$39>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$39+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$40>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$40+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$41>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$41+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$42>>2] = 572;
 $228 = ((($42)) + 4|0);
 HEAP32[$228>>2] = 364;
 $229 = ((($42)) + 8|0);
 HEAP32[$229>>2] = 32;
 $230 = ((($42)) + 12|0);
 HEAP32[$230>>2] = 349;
 $231 = +HEAPF32[40567];
 $232 = (~~(($231)));
 $233 = HEAP32[40603]|0;
 $234 = (_GetScreenWidth()|0);
 $235 = (($233) + 560)|0;
 $236 = (($235) + ($232))|0;
 $237 = (($236) + ($234))|0;
 HEAP32[$43>>2] = $237;
 $238 = ((($43)) + 4|0);
 HEAP32[$238>>2] = 67;
 $239 = ((($43)) + 8|0);
 HEAP32[$239>>2] = 64;
 $240 = ((($43)) + 12|0);
 HEAP32[$240>>2] = 698;
 HEAPF32[$44>>2] = 0.0;
 $241 = ((($44)) + 4|0);
 HEAPF32[$241>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$42>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$42+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$43>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$43+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$44>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$44+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$45>>2] = 1863;
 $242 = ((($45)) + 4|0);
 HEAP32[$242>>2] = 338;
 $243 = ((($45)) + 8|0);
 HEAP32[$243>>2] = 31;
 $244 = ((($45)) + 12|0);
 HEAP32[$244>>2] = 334;
 $245 = +HEAPF32[40567];
 $246 = (~~(($245)));
 $247 = HEAP32[40603]|0;
 $248 = (_GetScreenWidth()|0);
 $249 = (($247) + 700)|0;
 $250 = (($249) + ($246))|0;
 $251 = (($250) + ($248))|0;
 HEAP32[$46>>2] = $251;
 $252 = ((($46)) + 4|0);
 HEAP32[$252>>2] = 67;
 $253 = ((($46)) + 8|0);
 HEAP32[$253>>2] = 62;
 $254 = ((($46)) + 12|0);
 HEAP32[$254>>2] = 668;
 HEAPF32[$47>>2] = 0.0;
 $255 = ((($47)) + 4|0);
 HEAPF32[$255>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$45>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$45+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$45+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$46>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$46+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$46+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$47>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$47+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$48>>2] = 1833;
 $256 = ((($48)) + 4|0);
 HEAP32[$256>>2] = 2;
 $257 = ((($48)) + 8|0);
 HEAP32[$257>>2] = 25;
 $258 = ((($48)) + 12|0);
 HEAP32[$258>>2] = 349;
 $259 = +HEAPF32[40567];
 $260 = (~~(($259)));
 $261 = HEAP32[40603]|0;
 $262 = (_GetScreenWidth()|0);
 $263 = (($261) + 840)|0;
 $264 = (($263) + ($260))|0;
 $265 = (($264) + ($262))|0;
 HEAP32[$49>>2] = $265;
 $266 = ((($49)) + 4|0);
 HEAP32[$266>>2] = 67;
 $267 = ((($49)) + 8|0);
 HEAP32[$267>>2] = 50;
 $268 = ((($49)) + 12|0);
 HEAP32[$268>>2] = 698;
 HEAPF32[$50>>2] = 0.0;
 $269 = ((($50)) + 4|0);
 HEAPF32[$269>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$48>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$48+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$49>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$49+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$49+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$50>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$50+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$51>>2] = 1964;
 $270 = ((($51)) + 4|0);
 HEAP32[$270>>2] = 338;
 $271 = ((($51)) + 8|0);
 HEAP32[$271>>2] = 32;
 $272 = ((($51)) + 12|0);
 HEAP32[$272>>2] = 331;
 $273 = +HEAPF32[40567];
 $274 = (~~(($273)));
 $275 = HEAP32[40603]|0;
 $276 = (_GetScreenWidth()|0);
 $277 = (($275) + 980)|0;
 $278 = (($277) + ($274))|0;
 $279 = (($278) + ($276))|0;
 HEAP32[$52>>2] = $279;
 $280 = ((($52)) + 4|0);
 HEAP32[$280>>2] = 67;
 $281 = ((($52)) + 8|0);
 HEAP32[$281>>2] = 64;
 $282 = ((($52)) + 12|0);
 HEAP32[$282>>2] = 662;
 HEAPF32[$53>>2] = 0.0;
 $283 = ((($53)) + 4|0);
 HEAPF32[$283>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$51>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$51+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$52>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$52+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$52+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$52+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$53>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$53+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$54>>2] = 1146;
 $284 = ((($54)) + 4|0);
 HEAP32[$284>>2] = 239;
 $285 = ((($54)) + 8|0);
 HEAP32[$285>>2] = 640;
 $286 = ((($54)) + 12|0);
 HEAP32[$286>>2] = 77;
 $287 = +HEAPF32[40567];
 $288 = (~~(($287)));
 $289 = (_GetScreenWidth()|0);
 $290 = (($288) + ($289))|0;
 HEAP32[$55>>2] = $290;
 $291 = ((($55)) + 4|0);
 HEAP32[$291>>2] = 469;
 $292 = ((($55)) + 8|0);
 HEAP32[$292>>2] = 1280;
 $293 = ((($55)) + 12|0);
 HEAP32[$293>>2] = 154;
 HEAPF32[$56>>2] = 0.0;
 $294 = ((($56)) + 4|0);
 HEAPF32[$294>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$54>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$54+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$54+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$55>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$55+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$55+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$55+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$56>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$56+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162484>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162484+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162484+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162484+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$57>>2] = 1146;
 $295 = ((($57)) + 4|0);
 HEAP32[$295>>2] = 316;
 $296 = ((($57)) + 8|0);
 HEAP32[$296>>2] = 640;
 $297 = ((($57)) + 12|0);
 HEAP32[$297>>2] = -77;
 $298 = +HEAPF32[40567];
 $299 = (~~(($298)));
 $300 = (_GetScreenWidth()|0);
 $301 = (($299) + ($300))|0;
 HEAP32[$58>>2] = $301;
 $302 = ((($58)) + 4|0);
 HEAP32[$302>>2] = 67;
 $303 = ((($58)) + 8|0);
 HEAP32[$303>>2] = 1280;
 $304 = ((($58)) + 12|0);
 HEAP32[$304>>2] = 154;
 HEAPF32[$59>>2] = 0.0;
 $305 = ((($59)) + 4|0);
 HEAPF32[$305>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$57>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$57+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$58>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$58+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$59>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$59+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162484>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162484+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162484+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162484+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 STACKTOP = sp;return;
}
function _DrawParallaxMiddle_64() {
 var $$byval_copy93 = 0, $$byval_copy94 = 0, $$byval_copy95 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $atlas02$byval_copy92 = 0, $color01$32$byval_copy96 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(880|0);
 $color01$32$byval_copy96 = sp + 864|0;
 $$byval_copy95 = sp + 856|0;
 $$byval_copy94 = sp + 840|0;
 $$byval_copy93 = sp + 824|0;
 $atlas02$byval_copy92 = sp + 800|0;
 $0 = sp + 784|0;
 $1 = sp + 768|0;
 $2 = sp + 760|0;
 $3 = sp + 744|0;
 $4 = sp + 728|0;
 $5 = sp + 720|0;
 $6 = sp + 704|0;
 $7 = sp + 688|0;
 $8 = sp + 680|0;
 $9 = sp + 664|0;
 $10 = sp + 648|0;
 $11 = sp + 640|0;
 $12 = sp + 624|0;
 $13 = sp + 608|0;
 $14 = sp + 600|0;
 $15 = sp + 584|0;
 $16 = sp + 568|0;
 $17 = sp + 560|0;
 $18 = sp + 544|0;
 $19 = sp + 528|0;
 $20 = sp + 520|0;
 $21 = sp + 504|0;
 $22 = sp + 488|0;
 $23 = sp + 480|0;
 $24 = sp + 464|0;
 $25 = sp + 448|0;
 $26 = sp + 440|0;
 $27 = sp + 424|0;
 $28 = sp + 408|0;
 $29 = sp + 400|0;
 $30 = sp + 384|0;
 $31 = sp + 368|0;
 $32 = sp + 360|0;
 $33 = sp + 344|0;
 $34 = sp + 328|0;
 $35 = sp + 320|0;
 $36 = sp + 304|0;
 $37 = sp + 288|0;
 $38 = sp + 280|0;
 $39 = sp + 264|0;
 $40 = sp + 248|0;
 $41 = sp + 240|0;
 $42 = sp + 224|0;
 $43 = sp + 208|0;
 $44 = sp + 200|0;
 $45 = sp + 184|0;
 $46 = sp + 168|0;
 $47 = sp + 160|0;
 $48 = sp + 144|0;
 $49 = sp + 128|0;
 $50 = sp + 120|0;
 $51 = sp + 104|0;
 $52 = sp + 88|0;
 $53 = sp + 80|0;
 $54 = sp + 64|0;
 $55 = sp + 48|0;
 $56 = sp + 40|0;
 $57 = sp + 24|0;
 $58 = sp + 8|0;
 $59 = sp;
 HEAP32[$0>>2] = 1998;
 $60 = ((($0)) + 4|0);
 HEAP32[$60>>2] = 338;
 $61 = ((($0)) + 8|0);
 HEAP32[$61>>2] = 28;
 $62 = ((($0)) + 12|0);
 HEAP32[$62>>2] = 335;
 $63 = +HEAPF32[40566];
 $64 = (~~(($63)));
 HEAP32[$1>>2] = $64;
 $65 = ((($1)) + 4|0);
 HEAP32[$65>>2] = 67;
 $66 = ((($1)) + 8|0);
 HEAP32[$66>>2] = 56;
 $67 = ((($1)) + 12|0);
 HEAP32[$67>>2] = 670;
 HEAPF32[$2>>2] = 0.0;
 $68 = ((($2)) + 4|0);
 HEAPF32[$68>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$0+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$2+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$3>>2] = 718;
 $69 = ((($3)) + 4|0);
 HEAP32[$69>>2] = 315;
 $70 = ((($3)) + 8|0);
 HEAP32[$70>>2] = 26;
 $71 = ((($3)) + 12|0);
 HEAP32[$71>>2] = 332;
 $72 = +HEAPF32[40566];
 $73 = (~~(($72)));
 $74 = (($73) + 140)|0;
 HEAP32[$4>>2] = $74;
 $75 = ((($4)) + 4|0);
 HEAP32[$75>>2] = 67;
 $76 = ((($4)) + 8|0);
 HEAP32[$76>>2] = 52;
 $77 = ((($4)) + 12|0);
 HEAP32[$77>>2] = 664;
 HEAPF32[$5>>2] = 0.0;
 $78 = ((($5)) + 4|0);
 HEAPF32[$78>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$3+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$4+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$5+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$6>>2] = 774;
 $79 = ((($6)) + 4|0);
 HEAP32[$79>>2] = 315;
 $80 = ((($6)) + 8|0);
 HEAP32[$80>>2] = 15;
 $81 = ((($6)) + 12|0);
 HEAP32[$81>>2] = 329;
 $82 = +HEAPF32[40566];
 $83 = (~~(($82)));
 $84 = (($83) + 280)|0;
 HEAP32[$7>>2] = $84;
 $85 = ((($7)) + 4|0);
 HEAP32[$85>>2] = 67;
 $86 = ((($7)) + 8|0);
 HEAP32[$86>>2] = 30;
 $87 = ((($7)) + 12|0);
 HEAP32[$87>>2] = 658;
 HEAPF32[$8>>2] = 0.0;
 $88 = ((($8)) + 4|0);
 HEAPF32[$88>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$6+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$7+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$8+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$9>>2] = 1900;
 $89 = ((($9)) + 4|0);
 HEAP32[$89>>2] = 2;
 $90 = ((($9)) + 8|0);
 HEAP32[$90>>2] = 38;
 $91 = ((($9)) + 12|0);
 HEAP32[$91>>2] = 334;
 $92 = +HEAPF32[40566];
 $93 = (~~(($92)));
 $94 = (($93) + 420)|0;
 HEAP32[$10>>2] = $94;
 $95 = ((($10)) + 4|0);
 HEAP32[$95>>2] = 67;
 $96 = ((($10)) + 8|0);
 HEAP32[$96>>2] = 76;
 $97 = ((($10)) + 12|0);
 HEAP32[$97>>2] = 668;
 HEAPF32[$11>>2] = 0.0;
 $98 = ((($11)) + 4|0);
 HEAPF32[$98>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$9+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$10+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$11+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$12>>2] = 538;
 $99 = ((($12)) + 4|0);
 HEAP32[$99>>2] = 364;
 $100 = ((($12)) + 8|0);
 HEAP32[$100>>2] = 32;
 $101 = ((($12)) + 12|0);
 HEAP32[$101>>2] = 349;
 $102 = +HEAPF32[40566];
 $103 = (~~(($102)));
 $104 = (($103) + 560)|0;
 HEAP32[$13>>2] = $104;
 $105 = ((($13)) + 4|0);
 HEAP32[$105>>2] = 67;
 $106 = ((($13)) + 8|0);
 HEAP32[$106>>2] = 64;
 $107 = ((($13)) + 12|0);
 HEAP32[$107>>2] = 698;
 HEAPF32[$14>>2] = 0.0;
 $108 = ((($14)) + 4|0);
 HEAPF32[$108>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$12+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$13+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$14+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$15>>2] = 2013;
 $109 = ((($15)) + 4|0);
 HEAP32[$109>>2] = 2;
 $110 = ((($15)) + 8|0);
 HEAP32[$110>>2] = 31;
 $111 = ((($15)) + 12|0);
 HEAP32[$111>>2] = 334;
 $112 = +HEAPF32[40566];
 $113 = (~~(($112)));
 $114 = (($113) + 700)|0;
 HEAP32[$16>>2] = $114;
 $115 = ((($16)) + 4|0);
 HEAP32[$115>>2] = 67;
 $116 = ((($16)) + 8|0);
 HEAP32[$116>>2] = 62;
 $117 = ((($16)) + 12|0);
 HEAP32[$117>>2] = 668;
 HEAPF32[$17>>2] = 0.0;
 $118 = ((($17)) + 4|0);
 HEAPF32[$118>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$15+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$16+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$17+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$18>>2] = 633;
 $119 = ((($18)) + 4|0);
 HEAP32[$119>>2] = 364;
 $120 = ((($18)) + 8|0);
 HEAP32[$120>>2] = 25;
 $121 = ((($18)) + 12|0);
 HEAP32[$121>>2] = 349;
 $122 = +HEAPF32[40566];
 $123 = (~~(($122)));
 $124 = (($123) + 840)|0;
 HEAP32[$19>>2] = $124;
 $125 = ((($19)) + 4|0);
 HEAP32[$125>>2] = 67;
 $126 = ((($19)) + 8|0);
 HEAP32[$126>>2] = 50;
 $127 = ((($19)) + 12|0);
 HEAP32[$127>>2] = 698;
 HEAPF32[$20>>2] = 0.0;
 $128 = ((($20)) + 4|0);
 HEAPF32[$128>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$18+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$19+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$20+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$21>>2] = 1930;
 $129 = ((($21)) + 4|0);
 HEAP32[$129>>2] = 338;
 $130 = ((($21)) + 8|0);
 HEAP32[$130>>2] = 32;
 $131 = ((($21)) + 12|0);
 HEAP32[$131>>2] = 331;
 $132 = +HEAPF32[40566];
 $133 = (~~(($132)));
 $134 = (($133) + 980)|0;
 HEAP32[$22>>2] = $134;
 $135 = ((($22)) + 4|0);
 HEAP32[$135>>2] = 67;
 $136 = ((($22)) + 8|0);
 HEAP32[$136>>2] = 64;
 $137 = ((($22)) + 12|0);
 HEAP32[$137>>2] = 662;
 HEAPF32[$23>>2] = 0.0;
 $138 = ((($23)) + 4|0);
 HEAPF32[$138>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$21+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$22+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$23+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$24>>2] = 1146;
 $139 = ((($24)) + 4|0);
 HEAP32[$139>>2] = 160;
 $140 = ((($24)) + 8|0);
 HEAP32[$140>>2] = 640;
 $141 = ((($24)) + 12|0);
 HEAP32[$141>>2] = 77;
 $142 = +HEAPF32[40566];
 $143 = (~~(($142)));
 HEAP32[$25>>2] = $143;
 $144 = ((($25)) + 4|0);
 HEAP32[$144>>2] = 509;
 $145 = ((($25)) + 8|0);
 HEAP32[$145>>2] = 1280;
 $146 = ((($25)) + 12|0);
 HEAP32[$146>>2] = 154;
 HEAPF32[$26>>2] = 0.0;
 $147 = ((($26)) + 4|0);
 HEAPF32[$147>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$24+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$25+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$26+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162484>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162484+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162484+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162484+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$27>>2] = 1146;
 $148 = ((($27)) + 4|0);
 HEAP32[$148>>2] = 237;
 $149 = ((($27)) + 8|0);
 HEAP32[$149>>2] = 640;
 $150 = ((($27)) + 12|0);
 HEAP32[$150>>2] = -77;
 $151 = +HEAPF32[40566];
 $152 = (~~(($151)));
 HEAP32[$28>>2] = $152;
 $153 = ((($28)) + 4|0);
 HEAP32[$153>>2] = 19;
 $154 = ((($28)) + 8|0);
 HEAP32[$154>>2] = 1280;
 $155 = ((($28)) + 12|0);
 HEAP32[$155>>2] = 154;
 HEAPF32[$29>>2] = 0.0;
 $156 = ((($29)) + 4|0);
 HEAPF32[$156>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$27>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$27+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$28+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$29>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$29+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162484>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162484+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162484+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162484+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$30>>2] = 718;
 $157 = ((($30)) + 4|0);
 HEAP32[$157>>2] = 315;
 $158 = ((($30)) + 8|0);
 HEAP32[$158>>2] = 26;
 $159 = ((($30)) + 12|0);
 HEAP32[$159>>2] = 332;
 $160 = +HEAPF32[40566];
 $161 = (~~(($160)));
 $162 = (_GetScreenWidth()|0);
 $163 = (($162) + 140)|0;
 $164 = (($163) + ($161))|0;
 HEAP32[$31>>2] = $164;
 $165 = ((($31)) + 4|0);
 HEAP32[$165>>2] = 67;
 $166 = ((($31)) + 8|0);
 HEAP32[$166>>2] = 52;
 $167 = ((($31)) + 12|0);
 HEAP32[$167>>2] = 664;
 HEAPF32[$32>>2] = 0.0;
 $168 = ((($32)) + 4|0);
 HEAPF32[$168>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$30>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$30+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$30+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$31>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$31+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$32+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$33>>2] = 774;
 $169 = ((($33)) + 4|0);
 HEAP32[$169>>2] = 315;
 $170 = ((($33)) + 8|0);
 HEAP32[$170>>2] = 15;
 $171 = ((($33)) + 12|0);
 HEAP32[$171>>2] = 329;
 $172 = +HEAPF32[40566];
 $173 = (~~(($172)));
 $174 = (_GetScreenWidth()|0);
 $175 = (($174) + 280)|0;
 $176 = (($175) + ($173))|0;
 HEAP32[$34>>2] = $176;
 $177 = ((($34)) + 4|0);
 HEAP32[$177>>2] = 67;
 $178 = ((($34)) + 8|0);
 HEAP32[$178>>2] = 30;
 $179 = ((($34)) + 12|0);
 HEAP32[$179>>2] = 658;
 HEAPF32[$35>>2] = 0.0;
 $180 = ((($35)) + 4|0);
 HEAPF32[$180>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$33>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$33+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$34>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$34+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$35+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$36>>2] = 1900;
 $181 = ((($36)) + 4|0);
 HEAP32[$181>>2] = 2;
 $182 = ((($36)) + 8|0);
 HEAP32[$182>>2] = 38;
 $183 = ((($36)) + 12|0);
 HEAP32[$183>>2] = 334;
 $184 = +HEAPF32[40566];
 $185 = (~~(($184)));
 $186 = (_GetScreenWidth()|0);
 $187 = (($186) + 420)|0;
 $188 = (($187) + ($185))|0;
 HEAP32[$37>>2] = $188;
 $189 = ((($37)) + 4|0);
 HEAP32[$189>>2] = 67;
 $190 = ((($37)) + 8|0);
 HEAP32[$190>>2] = 76;
 $191 = ((($37)) + 12|0);
 HEAP32[$191>>2] = 668;
 HEAPF32[$38>>2] = 0.0;
 $192 = ((($38)) + 4|0);
 HEAPF32[$192>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$36>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$36+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$37>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$37+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$38>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$38+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$39>>2] = 538;
 $193 = ((($39)) + 4|0);
 HEAP32[$193>>2] = 364;
 $194 = ((($39)) + 8|0);
 HEAP32[$194>>2] = 32;
 $195 = ((($39)) + 12|0);
 HEAP32[$195>>2] = 349;
 $196 = +HEAPF32[40566];
 $197 = (~~(($196)));
 $198 = (_GetScreenWidth()|0);
 $199 = (($198) + 560)|0;
 $200 = (($199) + ($197))|0;
 HEAP32[$40>>2] = $200;
 $201 = ((($40)) + 4|0);
 HEAP32[$201>>2] = 67;
 $202 = ((($40)) + 8|0);
 HEAP32[$202>>2] = 64;
 $203 = ((($40)) + 12|0);
 HEAP32[$203>>2] = 698;
 HEAPF32[$41>>2] = 0.0;
 $204 = ((($41)) + 4|0);
 HEAPF32[$204>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$39>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$39+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$40>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$40+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$41>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$41+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$42>>2] = 2013;
 $205 = ((($42)) + 4|0);
 HEAP32[$205>>2] = 2;
 $206 = ((($42)) + 8|0);
 HEAP32[$206>>2] = 31;
 $207 = ((($42)) + 12|0);
 HEAP32[$207>>2] = 334;
 $208 = +HEAPF32[40566];
 $209 = (~~(($208)));
 $210 = (_GetScreenWidth()|0);
 $211 = (($210) + 700)|0;
 $212 = (($211) + ($209))|0;
 HEAP32[$43>>2] = $212;
 $213 = ((($43)) + 4|0);
 HEAP32[$213>>2] = 67;
 $214 = ((($43)) + 8|0);
 HEAP32[$214>>2] = 62;
 $215 = ((($43)) + 12|0);
 HEAP32[$215>>2] = 668;
 HEAPF32[$44>>2] = 0.0;
 $216 = ((($44)) + 4|0);
 HEAPF32[$216>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$42>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$42+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$43>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$43+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$44>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$44+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$45>>2] = 633;
 $217 = ((($45)) + 4|0);
 HEAP32[$217>>2] = 364;
 $218 = ((($45)) + 8|0);
 HEAP32[$218>>2] = 25;
 $219 = ((($45)) + 12|0);
 HEAP32[$219>>2] = 349;
 $220 = +HEAPF32[40566];
 $221 = (~~(($220)));
 $222 = (_GetScreenWidth()|0);
 $223 = (($222) + 840)|0;
 $224 = (($223) + ($221))|0;
 HEAP32[$46>>2] = $224;
 $225 = ((($46)) + 4|0);
 HEAP32[$225>>2] = 67;
 $226 = ((($46)) + 8|0);
 HEAP32[$226>>2] = 50;
 $227 = ((($46)) + 12|0);
 HEAP32[$227>>2] = 698;
 HEAPF32[$47>>2] = 0.0;
 $228 = ((($47)) + 4|0);
 HEAPF32[$228>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$45>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$45+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$45+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$46>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$46+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$46+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$47>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$47+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$48>>2] = 1930;
 $229 = ((($48)) + 4|0);
 HEAP32[$229>>2] = 338;
 $230 = ((($48)) + 8|0);
 HEAP32[$230>>2] = 32;
 $231 = ((($48)) + 12|0);
 HEAP32[$231>>2] = 331;
 $232 = +HEAPF32[40566];
 $233 = (~~(($232)));
 $234 = (_GetScreenWidth()|0);
 $235 = (($234) + 980)|0;
 $236 = (($235) + ($233))|0;
 HEAP32[$49>>2] = $236;
 $237 = ((($49)) + 4|0);
 HEAP32[$237>>2] = 67;
 $238 = ((($49)) + 8|0);
 HEAP32[$238>>2] = 64;
 $239 = ((($49)) + 12|0);
 HEAP32[$239>>2] = 662;
 HEAPF32[$50>>2] = 0.0;
 $240 = ((($50)) + 4|0);
 HEAPF32[$240>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$48>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$48+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$49>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$49+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$49+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$50>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$50+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$51>>2] = 1998;
 $241 = ((($51)) + 4|0);
 HEAP32[$241>>2] = 338;
 $242 = ((($51)) + 8|0);
 HEAP32[$242>>2] = 28;
 $243 = ((($51)) + 12|0);
 HEAP32[$243>>2] = 335;
 $244 = +HEAPF32[40566];
 $245 = (~~(($244)));
 $246 = (_GetScreenWidth()|0);
 $247 = (($245) + ($246))|0;
 HEAP32[$52>>2] = $247;
 $248 = ((($52)) + 4|0);
 HEAP32[$248>>2] = 67;
 $249 = ((($52)) + 8|0);
 HEAP32[$249>>2] = 56;
 $250 = ((($52)) + 12|0);
 HEAP32[$250>>2] = 670;
 HEAPF32[$53>>2] = 0.0;
 $251 = ((($53)) + 4|0);
 HEAPF32[$251>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$51>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$51+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$52>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$52+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$52+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$52+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$53>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$53+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$54>>2] = 1146;
 $252 = ((($54)) + 4|0);
 HEAP32[$252>>2] = 160;
 $253 = ((($54)) + 8|0);
 HEAP32[$253>>2] = 640;
 $254 = ((($54)) + 12|0);
 HEAP32[$254>>2] = 77;
 $255 = +HEAPF32[40566];
 $256 = (~~(($255)));
 $257 = (_GetScreenWidth()|0);
 $258 = (($256) + ($257))|0;
 HEAP32[$55>>2] = $258;
 $259 = ((($55)) + 4|0);
 HEAP32[$259>>2] = 509;
 $260 = ((($55)) + 8|0);
 HEAP32[$260>>2] = 1280;
 $261 = ((($55)) + 12|0);
 HEAP32[$261>>2] = 154;
 HEAPF32[$56>>2] = 0.0;
 $262 = ((($56)) + 4|0);
 HEAPF32[$262>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$54>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$54+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$54+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$55>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$55+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$55+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$55+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$56>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$56+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162484>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162484+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162484+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162484+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$57>>2] = 1146;
 $263 = ((($57)) + 4|0);
 HEAP32[$263>>2] = 237;
 $264 = ((($57)) + 8|0);
 HEAP32[$264>>2] = 640;
 $265 = ((($57)) + 12|0);
 HEAP32[$265>>2] = -77;
 $266 = +HEAPF32[40566];
 $267 = (~~(($266)));
 $268 = (_GetScreenWidth()|0);
 $269 = (($267) + ($268))|0;
 HEAP32[$58>>2] = $269;
 $270 = ((($58)) + 4|0);
 HEAP32[$270>>2] = 19;
 $271 = ((($58)) + 8|0);
 HEAP32[$271>>2] = 1280;
 $272 = ((($58)) + 12|0);
 HEAP32[$272>>2] = 154;
 HEAPF32[$59>>2] = 0.0;
 $273 = ((($59)) + 4|0);
 HEAPF32[$273>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$57>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$57+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$58>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$58+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$59>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$59+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162484>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162484+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162484+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162484+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 STACKTOP = sp;return;
}
function _DrawParallaxFront_65() {
 var $$byval_copy93 = 0, $$byval_copy94 = 0, $$byval_copy95 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $atlas02$byval_copy92 = 0, $color01$32$byval_copy96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(880|0);
 $color01$32$byval_copy96 = sp + 864|0;
 $$byval_copy95 = sp + 856|0;
 $$byval_copy94 = sp + 840|0;
 $$byval_copy93 = sp + 824|0;
 $atlas02$byval_copy92 = sp + 800|0;
 $0 = sp + 784|0;
 $1 = sp + 768|0;
 $2 = sp + 760|0;
 $3 = sp + 744|0;
 $4 = sp + 728|0;
 $5 = sp + 720|0;
 $6 = sp + 704|0;
 $7 = sp + 688|0;
 $8 = sp + 680|0;
 $9 = sp + 664|0;
 $10 = sp + 648|0;
 $11 = sp + 640|0;
 $12 = sp + 624|0;
 $13 = sp + 608|0;
 $14 = sp + 600|0;
 $15 = sp + 584|0;
 $16 = sp + 568|0;
 $17 = sp + 560|0;
 $18 = sp + 544|0;
 $19 = sp + 528|0;
 $20 = sp + 520|0;
 $21 = sp + 504|0;
 $22 = sp + 488|0;
 $23 = sp + 480|0;
 $24 = sp + 464|0;
 $25 = sp + 448|0;
 $26 = sp + 440|0;
 $27 = sp + 424|0;
 $28 = sp + 408|0;
 $29 = sp + 400|0;
 $30 = sp + 384|0;
 $31 = sp + 368|0;
 $32 = sp + 360|0;
 $33 = sp + 344|0;
 $34 = sp + 328|0;
 $35 = sp + 320|0;
 $36 = sp + 304|0;
 $37 = sp + 288|0;
 $38 = sp + 280|0;
 $39 = sp + 264|0;
 $40 = sp + 248|0;
 $41 = sp + 240|0;
 $42 = sp + 224|0;
 $43 = sp + 208|0;
 $44 = sp + 200|0;
 $45 = sp + 184|0;
 $46 = sp + 168|0;
 $47 = sp + 160|0;
 $48 = sp + 144|0;
 $49 = sp + 128|0;
 $50 = sp + 120|0;
 $51 = sp + 104|0;
 $52 = sp + 88|0;
 $53 = sp + 80|0;
 $54 = sp + 64|0;
 $55 = sp + 48|0;
 $56 = sp + 40|0;
 $57 = sp + 24|0;
 $58 = sp + 8|0;
 $59 = sp;
 HEAP32[$0>>2] = 1833;
 $60 = ((($0)) + 4|0);
 HEAP32[$60>>2] = 353;
 $61 = ((($0)) + 8|0);
 HEAP32[$61>>2] = 28;
 $62 = ((($0)) + 12|0);
 HEAP32[$62>>2] = 335;
 $63 = +HEAPF32[40565];
 $64 = (~~(($63)));
 $65 = HEAP32[40604]|0;
 $66 = (($64) + ($65))|0;
 HEAP32[$1>>2] = $66;
 $67 = ((($1)) + 4|0);
 HEAP32[$67>>2] = 60;
 $68 = ((($1)) + 8|0);
 HEAP32[$68>>2] = 56;
 $69 = ((($1)) + 12|0);
 HEAP32[$69>>2] = 670;
 HEAPF32[$2>>2] = 0.0;
 $70 = ((($2)) + 4|0);
 HEAPF32[$70>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$0+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$2+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$3>>2] = 690;
 $71 = ((($3)) + 4|0);
 HEAP32[$71>>2] = 315;
 $72 = ((($3)) + 8|0);
 HEAP32[$72>>2] = 26;
 $73 = ((($3)) + 12|0);
 HEAP32[$73>>2] = 332;
 $74 = +HEAPF32[40565];
 $75 = (~~(($74)));
 $76 = HEAP32[40604]|0;
 $77 = (($76) + 140)|0;
 $78 = (($77) + ($75))|0;
 HEAP32[$4>>2] = $78;
 $79 = ((($4)) + 4|0);
 HEAP32[$79>>2] = 60;
 $80 = ((($4)) + 8|0);
 HEAP32[$80>>2] = 52;
 $81 = ((($4)) + 12|0);
 HEAP32[$81>>2] = 664;
 HEAPF32[$5>>2] = 0.0;
 $82 = ((($5)) + 4|0);
 HEAPF32[$82>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$3+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$4+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$5+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$6>>2] = 2028;
 $83 = ((($6)) + 4|0);
 HEAP32[$83>>2] = 338;
 $84 = ((($6)) + 8|0);
 HEAP32[$84>>2] = 15;
 $85 = ((($6)) + 12|0);
 HEAP32[$85>>2] = 329;
 $86 = +HEAPF32[40565];
 $87 = (~~(($86)));
 $88 = HEAP32[40604]|0;
 $89 = (($88) + 280)|0;
 $90 = (($89) + ($87))|0;
 HEAP32[$7>>2] = $90;
 $91 = ((($7)) + 4|0);
 HEAP32[$91>>2] = 55;
 $92 = ((($7)) + 8|0);
 HEAP32[$92>>2] = 52;
 $93 = ((($7)) + 12|0);
 HEAP32[$93>>2] = 664;
 HEAPF32[$8>>2] = 0.0;
 $94 = ((($8)) + 4|0);
 HEAPF32[$94>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$6+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$7+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$8+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$9>>2] = 1860;
 $95 = ((($9)) + 4|0);
 HEAP32[$95>>2] = 2;
 $96 = ((($9)) + 8|0);
 HEAP32[$96>>2] = 38;
 $97 = ((($9)) + 12|0);
 HEAP32[$97>>2] = 334;
 $98 = +HEAPF32[40565];
 $99 = (~~(($98)));
 $100 = HEAP32[40604]|0;
 $101 = (($100) + 420)|0;
 $102 = (($101) + ($99))|0;
 HEAP32[$10>>2] = $102;
 $103 = ((($10)) + 4|0);
 HEAP32[$103>>2] = 60;
 $104 = ((($10)) + 8|0);
 HEAP32[$104>>2] = 76;
 $105 = ((($10)) + 12|0);
 HEAP32[$105>>2] = 668;
 HEAPF32[$11>>2] = 0.0;
 $106 = ((($11)) + 4|0);
 HEAPF32[$106>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$9+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$10+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$11+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$12>>2] = 504;
 $107 = ((($12)) + 4|0);
 HEAP32[$107>>2] = 364;
 $108 = ((($12)) + 8|0);
 HEAP32[$108>>2] = 32;
 $109 = ((($12)) + 12|0);
 HEAP32[$109>>2] = 349;
 $110 = +HEAPF32[40565];
 $111 = (~~(($110)));
 $112 = HEAP32[40604]|0;
 $113 = (($112) + 560)|0;
 $114 = (($113) + ($111))|0;
 HEAP32[$13>>2] = $114;
 $115 = ((($13)) + 4|0);
 HEAP32[$115>>2] = 60;
 $116 = ((($13)) + 8|0);
 HEAP32[$116>>2] = 64;
 $117 = ((($13)) + 12|0);
 HEAP32[$117>>2] = 698;
 HEAPF32[$14>>2] = 0.0;
 $118 = ((($14)) + 4|0);
 HEAPF32[$118>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$12+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$13+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$14+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$15>>2] = 1980;
 $119 = ((($15)) + 4|0);
 HEAP32[$119>>2] = 2;
 $120 = ((($15)) + 8|0);
 HEAP32[$120>>2] = 31;
 $121 = ((($15)) + 12|0);
 HEAP32[$121>>2] = 334;
 $122 = +HEAPF32[40565];
 $123 = (~~(($122)));
 $124 = HEAP32[40604]|0;
 $125 = (($124) + 700)|0;
 $126 = (($125) + ($123))|0;
 HEAP32[$16>>2] = $126;
 $127 = ((($16)) + 4|0);
 HEAP32[$127>>2] = 55;
 $128 = ((($16)) + 8|0);
 HEAP32[$128>>2] = 62;
 $129 = ((($16)) + 12|0);
 HEAP32[$129>>2] = 668;
 HEAPF32[$17>>2] = 0.0;
 $130 = ((($17)) + 4|0);
 HEAPF32[$130>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$15+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$16+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$17+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$18>>2] = 606;
 $131 = ((($18)) + 4|0);
 HEAP32[$131>>2] = 364;
 $132 = ((($18)) + 8|0);
 HEAP32[$132>>2] = 25;
 $133 = ((($18)) + 12|0);
 HEAP32[$133>>2] = 349;
 $134 = +HEAPF32[40565];
 $135 = (~~(($134)));
 $136 = HEAP32[40604]|0;
 $137 = (($136) + 840)|0;
 $138 = (($137) + ($135))|0;
 HEAP32[$19>>2] = $138;
 $139 = ((($19)) + 4|0);
 HEAP32[$139>>2] = 60;
 $140 = ((($19)) + 8|0);
 HEAP32[$140>>2] = 50;
 $141 = ((($19)) + 12|0);
 HEAP32[$141>>2] = 698;
 HEAPF32[$20>>2] = 0.0;
 $142 = ((($20)) + 4|0);
 HEAPF32[$142>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$18+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$19+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$20+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$21>>2] = 1896;
 $143 = ((($21)) + 4|0);
 HEAP32[$143>>2] = 338;
 $144 = ((($21)) + 8|0);
 HEAP32[$144>>2] = 32;
 $145 = ((($21)) + 12|0);
 HEAP32[$145>>2] = 331;
 $146 = +HEAPF32[40565];
 $147 = (~~(($146)));
 $148 = HEAP32[40604]|0;
 $149 = (($148) + 980)|0;
 $150 = (($149) + ($147))|0;
 HEAP32[$22>>2] = $150;
 $151 = ((($22)) + 4|0);
 HEAP32[$151>>2] = 60;
 $152 = ((($22)) + 8|0);
 HEAP32[$152>>2] = 64;
 $153 = ((($22)) + 12|0);
 HEAP32[$153>>2] = 662;
 HEAPF32[$23>>2] = 0.0;
 $154 = ((($23)) + 4|0);
 HEAPF32[$154>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$21+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$22+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$23+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$24>>2] = 1146;
 $155 = ((($24)) + 4|0);
 HEAP32[$155>>2] = 81;
 $156 = ((($24)) + 8|0);
 HEAP32[$156>>2] = 640;
 $157 = ((($24)) + 12|0);
 HEAP32[$157>>2] = 77;
 $158 = +HEAPF32[40565];
 $159 = (~~(($158)));
 HEAP32[$25>>2] = $159;
 $160 = ((($25)) + 4|0);
 HEAP32[$160>>2] = 559;
 $161 = ((($25)) + 8|0);
 HEAP32[$161>>2] = 1280;
 $162 = ((($25)) + 12|0);
 HEAP32[$162>>2] = 154;
 HEAPF32[$26>>2] = 0.0;
 $163 = ((($26)) + 4|0);
 HEAPF32[$163>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$24+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$25+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$26+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162484>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162484+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162484+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162484+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$27>>2] = 1146;
 $164 = ((($27)) + 4|0);
 HEAP32[$164>>2] = 158;
 $165 = ((($27)) + 8|0);
 HEAP32[$165>>2] = 640;
 $166 = ((($27)) + 12|0);
 HEAP32[$166>>2] = -77;
 $167 = +HEAPF32[40565];
 $168 = (~~(($167)));
 HEAP32[$28>>2] = $168;
 $169 = ((($28)) + 4|0);
 HEAP32[$169>>2] = -33;
 $170 = ((($28)) + 8|0);
 HEAP32[$170>>2] = 1280;
 $171 = ((($28)) + 12|0);
 HEAP32[$171>>2] = 154;
 HEAPF32[$29>>2] = 0.0;
 $172 = ((($29)) + 4|0);
 HEAPF32[$172>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$27>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$27+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$28+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$29>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$29+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162484>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162484+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162484+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162484+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$30>>2] = 1833;
 $173 = ((($30)) + 4|0);
 HEAP32[$173>>2] = 353;
 $174 = ((($30)) + 8|0);
 HEAP32[$174>>2] = 28;
 $175 = ((($30)) + 12|0);
 HEAP32[$175>>2] = 335;
 $176 = +HEAPF32[40565];
 $177 = (~~(($176)));
 $178 = HEAP32[40604]|0;
 $179 = (($177) + ($178))|0;
 $180 = (_GetScreenWidth()|0);
 $181 = (($179) + ($180))|0;
 HEAP32[$31>>2] = $181;
 $182 = ((($31)) + 4|0);
 HEAP32[$182>>2] = 60;
 $183 = ((($31)) + 8|0);
 HEAP32[$183>>2] = 56;
 $184 = ((($31)) + 12|0);
 HEAP32[$184>>2] = 670;
 HEAPF32[$32>>2] = 0.0;
 $185 = ((($32)) + 4|0);
 HEAPF32[$185>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$30>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$30+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$30+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$31>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$31+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$32+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$33>>2] = 690;
 $186 = ((($33)) + 4|0);
 HEAP32[$186>>2] = 315;
 $187 = ((($33)) + 8|0);
 HEAP32[$187>>2] = 26;
 $188 = ((($33)) + 12|0);
 HEAP32[$188>>2] = 332;
 $189 = +HEAPF32[40565];
 $190 = (~~(($189)));
 $191 = HEAP32[40604]|0;
 $192 = (_GetScreenWidth()|0);
 $193 = (($191) + 140)|0;
 $194 = (($193) + ($190))|0;
 $195 = (($194) + ($192))|0;
 HEAP32[$34>>2] = $195;
 $196 = ((($34)) + 4|0);
 HEAP32[$196>>2] = 60;
 $197 = ((($34)) + 8|0);
 HEAP32[$197>>2] = 52;
 $198 = ((($34)) + 12|0);
 HEAP32[$198>>2] = 664;
 HEAPF32[$35>>2] = 0.0;
 $199 = ((($35)) + 4|0);
 HEAPF32[$199>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$33>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$33+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$34>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$34+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$35+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$36>>2] = 2028;
 $200 = ((($36)) + 4|0);
 HEAP32[$200>>2] = 338;
 $201 = ((($36)) + 8|0);
 HEAP32[$201>>2] = 15;
 $202 = ((($36)) + 12|0);
 HEAP32[$202>>2] = 329;
 $203 = +HEAPF32[40565];
 $204 = (~~(($203)));
 $205 = HEAP32[40604]|0;
 $206 = (_GetScreenWidth()|0);
 $207 = (($205) + 280)|0;
 $208 = (($207) + ($204))|0;
 $209 = (($208) + ($206))|0;
 HEAP32[$37>>2] = $209;
 $210 = ((($37)) + 4|0);
 HEAP32[$210>>2] = 55;
 $211 = ((($37)) + 8|0);
 HEAP32[$211>>2] = 30;
 $212 = ((($37)) + 12|0);
 HEAP32[$212>>2] = 658;
 HEAPF32[$38>>2] = 0.0;
 $213 = ((($38)) + 4|0);
 HEAPF32[$213>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$36>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$36+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$37>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$37+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$38>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$38+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$39>>2] = 1860;
 $214 = ((($39)) + 4|0);
 HEAP32[$214>>2] = 2;
 $215 = ((($39)) + 8|0);
 HEAP32[$215>>2] = 38;
 $216 = ((($39)) + 12|0);
 HEAP32[$216>>2] = 334;
 $217 = +HEAPF32[40565];
 $218 = (~~(($217)));
 $219 = HEAP32[40604]|0;
 $220 = (_GetScreenWidth()|0);
 $221 = (($219) + 420)|0;
 $222 = (($221) + ($218))|0;
 $223 = (($222) + ($220))|0;
 HEAP32[$40>>2] = $223;
 $224 = ((($40)) + 4|0);
 HEAP32[$224>>2] = 60;
 $225 = ((($40)) + 8|0);
 HEAP32[$225>>2] = 76;
 $226 = ((($40)) + 12|0);
 HEAP32[$226>>2] = 668;
 HEAPF32[$41>>2] = 0.0;
 $227 = ((($41)) + 4|0);
 HEAPF32[$227>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$39>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$39+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$40>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$40+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$41>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$41+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$42>>2] = 504;
 $228 = ((($42)) + 4|0);
 HEAP32[$228>>2] = 364;
 $229 = ((($42)) + 8|0);
 HEAP32[$229>>2] = 32;
 $230 = ((($42)) + 12|0);
 HEAP32[$230>>2] = 349;
 $231 = +HEAPF32[40565];
 $232 = (~~(($231)));
 $233 = HEAP32[40604]|0;
 $234 = (_GetScreenWidth()|0);
 $235 = (($233) + 560)|0;
 $236 = (($235) + ($232))|0;
 $237 = (($236) + ($234))|0;
 HEAP32[$43>>2] = $237;
 $238 = ((($43)) + 4|0);
 HEAP32[$238>>2] = 60;
 $239 = ((($43)) + 8|0);
 HEAP32[$239>>2] = 64;
 $240 = ((($43)) + 12|0);
 HEAP32[$240>>2] = 698;
 HEAPF32[$44>>2] = 0.0;
 $241 = ((($44)) + 4|0);
 HEAPF32[$241>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$42>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$42+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$43>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$43+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$44>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$44+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$45>>2] = 1980;
 $242 = ((($45)) + 4|0);
 HEAP32[$242>>2] = 2;
 $243 = ((($45)) + 8|0);
 HEAP32[$243>>2] = 31;
 $244 = ((($45)) + 12|0);
 HEAP32[$244>>2] = 334;
 $245 = +HEAPF32[40565];
 $246 = (~~(($245)));
 $247 = HEAP32[40604]|0;
 $248 = (_GetScreenWidth()|0);
 $249 = (($247) + 700)|0;
 $250 = (($249) + ($246))|0;
 $251 = (($250) + ($248))|0;
 HEAP32[$46>>2] = $251;
 $252 = ((($46)) + 4|0);
 HEAP32[$252>>2] = 55;
 $253 = ((($46)) + 8|0);
 HEAP32[$253>>2] = 62;
 $254 = ((($46)) + 12|0);
 HEAP32[$254>>2] = 668;
 HEAPF32[$47>>2] = 0.0;
 $255 = ((($47)) + 4|0);
 HEAPF32[$255>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$45>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$45+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$45+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$46>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$46+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$46+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$47>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$47+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$48>>2] = 606;
 $256 = ((($48)) + 4|0);
 HEAP32[$256>>2] = 364;
 $257 = ((($48)) + 8|0);
 HEAP32[$257>>2] = 25;
 $258 = ((($48)) + 12|0);
 HEAP32[$258>>2] = 349;
 $259 = +HEAPF32[40565];
 $260 = (~~(($259)));
 $261 = HEAP32[40604]|0;
 $262 = (_GetScreenWidth()|0);
 $263 = (($261) + 840)|0;
 $264 = (($263) + ($260))|0;
 $265 = (($264) + ($262))|0;
 HEAP32[$49>>2] = $265;
 $266 = ((($49)) + 4|0);
 HEAP32[$266>>2] = 60;
 $267 = ((($49)) + 8|0);
 HEAP32[$267>>2] = 50;
 $268 = ((($49)) + 12|0);
 HEAP32[$268>>2] = 698;
 HEAPF32[$50>>2] = 0.0;
 $269 = ((($50)) + 4|0);
 HEAPF32[$269>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$48>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$48+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$49>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$49+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$49+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$50>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$50+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$51>>2] = 1896;
 $270 = ((($51)) + 4|0);
 HEAP32[$270>>2] = 338;
 $271 = ((($51)) + 8|0);
 HEAP32[$271>>2] = 32;
 $272 = ((($51)) + 12|0);
 HEAP32[$272>>2] = 331;
 $273 = +HEAPF32[40565];
 $274 = (~~(($273)));
 $275 = HEAP32[40604]|0;
 $276 = (_GetScreenWidth()|0);
 $277 = (($275) + 980)|0;
 $278 = (($277) + ($274))|0;
 $279 = (($278) + ($276))|0;
 HEAP32[$52>>2] = $279;
 $280 = ((($52)) + 4|0);
 HEAP32[$280>>2] = 60;
 $281 = ((($52)) + 8|0);
 HEAP32[$281>>2] = 64;
 $282 = ((($52)) + 12|0);
 HEAP32[$282>>2] = 662;
 HEAPF32[$53>>2] = 0.0;
 $283 = ((($53)) + 4|0);
 HEAPF32[$283>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$51>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$51+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$52>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$52+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$52+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$52+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$53>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$53+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162488>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162488+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162488+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162488+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$54>>2] = 1146;
 $284 = ((($54)) + 4|0);
 HEAP32[$284>>2] = 81;
 $285 = ((($54)) + 8|0);
 HEAP32[$285>>2] = 640;
 $286 = ((($54)) + 12|0);
 HEAP32[$286>>2] = 77;
 $287 = +HEAPF32[40565];
 $288 = (~~(($287)));
 $289 = (_GetScreenWidth()|0);
 $290 = (($288) + ($289))|0;
 HEAP32[$55>>2] = $290;
 $291 = ((($55)) + 4|0);
 HEAP32[$291>>2] = 559;
 $292 = ((($55)) + 8|0);
 HEAP32[$292>>2] = 1280;
 $293 = ((($55)) + 12|0);
 HEAP32[$293>>2] = 154;
 HEAPF32[$56>>2] = 0.0;
 $294 = ((($56)) + 4|0);
 HEAPF32[$294>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$54>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$54+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$54+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$55>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$55+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$55+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$55+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$56>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$56+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162484>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162484+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162484+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162484+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 HEAP32[$57>>2] = 1146;
 $295 = ((($57)) + 4|0);
 HEAP32[$295>>2] = 158;
 $296 = ((($57)) + 8|0);
 HEAP32[$296>>2] = 640;
 $297 = ((($57)) + 12|0);
 HEAP32[$297>>2] = -77;
 $298 = +HEAPF32[40565];
 $299 = (~~(($298)));
 $300 = (_GetScreenWidth()|0);
 $301 = (($299) + ($300))|0;
 HEAP32[$58>>2] = $301;
 $302 = ((($58)) + 4|0);
 HEAP32[$302>>2] = -33;
 $303 = ((($58)) + 8|0);
 HEAP32[$303>>2] = 1280;
 $304 = ((($58)) + 12|0);
 HEAP32[$304>>2] = 154;
 HEAPF32[$59>>2] = 0.0;
 $305 = ((($59)) + 4|0);
 HEAPF32[$305>>2] = 0.0;
 ;HEAP32[$atlas02$byval_copy92>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas02$byval_copy92+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas02$byval_copy92+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas02$byval_copy92+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas02$byval_copy92+16>>2]=HEAP32[26404+16>>2]|0;
 ;HEAP32[$$byval_copy93>>2]=HEAP32[$57>>2]|0;HEAP32[$$byval_copy93+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$$byval_copy93+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$$byval_copy93+12>>2]=HEAP32[$57+12>>2]|0;
 ;HEAP32[$$byval_copy94>>2]=HEAP32[$58>>2]|0;HEAP32[$$byval_copy94+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$$byval_copy94+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$$byval_copy94+12>>2]=HEAP32[$58+12>>2]|0;
 ;HEAP32[$$byval_copy95>>2]=HEAP32[$59>>2]|0;HEAP32[$$byval_copy95+4>>2]=HEAP32[$59+4>>2]|0;
 ;HEAP8[$color01$32$byval_copy96>>0]=HEAP8[162484>>0]|0;HEAP8[$color01$32$byval_copy96+1>>0]=HEAP8[162484+1>>0]|0;HEAP8[$color01$32$byval_copy96+2>>0]=HEAP8[162484+2>>0]|0;HEAP8[$color01$32$byval_copy96+3>>0]=HEAP8[162484+3>>0]|0;
 _DrawTexturePro($atlas02$byval_copy92,$$byval_copy93,$$byval_copy94,$$byval_copy95,0.0,$color01$32$byval_copy96);
 STACKTOP = sp;return;
}
function _UnloadGameplayScreen() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _FinishGameplayScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[40552]|0;
 return ($0|0);
}
function _InitEndingScreen() {
 var $$06466 = 0, $$sink = 0, $$sink1 = 0.0, $$sink5 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$011$0$$sroa_idx = 0, $$sroa$014$0$$sroa_idx = 0, $$sroa$212$0$$sroa_idx13 = 0, $$sroa$215$0$$sroa_idx16 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0;
 var $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[83708] = -10;
 HEAP32[83709] = 0;
 HEAP32[83710] = 15;
 HEAP32[83711] = 0;
 HEAP32[83712] = 0;
 $0 = HEAP32[6804]|0;
 $1 = HEAP32[6799]|0;
 $2 = (($1|0) / 4)&-1;
 $3 = (($2) + ($0))|0;
 HEAP32[83713] = $3;
 HEAP32[83714] = $2;
 $4 = (_GetScreenWidth()|0);
 $5 = (+($4|0));
 $6 = $5 * 0.87099999999999999;
 $7 = (~~(($6)));
 $8 = (_GetScreenHeight()|0);
 $9 = (+($8|0));
 $10 = $9 * 0.096000000000000001;
 $11 = (~~(($10)));
 HEAP32[83715] = $7;
 HEAP32[(334864)>>2] = $11;
 HEAP32[(334868)>>2] = 123;
 HEAP32[(334872)>>2] = 123;
 HEAP32[83719] = -1;
 HEAP32[83720] = -1;
 HEAP32[83721] = -1;
 HEAP32[83722] = -1;
 HEAP32[83723] = 0;
 HEAP32[83724] = 0;
 HEAP32[83725] = 0;
 HEAP32[83726] = 0;
 HEAP8[340332] = -80;
 HEAP8[(340333)>>0] = -89;
 HEAP8[(340334)>>0] = -105;
 HEAP8[(340335)>>0] = -1;
 $$06466 = 0;
 while(1) {
  $13 = (((334908 + (($$06466*36)|0)|0)) + 32|0);
  HEAP32[$13>>2] = 0;
  $14 = (_GetRandomValue(-20,20)|0);
  $15 = (+($14|0));
  $16 = (_GetRandomValue(-20,20)|0);
  $17 = (+($16|0));
  $$sroa$014$0$$sroa_idx = (334908 + (($$06466*36)|0)|0);
  HEAPF32[$$sroa$014$0$$sroa_idx>>2] = $15;
  $$sroa$215$0$$sroa_idx16 = (((334908 + (($$06466*36)|0)|0)) + 4|0);
  HEAPF32[$$sroa$215$0$$sroa_idx16>>2] = $17;
  $18 = (_GetRandomValue(-500,500)|0);
  $19 = (+($18|0));
  $20 = $19 / 100.0;
  $21 = (_GetRandomValue(-500,500)|0);
  $22 = (+($21|0));
  $23 = $22 / 100.0;
  $$sroa$011$0$$sroa_idx = (((334908 + (($$06466*36)|0)|0)) + 8|0);
  HEAPF32[$$sroa$011$0$$sroa_idx>>2] = $20;
  $$sroa$212$0$$sroa_idx13 = (((334908 + (($$06466*36)|0)|0)) + 12|0);
  HEAPF32[$$sroa$212$0$$sroa_idx13>>2] = $23;
  $24 = (_GetRandomValue(3,10)|0);
  $25 = (+($24|0));
  $26 = $25 / 5.0;
  $27 = (((334908 + (($$06466*36)|0)|0)) + 20|0);
  HEAPF32[$27>>2] = $26;
  $28 = (_GetRandomValue(0,360)|0);
  $29 = (+($28|0));
  $30 = (((334908 + (($$06466*36)|0)|0)) + 16|0);
  HEAPF32[$30>>2] = $29;
  $$sroa$0$0$$sroa_idx = (((334908 + (($$06466*36)|0)|0)) + 24|0);
  $31 = (((334908 + (($$06466*36)|0)|0)) + 28|0);
  HEAP32[$$sroa$0$0$$sroa_idx>>2] = -1;
  HEAPF32[$31>>2] = 1.0;
  $32 = (($$06466) + 1)|0;
  $exitcond = ($32|0)==(20);
  if ($exitcond) {
   break;
  } else {
   $$06466 = $32;
  }
 }
 $12 = HEAP32[6803]|0;
 switch ($12|0) {
 case 0:  {
  ;HEAP8[340336>>0]=HEAP8[7738>>0]|0;HEAP8[340336+1>>0]=HEAP8[7738+1>>0]|0;HEAP8[340336+2>>0]=HEAP8[7738+2>>0]|0;HEAP8[340336+3>>0]=HEAP8[7738+3>>0]|0;HEAP8[340336+4>>0]=HEAP8[7738+4>>0]|0;HEAP8[340336+5>>0]=HEAP8[7738+5>>0]|0;HEAP8[340336+6>>0]=HEAP8[7738+6>>0]|0;
  $$sink = 225;$$sink1 = 225.0;
  label = 8;
  break;
 }
 case 1:  {
  ;HEAP8[340336>>0]=HEAP8[7745>>0]|0;HEAP8[340336+1>>0]=HEAP8[7745+1>>0]|0;HEAP8[340336+2>>0]=HEAP8[7745+2>>0]|0;HEAP8[340336+3>>0]=HEAP8[7745+3>>0]|0;HEAP8[340336+4>>0]=HEAP8[7745+4>>0]|0;HEAP8[340336+5>>0]=HEAP8[7745+5>>0]|0;HEAP8[340336+6>>0]=HEAP8[7745+6>>0]|0;
  $$sink = 135;$$sink1 = 135.0;
  label = 8;
  break;
 }
 case 2:  {
  ;HEAP8[340336>>0]=HEAP8[7752>>0]|0;HEAP8[340336+1>>0]=HEAP8[7752+1>>0]|0;HEAP8[340336+2>>0]=HEAP8[7752+2>>0]|0;HEAP8[340336+3>>0]=HEAP8[7752+3>>0]|0;HEAP8[340336+4>>0]=HEAP8[7752+4>>0]|0;HEAP8[340336+5>>0]=HEAP8[7752+5>>0]|0;HEAP8[340336+6>>0]=HEAP8[7752+6>>0]|0;
  $$sink = 45;$$sink1 = 45.0;
  label = 8;
  break;
 }
 case 3:  {
  ;HEAP8[340336>>0]=HEAP8[7759>>0]|0;HEAP8[340336+1>>0]=HEAP8[7759+1>>0]|0;HEAP8[340336+2>>0]=HEAP8[7759+2>>0]|0;HEAP8[340336+3>>0]=HEAP8[7759+3>>0]|0;HEAP8[340336+4>>0]=HEAP8[7759+4>>0]|0;HEAP8[340336+5>>0]=HEAP8[7759+5>>0]|0;HEAP8[340336+6>>0]=HEAP8[7759+6>>0]|0;
  $$sink = 315;$$sink1 = 315.0;
  label = 8;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 8) {
  HEAPF32[83907] = $$sink1;
  HEAP32[83908] = $$sink;
 }
 $33 = HEAP32[6802]|0;
 switch ($33|0) {
 case 0:  {
  ;HEAP8[340368>>0]=HEAP8[7738>>0]|0;HEAP8[340368+1>>0]=HEAP8[7738+1>>0]|0;HEAP8[340368+2>>0]=HEAP8[7738+2>>0]|0;HEAP8[340368+3>>0]=HEAP8[7738+3>>0]|0;HEAP8[340368+4>>0]=HEAP8[7738+4>>0]|0;HEAP8[340368+5>>0]=HEAP8[7738+5>>0]|0;HEAP8[340368+6>>0]=HEAP8[7738+6>>0]|0;
  $$sink5 = 225;
  break;
 }
 case 1:  {
  ;HEAP8[340368>>0]=HEAP8[7745>>0]|0;HEAP8[340368+1>>0]=HEAP8[7745+1>>0]|0;HEAP8[340368+2>>0]=HEAP8[7745+2>>0]|0;HEAP8[340368+3>>0]=HEAP8[7745+3>>0]|0;HEAP8[340368+4>>0]=HEAP8[7745+4>>0]|0;HEAP8[340368+5>>0]=HEAP8[7745+5>>0]|0;HEAP8[340368+6>>0]=HEAP8[7745+6>>0]|0;
  $$sink5 = 135;
  break;
 }
 case 2:  {
  ;HEAP8[340368>>0]=HEAP8[7752>>0]|0;HEAP8[340368+1>>0]=HEAP8[7752+1>>0]|0;HEAP8[340368+2>>0]=HEAP8[7752+2>>0]|0;HEAP8[340368+3>>0]=HEAP8[7752+3>>0]|0;HEAP8[340368+4>>0]=HEAP8[7752+4>>0]|0;HEAP8[340368+5>>0]=HEAP8[7752+5>>0]|0;HEAP8[340368+6>>0]=HEAP8[7752+6>>0]|0;
  $$sink5 = 45;
  break;
 }
 case 3:  {
  ;HEAP8[340368>>0]=HEAP8[7759>>0]|0;HEAP8[340368+1>>0]=HEAP8[7759+1>>0]|0;HEAP8[340368+2>>0]=HEAP8[7759+2>>0]|0;HEAP8[340368+3>>0]=HEAP8[7759+3>>0]|0;HEAP8[340368+4>>0]=HEAP8[7759+4>>0]|0;HEAP8[340368+5>>0]=HEAP8[7759+5>>0]|0;HEAP8[340368+6>>0]=HEAP8[7759+6>>0]|0;
  $$sink5 = 315;
  break;
 }
 default: {
  _memset((335640|0),0,512)|0;
  return;
 }
 }
 $34 = HEAP32[83714]|0;
 $35 = ($34*360)|0;
 $36 = (($35) + ($$sink5))|0;
 $37 = (+($36|0));
 HEAPF32[83909] = $37;
 _memset((335640|0),0,512)|0;
 return;
}
function _UpdateEndingScreen() {
 var $$03944 = 0, $$04046 = 0, $$04145 = 0, $$043 = 0, $$byval_copy = 0, $$inv = 0, $$pr = 0, $$sroa$028$0$$sroa_idx = 0, $$sroa$229$0$$sroa_idx30 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0;
 var $exitcond = 0, $exitcond47 = 0, $exitcond48 = 0, $exitcond49 = 0, $or$cond = 0, $playButton$byval_copy = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $playButton$byval_copy = sp + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = HEAP32[83708]|0;
 $2 = (($1) + 1)|0;
 HEAP32[83708] = $2;
 $3 = HEAP32[83726]|0;
 L1: do {
  switch ($3|0) {
  case 0:  {
   $4 = ($2|0)>(9);
   if ($4) {
    HEAP32[83726] = 1;
    HEAP32[83708] = 0;
    $$043 = 0;
   } else {
    $$043 = 0;
   }
   break;
  }
  case 1:  {
   $5 = HEAP32[6799]|0;
   $6 = ($5|0)>(0);
   if ($6) {
    $7 = (+($2|0));
    $8 = (+($5|0));
    $9 = (+_LinearEaseIn_85($7,0.0,$8));
    $10 = (~~(($9)));
    HEAP32[83724] = $10;
    $11 = HEAP32[83708]|0;
    $12 = (+($11|0));
    $13 = HEAP32[83908]|0;
    $14 = (+($13|0));
    $15 = +HEAPF32[83909];
    $16 = $15 - $14;
    $17 = -$16;
    $18 = (+_LinearEaseIn_85($12,$14,$17));
    HEAPF32[83907] = $18;
    $19 = HEAP32[83708]|0;
    $20 = ($19|0)>(89);
    if ($20) {
     HEAP32[83726] = 2;
     HEAP32[83708] = 0;
    }
   } else {
    HEAP32[83726] = 2;
   }
   $21 = (_IsGestureDetected(1)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $$043 = 0;
   } else {
    $23 = HEAP32[6799]|0;
    HEAP32[83724] = $23;
    $24 = HEAP32[83909]|0;
    HEAP32[83907] = $24;
    HEAP32[83708] = 0;
    HEAP32[83726] = 2;
    $$043 = 0;
   }
   break;
  }
  case 2:  {
   $25 = HEAP32[6801]|0;
   $26 = ($25|0)>(0);
   do {
    if ($26) {
     $27 = HEAP32[83725]|0;
     $28 = ($27|0)==($25|0);
     if ($28) {
      HEAP32[83726] = 3;
      HEAP32[83708] = 0;
      break;
     }
     $29 = ($27|0)<($25|0);
     if ($29) {
      $30 = ($2|0)>(3);
      if ($30) {
       $31 = (($27) + 1)|0;
       HEAP32[83725] = $31;
       HEAP32[83708] = 0;
       $$03944 = 0;
      } else {
       $$03944 = 0;
      }
      while(1) {
       $32 = (((334908 + (($$03944*36)|0)|0)) + 32|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = ($33|0)==(0);
       if ($34) {
        $35 = (_GetScreenWidth()|0);
        $36 = (+($35|0));
        $37 = $36 * 0.46000000000000002;
        $38 = $37;
        $39 = (_GetScreenHeight()|0);
        $40 = (+($39|0));
        $41 = $40 * 0.32000000000000001;
        $42 = $41;
        $$sroa$028$0$$sroa_idx = (334908 + (($$03944*36)|0)|0);
        HEAPF32[$$sroa$028$0$$sroa_idx>>2] = $38;
        $$sroa$229$0$$sroa_idx30 = (((334908 + (($$03944*36)|0)|0)) + 4|0);
        HEAPF32[$$sroa$229$0$$sroa_idx30>>2] = $42;
        $43 = (((334908 + (($$03944*36)|0)|0)) + 28|0);
        HEAPF32[$43>>2] = 1.0;
        HEAP32[$32>>2] = 1;
       }
       $44 = (($$03944) + 1)|0;
       $exitcond47 = ($44|0)==(20);
       if ($exitcond47) {
        break;
       } else {
        $$03944 = $44;
       }
      }
     }
    } else {
     HEAP32[83726] = 3;
    }
   } while(0);
   $45 = (_IsGestureDetected(1)|0);
   $46 = ($45|0)==(0);
   if ($46) {
    $$043 = 0;
   } else {
    $47 = HEAP32[6801]|0;
    HEAP32[83725] = $47;
    HEAP32[83708] = 0;
    HEAP32[83726] = 3;
    $$043 = 0;
   }
   break;
  }
  case 3:  {
   $48 = HEAP32[6668]|0;
   $49 = ($48|0)>(0);
   if ($49) {
    $50 = ($2|0)>(90);
    $51 = HEAP32[83712]|0;
    $52 = ($51|0)!=(0);
    $or$cond = $50 | $52;
    if (!($or$cond)) {
     $53 = (+($48|0));
     $54 = (+($2|0));
     $55 = (+_LinearEaseIn_85($54,0.0,$53));
     $56 = (~~(($55)));
     HEAP32[83723] = $56;
    }
    $57 = HEAP32[84038]|0;
    $58 = (($57) + 1)|0;
    HEAP32[84038] = $58;
    $59 = HEAP32[83710]|0;
    $$04046 = 0;
    while(1) {
     $62 = HEAP32[84038]|0;
     $63 = ($62|0)<($59|0);
     if (!($63)) {
      $64 = (335640 + ($$04046<<2)|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0);
      if ($66) {
       HEAP32[$64>>2] = 1;
       HEAP32[84038] = 0;
      }
     }
     $67 = (($$04046) + 1)|0;
     $exitcond49 = ($67|0)==(128);
     if ($exitcond49) {
      break;
     } else {
      $$04046 = $67;
     }
    }
    $60 = HEAP32[83708]|0;
    $61 = ($60|0)>(89);
    if ($61) {
     HEAP32[83726] = 4;
     HEAP32[83708] = 0;
    }
   } else {
    HEAP32[83726] = 4;
   }
   $68 = (_IsGestureDetected(1)|0);
   $69 = ($68|0)==(0);
   if ($69) {
    $$043 = 0;
   } else {
    $70 = HEAP32[6668]|0;
    HEAP32[83723] = $70;
    HEAP32[83708] = 0;
    $$04145 = 0;
    while(1) {
     $71 = (335640 + ($$04145<<2)|0);
     HEAP32[$71>>2] = 1;
     $72 = (($$04145) + 1)|0;
     $exitcond48 = ($72|0)==(128);
     if ($exitcond48) {
      break;
     } else {
      $$04145 = $72;
     }
    }
    HEAP32[83726] = 4;
    $$043 = 0;
   }
   break;
  }
  case 4:  {
   $73 = (_IsGestureDetected(1)|0);
   $74 = ($73|0)==(0);
   if ($74) {
    $$pr = HEAP32[83712]|0;
    $75 = ($$pr|0)==(0);
    if ($75) {
     $$043 = 0;
     break L1;
    }
   } else {
    HEAP32[83712] = 1;
   }
   $76 = HEAP32[83711]|0;
   $77 = (($76) + 1)|0;
   HEAP32[83711] = $77;
   $78 = ($77|0)>(29);
   if ($78) {
    HEAP32[83709] = 1;
    $79 = (_GetRandomValue(0,3)|0);
    HEAP32[6803] = $79;
   }
   HEAP8[334876] = -1;
   HEAP8[(334877)>>0] = -53;
   HEAP8[(334878)>>0] = 0;
   HEAP8[(334879)>>0] = -1;
   $$043 = 0;
   break;
  }
  default: {
   $$043 = 0;
  }
  }
 } while(0);
 while(1) {
  $82 = (((334908 + (($$043*36)|0)|0)) + 32|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==(1);
  if ($84) {
   $85 = (((334908 + (($$043*36)|0)|0)) + 8|0);
   $86 = +HEAPF32[$85>>2];
   $87 = (334908 + (($$043*36)|0)|0);
   $88 = +HEAPF32[$87>>2];
   $89 = $86 + $88;
   HEAPF32[$87>>2] = $89;
   $90 = (((334908 + (($$043*36)|0)|0)) + 12|0);
   $91 = +HEAPF32[$90>>2];
   $92 = (((334908 + (($$043*36)|0)|0)) + 4|0);
   $93 = +HEAPF32[$92>>2];
   $94 = $91 + $93;
   HEAPF32[$92>>2] = $94;
   $95 = (((334908 + (($$043*36)|0)|0)) + 16|0);
   $96 = +HEAPF32[$95>>2];
   $97 = $96 + 6.0;
   HEAPF32[$95>>2] = $97;
   $98 = (((334908 + (($$043*36)|0)|0)) + 28|0);
   $99 = +HEAPF32[$98>>2];
   $100 = $99 + -0.029999999329447746;
   HEAPF32[$98>>2] = $100;
   $101 = (((334908 + (($$043*36)|0)|0)) + 20|0);
   $102 = +HEAPF32[$101>>2];
   $103 = $102;
   $104 = $103 + -0.0040000000000000001;
   $105 = $104;
   $$inv = $105 <= 0.0;
   $storemerge = $$inv ? 0.0 : $105;
   HEAPF32[$101>>2] = $storemerge;
   $106 = +HEAPF32[$98>>2];
   $107 = !($106 <= 0.0);
   if (!($107)) {
    HEAPF32[$98>>2] = 0.0;
    HEAP32[$82>>2] = 0;
   }
  }
  $108 = (($$043) + 1)|0;
  $exitcond = ($108|0)==(20);
  if ($exitcond) {
   break;
  } else {
   $$043 = $108;
  }
 }
 $80 = (_IsGestureDetected(1)|0);
 $81 = ($80|0)==(0);
 if ($81) {
  STACKTOP = sp;return;
 }
 _GetTouchPosition($0,0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 ;HEAP32[$playButton$byval_copy>>2]=HEAP32[334860>>2]|0;HEAP32[$playButton$byval_copy+4>>2]=HEAP32[334860+4>>2]|0;HEAP32[$playButton$byval_copy+8>>2]=HEAP32[334860+8>>2]|0;HEAP32[$playButton$byval_copy+12>>2]=HEAP32[334860+12>>2]|0;
 $109 = (_CheckCollisionPointRec($$byval_copy,$playButton$byval_copy)|0);
 $110 = ($109|0)==(0);
 if ($110) {
  STACKTOP = sp;return;
 }
 HEAP32[83726] = 4;
 HEAP32[83712] = 1;
 STACKTOP = sp;return;
}
function _LinearEaseIn_85($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0 * $2;
 $4 = $3 / 90.0;
 $5 = $4 + $1;
 return (+$5);
}
function _DrawEndingScreen() {
 var $$0290293 = 0, $$0291292 = 0, $$0294 = 0, $$byval_copy163 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0;
 var $202 = 0.0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0;
 var $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0;
 var $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0.0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0.0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0.0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0, $397 = 0.0, $398 = 0.0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0.0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0.0, $52 = 0, $520 = 0.0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0.0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0.0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0.0, $564 = 0.0, $565 = 0, $566 = 0, $567 = 0.0, $568 = 0.0, $569 = 0, $57 = 0, $570 = 0.0, $571 = 0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0;
 var $581 = 0.0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0, $586 = 0.0, $587 = 0, $588 = 0, $589 = 0.0, $59 = 0, $590 = 0.0, $591 = 0, $592 = 0.0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0.0, $598 = 0.0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0.0, $602 = 0.0, $603 = 0, $604 = 0.0, $605 = 0.0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0.0, $631 = 0, $632 = 0, $633 = 0.0, $634 = 0;
 var $635 = 0, $636 = 0.0, $637 = 0.0, $638 = 0, $639 = 0.0, $64 = 0, $640 = 0, $641 = 0.0, $642 = 0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0.0;
 var $653 = 0.0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0;
 var $671 = 0.0, $672 = 0.0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0, $682 = 0.0, $683 = 0.0, $684 = 0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0;
 var $69 = 0, $690 = 0.0, $691 = 0.0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0.0, $696 = 0.0, $697 = 0, $698 = 0.0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0, $701 = 0.0, $702 = 0.0, $703 = 0, $704 = 0.0, $705 = 0.0, $706 = 0.0;
 var $707 = 0.0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0, $717 = 0.0, $718 = 0.0, $719 = 0, $72 = 0, $720 = 0.0, $721 = 0.0, $722 = 0, $723 = 0.0, $724 = 0.0;
 var $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0.0, $73 = 0, $730 = 0, $731 = 0, $732 = 0.0, $733 = 0.0, $734 = 0.0, $735 = 0, $736 = 0.0, $737 = 0.0, $738 = 0, $739 = 0.0, $74 = 0, $740 = 0.0, $741 = 0, $742 = 0.0;
 var $743 = 0.0, $744 = 0.0, $745 = 0.0, $746 = 0, $747 = 0, $748 = 0.0, $749 = 0.0, $75 = 0, $750 = 0, $751 = 0, $752 = 0.0, $753 = 0.0, $754 = 0, $755 = 0.0, $756 = 0.0, $757 = 0, $758 = 0.0, $759 = 0.0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0.0, $763 = 0.0, $764 = 0, $765 = 0.0, $766 = 0.0, $767 = 0, $768 = 0.0, $769 = 0.0, $77 = 0, $770 = 0, $771 = 0, $772 = 0.0, $773 = 0.0, $774 = 0, $775 = 0.0, $776 = 0.0, $777 = 0, $778 = 0.0, $779 = 0.0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0.0, $783 = 0.0, $784 = 0, $785 = 0.0, $786 = 0.0, $787 = 0, $788 = 0.0, $789 = 0.0, $79 = 0, $790 = 0, $791 = 0, $792 = 0.0, $793 = 0.0, $794 = 0, $795 = 0.0, $796 = 0.0, $797 = 0;
 var $798 = 0.0, $799 = 0.0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0.0, $803 = 0.0, $804 = 0, $805 = 0.0, $806 = 0.0, $807 = 0, $808 = 0.0, $809 = 0.0, $81 = 0, $810 = 0, $811 = 0, $812 = 0.0, $813 = 0.0, $814 = 0;
 var $815 = 0.0, $816 = 0.0, $817 = 0, $818 = 0.0, $819 = 0.0, $82 = 0, $820 = 0, $821 = 0, $822 = 0.0, $823 = 0.0, $824 = 0, $825 = 0.0, $826 = 0.0, $827 = 0, $828 = 0.0, $829 = 0.0, $83 = 0, $830 = 0, $831 = 0, $832 = 0.0;
 var $833 = 0.0, $834 = 0, $835 = 0.0, $836 = 0.0, $837 = 0, $838 = 0.0, $839 = 0.0, $84 = 0, $840 = 0, $841 = 0, $842 = 0.0, $843 = 0.0, $844 = 0, $845 = 0.0, $846 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $atlas01$byval_copy124 = 0, $atlas01$byval_copy141 = 0, $exitcond = 0, $exitcond295 = 0, $exitcond296 = 0, $font$byval_copy162 = 0, $tmpcast318$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1808|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1808|0);
 $tmpcast318$byval_copy = sp + 1796|0;
 $$byval_copy163 = sp + 1784|0;
 $font$byval_copy162 = sp + 1752|0;
 $atlas01$byval_copy141 = sp + 1432|0;
 $atlas01$byval_copy124 = sp + 1160|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 1736|0;
 $1 = sp + 1728|0;
 $2 = sp + 1712|0;
 $3 = sp + 1696|0;
 $4 = sp + 1688|0;
 $5 = sp + 1680|0;
 $6 = sp + 1664|0;
 $7 = sp + 1648|0;
 $8 = sp + 1640|0;
 $9 = sp + 1632|0;
 $10 = sp + 1616|0;
 $11 = sp + 1600|0;
 $12 = sp + 1592|0;
 $13 = sp + 1584|0;
 $14 = sp + 1568|0;
 $15 = sp + 1552|0;
 $16 = sp + 1544|0;
 $17 = sp + 1536|0;
 $18 = sp + 1520|0;
 $19 = sp + 1504|0;
 $20 = sp + 1496|0;
 $21 = sp + 1488|0;
 $22 = sp + 1472|0;
 $23 = sp + 1456|0;
 $24 = sp + 1424|0;
 $25 = sp + 1416|0;
 $26 = sp + 1400|0;
 $27 = sp + 1384|0;
 $28 = sp + 1376|0;
 $29 = sp + 1368|0;
 $30 = sp + 1352|0;
 $31 = sp + 1336|0;
 $32 = sp + 1328|0;
 $33 = sp + 1320|0;
 $34 = sp + 1304|0;
 $35 = sp + 1288|0;
 $36 = sp + 1280|0;
 $37 = sp + 1272|0;
 $38 = sp + 1256|0;
 $39 = sp + 1240|0;
 $40 = sp + 1232|0;
 $41 = sp + 1224|0;
 $42 = sp + 1208|0;
 $43 = sp + 1192|0;
 $44 = sp + 1184|0;
 $45 = sp + 1180|0;
 $46 = sp + 1144|0;
 $47 = sp + 1128|0;
 $48 = sp + 1120|0;
 $49 = sp + 1112|0;
 $50 = sp + 1096|0;
 $51 = sp + 1080|0;
 $52 = sp + 1072|0;
 $53 = sp + 1064|0;
 $54 = sp + 1048|0;
 $55 = sp + 1032|0;
 $56 = sp + 1024|0;
 $57 = sp + 1016|0;
 $58 = sp + 1000|0;
 $59 = sp + 984|0;
 $60 = sp + 976|0;
 $61 = sp + 968|0;
 $62 = sp + 952|0;
 $63 = sp + 936|0;
 $64 = sp + 928|0;
 $65 = sp + 920|0;
 $66 = sp + 904|0;
 $67 = sp + 888|0;
 $68 = sp + 880|0;
 $69 = sp + 872|0;
 $70 = sp + 856|0;
 $71 = sp + 840|0;
 $72 = sp + 832|0;
 $73 = sp + 824|0;
 $74 = sp + 808|0;
 $75 = sp + 792|0;
 $76 = sp + 784|0;
 $77 = sp + 1792|0;
 $78 = sp + 776|0;
 $79 = sp + 760|0;
 $80 = sp + 744|0;
 $81 = sp + 736|0;
 $82 = sp + 728|0;
 $83 = sp + 712|0;
 $84 = sp + 696|0;
 $85 = sp + 688|0;
 $86 = sp + 680|0;
 $87 = sp + 664|0;
 $88 = sp + 648|0;
 $89 = sp + 640|0;
 $90 = sp + 632|0;
 $91 = sp + 616|0;
 $92 = sp + 600|0;
 $93 = sp + 592|0;
 $94 = sp + 584|0;
 $95 = sp + 568|0;
 $96 = sp + 552|0;
 $97 = sp + 544|0;
 $98 = sp + 528|0;
 $99 = sp + 512|0;
 $100 = sp + 504|0;
 $101 = sp + 488|0;
 $102 = sp + 472|0;
 $103 = sp + 464|0;
 $104 = sp + 448|0;
 $105 = sp + 432|0;
 $106 = sp + 424|0;
 $107 = sp + 416|0;
 $108 = sp + 408|0;
 $109 = sp + 400|0;
 $110 = sp + 392|0;
 $111 = sp + 384|0;
 $112 = sp + 376|0;
 $113 = sp + 368|0;
 $114 = sp + 360|0;
 $115 = sp + 344|0;
 $116 = sp + 336|0;
 $117 = sp + 328|0;
 $118 = sp + 312|0;
 $119 = sp + 304|0;
 $120 = sp + 296|0;
 $121 = sp + 280|0;
 $122 = sp + 272|0;
 $123 = sp + 264|0;
 $124 = sp + 248|0;
 $125 = sp + 240|0;
 $126 = sp + 232|0;
 $127 = sp + 216|0;
 $128 = sp + 208|0;
 $129 = sp + 200|0;
 $130 = sp + 192|0;
 $131 = sp + 184|0;
 $132 = sp + 176|0;
 $133 = sp + 168|0;
 $134 = sp + 160|0;
 $135 = sp + 152|0;
 $136 = sp + 144|0;
 $137 = sp + 136|0;
 $138 = sp + 128|0;
 $139 = sp + 120|0;
 $140 = sp + 112|0;
 $141 = sp + 104|0;
 $142 = sp + 96|0;
 $143 = sp + 88|0;
 $144 = sp + 80|0;
 $145 = sp + 72|0;
 $146 = sp + 64|0;
 $147 = sp + 56|0;
 $148 = sp + 48|0;
 $149 = sp + 40|0;
 $150 = ((($0)) + 4|0);
 $151 = ((($0)) + 8|0);
 $152 = ((($0)) + 12|0);
 $153 = ((($1)) + 4|0);
 $$0294 = 0;
 while(1) {
  HEAP32[$0>>2] = 2;
  HEAP32[$150>>2] = 766;
  HEAP32[$151>>2] = 256;
  HEAP32[$152>>2] = 256;
  $185 = (($$0294|0) % 5)&-1;
  $186 = $185 << 8;
  $187 = (+($186|0));
  HEAPF32[$1>>2] = $187;
  $188 = (($$0294|0) / 5)&-1;
  $189 = $188 << 8;
  $190 = (+($189|0));
  HEAPF32[$153>>2] = $190;
  ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[26404>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[26404+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[26404+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[26404+12>>2]|0;HEAP32[$atlas01$byval_copy141+16>>2]=HEAP32[26404+16>>2]|0;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[$0>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$0+12>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$1+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[340332>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[340332+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[340332+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[340332+3>>0]|0;
  _DrawTextureRec($atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,$tmpcast318$byval_copy);
  $191 = (($$0294) + 1)|0;
  $exitcond296 = ($191|0)==(15);
  if ($exitcond296) {
   break;
  } else {
   $$0294 = $191;
  }
 }
 HEAP32[$2>>2] = 2;
 $154 = ((($2)) + 4|0);
 HEAP32[$154>>2] = 2;
 $155 = ((($2)) + 8|0);
 HEAP32[$155>>2] = 1052;
 $156 = ((($2)) + 12|0);
 HEAP32[$156>>2] = 250;
 $157 = (_GetScreenWidth()|0);
 $158 = (+($157|0));
 $159 = $158 * 0.042000000000000003;
 $160 = (~~(($159)));
 HEAP32[$3>>2] = $160;
 $161 = ((($3)) + 4|0);
 $162 = (_GetScreenHeight()|0);
 $163 = (+($162|0));
 $164 = $163 * 0.60599999999999998;
 $165 = (~~(($164)));
 HEAP32[$161>>2] = $165;
 $166 = ((($3)) + 8|0);
 HEAP32[$166>>2] = 1052;
 $167 = ((($3)) + 12|0);
 HEAP32[$167>>2] = 250;
 HEAPF32[$4>>2] = 0.0;
 $168 = ((($4)) + 4|0);
 HEAPF32[$168>>2] = 0.0;
 HEAP32[$5>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$2>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$2+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$3>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$3+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$4+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$5>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$5+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$6>>2] = 765;
 $169 = ((($6)) + 4|0);
 HEAP32[$169>>2] = 254;
 $170 = ((($6)) + 8|0);
 HEAP32[$170>>2] = 258;
 $171 = ((($6)) + 12|0);
 HEAP32[$171>>2] = 305;
 $172 = (_GetScreenWidth()|0);
 $173 = (+($172|0));
 $174 = $173 * 0.13300000000000001;
 $175 = (~~(($174)));
 HEAP32[$7>>2] = $175;
 $176 = ((($7)) + 4|0);
 $177 = (_GetScreenHeight()|0);
 $178 = (+($177|0));
 $179 = $178 * 0.097000000000000002;
 $180 = (~~(($179)));
 HEAP32[$176>>2] = $180;
 $181 = ((($7)) + 8|0);
 HEAP32[$181>>2] = 258;
 $182 = ((($7)) + 12|0);
 HEAP32[$182>>2] = 305;
 HEAPF32[$8>>2] = 0.0;
 $183 = ((($8)) + 4|0);
 HEAPF32[$183>>2] = 0.0;
 HEAP32[$9>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$6>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$6+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$7>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$7+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$8+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$9>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$9+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 $184 = HEAP32[6798]|0;
 switch ($184|0) {
 case 0:  {
  HEAP32[$10>>2] = 771;
  $192 = ((($10)) + 4|0);
  HEAP32[$192>>2] = 643;
  $193 = ((($10)) + 8|0);
  HEAP32[$193>>2] = 219;
  $194 = ((($10)) + 12|0);
  HEAP32[$194>>2] = 216;
  $195 = (_GetScreenWidth()|0);
  $196 = (+($195|0));
  $197 = $196 * 0.14499999999999999;
  $198 = (~~(($197)));
  HEAP32[$11>>2] = $198;
  $199 = ((($11)) + 4|0);
  $200 = (_GetScreenHeight()|0);
  $201 = (+($200|0));
  $202 = $201 * 0.17100000000000001;
  $203 = (~~(($202)));
  HEAP32[$199>>2] = $203;
  $204 = ((($11)) + 8|0);
  HEAP32[$204>>2] = 219;
  $205 = ((($11)) + 12|0);
  HEAP32[$205>>2] = 216;
  HEAPF32[$12>>2] = 0.0;
  $206 = ((($12)) + 4|0);
  HEAPF32[$206>>2] = 0.0;
  HEAP32[$13>>2] = -1;
  ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$10>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$10+12>>2]|0;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[$11>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$11+12>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$12+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$13>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$13+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
  break;
 }
 case 1:  {
  HEAP32[$14>>2] = 774;
  $207 = ((($14)) + 4|0);
  HEAP32[$207>>2] = 861;
  $208 = ((($14)) + 8|0);
  HEAP32[$208>>2] = 219;
  $209 = ((($14)) + 12|0);
  HEAP32[$209>>2] = 216;
  $210 = (_GetScreenWidth()|0);
  $211 = (+($210|0));
  $212 = $211 * 0.14499999999999999;
  $213 = (~~(($212)));
  HEAP32[$15>>2] = $213;
  $214 = ((($15)) + 4|0);
  $215 = (_GetScreenHeight()|0);
  $216 = (+($215|0));
  $217 = $216 * 0.17100000000000001;
  $218 = (~~(($217)));
  HEAP32[$214>>2] = $218;
  $219 = ((($15)) + 8|0);
  HEAP32[$219>>2] = 219;
  $220 = ((($15)) + 12|0);
  HEAP32[$220>>2] = 216;
  HEAPF32[$16>>2] = 0.0;
  $221 = ((($16)) + 4|0);
  HEAPF32[$221>>2] = 0.0;
  HEAP32[$17>>2] = -1;
  ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$14>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$14+12>>2]|0;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[$15>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$15+12>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$16+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$17>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$17+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
  break;
 }
 case 2:  {
  HEAP32[$18>>2] = 439;
  $222 = ((($18)) + 4|0);
  HEAP32[$222>>2] = 1278;
  $223 = ((($18)) + 8|0);
  HEAP32[$223>>2] = 219;
  $224 = ((($18)) + 12|0);
  HEAP32[$224>>2] = 216;
  $225 = (_GetScreenWidth()|0);
  $226 = (+($225|0));
  $227 = $226 * 0.14499999999999999;
  $228 = (~~(($227)));
  HEAP32[$19>>2] = $228;
  $229 = ((($19)) + 4|0);
  $230 = (_GetScreenHeight()|0);
  $231 = (+($230|0));
  $232 = $231 * 0.17100000000000001;
  $233 = (~~(($232)));
  HEAP32[$229>>2] = $233;
  $234 = ((($19)) + 8|0);
  HEAP32[$234>>2] = 219;
  $235 = ((($19)) + 12|0);
  HEAP32[$235>>2] = 216;
  HEAPF32[$20>>2] = 0.0;
  $236 = ((($20)) + 4|0);
  HEAPF32[$236>>2] = 0.0;
  HEAP32[$21>>2] = -1;
  ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$18>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$18+12>>2]|0;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[$19>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$19+12>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$20+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$21>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$21+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
  break;
 }
 case 3:  {
  HEAP32[$22>>2] = 661;
  $237 = ((($22)) + 4|0);
  HEAP32[$237>>2] = 1790;
  $238 = ((($22)) + 8|0);
  HEAP32[$238>>2] = 100;
  $239 = ((($22)) + 12|0);
  HEAP32[$239>>2] = 81;
  $240 = (_GetScreenWidth()|0);
  $241 = (+($240|0));
  $242 = $241 * 0.20000000000000001;
  $243 = (~~(($242)));
  HEAP32[$23>>2] = $243;
  $244 = ((($23)) + 4|0);
  $245 = (_GetScreenHeight()|0);
  $246 = (+($245|0));
  $247 = $246 * 0.29999999999999999;
  $248 = (~~(($247)));
  HEAP32[$244>>2] = $248;
  $249 = ((($23)) + 8|0);
  HEAP32[$249>>2] = 100;
  $250 = ((($23)) + 12|0);
  HEAP32[$250>>2] = 81;
  HEAPF32[$24>>2] = 0.0;
  $251 = ((($24)) + 4|0);
  HEAPF32[$251>>2] = 0.0;
  HEAP32[$25>>2] = -1;
  ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$22>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$22+12>>2]|0;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[$23>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$23+12>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$24+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$25>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$25+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$25+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$25+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
  break;
 }
 case 4:  {
  HEAP32[$26>>2] = 516;
  $252 = ((($26)) + 4|0);
  HEAP32[$252>>2] = 678;
  $253 = ((($26)) + 8|0);
  HEAP32[$253>>2] = 253;
  $254 = ((($26)) + 12|0);
  HEAP32[$254>>2] = 250;
  $255 = (_GetScreenWidth()|0);
  $256 = (+($255|0));
  $257 = $256 * 0.13300000000000001;
  $258 = (~~(($257)));
  HEAP32[$27>>2] = $258;
  $259 = ((($27)) + 4|0);
  $260 = (_GetScreenHeight()|0);
  $261 = (+($260|0));
  $262 = $261 * 0.17100000000000001;
  $263 = (~~(($262)));
  HEAP32[$259>>2] = $263;
  $264 = ((($27)) + 8|0);
  HEAP32[$264>>2] = 253;
  $265 = ((($27)) + 12|0);
  HEAP32[$265>>2] = 250;
  HEAPF32[$28>>2] = 0.0;
  $266 = ((($28)) + 4|0);
  HEAPF32[$266>>2] = 0.0;
  HEAP32[$29>>2] = -1;
  ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$26>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$26+12>>2]|0;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[$27>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$27+12>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$28+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$29>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$29+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$29+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$29+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
  break;
 }
 case 5:  {
  HEAP32[$30>>2] = 439;
  $267 = ((($30)) + 4|0);
  HEAP32[$267>>2] = 1060;
  $268 = ((($30)) + 8|0);
  HEAP32[$268>>2] = 219;
  $269 = ((($30)) + 12|0);
  HEAP32[$269>>2] = 216;
  $270 = (_GetScreenWidth()|0);
  $271 = (+($270|0));
  $272 = $271 * 0.14499999999999999;
  $273 = (~~(($272)));
  HEAP32[$31>>2] = $273;
  $274 = ((($31)) + 4|0);
  $275 = (_GetScreenHeight()|0);
  $276 = (+($275|0));
  $277 = $276 * 0.17100000000000001;
  $278 = (~~(($277)));
  HEAP32[$274>>2] = $278;
  $279 = ((($31)) + 8|0);
  HEAP32[$279>>2] = 219;
  $280 = ((($31)) + 12|0);
  HEAP32[$280>>2] = 216;
  HEAPF32[$32>>2] = 0.0;
  $281 = ((($32)) + 4|0);
  HEAPF32[$281>>2] = 0.0;
  HEAP32[$33>>2] = -1;
  ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$30>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$30+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$30+12>>2]|0;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[$31>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$31+12>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$32+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$33>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$33+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
  break;
 }
 case 6:  {
  HEAP32[$34>>2] = 405;
  $282 = ((($34)) + 4|0);
  HEAP32[$282>>2] = 1496;
  $283 = ((($34)) + 8|0);
  HEAP32[$283>>2] = 219;
  $284 = ((($34)) + 12|0);
  HEAP32[$284>>2] = 216;
  $285 = (_GetScreenWidth()|0);
  $286 = (+($285|0));
  $287 = $286 * 0.14499999999999999;
  $288 = (~~(($287)));
  HEAP32[$35>>2] = $288;
  $289 = ((($35)) + 4|0);
  $290 = (_GetScreenHeight()|0);
  $291 = (+($290|0));
  $292 = $291 * 0.17100000000000001;
  $293 = (~~(($292)));
  HEAP32[$289>>2] = $293;
  $294 = ((($35)) + 8|0);
  HEAP32[$294>>2] = 219;
  $295 = ((($35)) + 12|0);
  HEAP32[$295>>2] = 216;
  HEAPF32[$36>>2] = 0.0;
  $296 = ((($36)) + 4|0);
  HEAPF32[$296>>2] = 0.0;
  HEAP32[$37>>2] = -1;
  ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
  ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$34>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$34+12>>2]|0;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[$35>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$35+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$35+12>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$36>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$36+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$37>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$37+3>>0]|0;
  _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
  break;
 }
 default: {
 }
 }
 HEAP32[$38>>2] = 103;
 $297 = ((($38)) + 4|0);
 HEAP32[$297>>2] = 1028;
 $298 = ((($38)) + 8|0);
 HEAP32[$298>>2] = 334;
 $299 = ((($38)) + 12|0);
 HEAP32[$299>>2] = 393;
 $300 = (_GetScreenWidth()|0);
 $301 = (+($300|0));
 $302 = $301 * 0.10199999999999999;
 $303 = (~~(($302)));
 HEAP32[$39>>2] = $303;
 $304 = ((($39)) + 4|0);
 $305 = (_GetScreenHeight()|0);
 $306 = (+($305|0));
 $307 = $306 * 0.035000000000000003;
 $308 = (~~(($307)));
 HEAP32[$304>>2] = $308;
 $309 = ((($39)) + 8|0);
 HEAP32[$309>>2] = 334;
 $310 = ((($39)) + 12|0);
 HEAP32[$310>>2] = 393;
 HEAPF32[$40>>2] = 0.0;
 $311 = ((($40)) + 4|0);
 HEAPF32[$311>>2] = 0.0;
 HEAP32[$41>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$38>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$38+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$38+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$39>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$39+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$40>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$40+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$41>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$41+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$41+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$41+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$42>>2] = 1583;
 $312 = ((($42)) + 4|0);
 HEAP32[$312>>2] = 116;
 $313 = ((($42)) + 8|0);
 HEAP32[$313>>2] = 389;
 $314 = ((($42)) + 12|0);
 HEAP32[$314>>2] = 48;
 $315 = (_GetScreenWidth()|0);
 $316 = (+($315|0));
 $317 = $316 * 0.52100000000000002;
 $318 = (~~(($317)));
 HEAP32[$43>>2] = $318;
 $319 = ((($43)) + 4|0);
 $320 = (_GetScreenHeight()|0);
 $321 = (+($320|0));
 $322 = $321 * 0.16300000000000001;
 $323 = (~~(($322)));
 HEAP32[$319>>2] = $323;
 $324 = ((($43)) + 8|0);
 HEAP32[$324>>2] = 389;
 $325 = ((($43)) + 12|0);
 HEAP32[$325>>2] = 48;
 HEAPF32[$44>>2] = 0.0;
 $326 = ((($44)) + 4|0);
 HEAPF32[$326>>2] = 0.0;
 HEAP32[$45>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$42>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$42+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$43>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$43+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$44>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$44+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$45>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$45+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$45+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$45+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$46>>2] = 1056;
 $327 = ((($46)) + 4|0);
 HEAP32[$327>>2] = 132;
 $328 = ((($46)) + 8|0);
 HEAP32[$328>>2] = 525;
 $329 = ((($46)) + 12|0);
 HEAP32[$329>>2] = 48;
 $330 = (_GetScreenWidth()|0);
 $331 = (+($330|0));
 $332 = $331 * 0.41499999999999998;
 $333 = (~~(($332)));
 HEAP32[$47>>2] = $333;
 $334 = ((($47)) + 4|0);
 $335 = (_GetScreenHeight()|0);
 $336 = (+($335|0));
 $337 = $336 * 0.30299999999999999;
 $338 = (~~(($337)));
 HEAP32[$334>>2] = $338;
 $339 = ((($47)) + 8|0);
 HEAP32[$339>>2] = 525;
 $340 = ((($47)) + 12|0);
 HEAP32[$340>>2] = 48;
 HEAPF32[$48>>2] = 0.0;
 $341 = ((($48)) + 4|0);
 HEAPF32[$341>>2] = 0.0;
 HEAP32[$49>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$46>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$46+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$46+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$47>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$47+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$47+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$47+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$48>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$48+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$49>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$49+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$50>>2] = 1583;
 $342 = ((($50)) + 4|0);
 HEAP32[$342>>2] = 116;
 $343 = ((($50)) + 8|0);
 HEAP32[$343>>2] = 389;
 $344 = ((($50)) + 12|0);
 HEAP32[$344>>2] = 48;
 $345 = (_GetScreenWidth()|0);
 $346 = (+($345|0));
 $347 = $346 * 0.52100000000000002;
 $348 = (~~(($347)));
 HEAP32[$51>>2] = $348;
 $349 = ((($51)) + 4|0);
 $350 = (_GetScreenHeight()|0);
 $351 = (+($350|0));
 $352 = $351 * 0.44;
 $353 = (~~(($352)));
 HEAP32[$349>>2] = $353;
 $354 = ((($51)) + 8|0);
 HEAP32[$354>>2] = 389;
 $355 = ((($51)) + 12|0);
 HEAP32[$355>>2] = 48;
 HEAPF32[$52>>2] = 0.0;
 $356 = ((($52)) + 4|0);
 HEAPF32[$356>>2] = 0.0;
 HEAP32[$53>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$50>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$50+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$50+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$50+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$51>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$51+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$52>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$52+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$53>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$53+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$53+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$53+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$54>>2] = 925;
 $357 = ((($54)) + 4|0);
 HEAP32[$357>>2] = 1265;
 $358 = ((($54)) + 8|0);
 HEAP32[$358>>2] = 135;
 $359 = ((($54)) + 12|0);
 HEAP32[$359>>2] = 136;
 $360 = (_GetScreenWidth()|0);
 $361 = (+($360|0));
 $362 = $361 * 0.52900000000000003;
 $363 = (~~(($362)));
 HEAP32[$55>>2] = $363;
 $364 = ((($55)) + 4|0);
 $365 = (_GetScreenHeight()|0);
 $366 = (+($365|0));
 $367 = $366 * 0.096000000000000001;
 $368 = (~~(($367)));
 HEAP32[$364>>2] = $368;
 $369 = ((($55)) + 8|0);
 HEAP32[$369>>2] = 135;
 $370 = ((($55)) + 12|0);
 HEAP32[$370>>2] = 136;
 HEAPF32[$56>>2] = 0.0;
 $371 = ((($56)) + 4|0);
 HEAPF32[$371>>2] = 0.0;
 HEAP32[$57>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$54>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$54+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$54+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$55>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$55+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$55+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$55+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$56>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$56+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$57>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$57+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$58>>2] = 2032;
 $372 = ((($58)) + 4|0);
 HEAP32[$372>>2] = 2;
 $373 = ((($58)) + 8|0);
 HEAP32[$373>>2] = 12;
 $374 = ((($58)) + 12|0);
 HEAP32[$374>>2] = 45;
 $375 = (_GetScreenWidth()|0);
 $376 = (+($375|0));
 $377 = $376 * 0.57899999999999996;
 $378 = (~~(($377)));
 HEAP32[$59>>2] = $378;
 $379 = ((($59)) + 4|0);
 $380 = (_GetScreenHeight()|0);
 $381 = (+($380|0));
 $382 = $381 * 0.189;
 $383 = (~~(($382)));
 HEAP32[$379>>2] = $383;
 $384 = ((($59)) + 8|0);
 HEAP32[$384>>2] = 12;
 $385 = ((($59)) + 12|0);
 HEAP32[$385>>2] = 45;
 HEAPF32[$60>>2] = 6.0;
 $386 = ((($60)) + 4|0);
 HEAPF32[$386>>2] = 40.5;
 $387 = +HEAPF32[83907];
 HEAP32[$61>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$58>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$58+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$59>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$59+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$59+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$60>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$60+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$61>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$61+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$61+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$61+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,$387,$tmpcast318$byval_copy);
 HEAP32[$62>>2] = 419;
 $388 = ((($62)) + 4|0);
 HEAP32[$388>>2] = 1714;
 $389 = ((($62)) + 8|0);
 HEAP32[$389>>2] = 119;
 $390 = ((($62)) + 12|0);
 HEAP32[$390>>2] = 123;
 $391 = (_GetScreenWidth()|0);
 $392 = (+($391|0));
 $393 = $392 * 0.53500000000000003;
 $394 = (~~(($393)));
 HEAP32[$63>>2] = $394;
 $395 = ((($63)) + 4|0);
 $396 = (_GetScreenHeight()|0);
 $397 = (+($396|0));
 $398 = $397 * 0.11;
 $399 = (~~(($398)));
 HEAP32[$395>>2] = $399;
 $400 = ((($63)) + 8|0);
 HEAP32[$400>>2] = 119;
 $401 = ((($63)) + 12|0);
 HEAP32[$401>>2] = 123;
 HEAPF32[$64>>2] = 0.0;
 $402 = ((($64)) + 4|0);
 HEAPF32[$402>>2] = 0.0;
 HEAP32[$65>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$62>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$62+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$62+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$62+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$63>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$63+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$63+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$63+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$64>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$64+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$65>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$65+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$65+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$65+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$66>>2] = 540;
 $403 = ((($66)) + 4|0);
 HEAP32[$403>>2] = 1714;
 $404 = ((($66)) + 8|0);
 HEAP32[$404>>2] = 119;
 $405 = ((($66)) + 12|0);
 HEAP32[$405>>2] = 123;
 $406 = (_GetScreenWidth()|0);
 $407 = (+($406|0));
 $408 = $407 * 0.42999999999999999;
 $409 = (~~(($408)));
 HEAP32[$67>>2] = $409;
 $410 = ((($67)) + 4|0);
 $411 = (_GetScreenHeight()|0);
 $412 = (+($411|0));
 $413 = $412 * 0.246;
 $414 = (~~(($413)));
 HEAP32[$410>>2] = $414;
 $415 = ((($67)) + 8|0);
 HEAP32[$415>>2] = 119;
 $416 = ((($67)) + 12|0);
 HEAP32[$416>>2] = 123;
 HEAPF32[$68>>2] = 0.0;
 $417 = ((($68)) + 4|0);
 HEAPF32[$417>>2] = 0.0;
 HEAP32[$69>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$66>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$66+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$66+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$66+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$67>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$67+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$67+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$67+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$68>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$68+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$69>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$69+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$70>>2] = 419;
 $418 = ((($70)) + 4|0);
 HEAP32[$418>>2] = 1714;
 $419 = ((($70)) + 8|0);
 HEAP32[$419>>2] = 119;
 $420 = ((($70)) + 12|0);
 HEAP32[$420>>2] = 123;
 $421 = (_GetScreenWidth()|0);
 $422 = (+($421|0));
 $423 = $422 * 0.42899999999999999;
 $424 = (~~(($423)));
 HEAP32[$71>>2] = $424;
 $425 = ((($71)) + 4|0);
 $426 = (_GetScreenHeight()|0);
 $427 = (+($426|0));
 $428 = $427 * 0.24399999999999999;
 $429 = (~~(($428)));
 HEAP32[$425>>2] = $429;
 $430 = ((($71)) + 8|0);
 HEAP32[$430>>2] = 119;
 $431 = ((($71)) + 12|0);
 HEAP32[$431>>2] = 123;
 HEAPF32[$72>>2] = 0.0;
 $432 = ((($72)) + 4|0);
 HEAPF32[$432>>2] = 0.0;
 HEAP32[$73>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$70>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$70+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$70+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$71>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$71+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$71+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$71+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$72>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$72+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$73>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$73+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 $433 = ((($74)) + 4|0);
 $434 = ((($74)) + 8|0);
 $435 = ((($74)) + 12|0);
 $436 = ((($75)) + 4|0);
 $437 = ((($75)) + 8|0);
 $438 = ((($75)) + 12|0);
 $439 = ((($76)) + 4|0);
 $$0290293 = 0;
 while(1) {
  $626 = (((334908 + (($$0290293*36)|0)|0)) + 32|0);
  $627 = HEAP32[$626>>2]|0;
  $628 = ($627|0)==(0);
  if (!($628)) {
   HEAP32[$74>>2] = 1989;
   HEAP32[$433>>2] = 200;
   HEAP32[$434>>2] = 32;
   HEAP32[$435>>2] = 32;
   $629 = (334908 + (($$0290293*36)|0)|0);
   $630 = +HEAPF32[$629>>2];
   $631 = (~~(($630)));
   HEAP32[$75>>2] = $631;
   $632 = (((334908 + (($$0290293*36)|0)|0)) + 4|0);
   $633 = +HEAPF32[$632>>2];
   $634 = (~~(($633)));
   HEAP32[$436>>2] = $634;
   $635 = (((334908 + (($$0290293*36)|0)|0)) + 20|0);
   $636 = +HEAPF32[$635>>2];
   $637 = $636 * 32.0;
   $638 = (~~(($637)));
   HEAP32[$437>>2] = $638;
   HEAP32[$438>>2] = $638;
   $639 = $636 * 16.0;
   HEAPF32[$76>>2] = $639;
   HEAPF32[$439>>2] = $639;
   $640 = (((334908 + (($$0290293*36)|0)|0)) + 16|0);
   $641 = +HEAPF32[$640>>2];
   $642 = (((334908 + (($$0290293*36)|0)|0)) + 28|0);
   HEAP32[$78>>2] = -1;
   $643 = +HEAPF32[$642>>2];
   ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$78>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$78+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$78+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$78+3>>0]|0;
   _Fade($77,$tmpcast318$byval_copy,$643);
   ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
   ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$74>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$74+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$74+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$74+12>>2]|0;
   ;HEAP32[$font$byval_copy162>>2]=HEAP32[$75>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$75+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$75+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$75+12>>2]|0;
   ;HEAP32[$$byval_copy163>>2]=HEAP32[$76>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$76+4>>2]|0;
   ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$77>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$77+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$77+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$77+3>>0]|0;
   _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,$641,$tmpcast318$byval_copy);
  }
  $644 = (($$0290293) + 1)|0;
  $exitcond295 = ($644|0)==(20);
  if ($exitcond295) {
   break;
  } else {
   $$0290293 = $644;
  }
 }
 HEAP32[$79>>2] = 1387;
 $440 = ((($79)) + 4|0);
 HEAP32[$440>>2] = 254;
 $441 = ((($79)) + 8|0);
 HEAP32[$441>>2] = 135;
 $442 = ((($79)) + 12|0);
 HEAP32[$442>>2] = 130;
 $443 = (_GetScreenWidth()|0);
 $444 = (+($443|0));
 $445 = $444 * 0.42099999999999999;
 $446 = (~~(($445)));
 HEAP32[$80>>2] = $446;
 $447 = ((($80)) + 4|0);
 $448 = (_GetScreenHeight()|0);
 $449 = (+($448|0));
 $450 = $449 * 0.22800000000000001;
 $451 = (~~(($450)));
 HEAP32[$447>>2] = $451;
 $452 = ((($80)) + 8|0);
 HEAP32[$452>>2] = 135;
 $453 = ((($80)) + 12|0);
 HEAP32[$453>>2] = 130;
 HEAPF32[$81>>2] = 0.0;
 $454 = ((($81)) + 4|0);
 HEAPF32[$454>>2] = 0.0;
 HEAP32[$82>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$79>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$79+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$79+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$79+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$80>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$80+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$80+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$81>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$81+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$82>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$82+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$82+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$82+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$83>>2] = 540;
 $455 = ((($83)) + 4|0);
 HEAP32[$455>>2] = 1714;
 $456 = ((($83)) + 8|0);
 HEAP32[$456>>2] = 119;
 $457 = ((($83)) + 12|0);
 HEAP32[$457>>2] = 123;
 $458 = (_GetScreenWidth()|0);
 $459 = (+($458|0));
 $460 = $459 * 0.53600000000000003;
 $461 = (~~(($460)));
 HEAP32[$84>>2] = $461;
 $462 = ((($84)) + 4|0);
 $463 = (_GetScreenHeight()|0);
 $464 = (+($463|0));
 $465 = $464 * 0.38300000000000001;
 $466 = (~~(($465)));
 HEAP32[$462>>2] = $466;
 $467 = ((($84)) + 8|0);
 HEAP32[$467>>2] = 119;
 $468 = ((($84)) + 12|0);
 HEAP32[$468>>2] = 123;
 HEAPF32[$85>>2] = 0.0;
 $469 = ((($85)) + 4|0);
 HEAPF32[$469>>2] = 0.0;
 HEAP32[$86>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$83>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$83+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$83+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$83+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$84>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$84+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$84+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$84+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$85>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$85+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$86>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$86+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$86+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$86+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$87>>2] = 419;
 $470 = ((($87)) + 4|0);
 HEAP32[$470>>2] = 1714;
 $471 = ((($87)) + 8|0);
 HEAP32[$471>>2] = 119;
 $472 = ((($87)) + 12|0);
 HEAP32[$472>>2] = 123;
 $473 = (_GetScreenWidth()|0);
 $474 = (+($473|0));
 $475 = $474 * 0.53500000000000003;
 $476 = (~~(($475)));
 HEAP32[$88>>2] = $476;
 $477 = ((($88)) + 4|0);
 $478 = (_GetScreenHeight()|0);
 $479 = (+($478|0));
 $480 = $479 * 0.38300000000000001;
 $481 = (~~(($480)));
 HEAP32[$477>>2] = $481;
 $482 = ((($88)) + 8|0);
 HEAP32[$482>>2] = 119;
 $483 = ((($88)) + 12|0);
 HEAP32[$483>>2] = 123;
 HEAPF32[$89>>2] = 0.0;
 $484 = ((($89)) + 4|0);
 HEAPF32[$484>>2] = 0.0;
 HEAP32[$90>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$87>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$87+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$87+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$87+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$88>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$88+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$88+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$88+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$89>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$89+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$90>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$90+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$90+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$90+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$91>>2] = 661;
 $485 = ((($91)) + 4|0);
 HEAP32[$485>>2] = 1697;
 $486 = ((($91)) + 8|0);
 HEAP32[$486>>2] = 113;
 $487 = ((($91)) + 12|0);
 HEAP32[$487>>2] = 91;
 $488 = (_GetScreenWidth()|0);
 $489 = (+($488|0));
 $490 = $489 * 0.53800000000000003;
 $491 = (~~(($490)));
 HEAP32[$92>>2] = $491;
 $492 = ((($92)) + 4|0);
 $493 = (_GetScreenHeight()|0);
 $494 = (+($493|0));
 $495 = $494 * 0.41399999999999998;
 $496 = (~~(($495)));
 HEAP32[$492>>2] = $496;
 $497 = ((($92)) + 8|0);
 HEAP32[$497>>2] = 113;
 $498 = ((($92)) + 12|0);
 HEAP32[$498>>2] = 91;
 HEAPF32[$93>>2] = 0.0;
 $499 = ((($93)) + 4|0);
 HEAPF32[$499>>2] = 0.0;
 HEAP32[$94>>2] = -1;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$91>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$91+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$91+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$91+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$92>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$92+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$92+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$92+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$93>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$93+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$94>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$94+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$94+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$94+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$95>>2] = 974;
 $500 = ((($95)) + 4|0);
 HEAP32[$500>>2] = 1403;
 $501 = ((($95)) + 8|0);
 HEAP32[$501>>2] = 123;
 $502 = ((($95)) + 12|0);
 HEAP32[$502>>2] = 123;
 $503 = (_GetScreenWidth()|0);
 $504 = (+($503|0));
 $505 = $504 * 0.87099999999999999;
 $506 = (~~(($505)));
 HEAP32[$96>>2] = $506;
 $507 = ((($96)) + 4|0);
 $508 = (_GetScreenHeight()|0);
 $509 = (+($508|0));
 $510 = $509 * 0.096000000000000001;
 $511 = (~~(($510)));
 HEAP32[$507>>2] = $511;
 $512 = ((($96)) + 8|0);
 HEAP32[$512>>2] = 123;
 $513 = ((($96)) + 12|0);
 HEAP32[$513>>2] = 123;
 HEAPF32[$97>>2] = 0.0;
 $514 = ((($97)) + 4|0);
 HEAPF32[$514>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$95>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$95+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$95+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$95+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$96>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$96+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$96+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$96+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$97>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$97+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[334876>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[334876+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[334876+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[334876+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$98>>2] = 958;
 $515 = ((($98)) + 4|0);
 HEAP32[$515>>2] = 1653;
 $516 = ((($98)) + 8|0);
 HEAP32[$516>>2] = 123;
 $517 = ((($98)) + 12|0);
 HEAP32[$517>>2] = 123;
 $518 = (_GetScreenWidth()|0);
 $519 = (+($518|0));
 $520 = $519 * 0.87099999999999999;
 $521 = (~~(($520)));
 HEAP32[$99>>2] = $521;
 $522 = ((($99)) + 4|0);
 $523 = (_GetScreenHeight()|0);
 $524 = (+($523|0));
 $525 = $524 * 0.30299999999999999;
 $526 = (~~(($525)));
 HEAP32[$522>>2] = $526;
 $527 = ((($99)) + 8|0);
 HEAP32[$527>>2] = 123;
 $528 = ((($99)) + 12|0);
 HEAP32[$528>>2] = 123;
 HEAPF32[$100>>2] = 0.0;
 $529 = ((($100)) + 4|0);
 HEAPF32[$529>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$98>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$98+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$98+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$98+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$99>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$99+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$99+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$99+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$100>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$100+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[334880>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[334880+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[334880+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[334880+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$101>>2] = 1479;
 $530 = ((($101)) + 4|0);
 HEAP32[$530>>2] = 386;
 $531 = ((($101)) + 8|0);
 HEAP32[$531>>2] = 123;
 $532 = ((($101)) + 12|0);
 HEAP32[$532>>2] = 123;
 $533 = (_GetScreenWidth()|0);
 $534 = (+($533|0));
 $535 = $534 * 0.87099999999999999;
 $536 = (~~(($535)));
 HEAP32[$102>>2] = $536;
 $537 = ((($102)) + 4|0);
 $538 = (_GetScreenHeight()|0);
 $539 = (+($538|0));
 $540 = $539 * 0.51300000000000001;
 $541 = (~~(($540)));
 HEAP32[$537>>2] = $541;
 $542 = ((($102)) + 8|0);
 HEAP32[$542>>2] = 123;
 $543 = ((($102)) + 12|0);
 HEAP32[$543>>2] = 123;
 HEAPF32[$103>>2] = 0.0;
 $544 = ((($103)) + 4|0);
 HEAPF32[$544>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$101>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$101+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$101+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$101+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$102>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$102+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$102+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$102+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$103>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$103+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[334884>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[334884+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[334884+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[334884+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 HEAP32[$104>>2] = 954;
 $545 = ((($104)) + 4|0);
 HEAP32[$545>>2] = 1528;
 $546 = ((($104)) + 8|0);
 HEAP32[$546>>2] = 123;
 $547 = ((($104)) + 12|0);
 HEAP32[$547>>2] = 123;
 $548 = (_GetScreenWidth()|0);
 $549 = (+($548|0));
 $550 = $549 * 0.87099999999999999;
 $551 = (~~(($550)));
 HEAP32[$105>>2] = $551;
 $552 = ((($105)) + 4|0);
 $553 = (_GetScreenHeight()|0);
 $554 = (+($553|0));
 $555 = $554 * 0.71899999999999997;
 $556 = (~~(($555)));
 HEAP32[$552>>2] = $556;
 $557 = ((($105)) + 8|0);
 HEAP32[$557>>2] = 123;
 $558 = ((($105)) + 12|0);
 HEAP32[$558>>2] = 123;
 HEAPF32[$106>>2] = 0.0;
 $559 = ((($106)) + 4|0);
 HEAPF32[$559>>2] = 0.0;
 ;HEAP32[$atlas01$byval_copy124>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy124+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy124+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy124+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy124+16>>2]=HEAP32[26384+16>>2]|0;
 ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[$104>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[$104+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[$104+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[$104+12>>2]|0;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[$105>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$105+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$105+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$105+12>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$106>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$106+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[334888>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[334888+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[334888+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[334888+3>>0]|0;
 _DrawTexturePro($atlas01$byval_copy124,$atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,0.0,$tmpcast318$byval_copy);
 $560 = HEAP32[83724]|0;
 HEAP32[$vararg_buffer>>2] = $560;
 $561 = (_FormatText(7766,$vararg_buffer)|0);
 $562 = (_GetScreenWidth()|0);
 $563 = (+($562|0));
 $564 = $563 * 0.73000001907348633;
 HEAPF32[$107>>2] = $564;
 $565 = ((($107)) + 4|0);
 $566 = (_GetScreenHeight()|0);
 $567 = (+($566|0));
 $568 = $567 * 0.14000000059604645;
 HEAPF32[$565>>2] = $568;
 $569 = HEAP32[(26372)>>2]|0;
 $570 = (+($569|0));
 HEAP32[$108>>2] = -1;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$107>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$107+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$108>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$108+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$108+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$108+3>>0]|0;
 _DrawTextEx($font$byval_copy162,$561,$$byval_copy163,$570,1,$tmpcast318$byval_copy);
 $571 = HEAP32[83725]|0;
 HEAP32[$vararg_buffer1>>2] = $571;
 $572 = (_FormatText(7766,$vararg_buffer1)|0);
 $573 = (_GetScreenWidth()|0);
 $574 = (+($573|0));
 $575 = $574 * 0.73000001907348633;
 HEAPF32[$109>>2] = $575;
 $576 = ((($109)) + 4|0);
 $577 = (_GetScreenHeight()|0);
 $578 = (+($577|0));
 $579 = $578 * 0.28999999165534973;
 HEAPF32[$576>>2] = $579;
 $580 = HEAP32[(26372)>>2]|0;
 $581 = (+($580|0));
 HEAP32[$110>>2] = -1;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$109>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$109+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$110>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$110+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$110+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$110+3>>0]|0;
 _DrawTextEx($font$byval_copy162,$572,$$byval_copy163,$581,1,$tmpcast318$byval_copy);
 $582 = HEAP32[83723]|0;
 HEAP32[$vararg_buffer4>>2] = $582;
 $583 = (_FormatText(7771,$vararg_buffer4)|0);
 $584 = (_GetScreenWidth()|0);
 $585 = (+($584|0));
 $586 = $585 * 0.7149999737739563;
 HEAPF32[$111>>2] = $586;
 $587 = ((($111)) + 4|0);
 $588 = (_GetScreenHeight()|0);
 $589 = (+($588|0));
 $590 = $589 * 0.42599999904632568;
 HEAPF32[$587>>2] = $590;
 $591 = HEAP32[(26372)>>2]|0;
 $592 = (+($591|0));
 HEAP32[$112>>2] = -1;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$111>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$111+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$112>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$112+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$112+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$112+3>>0]|0;
 _DrawTextEx($font$byval_copy162,$583,$$byval_copy163,$592,1,$tmpcast318$byval_copy);
 $593 = HEAP32[6804]|0;
 $594 = HEAP32[83713]|0;
 HEAP32[$vararg_buffer7>>2] = 340336;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $593;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = 340368;
 $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
 HEAP32[$vararg_ptr12>>2] = $594;
 $595 = (_FormatText(7776,$vararg_buffer7)|0);
 $596 = (_GetScreenWidth()|0);
 $597 = (+($596|0));
 $598 = $597 * 0.10000000149011612;
 HEAPF32[$113>>2] = $598;
 $599 = ((($113)) + 4|0);
 $600 = (_GetScreenHeight()|0);
 $601 = (+($600|0));
 $602 = $601 * 0.69999998807907104;
 HEAPF32[$599>>2] = $602;
 $603 = HEAP32[(26372)>>2]|0;
 $604 = (+($603|0));
 $605 = $604 * 0.5;
 HEAP32[$114>>2] = -1;
 ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
 ;HEAP32[$$byval_copy163>>2]=HEAP32[$113>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$113+4>>2]|0;
 ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$114>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$114+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$114+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$114+3>>0]|0;
 _DrawTextEx($font$byval_copy162,$595,$$byval_copy163,$605,1,$tmpcast318$byval_copy);
 $606 = ((($115)) + 4|0);
 $607 = ((($115)) + 8|0);
 $608 = ((($115)) + 12|0);
 $609 = ((($116)) + 4|0);
 $610 = ((($118)) + 4|0);
 $611 = ((($118)) + 8|0);
 $612 = ((($118)) + 12|0);
 $613 = ((($119)) + 4|0);
 $614 = ((($121)) + 4|0);
 $615 = ((($121)) + 8|0);
 $616 = ((($121)) + 12|0);
 $617 = ((($122)) + 4|0);
 $618 = ((($124)) + 4|0);
 $619 = ((($124)) + 8|0);
 $620 = ((($124)) + 12|0);
 $621 = ((($125)) + 4|0);
 $622 = ((($127)) + 4|0);
 $623 = ((($127)) + 8|0);
 $624 = ((($127)) + 12|0);
 $625 = ((($128)) + 4|0);
 $$0291292 = 0;
 while(1) {
  $646 = (335640 + ($$0291292<<2)|0);
  $647 = HEAP32[$646>>2]|0;
  $648 = ($647|0)==(0);
  L21: do {
   if (!($648)) {
    $649 = (26680 + ($$0291292<<2)|0);
    $650 = HEAP32[$649>>2]|0;
    switch ($650|0) {
    case 1:  {
     HEAP32[$115>>2] = 65;
     HEAP32[$606>>2] = 1968;
     HEAP32[$607>>2] = 46;
     HEAP32[$608>>2] = 67;
     $651 = (_GetScreenWidth()|0);
     $652 = (+($651|0));
     $653 = $652 * 0.44800000000000001;
     $654 = (($$0291292|0) % 10)&-1;
     $655 = ($654*46)|0;
     $656 = (+($655|0));
     $657 = $656 + $653;
     $658 = $657;
     HEAPF32[$116>>2] = $658;
     $659 = (_GetScreenHeight()|0);
     $660 = (+($659|0));
     $661 = $660 * 0.68200000000000005;
     $662 = (_GetScreenHeight()|0);
     $663 = (+($662|0));
     $664 = $663 * 0.055;
     $665 = (($$0291292|0) / 10)&-1;
     $666 = (+($665|0));
     $667 = $666 * $664;
     $668 = $661 + $667;
     $669 = $668;
     HEAPF32[$609>>2] = $669;
     HEAP32[$117>>2] = -1;
     ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy141+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$font$byval_copy162>>2]=HEAP32[$115>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$115+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$115+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$115+12>>2]|0;
     ;HEAP32[$$byval_copy163>>2]=HEAP32[$116>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$116+4>>2]|0;
     ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$117>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$117+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$117+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$117+3>>0]|0;
     _DrawTextureRec($atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,$tmpcast318$byval_copy);
     break L21;
     break;
    }
    case 2:  {
     HEAP32[$118>>2] = 1481;
     HEAP32[$610>>2] = 182;
     HEAP32[$611>>2] = 56;
     HEAP32[$612>>2] = 70;
     $670 = (_GetScreenWidth()|0);
     $671 = (+($670|0));
     $672 = $671 * 0.44800000000000001;
     $673 = (($$0291292|0) % 10)&-1;
     $674 = ($673*56)|0;
     $675 = (+($674|0));
     $676 = $675 + $672;
     $677 = $676;
     HEAPF32[$119>>2] = $677;
     $678 = (_GetScreenHeight()|0);
     $679 = (+($678|0));
     $680 = $679 * 0.68200000000000005;
     $681 = (_GetScreenHeight()|0);
     $682 = (+($681|0));
     $683 = $682 * 0.055;
     $684 = (($$0291292|0) / 10)&-1;
     $685 = (+($684|0));
     $686 = $685 * $683;
     $687 = $680 + $686;
     $688 = $687;
     HEAPF32[$613>>2] = $688;
     HEAP32[$120>>2] = -1;
     ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy141+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$font$byval_copy162>>2]=HEAP32[$118>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$118+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$118+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$118+12>>2]|0;
     ;HEAP32[$$byval_copy163>>2]=HEAP32[$119>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$119+4>>2]|0;
     ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$120>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$120+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$120+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$120+3>>0]|0;
     _DrawTextureRec($atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,$tmpcast318$byval_copy);
     break L21;
     break;
    }
    case 3:  {
     HEAP32[$121>>2] = 226;
     HEAP32[$614>>2] = 1885;
     HEAP32[$615>>2] = 68;
     HEAP32[$616>>2] = 52;
     $689 = (_GetScreenWidth()|0);
     $690 = (+($689|0));
     $691 = $690 * 0.44800000000000001;
     $692 = (($$0291292|0) % 10)&-1;
     $693 = ($692*68)|0;
     $694 = (+($693|0));
     $695 = $694 + $691;
     $696 = $695;
     HEAPF32[$122>>2] = $696;
     $697 = (_GetScreenHeight()|0);
     $698 = (+($697|0));
     $699 = $698 * 0.68200000000000005;
     $700 = (_GetScreenHeight()|0);
     $701 = (+($700|0));
     $702 = $701 * 0.055;
     $703 = (($$0291292|0) / 10)&-1;
     $704 = (+($703|0));
     $705 = $704 * $702;
     $706 = $699 + $705;
     $707 = $706;
     HEAPF32[$617>>2] = $707;
     HEAP32[$123>>2] = -1;
     ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy141+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$font$byval_copy162>>2]=HEAP32[$121>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$121+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$121+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$121+12>>2]|0;
     ;HEAP32[$$byval_copy163>>2]=HEAP32[$122>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$122+4>>2]|0;
     ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$123>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$123+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$123+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$123+3>>0]|0;
     _DrawTextureRec($atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,$tmpcast318$byval_copy);
     break L21;
     break;
    }
    case 4:  {
     HEAP32[$124>>2] = 1318;
     HEAP32[$618>>2] = 516;
     HEAP32[$619>>2] = 62;
     HEAP32[$620>>2] = 60;
     $708 = (_GetScreenWidth()|0);
     $709 = (+($708|0));
     $710 = $709 * 0.44800000000000001;
     $711 = (($$0291292|0) % 10)&-1;
     $712 = ($711*62)|0;
     $713 = (+($712|0));
     $714 = $713 + $710;
     $715 = $714;
     HEAPF32[$125>>2] = $715;
     $716 = (_GetScreenHeight()|0);
     $717 = (+($716|0));
     $718 = $717 * 0.68200000000000005;
     $719 = (_GetScreenHeight()|0);
     $720 = (+($719|0));
     $721 = $720 * 0.055;
     $722 = (($$0291292|0) / 10)&-1;
     $723 = (+($722|0));
     $724 = $723 * $721;
     $725 = $718 + $724;
     $726 = $725;
     HEAPF32[$621>>2] = $726;
     HEAP32[$126>>2] = -1;
     ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy141+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$font$byval_copy162>>2]=HEAP32[$124>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$124+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$124+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$124+12>>2]|0;
     ;HEAP32[$$byval_copy163>>2]=HEAP32[$125>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$125+4>>2]|0;
     ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$126>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$126+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$126+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$126+3>>0]|0;
     _DrawTextureRec($atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,$tmpcast318$byval_copy);
     break L21;
     break;
    }
    case 5:  {
     HEAP32[$127>>2] = 1974;
     HEAP32[$622>>2] = 116;
     HEAP32[$623>>2] = 39;
     HEAP32[$624>>2] = 48;
     $727 = (_GetScreenWidth()|0);
     $728 = (+($727|0));
     $729 = $728 * 0.44800000000000001;
     $730 = (($$0291292|0) % 10)&-1;
     $731 = ($730*39)|0;
     $732 = (+($731|0));
     $733 = $732 + $729;
     $734 = $733;
     HEAPF32[$128>>2] = $734;
     $735 = (_GetScreenHeight()|0);
     $736 = (+($735|0));
     $737 = $736 * 0.68200000000000005;
     $738 = (_GetScreenHeight()|0);
     $739 = (+($738|0));
     $740 = $739 * 0.055;
     $741 = (($$0291292|0) / 10)&-1;
     $742 = (+($741|0));
     $743 = $742 * $740;
     $744 = $737 + $743;
     $745 = $744;
     HEAPF32[$625>>2] = $745;
     HEAP32[$129>>2] = -1;
     ;HEAP32[$atlas01$byval_copy141>>2]=HEAP32[26384>>2]|0;HEAP32[$atlas01$byval_copy141+4>>2]=HEAP32[26384+4>>2]|0;HEAP32[$atlas01$byval_copy141+8>>2]=HEAP32[26384+8>>2]|0;HEAP32[$atlas01$byval_copy141+12>>2]=HEAP32[26384+12>>2]|0;HEAP32[$atlas01$byval_copy141+16>>2]=HEAP32[26384+16>>2]|0;
     ;HEAP32[$font$byval_copy162>>2]=HEAP32[$127>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[$127+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[$127+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[$127+12>>2]|0;
     ;HEAP32[$$byval_copy163>>2]=HEAP32[$128>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$128+4>>2]|0;
     ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$129>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$129+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$129+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$129+3>>0]|0;
     _DrawTextureRec($atlas01$byval_copy141,$font$byval_copy162,$$byval_copy163,$tmpcast318$byval_copy);
     break L21;
     break;
    }
    default: {
     break L21;
    }
    }
   }
  } while(0);
  $746 = (($$0291292) + 1)|0;
  $exitcond = ($746|0)==(128);
  if ($exitcond) {
   break;
  } else {
   $$0291292 = $746;
  }
 }
 $645 = HEAP32[6798]|0;
 switch ($645|0) {
 case 0:  {
  $747 = (_GetScreenWidth()|0);
  $748 = (+($747|0));
  $749 = $748 * 0.12999999523162842;
  HEAPF32[$130>>2] = $749;
  $750 = ((($130)) + 4|0);
  $751 = (_GetScreenHeight()|0);
  $752 = (+($751|0));
  $753 = $752 * 0.77999997138977051;
  HEAPF32[$750>>2] = $753;
  $754 = HEAP32[(26372)>>2]|0;
  $755 = (+($754|0));
  $756 = $755 * 0.5;
  HEAP32[$131>>2] = -1;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$130>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$130+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$131>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$131+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$131+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$131+3>>0]|0;
  _DrawTextEx($font$byval_copy162,7514,$$byval_copy163,$756,1,$tmpcast318$byval_copy);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $757 = (_GetScreenWidth()|0);
  $758 = (+($757|0));
  $759 = $758 * 0.12999999523162842;
  HEAPF32[$132>>2] = $759;
  $760 = ((($132)) + 4|0);
  $761 = (_GetScreenHeight()|0);
  $762 = (+($761|0));
  $763 = $762 * 0.77999997138977051;
  HEAPF32[$760>>2] = $763;
  $764 = HEAP32[(26372)>>2]|0;
  $765 = (+($764|0));
  $766 = $765 * 0.5;
  HEAP32[$133>>2] = -1;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$132>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$132+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$133>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$133+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$133+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$133+3>>0]|0;
  _DrawTextEx($font$byval_copy162,7482,$$byval_copy163,$766,1,$tmpcast318$byval_copy);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $767 = (_GetScreenWidth()|0);
  $768 = (+($767|0));
  $769 = $768 * 0.12999999523162842;
  HEAPF32[$134>>2] = $769;
  $770 = ((($134)) + 4|0);
  $771 = (_GetScreenHeight()|0);
  $772 = (+($771|0));
  $773 = $772 * 0.77999997138977051;
  HEAPF32[$770>>2] = $773;
  $774 = HEAP32[(26372)>>2]|0;
  $775 = (+($774|0));
  $776 = $775 * 0.5;
  HEAP32[$135>>2] = -1;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$134>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$134+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$135>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$135+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$135+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$135+3>>0]|0;
  _DrawTextEx($font$byval_copy162,7546,$$byval_copy163,$776,1,$tmpcast318$byval_copy);
  $777 = (_GetScreenWidth()|0);
  $778 = (+($777|0));
  $779 = $778 * 0.12999999523162842;
  HEAPF32[$136>>2] = $779;
  $780 = ((($136)) + 4|0);
  $781 = (_GetScreenHeight()|0);
  $782 = (+($781|0));
  $783 = $782 * 0.82999998331069946;
  HEAPF32[$780>>2] = $783;
  $784 = HEAP32[(26372)>>2]|0;
  $785 = (+($784|0));
  $786 = $785 * 0.5;
  HEAP32[$137>>2] = -1;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$136>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$136+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$137>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$137+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$137+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$137+3>>0]|0;
  _DrawTextEx($font$byval_copy162,7578,$$byval_copy163,$786,1,$tmpcast318$byval_copy);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $787 = (_GetScreenWidth()|0);
  $788 = (+($787|0));
  $789 = $788 * 0.12999999523162842;
  HEAPF32[$138>>2] = $789;
  $790 = ((($138)) + 4|0);
  $791 = (_GetScreenHeight()|0);
  $792 = (+($791|0));
  $793 = $792 * 0.77999997138977051;
  HEAPF32[$790>>2] = $793;
  $794 = HEAP32[(26372)>>2]|0;
  $795 = (+($794|0));
  $796 = $795 * 0.5;
  HEAP32[$139>>2] = -1;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$138>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$138+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$139>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$139+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$139+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$139+3>>0]|0;
  _DrawTextEx($font$byval_copy162,7418,$$byval_copy163,$796,1,$tmpcast318$byval_copy);
  $797 = (_GetScreenWidth()|0);
  $798 = (+($797|0));
  $799 = $798 * 0.12999999523162842;
  HEAPF32[$140>>2] = $799;
  $800 = ((($140)) + 4|0);
  $801 = (_GetScreenHeight()|0);
  $802 = (+($801|0));
  $803 = $802 * 0.82999998331069946;
  HEAPF32[$800>>2] = $803;
  $804 = HEAP32[(26372)>>2]|0;
  $805 = (+($804|0));
  $806 = $805 * 0.5;
  HEAP32[$141>>2] = -1;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$140>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$140+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$141>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$141+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$141+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$141+3>>0]|0;
  _DrawTextEx($font$byval_copy162,7450,$$byval_copy163,$806,1,$tmpcast318$byval_copy);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $807 = (_GetScreenWidth()|0);
  $808 = (+($807|0));
  $809 = $808 * 0.12999999523162842;
  HEAPF32[$142>>2] = $809;
  $810 = ((($142)) + 4|0);
  $811 = (_GetScreenHeight()|0);
  $812 = (+($811|0));
  $813 = $812 * 0.77999997138977051;
  HEAPF32[$810>>2] = $813;
  $814 = HEAP32[(26372)>>2]|0;
  $815 = (+($814|0));
  $816 = $815 * 0.5;
  HEAP32[$143>>2] = -1;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$142>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$142+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$143>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$143+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$143+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$143+3>>0]|0;
  _DrawTextEx($font$byval_copy162,7610,$$byval_copy163,$816,1,$tmpcast318$byval_copy);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $817 = (_GetScreenWidth()|0);
  $818 = (+($817|0));
  $819 = $818 * 0.12999999523162842;
  HEAPF32[$144>>2] = $819;
  $820 = ((($144)) + 4|0);
  $821 = (_GetScreenHeight()|0);
  $822 = (+($821|0));
  $823 = $822 * 0.77999997138977051;
  HEAPF32[$820>>2] = $823;
  $824 = HEAP32[(26372)>>2]|0;
  $825 = (+($824|0));
  $826 = $825 * 0.5;
  HEAP32[$145>>2] = -1;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$144>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$144+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$145>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$145+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$145+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$145+3>>0]|0;
  _DrawTextEx($font$byval_copy162,7642,$$byval_copy163,$826,1,$tmpcast318$byval_copy);
  $827 = (_GetScreenWidth()|0);
  $828 = (+($827|0));
  $829 = $828 * 0.12999999523162842;
  HEAPF32[$146>>2] = $829;
  $830 = ((($146)) + 4|0);
  $831 = (_GetScreenHeight()|0);
  $832 = (+($831|0));
  $833 = $832 * 0.82999998331069946;
  HEAPF32[$830>>2] = $833;
  $834 = HEAP32[(26372)>>2]|0;
  $835 = (+($834|0));
  $836 = $835 * 0.5;
  HEAP32[$147>>2] = -1;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$146>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$146+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$147>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$147+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$147+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$147+3>>0]|0;
  _DrawTextEx($font$byval_copy162,7674,$$byval_copy163,$836,1,$tmpcast318$byval_copy);
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $837 = (_GetScreenWidth()|0);
  $838 = (+($837|0));
  $839 = $838 * 0.12999999523162842;
  HEAPF32[$148>>2] = $839;
  $840 = ((($148)) + 4|0);
  $841 = (_GetScreenHeight()|0);
  $842 = (+($841|0));
  $843 = $842 * 0.77999997138977051;
  HEAPF32[$840>>2] = $843;
  $844 = HEAP32[(26372)>>2]|0;
  $845 = (+($844|0));
  $846 = $845 * 0.5;
  HEAP32[$149>>2] = -1;
  ;HEAP32[$font$byval_copy162>>2]=HEAP32[26352>>2]|0;HEAP32[$font$byval_copy162+4>>2]=HEAP32[26352+4>>2]|0;HEAP32[$font$byval_copy162+8>>2]=HEAP32[26352+8>>2]|0;HEAP32[$font$byval_copy162+12>>2]=HEAP32[26352+12>>2]|0;HEAP32[$font$byval_copy162+16>>2]=HEAP32[26352+16>>2]|0;HEAP32[$font$byval_copy162+20>>2]=HEAP32[26352+20>>2]|0;HEAP32[$font$byval_copy162+24>>2]=HEAP32[26352+24>>2]|0;HEAP32[$font$byval_copy162+28>>2]=HEAP32[26352+28>>2]|0;
  ;HEAP32[$$byval_copy163>>2]=HEAP32[$148>>2]|0;HEAP32[$$byval_copy163+4>>2]=HEAP32[$148+4>>2]|0;
  ;HEAP8[$tmpcast318$byval_copy>>0]=HEAP8[$149>>0]|0;HEAP8[$tmpcast318$byval_copy+1>>0]=HEAP8[$149+1>>0]|0;HEAP8[$tmpcast318$byval_copy+2>>0]=HEAP8[$149+2>>0]|0;HEAP8[$tmpcast318$byval_copy+3>>0]=HEAP8[$149+3>>0]|0;
  _DrawTextEx($font$byval_copy162,7706,$$byval_copy163,$846,1,$tmpcast318$byval_copy);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _UnloadEndingScreen() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _FinishEndingScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[83709]|0;
 return ($0|0);
}
function _tinfl_decompress($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$$301127 = 0, $$010861840 = 0, $$010871839 = 0, $$010881838 = 0, $$010911856 = 0, $$010941846 = 0, $$010951864 = 0, $$01097 = 0, $$01194 = 0, $$011971855 = 0, $$01202 = 0, $$01202$shrunk = 0, $$01203 = 0, $$01300 = 0, $$01300$shrunk = 0, $$01309 = 0, $$01410 = 0, $$01410$shrunk = 0, $$01411 = 0;
 var $$01411$shrunk = 0, $$01412 = 0, $$01413 = 0, $$01413$shrunk = 0, $$01416 = 0, $$01507 = 0, $$01607 = 0, $$01834 = 0, $$0937$lcssa = 0, $$09371833 = 0, $$0938$lcssa = 0, $$09381832 = 0, $$0941$lcssa = 0, $$09411816 = 0, $$09431831 = 0, $$09441830 = 0, $$0947 = 0, $$0947$shrunk = 0, $$0948 = 0, $$0949 = 0;
 var $$0950 = 0, $$0950$shrunk = 0, $$0951 = 0, $$0952 = 0, $$0952$shrunk = 0, $$0953 = 0, $$0956 = 0, $$0959 = 0, $$0959$shrunk = 0, $$0960 = 0, $$0963 = 0, $$0967 = 0, $$0971 = 0, $$0971$shrunk = 0, $$0972 = 0, $$0975 = 0, $$0978 = 0, $$0979 = 0, $$0979$shrunk = 0, $$0980 = 0;
 var $$0980$shrunk = 0, $$0981 = 0, $$0984 = 0, $$0987 = 0, $$0991 = 0, $$1$lcssa = 0, $$100 = 0, $$1001409 = 0, $$101426 = 0, $$101617 = 0, $$110891852 = 0, $$11098 = 0, $$11098$ph = 0, $$111427 = 0, $$111518 = 0, $$111618 = 0, $$11198 = 0, $$11204 = 0, $$11204$ph = 0, $$11310 = 0;
 var $$11310$ph = 0, $$11417 = 0, $$11508 = 0, $$11608 = 0, $$11818 = 0, $$121428 = 0, $$121428$ph = 0, $$121519 = 0, $$121619 = 0, $$121619$ph = 0, $$13 = 0, $$131004 = 0, $$131110 = 0, $$131216 = 0, $$131322 = 0, $$131429 = 0, $$131520 = 0, $$131620 = 0, $$14 = 0, $$141005 = 0;
 var $$141111 = 0, $$141217 = 0, $$141323 = 0, $$141430 = 0, $$141521 = 0, $$141621 = 0, $$15 = 0, $$151006 = 0, $$151112 = 0, $$151218 = 0, $$151324 = 0, $$151431 = 0, $$151522 = 0, $$151622 = 0, $$16 = 0, $$161007 = 0, $$161113 = 0, $$161113$ph = 0, $$161219 = 0, $$161325 = 0;
 var $$161432 = 0, $$161523 = 0, $$161623 = 0, $$17 = 0, $$17$ph = 0, $$171008 = 0, $$171008$ph = 0, $$171114 = 0, $$171220 = 0, $$171220$ph = 0, $$171326 = 0, $$171326$ph = 0, $$171433 = 0, $$171524 = 0, $$171624 = 0, $$1753 = 0, $$1754 = 0, $$18 = 0, $$181009 = 0, $$181115 = 0;
 var $$181221 = 0, $$181327 = 0, $$181434 = 0, $$181525 = 0, $$181625 = 0, $$19 = 0, $$191010 = 0, $$191116 = 0, $$191222 = 0, $$191328 = 0, $$191435 = 0, $$191526 = 0, $$191626 = 0, $$1939$lcssa = 0, $$19391817 = 0, $$19421823 = 0, $$1945$lcssa = 0, $$19451815 = 0, $$1954 = 0, $$1957 = 0;
 var $$1961 = 0, $$1961$ = 0, $$1964 = 0, $$1968 = 0, $$1973 = 0, $$1976 = 0, $$1982 = 0, $$1985 = 0, $$1988 = 0, $$1988$ph = 0, $$1992 = 0, $$1992$ph = 0, $$2$lcssa = 0, $$20 = 0, $$201011 = 0, $$201117 = 0, $$201223 = 0, $$201329 = 0, $$201436 = 0, $$201527 = 0;
 var $$201627 = 0, $$21 = 0, $$21099 = 0, $$211012 = 0, $$211118 = 0, $$211224 = 0, $$211330 = 0, $$211437 = 0, $$211437$ph = 0, $$211528 = 0, $$211628 = 0, $$211628$ph = 0, $$21196 = 0, $$21199$lcssa = 0, $$211991845 = 0, $$21205 = 0, $$21311 = 0, $$21418 = 0, $$21509 = 0, $$21609 = 0;
 var $$21825 = 0, $$22 = 0, $$221013 = 0, $$221119 = 0, $$221225 = 0, $$221331 = 0, $$221438 = 0, $$221529 = 0, $$221629 = 0, $$23 = 0, $$231014 = 0, $$231120 = 0, $$231226 = 0, $$231332 = 0, $$231439 = 0, $$231530 = 0, $$231630 = 0, $$24 = 0, $$241015 = 0, $$241121 = 0;
 var $$241227 = 0, $$241333 = 0, $$241440 = 0, $$241531 = 0, $$241631 = 0, $$25 = 0, $$251016 = 0, $$251122 = 0, $$251122$ph = 0, $$251228 = 0, $$251334 = 0, $$251441 = 0, $$251532 = 0, $$251632 = 0, $$26 = 0, $$26$ph = 0, $$261017 = 0, $$261017$ph = 0, $$261123 = 0, $$261229 = 0;
 var $$261229$ph = 0, $$261335 = 0, $$261335$ph = 0, $$261442 = 0, $$261533 = 0, $$261633 = 0, $$27 = 0, $$271018 = 0, $$271124 = 0, $$271230 = 0, $$271336 = 0, $$271443 = 0, $$271534 = 0, $$271634 = 0, $$28 = 0, $$281019 = 0, $$281125 = 0, $$281231 = 0, $$281337 = 0, $$281444 = 0;
 var $$281535 = 0, $$281635 = 0, $$29 = 0, $$291020 = 0, $$291126 = 0, $$291232 = 0, $$291338 = 0, $$291445 = 0, $$291536 = 0, $$291636 = 0, $$2940$lcssa = 0, $$29401824 = 0, $$2946$lcssa = 0, $$29461822 = 0, $$2955 = 0, $$2958 = 0, $$2965 = 0, $$2969 = 0, $$2974 = 0, $$2977 = 0;
 var $$2983 = 0, $$2986 = 0, $$2989 = 0, $$2993 = 0, $$30 = 0, $$301021 = 0, $$301127 = 0, $$301233 = 0, $$301339 = 0, $$301446 = 0, $$301537 = 0, $$301637 = 0, $$31 = 0, $$31100$v = 0, $$311022 = 0, $$311128 = 0, $$311234 = 0, $$311340 = 0, $$311447 = 0, $$311538 = 0;
 var $$311638 = 0, $$31200 = 0, $$31206 = 0, $$31206$ph = 0, $$31312 = 0, $$31312$ph = 0, $$31419 = 0, $$31419$ph = 0, $$31610 = 0, $$31610$ph = 0, $$32 = 0, $$321023 = 0, $$321129 = 0, $$321235 = 0, $$321341 = 0, $$321448 = 0, $$321448$ph = 0, $$321539 = 0, $$321639 = 0, $$321639$ph = 0;
 var $$33 = 0, $$331024 = 0, $$331130 = 0, $$331236 = 0, $$331342 = 0, $$331449 = 0, $$331540 = 0, $$331640 = 0, $$34 = 0, $$341025 = 0, $$341131 = 0, $$341237 = 0, $$341343 = 0, $$341450 = 0, $$341541 = 0, $$341641 = 0, $$35 = 0, $$351026 = 0, $$351132 = 0, $$351238 = 0;
 var $$351344 = 0, $$351451 = 0, $$351542 = 0, $$351642 = 0, $$36 = 0, $$361027 = 0, $$361027$ph = 0, $$361133 = 0, $$361133$ph = 0, $$361239 = 0, $$361345 = 0, $$361452 = 0, $$361543 = 0, $$361643 = 0, $$37 = 0, $$37$ph = 0, $$371028 = 0, $$371134 = 0, $$371240 = 0, $$371240$ph = 0;
 var $$371346 = 0, $$371346$ph = 0, $$371453 = 0, $$371453$ph = 0, $$371544 = 0, $$371644 = 0, $$371644$ph = 0, $$38 = 0, $$381029 = 0, $$381135 = 0, $$381241 = 0, $$381347 = 0, $$381454 = 0, $$381545 = 0, $$381645 = 0, $$39 = 0, $$391030 = 0, $$391136 = 0, $$391242 = 0, $$391348 = 0;
 var $$391455 = 0, $$391546 = 0, $$391646 = 0, $$3966 = 0, $$3970 = 0, $$3990 = 0, $$3990$ph = 0, $$3994 = 0, $$3994$ph = 0, $$40 = 0, $$401031 = 0, $$401137 = 0, $$401243 = 0, $$401349 = 0, $$401456 = 0, $$401547 = 0, $$401647 = 0, $$41 = 0, $$411032 = 0, $$411032$ph = 0;
 var $$411138 = 0, $$411138$ph = 0, $$411244 = 0, $$411350 = 0, $$411457 = 0, $$411548 = 0, $$411648 = 0, $$41201 = 0, $$41420 = 0, $$41511 = 0, $$41611 = 0, $$42 = 0, $$42$ph = 0, $$421033 = 0, $$421139 = 0, $$421245 = 0, $$421245$ph = 0, $$421351 = 0, $$421351$ph = 0, $$421458 = 0;
 var $$421549 = 0, $$421649 = 0, $$43 = 0, $$431034 = 0, $$431140 = 0, $$431246 = 0, $$431352 = 0, $$431459 = 0, $$431550 = 0, $$431650 = 0, $$44 = 0, $$441035 = 0, $$441141 = 0, $$441247 = 0, $$441353 = 0, $$441460 = 0, $$441460$ph = 0, $$441551 = 0, $$441651 = 0, $$441651$ph = 0;
 var $$45 = 0, $$451036 = 0, $$451142 = 0, $$451248 = 0, $$451354 = 0, $$451461 = 0, $$451552 = 0, $$451652 = 0, $$46 = 0, $$461037 = 0, $$461143 = 0, $$461249 = 0, $$461355 = 0, $$461462 = 0, $$461553 = 0, $$461653 = 0, $$47 = 0, $$471038 = 0, $$471144 = 0, $$471250 = 0;
 var $$471356 = 0, $$471463 = 0, $$471554 = 0, $$471654 = 0, $$48 = 0, $$481039 = 0, $$481039$ph = 0, $$481145 = 0, $$481145$ph = 0, $$481251 = 0, $$481357 = 0, $$481464 = 0, $$481555 = 0, $$481655 = 0, $$49 = 0, $$49$ph = 0, $$491040 = 0, $$491146 = 0, $$491252 = 0, $$491252$ph = 0;
 var $$491358 = 0, $$491358$ph = 0, $$491465 = 0, $$491465$ph = 0, $$491556 = 0, $$491656 = 0, $$491656$ph = 0, $$5 = 0, $$50 = 0, $$501041 = 0, $$501147 = 0, $$501253 = 0, $$501359 = 0, $$501466 = 0, $$501557 = 0, $$501657 = 0, $$51 = 0, $$51102 = 0, $$511042 = 0, $$511148 = 0;
 var $$511254 = 0, $$511360 = 0, $$511467 = 0, $$511558 = 0, $$511658 = 0, $$51208 = 0, $$51314 = 0, $$51512 = 0, $$52 = 0, $$521043 = 0, $$521043$ph = 0, $$521149 = 0, $$521255 = 0, $$521361 = 0, $$521468 = 0, $$521559 = 0, $$521659 = 0, $$53 = 0, $$531044 = 0, $$531150 = 0;
 var $$531150$ph = 0, $$531256 = 0, $$531362 = 0, $$531469 = 0, $$531560 = 0, $$531660 = 0, $$54 = 0, $$54$ph = 0, $$541045 = 0, $$541151 = 0, $$541257 = 0, $$541257$ph = 0, $$541363 = 0, $$541363$ph = 0, $$541470$ph = 0, $$541561 = 0, $$541661$lcssa = 0, $$541661$ph = 0, $$5416611868 = 0, $$55 = 0;
 var $$551046 = 0, $$551152 = 0, $$551258 = 0, $$551364 = 0, $$551471 = 0, $$551562 = 0, $$551662 = 0, $$56 = 0, $$561047 = 0, $$561153 = 0, $$561259 = 0, $$561365 = 0, $$561472 = 0, $$561563 = 0, $$561663 = 0, $$57 = 0, $$571048$ph = 0, $$571154 = 0, $$571260 = 0, $$571366 = 0;
 var $$571473 = 0, $$571473$ph = 0, $$571564 = 0, $$571664 = 0, $$571664$ph = 0, $$58 = 0, $$581049 = 0, $$581155$lcssa = 0, $$581155$ph = 0, $$5811551871 = 0, $$581261 = 0, $$581367 = 0, $$581474 = 0, $$581565$lcssa = 0, $$581565$ph = 0, $$5815651869 = 0, $$581665 = 0, $$59$lcssa = 0, $$59$ph = 0, $$591050 = 0;
 var $$591156 = 0, $$591262$ph = 0, $$591368$lcssa = 0, $$591368$ph = 0, $$5913681870 = 0, $$591475 = 0, $$591566 = 0, $$591666 = 0, $$591872 = 0, $$5996 = 0, $$6 = 0, $$60 = 0, $$601051 = 0, $$601051$ph = 0, $$601157 = 0, $$601263 = 0, $$601369 = 0, $$601476 = 0, $$601567 = 0, $$61 = 0;
 var $$61103 = 0, $$611052 = 0, $$611158 = 0, $$611158$ph = 0, $$611264 = 0, $$611370 = 0, $$611477 = 0, $$611568 = 0, $$611668 = 0, $$61209 = 0, $$61315 = 0, $$61513 = 0, $$62 = 0, $$62$ph = 0, $$621053 = 0, $$621159 = 0, $$621265 = 0, $$621265$ph = 0, $$621371 = 0, $$621371$ph = 0;
 var $$621478 = 0, $$621569 = 0, $$621669 = 0, $$63 = 0, $$631054 = 0, $$631266 = 0, $$631372 = 0, $$631479 = 0, $$631479$ph = 0, $$631570 = 0, $$631670 = 0, $$64 = 0, $$641055 = 0, $$641161 = 0, $$641267 = 0, $$641373 = 0, $$641480 = 0, $$641571 = 0, $$641671 = 0, $$641671$ph = 0;
 var $$65 = 0, $$651056 = 0, $$651162 = 0, $$651268 = 0, $$651374 = 0, $$651481 = 0, $$651572 = 0, $$651672 = 0, $$66 = 0, $$661057 = 0, $$661057$ph = 0, $$661163 = 0, $$661269 = 0, $$661375 = 0, $$661482 = 0, $$661673 = 0, $$671058 = 0, $$671164 = 0, $$671164$ph = 0, $$671270 = 0;
 var $$671483 = 0, $$671574 = 0, $$671674 = 0, $$68 = 0, $$681059 = 0, $$681165 = 0, $$681271 = 0, $$681271$ph = 0, $$681377 = 0, $$681484 = 0, $$681484$ph = 0, $$681575 = 0, $$681675 = 0, $$69 = 0, $$691060 = 0, $$691166 = 0, $$691272 = 0, $$691378 = 0, $$691485 = 0, $$691576 = 0;
 var $$691676 = 0, $$691676$ph = 0, $$6997 = 0, $$7 = 0, $$70 = 0, $$701061 = 0, $$701167 = 0, $$701273 = 0, $$701379 = 0, $$701486 = 0, $$701577 = 0, $$701677 = 0, $$71 = 0, $$71$ph = 0, $$71104 = 0, $$711062 = 0, $$711062$ph = 0, $$711168 = 0, $$711274 = 0, $$711380 = 0;
 var $$711380$ph = 0, $$711487 = 0, $$711578 = 0, $$711678 = 0, $$71210 = 0, $$71316 = 0, $$71514 = 0, $$72 = 0, $$721063 = 0, $$721169 = 0, $$721169$ph = 0, $$721275 = 0, $$721381 = 0, $$721488 = 0, $$721488$ph = 0, $$721579 = 0, $$721679 = 0, $$73 = 0, $$731064 = 0, $$731170 = 0;
 var $$731276 = 0, $$731276$ph = 0, $$731382 = 0, $$731489 = 0, $$731580 = 0, $$731680 = 0, $$731680$ph = 0, $$74 = 0, $$741065 = 0, $$741065$ph = 0, $$741171 = 0, $$741277 = 0, $$741383 = 0, $$741490 = 0, $$741581 = 0, $$741681 = 0, $$75 = 0, $$751066 = 0, $$751172 = 0, $$751278 = 0;
 var $$751384 = 0, $$751491 = 0, $$751582 = 0, $$751682 = 0, $$76 = 0, $$76$ph = 0, $$761067 = 0, $$761173 = 0, $$761173$ph = 0, $$761279 = 0, $$761279$ph = 0, $$761385 = 0, $$761385$ph = 0, $$761492 = 0, $$761583 = 0, $$761683 = 0, $$77 = 0, $$771068 = 0, $$771174 = 0, $$771280 = 0;
 var $$771386 = 0, $$771584 = 0, $$771684 = 0, $$78 = 0, $$781069 = 0, $$781175 = 0, $$781281 = 0, $$781387 = 0, $$781585 = 0, $$781685 = 0, $$79 = 0, $$791070 = 0, $$791176 = 0, $$791282 = 0, $$791388 = 0, $$791586 = 0, $$791686 = 0, $$7998 = 0, $$8 = 0, $$8$ph = 0;
 var $$80 = 0, $$80$ph = 0, $$801071 = 0, $$801177 = 0, $$801283 = 0, $$801389 = 0, $$801389$ph = 0, $$801496 = 0, $$801587 = 0, $$801687 = 0, $$81 = 0, $$81105 = 0, $$81105$ph = 0, $$811178 = 0, $$811284 = 0, $$811390 = 0, $$811497 = 0, $$811588 = 0, $$81211 = 0, $$81211$ph = 0;
 var $$81317 = 0, $$81317$ph = 0, $$81424 = 0, $$81515 = 0, $$81615 = 0, $$82 = 0, $$821179 = 0, $$821285 = 0, $$821391 = 0, $$821498 = 0, $$821589 = 0, $$83 = 0, $$831180 = 0, $$831392 = 0, $$831499 = 0, $$831590 = 0, $$84 = 0, $$841075 = 0, $$841393 = 0, $$841500 = 0;
 var $$841500$ph = 0, $$841591 = 0, $$841691 = 0, $$85 = 0, $$851076 = 0, $$851394 = 0, $$851501 = 0, $$851592 = 0, $$851692 = 0, $$86 = 0, $$861077 = 0, $$861289 = 0, $$861395 = 0, $$861502 = 0, $$861693 = 0, $$871078 = 0, $$871184 = 0, $$871290 = 0, $$871503 = 0, $$871694 = 0;
 var $$881079 = 0, $$881079$ph = 0, $$881185 = 0, $$881291 = 0, $$881504 = 0, $$881595 = 0, $$881695 = 0, $$881695$ph = 0, $$891080 = 0, $$891186 = 0, $$891292 = 0, $$891505 = 0, $$891596 = 0, $$891696 = 0, $$8999 = 0, $$8999$ph = 0, $$9 = 0, $$90 = 0, $$901081 = 0, $$901187 = 0;
 var $$901187$ph = 0, $$901293 = 0, $$901293$ph = 0, $$901399 = 0, $$901506 = 0, $$901597 = 0, $$901697 = 0, $$91 = 0, $$91000 = 0, $$91106 = 0, $$911082 = 0, $$911188 = 0, $$911294 = 0, $$911400 = 0, $$911598 = 0, $$911698 = 0, $$91212 = 0, $$91318 = 0, $$91425 = 0, $$91616 = 0;
 var $$92 = 0, $$921083 = 0, $$921189 = 0, $$921295 = 0, $$921401 = 0, $$921599 = 0, $$921699 = 0, $$93 = 0, $$931084 = 0, $$931190 = 0, $$931296 = 0, $$931402 = 0, $$931600 = 0, $$931700 = 0, $$94 = 0, $$94$ph = 0, $$941085 = 0, $$941191 = 0, $$941297 = 0, $$941403 = 0;
 var $$941403$ph = 0, $$941601 = 0, $$941701 = 0, $$95 = 0, $$951192 = 0, $$951298 = 0, $$951404 = 0, $$951602 = 0, $$96 = 0, $$961193 = 0, $$961299 = 0, $$961405 = 0, $$961603 = 0, $$97 = 0, $$971406 = 0, $$971604 = 0, $$98 = 0, $$981407 = 0, $$981605 = 0, $$99 = 0;
 var $$991408 = 0, $$991606 = 0, $$lcssa1778 = 0, $$lcssa1779 = 0, $$lcssa1799 = 0, $$lcssa1802 = 0, $$not = 0, $$not1747 = 0, $$sink12 = 0, $$sink13 = 0, $$sink16 = 0, $$sink17 = 0, $$sink1705 = 0, $$sink1710 = 0, $$sink1713 = 0, $$sink1716 = 0, $$sink1719 = 0, $$sink1722 = 0, $$sink1729 = 0, $$sink1732 = 0;
 var $$sink1736 = 0, $$sink1739 = 0, $$sink1743 = 0, $$sink1746 = 0, $$sink1750 = 0, $$sink3 = 0, $$sink3$shrunk = 0, $$sink30 = 0, $$sink9 = 0, $$sink9$shrunk = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $not$ = 0, $not$1755 = 0, $or$cond = 0, $or$cond1702 = 0, $or$cond1752 = 0, $or$cond24 = 0, $or$cond29 = 0, $scevgep = 0;
 var $scevgep1947 = 0, $scevgep1948 = 0, $scevgep1955 = 0, $scevgep1957 = 0, $scevgep1959 = 0, $scevgep19611962 = 0, $trunc = 0, $trunc$clear = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $7 = sp + 64|0;
 $8 = sp;
 $9 = HEAP32[$2>>2]|0;
 $10 = (($1) + ($9)|0);
 $11 = HEAP32[$5>>2]|0;
 $12 = (($4) + ($11)|0);
 $13 = $6 & 4;
 $14 = ($13|0)!=(0);
 $15 = $4;
 $16 = $3;
 $17 = $16 ^ -1;
 $18 = (($15) + ($17))|0;
 $19 = (($18) + ($11))|0;
 $$1753 = $14 ? -1 : $19;
 $20 = (($$1753) + 1)|0;
 $21 = $20 & $$1753;
 $22 = ($21|0)!=(0);
 $23 = ($4>>>0)<($3>>>0);
 $or$cond1702 = $23 | $22;
 if ($or$cond1702) {
  HEAP32[$5>>2] = 0;
  HEAP32[$2>>2] = 0;
  $$0951 = -3;
  STACKTOP = sp;return ($$0951|0);
 }
 $24 = ((($0)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($0)) + 56|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($0)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($0)) + 36|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($0)) + 40|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($0)) + 60|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$0>>2]|0;
 L5: do {
  switch ($36|0) {
  case 0:  {
   $37 = ((($0)) + 12|0);
   HEAP32[$37>>2] = 0;
   $38 = ((($0)) + 8|0);
   HEAP32[$38>>2] = 0;
   $39 = ((($0)) + 28|0);
   HEAP32[$39>>2] = 1;
   $40 = ((($0)) + 16|0);
   HEAP32[$40>>2] = 1;
   $41 = $6 & 1;
   $42 = ($41|0)==(0);
   if ($42) {
    $$01416 = $35;$$01607 = $4;$$41511 = $1;$$5 = 0;$$51102 = 0;$$51208 = 0;$$51314 = 0;$$5996 = 0;
    label = 14;
   } else {
    $43 = ($9|0)<(1);
    if ($43) {
     $$01097 = 0;$$01203 = 0;$$01309 = 0;$$0987 = 0;$$0991 = 0;
     label = 6;
    } else {
     $$11098$ph = 0;$$11204$ph = 0;$$11310$ph = 0;$$1988$ph = 0;$$1992$ph = 0;
     label = 8;
    }
   }
   break;
  }
  case 1:  {
   $46 = ($9|0)>(0);
   if ($46) {
    $$11098$ph = $31;$$11204$ph = $33;$$11310$ph = $27;$$1988$ph = $25;$$1992$ph = $29;
    label = 8;
   } else {
    $$01097 = $31;$$01203 = $33;$$01309 = $27;$$0987 = $25;$$0991 = $29;
    label = 6;
   }
   break;
  }
  case 2:  {
   $53 = ($9|0)>(0);
   if ($53) {
    $$31206$ph = $33;$$31312$ph = $27;$$3990$ph = $25;$$3994$ph = $29;$$sink1705 = $1;
    label = 12;
   } else {
    $$11508 = $1;$$21099 = $31;$$21205 = $33;$$21311 = $27;$$2989 = $25;$$2993 = $29;
    label = 10;
   }
   break;
  }
  case 36:  {
   $$0960 = -1;$$891505 = $35;$$931084 = $29;$$931700 = $4;$$951192 = $31;$$951298 = $33;$$981605 = $1;$$99 = $25;$$991408 = $27;$$sink30 = 36;
   label = 243;
   break;
  }
  case 3:  {
   $75 = ($9|0)>(0);
   if ($75) {
    $$31419$ph = $35;$$31610$ph = $4;$$8$ph = $25;$$81105$ph = $31;$$81211$ph = $33;$$81317$ph = $27;$$8999$ph = $29;$$sink1710 = $1;
    label = 18;
   } else {
    $$21418 = $35;$$21609 = $4;$$61513 = $1;$$7 = $25;$$71104 = $31;$$71210 = $33;$$71316 = $27;$$7998 = $29;
    label = 16;
   }
   break;
  }
  case 5:  {
   $90 = ($9|0)>(0);
   if ($90) {
    $91 = ((($1)) + 1|0);
    $92 = HEAP8[$1>>0]|0;
    $93 = $92&255;
    $$01412 = $93;$$111518 = $91;
   } else {
    $88 = $6 & 2;
    $89 = ($88|0)==(0);
    if ($89) {
     $$01412 = 0;$$111518 = $1;
    } else {
     $$0960 = 1;$$891505 = $35;$$931084 = $29;$$931700 = $4;$$951192 = $31;$$951298 = $33;$$981605 = $1;$$99 = $25;$$991408 = $27;$$sink30 = 5;
     label = 243;
     break L5;
    }
   }
   $94 = $$01412 << $25;
   $95 = $94 | $27;
   $96 = (($25) + 8)|0;
   $$121519 = $$111518;$$13 = $96;$$131004 = $29;$$131216 = $33;$$131322 = $95;$$81424 = $35;$$81615 = $4;
   label = 25;
   break;
  }
  case 6:  {
   $106 = ($9|0)>(0);
   if ($106) {
    $$121428$ph = $35;$$121619$ph = $4;$$161113$ph = $31;$$17$ph = $25;$$171008$ph = $29;$$171220$ph = $33;$$171326$ph = $27;$$sink1713 = $1;
    label = 32;
   } else {
    $$111427 = $35;$$111618 = $4;$$151112 = $31;$$151522 = $1;$$16 = $25;$$161007 = $29;$$161219 = $33;$$161325 = $27;
    label = 30;
   }
   break;
  }
  case 7:  {
   $120 = ($9|0)>(0);
   if ($120) {
    $121 = ((($1)) + 1|0);
    $122 = HEAP8[$1>>0]|0;
    $$151431 = $35;$$151622 = $4;$$191116 = $31;$$191526 = $121;$$20 = $25;$$201011 = $29;$$201223 = $33;$$201329 = $27;$$sink12 = $122;
    label = 39;
   } else {
    $$141430 = $35;$$141621 = $4;$$181115 = $31;$$181525 = $1;$$19 = $25;$$191010 = $29;$$191222 = $33;$$191328 = $27;
    label = 36;
   }
   break;
  }
  case 39:  {
   $$171433 = $35;$$171624 = $4;$$211118 = $31;$$211528 = $1;$$22 = $25;$$221013 = $29;$$221225 = $33;$$221331 = $27;
   label = 43;
   break;
  }
  case 51:  {
   $152 = ($9|0)>(0);
   if ($152) {
    $$211437$ph = $35;$$211628$ph = $4;$$251122$ph = $31;$$26$ph = $25;$$261017$ph = $29;$$261229$ph = $33;$$261335$ph = $27;$$sink1716 = $1;
    label = 49;
   } else {
    $$201436 = $35;$$201627 = $4;$$241121 = $31;$$241531 = $1;$$25 = $25;$$251016 = $29;$$251228 = $33;$$251334 = $27;
    label = 47;
   }
   break;
  }
  case 52:  {
   $$231439 = $35;$$231630 = $4;$$271018 = $29;$$271124 = $31;$$271534 = $1;$$28 = $25;$$281231 = $33;$$281337 = $27;
   label = 52;
   break;
  }
  case 9:  {
   $$251441 = $35;$$251632 = $4;$$291020 = $29;$$291126 = $31;$$291536 = $1;$$30 = $25;$$301233 = $33;$$301339 = $27;
   label = 55;
   break;
  }
  case 38:  {
   $$261442 = $35;$$261633 = $4;$$301021 = $29;$$301127 = $31;$$301537 = $1;$$31 = $25;$$311234 = $33;$$311340 = $27;
   label = 56;
   break;
  }
  case 40:  {
   $$271443 = $35;$$271634 = $4;$$311022 = $29;$$311128 = $31;$$311538 = $1;$$32 = $25;$$321235 = $33;$$321341 = $27;
   label = 58;
   break;
  }
  case 10:  {
   $$281444 = $35;$$281635 = $4;$$321023 = $29;$$321129 = $31;$$321539 = $1;$$33 = $25;$$331236 = $33;$$331342 = $27;
   label = 60;
   break;
  }
  case 11:  {
   $193 = ($9|0)>(0);
   if ($193) {
    $$321448$ph = $35;$$321639$ph = $4;$$361027$ph = $29;$$361133$ph = $31;$$37$ph = $25;$$371240$ph = $33;$$371346$ph = $27;$$sink1719 = $1;
    label = 66;
   } else {
    $$311447 = $35;$$311638 = $4;$$351026 = $29;$$351132 = $31;$$351542 = $1;$$36 = $25;$$361239 = $33;$$361345 = $27;
    label = 64;
   }
   break;
  }
  case 14:  {
   $224 = ($9|0)>(0);
   if ($224) {
    $$371453$ph = $35;$$371644$ph = $4;$$411032$ph = $29;$$411138$ph = $31;$$42$ph = $25;$$421245$ph = $33;$$421351$ph = $27;$$sink1722 = $1;
    label = 75;
   } else {
    $$361452 = $35;$$361643 = $4;$$401031 = $29;$$401137 = $31;$$401547 = $1;$$41 = $25;$$411244 = $33;$$411350 = $27;
    label = 73;
   }
   break;
  }
  case 35:  {
   $$401456 = $35;$$401647 = $4;$$441035 = $29;$$441141 = $31;$$441551 = $1;$$45 = $25;$$451248 = $33;$$451354 = $27;
   label = 86;
   break;
  }
  case 16:  {
   $452 = ($9|0)>(0);
   if ($452) {
    $$441460$ph = $35;$$441651$ph = $4;$$481039$ph = $29;$$481145$ph = $31;$$49$ph = $25;$$491252$ph = $33;$$491358$ph = $27;$$sink1729 = $1;
    label = 116;
   } else {
    $$431459 = $35;$$431650 = $4;$$471038 = $29;$$471144 = $31;$$471554 = $1;$$48 = $25;$$481251 = $33;$$481357 = $27;
    label = 114;
   }
   break;
  }
  case 17:  {
   $$461462 = $35;$$461653 = $4;$$491040 = $29;$$501147 = $31;$$501557 = $1;$$51 = $25;$$511254 = $33;$$511360 = $27;
   label = 125;
   break;
  }
  case 18:  {
   $503 = ($9|0)>(0);
   if ($503) {
    $$491465$ph = $35;$$491656$ph = $4;$$521043$ph = $29;$$531150$ph = $31;$$54$ph = $25;$$541257$ph = $33;$$541363$ph = $27;$$sink1732 = $1;
    label = 130;
   } else {
    $$481464 = $35;$$481655 = $4;$$511042 = $29;$$521149 = $31;$$521559 = $1;$$53 = $25;$$531256 = $33;$$531362 = $27;
    label = 128;
   }
   break;
  }
  case 21:  {
   $$511467 = $35;$$511658 = $4;$$541045 = $29;$$551152 = $31;$$551562 = $1;$$56 = $25;$$561259 = $33;$$561365 = $27;
   label = 136;
   break;
  }
  case 23:  {
   $572 = ($9|0)>(0);
   if ($572) {
    $$571473$ph = $35;$$571664$ph = $4;$$601051$ph = $29;$$611158$ph = $31;$$62$ph = $25;$$621265$ph = $33;$$621371$ph = $27;$$sink1736 = $1;
    label = 153;
   } else {
    $$561472 = $35;$$561663 = $4;$$591050 = $29;$$601157 = $31;$$601567 = $1;$$61 = $25;$$611264 = $33;$$611370 = $27;
    label = 151;
   }
   break;
  }
  case 24:  {
   $$591475 = $35;$$591666 = $4;$$621053 = $29;$$621159 = $31;$$631570 = $1;$$64 = $25;$$641267 = $33;$$641373 = $27;
   label = 160;
   break;
  }
  case 25:  {
   $696 = ($9|0)>(0);
   if ($696) {
    $$631479$ph = $35;$$641671$ph = $4;$$661057$ph = $29;$$671164$ph = $31;$$681271$ph = $33;$$71$ph = $25;$$711380$ph = $27;$$sink1739 = $1;
    label = 182;
   } else {
    $$621478 = $35;$$631670 = $4;$$651056 = $29;$$661163 = $31;$$671270 = $33;$$691576 = $1;$$70 = $25;$$701379 = $27;
    label = 180;
   }
   break;
  }
  case 26:  {
   $737 = ($9|0)>(0);
   if ($737) {
    $$681484$ph = $35;$$691676$ph = $4;$$711062$ph = $29;$$721169$ph = $31;$$731276$ph = $33;$$76$ph = $25;$$761385$ph = $27;$$sink1743 = $1;
    label = 195;
   } else {
    $$671483 = $35;$$681675 = $4;$$701061 = $29;$$711168 = $31;$$721275 = $33;$$741581 = $1;$$75 = $25;$$751384 = $27;
    label = 193;
   }
   break;
  }
  case 27:  {
   $784 = ($9|0)>(0);
   if ($784) {
    $$721488$ph = $35;$$731680$ph = $4;$$741065$ph = $29;$$761173$ph = $31;$$761279$ph = $33;$$80$ph = $25;$$801389$ph = $27;$$sink1746 = $1;
    label = 206;
   } else {
    $$711487 = $35;$$721679 = $4;$$731064 = $29;$$751172 = $31;$$751278 = $33;$$781585 = $1;$$79 = $25;$$791388 = $27;
    label = 204;
   }
   break;
  }
  case 37:  {
   $$731489 = $35;$$761683 = $4;$$771068 = $29;$$791176 = $31;$$791282 = $33;$$821589 = $1;$$83 = $25;$$831392 = $27;
   label = 210;
   break;
  }
  case 53:  {
   $$751491 = $35;$$781685 = $4;$$791070 = $29;$$811178 = $31;$$811284 = $33;$$841591 = $1;$$85 = $25;$$851394 = $27;
   label = 213;
   break;
  }
  case 32:  {
   $842 = ($9|0)>(0);
   if ($842) {
    $843 = ((($1)) + 1|0);
    $844 = HEAP8[$1>>0]|0;
    $845 = $844&255;
    $$0949 = $845;$$881595 = $843;
   } else {
    $840 = $6 & 2;
    $841 = ($840|0)==(0);
    if ($841) {
     $$0949 = 0;$$881595 = $1;
    } else {
     $$0960 = 1;$$891505 = $35;$$931084 = $29;$$931700 = $4;$$951192 = $31;$$951298 = $33;$$981605 = $1;$$99 = $25;$$991408 = $27;$$sink30 = 32;
     label = 243;
     break L5;
    }
   }
   $846 = $$0949 << $25;
   $847 = $846 | $27;
   $848 = (($25) + 8)|0;
   $$801496 = $35;$$841075 = $29;$$841691 = $4;$$861289 = $33;$$891596 = $$881595;$$90 = $848;$$901399 = $847;
   label = 226;
   break;
  }
  case 41:  {
   $858 = ($9|0)>(0);
   if ($858) {
    $$841500$ph = $35;$$881079$ph = $29;$$881695$ph = $4;$$901187$ph = $31;$$901293$ph = $33;$$94$ph = $25;$$941403$ph = $27;$$sink1750 = $1;
    label = 233;
   } else {
    $$831499 = $35;$$871078 = $29;$$871694 = $4;$$891186 = $31;$$891292 = $33;$$921599 = $1;$$93 = $25;$$931402 = $27;
    label = 231;
   }
   break;
  }
  case 42:  {
   $871 = ($9|0)>(0);
   if ($871) {
    $872 = ((($1)) + 1|0);
    $873 = HEAP8[$1>>0]|0;
    $874 = $873&255;
    $$0948 = $874;$$871503 = $35;$$911082 = $29;$$911698 = $4;$$931190 = $31;$$931296 = $33;$$961603 = $872;$$97 = $25;$$971406 = $27;
    label = 241;
   } else {
    $$861502 = $35;$$901081 = $29;$$901697 = $4;$$921189 = $31;$$921295 = $33;$$951602 = $1;$$96 = $25;$$961405 = $27;
    label = 237;
   }
   break;
  }
  case 34:  {
   $$881504 = $35;$$921083 = $29;$$921699 = $4;$$941191 = $31;$$941297 = $33;$$971604 = $1;$$98 = $25;$$981407 = $27;
   label = 242;
   break;
  }
  default: {
   $$100 = $25;$$1001409 = $27;$$1961 = -1;$$901506 = $35;$$941085 = $29;$$941701 = $4;$$961193 = $31;$$961299 = $33;$$991606 = $1;
   label = 244;
  }
  }
 } while(0);
 if ((label|0) == 6) {
  $44 = $6 & 2;
  $45 = ($44|0)==(0);
  if ($45) {
   $$01507 = $1;$$11098 = $$01097;$$11204 = $$01203;$$11310 = $$01309;$$1988 = $$0987;$$1992 = $$0991;$$sink3$shrunk = 0;
   label = 9;
  } else {
   $$0960 = 1;$$891505 = $35;$$931084 = $$0991;$$931700 = $4;$$951192 = $$01097;$$951298 = $$01203;$$981605 = $1;$$99 = $$0987;$$991408 = $$01309;$$sink30 = 1;
   label = 243;
  }
 }
 else if ((label|0) == 8) {
  $47 = ((($1)) + 1|0);
  $48 = HEAP8[$1>>0]|0;
  $$01507 = $47;$$11098 = $$11098$ph;$$11204 = $$11204$ph;$$11310 = $$11310$ph;$$1988 = $$1988$ph;$$1992 = $$1992$ph;$$sink3$shrunk = $48;
  label = 9;
 }
 if ((label|0) == 9) {
  $$sink3 = $$sink3$shrunk&255;
  $49 = ((($0)) + 8|0);
  HEAP32[$49>>2] = $$sink3;
  $50 = ($$01507>>>0)<($10>>>0);
  if ($50) {
   $$31206$ph = $$11204;$$31312$ph = $$11310;$$3990$ph = $$1988;$$3994$ph = $$1992;$$sink1705 = $$01507;
   label = 12;
  } else {
   $$11508 = $$01507;$$21099 = $$11098;$$21205 = $$11204;$$21311 = $$11310;$$2989 = $$1988;$$2993 = $$1992;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  $51 = $6 & 2;
  $52 = ($51|0)==(0);
  if ($52) {
   $$21509 = $$11508;$$31206 = $$21205;$$31312 = $$21311;$$3990 = $$2989;$$3994 = $$2993;$$sink9$shrunk = 0;
   label = 13;
  } else {
   $$0960 = 1;$$891505 = $35;$$931084 = $$2993;$$931700 = $4;$$951192 = $$21099;$$951298 = $$21205;$$981605 = $$11508;$$99 = $$2989;$$991408 = $$21311;$$sink30 = 2;
   label = 243;
  }
 }
 else if ((label|0) == 12) {
  $54 = ((($$sink1705)) + 1|0);
  $55 = HEAP8[$$sink1705>>0]|0;
  $$21509 = $54;$$31206 = $$31206$ph;$$31312 = $$31312$ph;$$3990 = $$3990$ph;$$3994 = $$3994$ph;$$sink9$shrunk = $55;
  label = 13;
 }
 if ((label|0) == 13) {
  $$sink9 = $$sink9$shrunk&255;
  $56 = ((($0)) + 12|0);
  HEAP32[$56>>2] = $$sink9;
  $57 = ((($0)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58 << 8;
  $60 = $59 | $$sink9;
  $61 = (($60>>>0) % 31)&-1;
  $62 = $$sink9 & 32;
  $63 = $61 | $62;
  $64 = $58 & 15;
  $65 = ($64|0)!=(8);
  $not$ = ($63|0)!=(0);
  $$1754 = $65 | $not$;
  $66 = $58 >>> 4;
  $67 = 256 << $66;
  $68 = ($67>>>0)>(32768);
  $69 = ($20>>>0)<($67>>>0);
  $$ = $68 | $69;
  $not$1755 = $14 ^ 1;
  $70 = $$ & $not$1755;
  $$31100$v = $70 | $$1754;
  if ($$31100$v) {
   $$0960 = -1;$$891505 = $35;$$931084 = $$3994;$$931700 = $4;$$951192 = 1;$$951298 = $$31206;$$981605 = $$21509;$$99 = $$3990;$$991408 = $$31312;$$sink30 = 36;
   label = 243;
  } else {
   $$01416 = $35;$$01607 = $4;$$41511 = $$21509;$$5 = $$3990;$$51102 = 0;$$51208 = $$31206;$$51314 = $$31312;$$5996 = $$3994;
   label = 14;
  }
 }
 L46: while(1) {
  switch (label|0) {
   case 14: {
    label = 0;
    $71 = ($$5>>>0)<(3);
    if ($71) {
     $$11417 = $$01416;$$11608 = $$01607;$$51512 = $$41511;$$6 = $$5;$$61103 = $$51102;$$61209 = $$51208;$$61315 = $$51314;$$6997 = $$5996;
     label = 15;
    } else {
     $$41420 = $$01416;$$41611 = $$01607;$$81515 = $$41511;$$9 = $$5;$$91000 = $$5996;$$91106 = $$51102;$$91212 = $$51208;$$91318 = $$51314;
     label = 20;
    }
    break;
   }
   case 16: {
    label = 0;
    $73 = $6 & 2;
    $74 = ($73|0)==(0);
    if ($74) {
     $$01413$shrunk = 0;$$31419 = $$21418;$$31610 = $$21609;$$71514 = $$61513;$$8 = $$7;$$81105 = $$71104;$$81211 = $$71210;$$81317 = $$71316;$$8999 = $$7998;
     label = 19;
    } else {
     $$0960 = 1;$$891505 = $$21418;$$931084 = $$7998;$$931700 = $$21609;$$951192 = $$71104;$$951298 = $$71210;$$981605 = $$61513;$$99 = $$7;$$991408 = $$71316;$$sink30 = 3;
     label = 243;
     continue L46;
    }
    break;
   }
   case 18: {
    label = 0;
    $76 = ((($$sink1710)) + 1|0);
    $77 = HEAP8[$$sink1710>>0]|0;
    $$01413$shrunk = $77;$$31419 = $$31419$ph;$$31610 = $$31610$ph;$$71514 = $76;$$8 = $$8$ph;$$81105 = $$81105$ph;$$81211 = $$81211$ph;$$81317 = $$81317$ph;$$8999 = $$8999$ph;
    label = 19;
    break;
   }
   case 25: {
    label = 0;
    $97 = $$13 & 7;
    $98 = $$131322 >>> $97;
    $99 = (($$13) - ($97))|0;
    $$131110 = 0;$$131520 = $$121519;$$14 = $99;$$141005 = $$131004;$$141217 = $$131216;$$141323 = $98;$$91425 = $$81424;$$91616 = $$81615;
    label = 26;
    break;
   }
   case 30: {
    label = 0;
    $104 = $6 & 2;
    $105 = ($104|0)==(0);
    if ($105) {
     $$01411$shrunk = 0;$$121428 = $$111427;$$121619 = $$111618;$$161113 = $$151112;$$161523 = $$151522;$$17 = $$16;$$171008 = $$161007;$$171220 = $$161219;$$171326 = $$161325;
     label = 33;
    } else {
     $$0960 = 1;$$891505 = $$111427;$$931084 = $$161007;$$931700 = $$111618;$$951192 = $$151112;$$951298 = $$161219;$$981605 = $$151522;$$99 = $$16;$$991408 = $$161325;$$sink30 = 6;
     label = 243;
     continue L46;
    }
    break;
   }
   case 32: {
    label = 0;
    $107 = ((($$sink1713)) + 1|0);
    $108 = HEAP8[$$sink1713>>0]|0;
    $$01411$shrunk = $108;$$121428 = $$121428$ph;$$121619 = $$121619$ph;$$161113 = $$161113$ph;$$161523 = $107;$$17 = $$17$ph;$$171008 = $$171008$ph;$$171220 = $$171220$ph;$$171326 = $$171326$ph;
    label = 33;
    break;
   }
   case 36: {
    label = 0;
    $118 = $6 & 2;
    $119 = ($118|0)==(0);
    if ($119) {
     $$151431 = $$141430;$$151622 = $$141621;$$191116 = $$181115;$$191526 = $$181525;$$20 = $$19;$$201011 = $$191010;$$201223 = $$191222;$$201329 = $$191328;$$sink12 = 0;
     label = 39;
     continue L46;
    } else {
     $$0960 = 1;$$891505 = $$141430;$$931084 = $$191010;$$931700 = $$141621;$$951192 = $$181115;$$951298 = $$191222;$$981605 = $$181525;$$99 = $$19;$$991408 = $$191328;$$sink30 = 7;
     label = 243;
     continue L46;
    }
    break;
   }
   case 39: {
    label = 0;
    $$sink13 = (((($0)) + 10528|0) + ($$191116)|0);
    HEAP8[$$sink13>>0] = $$sink12;
    $$161432 = $$151431;$$161623 = $$151622;$$201117 = $$191116;$$201527 = $$191526;$$21 = $$20;$$211012 = $$201011;$$211224 = $$201223;$$211330 = $$201329;
    label = 41;
    break;
   }
   case 43: {
    label = 0;
    $$0960 = -1;$$891505 = $$171433;$$931084 = $$221013;$$931700 = $$171624;$$951192 = $$211118;$$951298 = $$221225;$$981605 = $$211528;$$99 = $$22;$$991408 = $$221331;$$sink30 = 39;
    label = 243;
    continue L46;
    break;
   }
   case 47: {
    label = 0;
    $150 = $6 & 2;
    $151 = ($150|0)==(0);
    if ($151) {
     $$01410$shrunk = 0;$$211437 = $$201436;$$211628 = $$201627;$$251122 = $$241121;$$251532 = $$241531;$$26 = $$25;$$261017 = $$251016;$$261229 = $$251228;$$261335 = $$251334;
     label = 50;
    } else {
     $$0960 = 1;$$891505 = $$201436;$$931084 = $$251016;$$931700 = $$201627;$$951192 = $$241121;$$951298 = $$251228;$$981605 = $$241531;$$99 = $$25;$$991408 = $$251334;$$sink30 = 51;
     label = 243;
     continue L46;
    }
    break;
   }
   case 49: {
    label = 0;
    $153 = ((($$sink1716)) + 1|0);
    $154 = HEAP8[$$sink1716>>0]|0;
    $$01410$shrunk = $154;$$211437 = $$211437$ph;$$211628 = $$211628$ph;$$251122 = $$251122$ph;$$251532 = $153;$$26 = $$26$ph;$$261017 = $$261017$ph;$$261229 = $$261229$ph;$$261335 = $$261335$ph;
    label = 50;
    break;
   }
   case 52: {
    label = 0;
    $162 = ($$231630>>>0)<($12>>>0);
    if (!($162)) {
     $$0960 = 2;$$891505 = $$231439;$$931084 = $$271018;$$931700 = $$231630;$$951192 = $$271124;$$951298 = $$281231;$$981605 = $$271534;$$99 = $$28;$$991408 = $$281337;$$sink30 = 52;
     label = 243;
     continue L46;
    }
    $163 = $$271018&255;
    $164 = ((($$231630)) + 1|0);
    HEAP8[$$231630>>0] = $163;
    $165 = (($$271124) + -1)|0;
    $$181434 = $$231439;$$181625 = $164;$$221119 = $165;$$221529 = $$271534;$$23 = $$28;$$231014 = $$271018;$$231226 = $$281231;$$231332 = $$281337;
    label = 44;
    break;
   }
   case 55: {
    label = 0;
    $167 = ($$251632>>>0)<($12>>>0);
    if ($167) {
     $$261442 = $$251441;$$261633 = $$251632;$$301021 = $$291020;$$301127 = $$291126;$$301537 = $$291536;$$31 = $$30;$$311234 = $$301233;$$311340 = $$301339;
     label = 56;
     continue L46;
    } else {
     $$0960 = 2;$$891505 = $$251441;$$931084 = $$291020;$$931700 = $$251632;$$951192 = $$291126;$$951298 = $$301233;$$981605 = $$291536;$$99 = $$30;$$991408 = $$301339;$$sink30 = 9;
     label = 243;
     continue L46;
    }
    break;
   }
   case 56: {
    label = 0;
    $168 = ($$301537>>>0)<($10>>>0);
    if ($168) {
     $171 = $12;
     $172 = $$261633;
     $173 = (($171) - ($172))|0;
     $174 = $10;
     $175 = $$301537;
     $176 = (($174) - ($175))|0;
     $177 = ($173>>>0)<($176>>>0);
     $$sink17 = $177 ? $12 : $10;
     $$sink16 = $177 ? $$261633 : $$301537;
     $178 = $$sink17;
     $179 = $$sink16;
     $180 = (($178) - ($179))|0;
     $181 = ($180>>>0)<($$301127>>>0);
     $$$301127 = $181 ? $180 : $$301127;
     _memcpy(($$261633|0),($$301537|0),($$$301127|0))|0;
     $182 = (($$301537) + ($$$301127)|0);
     $183 = (($$261633) + ($$$301127)|0);
     $184 = (($$301127) - ($$$301127))|0;
     $$241440 = $$261442;$$241631 = $183;$$281019 = $$301021;$$281125 = $184;$$281535 = $182;$$29 = $$31;$$291232 = $$311234;$$291338 = $$311340;
     label = 54;
     break;
    } else {
     $169 = $6 & 2;
     $170 = ($169|0)==(0);
     if ($170) {
      $$271443 = $$261442;$$271634 = $$261633;$$311022 = $$301021;$$311128 = $$301127;$$311538 = $$301537;$$32 = $$31;$$321235 = $$311234;$$321341 = $$311340;
      label = 58;
      continue L46;
     } else {
      $$0960 = 1;$$891505 = $$261442;$$931084 = $$301021;$$931700 = $$261633;$$951192 = $$301127;$$951298 = $$311234;$$981605 = $$301537;$$99 = $$31;$$991408 = $$311340;$$sink30 = 38;
      label = 243;
      continue L46;
     }
    }
    break;
   }
   case 58: {
    label = 0;
    $$0960 = -1;$$891505 = $$271443;$$931084 = $$311022;$$931700 = $$271634;$$951192 = $$311128;$$951298 = $$321235;$$981605 = $$311538;$$99 = $$32;$$991408 = $$321341;$$sink30 = 40;
    label = 243;
    continue L46;
    break;
   }
   case 60: {
    label = 0;
    $$0960 = -1;$$891505 = $$281444;$$931084 = $$321023;$$931700 = $$281635;$$951192 = $$321129;$$951298 = $$331236;$$981605 = $$321539;$$99 = $$33;$$991408 = $$331342;$$sink30 = 10;
    label = 243;
    continue L46;
    break;
   }
   case 64: {
    label = 0;
    $191 = $6 & 2;
    $192 = ($191|0)==(0);
    if ($192) {
     $$01300$shrunk = 0;$$321448 = $$311447;$$321639 = $$311638;$$361027 = $$351026;$$361133 = $$351132;$$361543 = $$351542;$$37 = $$36;$$371240 = $$361239;$$371346 = $$361345;
     label = 67;
    } else {
     $$0960 = 1;$$891505 = $$311447;$$931084 = $$351026;$$931700 = $$311638;$$951192 = $$351132;$$951298 = $$361239;$$981605 = $$351542;$$99 = $$36;$$991408 = $$361345;$$sink30 = 11;
     label = 243;
     continue L46;
    }
    break;
   }
   case 66: {
    label = 0;
    $194 = ((($$sink1719)) + 1|0);
    $195 = HEAP8[$$sink1719>>0]|0;
    $$01300$shrunk = $195;$$321448 = $$321448$ph;$$321639 = $$321639$ph;$$361027 = $$361027$ph;$$361133 = $$361133$ph;$$361543 = $194;$$37 = $$37$ph;$$371240 = $$371240$ph;$$371346 = $$371346$ph;
    label = 67;
    break;
   }
   case 73: {
    label = 0;
    $222 = $6 & 2;
    $223 = ($222|0)==(0);
    if ($223) {
     $$01202$shrunk = 0;$$371453 = $$361452;$$371644 = $$361643;$$411032 = $$401031;$$411138 = $$401137;$$411548 = $$401547;$$42 = $$41;$$421245 = $$411244;$$421351 = $$411350;
     label = 76;
    } else {
     $$0960 = 1;$$891505 = $$361452;$$931084 = $$401031;$$931700 = $$361643;$$951192 = $$401137;$$951298 = $$411244;$$981605 = $$401547;$$99 = $$41;$$991408 = $$411350;$$sink30 = 14;
     label = 243;
     continue L46;
    }
    break;
   }
   case 75: {
    label = 0;
    $225 = ((($$sink1722)) + 1|0);
    $226 = HEAP8[$$sink1722>>0]|0;
    $$01202$shrunk = $226;$$371453 = $$371453$ph;$$371644 = $$371644$ph;$$411032 = $$411032$ph;$$411138 = $$411138$ph;$$411548 = $225;$$42 = $$42$ph;$$421245 = $$421245$ph;$$421351 = $$421351$ph;
    label = 76;
    break;
   }
   case 86: {
    label = 0;
    $$0960 = -1;$$891505 = $$401456;$$931084 = $$441035;$$931700 = $$401647;$$951192 = $$441141;$$951298 = $$451248;$$981605 = $$441551;$$99 = $$45;$$991408 = $$451354;$$sink30 = 35;
    label = 243;
    continue L46;
    break;
   }
   case 114: {
    label = 0;
    $450 = $6 & 2;
    $451 = ($450|0)==(0);
    if ($451) {
     $$0980$shrunk = 0;$$441460 = $$431459;$$441651 = $$431650;$$481039 = $$471038;$$481145 = $$471144;$$481555 = $$471554;$$49 = $$48;$$491252 = $$481251;$$491358 = $$481357;
     label = 117;
    } else {
     $$0960 = 1;$$891505 = $$431459;$$931084 = $$471038;$$931700 = $$431650;$$951192 = $$471144;$$951298 = $$481251;$$981605 = $$471554;$$99 = $$48;$$991408 = $$481357;$$sink30 = 16;
     label = 243;
     continue L46;
    }
    break;
   }
   case 116: {
    label = 0;
    $453 = ((($$sink1729)) + 1|0);
    $454 = HEAP8[$$sink1729>>0]|0;
    $$0980$shrunk = $454;$$441460 = $$441460$ph;$$441651 = $$441651$ph;$$481039 = $$481039$ph;$$481145 = $$481145$ph;$$481555 = $453;$$49 = $$49$ph;$$491252 = $$491252$ph;$$491358 = $$491358$ph;
    label = 117;
    break;
   }
   case 125: {
    label = 0;
    $$0960 = -1;$$891505 = $$461462;$$931084 = $$491040;$$931700 = $$461653;$$951192 = $$501147;$$951298 = $$511254;$$981605 = $$501557;$$99 = $$51;$$991408 = $$511360;$$sink30 = 17;
    label = 243;
    continue L46;
    break;
   }
   case 128: {
    label = 0;
    $501 = $6 & 2;
    $502 = ($501|0)==(0);
    if ($502) {
     $$0979$shrunk = 0;$$491465 = $$481464;$$491656 = $$481655;$$521043 = $$511042;$$531150 = $$521149;$$531560 = $$521559;$$54 = $$53;$$541257 = $$531256;$$541363 = $$531362;
     label = 131;
    } else {
     $$0960 = 1;$$891505 = $$481464;$$931084 = $$511042;$$931700 = $$481655;$$951192 = $$521149;$$951298 = $$531256;$$981605 = $$521559;$$99 = $$53;$$991408 = $$531362;$$sink30 = 18;
     label = 243;
     continue L46;
    }
    break;
   }
   case 130: {
    label = 0;
    $504 = ((($$sink1732)) + 1|0);
    $505 = HEAP8[$$sink1732>>0]|0;
    $$0979$shrunk = $505;$$491465 = $$491465$ph;$$491656 = $$491656$ph;$$521043 = $$521043$ph;$$531150 = $$531150$ph;$$531560 = $504;$$54 = $$54$ph;$$541257 = $$541257$ph;$$541363 = $$541363$ph;
    label = 131;
    break;
   }
   case 136: {
    label = 0;
    $$0960 = -1;$$891505 = $$511467;$$931084 = $$541045;$$931700 = $$511658;$$951192 = $$551152;$$951298 = $$561259;$$981605 = $$551562;$$99 = $$56;$$991408 = $$561365;$$sink30 = 21;
    label = 243;
    continue L46;
    break;
   }
   case 151: {
    label = 0;
    $570 = $6 & 2;
    $571 = ($570|0)==(0);
    if ($571) {
     $$0971$shrunk = 0;$$571473 = $$561472;$$571664 = $$561663;$$601051 = $$591050;$$611158 = $$601157;$$611568 = $$601567;$$62 = $$61;$$621265 = $$611264;$$621371 = $$611370;
     label = 154;
    } else {
     $$0960 = 1;$$891505 = $$561472;$$931084 = $$591050;$$931700 = $$561663;$$951192 = $$601157;$$951298 = $$611264;$$981605 = $$601567;$$99 = $$61;$$991408 = $$611370;$$sink30 = 23;
     label = 243;
     continue L46;
    }
    break;
   }
   case 153: {
    label = 0;
    $573 = ((($$sink1736)) + 1|0);
    $574 = HEAP8[$$sink1736>>0]|0;
    $$0971$shrunk = $574;$$571473 = $$571473$ph;$$571664 = $$571664$ph;$$601051 = $$601051$ph;$$611158 = $$611158$ph;$$611568 = $573;$$62 = $$62$ph;$$621265 = $$621265$ph;$$621371 = $$621371$ph;
    label = 154;
    break;
   }
   case 160: {
    label = 0;
    $610 = ($$591666>>>0)<($12>>>0);
    if (!($610)) {
     $$0960 = 2;$$891505 = $$591475;$$931084 = $$621053;$$931700 = $$591666;$$951192 = $$621159;$$951298 = $$641267;$$981605 = $$631570;$$99 = $$64;$$991408 = $$641373;$$sink30 = 24;
     label = 243;
     continue L46;
    }
    $611 = $$621159&255;
    $612 = ((($$591666)) + 1|0);
    HEAP8[$$591666>>0] = $611;
    $$541470$ph = $$591475;$$541661$ph = $612;$$571048$ph = $$621053;$$581155$ph = $$621159;$$581565$ph = $$631570;$$59$ph = $$64;$$591262$ph = $$641267;$$591368$ph = $$641373;
    label = 140;
    break;
   }
   case 180: {
    label = 0;
    $694 = $6 & 2;
    $695 = ($694|0)==(0);
    if ($695) {
     $$0959$shrunk = 0;$$631479 = $$621478;$$641671 = $$631670;$$661057 = $$651056;$$671164 = $$661163;$$681271 = $$671270;$$701577 = $$691576;$$71 = $$70;$$711380 = $$701379;
     label = 183;
    } else {
     $$0960 = 1;$$891505 = $$621478;$$931084 = $$651056;$$931700 = $$631670;$$951192 = $$661163;$$951298 = $$671270;$$981605 = $$691576;$$99 = $$70;$$991408 = $$701379;$$sink30 = 25;
     label = 243;
     continue L46;
    }
    break;
   }
   case 182: {
    label = 0;
    $697 = ((($$sink1739)) + 1|0);
    $698 = HEAP8[$$sink1739>>0]|0;
    $$0959$shrunk = $698;$$631479 = $$631479$ph;$$641671 = $$641671$ph;$$661057 = $$661057$ph;$$671164 = $$671164$ph;$$681271 = $$681271$ph;$$701577 = $697;$$71 = $$71$ph;$$711380 = $$711380$ph;
    label = 183;
    break;
   }
   case 193: {
    label = 0;
    $735 = $6 & 2;
    $736 = ($735|0)==(0);
    if ($736) {
     $$0952$shrunk = 0;$$681484 = $$671483;$$691676 = $$681675;$$711062 = $$701061;$$721169 = $$711168;$$731276 = $$721275;$$751582 = $$741581;$$76 = $$75;$$761385 = $$751384;
     label = 196;
    } else {
     $$0960 = 1;$$891505 = $$671483;$$931084 = $$701061;$$931700 = $$681675;$$951192 = $$711168;$$951298 = $$721275;$$981605 = $$741581;$$99 = $$75;$$991408 = $$751384;$$sink30 = 26;
     label = 243;
     continue L46;
    }
    break;
   }
   case 195: {
    label = 0;
    $738 = ((($$sink1743)) + 1|0);
    $739 = HEAP8[$$sink1743>>0]|0;
    $$0952$shrunk = $739;$$681484 = $$681484$ph;$$691676 = $$691676$ph;$$711062 = $$711062$ph;$$721169 = $$721169$ph;$$731276 = $$731276$ph;$$751582 = $738;$$76 = $$76$ph;$$761385 = $$761385$ph;
    label = 196;
    break;
   }
   case 204: {
    label = 0;
    $782 = $6 & 2;
    $783 = ($782|0)==(0);
    if ($783) {
     $$0950$shrunk = 0;$$721488 = $$711487;$$731680 = $$721679;$$741065 = $$731064;$$761173 = $$751172;$$761279 = $$751278;$$791586 = $$781585;$$80 = $$79;$$801389 = $$791388;
     label = 207;
    } else {
     $$0960 = 1;$$891505 = $$711487;$$931084 = $$731064;$$931700 = $$721679;$$951192 = $$751172;$$951298 = $$751278;$$981605 = $$781585;$$99 = $$79;$$991408 = $$791388;$$sink30 = 27;
     label = 243;
     continue L46;
    }
    break;
   }
   case 206: {
    label = 0;
    $785 = ((($$sink1746)) + 1|0);
    $786 = HEAP8[$$sink1746>>0]|0;
    $$0950$shrunk = $786;$$721488 = $$721488$ph;$$731680 = $$731680$ph;$$741065 = $$741065$ph;$$761173 = $$761173$ph;$$761279 = $$761279$ph;$$791586 = $785;$$80 = $$80$ph;$$801389 = $$801389$ph;
    label = 207;
    break;
   }
   case 210: {
    label = 0;
    $$0960 = -1;$$891505 = $$731489;$$931084 = $$771068;$$931700 = $$761683;$$951192 = $$791176;$$951298 = $$791282;$$981605 = $$821589;$$99 = $$83;$$991408 = $$831392;$$sink30 = 37;
    label = 243;
    continue L46;
    break;
   }
   case 213: {
    label = 0;
    $809 = ($$781685>>>0)<($12>>>0);
    if (!($809)) {
     $$0960 = 2;$$891505 = $$751491;$$931084 = $$791070;$$931700 = $$781685;$$951192 = $$811178;$$951298 = $$811284;$$981605 = $$841591;$$99 = $$85;$$991408 = $$851394;$$sink30 = 53;
     label = 243;
     continue L46;
    }
    $810 = (($$751491) + 1)|0;
    $811 = (($$751491) - ($$791070))|0;
    $812 = $811 & $$1753;
    $813 = (($3) + ($812)|0);
    $814 = HEAP8[$813>>0]|0;
    $815 = ((($$781685)) + 1|0);
    HEAP8[$$781685>>0] = $814;
    $$741490 = $810;$$771684 = $815;$$781069 = $$791070;$$801177 = $$811178;$$801283 = $$811284;$$831590 = $$841591;$$84 = $$85;$$841393 = $$851394;
    label = 212;
    break;
   }
   case 226: {
    label = 0;
    $849 = $$90 & 7;
    $850 = $$901399 >>> $849;
    $851 = (($$90) - ($849))|0;
    $$811497 = $$801496;$$851076 = $$841075;$$851692 = $$841691;$$871184 = 0;$$871290 = $$861289;$$901597 = $$891596;$$91 = $851;$$911400 = $850;
    label = 227;
    break;
   }
   case 231: {
    label = 0;
    $856 = $6 & 2;
    $857 = ($856|0)==(0);
    if ($857) {
     $$0947$shrunk = 0;$$841500 = $$831499;$$881079 = $$871078;$$881695 = $$871694;$$901187 = $$891186;$$901293 = $$891292;$$931600 = $$921599;$$94 = $$93;$$941403 = $$931402;
     label = 234;
    } else {
     $$0960 = 1;$$891505 = $$831499;$$931084 = $$871078;$$931700 = $$871694;$$951192 = $$891186;$$951298 = $$891292;$$981605 = $$921599;$$99 = $$93;$$991408 = $$931402;$$sink30 = 41;
     label = 243;
     continue L46;
    }
    break;
   }
   case 233: {
    label = 0;
    $859 = ((($$sink1750)) + 1|0);
    $860 = HEAP8[$$sink1750>>0]|0;
    $$0947$shrunk = $860;$$841500 = $$841500$ph;$$881079 = $$881079$ph;$$881695 = $$881695$ph;$$901187 = $$901187$ph;$$901293 = $$901293$ph;$$931600 = $859;$$94 = $$94$ph;$$941403 = $$941403$ph;
    label = 234;
    break;
   }
   case 237: {
    label = 0;
    $869 = $6 & 2;
    $870 = ($869|0)==(0);
    if ($870) {
     $$0948 = 0;$$871503 = $$861502;$$911082 = $$901081;$$911698 = $$901697;$$931190 = $$921189;$$931296 = $$921295;$$961603 = $$951602;$$97 = $$96;$$971406 = $$961405;
     label = 241;
     continue L46;
    } else {
     $$0960 = 1;$$891505 = $$861502;$$931084 = $$901081;$$931700 = $$901697;$$951192 = $$921189;$$951298 = $$921295;$$981605 = $$951602;$$99 = $$96;$$991408 = $$961405;$$sink30 = 42;
     label = 243;
     continue L46;
    }
    break;
   }
   case 241: {
    label = 0;
    $878 = ((($0)) + 16|0);
    $879 = HEAP32[$878>>2]|0;
    $880 = $879 << 8;
    $881 = $880 | $$0948;
    HEAP32[$878>>2] = $881;
    $882 = (($$931190) + 1)|0;
    $$811497 = $$871503;$$851076 = $$911082;$$851692 = $$911698;$$871184 = $882;$$871290 = $$931296;$$901597 = $$961603;$$91 = $$97;$$911400 = $$971406;
    label = 227;
    break;
   }
   case 242: {
    label = 0;
    $$0960 = 0;$$891505 = $$881504;$$931084 = $$921083;$$931700 = $$921699;$$951192 = $$941191;$$951298 = $$941297;$$981605 = $$971604;$$99 = $$98;$$991408 = $$981407;$$sink30 = 34;
    label = 243;
    continue L46;
    break;
   }
   case 243: {
    label = 0;
    HEAP32[$0>>2] = $$sink30;
    $$100 = $$99;$$1001409 = $$991408;$$1961 = $$0960;$$901506 = $$891505;$$941085 = $$931084;$$941701 = $$931700;$$961193 = $$951192;$$961299 = $$951298;$$991606 = $$981605;
    label = 244;
    continue L46;
    break;
   }
   case 244: {
    label = 0;
    HEAP32[$24>>2] = $$100;
    HEAP32[$26>>2] = $$1001409;
    HEAP32[$28>>2] = $$941085;
    HEAP32[$30>>2] = $$961193;
    HEAP32[$32>>2] = $$961299;
    HEAP32[$34>>2] = $$901506;
    $883 = $$991606;
    $884 = $1;
    $885 = (($883) - ($884))|0;
    HEAP32[$2>>2] = $885;
    $886 = $$941701;
    $887 = $4;
    $888 = (($886) - ($887))|0;
    HEAP32[$5>>2] = $888;
    $889 = $6 & 9;
    $890 = ($889|0)!=(0);
    $891 = ($$1961|0)>(-1);
    $or$cond29 = $890 & $891;
    if ($or$cond29) {
     break L46;
    } else {
     $$0951 = $$1961;
     label = 258;
     break L46;
    }
    break;
   }
  }
  switch (label|0) {
   case 19: {
    label = 0;
    $$01413 = $$01413$shrunk&255;
    $78 = $$01413 << $$8;
    $79 = $78 | $$81317;
    $80 = (($$8) + 8)|0;
    $81 = ($80>>>0)<(3);
    if ($81) {
     $$11417 = $$31419;$$11608 = $$31610;$$51512 = $$71514;$$6 = $80;$$61103 = $$81105;$$61209 = $$81211;$$61315 = $79;$$6997 = $$8999;
     label = 15;
    } else {
     $$41420 = $$31419;$$41611 = $$31610;$$81515 = $$71514;$$9 = $80;$$91000 = $$8999;$$91106 = $$81105;$$91212 = $$81211;$$91318 = $79;
     label = 20;
    }
    break;
   }
   case 33: {
    label = 0;
    $$01411 = $$01411$shrunk&255;
    $109 = $$01411 << $$17;
    $110 = $109 | $$171326;
    $111 = (($$17) + 8)|0;
    $112 = ($$17>>>0)>(4294967287);
    if ($112) {
     $$101426 = $$121428;$$101617 = $$121619;$$141111 = $$161113;$$141521 = $$161523;$$15 = $111;$$151006 = $$171008;$$151218 = $$171220;$$151324 = $110;
     label = 29;
    } else {
     $$131429 = $$121428;$$131620 = $$121619;$$171114 = $$161113;$$171524 = $$161523;$$18 = $111;$$181009 = $$171008;$$181221 = $$171220;$$181327 = $110;
     label = 34;
    }
    break;
   }
   case 50: {
    label = 0;
    $$01410 = $$01410$shrunk&255;
    $155 = $$01410 << $$26;
    $156 = $155 | $$261335;
    $157 = (($$26) + 8)|0;
    $158 = ($$26>>>0)>(4294967287);
    if ($158) {
     $$191435 = $$211437;$$191626 = $$211628;$$231120 = $$251122;$$231530 = $$251532;$$24 = $157;$$241015 = $$261017;$$241227 = $$261229;$$241333 = $156;
     label = 46;
    } else {
     $$221438 = $$211437;$$221629 = $$211628;$$261123 = $$251122;$$261533 = $$251532;$$27 = $157;$$271230 = $$261229;$$271336 = $156;
     label = 51;
    }
    break;
   }
   case 67: {
    label = 0;
    $$01300 = $$01300$shrunk&255;
    $196 = $$01300 << $$37;
    $197 = $196 | $$371346;
    $198 = (($$37) + 8)|0;
    $199 = (7790 + ($$361133)|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $200 << 24 >> 24;
    $202 = ($198>>>0)<($201>>>0);
    if ($202) {
     $$301446 = $$321448;$$301637 = $$321639;$$341025 = $$361027;$$341131 = $$361133;$$341541 = $$361543;$$35 = $198;$$351238 = $$371240;$$351344 = $197;
     label = 63;
    } else {
     $$331449 = $$321448;$$331640 = $$321639;$$371028 = $$361027;$$371134 = $$361133;$$371544 = $$361543;$$38 = $198;$$381241 = $$371240;$$381347 = $197;
     label = 68;
    }
    break;
   }
   case 76: {
    label = 0;
    $$01202 = $$01202$shrunk&255;
    $227 = $$01202 << $$42;
    $228 = $227 | $$421351;
    $229 = (($$42) + 8)|0;
    $230 = ($229>>>0)<(3);
    if ($230) {
     $$351451 = $$371453;$$351642 = $$371644;$$391030 = $$411032;$$391136 = $$411138;$$391546 = $$411548;$$40 = $229;$$401243 = $$421245;$$401349 = $228;
     label = 72;
    } else {
     $$381454 = $$371453;$$381645 = $$371644;$$421033 = $$411032;$$421139 = $$411138;$$421549 = $$411548;$$43 = $229;$$431246 = $$421245;$$431352 = $228;
     label = 77;
    }
    break;
   }
   case 117: {
    label = 0;
    $$0980 = $$0980$shrunk&255;
    $455 = $$0980 << $$49;
    $456 = $455 | $$491358;
    $457 = (($$49) + 8)|0;
    $458 = ($457>>>0)<(15);
    if ($458) {
     $$421458 = $$441460;$$421649 = $$441651;$$461037 = $$481039;$$461143 = $$481145;$$461553 = $$481555;$$47 = $457;$$471250 = $$491252;$$471356 = $456;
     label = 108;
    } else {
     $$451461 = $$441460;$$451652 = $$441651;$$491146 = $$481145;$$491556 = $$481555;$$50 = $457;$$501253 = $$491252;$$501359 = $456;
     label = 119;
    }
    break;
   }
   case 131: {
    label = 0;
    $$0979 = $$0979$shrunk&255;
    $506 = $$0979 << $$54;
    $507 = $506 | $$541363;
    $508 = (($$54) + 8)|0;
    $509 = ($508>>>0)<($$541257>>>0);
    if ($509) {
     $$471463 = $$491465;$$471654 = $$491656;$$501041 = $$521043;$$511148 = $$531150;$$511558 = $$531560;$$52 = $508;$$521255 = $$541257;$$521361 = $507;
     label = 127;
    } else {
     $$501466 = $$491465;$$501657 = $$491656;$$531044 = $$521043;$$541151 = $$531150;$$541561 = $$531560;$$55 = $508;$$551258 = $$541257;$$551364 = $507;
     label = 132;
    }
    break;
   }
   case 154: {
    label = 0;
    $$0971 = $$0971$shrunk&255;
    $575 = $$0971 << $$62;
    $576 = $575 | $$621371;
    $577 = (($$62) + 8)|0;
    $578 = ($577>>>0)<(15);
    if ($578) {
     $$551471 = $$571473;$$551662 = $$571664;$$581049 = $$601051;$$591156 = $$611158;$$591566 = $$611568;$$60 = $577;$$601263 = $$621265;$$601369 = $576;
     label = 145;
    } else {
     $$581474 = $$571473;$$581665 = $$571664;$$611052 = $$601051;$$621569 = $$611568;$$63 = $577;$$631266 = $$621265;$$631372 = $576;
     label = 156;
    }
    break;
   }
   case 183: {
    label = 0;
    $$0959 = $$0959$shrunk&255;
    $699 = $$0959 << $$71;
    $700 = $699 | $$711380;
    $701 = (($$71) + 8)|0;
    $702 = ($701>>>0)<($$681271>>>0);
    if ($702) {
     $$611477 = $$631479;$$621669 = $$641671;$$641055 = $$661057;$$651162 = $$671164;$$661269 = $$681271;$$681575 = $$701577;$$69 = $701;$$691378 = $700;
     label = 179;
    } else {
     $$641480 = $$631479;$$651672 = $$641671;$$671058 = $$661057;$$681165 = $$671164;$$691272 = $$681271;$$711578 = $$701577;$$72 = $701;$$721381 = $700;
     label = 184;
    }
    break;
   }
   case 196: {
    label = 0;
    $$0952 = $$0952$shrunk&255;
    $740 = $$0952 << $$76;
    $741 = $740 | $$761385;
    $742 = (($$76) + 8)|0;
    $743 = ($742>>>0)<(15);
    if ($743) {
     $$661482 = $$681484;$$671674 = $$691676;$$691060 = $$711062;$$701167 = $$721169;$$711274 = $$731276;$$731580 = $$751582;$$74 = $742;$$741383 = $741;
     label = 187;
    } else {
     $$691485 = $$681484;$$701677 = $$691676;$$731170 = $$721169;$$761583 = $$751582;$$77 = $742;$$771386 = $741;
     label = 198;
    }
    break;
   }
   case 207: {
    label = 0;
    $$0950 = $$0950$shrunk&255;
    $787 = $$0950 << $$80;
    $788 = $787 | $$801389;
    $789 = (($$80) + 8)|0;
    $790 = ($789>>>0)<($$761279>>>0);
    if ($790) {
     $$701486 = $$721488;$$711678 = $$731680;$$721063 = $$741065;$$741171 = $$761173;$$741277 = $$761279;$$771584 = $$791586;$$78 = $789;$$781387 = $788;
     label = 203;
    } else {
     $$741681 = $$731680;$$751066 = $$741065;$$771174 = $$761173;$$771280 = $$761279;$$801587 = $$791586;$$81 = $789;$$811390 = $788;
     label = 208;
    }
    break;
   }
   case 227: {
    label = 0;
    $852 = ($$871184>>>0)<(4);
    if (!($852)) {
     $$881504 = $$811497;$$921083 = $$851076;$$921699 = $$851692;$$941191 = $$871184;$$941297 = $$871290;$$971604 = $$901597;$$98 = $$91;$$981407 = $$911400;
     label = 242;
     continue L46;
    }
    $853 = ($$91|0)==(0);
    if (!($853)) {
     $854 = ($$91>>>0)<(8);
     if ($854) {
      $$821498 = $$811497;$$861077 = $$851076;$$861693 = $$851692;$$881185 = $$871184;$$881291 = $$871290;$$911598 = $$901597;$$92 = $$91;$$921401 = $$911400;
      label = 230;
      break;
     } else {
      $$851501 = $$811497;$$891080 = $$851076;$$891696 = $$851692;$$911188 = $$871184;$$911294 = $$871290;$$941601 = $$901597;$$95 = $$91;$$951404 = $$911400;
      label = 235;
      break;
     }
    }
    $868 = ($$901597>>>0)<($10>>>0);
    if (!($868)) {
     $$861502 = $$811497;$$901081 = $$851076;$$901697 = $$851692;$$921189 = $$871184;$$921295 = $$871290;$$951602 = $$901597;$$96 = 0;$$961405 = $$911400;
     label = 237;
     continue L46;
    }
    $875 = ((($$901597)) + 1|0);
    $876 = HEAP8[$$901597>>0]|0;
    $877 = $876&255;
    $$0948 = $877;$$871503 = $$811497;$$911082 = $$851076;$$911698 = $$851692;$$931190 = $$871184;$$931296 = $$871290;$$961603 = $875;$$97 = 0;$$971406 = $$911400;
    label = 241;
    continue L46;
    break;
   }
   case 234: {
    label = 0;
    $$0947 = $$0947$shrunk&255;
    $861 = $$0947 << $$94;
    $862 = $861 | $$941403;
    $863 = (($$94) + 8)|0;
    $864 = ($$94>>>0)>(4294967287);
    if ($864) {
     $$821498 = $$841500;$$861077 = $$881079;$$861693 = $$881695;$$881185 = $$901187;$$881291 = $$901293;$$911598 = $$931600;$$92 = $863;$$921401 = $862;
     label = 230;
    } else {
     $$851501 = $$841500;$$891080 = $$881079;$$891696 = $$881695;$$911188 = $$901187;$$911294 = $$901293;$$941601 = $$931600;$$95 = $863;$$951404 = $862;
     label = 235;
    }
    break;
   }
  }
  L119: do {
   if ((label|0) == 15) {
    label = 0;
    $72 = ($$51512>>>0)<($10>>>0);
    if ($72) {
     $$31419$ph = $$11417;$$31610$ph = $$11608;$$8$ph = $$6;$$81105$ph = $$61103;$$81211$ph = $$61209;$$81317$ph = $$61315;$$8999$ph = $$6997;$$sink1710 = $$51512;
     label = 18;
     continue L46;
    } else {
     $$21418 = $$11417;$$21609 = $$11608;$$61513 = $$51512;$$7 = $$6;$$71104 = $$61103;$$71210 = $$61209;$$71316 = $$61315;$$7998 = $$6997;
     label = 16;
     continue L46;
    }
   }
   else if ((label|0) == 20) {
    label = 0;
    $82 = $$91318 & 7;
    $83 = ((($0)) + 20|0);
    HEAP32[$83>>2] = $82;
    $84 = $$91318 >>> 3;
    $85 = (($$9) + -3)|0;
    $86 = $82 >>> 1;
    $87 = ((($0)) + 24|0);
    HEAP32[$87>>2] = $86;
    $trunc = $86&255;
    $trunc$clear = $trunc & 3;
    switch ($trunc$clear<<24>>24) {
    case 0:  {
     $$121519 = $$81515;$$13 = $85;$$131004 = $$91000;$$131216 = $$91212;$$131322 = $84;$$81424 = $$41420;$$81615 = $$41611;
     label = 25;
     continue L46;
     break;
    }
    case 3:  {
     $$281444 = $$41420;$$281635 = $$41611;$$321023 = $$91000;$$321129 = $$91106;$$321539 = $$81515;$$33 = $85;$$331236 = $$91212;$$331342 = $84;
     label = 60;
     continue L46;
     break;
    }
    case 1:  {
     break;
    }
    default: {
     $$291445 = $$41420;$$291636 = $$41611;$$331024 = $$91000;$$331130 = 0;$$331540 = $$81515;$$34 = $85;$$341237 = $$91212;$$341343 = $84;
     label = 61;
     break L119;
    }
    }
    $240 = ((($0)) + 44|0);
    HEAP32[$240>>2] = 288;
    $241 = ((($0)) + 48|0);
    HEAP32[$241>>2] = 32;
    $242 = ((($0)) + 3552|0);
    ;HEAP32[$242>>2]=84215045|0;HEAP32[$242+4>>2]=84215045|0;HEAP32[$242+8>>2]=84215045|0;HEAP32[$242+12>>2]=84215045|0;HEAP32[$242+16>>2]=84215045|0;HEAP32[$242+20>>2]=84215045|0;HEAP32[$242+24>>2]=84215045|0;HEAP32[$242+28>>2]=84215045|0;
    $scevgep19611962 = ((($0)) + 64|0);
    _memset(($scevgep19611962|0),8,144)|0;
    $scevgep1959 = ((($0)) + 208|0);
    dest=$scevgep1959; stop=dest+112|0; do { HEAP8[dest>>0]=9|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $scevgep1957 = ((($0)) + 320|0);
    dest=$scevgep1957; stop=dest+24|0; do { HEAP8[dest>>0]=7|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $scevgep1955 = ((($0)) + 344|0);
    $243 = $scevgep1955;
    $244 = $243;
    HEAP8[$244>>0]=134744072&255;HEAP8[$244+1>>0]=(134744072>>8)&255;HEAP8[$244+2>>0]=(134744072>>16)&255;HEAP8[$244+3>>0]=134744072>>24;
    $245 = (($243) + 4)|0;
    $246 = $245;
    HEAP8[$246>>0]=134744072&255;HEAP8[$246+1>>0]=(134744072>>8)&255;HEAP8[$246+2>>0]=(134744072>>16)&255;HEAP8[$246+3>>0]=134744072>>24;
    $$391455 = $$41420;$$391646 = $$41611;$$431034 = $$91000;$$431140 = $$91106;$$431550 = $$81515;$$44 = $85;$$441247 = $$91212;$$441353 = $84;
    label = 80;
   }
   else if ((label|0) == 230) {
    label = 0;
    $855 = ($$911598>>>0)<($10>>>0);
    if ($855) {
     $$841500$ph = $$821498;$$881079$ph = $$861077;$$881695$ph = $$861693;$$901187$ph = $$881185;$$901293$ph = $$881291;$$94$ph = $$92;$$941403$ph = $$921401;$$sink1750 = $$911598;
     label = 233;
     continue L46;
    } else {
     $$831499 = $$821498;$$871078 = $$861077;$$871694 = $$861693;$$891186 = $$881185;$$891292 = $$881291;$$921599 = $$911598;$$93 = $$92;$$931402 = $$921401;
     label = 231;
     continue L46;
    }
   }
   else if ((label|0) == 235) {
    label = 0;
    $865 = $$951404 & 255;
    $866 = $$951404 >>> 8;
    $867 = (($$95) + -8)|0;
    $$0948 = $865;$$871503 = $$851501;$$911082 = $$891080;$$911698 = $$891696;$$931190 = $$911188;$$931296 = $$911294;$$961603 = $$941601;$$97 = $867;$$971406 = $866;
    label = 241;
    continue L46;
   }
  } while(0);
  L125: while(1) {
   L126:    switch (label|0) {
    case 26: {
     label = 0;
     $100 = ($$131110>>>0)<(4);
     if (!($100)) {
      $127 = ((($0)) + 10528|0);
      $128 = HEAP8[$127>>0]|0;
      $129 = $128&255;
      $130 = ((($0)) + 10529|0);
      $131 = HEAP8[$130>>0]|0;
      $132 = $131&255;
      $133 = $132 << 8;
      $134 = $133 | $129;
      $135 = ((($0)) + 10530|0);
      $136 = HEAP8[$135>>0]|0;
      $137 = $136&255;
      $138 = ((($0)) + 10531|0);
      $139 = HEAP8[$138>>0]|0;
      $140 = $139&255;
      $141 = $140 << 8;
      $142 = $141 | $137;
      $143 = $142 ^ 65535;
      $144 = ($134|0)==($143|0);
      if ($144) {
       $$181434 = $$91425;$$181625 = $$91616;$$221119 = $134;$$221529 = $$131520;$$23 = $$14;$$231014 = $$141005;$$231226 = $$141217;$$231332 = $$141323;
       label = 44;
       continue L125;
      } else {
       $$171433 = $$91425;$$171624 = $$91616;$$211118 = $134;$$211528 = $$131520;$$22 = $$14;$$221013 = $$141005;$$221225 = $$141217;$$221331 = $$141323;
       label = 43;
       continue L46;
      }
     }
     $101 = ($$14|0)==(0);
     if (!($101)) {
      $102 = ($$14>>>0)<(8);
      if ($102) {
       $$101426 = $$91425;$$101617 = $$91616;$$141111 = $$131110;$$141521 = $$131520;$$15 = $$14;$$151006 = $$141005;$$151218 = $$141217;$$151324 = $$141323;
       label = 29;
       continue L125;
      } else {
       $$131429 = $$91425;$$131620 = $$91616;$$171114 = $$131110;$$171524 = $$131520;$$18 = $$14;$$181009 = $$141005;$$181221 = $$141217;$$181327 = $$141323;
       label = 34;
       continue L125;
      }
     }
     $117 = ($$131520>>>0)<($10>>>0);
     if (!($117)) {
      $$141430 = $$91425;$$141621 = $$91616;$$181115 = $$131110;$$181525 = $$131520;$$19 = 0;$$191010 = $$141005;$$191222 = $$141217;$$191328 = $$141323;
      label = 36;
      continue L46;
     }
     $123 = ((($$131520)) + 1|0);
     $124 = HEAP8[$$131520>>0]|0;
     $125 = (((($0)) + 10528|0) + ($$131110)|0);
     HEAP8[$125>>0] = $124;
     $$161432 = $$91425;$$161623 = $$91616;$$201117 = $$131110;$$201527 = $123;$$21 = 0;$$211012 = $$141005;$$211224 = $$141217;$$211330 = $$141323;
     label = 41;
     continue L125;
     break;
    }
    case 29: {
     label = 0;
     $103 = ($$141521>>>0)<($10>>>0);
     if ($103) {
      $$121428$ph = $$101426;$$121619$ph = $$101617;$$161113$ph = $$141111;$$17$ph = $$15;$$171008$ph = $$151006;$$171220$ph = $$151218;$$171326$ph = $$151324;$$sink1713 = $$141521;
      label = 32;
      continue L46;
     } else {
      $$111427 = $$101426;$$111618 = $$101617;$$151112 = $$141111;$$151522 = $$141521;$$16 = $$15;$$161007 = $$151006;$$161219 = $$151218;$$161325 = $$151324;
      label = 30;
      continue L46;
     }
     break;
    }
    case 34: {
     label = 0;
     $113 = $$181327&255;
     $114 = (((($0)) + 10528|0) + ($$171114)|0);
     HEAP8[$114>>0] = $113;
     $115 = $$181327 >>> 8;
     $116 = (($$18) + -8)|0;
     $$161432 = $$131429;$$161623 = $$131620;$$201117 = $$171114;$$201527 = $$171524;$$21 = $116;$$211012 = $$181009;$$211224 = $$181221;$$211330 = $115;
     label = 41;
     continue L125;
     break;
    }
    case 41: {
     label = 0;
     $126 = (($$201117) + 1)|0;
     $$131110 = $126;$$131520 = $$201527;$$14 = $$21;$$141005 = $$211012;$$141217 = $$211224;$$141323 = $$211330;$$91425 = $$161432;$$91616 = $$161623;
     label = 26;
     continue L125;
     break;
    }
    case 44: {
     label = 0;
     $145 = ($$221119|0)!=(0);
     $146 = ($$23|0)!=(0);
     $147 = $145 & $146;
     if (!($147)) {
      $$241440 = $$181434;$$241631 = $$181625;$$281019 = $$231014;$$281125 = $$221119;$$281535 = $$221529;$$29 = $$23;$$291232 = $$231226;$$291338 = $$231332;
      label = 54;
      continue L125;
     }
     $148 = ($$23>>>0)<(8);
     if ($148) {
      $$191435 = $$181434;$$191626 = $$181625;$$231120 = $$221119;$$231530 = $$221529;$$24 = $$23;$$241015 = $$231014;$$241227 = $$231226;$$241333 = $$231332;
      label = 46;
      continue L125;
     } else {
      $$221438 = $$181434;$$221629 = $$181625;$$261123 = $$221119;$$261533 = $$221529;$$27 = $$23;$$271230 = $$231226;$$271336 = $$231332;
      label = 51;
      continue L125;
     }
     break;
    }
    case 46: {
     label = 0;
     $149 = ($$231530>>>0)<($10>>>0);
     if ($149) {
      $$211437$ph = $$191435;$$211628$ph = $$191626;$$251122$ph = $$231120;$$26$ph = $$24;$$261017$ph = $$241015;$$261229$ph = $$241227;$$261335$ph = $$241333;$$sink1716 = $$231530;
      label = 49;
      continue L46;
     } else {
      $$201436 = $$191435;$$201627 = $$191626;$$241121 = $$231120;$$241531 = $$231530;$$25 = $$24;$$251016 = $$241015;$$251228 = $$241227;$$251334 = $$241333;
      label = 47;
      continue L46;
     }
     break;
    }
    case 51: {
     label = 0;
     $159 = $$271336 & 255;
     $160 = $$271336 >>> 8;
     $161 = (($$27) + -8)|0;
     $$231439 = $$221438;$$231630 = $$221629;$$271018 = $159;$$271124 = $$261123;$$271534 = $$261533;$$28 = $161;$$281231 = $$271230;$$281337 = $160;
     label = 52;
     continue L46;
     break;
    }
    case 54: {
     label = 0;
     $166 = ($$281125|0)==(0);
     if ($166) {
      $$761492 = $$241440;$$801071 = $$281019;$$801687 = $$241631;$$821285 = $$291232;$$831180 = 0;$$851592 = $$281535;$$86 = $$29;$$861395 = $$291338;
      label = 220;
      break L125;
     } else {
      $$251441 = $$241440;$$251632 = $$241631;$$291020 = $$281019;$$291126 = $$281125;$$291536 = $$281535;$$30 = $$29;$$301233 = $$291232;$$301339 = $$291338;
      label = 55;
      continue L46;
     }
     break;
    }
    case 61: {
     label = 0;
     $185 = ($$331130>>>0)<(3);
     if ($185) {
      $186 = (7790 + ($$331130)|0);
      $187 = HEAP8[$186>>0]|0;
      $188 = $187 << 24 >> 24;
      $189 = ($$34>>>0)<($188>>>0);
      if ($189) {
       $$301446 = $$291445;$$301637 = $$291636;$$341025 = $$331024;$$341131 = $$331130;$$341541 = $$331540;$$35 = $$34;$$351238 = $$341237;$$351344 = $$341343;
       label = 63;
       continue L125;
      } else {
       $$331449 = $$291445;$$331640 = $$291636;$$371028 = $$331024;$$371134 = $$331130;$$371544 = $$331540;$$38 = $$34;$$381241 = $$341237;$$381347 = $$341343;
       label = 68;
       continue L125;
      }
     } else {
      $216 = ((($0)) + 7040|0);
      _memset(($216|0),0,288)|0;
      $$341450 = $$291445;$$341641 = $$291636;$$381029 = $$331024;$$381135 = 0;$$381545 = $$331540;$$39 = $$34;$$391242 = $$341237;$$391348 = $$341343;
      label = 70;
      break;
     }
     break;
    }
    case 63: {
     label = 0;
     $190 = ($$341541>>>0)<($10>>>0);
     if ($190) {
      $$321448$ph = $$301446;$$321639$ph = $$301637;$$361027$ph = $$341025;$$361133$ph = $$341131;$$37$ph = $$35;$$371240$ph = $$351238;$$371346$ph = $$351344;$$sink1719 = $$341541;
      label = 66;
      continue L46;
     } else {
      $$311447 = $$301446;$$311638 = $$301637;$$351026 = $$341025;$$351132 = $$341131;$$351542 = $$341541;$$36 = $$35;$$361239 = $$351238;$$361345 = $$351344;
      label = 64;
      continue L46;
     }
     break;
    }
    case 68: {
     label = 0;
     $203 = (7790 + ($$371134)|0);
     $204 = HEAP8[$203>>0]|0;
     $205 = $204 << 24 >> 24;
     $206 = 1 << $205;
     $207 = (($206) + -1)|0;
     $208 = $207 & $$381347;
     $209 = (((($0)) + 44|0) + ($$371134<<2)|0);
     $210 = $$381347 >>> $205;
     $211 = (($$38) - ($205))|0;
     $212 = (300 + ($$371134<<2)|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = (($208) + ($213))|0;
     HEAP32[$209>>2] = $214;
     $215 = (($$371134) + 1)|0;
     $$291445 = $$331449;$$291636 = $$331640;$$331024 = $$371028;$$331130 = $215;$$331540 = $$371544;$$34 = $211;$$341237 = $$381241;$$341343 = $210;
     label = 61;
     continue L125;
     break;
    }
    case 72: {
     label = 0;
     $221 = ($$391546>>>0)<($10>>>0);
     if ($221) {
      $$371453$ph = $$351451;$$371644$ph = $$351642;$$411032$ph = $$391030;$$411138$ph = $$391136;$$42$ph = $$40;$$421245$ph = $$401243;$$421351$ph = $$401349;$$sink1722 = $$391546;
      label = 75;
      continue L46;
     } else {
      $$361452 = $$351451;$$361643 = $$351642;$$401031 = $$391030;$$401137 = $$391136;$$401547 = $$391546;$$41 = $$40;$$411244 = $$401243;$$411350 = $$401349;
      label = 73;
      continue L46;
     }
     break;
    }
    case 77: {
     label = 0;
     $231 = $$431352 & 7;
     $232 = $$431352 >>> 3;
     $233 = (($$43) + -3)|0;
     $234 = $231&255;
     $235 = (10928 + ($$421139)|0);
     $236 = HEAP8[$235>>0]|0;
     $237 = $236&255;
     $238 = (((($0)) + 7040|0) + ($237)|0);
     HEAP8[$238>>0] = $234;
     $239 = (($$421139) + 1)|0;
     $$341450 = $$381454;$$341641 = $$381645;$$381029 = $$421033;$$381135 = $239;$$381545 = $$421549;$$39 = $233;$$391242 = $$431246;$$391348 = $232;
     label = 70;
     break;
    }
    case 80: {
     label = 0;
     $247 = ((($0)) + 24|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = ($248|0)>(-1);
     if ($249) {
      dest=$8; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
      $250 = (((((($0)) + 64|0) + (($248*3488)|0)|0)) + 288|0);
      _memset(($250|0),0,3200)|0;
      $251 = HEAP32[$247>>2]|0;
      $252 = (((($0)) + 44|0) + ($251<<2)|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = ($253|0)==(0);
      if (!($254)) {
       $255 = HEAP32[$247>>2]|0;
       $256 = (((($0)) + 44|0) + ($255<<2)|0);
       $257 = HEAP32[$256>>2]|0;
       $$010951864 = 0;
       while(1) {
        $258 = ((((($0)) + 64|0) + (($248*3488)|0)|0) + ($$010951864)|0);
        $259 = HEAP8[$258>>0]|0;
        $260 = $259&255;
        $261 = (($8) + ($260<<2)|0);
        $262 = HEAP32[$261>>2]|0;
        $263 = (($262) + 1)|0;
        HEAP32[$261>>2] = $263;
        $264 = (($$010951864) + 1)|0;
        $265 = ($264>>>0)<($257>>>0);
        if ($265) {
         $$010951864 = $264;
        } else {
         break;
        }
       }
      }
      $266 = ((($7)) + 4|0);
      HEAP32[$266>>2] = 0;
      HEAP32[$7>>2] = 0;
      $267 = ((($8)) + 4|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = $268 << 1;
      $270 = ((($7)) + 8|0);
      HEAP32[$270>>2] = $269;
      $271 = ((($8)) + 8|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = (($272) + ($268))|0;
      $274 = (($272) + ($269))|0;
      $275 = $274 << 1;
      $276 = ((($7)) + 12|0);
      HEAP32[$276>>2] = $275;
      $277 = ((($8)) + 12|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = (($278) + ($273))|0;
      $280 = (($278) + ($275))|0;
      $281 = $280 << 1;
      $282 = ((($7)) + 16|0);
      HEAP32[$282>>2] = $281;
      $283 = ((($8)) + 16|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = (($284) + ($279))|0;
      $286 = (($284) + ($281))|0;
      $287 = $286 << 1;
      $288 = ((($7)) + 20|0);
      HEAP32[$288>>2] = $287;
      $289 = ((($8)) + 20|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = (($290) + ($285))|0;
      $292 = (($290) + ($287))|0;
      $293 = $292 << 1;
      $294 = ((($7)) + 24|0);
      HEAP32[$294>>2] = $293;
      $295 = ((($8)) + 24|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (($296) + ($291))|0;
      $298 = (($296) + ($293))|0;
      $299 = $298 << 1;
      $300 = ((($7)) + 28|0);
      HEAP32[$300>>2] = $299;
      $301 = ((($8)) + 28|0);
      $302 = HEAP32[$301>>2]|0;
      $303 = (($302) + ($297))|0;
      $304 = (($302) + ($299))|0;
      $305 = $304 << 1;
      $306 = ((($7)) + 32|0);
      HEAP32[$306>>2] = $305;
      $307 = ((($8)) + 32|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = (($308) + ($303))|0;
      $310 = (($308) + ($305))|0;
      $311 = $310 << 1;
      $312 = ((($7)) + 36|0);
      HEAP32[$312>>2] = $311;
      $313 = ((($8)) + 36|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = (($314) + ($309))|0;
      $316 = (($314) + ($311))|0;
      $317 = $316 << 1;
      $318 = ((($7)) + 40|0);
      HEAP32[$318>>2] = $317;
      $319 = ((($8)) + 40|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = (($320) + ($315))|0;
      $322 = (($320) + ($317))|0;
      $323 = $322 << 1;
      $324 = ((($7)) + 44|0);
      HEAP32[$324>>2] = $323;
      $325 = ((($8)) + 44|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = (($326) + ($321))|0;
      $328 = (($326) + ($323))|0;
      $329 = $328 << 1;
      $330 = ((($7)) + 48|0);
      HEAP32[$330>>2] = $329;
      $331 = ((($8)) + 48|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = (($332) + ($327))|0;
      $334 = (($332) + ($329))|0;
      $335 = $334 << 1;
      $336 = ((($7)) + 52|0);
      HEAP32[$336>>2] = $335;
      $337 = ((($8)) + 52|0);
      $338 = HEAP32[$337>>2]|0;
      $339 = (($338) + ($333))|0;
      $340 = (($338) + ($335))|0;
      $341 = $340 << 1;
      $342 = ((($7)) + 56|0);
      HEAP32[$342>>2] = $341;
      $343 = ((($8)) + 56|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = (($344) + ($339))|0;
      $346 = (($344) + ($341))|0;
      $347 = $346 << 1;
      $348 = ((($7)) + 60|0);
      HEAP32[$348>>2] = $347;
      $349 = ((($8)) + 60|0);
      $350 = HEAP32[$349>>2]|0;
      $351 = (($350) + ($345))|0;
      $352 = (($350) + ($347))|0;
      $353 = $352 << 1;
      $354 = ((($7)) + 64|0);
      HEAP32[$354>>2] = $353;
      $355 = ($353|0)!=(65536);
      $356 = ($351>>>0)>(1);
      $or$cond = $355 & $356;
      if ($or$cond) {
       $$401456 = $$391455;$$401647 = $$391646;$$441035 = $$431034;$$441141 = $$431140;$$441551 = $$431550;$$45 = $$44;$$451248 = $$441247;$$451354 = $$441353;
       label = 86;
       continue L46;
      }
      $357 = HEAP32[$247>>2]|0;
      $358 = (((($0)) + 44|0) + ($357<<2)|0);
      $359 = HEAP32[$358>>2]|0;
      $360 = ($359|0)==(0);
      if ($360) {
       $$lcssa1779 = $357;
      } else {
       $$010911856 = 0;$$011971855 = -1;
       while(1) {
        $361 = ((((($0)) + 64|0) + (($248*3488)|0)|0) + ($$010911856)|0);
        $362 = HEAP8[$361>>0]|0;
        $363 = $362&255;
        $364 = ($362<<24>>24)==(0);
        L142: do {
         if ($364) {
          $$41201 = $$011971855;
         } else {
          $365 = (($7) + ($363<<2)|0);
          $366 = HEAP32[$365>>2]|0;
          $367 = (($366) + 1)|0;
          HEAP32[$365>>2] = $367;
          $$010861840 = $366;$$010871839 = $363;$$010881838 = 0;
          while(1) {
           $368 = $$010881838 << 1;
           $369 = $$010861840 & 1;
           $370 = $369 | $368;
           $371 = (($$010871839) + -1)|0;
           $372 = $$010861840 >>> 1;
           $373 = ($371|0)==(0);
           if ($373) {
            break;
           } else {
            $$010861840 = $372;$$010871839 = $371;$$010881838 = $370;
           }
          }
          $374 = ($362&255)<(11);
          if ($374) {
           $375 = $363 << 9;
           $376 = $375 | $$010911856;
           $377 = $376&65535;
           $378 = ($370>>>0)<(1024);
           if (!($378)) {
            $$41201 = $$011971855;
            break;
           }
           $379 = 1 << $363;
           $$110891852 = $370;
           while(1) {
            $380 = ((((((($0)) + 64|0) + (($248*3488)|0)|0)) + 288|0) + ($$110891852<<1)|0);
            HEAP16[$380>>1] = $377;
            $381 = (($$110891852) + ($379))|0;
            $382 = ($381>>>0)<(1024);
            if ($382) {
             $$110891852 = $381;
            } else {
             $$41201 = $$011971855;
             break L142;
            }
           }
          }
          $383 = $370 & 1023;
          $384 = ((((((($0)) + 64|0) + (($248*3488)|0)|0)) + 288|0) + ($383<<1)|0);
          $385 = HEAP16[$384>>1]|0;
          $386 = $385 << 16 >> 16;
          $387 = ($385<<16>>16)==(0);
          if ($387) {
           $388 = (($$011971855) + -2)|0;
           $389 = $$011971855&65535;
           HEAP16[$384>>1] = $389;
           $$01194 = $$011971855;$$11198 = $388;
          } else {
           $$01194 = $386;$$11198 = $$011971855;
          }
          $390 = $$010881838 >>> 9;
          $391 = ($362&255)>(11);
          $392 = $390 & 1;
          $393 = (($392) - ($$01194))|0;
          $394 = (($393) + -1)|0;
          if ($391) {
           $395 = $390 & 4194303;
           $$010941846 = $363;$$211991845 = $$11198;$397 = $394;$406 = $395;
           while(1) {
            $396 = ((((((($0)) + 64|0) + (($248*3488)|0)|0)) + 2336|0) + ($397<<1)|0);
            $398 = HEAP16[$396>>1]|0;
            $399 = ($398<<16>>16)==(0);
            if ($399) {
             $400 = $$211991845&65535;
             HEAP16[$396>>1] = $400;
             $401 = (($$211991845) + -2)|0;
             $$21196 = $$211991845;$$31200 = $401;
            } else {
             $402 = $398 << 16 >> 16;
             $$21196 = $402;$$31200 = $$211991845;
            }
            $403 = (($$010941846) + -1)|0;
            $404 = ($403>>>0)>(11);
            $405 = $406 >>> 1;
            $407 = $405 & 1;
            $408 = (($407) - ($$21196))|0;
            $409 = (($408) + -1)|0;
            if ($404) {
             $$010941846 = $403;$$211991845 = $$31200;$397 = $409;$406 = $405;
            } else {
             $$21199$lcssa = $$31200;$$lcssa1778 = $409;
             break;
            }
           }
          } else {
           $$21199$lcssa = $$11198;$$lcssa1778 = $394;
          }
          $410 = $$010911856&65535;
          $411 = ((((((($0)) + 64|0) + (($248*3488)|0)|0)) + 2336|0) + ($$lcssa1778<<1)|0);
          HEAP16[$411>>1] = $410;
          $$41201 = $$21199$lcssa;
         }
        } while(0);
        $412 = (($$010911856) + 1)|0;
        $413 = HEAP32[$247>>2]|0;
        $414 = (((($0)) + 44|0) + ($413<<2)|0);
        $415 = HEAP32[$414>>2]|0;
        $416 = ($412>>>0)<($415>>>0);
        if ($416) {
         $$010911856 = $412;$$011971855 = $$41201;
        } else {
         $$lcssa1779 = $413;
         break;
        }
       }
      }
      $417 = ($$lcssa1779|0)==(2);
      if ($417) {
       $$411457 = $$391455;$$411648 = $$391646;$$451036 = $$431034;$$451142 = 0;$$451552 = $$431550;$$46 = $$44;$$461249 = $$441247;$$461355 = $$441353;
       label = 105;
      } else {
       $$521468 = $$391455;$$521659 = $$391646;$$551046 = $$431034;$$561153 = $$431140;$$561563 = $$431550;$$57 = $$44;$$571260 = $$441247;$$571366 = $$441353;
       label = 138;
      }
     } else {
      $$531469 = $$391455;$$531660 = $$391646;$$561047 = $$431034;$$571154 = $$431140;$$571564 = $$431550;$$58 = $$44;$$581261 = $$441247;$$581367 = $$441353;
      label = 139;
     }
     break;
    }
    case 108: {
     label = 0;
     $429 = $$471356 & 1023;
     $430 = (((($0)) + 7328|0) + ($429<<1)|0);
     $431 = HEAP16[$430>>1]|0;
     $432 = $431 << 16 >> 16;
     $433 = ($431<<16>>16)>(-1);
     if ($433) {
      $434 = $432 >> 9;
      $435 = (($434) + -1)|0;
      $436 = ($435>>>0)<($$47>>>0);
      if ($436) {
       $$451461 = $$421458;$$451652 = $$421649;$$491146 = $$461143;$$491556 = $$461553;$$50 = $$47;$$501253 = $$471250;$$501359 = $$471356;
       label = 119;
       continue L125;
      } else {
       label = 113;
       break L125;
      }
     }
     $437 = ($$47>>>0)>(10);
     if ($437) {
      $$0981 = 10;$$0984 = $432;
     } else {
      label = 113;
      break L125;
     }
     while(1) {
      $438 = $$0984 ^ -1;
      $439 = $$471356 >>> $$0981;
      $440 = $439 & 1;
      $441 = (($440) + ($438))|0;
      $442 = (((($0)) + 9376|0) + ($441<<1)|0);
      $443 = HEAP16[$442>>1]|0;
      $444 = ($443<<16>>16)<(0);
      if (!($444)) {
       $$451461 = $$421458;$$451652 = $$421649;$$491146 = $$461143;$$491556 = $$461553;$$50 = $$47;$$501253 = $$471250;$$501359 = $$471356;
       label = 119;
       continue L125;
      }
      $445 = (($$0981) + 1)|0;
      $446 = $443 << 16 >> 16;
      $447 = (($$0981) + 2)|0;
      $448 = ($$47>>>0)<($447>>>0);
      if ($448) {
       label = 113;
       break L125;
      } else {
       $$0981 = $445;$$0984 = $446;
      }
     }
     break;
    }
    case 119: {
     label = 0;
     $471 = $$501359 & 1023;
     $472 = (((($0)) + 7328|0) + ($471<<1)|0);
     $473 = HEAP16[$472>>1]|0;
     $474 = $473 << 16 >> 16;
     $475 = ($473<<16>>16)>(-1);
     if ($475) {
      $476 = $474 >> 9;
      $477 = $474 & 511;
      $$2983 = $476;$$2986 = $477;
     } else {
      $$1982 = 10;$$1985 = $474;
      while(1) {
       $478 = $$1985 ^ -1;
       $479 = (($$1982) + 1)|0;
       $480 = $$501359 >>> $$1982;
       $481 = $480 & 1;
       $482 = (($481) + ($478))|0;
       $483 = (((($0)) + 9376|0) + ($482<<1)|0);
       $484 = HEAP16[$483>>1]|0;
       $485 = $484 << 16 >> 16;
       $486 = ($484<<16>>16)<(0);
       if ($486) {
        $$1982 = $479;$$1985 = $485;
       } else {
        $$2983 = $479;$$2986 = $485;
        break;
       }
      }
     }
     $487 = $$501359 >>> $$2983;
     $488 = (($$50) - ($$2983))|0;
     $489 = ($$2986>>>0)<(16);
     if ($489) {
      $490 = $$2986&255;
      $491 = (($$491146) + 1)|0;
      $492 = (((($0)) + 10532|0) + ($$491146)|0);
      HEAP8[$492>>0] = $490;
      $$411457 = $$451461;$$411648 = $$451652;$$451036 = $$2986;$$451142 = $491;$$451552 = $$491556;$$46 = $488;$$461249 = $$501253;$$461355 = $487;
      label = 105;
      break;
     }
     $493 = ($$2986|0)!=(16);
     $494 = ($$491146|0)!=(0);
     $or$cond24 = $494 | $493;
     if (!($or$cond24)) {
      $$461462 = $$451461;$$461653 = $$451652;$$491040 = $$2986;$$501147 = $$491146;$$501557 = $$491556;$$51 = $488;$$511254 = $$501253;$$511360 = $487;
      label = 125;
      continue L46;
     }
     $495 = (($$2986) + -16)|0;
     $496 = (7794 + ($495)|0);
     $497 = HEAP8[$496>>0]|0;
     $498 = $497 << 24 >> 24;
     $499 = ($488>>>0)<($498>>>0);
     if ($499) {
      $$471463 = $$451461;$$471654 = $$451652;$$501041 = $$2986;$$511148 = $$491146;$$511558 = $$491556;$$52 = $488;$$521255 = $498;$$521361 = $487;
      label = 127;
      continue L125;
     } else {
      $$501466 = $$451461;$$501657 = $$451652;$$531044 = $$2986;$$541151 = $$491146;$$541561 = $$491556;$$55 = $488;$$551258 = $498;$$551364 = $487;
      label = 132;
      continue L125;
     }
     break;
    }
    case 127: {
     label = 0;
     $500 = ($$511558>>>0)<($10>>>0);
     if ($500) {
      $$491465$ph = $$471463;$$491656$ph = $$471654;$$521043$ph = $$501041;$$531150$ph = $$511148;$$54$ph = $$52;$$541257$ph = $$521255;$$541363$ph = $$521361;$$sink1732 = $$511558;
      label = 130;
      continue L46;
     } else {
      $$481464 = $$471463;$$481655 = $$471654;$$511042 = $$501041;$$521149 = $$511148;$$521559 = $$511558;$$53 = $$52;$$531256 = $$521255;$$531362 = $$521361;
      label = 128;
      continue L46;
     }
     break;
    }
    case 132: {
     label = 0;
     $510 = 1 << $$551258;
     $511 = (($510) + -1)|0;
     $512 = $511 & $$551364;
     $513 = $$551364 >>> $$551258;
     $514 = (($$55) - ($$551258))|0;
     $515 = (($$531044) + -16)|0;
     $516 = (7798 + ($515)|0);
     $517 = HEAP8[$516>>0]|0;
     $518 = $517 << 24 >> 24;
     $519 = (($518) + ($512))|0;
     $520 = (((($0)) + 10532|0) + ($$541151)|0);
     $521 = ($$531044|0)==(16);
     if ($521) {
      $522 = (($$541151) + -1)|0;
      $523 = (((($0)) + 10532|0) + ($522)|0);
      $524 = HEAP8[$523>>0]|0;
      $525 = $524&255;
      $527 = $525;
     } else {
      $527 = 0;
     }
     $526 = $527&255;
     _memset(($520|0),($526|0),($519|0))|0;
     $528 = (($519) + ($$541151))|0;
     $$411457 = $$501466;$$411648 = $$501657;$$451036 = $$531044;$$451142 = $528;$$451552 = $$541561;$$46 = $514;$$461249 = $$551258;$$461355 = $513;
     label = 105;
     break;
    }
    case 140: {
     label = 0;
     $539 = $10;
     $540 = $$581565$ph;
     $541 = (($539) - ($540))|0;
     $542 = ($541|0)<(4);
     $543 = ($$59$ph>>>0)<(15);
     L241: do {
      if ($542) {
       $$541661$lcssa = $$541661$ph;$$581155$lcssa = $$581155$ph;$$581565$lcssa = $$581565$ph;$$59$lcssa = $$59$ph;$$591368$lcssa = $$591368$ph;$$lcssa1799 = $543;$$lcssa1802 = $541;
      } else {
       $544 = $12;
       $$5416611868 = $$541661$ph;$$5811551871 = $$581155$ph;$$5815651869 = $$581565$ph;$$5913681870 = $$591368$ph;$$591872 = $$59$ph;$965 = $543;$966 = $541;
       while(1) {
        $545 = $$5416611868;
        $546 = (($544) - ($545))|0;
        $547 = ($546|0)<(2);
        if ($547) {
         $$541661$lcssa = $$5416611868;$$581155$lcssa = $$5811551871;$$581565$lcssa = $$5815651869;$$59$lcssa = $$591872;$$591368$lcssa = $$5913681870;$$lcssa1799 = $965;$$lcssa1802 = $966;
         break L241;
        }
        if ($965) {
         $613 = HEAP8[$$5815651869>>0]|0;
         $614 = $613&255;
         $615 = ((($$5815651869)) + 1|0);
         $616 = HEAP8[$615>>0]|0;
         $617 = $616&255;
         $618 = $617 << 8;
         $619 = $618 | $614;
         $620 = $619 << $$591872;
         $621 = $620 | $$5913681870;
         $622 = ((($$5815651869)) + 2|0);
         $623 = (($$591872) + 16)|0;
         $$641571 = $622;$$65 = $623;$$651374 = $621;
        } else {
         $$641571 = $$5815651869;$$65 = $$591872;$$651374 = $$5913681870;
        }
        $624 = $$651374 & 1023;
        $625 = (((($0)) + 352|0) + ($624<<1)|0);
        $626 = HEAP16[$625>>1]|0;
        $627 = $626 << 16 >> 16;
        $628 = ($626<<16>>16)>(-1);
        if ($628) {
         $629 = $627 >> 9;
         $$1964 = $629;$$1968 = $627;
        } else {
         $$0963 = 10;$$0967 = $627;
         while(1) {
          $630 = $$0967 ^ -1;
          $631 = (($$0963) + 1)|0;
          $632 = $$651374 >>> $$0963;
          $633 = $632 & 1;
          $634 = (($633) + ($630))|0;
          $635 = (((($0)) + 2400|0) + ($634<<1)|0);
          $636 = HEAP16[$635>>1]|0;
          $637 = $636 << 16 >> 16;
          $638 = ($636<<16>>16)<(0);
          if ($638) {
           $$0963 = $631;$$0967 = $637;
          } else {
           $$1964 = $631;$$1968 = $637;
           break;
          }
         }
        }
        $639 = $$651374 >>> $$1964;
        $640 = (($$65) - ($$1964))|0;
        $641 = $$1968 & 256;
        $642 = ($641|0)==(0);
        if (!($642)) {
         $$601476 = $$541470$ph;$$611668 = $$5416611868;$$631054 = $$571048$ph;$$641161 = $$1968;$$651268 = $$591262$ph;$$671574 = $$641571;$$68 = $640;$$681377 = $639;
         label = 176;
         break L126;
        }
        $643 = ($640>>>0)<(15);
        if ($643) {
         $644 = HEAP8[$$641571>>0]|0;
         $645 = $644&255;
         $646 = ((($$641571)) + 1|0);
         $647 = HEAP8[$646>>0]|0;
         $648 = $647&255;
         $649 = $648 << 8;
         $650 = $649 | $645;
         $651 = $650 << $640;
         $652 = $651 | $639;
         $653 = ((($$641571)) + 2|0);
         $654 = (($640) + 16)|0;
         $$651572 = $653;$$66 = $654;$$661375 = $652;
        } else {
         $$651572 = $$641571;$$66 = $640;$$661375 = $639;
        }
        $655 = $$661375 & 1023;
        $656 = (((($0)) + 352|0) + ($655<<1)|0);
        $657 = HEAP16[$656>>1]|0;
        $658 = $657 << 16 >> 16;
        $659 = ($657<<16>>16)>(-1);
        if ($659) {
         $660 = $658 >> 9;
         $$3966 = $660;$$3970 = $658;
        } else {
         $$2965 = 10;$$2969 = $658;
         while(1) {
          $661 = $$2969 ^ -1;
          $662 = (($$2965) + 1)|0;
          $663 = $$661375 >>> $$2965;
          $664 = $663 & 1;
          $665 = (($664) + ($661))|0;
          $666 = (((($0)) + 2400|0) + ($665<<1)|0);
          $667 = HEAP16[$666>>1]|0;
          $668 = $667 << 16 >> 16;
          $669 = ($667<<16>>16)<(0);
          if ($669) {
           $$2965 = $662;$$2969 = $668;
          } else {
           $$3966 = $662;$$3970 = $668;
           break;
          }
         }
        }
        $670 = $$661375 >>> $$3966;
        $671 = (($$66) - ($$3966))|0;
        $672 = $$1968&255;
        HEAP8[$$5416611868>>0] = $672;
        $673 = $$3970 & 256;
        $674 = ($673|0)==(0);
        if (!($674)) {
         break;
        }
        $676 = $$3970&255;
        $677 = ((($$5416611868)) + 1|0);
        HEAP8[$677>>0] = $676;
        $678 = ((($$5416611868)) + 2|0);
        $679 = $$651572;
        $680 = (($539) - ($679))|0;
        $681 = ($680|0)<(4);
        $682 = ($671>>>0)<(15);
        if ($681) {
         $$541661$lcssa = $678;$$581155$lcssa = $$1968;$$581565$lcssa = $$651572;$$59$lcssa = $671;$$591368$lcssa = $670;$$lcssa1799 = $682;$$lcssa1802 = $680;
         break L241;
        } else {
         $$5416611868 = $678;$$5811551871 = $$1968;$$5815651869 = $$651572;$$5913681870 = $670;$$591872 = $671;$965 = $682;$966 = $680;
        }
       }
       $675 = ((($$5416611868)) + 1|0);
       $$601476 = $$541470$ph;$$611668 = $675;$$631054 = $$571048$ph;$$641161 = $$3970;$$651268 = $$591262$ph;$$671574 = $$651572;$$68 = $671;$$681377 = $670;
       label = 176;
       break L126;
      }
     } while(0);
     if (!($$lcssa1799)) {
      $$581474 = $$541470$ph;$$581665 = $$541661$lcssa;$$611052 = $$571048$ph;$$621569 = $$581565$lcssa;$$63 = $$59$lcssa;$$631266 = $$591262$ph;$$631372 = $$591368$lcssa;
      label = 156;
      continue L125;
     }
     $548 = ($$lcssa1802|0)<(2);
     if ($548) {
      $$551471 = $$541470$ph;$$551662 = $$541661$lcssa;$$581049 = $$571048$ph;$$591156 = $$581155$lcssa;$$591566 = $$581565$lcssa;$$60 = $$59$lcssa;$$601263 = $$591262$ph;$$601369 = $$591368$lcssa;
      label = 145;
      continue L125;
     }
     $579 = HEAP8[$$581565$lcssa>>0]|0;
     $580 = $579&255;
     $581 = $580 << $$59$lcssa;
     $582 = ((($$581565$lcssa)) + 1|0);
     $583 = HEAP8[$582>>0]|0;
     $584 = $583&255;
     $585 = (($$59$lcssa) + 8)|0;
     $586 = $584 << $585;
     $587 = $581 | $$591368$lcssa;
     $588 = $587 | $586;
     $589 = ((($$581565$lcssa)) + 2|0);
     $590 = (($$59$lcssa) + 16)|0;
     $$581474 = $$541470$ph;$$581665 = $$541661$lcssa;$$611052 = $$571048$ph;$$621569 = $589;$$63 = $590;$$631266 = $$591262$ph;$$631372 = $588;
     label = 156;
     continue L125;
     break;
    }
    case 145: {
     label = 0;
     $549 = $$601369 & 1023;
     $550 = (((($0)) + 352|0) + ($549<<1)|0);
     $551 = HEAP16[$550>>1]|0;
     $552 = $551 << 16 >> 16;
     $553 = ($551<<16>>16)>(-1);
     if ($553) {
      $554 = $552 >> 9;
      $555 = (($554) + -1)|0;
      $556 = ($555>>>0)<($$60>>>0);
      if ($556) {
       $$581474 = $$551471;$$581665 = $$551662;$$611052 = $$581049;$$621569 = $$591566;$$63 = $$60;$$631266 = $$601263;$$631372 = $$601369;
       label = 156;
       continue L125;
      } else {
       label = 150;
       break L125;
      }
     }
     $557 = ($$60>>>0)>(10);
     if ($557) {
      $$0972 = 10;$$0975 = $552;
     } else {
      label = 150;
      break L125;
     }
     while(1) {
      $558 = $$0975 ^ -1;
      $559 = $$601369 >>> $$0972;
      $560 = $559 & 1;
      $561 = (($560) + ($558))|0;
      $562 = (((($0)) + 2400|0) + ($561<<1)|0);
      $563 = HEAP16[$562>>1]|0;
      $564 = ($563<<16>>16)<(0);
      if (!($564)) {
       $$581474 = $$551471;$$581665 = $$551662;$$611052 = $$581049;$$621569 = $$591566;$$63 = $$60;$$631266 = $$601263;$$631372 = $$601369;
       label = 156;
       continue L125;
      }
      $565 = (($$0972) + 1)|0;
      $566 = $563 << 16 >> 16;
      $567 = (($$0972) + 2)|0;
      $568 = ($$60>>>0)<($567>>>0);
      if ($568) {
       label = 150;
       break L125;
      } else {
       $$0972 = $565;$$0975 = $566;
      }
     }
     break;
    }
    case 156: {
     label = 0;
     $591 = $$631372 & 1023;
     $592 = (((($0)) + 352|0) + ($591<<1)|0);
     $593 = HEAP16[$592>>1]|0;
     $594 = $593 << 16 >> 16;
     $595 = ($593<<16>>16)>(-1);
     if ($595) {
      $596 = $594 >> 9;
      $597 = $594 & 511;
      $$2974 = $596;$$2977 = $597;
     } else {
      $$1973 = 10;$$1976 = $594;
      while(1) {
       $598 = $$1976 ^ -1;
       $599 = (($$1973) + 1)|0;
       $600 = $$631372 >>> $$1973;
       $601 = $600 & 1;
       $602 = (($601) + ($598))|0;
       $603 = (((($0)) + 2400|0) + ($602<<1)|0);
       $604 = HEAP16[$603>>1]|0;
       $605 = $604 << 16 >> 16;
       $606 = ($604<<16>>16)<(0);
       if ($606) {
        $$1973 = $599;$$1976 = $605;
       } else {
        $$2974 = $599;$$2977 = $605;
        break;
       }
      }
     }
     $607 = $$631372 >>> $$2974;
     $608 = (($$63) - ($$2974))|0;
     $609 = ($$2977>>>0)>(255);
     if ($609) {
      $$601476 = $$581474;$$611668 = $$581665;$$631054 = $$611052;$$641161 = $$2977;$$651268 = $$631266;$$671574 = $$621569;$$68 = $608;$$681377 = $607;
      label = 176;
     } else {
      $$591475 = $$581474;$$591666 = $$581665;$$621053 = $$611052;$$621159 = $$2977;$$631570 = $$621569;$$64 = $608;$$641267 = $$631266;$$641373 = $607;
      label = 160;
      continue L46;
     }
     break;
    }
    case 179: {
     label = 0;
     $693 = ($$681575>>>0)<($10>>>0);
     if ($693) {
      $$631479$ph = $$611477;$$641671$ph = $$621669;$$661057$ph = $$641055;$$671164$ph = $$651162;$$681271$ph = $$661269;$$71$ph = $$69;$$711380$ph = $$691378;$$sink1739 = $$681575;
      label = 182;
      continue L46;
     } else {
      $$621478 = $$611477;$$631670 = $$621669;$$651056 = $$641055;$$661163 = $$651162;$$671270 = $$661269;$$691576 = $$681575;$$70 = $$69;$$701379 = $$691378;
      label = 180;
      continue L46;
     }
     break;
    }
    case 184: {
     label = 0;
     $703 = 1 << $$691272;
     $704 = (($703) + -1)|0;
     $705 = $704 & $$721381;
     $706 = $$721381 >>> $$691272;
     $707 = (($$72) - ($$691272))|0;
     $708 = (($705) + ($$681165))|0;
     $$651481 = $$641480;$$661673 = $$651672;$$681059 = $$671058;$$691166 = $708;$$701273 = $$691272;$$721579 = $$711578;$$73 = $707;$$731382 = $706;
     label = 185;
     break;
    }
    case 187: {
     label = 0;
     $714 = $$741383 & 1023;
     $715 = (((($0)) + 3840|0) + ($714<<1)|0);
     $716 = HEAP16[$715>>1]|0;
     $717 = $716 << 16 >> 16;
     $718 = ($716<<16>>16)>(-1);
     if ($718) {
      $719 = $717 >> 9;
      $720 = (($719) + -1)|0;
      $721 = ($720>>>0)<($$74>>>0);
      if ($721) {
       $$691485 = $$661482;$$701677 = $$671674;$$731170 = $$701167;$$761583 = $$731580;$$77 = $$74;$$771386 = $$741383;
       label = 198;
       continue L125;
      } else {
       label = 192;
       break L125;
      }
     }
     $722 = ($$74>>>0)>(10);
     if ($722) {
      $$0953 = 10;$$0956 = $717;
     } else {
      label = 192;
      break L125;
     }
     while(1) {
      $723 = $$0956 ^ -1;
      $724 = $$741383 >>> $$0953;
      $725 = $724 & 1;
      $726 = (($725) + ($723))|0;
      $727 = (((($0)) + 5888|0) + ($726<<1)|0);
      $728 = HEAP16[$727>>1]|0;
      $729 = ($728<<16>>16)<(0);
      if (!($729)) {
       $$691485 = $$661482;$$701677 = $$671674;$$731170 = $$701167;$$761583 = $$731580;$$77 = $$74;$$771386 = $$741383;
       label = 198;
       continue L125;
      }
      $730 = (($$0953) + 1)|0;
      $731 = $728 << 16 >> 16;
      $732 = (($$0953) + 2)|0;
      $733 = ($$74>>>0)<($732>>>0);
      if ($733) {
       label = 192;
       break L125;
      } else {
       $$0953 = $730;$$0956 = $731;
      }
     }
     break;
    }
    case 198: {
     label = 0;
     $756 = $$771386 & 1023;
     $757 = (((($0)) + 3840|0) + ($756<<1)|0);
     $758 = HEAP16[$757>>1]|0;
     $759 = $758 << 16 >> 16;
     $760 = ($758<<16>>16)>(-1);
     if ($760) {
      $761 = $759 >> 9;
      $762 = $759 & 511;
      $$2955 = $761;$$2958 = $762;
     } else {
      $$1954 = 10;$$1957 = $759;
      while(1) {
       $763 = $$1957 ^ -1;
       $764 = (($$1954) + 1)|0;
       $765 = $$771386 >>> $$1954;
       $766 = $765 & 1;
       $767 = (($766) + ($763))|0;
       $768 = (((($0)) + 5888|0) + ($767<<1)|0);
       $769 = HEAP16[$768>>1]|0;
       $770 = $769 << 16 >> 16;
       $771 = ($769<<16>>16)<(0);
       if ($771) {
        $$1954 = $764;$$1957 = $770;
       } else {
        $$2955 = $764;$$2958 = $770;
        break;
       }
      }
     }
     $772 = $$771386 >>> $$2955;
     $773 = (($$77) - ($$2955))|0;
     $774 = (3760 + ($$2958<<2)|0);
     $775 = HEAP32[$774>>2]|0;
     $776 = (3632 + ($$2958<<2)|0);
     $777 = HEAP32[$776>>2]|0;
     $778 = (($$2958) + -4)|0;
     $779 = ($778>>>0)<(26);
     if ($779) {
      $780 = ($773>>>0)<($775>>>0);
      if ($780) {
       $$701486 = $$691485;$$711678 = $$701677;$$721063 = $777;$$741171 = $$731170;$$741277 = $775;$$771584 = $$761583;$$78 = $773;$$781387 = $772;
       label = 203;
       continue L125;
      } else {
       $$741681 = $$701677;$$751066 = $777;$$771174 = $$731170;$$771280 = $775;$$801587 = $$761583;$$81 = $773;$$811390 = $772;
       label = 208;
       continue L125;
      }
     } else {
      $$751682 = $$701677;$$761067 = $777;$$781175 = $$731170;$$781281 = $775;$$811588 = $$761583;$$82 = $773;$$821391 = $772;
      label = 209;
     }
     break;
    }
    case 203: {
     label = 0;
     $781 = ($$771584>>>0)<($10>>>0);
     if ($781) {
      $$721488$ph = $$701486;$$731680$ph = $$711678;$$741065$ph = $$721063;$$761173$ph = $$741171;$$761279$ph = $$741277;$$80$ph = $$78;$$801389$ph = $$781387;$$sink1746 = $$771584;
      label = 206;
      continue L46;
     } else {
      $$711487 = $$701486;$$721679 = $$711678;$$731064 = $$721063;$$751172 = $$741171;$$751278 = $$741277;$$781585 = $$771584;$$79 = $$78;$$791388 = $$781387;
      label = 204;
      continue L46;
     }
     break;
    }
    case 208: {
     label = 0;
     $791 = 1 << $$771280;
     $792 = (($791) + -1)|0;
     $793 = $792 & $$811390;
     $794 = $$811390 >>> $$771280;
     $795 = (($$81) - ($$771280))|0;
     $796 = (($793) + ($$751066))|0;
     $$751682 = $$741681;$$761067 = $796;$$781175 = $$771174;$$781281 = $$771280;$$811588 = $$801587;$$82 = $795;$$821391 = $794;
     label = 209;
     break;
    }
    case 212: {
     label = 0;
     $807 = (($$801177) + -1)|0;
     $808 = ($$801177|0)==(0);
     if ($808) {
      $$531469 = $$741490;$$531660 = $$771684;$$561047 = $$781069;$$571154 = $807;$$571564 = $$831590;$$58 = $$84;$$581261 = $$801283;$$581367 = $$841393;
      label = 139;
     } else {
      $$751491 = $$741490;$$781685 = $$771684;$$791070 = $$781069;$$811178 = $807;$$811284 = $$801283;$$841591 = $$831590;$$85 = $$84;$$851394 = $$841393;
      label = 213;
      continue L46;
     }
     break;
    }
   }
   do {
    if ((label|0) == 70) {
     label = 0;
     $217 = ((($0)) + 52|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($$381135>>>0)<($218>>>0);
     if ($219) {
      $220 = ($$39>>>0)<(3);
      if ($220) {
       $$351451 = $$341450;$$351642 = $$341641;$$391030 = $$381029;$$391136 = $$381135;$$391546 = $$381545;$$40 = $$39;$$401243 = $$391242;$$401349 = $$391348;
       label = 72;
       continue L125;
      } else {
       $$381454 = $$341450;$$381645 = $$341641;$$421033 = $$381029;$$421139 = $$381135;$$421549 = $$381545;$$43 = $$39;$$431246 = $$391242;$$431352 = $$391348;
       label = 77;
       continue L125;
      }
     } else {
      HEAP32[$217>>2] = 19;
      $$391455 = $$341450;$$391646 = $$341641;$$431034 = $$381029;$$431140 = $$381135;$$431550 = $$381545;$$44 = $$39;$$441247 = $$391242;$$441353 = $$391348;
      label = 80;
      continue L125;
     }
    }
    else if ((label|0) == 105) {
     label = 0;
     $418 = ((($0)) + 44|0);
     $419 = HEAP32[$418>>2]|0;
     $420 = ((($0)) + 48|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = (($421) + ($419))|0;
     $423 = ($$451142>>>0)<($422>>>0);
     if (!($423)) {
      $529 = ($422|0)==($$451142|0);
      if (!($529)) {
       $$511467 = $$411457;$$511658 = $$411648;$$541045 = $$451036;$$551152 = $$451142;$$551562 = $$451552;$$56 = $$46;$$561259 = $$461249;$$561365 = $$461355;
       label = 136;
       continue L46;
      }
      $530 = ((($0)) + 64|0);
      $531 = ((($0)) + 10532|0);
      _memcpy(($530|0),($531|0),($419|0))|0;
      $532 = ((($0)) + 3552|0);
      $533 = HEAP32[$418>>2]|0;
      $534 = (((($0)) + 10532|0) + ($533)|0);
      $535 = HEAP32[$420>>2]|0;
      _memcpy(($532|0),($534|0),($535|0))|0;
      $$521468 = $$411457;$$521659 = $$411648;$$551046 = $$451036;$$561153 = $$451142;$$561563 = $$451552;$$57 = $$46;$$571260 = $$461249;$$571366 = $$461355;
      label = 138;
      break;
     }
     $424 = ($$46>>>0)<(15);
     if (!($424)) {
      $$451461 = $$411457;$$451652 = $$411648;$$491146 = $$451142;$$491556 = $$451552;$$50 = $$46;$$501253 = $$461249;$$501359 = $$461355;
      label = 119;
      continue L125;
     }
     $425 = $10;
     $426 = $$451552;
     $427 = (($425) - ($426))|0;
     $428 = ($427|0)<(2);
     if ($428) {
      $$421458 = $$411457;$$421649 = $$411648;$$461037 = $$451036;$$461143 = $$451142;$$461553 = $$451552;$$47 = $$46;$$471250 = $$461249;$$471356 = $$461355;
      label = 108;
      continue L125;
     }
     $459 = HEAP8[$$451552>>0]|0;
     $460 = $459&255;
     $461 = $460 << $$46;
     $462 = ((($$451552)) + 1|0);
     $463 = HEAP8[$462>>0]|0;
     $464 = $463&255;
     $465 = (($$46) + 8)|0;
     $466 = $464 << $465;
     $467 = $461 | $$461355;
     $468 = $467 | $466;
     $469 = ((($$451552)) + 2|0);
     $470 = (($$46) + 16)|0;
     $$451461 = $$411457;$$451652 = $$411648;$$491146 = $$451142;$$491556 = $469;$$50 = $470;$$501253 = $$461249;$$501359 = $468;
     label = 119;
     continue L125;
    }
    else if ((label|0) == 176) {
     label = 0;
     $683 = $$641161 & 511;
     $684 = ($683|0)==(256);
     if ($684) {
      $$761492 = $$601476;$$801071 = $$631054;$$801687 = $$611668;$$821285 = $$651268;$$831180 = 256;$$851592 = $$671574;$$86 = $$68;$$861395 = $$681377;
      label = 220;
      break L125;
     }
     $685 = (($683) + -257)|0;
     $686 = (3508 + ($685<<2)|0);
     $687 = HEAP32[$686>>2]|0;
     $688 = (3384 + ($685<<2)|0);
     $689 = HEAP32[$688>>2]|0;
     $690 = (($683) + -265)|0;
     $691 = ($690>>>0)<(20);
     if ($691) {
      $692 = ($$68>>>0)<($687>>>0);
      if ($692) {
       $$611477 = $$601476;$$621669 = $$611668;$$641055 = $$631054;$$651162 = $689;$$661269 = $687;$$681575 = $$671574;$$69 = $$68;$$691378 = $$681377;
       label = 179;
       continue L125;
      } else {
       $$641480 = $$601476;$$651672 = $$611668;$$671058 = $$631054;$$681165 = $689;$$691272 = $687;$$711578 = $$671574;$$72 = $$68;$$721381 = $$681377;
       label = 184;
       continue L125;
      }
     } else {
      $$651481 = $$601476;$$661673 = $$611668;$$681059 = $$631054;$$691166 = $689;$$701273 = $687;$$721579 = $$671574;$$73 = $$68;$$731382 = $$681377;
      label = 185;
     }
    }
    else if ((label|0) == 209) {
     label = 0;
     $797 = $$751682;
     $798 = $3;
     $799 = (($797) - ($798))|0;
     $$not = ($799>>>0)>=($$761067>>>0);
     $$not1747 = $14 ^ 1;
     $brmerge = $$not | $$not1747;
     if (!($brmerge)) {
      $$731489 = $799;$$761683 = $$751682;$$771068 = $$761067;$$791176 = $$781175;$$791282 = $$781281;$$821589 = $$811588;$$83 = $$82;$$831392 = $$821391;
      label = 210;
      continue L46;
     }
     $800 = (($799) - ($$761067))|0;
     $801 = $800 & $$1753;
     $802 = (($3) + ($801)|0);
     $803 = ($$751682>>>0)>($802>>>0);
     $804 = $803 ? $$751682 : $802;
     $805 = (($804) + ($$781175)|0);
     $806 = ($805>>>0)>($12>>>0);
     if ($806) {
      $$741490 = $799;$$771684 = $$751682;$$781069 = $$761067;$$801177 = $$781175;$$801283 = $$781281;$$831590 = $$811588;$$84 = $$82;$$841393 = $$821391;
      label = 212;
      continue L125;
     } else {
      $$0978 = $802;$$791686 = $$751682;$$821179 = $$781175;
     }
     while(1) {
      $816 = HEAP8[$$0978>>0]|0;
      HEAP8[$$791686>>0] = $816;
      $817 = ((($$0978)) + 1|0);
      $818 = HEAP8[$817>>0]|0;
      $819 = ((($$791686)) + 1|0);
      HEAP8[$819>>0] = $818;
      $820 = ((($$0978)) + 2|0);
      $821 = HEAP8[$820>>0]|0;
      $822 = ((($$791686)) + 2|0);
      HEAP8[$822>>0] = $821;
      $823 = ((($$791686)) + 3|0);
      $824 = ((($$0978)) + 3|0);
      $825 = (($$821179) + -3)|0;
      $826 = ($825|0)>(2);
      if ($826) {
       $$0978 = $824;$$791686 = $823;$$821179 = $825;
      } else {
       break;
      }
     }
     $827 = ($825|0)>(0);
     if ($827) {
      $828 = HEAP8[$824>>0]|0;
      HEAP8[$823>>0] = $828;
      $829 = ($825|0)==(1);
      if (!($829)) {
       $830 = ((($$0978)) + 4|0);
       $831 = HEAP8[$830>>0]|0;
       $832 = ((($$791686)) + 4|0);
       HEAP8[$832>>0] = $831;
      }
      $833 = (($823) + ($825)|0);
      $$531469 = $799;$$531660 = $833;$$561047 = $$761067;$$571154 = $825;$$571564 = $$811588;$$58 = $$82;$$581261 = $$781281;$$581367 = $$821391;
      label = 139;
     } else {
      $$531469 = $799;$$531660 = $823;$$561047 = $$761067;$$571154 = $825;$$571564 = $$811588;$$58 = $$82;$$581261 = $$781281;$$581367 = $$821391;
      label = 139;
     }
    }
   } while(0);
   if ((label|0) == 138) {
    label = 0;
    $536 = ((($0)) + 24|0);
    $537 = HEAP32[$536>>2]|0;
    $538 = (($537) + -1)|0;
    HEAP32[$536>>2] = $538;
    $$391455 = $$521468;$$391646 = $$521659;$$431034 = $$551046;$$431140 = $$561153;$$431550 = $$561563;$$44 = $$57;$$441247 = $$571260;$$441353 = $$571366;
    label = 80;
    continue;
   }
   else if ((label|0) == 139) {
    label = 0;
    $$541470$ph = $$531469;$$541661$ph = $$531660;$$571048$ph = $$561047;$$581155$ph = $$571154;$$581565$ph = $$571564;$$59$ph = $$58;$$591262$ph = $$581261;$$591368$ph = $$581367;
    label = 140;
    continue;
   }
   else if ((label|0) == 185) {
    label = 0;
    $709 = ($$73>>>0)<(15);
    if (!($709)) {
     $$691485 = $$651481;$$701677 = $$661673;$$731170 = $$691166;$$761583 = $$721579;$$77 = $$73;$$771386 = $$731382;
     label = 198;
     continue;
    }
    $710 = $10;
    $711 = $$721579;
    $712 = (($710) - ($711))|0;
    $713 = ($712|0)<(2);
    if ($713) {
     $$661482 = $$651481;$$671674 = $$661673;$$691060 = $$681059;$$701167 = $$691166;$$711274 = $$701273;$$731580 = $$721579;$$74 = $$73;$$741383 = $$731382;
     label = 187;
     continue;
    }
    $744 = HEAP8[$$721579>>0]|0;
    $745 = $744&255;
    $746 = $745 << $$73;
    $747 = ((($$721579)) + 1|0);
    $748 = HEAP8[$747>>0]|0;
    $749 = $748&255;
    $750 = (($$73) + 8)|0;
    $751 = $749 << $750;
    $752 = $746 | $$731382;
    $753 = $752 | $751;
    $754 = ((($$721579)) + 2|0);
    $755 = (($$73) + 16)|0;
    $$691485 = $$651481;$$701677 = $$661673;$$731170 = $$691166;$$761583 = $754;$$77 = $755;$$771386 = $753;
    label = 198;
    continue;
   }
  }
  if ((label|0) == 113) {
   label = 0;
   $449 = ($$461553>>>0)<($10>>>0);
   if ($449) {
    $$441460$ph = $$421458;$$441651$ph = $$421649;$$481039$ph = $$461037;$$481145$ph = $$461143;$$49$ph = $$47;$$491252$ph = $$471250;$$491358$ph = $$471356;$$sink1729 = $$461553;
    label = 116;
    continue;
   } else {
    $$431459 = $$421458;$$431650 = $$421649;$$471038 = $$461037;$$471144 = $$461143;$$471554 = $$461553;$$48 = $$47;$$481251 = $$471250;$$481357 = $$471356;
    label = 114;
    continue;
   }
  }
  else if ((label|0) == 150) {
   label = 0;
   $569 = ($$591566>>>0)<($10>>>0);
   if ($569) {
    $$571473$ph = $$551471;$$571664$ph = $$551662;$$601051$ph = $$581049;$$611158$ph = $$591156;$$62$ph = $$60;$$621265$ph = $$601263;$$621371$ph = $$601369;$$sink1736 = $$591566;
    label = 153;
    continue;
   } else {
    $$561472 = $$551471;$$561663 = $$551662;$$591050 = $$581049;$$601157 = $$591156;$$601567 = $$591566;$$61 = $$60;$$611264 = $$601263;$$611370 = $$601369;
    label = 151;
    continue;
   }
  }
  else if ((label|0) == 192) {
   label = 0;
   $734 = ($$731580>>>0)<($10>>>0);
   if ($734) {
    $$681484$ph = $$661482;$$691676$ph = $$671674;$$711062$ph = $$691060;$$721169$ph = $$701167;$$731276$ph = $$711274;$$76$ph = $$74;$$761385$ph = $$741383;$$sink1743 = $$731580;
    label = 195;
    continue;
   } else {
    $$671483 = $$661482;$$681675 = $$671674;$$701061 = $$691060;$$711168 = $$701167;$$721275 = $$711274;$$741581 = $$731580;$$75 = $$74;$$751384 = $$741383;
    label = 193;
    continue;
   }
  }
  else if ((label|0) == 220) {
   label = 0;
   $834 = ((($0)) + 20|0);
   $835 = HEAP32[$834>>2]|0;
   $836 = $835 & 1;
   $837 = ($836|0)==(0);
   if ($837) {
    $$01416 = $$761492;$$01607 = $$801687;$$41511 = $$851592;$$5 = $$86;$$51102 = $$831180;$$51208 = $$821285;$$51314 = $$861395;$$5996 = $$801071;
    label = 14;
    continue;
   }
   $838 = $6 & 1;
   $839 = ($838|0)==(0);
   if ($839) {
    $$881504 = $$761492;$$921083 = $$801071;$$921699 = $$801687;$$941191 = $$831180;$$941297 = $$821285;$$971604 = $$851592;$$98 = $$86;$$981407 = $$861395;
    label = 242;
    continue;
   } else {
    $$801496 = $$761492;$$841075 = $$801071;$$841691 = $$801687;$$861289 = $$821285;$$891596 = $$851592;$$90 = $$86;$$901399 = $$861395;
    label = 226;
    continue;
   }
  }
 }
 if ((label|0) == 258) {
  STACKTOP = sp;return ($$0951|0);
 }
 $892 = ((($0)) + 28|0);
 $893 = HEAP32[$892>>2]|0;
 $894 = $893 & 65535;
 $895 = $893 >>> 16;
 $896 = ($888|0)==(0);
 if ($896) {
  $$0937$lcssa = $895;$$0938$lcssa = $894;
 } else {
  $897 = (($888>>>0) % 5552)&-1;
  $$01834 = $897;$$09371833 = $895;$$09381832 = $894;$$09431831 = $888;$$09441830 = $4;
  while(1) {
   $898 = ($$01834>>>0)>(7);
   if ($898) {
    $899 = (($$01834) + -8)|0;
    $900 = $899 & -8;
    $scevgep = ((($$09441830)) + 8|0);
    $$09411816 = 0;$$11818 = $$09371833;$$19391817 = $$09381832;$$19451815 = $$09441830;
    while(1) {
     $904 = HEAP8[$$19451815>>0]|0;
     $905 = $904&255;
     $906 = (($905) + ($$19391817))|0;
     $907 = (($906) + ($$11818))|0;
     $908 = ((($$19451815)) + 1|0);
     $909 = HEAP8[$908>>0]|0;
     $910 = $909&255;
     $911 = (($906) + ($910))|0;
     $912 = (($907) + ($911))|0;
     $913 = ((($$19451815)) + 2|0);
     $914 = HEAP8[$913>>0]|0;
     $915 = $914&255;
     $916 = (($911) + ($915))|0;
     $917 = (($912) + ($916))|0;
     $918 = ((($$19451815)) + 3|0);
     $919 = HEAP8[$918>>0]|0;
     $920 = $919&255;
     $921 = (($916) + ($920))|0;
     $922 = (($917) + ($921))|0;
     $923 = ((($$19451815)) + 4|0);
     $924 = HEAP8[$923>>0]|0;
     $925 = $924&255;
     $926 = (($921) + ($925))|0;
     $927 = (($922) + ($926))|0;
     $928 = ((($$19451815)) + 5|0);
     $929 = HEAP8[$928>>0]|0;
     $930 = $929&255;
     $931 = (($926) + ($930))|0;
     $932 = (($927) + ($931))|0;
     $933 = ((($$19451815)) + 6|0);
     $934 = HEAP8[$933>>0]|0;
     $935 = $934&255;
     $936 = (($931) + ($935))|0;
     $937 = (($932) + ($936))|0;
     $938 = ((($$19451815)) + 7|0);
     $939 = HEAP8[$938>>0]|0;
     $940 = $939&255;
     $941 = (($936) + ($940))|0;
     $942 = (($937) + ($941))|0;
     $943 = (($$09411816) + 8)|0;
     $944 = ((($$19451815)) + 8|0);
     $945 = $943 | 7;
     $946 = ($945>>>0)<($$01834>>>0);
     if ($946) {
      $$09411816 = $943;$$11818 = $942;$$19391817 = $941;$$19451815 = $944;
     } else {
      break;
     }
    }
    $901 = (($900) + 8)|0;
    $scevgep1947 = (($scevgep) + ($900)|0);
    $$0941$lcssa = $901;$$1$lcssa = $942;$$1939$lcssa = $941;$$1945$lcssa = $scevgep1947;
   } else {
    $$0941$lcssa = 0;$$1$lcssa = $$09371833;$$1939$lcssa = $$09381832;$$1945$lcssa = $$09441830;
   }
   $902 = ($$01834>>>0)>($$0941$lcssa>>>0);
   if ($902) {
    $903 = (($$01834) - ($$0941$lcssa))|0;
    $$19421823 = $$0941$lcssa;$$21825 = $$1$lcssa;$$29401824 = $$1939$lcssa;$$29461822 = $$1945$lcssa;
    while(1) {
     $947 = ((($$29461822)) + 1|0);
     $948 = HEAP8[$$29461822>>0]|0;
     $949 = $948&255;
     $950 = (($949) + ($$29401824))|0;
     $951 = (($950) + ($$21825))|0;
     $952 = (($$19421823) + 1)|0;
     $exitcond = ($952|0)==($$01834|0);
     if ($exitcond) {
      break;
     } else {
      $$19421823 = $952;$$21825 = $951;$$29401824 = $950;$$29461822 = $947;
     }
    }
    $scevgep1948 = (($$1945$lcssa) + ($903)|0);
    $$2$lcssa = $951;$$2940$lcssa = $950;$$2946$lcssa = $scevgep1948;
   } else {
    $$2$lcssa = $$1$lcssa;$$2940$lcssa = $$1939$lcssa;$$2946$lcssa = $$1945$lcssa;
   }
   $953 = (($$2940$lcssa>>>0) % 65521)&-1;
   $954 = (($$2$lcssa>>>0) % 65521)&-1;
   $955 = (($$09431831) - ($$01834))|0;
   $956 = ($955|0)==(0);
   if ($956) {
    $$0937$lcssa = $954;$$0938$lcssa = $953;
    break;
   } else {
    $$01834 = 5552;$$09371833 = $954;$$09381832 = $953;$$09431831 = $955;$$09441830 = $$2946$lcssa;
   }
  }
 }
 $957 = $$0937$lcssa << 16;
 $958 = $957 | $$0938$lcssa;
 HEAP32[$892>>2] = $958;
 $959 = ($$1961|0)!=(0);
 $960 = $6 & 1;
 $961 = ($960|0)==(0);
 $or$cond1752 = $961 | $959;
 if ($or$cond1752) {
  $$0951 = $$1961;
  STACKTOP = sp;return ($$0951|0);
 } else {
  $962 = ((($0)) + 16|0);
  $963 = HEAP32[$962>>2]|0;
  $964 = ($958|0)==($963|0);
  $$1961$ = $964 ? $$1961 : -2;
  STACKTOP = sp;return ($$1961$|0);
 }
 return (0)|0;
}
function _tinfl_decompress_mem_to_mem($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 11008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(11008|0);
 $5 = sp + 11000|0;
 $6 = sp;
 $7 = sp + 8|0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $3;
 HEAP32[$7>>2] = 0;
 $8 = $4 & -7;
 $9 = $8 | 4;
 $10 = (_tinfl_decompress($7,$2,$6,$0,$0,$5,$9)|0);
 $11 = ($10|0)!=(0);
 $12 = HEAP32[$5>>2]|0;
 $13 = $11 ? -1 : $12;
 STACKTOP = sp;return ($13|0);
}
function _LoadResource($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$05664 = 0, $$05763 = 0, $$065 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond60 = 0, $or$cond62 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 64|0;
 $3 = sp + 32|0;
 $4 = (_fopen($0,14498)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$vararg_buffer>>2] = $0;
  _TraceLog(1,7802,$vararg_buffer);
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 (_fread($2,1,1,$4)|0);
 $6 = ((($2)) + 1|0);
 (_fread($6,1,1,$4)|0);
 $7 = ((($2)) + 2|0);
 (_fread($7,1,1,$4)|0);
 $8 = ((($2)) + 3|0);
 (_fread($8,1,1,$4)|0);
 $9 = ((($2)) + 4|0);
 (_fread($9,2,1,$4)|0);
 $10 = ((($2)) + 6|0);
 (_fread($10,2,1,$4)|0);
 $11 = HEAP8[$2>>0]|0;
 $12 = ($11<<24>>24)==(114);
 $13 = HEAP8[$6>>0]|0;
 $14 = ($13<<24>>24)==(82);
 $or$cond = $12 | $14;
 $15 = HEAP8[$7>>0]|0;
 $16 = ($15<<24>>24)==(69);
 $or$cond60 = $or$cond | $16;
 $17 = HEAP8[$8>>0]|0;
 $18 = ($17<<24>>24)==(83);
 $or$cond62 = $or$cond60 | $18;
 if ($or$cond62) {
  $19 = HEAP16[$10>>1]|0;
  $20 = ($19<<16>>16)==(0);
  if ($20) {
   $$0$lcssa = 0;
  } else {
   $21 = ((($3)) + 7|0);
   $22 = ((($3)) + 4|0);
   $23 = ((($3)) + 16|0);
   $24 = ((($3)) + 20|0);
   $25 = ((($3)) + 24|0);
   $26 = ((($3)) + 28|0);
   $27 = ((($3)) + 8|0);
   $28 = ((($3)) + 5|0);
   $29 = ((($3)) + 12|0);
   $30 = HEAP16[$10>>1]|0;
   $31 = $30&65535;
   $32 = ((($3)) + 8|0);
   $$05664 = 0;$$065 = 0;
   while(1) {
    (_fread($3,32,1,$4)|0);
    $36 = HEAP32[$3>>2]|0;
    $37 = ($36|0)==($1|0);
    if ($37) {
     $38 = HEAP8[$21>>0]|0;
     $39 = $38&255;
     $40 = ($39*24)|0;
     $41 = (_malloc($40)|0);
     $42 = ($38<<24>>24)==(0);
     if ($42) {
      $$1 = $41;
     } else {
      $$05763 = 0;
      while(1) {
       $43 = HEAP8[$22>>0]|0;
       $44 = $43&255;
       $45 = (($41) + (($$05763*24)|0)|0);
       HEAP32[$45>>2] = $44;
       $46 = HEAP32[$23>>2]|0;
       $47 = (((($41) + (($$05763*24)|0)|0)) + 4|0);
       HEAP32[$47>>2] = $46;
       $48 = HEAP32[$24>>2]|0;
       $49 = (((($41) + (($$05763*24)|0)|0)) + 8|0);
       HEAP32[$49>>2] = $48;
       $50 = HEAP32[$25>>2]|0;
       $51 = (((($41) + (($$05763*24)|0)|0)) + 12|0);
       HEAP32[$51>>2] = $50;
       $52 = HEAP32[$26>>2]|0;
       $53 = (((($41) + (($$05763*24)|0)|0)) + 16|0);
       HEAP32[$53>>2] = $52;
       $54 = HEAP32[$27>>2]|0;
       $55 = (_malloc($54)|0);
       (_fread($55,$54,1,$4)|0);
       $56 = HEAP8[$28>>0]|0;
       $57 = ($56<<24>>24)==(1);
       if ($57) {
        $58 = HEAP32[$27>>2]|0;
        $59 = HEAP32[$29>>2]|0;
        $60 = (_DecompressData($55,$58,$59)|0);
        $61 = (((($41) + (($$05763*24)|0)|0)) + 20|0);
        HEAP32[$61>>2] = $60;
        _free($55);
       } else {
        $62 = (((($41) + (($$05763*24)|0)|0)) + 20|0);
        HEAP32[$62>>2] = $55;
       }
       $63 = (((($41) + (($$05763*24)|0)|0)) + 20|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = ($64|0)==(0|0);
       if (!($65)) {
        $66 = HEAP32[$3>>2]|0;
        HEAP32[$vararg_buffer4>>2] = $0;
        $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
        HEAP32[$vararg_ptr7>>2] = $66;
        _TraceLog(0,7899,$vararg_buffer4);
       }
       (_fread($3,32,1,$4)|0);
       $67 = (($$05763) + 1)|0;
       $68 = HEAP8[$21>>0]|0;
       $69 = $68&255;
       $70 = ($67|0)<($69|0);
       if ($70) {
        $$05763 = $67;
       } else {
        $$1 = $41;
        break;
       }
      }
     }
    } else {
     $71 = HEAP32[$32>>2]|0;
     (_fseek($4,$71,1)|0);
     $$1 = $$065;
    }
    $72 = (($$05664) + 1)|0;
    $73 = ($72|0)<($31|0);
    if ($73) {
     $$05664 = $72;$$065 = $$1;
    } else {
     $$0$lcssa = $$1;
     break;
    }
   }
  }
  $33 = ((($$0$lcssa)) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0|0);
  if ($35) {
   HEAP32[$vararg_buffer8>>2] = $0;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $1;
   _TraceLog(1,7945,$vararg_buffer8);
   $$2 = $$0$lcssa;
  } else {
   $$2 = $$0$lcssa;
  }
 } else {
  HEAP32[$vararg_buffer1>>2] = $0;
  _TraceLog(1,7853,$vararg_buffer1);
  $$2 = 0;
 }
 (_fclose($4)|0);
 $$3 = $$2;
 STACKTOP = sp;return ($$3|0);
}
function _TraceLog($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endptr = 0, $strlen = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 switch ($0|0) {
 case 0:  {
  ;HEAP8[26080>>0]=HEAP8[8250>>0]|0;HEAP8[26080+1>>0]=HEAP8[8250+1>>0]|0;HEAP8[26080+2>>0]=HEAP8[8250+2>>0]|0;HEAP8[26080+3>>0]=HEAP8[8250+3>>0]|0;HEAP8[26080+4>>0]=HEAP8[8250+4>>0]|0;HEAP8[26080+5>>0]=HEAP8[8250+5>>0]|0;HEAP8[26080+6>>0]=HEAP8[8250+6>>0]|0;
  break;
 }
 case 2:  {
  $3 = 26080;
  $4 = $3;
  HEAP32[$4>>2] = 1330795077;
  $5 = (($3) + 4)|0;
  $6 = $5;
  HEAP32[$6>>2] = 2112082;
  break;
 }
 case 1:  {
  dest=26080; src=8257; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 3:  {
  $7 = 26080;
  $8 = $7;
  HEAP32[$8>>2] = 1430406468;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP32[$10>>2] = 2112071;
  break;
 }
 default: {
 }
 }
 (_strcat(26080,$1)|0);
 $strlen = (_strlen(26080)|0);
 $endptr = (26080 + ($strlen)|0);
 HEAP8[$endptr>>0]=10&255;HEAP8[$endptr+1>>0]=10>>8;
 HEAP32[$2>>2] = $varargs;
 $11 = ($0|0)==(3);
 if ($11) {
  STACKTOP = sp;return;
 }
 (_vprintf(26080,$2)|0);
 $12 = ($0|0)==(2);
 if ($12) {
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _DecompressData($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _TraceLog(1,7995,$vararg_buffer);
  STACKTOP = sp;return ($3|0);
 }
 $5 = (_tinfl_decompress_mem_to_mem($3,$2,$0,$1,1)|0);
 $6 = ($5|0)==(-1);
 if ($6) {
  _TraceLog(1,8034,$vararg_buffer1);
  _free($3);
 }
 $7 = ($5|0)==($2|0);
 if (!($7)) {
  _TraceLog(1,8060,$vararg_buffer3);
  HEAP32[$vararg_buffer5>>2] = $2;
  _TraceLog(1,8123,$vararg_buffer5);
  HEAP32[$vararg_buffer7>>2] = $5;
  _TraceLog(1,8158,$vararg_buffer7);
 }
 HEAP32[$vararg_buffer10>>2] = $1;
 $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
 HEAP32[$vararg_ptr13>>2] = $5;
 _TraceLog(0,8193,$vararg_buffer10);
 STACKTOP = sp;return ($3|0);
}
function _UnloadResource($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 _free($2);
 return;
}
function _LoadDefaultFont() {
 var $$ = 0, $$0101 = 0, $$090100 = 0, $$09299 = 0, $$095104 = 0, $$096103 = 0, $$097102 = 0, $$191 = 0, $$193 = 0, $$byval_copy1 = 0, $$lcssa = 0, $$sroa$0$0$$sroa_idx = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy1 = sp + 44|0;
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 $1 = sp + 24|0;
 HEAP32[(336180)>>2] = 224;
 $2 = (_malloc(65536)|0);
 _memset(($2|0),0,65536)|0;
 $$095104 = 0;$$096103 = 0;
 while(1) {
  $3 = (312 + ($$095104<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $$097102 = 31;
  while(1) {
   $16 = 1 << $$097102;
   $17 = $4 & $16;
   $18 = ($17|0)==(0);
   if (!($18)) {
    $19 = (($$097102) + ($$096103))|0;
    $$sroa$0$0$$sroa_idx = (($2) + ($19<<2)|0);
    HEAP8[$$sroa$0$0$$sroa_idx>>0]=-1&255;HEAP8[$$sroa$0$0$$sroa_idx+1>>0]=(-1>>8)&255;HEAP8[$$sroa$0$0$$sroa_idx+2>>0]=(-1>>16)&255;HEAP8[$$sroa$0$0$$sroa_idx+3>>0]=-1>>24;
   }
   $20 = (($$097102) + -1)|0;
   $21 = ($$097102|0)>(0);
   if ($21) {
    $$097102 = $20;
   } else {
    break;
   }
  }
  $12 = (($$095104) + 1)|0;
  $13 = ($$095104|0)>(511);
  $$ = $13 ? 0 : $12;
  $14 = (($$096103) + 32)|0;
  $15 = ($14|0)<(16384);
  if ($15) {
   $$095104 = $$;$$096103 = $14;
  } else {
   break;
  }
 }
 _LoadImageEx($0,$2,128,128);
 _ImageFormat($0,2);
 _free($2);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$0+16>>2]|0;
 _LoadTextureFromImage($1,$$byval_copy1);
 ;HEAP32[336156>>2]=HEAP32[$1>>2]|0;HEAP32[336156+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[336156+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[336156+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[336156+16>>2]=HEAP32[$1+16>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$0+16>>2]|0;
 _UnloadImage($$byval_copy1);
 $5 = HEAP32[(336180)>>2]|0;
 $6 = $5 << 5;
 $7 = (_malloc($6)|0);
 HEAP32[(336184)>>2] = $7;
 $8 = ($5|0)>(0);
 if (!($8)) {
  $$lcssa = $7;
  $22 = ((($$lcssa)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[(336176)>>2] = $23;
  $24 = HEAP32[84039]|0;
  HEAP32[$vararg_buffer>>2] = $24;
  _TraceLog(0,8267,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[(336160)>>2]|0;
 $10 = HEAP32[(336180)>>2]|0;
 $11 = HEAP32[(336184)>>2]|0;
 $$0101 = 0;$$090100 = 1;$$09299 = 0;$27 = $7;
 while(1) {
  $25 = (($$0101) + 32)|0;
  $26 = (($27) + ($$0101<<5)|0);
  HEAP32[$26>>2] = $25;
  $28 = (((($27) + ($$0101<<5)|0)) + 4|0);
  HEAP32[$28>>2] = $$090100;
  $29 = ($$09299*11)|0;
  $30 = (($29) + 1)|0;
  $31 = (((($27) + ($$0101<<5)|0)) + 8|0);
  HEAP32[$31>>2] = $30;
  $32 = (2360 + ($$0101<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (((($27) + ($$0101<<5)|0)) + 12|0);
  HEAP32[$34>>2] = $33;
  $35 = (((($27) + ($$0101<<5)|0)) + 16|0);
  HEAP32[$35>>2] = 10;
  $36 = (($$090100) + 1)|0;
  $37 = (($36) + ($33))|0;
  $38 = ($37|0)<($9|0);
  $39 = (($$09299) + 1)|0;
  if ($38) {
   $$191 = $37;$$193 = $$09299;
  } else {
   $40 = ($39*11)|0;
   $41 = (($40) + 1)|0;
   $42 = (($33) + 2)|0;
   HEAP32[$28>>2] = 1;
   HEAP32[$31>>2] = $41;
   $$191 = $42;$$193 = $39;
  }
  $43 = (((($27) + ($$0101<<5)|0)) + 20|0);
  HEAP32[$43>>2] = 0;
  $44 = (((($27) + ($$0101<<5)|0)) + 24|0);
  HEAP32[$44>>2] = 0;
  $45 = (((($27) + ($$0101<<5)|0)) + 28|0);
  HEAP32[$45>>2] = 0;
  $46 = (($$0101) + 1)|0;
  $47 = ($46|0)<($10|0);
  if ($47) {
   $$0101 = $46;$$090100 = $$191;$$09299 = $$193;$27 = $11;
  } else {
   $$lcssa = $11;
   break;
  }
 }
 $22 = ((($$lcssa)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[(336176)>>2] = $23;
 $24 = HEAP32[84039]|0;
 HEAP32[$vararg_buffer>>2] = $24;
 _TraceLog(0,8267,$vararg_buffer);
 STACKTOP = sp;return;
}
function _LoadImageEx($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$03334 = 0, $$035 = 0, $$sroa$12$0$$sroa_idx21 = 0, $$sroa$15$0$$sroa_idx24 = 0, $$sroa$16$0$$sroa_idx26 = 0, $$sroa$9$0$$sroa_idx18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2 << 2;
 $5 = Math_imul($4, $3)|0;
 $6 = (_malloc($5)|0);
 $7 = ($5|0)>(0);
 if ($7) {
  $8 = (($5) + -1)|0;
  $9 = $8 >>> 2;
  $$03334 = 0;$$035 = 0;
  while(1) {
   $10 = (($1) + ($$03334<<2)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = (($6) + ($$035)|0);
   HEAP8[$12>>0] = $11;
   $13 = (((($1) + ($$03334<<2)|0)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $$035 | 1;
   $16 = (($6) + ($15)|0);
   HEAP8[$16>>0] = $14;
   $17 = (((($1) + ($$03334<<2)|0)) + 2|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $$035 | 2;
   $20 = (($6) + ($19)|0);
   HEAP8[$20>>0] = $18;
   $21 = (((($1) + ($$03334<<2)|0)) + 3|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $$035 | 3;
   $24 = (($6) + ($23)|0);
   HEAP8[$24>>0] = $22;
   $25 = (($$03334) + 1)|0;
   $26 = (($$035) + 4)|0;
   $exitcond = ($$03334|0)==($9|0);
   if ($exitcond) {
    break;
   } else {
    $$03334 = $25;$$035 = $26;
   }
  }
 }
 HEAP32[$0>>2] = $6;
 $$sroa$9$0$$sroa_idx18 = ((($0)) + 4|0);
 HEAP32[$$sroa$9$0$$sroa_idx18>>2] = $2;
 $$sroa$12$0$$sroa_idx21 = ((($0)) + 8|0);
 HEAP32[$$sroa$12$0$$sroa_idx21>>2] = $3;
 $$sroa$15$0$$sroa_idx24 = ((($0)) + 12|0);
 HEAP32[$$sroa$15$0$$sroa_idx24>>2] = 1;
 $$sroa$16$0$$sroa_idx26 = ((($0)) + 16|0);
 HEAP32[$$sroa$16$0$$sroa_idx26>>2] = 7;
 return;
}
function _ImageFormat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0166199 = 0, $$0167197 = 0, $$0168195 = 0, $$0169192 = 0, $$0170190 = 0, $$0171188 = 0, $$0172189 = 0, $$0202 = 0, $$1194 = 0, $$2201 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0.0, $290 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0;
 var $or$cond = 0, $roundf = 0.0, $roundf173 = 0.0, $roundf174 = 0.0, $roundf175 = 0.0, $roundf176 = 0.0, $roundf177 = 0.0, $roundf178 = 0.0, $roundf179 = 0.0, $roundf180 = 0.0, $roundf181 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 4|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ($3|0)<(9);
 $6 = ($1|0)<(9);
 $or$cond = $6 & $5;
 if (!($or$cond)) {
  _TraceLog(1,8664,$vararg_buffer);
  STACKTOP = sp;return;
 }
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;
 $7 = (_GetImageData($$byval_copy)|0);
 $8 = HEAP32[$0>>2]|0;
 _free($8);
 HEAP32[$2>>2] = $1;
 switch ($1|0) {
 case 1:  {
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = Math_imul($12, $10)|0;
  $14 = (_malloc($13)|0);
  HEAP32[$0>>2] = $14;
  $15 = Math_imul($12, $10)|0;
  $16 = ($15|0)>(0);
  if ($16) {
   $$0171188 = 0;
   while(1) {
    $17 = (($7) + ($$0171188<<2)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = (+($18&255));
    $20 = $19 * 0.29899999499320984;
    $21 = (((($7) + ($$0171188<<2)|0)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = (+($22&255));
    $24 = $23 * 0.58700001239776611;
    $25 = $20 + $24;
    $26 = (((($7) + ($$0171188<<2)|0)) + 2|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = (+($27&255));
    $29 = $28 * 0.11400000005960464;
    $30 = $25 + $29;
    $31 = (~~(($30))&255);
    $32 = HEAP32[$0>>2]|0;
    $33 = (($32) + ($$0171188)|0);
    HEAP8[$33>>0] = $31;
    $34 = (($$0171188) + 1)|0;
    $35 = HEAP32[$9>>2]|0;
    $36 = HEAP32[$11>>2]|0;
    $37 = Math_imul($36, $35)|0;
    $38 = ($34|0)<($37|0);
    if ($38) {
     $$0171188 = $34;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 2:  {
  $39 = ((($0)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($0)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $40 << 1;
  $44 = Math_imul($43, $42)|0;
  $45 = (_malloc($44)|0);
  HEAP32[$0>>2] = $45;
  $46 = HEAP32[$39>>2]|0;
  $47 = $46 << 1;
  $48 = Math_imul($47, $42)|0;
  $49 = ($48|0)>(0);
  if ($49) {
   $$0170190 = 0;$$0172189 = 0;
   while(1) {
    $50 = (($7) + ($$0172189<<2)|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = (+($51&255));
    $53 = $52 * 0.29899999499320984;
    $54 = (((($7) + ($$0172189<<2)|0)) + 1|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = (+($55&255));
    $57 = $56 * 0.58700001239776611;
    $58 = $53 + $57;
    $59 = (((($7) + ($$0172189<<2)|0)) + 2|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = (+($60&255));
    $62 = $61 * 0.11400000005960464;
    $63 = $58 + $62;
    $64 = (~~(($63))&255);
    $65 = HEAP32[$0>>2]|0;
    $66 = (($65) + ($$0170190)|0);
    HEAP8[$66>>0] = $64;
    $67 = (((($7) + ($$0172189<<2)|0)) + 3|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = HEAP32[$0>>2]|0;
    $70 = $$0170190 | 1;
    $71 = (($69) + ($70)|0);
    HEAP8[$71>>0] = $68;
    $72 = (($$0172189) + 1)|0;
    $73 = (($$0170190) + 2)|0;
    $74 = HEAP32[$39>>2]|0;
    $75 = HEAP32[$41>>2]|0;
    $76 = $74 << 1;
    $77 = Math_imul($76, $75)|0;
    $78 = ($73|0)<($77|0);
    if ($78) {
     $$0170190 = $73;$$0172189 = $72;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 3:  {
  $79 = ((($0)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($0)) + 8|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $80 << 1;
  $84 = Math_imul($83, $82)|0;
  $85 = (_malloc($84)|0);
  HEAP32[$0>>2] = $85;
  $86 = HEAP32[$79>>2]|0;
  $87 = Math_imul($82, $86)|0;
  $88 = ($87|0)>(0);
  if ($88) {
   $89 = HEAP8[$7>>0]|0;
   $90 = (+($89&255));
   $91 = $90 * 31.0;
   $92 = $91 / 255.0;
   $roundf179 = (+_roundf((+$92)));
   $93 = (~~(($roundf179))&255);
   $94 = ((($7)) + 1|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = (+($95&255));
   $97 = $96 * 63.0;
   $98 = $97 / 255.0;
   $roundf180 = (+_roundf((+$98)));
   $99 = (~~(($roundf180))&255);
   $100 = ((($7)) + 2|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = (+($101&255));
   $103 = $102 * 31.0;
   $104 = $103 / 255.0;
   $roundf181 = (+_roundf((+$104)));
   $105 = (~~(($roundf181))&255);
   $106 = $93&255;
   $107 = $106 << 11;
   $108 = $99&255;
   $109 = $108 << 5;
   $110 = $109 | $107;
   $111 = $105&255;
   $112 = $110 | $111;
   $113 = $112&65535;
   $114 = HEAP32[$0>>2]|0;
   $115 = HEAP32[$79>>2]|0;
   $116 = HEAP32[$81>>2]|0;
   $117 = Math_imul($116, $115)|0;
   $$0169192 = 0;
   while(1) {
    $118 = (($114) + ($$0169192<<1)|0);
    HEAP16[$118>>1] = $113;
    $119 = (($$0169192) + 1)|0;
    $120 = ($119|0)<($117|0);
    if ($120) {
     $$0169192 = $119;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 4:  {
  $121 = ((($0)) + 4|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ((($0)) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($122*3)|0;
  $126 = Math_imul($125, $124)|0;
  $127 = (_malloc($126)|0);
  HEAP32[$0>>2] = $127;
  $128 = HEAP32[$121>>2]|0;
  $129 = ($128*3)|0;
  $130 = Math_imul($129, $124)|0;
  $131 = ($130|0)>(0);
  if ($131) {
   $$0168195 = 0;$$1194 = 0;
   while(1) {
    $132 = (($7) + ($$1194<<2)|0);
    $133 = HEAP8[$132>>0]|0;
    $134 = HEAP32[$0>>2]|0;
    $135 = (($134) + ($$0168195)|0);
    HEAP8[$135>>0] = $133;
    $136 = (((($7) + ($$1194<<2)|0)) + 1|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = HEAP32[$0>>2]|0;
    $139 = (($$0168195) + 1)|0;
    $140 = (($138) + ($139)|0);
    HEAP8[$140>>0] = $137;
    $141 = (((($7) + ($$1194<<2)|0)) + 2|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = HEAP32[$0>>2]|0;
    $144 = (($$0168195) + 2)|0;
    $145 = (($143) + ($144)|0);
    HEAP8[$145>>0] = $142;
    $146 = (($$1194) + 1)|0;
    $147 = (($$0168195) + 3)|0;
    $148 = HEAP32[$121>>2]|0;
    $149 = HEAP32[$123>>2]|0;
    $150 = ($148*3)|0;
    $151 = Math_imul($150, $149)|0;
    $152 = ($147|0)<($151|0);
    if ($152) {
     $$0168195 = $147;$$1194 = $146;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 5:  {
  $153 = ((($0)) + 4|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ((($0)) + 8|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $154 << 1;
  $158 = Math_imul($157, $156)|0;
  $159 = (_malloc($158)|0);
  HEAP32[$0>>2] = $159;
  $160 = HEAP32[$153>>2]|0;
  $161 = Math_imul($156, $160)|0;
  $162 = ($161|0)>(0);
  if ($162) {
   $163 = HEAP32[$0>>2]|0;
   $164 = HEAP32[$153>>2]|0;
   $165 = HEAP32[$155>>2]|0;
   $166 = Math_imul($165, $164)|0;
   $$0167197 = 0;
   while(1) {
    $167 = (($7) + ($$0167197<<2)|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = (+($168&255));
    $170 = $169 * 31.0;
    $171 = $170 / 255.0;
    $roundf176 = (+_roundf((+$171)));
    $172 = (~~(($roundf176))&255);
    $173 = (((($7) + ($$0167197<<2)|0)) + 1|0);
    $174 = HEAP8[$173>>0]|0;
    $175 = (+($174&255));
    $176 = $175 * 31.0;
    $177 = $176 / 255.0;
    $roundf177 = (+_roundf((+$177)));
    $178 = (~~(($roundf177))&255);
    $179 = (((($7) + ($$0167197<<2)|0)) + 2|0);
    $180 = HEAP8[$179>>0]|0;
    $181 = (+($180&255));
    $182 = $181 * 31.0;
    $183 = $182 / 255.0;
    $roundf178 = (+_roundf((+$183)));
    $184 = (~~(($roundf178))&255);
    $185 = (((($7) + ($$0167197<<2)|0)) + 3|0);
    $186 = HEAP8[$185>>0]|0;
    $187 = ($186&255)>(50);
    $188 = $172&255;
    $189 = $188 << 11;
    $190 = $178&255;
    $191 = $190 << 6;
    $192 = $191 | $189;
    $193 = $184&255;
    $194 = $193 << 1;
    $195 = $192 | $194;
    $196 = $187&1;
    $197 = $195 | $196;
    $198 = $197&65535;
    $199 = (($163) + ($$0167197<<1)|0);
    HEAP16[$199>>1] = $198;
    $200 = (($$0167197) + 1)|0;
    $201 = ($200|0)<($166|0);
    if ($201) {
     $$0167197 = $200;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 6:  {
  $202 = ((($0)) + 4|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = ((($0)) + 8|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $203 << 1;
  $207 = Math_imul($206, $205)|0;
  $208 = (_malloc($207)|0);
  HEAP32[$0>>2] = $208;
  $209 = HEAP32[$202>>2]|0;
  $210 = Math_imul($205, $209)|0;
  $211 = ($210|0)>(0);
  if ($211) {
   $212 = HEAP32[$0>>2]|0;
   $213 = HEAP32[$202>>2]|0;
   $214 = HEAP32[$204>>2]|0;
   $215 = Math_imul($214, $213)|0;
   $$0166199 = 0;
   while(1) {
    $216 = (($7) + ($$0166199<<2)|0);
    $217 = HEAP8[$216>>0]|0;
    $218 = (+($217&255));
    $219 = $218 * 15.0;
    $220 = $219 / 255.0;
    $roundf = (+_roundf((+$220)));
    $221 = (~~(($roundf))&255);
    $222 = (((($7) + ($$0166199<<2)|0)) + 1|0);
    $223 = HEAP8[$222>>0]|0;
    $224 = (+($223&255));
    $225 = $224 * 15.0;
    $226 = $225 / 255.0;
    $roundf173 = (+_roundf((+$226)));
    $227 = (~~(($roundf173))&255);
    $228 = (((($7) + ($$0166199<<2)|0)) + 2|0);
    $229 = HEAP8[$228>>0]|0;
    $230 = (+($229&255));
    $231 = $230 * 15.0;
    $232 = $231 / 255.0;
    $roundf174 = (+_roundf((+$232)));
    $233 = (~~(($roundf174))&255);
    $234 = (((($7) + ($$0166199<<2)|0)) + 3|0);
    $235 = HEAP8[$234>>0]|0;
    $236 = (+($235&255));
    $237 = $236 * 15.0;
    $238 = $237 / 255.0;
    $roundf175 = (+_roundf((+$238)));
    $239 = (~~(($roundf175))&255);
    $240 = $221&255;
    $241 = $240 << 12;
    $242 = $227&255;
    $243 = $242 << 8;
    $244 = $243 | $241;
    $245 = $233&255;
    $246 = $245 << 4;
    $247 = $244 | $246;
    $248 = $239&255;
    $249 = $247 | $248;
    $250 = $249&65535;
    $251 = (($212) + ($$0166199<<1)|0);
    HEAP16[$251>>1] = $250;
    $252 = (($$0166199) + 1)|0;
    $253 = ($252|0)<($215|0);
    if ($253) {
     $$0166199 = $252;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 7:  {
  $254 = ((($0)) + 4|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = ((($0)) + 8|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = $255 << 2;
  $259 = Math_imul($258, $257)|0;
  $260 = (_malloc($259)|0);
  HEAP32[$0>>2] = $260;
  $261 = HEAP32[$254>>2]|0;
  $262 = $261 << 2;
  $263 = Math_imul($262, $257)|0;
  $264 = ($263|0)>(0);
  if ($264) {
   $$0202 = 0;$$2201 = 0;
   while(1) {
    $265 = (($7) + ($$2201<<2)|0);
    $266 = HEAP8[$265>>0]|0;
    $267 = HEAP32[$0>>2]|0;
    $268 = (($267) + ($$0202)|0);
    HEAP8[$268>>0] = $266;
    $269 = (((($7) + ($$2201<<2)|0)) + 1|0);
    $270 = HEAP8[$269>>0]|0;
    $271 = HEAP32[$0>>2]|0;
    $272 = $$0202 | 1;
    $273 = (($271) + ($272)|0);
    HEAP8[$273>>0] = $270;
    $274 = (((($7) + ($$2201<<2)|0)) + 2|0);
    $275 = HEAP8[$274>>0]|0;
    $276 = HEAP32[$0>>2]|0;
    $277 = $$0202 | 2;
    $278 = (($276) + ($277)|0);
    HEAP8[$278>>0] = $275;
    $279 = (((($7) + ($$2201<<2)|0)) + 3|0);
    $280 = HEAP8[$279>>0]|0;
    $281 = HEAP32[$0>>2]|0;
    $282 = $$0202 | 3;
    $283 = (($281) + ($282)|0);
    HEAP8[$283>>0] = $280;
    $284 = (($$2201) + 1)|0;
    $285 = (($$0202) + 4)|0;
    $286 = HEAP32[$254>>2]|0;
    $287 = HEAP32[$256>>2]|0;
    $288 = $286 << 2;
    $289 = Math_imul($288, $287)|0;
    $290 = ($285|0)<($289|0);
    if ($290) {
     $$0202 = $285;$$2201 = $284;
    } else {
     break;
    }
   }
  }
  break;
 }
 default: {
 }
 }
 _free($7);
 STACKTOP = sp;return;
}
function _LoadTextureFromImage($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$10$0$$sroa_idx6 = 0, $$sroa$12$0$$sroa_idx8 = 0, $$sroa$6$0$$sroa_idx2 = 0, $$sroa$8$0$$sroa_idx4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_rlLoadTexture($2,$4,$6,$8,$10)|0);
 $12 = HEAP32[$3>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[$vararg_buffer>>2] = $11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $13;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $10;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $8;
 _TraceLog(3,8312,$vararg_buffer);
 HEAP32[$0>>2] = $11;
 $$sroa$6$0$$sroa_idx2 = ((($0)) + 4|0);
 HEAP32[$$sroa$6$0$$sroa_idx2>>2] = $12;
 $$sroa$8$0$$sroa_idx4 = ((($0)) + 8|0);
 HEAP32[$$sroa$8$0$$sroa_idx4>>2] = $13;
 $$sroa$10$0$$sroa_idx6 = ((($0)) + 12|0);
 HEAP32[$$sroa$10$0$$sroa_idx6>>2] = $10;
 $$sroa$12$0$$sroa_idx8 = ((($0)) + 16|0);
 HEAP32[$$sroa$12$0$$sroa_idx8>>2] = $8;
 STACKTOP = sp;return;
}
function _UnloadImage($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 _free($1);
 return;
}
function _rlLoadTexture($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond101 = 0, $or$cond7 = 0, $or$cond97 = 0, $or$cond99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0;
 var $vararg_buffer9 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 68|0;
 _glBindTexture(3553,0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[84047]|0;
 $7 = ($6|0)==(0);
 $$off = (($3) + -9)|0;
 $8 = ($$off>>>0)<(4);
 $or$cond = $8 & $7;
 if ($or$cond) {
  _TraceLog(1,8362,$vararg_buffer);
  $$0 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[84048]|0;
 $10 = ($9|0)==(0);
 $11 = ($3|0)==(13);
 $or$cond7 = $11 & $10;
 if ($or$cond7) {
  _TraceLog(1,8406,$vararg_buffer1);
  $$0 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP32[84049]|0;
 $13 = ($12|0)==(0);
 $14 = $3 | 1;
 $15 = ($14|0)==(15);
 $or$cond97 = $15 & $13;
 if ($or$cond97) {
  _TraceLog(1,8451,$vararg_buffer3);
  $$0 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = HEAP32[84050]|0;
 $17 = ($16|0)==(0);
 $18 = ($14|0)==(17);
 $or$cond99 = $18 & $17;
 if ($or$cond99) {
  _TraceLog(1,8496,$vararg_buffer5);
  $$0 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP32[84051]|0;
 $20 = ($19|0)==(0);
 $21 = ($14|0)==(19);
 $or$cond101 = $21 & $20;
 if ($or$cond101) {
  _TraceLog(1,8541,$vararg_buffer7);
  $$0 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 _glGenTextures(1,($5|0));
 $22 = HEAP32[$5>>2]|0;
 _glBindTexture(3553,($22|0));
 do {
  switch ($3|0) {
  case 1:  {
   _glTexImage2D(3553,0,6409,($1|0),($2|0),0,6409,5121,($0|0));
   break;
  }
  case 2:  {
   _glTexImage2D(3553,0,6410,($1|0),($2|0),0,6410,5121,($0|0));
   break;
  }
  case 3:  {
   _glTexImage2D(3553,0,6407,($1|0),($2|0),0,6407,33635,($0|0));
   break;
  }
  case 4:  {
   _glTexImage2D(3553,0,6407,($1|0),($2|0),0,6407,5121,($0|0));
   break;
  }
  case 5:  {
   _glTexImage2D(3553,0,6408,($1|0),($2|0),0,6408,32820,($0|0));
   break;
  }
  case 6:  {
   _glTexImage2D(3553,0,6408,($1|0),($2|0),0,6408,32819,($0|0));
   break;
  }
  case 7:  {
   _glTexImage2D(3553,0,6408,($1|0),($2|0),0,6408,5121,($0|0));
   break;
  }
  case 8:  {
   $23 = HEAP32[84052]|0;
   $24 = ($23|0)==(0);
   if (!($24)) {
    _glTexImage2D(3553,0,6407,($1|0),($2|0),0,6407,5126,($0|0));
   }
   break;
  }
  case 9:  {
   $25 = HEAP32[84047]|0;
   $26 = ($25|0)==(0);
   if (!($26)) {
    _LoadTextureCompressed($0,$1,$2,33776,$4);
   }
   break;
  }
  case 10:  {
   $27 = HEAP32[84047]|0;
   $28 = ($27|0)==(0);
   if (!($28)) {
    _LoadTextureCompressed($0,$1,$2,33777,$4);
   }
   break;
  }
  case 11:  {
   $29 = HEAP32[84047]|0;
   $30 = ($29|0)==(0);
   if (!($30)) {
    _LoadTextureCompressed($0,$1,$2,33778,$4);
   }
   break;
  }
  case 12:  {
   $31 = HEAP32[84047]|0;
   $32 = ($31|0)==(0);
   if (!($32)) {
    _LoadTextureCompressed($0,$1,$2,33779,$4);
   }
   break;
  }
  case 13:  {
   $33 = HEAP32[84048]|0;
   $34 = ($33|0)==(0);
   if (!($34)) {
    _LoadTextureCompressed($0,$1,$2,36196,$4);
   }
   break;
  }
  case 14:  {
   $35 = HEAP32[84049]|0;
   $36 = ($35|0)==(0);
   if (!($36)) {
    _LoadTextureCompressed($0,$1,$2,37492,$4);
   }
   break;
  }
  case 15:  {
   $37 = HEAP32[84049]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    _LoadTextureCompressed($0,$1,$2,37496,$4);
   }
   break;
  }
  case 16:  {
   $39 = HEAP32[84050]|0;
   $40 = ($39|0)==(0);
   if (!($40)) {
    _LoadTextureCompressed($0,$1,$2,35840,$4);
   }
   break;
  }
  case 17:  {
   $41 = HEAP32[84050]|0;
   $42 = ($41|0)==(0);
   if (!($42)) {
    _LoadTextureCompressed($0,$1,$2,35842,$4);
   }
   break;
  }
  case 18:  {
   $43 = HEAP32[84051]|0;
   $44 = ($43|0)==(0);
   if (!($44)) {
    _LoadTextureCompressed($0,$1,$2,37808,$4);
   }
   break;
  }
  case 19:  {
   $45 = HEAP32[84051]|0;
   $46 = ($45|0)==(0);
   if (!($46)) {
    _LoadTextureCompressed($0,$1,$2,37815,$4);
   }
   break;
  }
  default: {
   _TraceLog(1,8586,$vararg_buffer9);
  }
  }
 } while(0);
 $47 = HEAP32[84053]|0;
 $48 = ($47|0)==(0);
 if ($48) {
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
 } else {
  _glTexParameteri(3553,10242,10497);
  _glTexParameteri(3553,10243,10497);
 }
 _glTexParameteri(3553,10240,9728);
 _glTexParameteri(3553,10241,9728);
 _glBindTexture(3553,0);
 $49 = HEAP32[$5>>2]|0;
 $50 = ($49|0)==(0);
 if ($50) {
  _TraceLog(1,13162,$vararg_buffer15);
  $$0 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer11>>2] = $49;
  $vararg_ptr13 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $1;
  $vararg_ptr14 = ((($vararg_buffer11)) + 8|0);
  HEAP32[$vararg_ptr14>>2] = $2;
  _TraceLog(0,8615,$vararg_buffer11);
  $$0 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _LoadTextureCompressed($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$03645 = 0, $$03744 = 0, $$038 = 0, $$03943 = 0, $$046 = 0, $$140 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _glPixelStorei(3317,1);
 switch ($3|0) {
 case 33776: case 33777: case 36196: case 37492:  {
  $$038 = 8;
  break;
 }
 default: {
  $$038 = 16;
 }
 }
 $5 = ($4|0)<(1);
 $6 = $1 | $2;
 $7 = ($6|0)==(0);
 $or$cond42 = $5 | $7;
 if ($or$cond42) {
  return;
 } else {
  $$03645 = 0;$$03744 = 0;$$03943 = $2;$$046 = $1;
 }
 while(1) {
  $8 = (($$046) + 3)|0;
  $9 = (($8|0) / 4)&-1;
  $10 = (($$03943) + 3)|0;
  $11 = (($10|0) / 4)&-1;
  $12 = Math_imul($11, $$038)|0;
  $13 = Math_imul($12, $9)|0;
  $14 = (($0) + ($$03744)|0);
  _glCompressedTexImage2D(3553,($$03645|0),($3|0),($$046|0),($$03943|0),0,($13|0),($14|0));
  $15 = (($13) + ($$03744))|0;
  $16 = (($$046|0) / 2)&-1;
  $17 = (($$03943|0) / 2)&-1;
  $18 = ($$046|0)<(2);
  $$ = $18 ? 1 : $16;
  $19 = ($$03943|0)<(2);
  $$140 = $19 ? 1 : $17;
  $20 = (($$03645) + 1)|0;
  $21 = ($20|0)>=($4|0);
  $22 = $$ | $$140;
  $23 = ($22|0)==(0);
  $or$cond = $21 | $23;
  if ($or$cond) {
   break;
  } else {
   $$03645 = $20;$$03744 = $15;$$03943 = $$140;$$046 = $$;
  }
 }
 return;
}
function _GetImageData($0) {
 $0 = $0|0;
 var $$0104105 = 0, $$0106 = 0, $$1 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0.0, $98 = 0.0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2 << 2;
 $6 = Math_imul($5, $4)|0;
 $7 = (_malloc($6)|0);
 $8 = HEAP32[$1>>2]|0;
 $9 = Math_imul($4, $8)|0;
 $10 = ($9|0)>(0);
 if (!($10)) {
  STACKTOP = sp;return ($7|0);
 }
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$0>>2]|0;
 $$0104105 = 0;$$0106 = 0;
 while(1) {
  switch ($12|0) {
  case 1:  {
   $14 = (($13) + ($$0106)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = (($7) + ($$0104105<<2)|0);
   HEAP8[$16>>0] = $15;
   $17 = HEAP8[$14>>0]|0;
   $18 = (((($7) + ($$0104105<<2)|0)) + 1|0);
   HEAP8[$18>>0] = $17;
   $19 = HEAP8[$14>>0]|0;
   $20 = (((($7) + ($$0104105<<2)|0)) + 2|0);
   HEAP8[$20>>0] = $19;
   $21 = (((($7) + ($$0104105<<2)|0)) + 3|0);
   HEAP8[$21>>0] = -1;
   $22 = (($$0106) + 1)|0;
   $$1 = $22;
   break;
  }
  case 2:  {
   $23 = (($13) + ($$0106)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = (($7) + ($$0104105<<2)|0);
   HEAP8[$25>>0] = $24;
   $26 = HEAP8[$23>>0]|0;
   $27 = (((($7) + ($$0104105<<2)|0)) + 1|0);
   HEAP8[$27>>0] = $26;
   $28 = HEAP8[$23>>0]|0;
   $29 = (((($7) + ($$0104105<<2)|0)) + 2|0);
   HEAP8[$29>>0] = $28;
   $30 = (($$0106) + 1)|0;
   $31 = (($13) + ($30)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = (((($7) + ($$0104105<<2)|0)) + 3|0);
   HEAP8[$33>>0] = $32;
   $34 = (($$0106) + 2)|0;
   $$1 = $34;
   break;
  }
  case 5:  {
   $35 = (($13) + ($$0106<<1)|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $38 = $37 >>> 11;
   $39 = (+($38|0));
   $40 = $39 * 8.0;
   $41 = (~~(($40))&255);
   $42 = (($7) + ($$0104105<<2)|0);
   HEAP8[$42>>0] = $41;
   $43 = $37 >>> 6;
   $44 = $43 & 31;
   $45 = (+($44|0));
   $46 = $45 * 8.0;
   $47 = (~~(($46))&255);
   $48 = (((($7) + ($$0104105<<2)|0)) + 1|0);
   HEAP8[$48>>0] = $47;
   $49 = $37 >>> 1;
   $50 = $49 & 31;
   $51 = (+($50|0));
   $52 = $51 * 8.0;
   $53 = (~~(($52))&255);
   $54 = (((($7) + ($$0104105<<2)|0)) + 2|0);
   HEAP8[$54>>0] = $53;
   $55 = $37 & 1;
   $56 = (0 - ($55))|0;
   $57 = $56&255;
   $58 = (((($7) + ($$0104105<<2)|0)) + 3|0);
   HEAP8[$58>>0] = $57;
   $59 = (($$0106) + 1)|0;
   $$1 = $59;
   break;
  }
  case 3:  {
   $60 = (($13) + ($$0106<<1)|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61&65535;
   $63 = $62 >>> 11;
   $64 = (+($63|0));
   $65 = $64 * 8.0;
   $66 = (~~(($65))&255);
   $67 = (($7) + ($$0104105<<2)|0);
   HEAP8[$67>>0] = $66;
   $68 = $62 >>> 5;
   $69 = $68 & 63;
   $70 = (+($69|0));
   $71 = $70 * 4.0;
   $72 = (~~(($71))&255);
   $73 = (((($7) + ($$0104105<<2)|0)) + 1|0);
   HEAP8[$73>>0] = $72;
   $74 = $62 & 31;
   $75 = (+($74|0));
   $76 = $75 * 8.0;
   $77 = (~~(($76))&255);
   $78 = (((($7) + ($$0104105<<2)|0)) + 2|0);
   HEAP8[$78>>0] = $77;
   $79 = (((($7) + ($$0104105<<2)|0)) + 3|0);
   HEAP8[$79>>0] = -1;
   $80 = (($$0106) + 1)|0;
   $$1 = $80;
   break;
  }
  case 6:  {
   $81 = (($13) + ($$0106<<1)|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = $82&65535;
   $84 = $83 >>> 12;
   $85 = (+($84|0));
   $86 = $85 * 17.0;
   $87 = (~~(($86))&255);
   $88 = (($7) + ($$0104105<<2)|0);
   HEAP8[$88>>0] = $87;
   $89 = $83 >>> 8;
   $90 = $89 & 15;
   $91 = (+($90|0));
   $92 = $91 * 17.0;
   $93 = (~~(($92))&255);
   $94 = (((($7) + ($$0104105<<2)|0)) + 1|0);
   HEAP8[$94>>0] = $93;
   $95 = $83 >>> 4;
   $96 = $95 & 15;
   $97 = (+($96|0));
   $98 = $97 * 17.0;
   $99 = (~~(($98))&255);
   $100 = (((($7) + ($$0104105<<2)|0)) + 2|0);
   HEAP8[$100>>0] = $99;
   $101 = $83 & 15;
   $102 = (+($101|0));
   $103 = $102 * 17.0;
   $104 = (~~(($103))&255);
   $105 = (((($7) + ($$0104105<<2)|0)) + 3|0);
   HEAP8[$105>>0] = $104;
   $106 = (($$0106) + 1)|0;
   $$1 = $106;
   break;
  }
  case 7:  {
   $107 = (($13) + ($$0106)|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = (($7) + ($$0104105<<2)|0);
   HEAP8[$109>>0] = $108;
   $110 = (($$0106) + 1)|0;
   $111 = (($13) + ($110)|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = (((($7) + ($$0104105<<2)|0)) + 1|0);
   HEAP8[$113>>0] = $112;
   $114 = (($$0106) + 2)|0;
   $115 = (($13) + ($114)|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = (((($7) + ($$0104105<<2)|0)) + 2|0);
   HEAP8[$117>>0] = $116;
   $118 = (($$0106) + 3)|0;
   $119 = (($13) + ($118)|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = (((($7) + ($$0104105<<2)|0)) + 3|0);
   HEAP8[$121>>0] = $120;
   $122 = (($$0106) + 4)|0;
   $$1 = $122;
   break;
  }
  case 4:  {
   $123 = (($13) + ($$0106)|0);
   $124 = HEAP8[$123>>0]|0;
   $125 = (($7) + ($$0104105<<2)|0);
   HEAP8[$125>>0] = $124;
   $126 = (($$0106) + 1)|0;
   $127 = (($13) + ($126)|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = (((($7) + ($$0104105<<2)|0)) + 1|0);
   HEAP8[$129>>0] = $128;
   $130 = (($$0106) + 2)|0;
   $131 = (($13) + ($130)|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = (((($7) + ($$0104105<<2)|0)) + 2|0);
   HEAP8[$133>>0] = $132;
   $134 = (((($7) + ($$0104105<<2)|0)) + 3|0);
   HEAP8[$134>>0] = -1;
   $135 = (($$0106) + 3)|0;
   $$1 = $135;
   break;
  }
  default: {
   _TraceLog(1,8718,$vararg_buffer);
   $$1 = $$0106;
  }
  }
  $136 = (($$0104105) + 1)|0;
  $137 = HEAP32[$1>>2]|0;
  $138 = HEAP32[$3>>2]|0;
  $139 = Math_imul($138, $137)|0;
  $140 = ($136|0)<($139|0);
  if ($140) {
   $$0104105 = $136;$$0106 = $$1;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($7|0);
}
function _UnloadDefaultFont() {
 var $$byval_copy = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 ;HEAP32[$$byval_copy>>2]=HEAP32[336156>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[336156+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[336156+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[336156+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[336156+16>>2]|0;
 _UnloadTexture($$byval_copy);
 $0 = HEAP32[(336184)>>2]|0;
 _free($0);
 STACKTOP = sp;return;
}
function _UnloadTexture($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 _rlDeleteTextures($1);
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 _TraceLog(0,8764,$vararg_buffer);
 STACKTOP = sp;return;
}
function _rlDeleteTextures($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = ($0|0)==(0);
 if (!($2)) {
  _glDeleteTextures(1,($1|0));
 }
 STACKTOP = sp;return;
}
function _GetDefaultFont($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[336156>>2]|0;HEAP32[$0+4>>2]=HEAP32[336156+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[336156+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[336156+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[336156+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[336156+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[336156+24>>2]|0;HEAP32[$0+28>>2]=HEAP32[336156+28>>2]|0;
 return;
}
function _LoadSpriteFont($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy2 = 0, $$byval_copy5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy5 = sp + 232|0;
 $$byval_copy2 = sp + 212|0;
 $vararg_buffer = sp;
 $2 = sp + 96|0;
 $3 = sp + 192|0;
 $4 = sp + 160|0;
 $5 = sp + 128|0;
 $6 = sp + 40|0;
 $7 = sp + 252|0;
 $8 = sp + 64|0;
 $9 = sp + 8|0;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $10 = (_IsFileExtension($1,13653)|0);
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $35 = (_IsFileExtension($1,8814)|0);
   $36 = ($35|0)==(0);
   if (!($36)) {
    _LoadSpriteFontEx($4,$1,32,0,0);
    ;HEAP32[$2>>2]=HEAP32[$4>>2]|0;HEAP32[$2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$4+20>>2]|0;HEAP32[$2+24>>2]=HEAP32[$4+24>>2]|0;HEAP32[$2+28>>2]=HEAP32[$4+28>>2]|0;
    break;
   }
   $37 = (_IsFileExtension($1,8819)|0);
   $38 = ($37|0)==(0);
   if (!($38)) {
    _LoadBMFont($5,$1);
    ;HEAP32[$2>>2]=HEAP32[$5>>2]|0;HEAP32[$2+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$5+20>>2]|0;HEAP32[$2+24>>2]=HEAP32[$5+24>>2]|0;HEAP32[$2+28>>2]=HEAP32[$5+28>>2]|0;
    break;
   }
   _LoadImage($6,$1);
   $39 = HEAP32[$6>>2]|0;
   $40 = ($39|0)==(0|0);
   if (!($40)) {
    HEAP8[$7>>0] = -1;
    $41 = ((($7)) + 1|0);
    HEAP8[$41>>0] = 0;
    $42 = ((($7)) + 2|0);
    HEAP8[$42>>0] = -1;
    $43 = ((($7)) + 3|0);
    HEAP8[$43>>0] = -1;
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$$byval_copy2+16>>2]=HEAP32[$6+16>>2]|0;
    ;HEAP8[$$byval_copy5>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy5+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy5+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy5+3>>0]=HEAP8[$7+3>>0]|0;
    _LoadImageFont($8,$$byval_copy2,$$byval_copy5);
    ;HEAP32[$2>>2]=HEAP32[$8>>2]|0;HEAP32[$2+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$8+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$8+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$8+20>>2]|0;HEAP32[$2+24>>2]=HEAP32[$8+24>>2]|0;HEAP32[$2+28>>2]=HEAP32[$8+28>>2]|0;
   }
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$$byval_copy5+16>>2]=HEAP32[$6+16>>2]|0;
   _UnloadImage($$byval_copy5);
  } else {
   $12 = (_LoadResource($1,0)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(5);
   if ($14) {
    $15 = ((($12)) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($12)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($12)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($12)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    _LoadImagePro($$byval_copy2,$16,$18,$20,$22);
    ;HEAP32[$$byval_copy5>>2]=HEAP32[$$byval_copy2>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$$byval_copy2+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$$byval_copy2+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$$byval_copy2+12>>2]|0;HEAP32[$$byval_copy5+16>>2]=HEAP32[$$byval_copy2+16>>2]|0;
    _LoadTextureFromImage($3,$$byval_copy5);
    ;HEAP32[$2>>2]=HEAP32[$3>>2]|0;HEAP32[$2+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$3+16>>2]|0;
    ;HEAP32[$$byval_copy5>>2]=HEAP32[$$byval_copy2>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$$byval_copy2+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$$byval_copy2+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$$byval_copy2+12>>2]|0;HEAP32[$$byval_copy5+16>>2]=HEAP32[$$byval_copy2+16>>2]|0;
    _UnloadImage($$byval_copy5);
   }
   $23 = ((($12)) + 24|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(6);
   if ($25) {
    $26 = ((($12)) + 28|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($2)) + 20|0);
    HEAP32[$28>>2] = $27;
    $29 = ((($12)) + 32|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($2)) + 24|0);
    HEAP32[$31>>2] = $30;
    $32 = ((($12)) + 44|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($2)) + 28|0);
    HEAP32[$34>>2] = $33;
   }
  }
 } while(0);
 $44 = HEAP32[$2>>2]|0;
 $45 = ($44|0)==(0);
 if ($45) {
  HEAP32[$vararg_buffer>>2] = $1;
  _TraceLog(1,8824,$vararg_buffer);
  _GetDefaultFont($9);
  ;HEAP32[$2>>2]=HEAP32[$9>>2]|0;HEAP32[$2+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$9+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$9+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$9+20>>2]|0;HEAP32[$2+24>>2]=HEAP32[$9+24>>2]|0;HEAP32[$2+28>>2]=HEAP32[$9+28>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$2+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[$2+24>>2]|0;HEAP32[$0+28>>2]=HEAP32[$2+28>>2]|0;
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$byval_copy5+16>>2]=HEAP32[$2+16>>2]|0;
  _SetTextureFilter($$byval_copy5,0);
  ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$2+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[$2+24>>2]|0;HEAP32[$0+28>>2]=HEAP32[$2+28>>2]|0;
  STACKTOP = sp;return;
 }
}
function _IsFileExtension($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strrchr($0,46)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  return 0;
 } else {
  $4 = (_strcmp($2,$1)|0);
  $5 = ($4|0)==(0);
  $$ = $5&1;
  return ($$|0);
 }
 return (0)|0;
}
function _LoadImagePro($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 20|0;
 $5 = sp;
 HEAP32[$5>>2] = $1;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($5)) + 8|0);
 HEAP32[$7>>2] = $3;
 $8 = ((($5)) + 12|0);
 HEAP32[$8>>2] = 1;
 $9 = ((($5)) + 16|0);
 HEAP32[$9>>2] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$5+16>>2]|0;
 _ImageCopy($0,$$byval_copy);
 STACKTOP = sp;return;
}
function _LoadSpriteFontEx($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$048 = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$0$0$copyload15 = 0, $$sroa$0$0$copyload17 = 0, $$sroa$0$1 = 0, $$sroa$8 = 0, $$sroa$8$0$$sroa_idx = 0, $$sroa$8$0$$sroa_idx23 = 0, $$sroa$8$0$$sroa_idx26 = 0, $$sroa$8$0$$sroa_idx29 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer = sp;
 $$sroa$8 = sp + 104|0;
 $5 = sp + 72|0;
 $6 = sp + 40|0;
 $7 = sp + 8|0;
 ;HEAP32[$$sroa$8>>2]=0|0;HEAP32[$$sroa$8+4>>2]=0|0;HEAP32[$$sroa$8+8>>2]=0|0;HEAP32[$$sroa$8+12>>2]=0|0;HEAP32[$$sroa$8+16>>2]=0|0;HEAP32[$$sroa$8+20>>2]=0|0;HEAP32[$$sroa$8+24>>2]=0|0;
 $8 = (_IsFileExtension($1,8814)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ($4|0)==(0|0);
  $11 = ($3|0)==(0);
  $or$cond = $11 | $10;
  if ($or$cond) {
   $12 = (_malloc(380)|0);
   $$048 = 0;
   while(1) {
    $13 = (($$048) + 32)|0;
    $14 = (($12) + ($$048<<2)|0);
    HEAP32[$14>>2] = $13;
    $15 = (($$048) + 1)|0;
    $exitcond = ($15|0)==(95);
    if ($exitcond) {
     break;
    } else {
     $$048 = $15;
    }
   }
   _LoadTTF($5,$1,$2,95,$12);
   $$sroa$0$0$copyload = HEAP32[$5>>2]|0;
   $$sroa$8$0$$sroa_idx = ((($5)) + 4|0);
   ;HEAP32[$$sroa$8>>2]=HEAP32[$$sroa$8$0$$sroa_idx>>2]|0;HEAP32[$$sroa$8+4>>2]=HEAP32[$$sroa$8$0$$sroa_idx+4>>2]|0;HEAP32[$$sroa$8+8>>2]=HEAP32[$$sroa$8$0$$sroa_idx+8>>2]|0;HEAP32[$$sroa$8+12>>2]=HEAP32[$$sroa$8$0$$sroa_idx+12>>2]|0;HEAP32[$$sroa$8+16>>2]=HEAP32[$$sroa$8$0$$sroa_idx+16>>2]|0;HEAP32[$$sroa$8+20>>2]=HEAP32[$$sroa$8$0$$sroa_idx+20>>2]|0;HEAP32[$$sroa$8+24>>2]=HEAP32[$$sroa$8$0$$sroa_idx+24>>2]|0;
   $$sroa$0$0 = $$sroa$0$0$copyload;
  } else {
   _LoadTTF($6,$1,$2,$3,$4);
   $$sroa$0$0$copyload15 = HEAP32[$6>>2]|0;
   $$sroa$8$0$$sroa_idx23 = ((($6)) + 4|0);
   ;HEAP32[$$sroa$8>>2]=HEAP32[$$sroa$8$0$$sroa_idx23>>2]|0;HEAP32[$$sroa$8+4>>2]=HEAP32[$$sroa$8$0$$sroa_idx23+4>>2]|0;HEAP32[$$sroa$8+8>>2]=HEAP32[$$sroa$8$0$$sroa_idx23+8>>2]|0;HEAP32[$$sroa$8+12>>2]=HEAP32[$$sroa$8$0$$sroa_idx23+12>>2]|0;HEAP32[$$sroa$8+16>>2]=HEAP32[$$sroa$8$0$$sroa_idx23+16>>2]|0;HEAP32[$$sroa$8+20>>2]=HEAP32[$$sroa$8$0$$sroa_idx23+20>>2]|0;HEAP32[$$sroa$8+24>>2]=HEAP32[$$sroa$8$0$$sroa_idx23+24>>2]|0;
   $$sroa$0$0 = $$sroa$0$0$copyload15;
  }
  $16 = ($$sroa$0$0|0)==(0);
  if (!($16)) {
   $$sroa$0$1 = $$sroa$0$0;
   HEAP32[$0>>2] = $$sroa$0$1;
   $$sroa$8$0$$sroa_idx29 = ((($0)) + 4|0);
   ;HEAP32[$$sroa$8$0$$sroa_idx29>>2]=HEAP32[$$sroa$8>>2]|0;HEAP32[$$sroa$8$0$$sroa_idx29+4>>2]=HEAP32[$$sroa$8+4>>2]|0;HEAP32[$$sroa$8$0$$sroa_idx29+8>>2]=HEAP32[$$sroa$8+8>>2]|0;HEAP32[$$sroa$8$0$$sroa_idx29+12>>2]=HEAP32[$$sroa$8+12>>2]|0;HEAP32[$$sroa$8$0$$sroa_idx29+16>>2]=HEAP32[$$sroa$8+16>>2]|0;HEAP32[$$sroa$8$0$$sroa_idx29+20>>2]=HEAP32[$$sroa$8+20>>2]|0;HEAP32[$$sroa$8$0$$sroa_idx29+24>>2]=HEAP32[$$sroa$8+24>>2]|0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$vararg_buffer>>2] = $1;
 _TraceLog(1,11828,$vararg_buffer);
 _GetDefaultFont($7);
 $$sroa$0$0$copyload17 = HEAP32[$7>>2]|0;
 $$sroa$8$0$$sroa_idx26 = ((($7)) + 4|0);
 ;HEAP32[$$sroa$8>>2]=HEAP32[$$sroa$8$0$$sroa_idx26>>2]|0;HEAP32[$$sroa$8+4>>2]=HEAP32[$$sroa$8$0$$sroa_idx26+4>>2]|0;HEAP32[$$sroa$8+8>>2]=HEAP32[$$sroa$8$0$$sroa_idx26+8>>2]|0;HEAP32[$$sroa$8+12>>2]=HEAP32[$$sroa$8$0$$sroa_idx26+12>>2]|0;HEAP32[$$sroa$8+16>>2]=HEAP32[$$sroa$8$0$$sroa_idx26+16>>2]|0;HEAP32[$$sroa$8+20>>2]=HEAP32[$$sroa$8$0$$sroa_idx26+20>>2]|0;HEAP32[$$sroa$8+24>>2]=HEAP32[$$sroa$8$0$$sroa_idx26+24>>2]|0;
 $$sroa$0$1 = $$sroa$0$0$copyload17;
 HEAP32[$0>>2] = $$sroa$0$1;
 $$sroa$8$0$$sroa_idx29 = ((($0)) + 4|0);
 ;HEAP32[$$sroa$8$0$$sroa_idx29>>2]=HEAP32[$$sroa$8>>2]|0;HEAP32[$$sroa$8$0$$sroa_idx29+4>>2]=HEAP32[$$sroa$8+4>>2]|0;HEAP32[$$sroa$8$0$$sroa_idx29+8>>2]=HEAP32[$$sroa$8+8>>2]|0;HEAP32[$$sroa$8$0$$sroa_idx29+12>>2]=HEAP32[$$sroa$8+12>>2]|0;HEAP32[$$sroa$8$0$$sroa_idx29+16>>2]=HEAP32[$$sroa$8+16>>2]|0;HEAP32[$$sroa$8$0$$sroa_idx29+20>>2]=HEAP32[$$sroa$8+20>>2]|0;HEAP32[$$sroa$8$0$$sroa_idx29+24>>2]=HEAP32[$$sroa$8+24>>2]|0;
 STACKTOP = sp;return;
}
function _LoadBMFont($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$05355 = 0, $$056 = 0, $$byval_copy52 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$2$0$$sroa_idx1 = 0, $$sroa$3$0$$sroa_idx2 = 0, $$sroa$4$0$$sroa_idx3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer34 = 0, $vararg_buffer44 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr22 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(704|0);
 $$byval_copy52 = sp + 152|0;
 $vararg_buffer44 = sp + 144|0;
 $vararg_buffer34 = sp + 112|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 288|0;
 $3 = sp + 448|0;
 $4 = sp + 260|0;
 $5 = sp + 236|0;
 $6 = sp + 232|0;
 $7 = sp + 320|0;
 $8 = sp + 196|0;
 $9 = sp + 192|0;
 $10 = sp + 264|0;
 $11 = sp + 240|0;
 $12 = sp + 188|0;
 $13 = sp + 184|0;
 $14 = sp + 200|0;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 HEAP32[$4>>2] = 0;
 HEAP32[$8>>2] = 0;
 $15 = (_fopen($1,20231)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$vararg_buffer>>2] = $1;
  _TraceLog(1,11306,$vararg_buffer);
  ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$2+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[$2+24>>2]|0;HEAP32[$0+28>>2]=HEAP32[$2+28>>2]|0;
  STACKTOP = sp;return;
 }
 (_fgets($3,256,$15)|0);
 (_fgets($3,256,$15)|0);
 $17 = (_strstr($3,11340)|0);
 HEAP32[$vararg_buffer1>>2] = $4;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $9;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $5;
 $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $6;
 (_sscanf($17,11351,$vararg_buffer1)|0);
 $18 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $1;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $18;
 _TraceLog(3,11393,$vararg_buffer7);
 $19 = HEAP32[$5>>2]|0;
 $20 = HEAP32[$6>>2]|0;
 HEAP32[$vararg_buffer11>>2] = $1;
 $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
 HEAP32[$vararg_ptr14>>2] = $19;
 $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
 HEAP32[$vararg_ptr15>>2] = $20;
 _TraceLog(3,11412,$vararg_buffer11);
 (_fgets($3,256,$15)|0);
 $21 = (_strstr($3,11443)|0);
 HEAP32[$vararg_buffer16>>2] = $7;
 (_sscanf($21,11448,$vararg_buffer16)|0);
 HEAP32[$vararg_buffer19>>2] = $1;
 $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
 HEAP32[$vararg_ptr22>>2] = $7;
 _TraceLog(3,11464,$vararg_buffer19);
 (_fgets($3,256,$15)|0);
 $22 = (_strstr($3,11495)|0);
 HEAP32[$vararg_buffer23>>2] = $8;
 (_sscanf($22,11501,$vararg_buffer23)|0);
 $23 = HEAP32[$8>>2]|0;
 HEAP32[$vararg_buffer26>>2] = $1;
 $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
 HEAP32[$vararg_ptr29>>2] = $23;
 _TraceLog(3,11510,$vararg_buffer26);
 $24 = (_strrchr($1,47)|0);
 $25 = (_strlen($1)|0);
 $26 = (_strlen($24)|0);
 $27 = (_strlen($7)|0);
 $28 = (($25) + 4)|0;
 $29 = (($28) - ($26))|0;
 $30 = (($29) + ($27))|0;
 $31 = (_malloc($30)|0);
 HEAP8[$31>>0] = 0;
 $32 = (_strlen($1)|0);
 $33 = (_strlen($24)|0);
 $34 = (($32) + 1)|0;
 $35 = (($34) - ($33))|0;
 (_strncat($31,$1,$35)|0);
 $36 = (_strlen($7)|0);
 (_strncat($31,$7,$36)|0);
 HEAP32[$$byval_copy52>>2] = $1;
 $vararg_ptr33 = ((($$byval_copy52)) + 4|0);
 HEAP32[$vararg_ptr33>>2] = $31;
 _TraceLog(3,11534,$$byval_copy52);
 _LoadImage($vararg_buffer26,$31);
 $37 = ((($vararg_buffer26)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(1);
 if ($39) {
  ;HEAP32[$$byval_copy52>>2]=HEAP32[$vararg_buffer26>>2]|0;HEAP32[$$byval_copy52+4>>2]=HEAP32[$vararg_buffer26+4>>2]|0;HEAP32[$$byval_copy52+8>>2]=HEAP32[$vararg_buffer26+8>>2]|0;HEAP32[$$byval_copy52+12>>2]=HEAP32[$vararg_buffer26+12>>2]|0;HEAP32[$$byval_copy52+16>>2]=HEAP32[$vararg_buffer26+16>>2]|0;
  _ImageCopy($vararg_buffer23,$$byval_copy52);
  $40 = ((($vararg_buffer23)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($vararg_buffer23)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = Math_imul($43, $41)|0;
  $45 = ($44|0)>(0);
  if ($45) {
   $$056 = 0;
   while(1) {
    $46 = HEAP32[$vararg_buffer23>>2]|0;
    $47 = (($46) + ($$056)|0);
    HEAP8[$47>>0] = -1;
    $48 = (($$056) + 1)|0;
    $49 = HEAP32[$40>>2]|0;
    $50 = HEAP32[$42>>2]|0;
    $51 = Math_imul($50, $49)|0;
    $52 = ($48|0)<($51|0);
    if ($52) {
     $$056 = $48;
    } else {
     break;
    }
   }
  }
  ;HEAP32[$$byval_copy52>>2]=HEAP32[$vararg_buffer26>>2]|0;HEAP32[$$byval_copy52+4>>2]=HEAP32[$vararg_buffer26+4>>2]|0;HEAP32[$$byval_copy52+8>>2]=HEAP32[$vararg_buffer26+8>>2]|0;HEAP32[$$byval_copy52+12>>2]=HEAP32[$vararg_buffer26+12>>2]|0;HEAP32[$$byval_copy52+16>>2]=HEAP32[$vararg_buffer26+16>>2]|0;
  _ImageAlphaMask($vararg_buffer23,$$byval_copy52);
  ;HEAP32[$$byval_copy52>>2]=HEAP32[$vararg_buffer23>>2]|0;HEAP32[$$byval_copy52+4>>2]=HEAP32[$vararg_buffer23+4>>2]|0;HEAP32[$$byval_copy52+8>>2]=HEAP32[$vararg_buffer23+8>>2]|0;HEAP32[$$byval_copy52+12>>2]=HEAP32[$vararg_buffer23+12>>2]|0;HEAP32[$$byval_copy52+16>>2]=HEAP32[$vararg_buffer23+16>>2]|0;
  _LoadTextureFromImage($10,$$byval_copy52);
  ;HEAP32[$2>>2]=HEAP32[$10>>2]|0;HEAP32[$2+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$10+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$10+16>>2]|0;
  ;HEAP32[$$byval_copy52>>2]=HEAP32[$vararg_buffer23>>2]|0;HEAP32[$$byval_copy52+4>>2]=HEAP32[$vararg_buffer23+4>>2]|0;HEAP32[$$byval_copy52+8>>2]=HEAP32[$vararg_buffer23+8>>2]|0;HEAP32[$$byval_copy52+12>>2]=HEAP32[$vararg_buffer23+12>>2]|0;HEAP32[$$byval_copy52+16>>2]=HEAP32[$vararg_buffer23+16>>2]|0;
  _UnloadImage($$byval_copy52);
 } else {
  ;HEAP32[$$byval_copy52>>2]=HEAP32[$vararg_buffer26>>2]|0;HEAP32[$$byval_copy52+4>>2]=HEAP32[$vararg_buffer26+4>>2]|0;HEAP32[$$byval_copy52+8>>2]=HEAP32[$vararg_buffer26+8>>2]|0;HEAP32[$$byval_copy52+12>>2]=HEAP32[$vararg_buffer26+12>>2]|0;HEAP32[$$byval_copy52+16>>2]=HEAP32[$vararg_buffer26+16>>2]|0;
  _LoadTextureFromImage($11,$$byval_copy52);
  ;HEAP32[$2>>2]=HEAP32[$11>>2]|0;HEAP32[$2+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$11+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$11+16>>2]|0;
 }
 $53 = HEAP32[$4>>2]|0;
 $54 = ((($2)) + 20|0);
 HEAP32[$54>>2] = $53;
 $55 = HEAP32[$8>>2]|0;
 $56 = ((($2)) + 24|0);
 HEAP32[$56>>2] = $55;
 $57 = $55 << 5;
 $58 = (_malloc($57)|0);
 $59 = ((($2)) + 28|0);
 HEAP32[$59>>2] = $58;
 ;HEAP32[$$byval_copy52>>2]=HEAP32[$vararg_buffer26>>2]|0;HEAP32[$$byval_copy52+4>>2]=HEAP32[$vararg_buffer26+4>>2]|0;HEAP32[$$byval_copy52+8>>2]=HEAP32[$vararg_buffer26+8>>2]|0;HEAP32[$$byval_copy52+12>>2]=HEAP32[$vararg_buffer26+12>>2]|0;HEAP32[$$byval_copy52+16>>2]=HEAP32[$vararg_buffer26+16>>2]|0;
 _UnloadImage($$byval_copy52);
 _free($31);
 $60 = HEAP32[$8>>2]|0;
 $61 = ($60|0)>(0);
 if ($61) {
  $$05355 = 0;
  while(1) {
   (_fgets($3,256,$15)|0);
   HEAP32[$vararg_buffer34>>2] = $vararg_buffer23;
   $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
   HEAP32[$vararg_ptr37>>2] = $vararg_buffer19;
   $vararg_ptr38 = ((($vararg_buffer34)) + 8|0);
   HEAP32[$vararg_ptr38>>2] = $vararg_buffer16;
   $vararg_ptr39 = ((($vararg_buffer34)) + 12|0);
   HEAP32[$vararg_ptr39>>2] = $vararg_buffer11;
   $vararg_ptr40 = ((($vararg_buffer34)) + 16|0);
   HEAP32[$vararg_ptr40>>2] = $vararg_buffer7;
   $vararg_ptr41 = ((($vararg_buffer34)) + 20|0);
   HEAP32[$vararg_ptr41>>2] = $vararg_buffer1;
   $vararg_ptr42 = ((($vararg_buffer34)) + 24|0);
   HEAP32[$vararg_ptr42>>2] = $12;
   $vararg_ptr43 = ((($vararg_buffer34)) + 28|0);
   HEAP32[$vararg_ptr43>>2] = $13;
   (_sscanf($3,11569,$vararg_buffer34)|0);
   $64 = HEAP32[$vararg_buffer23>>2]|0;
   $65 = HEAP32[$59>>2]|0;
   $66 = (($65) + ($$05355<<5)|0);
   HEAP32[$66>>2] = $64;
   $67 = HEAP32[$59>>2]|0;
   $68 = HEAP32[$vararg_buffer19>>2]|0;
   $69 = HEAP32[$vararg_buffer16>>2]|0;
   $70 = HEAP32[$vararg_buffer11>>2]|0;
   $71 = HEAP32[$vararg_buffer7>>2]|0;
   $$sroa$0$0$$sroa_idx = (((($67) + ($$05355<<5)|0)) + 4|0);
   HEAP32[$$sroa$0$0$$sroa_idx>>2] = $68;
   $$sroa$2$0$$sroa_idx1 = (((($67) + ($$05355<<5)|0)) + 8|0);
   HEAP32[$$sroa$2$0$$sroa_idx1>>2] = $69;
   $$sroa$3$0$$sroa_idx2 = (((($67) + ($$05355<<5)|0)) + 12|0);
   HEAP32[$$sroa$3$0$$sroa_idx2>>2] = $70;
   $$sroa$4$0$$sroa_idx3 = (((($67) + ($$05355<<5)|0)) + 16|0);
   HEAP32[$$sroa$4$0$$sroa_idx3>>2] = $71;
   $72 = HEAP32[$vararg_buffer1>>2]|0;
   $73 = HEAP32[$59>>2]|0;
   $74 = (((($73) + ($$05355<<5)|0)) + 20|0);
   HEAP32[$74>>2] = $72;
   $75 = HEAP32[$12>>2]|0;
   $76 = HEAP32[$59>>2]|0;
   $77 = (((($76) + ($$05355<<5)|0)) + 24|0);
   HEAP32[$77>>2] = $75;
   $78 = HEAP32[$13>>2]|0;
   $79 = HEAP32[$59>>2]|0;
   $80 = (((($79) + ($$05355<<5)|0)) + 28|0);
   HEAP32[$80>>2] = $78;
   $81 = (($$05355) + 1)|0;
   $82 = HEAP32[$8>>2]|0;
   $83 = ($81|0)<($82|0);
   if ($83) {
    $$05355 = $81;
   } else {
    break;
   }
  }
 }
 (_fclose($15)|0);
 $62 = HEAP32[$2>>2]|0;
 $63 = ($62|0)==(0);
 if ($63) {
  ;HEAP32[$$byval_copy52>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy52+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy52+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy52+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$byval_copy52+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$$byval_copy52+20>>2]=HEAP32[$2+20>>2]|0;HEAP32[$$byval_copy52+24>>2]=HEAP32[$2+24>>2]|0;HEAP32[$$byval_copy52+28>>2]=HEAP32[$2+28>>2]|0;
  _UnloadSpriteFont($$byval_copy52);
  _GetDefaultFont($14);
  ;HEAP32[$2>>2]=HEAP32[$14>>2]|0;HEAP32[$2+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$14+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$14+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$14+20>>2]|0;HEAP32[$2+24>>2]=HEAP32[$14+24>>2]|0;HEAP32[$2+28>>2]=HEAP32[$14+28>>2]|0;
 } else {
  HEAP32[$vararg_buffer44>>2] = $1;
  _TraceLog(0,11643,$vararg_buffer44);
 }
 ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$2+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[$2+24>>2]|0;HEAP32[$0+28>>2]=HEAP32[$2+28>>2]|0;
 STACKTOP = sp;return;
}
function _LoadImage($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 72|0;
 $3 = sp + 68|0;
 $4 = sp + 64|0;
 $5 = sp + 60|0;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;
 $6 = (_IsFileExtension($1,13653)|0);
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $19 = (_IsFileExtension($1,9213)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = (_IsFileExtension($1,9218)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $36 = (_IsFileExtension($1,9223)|0);
     $37 = ($36|0)==(0);
     if ($37) {
      $46 = (_IsFileExtension($1,9295)|0);
      $47 = ($46|0)==(0);
      if ($47) {
       HEAP32[$vararg_buffer4>>2] = $1;
       _TraceLog(1,9300,$vararg_buffer4);
       break;
      } else {
       _LoadDDS($2,$1);
       break;
      }
     }
     HEAP32[$3>>2] = 0;
     $38 = (_fopen($1,14498)|0);
     _stbi_set_flip_vertically_on_load(1);
     $39 = ((($2)) + 4|0);
     $40 = ((($2)) + 8|0);
     $41 = (_stbi_loadf_from_file($38,$39,$40,$3,0)|0);
     HEAP32[$2>>2] = $41;
     _stbi_set_flip_vertically_on_load(0);
     (_fclose($38)|0);
     $42 = ((($2)) + 12|0);
     HEAP32[$42>>2] = 1;
     $43 = HEAP32[$3>>2]|0;
     $44 = ($43|0)==(3);
     if ($44) {
      $45 = ((($2)) + 16|0);
      HEAP32[$45>>2] = 8;
     } else {
      HEAP32[$$byval_copy>>2] = $1;
      _TraceLog(1,9228,$$byval_copy);
      ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$2+16>>2]|0;
      _UnloadImage($$byval_copy);
     }
     break;
    }
   }
   HEAP32[$3>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$5>>2] = 0;
   $23 = (_fopen($1,14498)|0);
   $24 = ($23|0)==(0|0);
   L17: do {
    if (!($24)) {
     $25 = (_stbi_load_from_file($23,$3,$4,$5,0)|0);
     HEAP32[$2>>2] = $25;
     (_fclose($23)|0);
     $26 = HEAP32[$3>>2]|0;
     $27 = ((($2)) + 4|0);
     HEAP32[$27>>2] = $26;
     $28 = HEAP32[$4>>2]|0;
     $29 = ((($2)) + 8|0);
     HEAP32[$29>>2] = $28;
     $30 = ((($2)) + 12|0);
     HEAP32[$30>>2] = 1;
     $31 = HEAP32[$5>>2]|0;
     switch ($31|0) {
     case 1:  {
      $32 = ((($2)) + 16|0);
      HEAP32[$32>>2] = 1;
      break L17;
      break;
     }
     case 2:  {
      $33 = ((($2)) + 16|0);
      HEAP32[$33>>2] = 2;
      break L17;
      break;
     }
     case 3:  {
      $34 = ((($2)) + 16|0);
      HEAP32[$34>>2] = 4;
      break L17;
      break;
     }
     case 4:  {
      $35 = ((($2)) + 16|0);
      HEAP32[$35>>2] = 7;
      break L17;
      break;
     }
     default: {
      break L17;
     }
     }
    }
   } while(0);
  } else {
   $8 = (_LoadResource($1,0)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = ((($8)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($8)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($8)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($8)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    _LoadImagePro($2,$12,$14,$16,$18);
   } else {
    HEAP32[$vararg_buffer>>2] = $1;
    _TraceLog(1,9166,$vararg_buffer);
   }
   _UnloadResource($8);
  }
 } while(0);
 $48 = HEAP32[$2>>2]|0;
 $49 = ($48|0)==(0|0);
 if ($49) {
  HEAP32[$vararg_buffer12>>2] = $1;
  _TraceLog(1,9375,$vararg_buffer12);
  ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;
  STACKTOP = sp;return;
 } else {
  $50 = ((($2)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($2)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $1;
  $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $51;
  $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
  HEAP32[$vararg_ptr11>>2] = $53;
  _TraceLog(0,9336,$vararg_buffer7);
  ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;
  STACKTOP = sp;return;
 }
}
function _LoadImageFont($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0195$lcssa = 0, $$019552 = 0, $$019622 = 0, $$0197 = 0, $$020032 = 0, $$0201$lcssa = 0, $$020131 = 0, $$0203 = 0, $$021 = 0, $$1$lcssa = 0, $$119927 = 0, $$1202$lcssa = 0, $$120226 = 0, $$135 = 0, $$2 = 0, $$byval_copy4 = 0, $$sroa$0 = 0, $$sroa$5$0$$sroa_idx15 = 0, $$sroa$6$0$$sroa_idx17 = 0, $$sroa$9$0$$sroa_idx20 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5232|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5232|0);
 $$byval_copy4 = sp + 5200|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 24|0;
 $3 = sp + 4176|0;
 $4 = sp + 56|0;
 $$sroa$0 = sp;
 $5 = sp + 4152|0;
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$$byval_copy4+16>>2]=HEAP32[$1+16>>2]|0;
 $6 = (_GetImageData($$byval_copy4)|0);
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 L1: do {
  if ($9) {
   $10 = ((($1)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)>(0);
   $13 = HEAP8[$2>>0]|0;
   $14 = ((($2)) + 1|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ((($2)) + 2|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ((($2)) + 3|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = HEAP8[$2>>0]|0;
   $21 = ((($2)) + 1|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ((($2)) + 2|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = ((($2)) + 3|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = HEAP32[$10>>2]|0;
   $$019552 = 0;
   while(1) {
    L5: do {
     if ($12) {
      $$135 = 0;$29 = $11;
      while(1) {
       $28 = Math_imul($29, $$019552)|0;
       $30 = (($28) + ($$135))|0;
       $31 = (($6) + ($30<<2)|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = ($32<<24>>24)==($20<<24>>24);
       if (!($33)) {
        $$1$lcssa = $$135;
        break L5;
       }
       $34 = (((($6) + ($30<<2)|0)) + 1|0);
       $35 = HEAP8[$34>>0]|0;
       $36 = ($35<<24>>24)==($22<<24>>24);
       if (!($36)) {
        $$1$lcssa = $$135;
        break L5;
       }
       $37 = (((($6) + ($30<<2)|0)) + 2|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = ($38<<24>>24)==($24<<24>>24);
       if (!($39)) {
        $$1$lcssa = $$135;
        break L5;
       }
       $40 = (((($6) + ($30<<2)|0)) + 3|0);
       $41 = HEAP8[$40>>0]|0;
       $42 = ($41<<24>>24)==($26<<24>>24);
       if (!($42)) {
        $$1$lcssa = $$135;
        break L5;
       }
       $43 = (($$135) + 1)|0;
       $44 = HEAP32[$10>>2]|0;
       $45 = ($43|0)<($44|0);
       if ($45) {
        $$135 = $43;$29 = $44;
       } else {
        $$1$lcssa = $43;
        break;
       }
      }
     } else {
      $$1$lcssa = 0;
     }
    } while(0);
    $46 = Math_imul($27, $$019552)|0;
    $47 = (($46) + ($$1$lcssa))|0;
    $48 = (($6) + ($47<<2)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ($49<<24>>24)==($13<<24>>24);
    if (!($50)) {
     $$0195$lcssa = $$019552;$$2 = $$1$lcssa;
     break L1;
    }
    $51 = (((($6) + ($47<<2)|0)) + 1|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = ($52<<24>>24)==($15<<24>>24);
    if (!($53)) {
     $$0195$lcssa = $$019552;$$2 = $$1$lcssa;
     break L1;
    }
    $54 = (((($6) + ($47<<2)|0)) + 2|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = ($55<<24>>24)==($17<<24>>24);
    if (!($56)) {
     $$0195$lcssa = $$019552;$$2 = $$1$lcssa;
     break L1;
    }
    $57 = (((($6) + ($47<<2)|0)) + 3|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = ($58<<24>>24)==($19<<24>>24);
    if (!($59)) {
     $$0195$lcssa = $$019552;$$2 = $$1$lcssa;
     break L1;
    }
    $60 = (($$019552) + 1)|0;
    $61 = HEAP32[$7>>2]|0;
    $62 = ($60|0)<($61|0);
    if ($62) {
     $$019552 = $60;
    } else {
     $$0195$lcssa = $60;$$2 = $$1$lcssa;
     break;
    }
   }
  } else {
   $$0195$lcssa = 0;$$2 = 0;
  }
 } while(0);
 $63 = ((($1)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = HEAP8[$2>>0]|0;
 $66 = ((($2)) + 1|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ((($2)) + 2|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = ((($2)) + 3|0);
 $71 = HEAP8[$70>>0]|0;
 $$0203 = 0;
 while(1) {
  $72 = (($$0203) + ($$0195$lcssa))|0;
  $73 = Math_imul($72, $64)|0;
  $74 = (($73) + ($$2))|0;
  $75 = (($6) + ($74<<2)|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = ($76<<24>>24)==($65<<24>>24);
  if ($77) {
   $78 = (((($6) + ($74<<2)|0)) + 1|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = ($79<<24>>24)==($67<<24>>24);
   if ($80) {
    $81 = (((($6) + ($74<<2)|0)) + 2|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = ($82<<24>>24)==($69<<24>>24);
    if ($83) {
     $84 = (((($6) + ($74<<2)|0)) + 3|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = ($85<<24>>24)==($71<<24>>24);
     if ($86) {
      break;
     }
    }
   }
  }
  $96 = (($$0203) + 1)|0;
  $$0203 = $96;
 }
 $87 = HEAP32[$7>>2]|0;
 $88 = ($$0195$lcssa|0)<($87|0);
 if ($88) {
  $89 = HEAP32[$63>>2]|0;
  $90 = ($$2|0)<($89|0);
  $91 = HEAP32[$7>>2]|0;
  $92 = HEAP8[$2>>0]|0;
  $93 = HEAP8[$66>>0]|0;
  $94 = HEAP8[$68>>0]|0;
  $95 = HEAP8[$70>>0]|0;
  $$020032 = 0;$$020131 = 0;$99 = $$0195$lcssa;
  while(1) {
   L30: do {
    if ($90) {
     $$119927 = $$2;$$120226 = $$020131;$98 = $89;
     while(1) {
      $97 = Math_imul($98, $99)|0;
      $100 = (($97) + ($$119927))|0;
      $101 = (($6) + ($100<<2)|0);
      $102 = HEAP8[$101>>0]|0;
      $103 = ($102<<24>>24)==($92<<24>>24);
      if ($103) {
       $104 = (((($6) + ($100<<2)|0)) + 1|0);
       $105 = HEAP8[$104>>0]|0;
       $106 = ($105<<24>>24)==($93<<24>>24);
       if ($106) {
        $107 = (((($6) + ($100<<2)|0)) + 2|0);
        $108 = HEAP8[$107>>0]|0;
        $109 = ($108<<24>>24)==($94<<24>>24);
        if ($109) {
         $110 = (((($6) + ($100<<2)|0)) + 3|0);
         $111 = HEAP8[$110>>0]|0;
         $112 = ($111<<24>>24)==($95<<24>>24);
         if ($112) {
          $$1202$lcssa = $$120226;
          break L30;
         }
        }
       }
      }
      $113 = (($$120226) + 32)|0;
      $114 = (($3) + ($$120226<<2)|0);
      HEAP32[$114>>2] = $113;
      $115 = (($4) + ($$120226<<4)|0);
      HEAP32[$115>>2] = $$119927;
      $116 = (((($4) + ($$120226<<4)|0)) + 4|0);
      HEAP32[$116>>2] = $99;
      $117 = (((($4) + ($$120226<<4)|0)) + 12|0);
      HEAP32[$117>>2] = $$0203;
      $118 = HEAP32[$63>>2]|0;
      $119 = Math_imul($118, $99)|0;
      $$0197 = 0;
      while(1) {
       $120 = (($$0197) + ($$119927))|0;
       $121 = (($120) + ($119))|0;
       $122 = (($6) + ($121<<2)|0);
       $123 = HEAP8[$122>>0]|0;
       $124 = ($123<<24>>24)==($92<<24>>24);
       if ($124) {
        $125 = (((($6) + ($121<<2)|0)) + 1|0);
        $126 = HEAP8[$125>>0]|0;
        $127 = ($126<<24>>24)==($93<<24>>24);
        if ($127) {
         $128 = (((($6) + ($121<<2)|0)) + 2|0);
         $129 = HEAP8[$128>>0]|0;
         $130 = ($129<<24>>24)==($94<<24>>24);
         if ($130) {
          $131 = (((($6) + ($121<<2)|0)) + 3|0);
          $132 = HEAP8[$131>>0]|0;
          $133 = ($132<<24>>24)==($95<<24>>24);
          if ($133) {
           break;
          }
         }
        }
       }
       $134 = (($$0197) + 1)|0;
       $$0197 = $134;
      }
      $135 = (((($4) + ($$120226<<4)|0)) + 8|0);
      HEAP32[$135>>2] = $$0197;
      $136 = (($$120226) + 1)|0;
      $137 = (($$119927) + ($$2))|0;
      $138 = (($137) + ($$0197))|0;
      $139 = HEAP32[$63>>2]|0;
      $140 = ($138|0)<($139|0);
      if ($140) {
       $$119927 = $138;$$120226 = $136;$98 = $139;
      } else {
       $$1202$lcssa = $136;
       break;
      }
     }
    } else {
     $$1202$lcssa = $$020131;
    }
   } while(0);
   $141 = (($$020032) + 1)|0;
   $142 = Math_imul($141, $72)|0;
   $143 = (($142) + ($$0195$lcssa))|0;
   $144 = ($143|0)<($91|0);
   if ($144) {
    $$020032 = $141;$$020131 = $$1202$lcssa;$99 = $143;
   } else {
    $$0201$lcssa = $$1202$lcssa;
    break;
   }
  }
 } else {
  $$0201$lcssa = 0;
 }
 _TraceLog(3,9080,$vararg_buffer);
 $145 = HEAP32[$7>>2]|0;
 $146 = HEAP32[$63>>2]|0;
 $147 = Math_imul($146, $145)|0;
 $148 = ($147|0)>(0);
 if ($148) {
  $149 = HEAP8[$2>>0]|0;
  $150 = HEAP8[$66>>0]|0;
  $151 = HEAP8[$68>>0]|0;
  $152 = HEAP8[$70>>0]|0;
  $$019622 = 0;
  while(1) {
   $158 = (($6) + ($$019622<<2)|0);
   $159 = HEAP8[$158>>0]|0;
   $160 = ($159<<24>>24)==($149<<24>>24);
   if ($160) {
    $161 = (((($6) + ($$019622<<2)|0)) + 1|0);
    $162 = HEAP8[$161>>0]|0;
    $163 = ($162<<24>>24)==($150<<24>>24);
    if ($163) {
     $164 = (((($6) + ($$019622<<2)|0)) + 2|0);
     $165 = HEAP8[$164>>0]|0;
     $166 = ($165<<24>>24)==($151<<24>>24);
     if ($166) {
      $167 = (((($6) + ($$019622<<2)|0)) + 3|0);
      $168 = HEAP8[$167>>0]|0;
      $169 = ($168<<24>>24)==($152<<24>>24);
      if ($169) {
       HEAP8[$158>>0]=0&255;HEAP8[$158+1>>0]=(0>>8)&255;HEAP8[$158+2>>0]=(0>>16)&255;HEAP8[$158+3>>0]=0>>24;
      }
     }
    }
   }
   $170 = (($$019622) + 1)|0;
   $171 = HEAP32[$7>>2]|0;
   $172 = HEAP32[$63>>2]|0;
   $173 = Math_imul($172, $171)|0;
   $174 = ($170|0)<($173|0);
   if ($174) {
    $$019622 = $170;
   } else {
    break;
   }
  }
 }
 $153 = HEAP32[$63>>2]|0;
 $154 = HEAP32[$7>>2]|0;
 _LoadImageEx($vararg_buffer,$6,$153,$154);
 _free($6);
 ;HEAP32[$$sroa$0>>2]=0|0;HEAP32[$$sroa$0+4>>2]=0|0;HEAP32[$$sroa$0+8>>2]=0|0;HEAP32[$$sroa$0+12>>2]=0|0;HEAP32[$$sroa$0+16>>2]=0|0;
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$vararg_buffer>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$vararg_buffer+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$vararg_buffer+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$vararg_buffer+12>>2]|0;HEAP32[$$byval_copy4+16>>2]=HEAP32[$vararg_buffer+16>>2]|0;
 _LoadTextureFromImage($5,$$byval_copy4);
 ;HEAP32[$$sroa$0>>2]=HEAP32[$5>>2]|0;HEAP32[$$sroa$0+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$sroa$0+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$sroa$0+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$sroa$0+16>>2]=HEAP32[$5+16>>2]|0;
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$vararg_buffer>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$vararg_buffer+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$vararg_buffer+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$vararg_buffer+12>>2]|0;HEAP32[$$byval_copy4+16>>2]=HEAP32[$vararg_buffer+16>>2]|0;
 _UnloadImage($$byval_copy4);
 $155 = $$0201$lcssa << 5;
 $156 = (_malloc($155)|0);
 $157 = ($$0201$lcssa|0)>(0);
 if ($157) {
  $$021 = 0;
 } else {
  $175 = ((($156)) + 16|0);
  $176 = HEAP32[$175>>2]|0;
  _TraceLog(0,9124,$vararg_buffer1);
  ;HEAP32[$0>>2]=HEAP32[$$sroa$0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$$sroa$0+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$$sroa$0+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$$sroa$0+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$$sroa$0+16>>2]|0;
  $$sroa$5$0$$sroa_idx15 = ((($0)) + 20|0);
  HEAP32[$$sroa$5$0$$sroa_idx15>>2] = $176;
  $$sroa$6$0$$sroa_idx17 = ((($0)) + 24|0);
  HEAP32[$$sroa$6$0$$sroa_idx17>>2] = $$0201$lcssa;
  $$sroa$9$0$$sroa_idx20 = ((($0)) + 28|0);
  HEAP32[$$sroa$9$0$$sroa_idx20>>2] = $156;
  STACKTOP = sp;return;
 }
 while(1) {
  $177 = (($3) + ($$021<<2)|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (($156) + ($$021<<5)|0);
  HEAP32[$179>>2] = $178;
  $180 = (((($156) + ($$021<<5)|0)) + 4|0);
  $181 = (($4) + ($$021<<4)|0);
  ;HEAP32[$180>>2]=HEAP32[$181>>2]|0;HEAP32[$180+4>>2]=HEAP32[$181+4>>2]|0;HEAP32[$180+8>>2]=HEAP32[$181+8>>2]|0;HEAP32[$180+12>>2]=HEAP32[$181+12>>2]|0;
  $182 = (((($156) + ($$021<<5)|0)) + 20|0);
  HEAP32[$182>>2] = 0;
  $183 = (((($156) + ($$021<<5)|0)) + 24|0);
  HEAP32[$183>>2] = 0;
  $184 = (((($156) + ($$021<<5)|0)) + 28|0);
  HEAP32[$184>>2] = 0;
  $185 = (($$021) + 1)|0;
  $exitcond = ($185|0)==($$0201$lcssa|0);
  if ($exitcond) {
   break;
  } else {
   $$021 = $185;
  }
 }
 $175 = ((($156)) + 16|0);
 $176 = HEAP32[$175>>2]|0;
 _TraceLog(0,9124,$vararg_buffer1);
 ;HEAP32[$0>>2]=HEAP32[$$sroa$0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$$sroa$0+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$$sroa$0+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$$sroa$0+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$$sroa$0+16>>2]|0;
 $$sroa$5$0$$sroa_idx15 = ((($0)) + 20|0);
 HEAP32[$$sroa$5$0$$sroa_idx15>>2] = $176;
 $$sroa$6$0$$sroa_idx17 = ((($0)) + 24|0);
 HEAP32[$$sroa$6$0$$sroa_idx17>>2] = $$0201$lcssa;
 $$sroa$9$0$$sroa_idx20 = ((($0)) + 28|0);
 HEAP32[$$sroa$9$0$$sroa_idx20>>2] = $156;
 STACKTOP = sp;return;
}
function _SetTextureFilter($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 switch ($1|0) {
 case 0:  {
  $2 = ((($0)) + 12|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(1);
  $5 = HEAP32[$0>>2]|0;
  if ($4) {
   _rlTextureParameters($5,10241,9984);
   $6 = HEAP32[$0>>2]|0;
   _rlTextureParameters($6,10240,9728);
   STACKTOP = sp;return;
  } else {
   _rlTextureParameters($5,10241,9728);
   $7 = HEAP32[$0>>2]|0;
   _rlTextureParameters($7,10240,9728);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>(1);
  $11 = HEAP32[$0>>2]|0;
  if ($10) {
   _rlTextureParameters($11,10241,9985);
   $12 = HEAP32[$0>>2]|0;
   _rlTextureParameters($12,10240,9729);
   STACKTOP = sp;return;
  } else {
   _rlTextureParameters($11,10241,9729);
   $13 = HEAP32[$0>>2]|0;
   _rlTextureParameters($13,10240,9729);
   STACKTOP = sp;return;
  }
  break;
 }
 case 2:  {
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)>(1);
  $17 = HEAP32[$0>>2]|0;
  if ($16) {
   _rlTextureParameters($17,10241,9987);
   $18 = HEAP32[$0>>2]|0;
   _rlTextureParameters($18,10240,9729);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer>>2] = $17;
   _TraceLog(1,8880,$vararg_buffer);
   $19 = HEAP32[$0>>2]|0;
   _rlTextureParameters($19,10241,9729);
   _rlTextureParameters($19,10240,9729);
   STACKTOP = sp;return;
  }
  break;
 }
 case 3:  {
  $20 = HEAP32[$0>>2]|0;
  _rlTextureParameters($20,12288,4);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $21 = HEAP32[$0>>2]|0;
  _rlTextureParameters($21,12288,8);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $22 = HEAP32[$0>>2]|0;
  _rlTextureParameters($22,12288,16);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _rlTextureParameters($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 _glBindTexture(3553,($0|0));
 L1: do {
  switch ($1|0) {
  case 10243: case 10242:  {
   $3 = ($2|0)!=(34626);
   $4 = HEAP32[84054]|0;
   $5 = ($4|0)!=(0);
   $or$cond = $3 | $5;
   if ($or$cond) {
    _glTexParameteri(3553,($1|0),($2|0));
    break L1;
   } else {
    _TraceLog(1,8945,$vararg_buffer);
    break L1;
   }
   break;
  }
  case 10241: case 10240:  {
   _glTexParameteri(3553,($1|0),($2|0));
   break;
  }
  case 12288:  {
   $6 = (+($2|0));
   $7 = +HEAPF32[84055];
   $8 = !($6 <= $7);
   if (!($8)) {
    _glTexParameterf(3553,34046,(+$6));
    break L1;
   }
   $9 = $7 > 0.0;
   if ($9) {
    $10 = $7;
    HEAP32[$vararg_buffer1>>2] = $0;
    $vararg_ptr3 = ((($vararg_buffer1)) + 8|0);
    HEAPF64[$vararg_ptr3>>3] = $10;
    _TraceLog(1,8982,$vararg_buffer1);
    _glTexParameterf(3553,34046,(+$6));
    break L1;
   } else {
    _TraceLog(1,9044,$vararg_buffer4);
    break L1;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 _glBindTexture(3553,0);
 STACKTOP = sp;return;
}
function _stbi_load_from_file($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $5 = sp;
 _stbi__start_file($5,$0);
 $6 = (_stbi__load_and_postprocess_8bit($5,$1,$2,$3,$4)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return ($6|0);
 }
 $8 = ((($5)) + 172|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($5)) + 168|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) - ($9))|0;
 (_fseek($0,$12,1)|0);
 STACKTOP = sp;return ($6|0);
}
function _stbi_set_flip_vertically_on_load($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[84057] = $0;
 return;
}
function _stbi_loadf_from_file($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $5 = sp;
 _stbi__start_file($5,$0);
 $6 = (_stbi__loadf_main($5,$1,$2,$3,$4)|0);
 STACKTOP = sp;return ($6|0);
}
function _LoadDDS($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0101111 = 0, $$0102114 = 0, $$0103112 = 0, $$sink = 0, $$sink2 = 0, $$sroa$0$0 = 0, $$sroa$0$1 = 0, $$sroa$0$2 = 0, $$sroa$0$3 = 0, $$sroa$28$0 = 0, $$sroa$28$0$$sroa_idx61 = 0, $$sroa$28$1 = 0, $$sroa$42$0 = 0, $$sroa$42$0$$sroa_idx75 = 0, $$sroa$42$1 = 0, $$sroa$56$0 = 0, $$sroa$56$0$$sroa_idx89 = 0, $$sroa$56$1 = 0, $$sroa$57$0 = 0;
 var $$sroa$57$0$$sroa_idx91 = 0, $$sroa$57$2 = 0, $$sroa$57$3 = 0, $$sroa$57$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $exitcond = 0, $exitcond117 = 0, $or$cond = 0, $or$cond106 = 0, $or$cond108 = 0, $switch = 0, $switch$split282D = 0, $switch$split2D = 0, $switch$split312D = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer24 = sp + 56|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 184|0;
 $3 = sp + 60|0;
 $4 = (_fopen($1,14498)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$vararg_buffer>>2] = $1;
  _TraceLog(1,9406,$vararg_buffer);
  $$sroa$0$3 = 0;$$sroa$28$1 = 0;$$sroa$42$1 = 0;$$sroa$56$1 = 0;$$sroa$57$4 = 0;
  HEAP32[$0>>2] = $$sroa$0$3;
  $$sroa$28$0$$sroa_idx61 = ((($0)) + 4|0);
  HEAP32[$$sroa$28$0$$sroa_idx61>>2] = $$sroa$28$1;
  $$sroa$42$0$$sroa_idx75 = ((($0)) + 8|0);
  HEAP32[$$sroa$42$0$$sroa_idx75>>2] = $$sroa$42$1;
  $$sroa$56$0$$sroa_idx89 = ((($0)) + 12|0);
  HEAP32[$$sroa$56$0$$sroa_idx89>>2] = $$sroa$56$1;
  $$sroa$57$0$$sroa_idx91 = ((($0)) + 16|0);
  HEAP32[$$sroa$57$0$$sroa_idx91>>2] = $$sroa$57$4;
  STACKTOP = sp;return;
 }
 (_fread($2,4,1,$4)|0);
 $6 = (_strncmp($2,9440,4)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  (_fread($3,124,1,$4)|0);
  HEAP32[$vararg_buffer4>>2] = $1;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = 124;
  _TraceLog(3,9493,$vararg_buffer4);
  $8 = ((($3)) + 72|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $1;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $9;
  _TraceLog(3,9523,$vararg_buffer8);
  $10 = ((($3)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $1;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $11;
  _TraceLog(3,9559,$vararg_buffer12);
  $12 = ((($3)) + 80|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer16>>2] = $1;
  $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
  HEAP32[$vararg_ptr19>>2] = $13;
  _TraceLog(3,9598,$vararg_buffer16);
  $14 = ((($3)) + 84|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer20>>2] = $1;
  $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
  HEAP32[$vararg_ptr23>>2] = $15;
  _TraceLog(3,9625,$vararg_buffer20);
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($3)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($3)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0);
  $$sink = $22 ? 1 : $21;
  $23 = HEAP32[$14>>2]|0;
  $24 = ($23|0)==(16);
  L7: do {
   if ($24) {
    $25 = HEAP32[$10>>2]|0;
    switch ($25|0) {
    case 64:  {
     $26 = $17 << 1;
     $27 = Math_imul($26, $19)|0;
     $28 = (_malloc($27)|0);
     (_fread($28,$27,1,$4)|0);
     $$sroa$0$0 = $28;$$sroa$57$0 = 3;
     break L7;
     break;
    }
    case 65:  {
     break;
    }
    default: {
     $$sroa$0$0 = 0;$$sroa$57$0 = 0;
     break L7;
    }
    }
    $29 = ((($3)) + 100|0);
    $30 = HEAP32[$29>>2]|0;
    $switch$split2D = ($30|0)<(61440);
    if ($switch$split2D) {
     switch ($30|0) {
     case 32768:  {
      break;
     }
     default: {
      $$sroa$0$0 = 0;$$sroa$57$0 = 0;
      break L7;
     }
     }
     $31 = Math_imul($19, $17)|0;
     $32 = $31 << 1;
     $33 = (_malloc($32)|0);
     (_fread($33,$32,1,$4)|0);
     $34 = ($31|0)>(0);
     if ($34) {
      $$0103112 = 0;
     } else {
      $$sroa$0$0 = $33;$$sroa$57$0 = 5;
      break;
     }
     while(1) {
      $35 = (($33) + ($$0103112<<1)|0);
      $36 = HEAP16[$35>>1]|0;
      $37 = $36&65535;
      $38 = ($36&65535) >>> 15;
      $39 = $38&65535;
      $40 = $37 << 1;
      $41 = $40 | $39;
      $42 = $41&65535;
      HEAP16[$35>>1] = $42;
      $43 = (($$0103112) + 1)|0;
      $exitcond = ($43|0)==($31|0);
      if ($exitcond) {
       $$sroa$0$0 = $33;$$sroa$57$0 = 5;
       break;
      } else {
       $$0103112 = $43;
      }
     }
    } else {
     switch ($30|0) {
     case 61440:  {
      break;
     }
     default: {
      $$sroa$0$0 = 0;$$sroa$57$0 = 0;
      break L7;
     }
     }
     $44 = Math_imul($19, $17)|0;
     $45 = $44 << 1;
     $46 = (_malloc($45)|0);
     (_fread($46,$45,1,$4)|0);
     $47 = ($44|0)>(0);
     if ($47) {
      $$0102114 = 0;
     } else {
      $$sroa$0$0 = $46;$$sroa$57$0 = 6;
      break;
     }
     while(1) {
      $48 = (($46) + ($$0102114<<1)|0);
      $49 = HEAP16[$48>>1]|0;
      $50 = $49&65535;
      $51 = ($49&65535) >>> 12;
      $52 = $51&65535;
      $53 = $50 << 4;
      $54 = $53 | $52;
      $55 = $54&65535;
      HEAP16[$48>>1] = $55;
      $56 = (($$0102114) + 1)|0;
      $exitcond117 = ($56|0)==($44|0);
      if ($exitcond117) {
       $$sroa$0$0 = $46;$$sroa$57$0 = 6;
       break;
      } else {
       $$0102114 = $56;
      }
     }
    }
   } else {
    $$sroa$0$0 = 0;$$sroa$57$0 = 0;
   }
  } while(0);
  $57 = HEAP32[$10>>2]|0;
  $58 = ($57|0)==(64);
  $59 = HEAP32[$14>>2]|0;
  $60 = ($59|0)==(24);
  $or$cond = $58 & $60;
  L22: do {
   if ($or$cond) {
    $61 = ($17*3)|0;
    $62 = Math_imul($61, $19)|0;
    $63 = (_malloc($62)|0);
    (_fread($63,$62,1,$4)|0);
    $$sroa$0$1 = $63;$$sroa$57$2 = 4;
   } else {
    $64 = ($57|0)==(65);
    $65 = ($59|0)==(32);
    $or$cond106 = $64 & $65;
    if ($or$cond106) {
     $66 = $17 << 2;
     $67 = Math_imul($66, $19)|0;
     $68 = (_malloc($67)|0);
     (_fread($68,$67,1,$4)|0);
     $69 = ($67|0)>(0);
     if ($69) {
      $$0101111 = 0;
     } else {
      $$sroa$0$1 = $68;$$sroa$57$2 = 7;
      break;
     }
     while(1) {
      $70 = (($68) + ($$0101111)|0);
      $71 = HEAP8[$70>>0]|0;
      $72 = $$0101111 | 2;
      $73 = (($68) + ($72)|0);
      $74 = HEAP8[$73>>0]|0;
      HEAP8[$70>>0] = $74;
      HEAP8[$73>>0] = $71;
      $75 = (($$0101111) + 4)|0;
      $76 = ($75|0)<($67|0);
      if ($76) {
       $$0101111 = $75;
      } else {
       $$sroa$0$1 = $68;$$sroa$57$2 = 7;
       break L22;
      }
     }
    }
    $77 = $57 & -2;
    $switch = ($77|0)!=(4);
    $78 = HEAP32[$12>>2]|0;
    $79 = ($78|0)==(0);
    $or$cond108 = $switch | $79;
    if ($or$cond108) {
     $$sroa$0$1 = $$sroa$0$0;$$sroa$57$2 = $$sroa$57$0;
    } else {
     $80 = HEAP32[$20>>2]|0;
     $81 = ($80>>>0)>(1);
     $82 = ((($3)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $81&1;
     $$0 = $83 << $84;
     HEAP32[$vararg_buffer24>>2] = $83;
     _TraceLog(3,9655,$vararg_buffer24);
     $85 = (_malloc($$0)|0);
     (_fread($85,$$0,1,$4)|0);
     $86 = HEAP32[$12>>2]|0;
     $switch$split282D = ($86|0)<(861165636);
     if ($switch$split282D) {
      switch ($86|0) {
      case 827611204:  {
       break;
      }
      default: {
       $$sroa$0$1 = $85;$$sroa$57$2 = $$sroa$57$0;
       break L22;
      }
      }
      $87 = HEAP32[$10>>2]|0;
      $88 = ($87|0)==(4);
      $$sink2 = $88 ? 9 : 10;
      $$sroa$0$1 = $85;$$sroa$57$2 = $$sink2;
      break;
     }
     $switch$split312D = ($86|0)<(894720068);
     if ($switch$split312D) {
      switch ($86|0) {
      case 861165636:  {
       break;
      }
      default: {
       $$sroa$0$1 = $85;$$sroa$57$2 = $$sroa$57$0;
       break L22;
      }
      }
      $$sroa$0$1 = $85;$$sroa$57$2 = 11;
      break;
     } else {
      switch ($86|0) {
      case 894720068:  {
       break;
      }
      default: {
       $$sroa$0$1 = $85;$$sroa$57$2 = $$sroa$57$0;
       break L22;
      }
      }
      $$sroa$0$1 = $85;$$sroa$57$2 = 12;
      break;
     }
    }
   }
  } while(0);
  $$sroa$0$2 = $$sroa$0$1;$$sroa$28$0 = $17;$$sroa$42$0 = $19;$$sroa$56$0 = $$sink;$$sroa$57$3 = $$sroa$57$2;
 } else {
  HEAP32[$vararg_buffer1>>2] = $1;
  _TraceLog(1,9445,$vararg_buffer1);
  $$sroa$0$2 = 0;$$sroa$28$0 = 0;$$sroa$42$0 = 0;$$sroa$56$0 = 0;$$sroa$57$3 = 0;
 }
 (_fclose($4)|0);
 $$sroa$0$3 = $$sroa$0$2;$$sroa$28$1 = $$sroa$28$0;$$sroa$42$1 = $$sroa$42$0;$$sroa$56$1 = $$sroa$56$0;$$sroa$57$4 = $$sroa$57$3;
 HEAP32[$0>>2] = $$sroa$0$3;
 $$sroa$28$0$$sroa_idx61 = ((($0)) + 4|0);
 HEAP32[$$sroa$28$0$$sroa_idx61>>2] = $$sroa$28$1;
 $$sroa$42$0$$sroa_idx75 = ((($0)) + 8|0);
 HEAP32[$$sroa$42$0$$sroa_idx75>>2] = $$sroa$42$1;
 $$sroa$56$0$$sroa_idx89 = ((($0)) + 12|0);
 HEAP32[$$sroa$56$0$$sroa_idx89>>2] = $$sroa$56$1;
 $$sroa$57$0$$sroa_idx91 = ((($0)) + 16|0);
 HEAP32[$$sroa$57$0$$sroa_idx91>>2] = $$sroa$57$4;
 STACKTOP = sp;return;
}
function _stbi__start_file($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _stbi__start_callbacks($0,3888,$1);
 return;
}
function _stbi__loadf_main($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_stbi__hdr_test($0)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = (_stbi__hdr_load($0,$1,$2,$3,$4)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
   return ($$0|0);
  }
  _stbi__float_postprocess($7,$1,$2,$3,$4);
  $$0 = $7;
  return ($$0|0);
 }
 $9 = (_stbi__load_and_postprocess_8bit($0,$1,$2,$3,$4)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  _stbi__err(9680);
  $$0 = 0;
  return ($$0|0);
 }
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$2>>2]|0;
 $13 = ($4|0)==(0);
 if ($13) {
  $14 = HEAP32[$3>>2]|0;
  $15 = $14;
 } else {
  $15 = $4;
 }
 $16 = (_stbi__ldr_to_hdr($9,$11,$12,$15)|0);
 $$0 = $16;
 return ($$0|0);
}
function _stbi__hdr_test($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_stbi__hdr_test_core($0,11286)|0);
 _stbi__rewind($0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = (_stbi__hdr_test_core($0,11298)|0);
 _stbi__rewind($0);
 $$0 = $3;
 return ($$0|0);
}
function _stbi__hdr_load($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0142 = 0, $$014033 = 0, $$014253 = 0, $$014344 = 0, $$014538 = 0, $$0146 = 0, $$0150 = 0, $$114131 = 0, $$1144 = 0, $$1147 = 0, $$1151 = 0, $$2148 = 0, $$2152$be = 0, $$215236 = 0, $$3 = 0, $$314943 = 0, $$315332 = 0, $$430 = 0, $$540 = 0;
 var $$lcssa29 = 0, $$off = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond87 = 0, $exitcond88 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 4|0;
 $8 = sp + 8|0;
 $9 = (_stbi__hdr_gettoken($0,$5)|0);
 $10 = (_strcmp($9,11146)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = (_strcmp($9,11157)|0);
  $13 = ($12|0)==(0);
  if (!($13)) {
   _stbi__err(11164);
   $$3 = 0;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $14 = (_stbi__hdr_gettoken($0,$5)|0);
 HEAP32[$6>>2] = $14;
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(0);
 if (!($16)) {
  $$014253 = 0;$17 = $5;
  while(1) {
   $18 = (_strcmp($17,11172)|0);
   $19 = ($18|0)==(0);
   $$$0142 = $19 ? 1 : $$014253;
   $20 = (_stbi__hdr_gettoken($0,$5)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    break;
   } else {
    $$014253 = $$$0142;$17 = $5;
   }
  }
  HEAP32[$6>>2] = $20;
  $23 = ($$$0142|0)==(0);
  if (!($23)) {
   $24 = (_stbi__hdr_gettoken($0,$5)|0);
   HEAP32[$6>>2] = $24;
   $25 = (_strncmp($24,11214,3)|0);
   $26 = ($25|0)==(0);
   if (!($26)) {
    _stbi__err(11218);
    $$3 = 0;
    STACKTOP = sp;return ($$3|0);
   }
   $27 = ((($5)) + 3|0);
   HEAP32[$6>>2] = $27;
   $28 = (_strtol($27,$6,10)|0);
   $29 = HEAP32[$6>>2]|0;
   $30 = HEAP8[$29>>0]|0;
   $31 = ($30<<24>>24)==(32);
   if ($31) {
    $33 = $29;
    while(1) {
     $32 = ((($33)) + 1|0);
     $34 = HEAP8[$32>>0]|0;
     $35 = ($34<<24>>24)==(32);
     if ($35) {
      $33 = $32;
     } else {
      break;
     }
    }
    HEAP32[$6>>2] = $32;
    $$lcssa29 = $32;
   } else {
    $$lcssa29 = $29;
   }
   $36 = (_strncmp($$lcssa29,11242,3)|0);
   $37 = ($36|0)==(0);
   if (!($37)) {
    _stbi__err(11218);
    $$3 = 0;
    STACKTOP = sp;return ($$3|0);
   }
   $38 = ((($$lcssa29)) + 3|0);
   HEAP32[$6>>2] = $38;
   $39 = (_strtol($38,0,10)|0);
   HEAP32[$1>>2] = $39;
   HEAP32[$2>>2] = $28;
   $40 = ($3|0)==(0|0);
   if (!($40)) {
    HEAP32[$3>>2] = 3;
   }
   $41 = ($4|0)==(0);
   $$ = $41 ? 3 : $4;
   $42 = (_stbi__mad4sizes_valid($39,$28,$$)|0);
   $43 = ($42|0)==(0);
   if ($43) {
    _stbi__err(9904);
    $$3 = 0;
    STACKTOP = sp;return ($$3|0);
   }
   $44 = (_stbi__malloc_mad4($39,$28,$$)|0);
   $45 = ($44|0)==(0|0);
   if ($45) {
    _stbi__err(9699);
    $$3 = 0;
    STACKTOP = sp;return ($$3|0);
   }
   $$off = (($39) + -8)|0;
   $46 = ($$off>>>0)>(32759);
   do {
    if ($46) {
     $$0146 = 0;
     label = 23;
    } else {
     $47 = ($28|0)>(0);
     if ($47) {
      $$014344 = 0;$$314943 = 0;
     } else {
      $$3 = $44;
      STACKTOP = sp;return ($$3|0);
     }
     L39: while(1) {
      $57 = (_stbi__get8($0)|0);
      $58 = (_stbi__get8($0)|0);
      $59 = (_stbi__get8($0)|0);
      $60 = $59&255;
      $notlhs = ($57<<24>>24)==(2);
      $notrhs = ($58<<24>>24)==(2);
      $or$cond3$not = $notlhs & $notrhs;
      $61 = $60 & 128;
      $62 = ($61|0)==(0);
      $or$cond = $or$cond3$not & $62;
      if (!($or$cond)) {
       label = 28;
       break;
      }
      $67 = $60 << 8;
      $68 = (_stbi__get8($0)|0);
      $69 = $68&255;
      $70 = $69 | $67;
      $71 = ($70|0)==($39|0);
      if (!($71)) {
       label = 30;
       break;
      }
      $72 = ($$014344|0)==(0|0);
      if ($72) {
       $73 = (_stbi__malloc_mad2($39,4)|0);
       $74 = ($73|0)==(0|0);
       if ($74) {
        label = 33;
        break;
       } else {
        $$1144 = $73;
       }
      } else {
       $$1144 = $$014344;
      }
      $$014538 = 0;
      while(1) {
       $$215236 = 0;$87 = $39;
       while(1) {
        $82 = (_stbi__get8($0)|0);
        $79 = $82&255;
        $83 = ($82&255)>(128);
        do {
         if ($83) {
          $84 = (_stbi__get8($0)|0);
          $85 = (($79) + 128)|0;
          $77 = $85 & 255;
          $86 = ($77|0)>($87|0);
          if ($86) {
           label = 43;
           break L39;
          }
          $88 = ($77|0)==(0);
          if ($88) {
           $$2152$be = $$215236;
           break;
          } else {
           $$014033 = 0;$$315332 = $$215236;
          }
          while(1) {
           $89 = (($$315332) + 1)|0;
           $90 = $$315332 << 2;
           $91 = (($90) + ($$014538))|0;
           $92 = (($$1144) + ($91)|0);
           HEAP8[$92>>0] = $84;
           $93 = (($$014033) + 1)|0;
           $exitcond87 = ($93|0)==($77|0);
           if ($exitcond87) {
            break;
           } else {
            $$014033 = $93;$$315332 = $89;
           }
          }
          $76 = (($$215236) + ($77))|0;
          $$2152$be = $76;
         } else {
          $94 = ($79|0)>($87|0);
          if ($94) {
           label = 47;
           break L39;
          }
          $95 = ($82<<24>>24)==(0);
          if ($95) {
           $$2152$be = $$215236;
           break;
          } else {
           $$114131 = 0;$$430 = $$215236;
          }
          while(1) {
           $96 = (_stbi__get8($0)|0);
           $97 = (($$430) + 1)|0;
           $98 = $$430 << 2;
           $99 = (($98) + ($$014538))|0;
           $100 = (($$1144) + ($99)|0);
           HEAP8[$100>>0] = $96;
           $101 = (($$114131) + 1)|0;
           $exitcond = ($101|0)==($79|0);
           if ($exitcond) {
            break;
           } else {
            $$114131 = $101;$$430 = $97;
           }
          }
          $78 = (($$215236) + ($79))|0;
          $$2152$be = $78;
         }
        } while(0);
        $80 = (($39) - ($$2152$be))|0;
        $81 = ($80|0)>(0);
        if ($81) {
         $$215236 = $$2152$be;$87 = $80;
        } else {
         break;
        }
       }
       $102 = (($$014538) + 1)|0;
       $103 = ($102|0)<(4);
       if ($103) {
        $$014538 = $102;
       } else {
        break;
       }
      }
      $75 = Math_imul($$314943, $39)|0;
      $$540 = 0;
      while(1) {
       $104 = (($$540) + ($75))|0;
       $105 = Math_imul($104, $$)|0;
       $106 = (($44) + ($105<<2)|0);
       $107 = $$540 << 2;
       $108 = (($$1144) + ($107)|0);
       _stbi__hdr_convert($106,$108,$$);
       $109 = (($$540) + 1)|0;
       $exitcond88 = ($109|0)==($39|0);
       if ($exitcond88) {
        break;
       } else {
        $$540 = $109;
       }
      }
      $110 = (($$314943) + 1)|0;
      $111 = ($110|0)<($28|0);
      if ($111) {
       $$014344 = $$1144;$$314943 = $110;
      } else {
       label = 52;
       break;
      }
     }
     if ((label|0) == 28) {
      HEAP8[$8>>0] = $57;
      $63 = ((($8)) + 1|0);
      HEAP8[$63>>0] = $58;
      $64 = ((($8)) + 2|0);
      HEAP8[$64>>0] = $59;
      $65 = (_stbi__get8($0)|0);
      $66 = ((($8)) + 3|0);
      HEAP8[$66>>0] = $65;
      _stbi__hdr_convert($44,$8,$$);
      _free($$014344);
      $$1151 = 1;$$2148 = 0;
      label = 25;
      break;
     }
     else if ((label|0) == 30) {
      _free($44);
      _free($$014344);
      _stbi__err(11246);
      $$3 = 0;
      STACKTOP = sp;return ($$3|0);
     }
     else if ((label|0) == 33) {
      _free($44);
      _stbi__err(9699);
      $$3 = 0;
      STACKTOP = sp;return ($$3|0);
     }
     else if ((label|0) == 43) {
      _free($44);
      _free($$1144);
      _stbi__err(11278);
      $$3 = 0;
      STACKTOP = sp;return ($$3|0);
     }
     else if ((label|0) == 47) {
      _free($44);
      _free($$1144);
      _stbi__err(11278);
      $$3 = 0;
      STACKTOP = sp;return ($$3|0);
     }
     else if ((label|0) == 52) {
      $112 = ($$1144|0)==(0|0);
      if ($112) {
       $$3 = $44;
       STACKTOP = sp;return ($$3|0);
      }
      _free($$1144);
      $$3 = $44;
      STACKTOP = sp;return ($$3|0);
     }
    }
   } while(0);
   while(1) {
    if ((label|0) == 23) {
     label = 0;
     $48 = ($$0146|0)<($28|0);
     if ($48) {
      $$0150 = 0;$$1147 = $$0146;
     } else {
      $$3 = $44;
      break;
     }
    }
    else if ((label|0) == 25) {
     label = 0;
     (_stbi__getn($0,$7,4)|0);
     $50 = Math_imul($39, $$)|0;
     $51 = Math_imul($50, $$2148)|0;
     $52 = (($44) + ($51<<2)|0);
     $53 = Math_imul($$1151, $$)|0;
     $54 = (($52) + ($53<<2)|0);
     _stbi__hdr_convert($54,$7,$$);
     $55 = (($$1151) + 1)|0;
     $$0150 = $55;$$1147 = $$2148;
    }
    $49 = ($$0150|0)<($39|0);
    if ($49) {
     $$1151 = $$0150;$$2148 = $$1147;
     label = 25;
     continue;
    }
    $56 = (($$1147) + 1)|0;
    $$0146 = $56;
    label = 23;
   }
   STACKTOP = sp;return ($$3|0);
  }
 }
 _stbi__err(11195);
 $$3 = 0;
 STACKTOP = sp;return ($$3|0);
}
function _stbi__float_postprocess($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[84057]|0;
 $6 = ($5|0)!=(0);
 $7 = ($0|0)!=(0|0);
 $or$cond = $7 & $6;
 if (!($or$cond)) {
  return;
 }
 $8 = ($4|0)==(0);
 if ($8) {
  $9 = HEAP32[$3>>2]|0;
  $13 = $9;
 } else {
  $13 = $4;
 }
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = $13 << 2;
 _stbi__vertical_flip($0,$10,$11,$12);
 return;
}
function _stbi__load_and_postprocess_8bit($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (_stbi__load_main($0,$1,$2,$3,$4,$5)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$5>>2]|0;
 switch ($8|0) {
 case 8:  {
  $$023 = $6;
  break;
 }
 case 16:  {
  label = 4;
  break;
 }
 default: {
  ___assert_fail((9708|0),(9734|0),1066,(9757|0));
  // unreachable;
 }
 }
 if ((label|0) == 4) {
  $9 = HEAP32[$1>>2]|0;
  $10 = HEAP32[$2>>2]|0;
  $11 = ($4|0)==(0);
  if ($11) {
   $12 = HEAP32[$3>>2]|0;
   $13 = $12;
  } else {
   $13 = $4;
  }
  $14 = (_stbi__convert_16_to_8($6,$9,$10,$13)|0);
  HEAP32[$5>>2] = 8;
  $$023 = $14;
 }
 $15 = HEAP32[84057]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = $$023;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ($4|0)==(0);
 if ($17) {
  $18 = HEAP32[$3>>2]|0;
  $21 = $18;
 } else {
  $21 = $4;
 }
 $19 = HEAP32[$1>>2]|0;
 $20 = HEAP32[$2>>2]|0;
 _stbi__vertical_flip($$023,$19,$20,$21);
 $$0 = $$023;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__ldr_to_hdr($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$042 = 0, $$043$lcssa = 0, $$04345 = 0, $$04446 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond48 = 0, $sext = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_stbi__malloc_mad4($1,$2,$3)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _free($0);
  _stbi__err(9699);
  $$0 = 0;
  return ($$0|0);
 }
 $7 = $3 & 1;
 $sext = (($3) + -1)|0;
 $$042 = (($sext) + ($7))|0;
 $8 = Math_imul($2, $1)|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = ($$042|0)>(0);
  $11 = +HEAPF32[814];
  $12 = $11;
  $13 = +HEAPF32[815];
  $14 = $13;
  $$04446 = 0;
  while(1) {
   if ($10) {
    $15 = Math_imul($$04446, $3)|0;
    $$04345 = 0;
    while(1) {
     $16 = (($$04345) + ($15))|0;
     $17 = (($0) + ($16)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = (+($18&255));
     $20 = $19 / 255.0;
     $21 = $20;
     $22 = (+Math_pow((+$21),(+$12)));
     $23 = $22 * $14;
     $24 = $23;
     $25 = (($5) + ($16<<2)|0);
     HEAPF32[$25>>2] = $24;
     $26 = (($$04345) + 1)|0;
     $exitcond = ($26|0)==($$042|0);
     if ($exitcond) {
      $$043$lcssa = $$042;
      break;
     } else {
      $$04345 = $26;
     }
    }
   } else {
    $$043$lcssa = 0;
   }
   $27 = ($$043$lcssa|0)<($3|0);
   $28 = Math_imul($$04446, $3)|0;
   $29 = (($$043$lcssa) + ($28))|0;
   if ($27) {
    $30 = (($5) + ($29<<2)|0);
    $31 = (($0) + ($29)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = (+($32&255));
    $34 = $33 / 255.0;
    HEAPF32[$30>>2] = $34;
   }
   $35 = (($$04446) + 1)|0;
   $exitcond48 = ($35|0)==($8|0);
   if ($exitcond48) {
    break;
   } else {
    $$04446 = $35;
   }
  }
 }
 _free($0);
 $$0 = $5;
 return ($$0|0);
}
function _stbi__err($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[84056] = $0;
 return;
}
function _stbi__malloc_mad4($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_stbi__mad4sizes_valid($0,$1,$2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = $0 << 2;
 $6 = Math_imul($5, $1)|0;
 $7 = Math_imul($6, $2)|0;
 $8 = (_stbi__malloc($7)|0);
 $$0 = $8;
 return ($$0|0);
}
function _stbi__mad4sizes_valid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_stbi__mul2sizes_valid($0,$1)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $15 = 0;
 } else {
  $5 = Math_imul($1, $0)|0;
  $6 = (_stbi__mul2sizes_valid($5,$2)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $15 = 0;
  } else {
   $8 = Math_imul($5, $2)|0;
   $9 = (_stbi__mul2sizes_valid($8,4)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $15 = 0;
   } else {
    $11 = $8 << 2;
    $12 = (_stbi__addsizes_valid($11)|0);
    $13 = ($12|0)!=(0);
    $15 = $13;
   }
  }
 }
 $14 = $15&1;
 return ($14|0);
}
function _stbi__malloc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc($0)|0);
 return ($1|0);
}
function _stbi__mul2sizes_valid($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 | $0;
 $3 = ($2|0)<(0);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = ($1|0)==(0);
  if ($4) {
   $$0 = 1;
  } else {
   $5 = (2147483647 / ($1|0))&-1;
   $6 = ($5|0)>=($0|0);
   $7 = $6&1;
   $$0 = $7;
  }
 }
 return ($$0|0);
}
function _stbi__addsizes_valid($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _stbi__load_main($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$5>>2] = 8;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($5)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = (_stbi__png_test($0)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = (_stbi__png_load($0,$1,$2,$3,$4,$5)|0);
  $$0 = $10;
  return ($$0|0);
 }
 $11 = (_stbi__hdr_test($0)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  _stbi__err(9680);
  $$0 = 0;
  return ($$0|0);
 }
 $13 = (_stbi__hdr_load($0,$1,$2,$3,$4)|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$2>>2]|0;
 $16 = ($4|0)==(0);
 if ($16) {
  $17 = HEAP32[$3>>2]|0;
  $18 = $17;
 } else {
  $18 = $4;
 }
 $19 = (_stbi__hdr_to_ldr($13,$14,$15,$18)|0);
 $$0 = $19;
 return ($$0|0);
}
function _stbi__convert_16_to_8($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01819 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = Math_imul($4, $3)|0;
 $6 = (_stbi__malloc($5)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  _stbi__err(9699);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ($5|0)>(0);
 if ($8) {
  $$01819 = 0;
  while(1) {
   $9 = (($0) + ($$01819<<1)|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = ($10&65535) >>> 8;
   $12 = $11&255;
   $13 = (($6) + ($$01819)|0);
   HEAP8[$13>>0] = $12;
   $14 = (($$01819) + 1)|0;
   $exitcond = ($14|0)==($5|0);
   if ($exitcond) {
    break;
   } else {
    $$01819 = $14;
   }
  }
 }
 _free($0);
 $$0 = $6;
 return ($$0|0);
}
function _stbi__vertical_flip($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$04553 = 0, $$04652 = 0, $$04751 = 0, $$054 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2048|0);
 $4 = sp;
 $5 = Math_imul($3, $1)|0;
 $6 = $2 >> 1;
 $7 = ($6|0)>(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($2) + -1)|0;
 $9 = ($5|0)==(0);
 $$054 = 0;
 while(1) {
  if (!($9)) {
   $10 = (($8) - ($$054))|0;
   $11 = Math_imul($10, $5)|0;
   $12 = (($0) + ($11)|0);
   $13 = Math_imul($$054, $5)|0;
   $14 = (($0) + ($13)|0);
   $$04553 = $5;$$04652 = $12;$$04751 = $14;
   while(1) {
    $15 = ($$04553>>>0)<(2048);
    $16 = $15 ? $$04553 : 2048;
    _memcpy(($4|0),($$04751|0),($16|0))|0;
    _memcpy(($$04751|0),($$04652|0),($16|0))|0;
    _memcpy(($$04652|0),($4|0),($16|0))|0;
    $17 = (($$04751) + ($16)|0);
    $18 = (($$04652) + ($16)|0);
    $19 = (($$04553) - ($16))|0;
    $20 = ($19|0)==(0);
    if ($20) {
     break;
    } else {
     $$04553 = $19;$$04652 = $18;$$04751 = $17;
    }
   }
  }
  $21 = (($$054) + 1)|0;
  $exitcond = ($21|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$054 = $21;
  }
 }
 STACKTOP = sp;return;
}
function _stbi__png_test($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_stbi__check_png_header($0)|0);
 _stbi__rewind($0);
 return ($1|0);
}
function _stbi__png_load($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 HEAP32[$6>>2] = $0;
 $7 = (_stbi__do_png($6,$1,$2,$3,$4,$5)|0);
 STACKTOP = sp;return ($7|0);
}
function _stbi__hdr_to_ldr($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0.0, $$052 = 0.0, $$054 = 0, $$055 = 0, $$056$lcssa = 0, $$05658 = 0, $$05759 = 0, $$1 = 0.0, $$153 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0;
 var $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond61 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  $$054 = 0;
  return ($$054|0);
 }
 $5 = (_stbi__malloc_mad3($1,$2,$3)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _free($0);
  _stbi__err(9699);
  $$054 = 0;
  return ($$054|0);
 }
 $7 = $3 & 1;
 $sext = (($3) + -1)|0;
 $$055 = (($sext) + ($7))|0;
 $8 = Math_imul($2, $1)|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = ($$055|0)>(0);
  $11 = +HEAPF32[816];
  $12 = +HEAPF32[817];
  $13 = $12;
  $$05759 = 0;
  while(1) {
   if ($10) {
    $14 = Math_imul($$05759, $3)|0;
    $$05658 = 0;
    while(1) {
     $15 = (($$05658) + ($14))|0;
     $16 = (($0) + ($15<<2)|0);
     $17 = +HEAPF32[$16>>2];
     $18 = $17 * $11;
     $19 = $18;
     $20 = (+Math_pow((+$19),(+$13)));
     $21 = $20;
     $22 = $21 * 255.0;
     $23 = $22 + 0.5;
     $24 = $23 < 0.0;
     $$052 = $24 ? 0.0 : $23;
     $25 = $$052 > 255.0;
     $$153 = $25 ? 255.0 : $$052;
     $26 = (~~(($$153)));
     $27 = $26&255;
     $28 = (($5) + ($15)|0);
     HEAP8[$28>>0] = $27;
     $29 = (($$05658) + 1)|0;
     $exitcond = ($29|0)==($$055|0);
     if ($exitcond) {
      $$056$lcssa = $$055;
      break;
     } else {
      $$05658 = $29;
     }
    }
   } else {
    $$056$lcssa = 0;
   }
   $30 = ($$056$lcssa|0)<($3|0);
   if ($30) {
    $31 = Math_imul($$05759, $3)|0;
    $32 = (($$056$lcssa) + ($31))|0;
    $33 = (($0) + ($32<<2)|0);
    $34 = +HEAPF32[$33>>2];
    $35 = $34 * 255.0;
    $36 = $35 + 0.5;
    $37 = $36 < 0.0;
    $$0 = $37 ? 0.0 : $36;
    $38 = $$0 > 255.0;
    $$1 = $38 ? 255.0 : $$0;
    $39 = (~~(($$1)));
    $40 = $39&255;
    $41 = (($5) + ($32)|0);
    HEAP8[$41>>0] = $40;
   }
   $42 = (($$05759) + 1)|0;
   $exitcond61 = ($42|0)==($8|0);
   if ($exitcond61) {
    break;
   } else {
    $$05759 = $42;
   }
  }
 }
 _free($0);
 $$054 = $5;
 return ($$054|0);
}
function _stbi__malloc_mad3($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_stbi__mad3sizes_valid($0,$1,$2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = Math_imul($1, $0)|0;
 $6 = Math_imul($5, $2)|0;
 $7 = (_stbi__malloc($6)|0);
 $$0 = $7;
 return ($$0|0);
}
function _stbi__mad3sizes_valid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_stbi__mul2sizes_valid($0,$1)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $12 = 0;
 } else {
  $5 = Math_imul($1, $0)|0;
  $6 = (_stbi__mul2sizes_valid($5,$2)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $12 = 0;
  } else {
   $8 = Math_imul($5, $2)|0;
   $9 = (_stbi__addsizes_valid($8)|0);
   $10 = ($9|0)!=(0);
   $12 = $10;
  }
 }
 $11 = $12&1;
 return ($11|0);
}
function _stbi__do_png($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$045 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($4>>>0)>(4);
 if ($6) {
  _stbi__err(9789);
  $$045 = 0;
  return ($$045|0);
 }
 $7 = (_stbi__parse_png_file($0,0,$4)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$2 = 0;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(8);
  $$ = $11 ? $10 : 8;
  HEAP32[$5>>2] = $$;
  $12 = ((($0)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$12>>2] = 0;
  $14 = ($4|0)==(0);
  if ($14) {
   $$1 = $13;
  } else {
   $15 = HEAP32[$0>>2]|0;
   $16 = ((($15)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($4|0);
   if ($18) {
    $$1 = $13;
   } else {
    $19 = HEAP32[$5>>2]|0;
    $20 = ($19|0)==(8);
    $21 = ((($15)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$15>>2]|0;
    if ($20) {
     $24 = (_stbi__convert_format($13,$17,$4,$23,$22)|0);
     $$0 = $24;
    } else {
     $25 = (_stbi__convert_format16($13,$17,$4,$23,$22)|0);
     $$0 = $25;
    }
    $26 = HEAP32[$0>>2]|0;
    $27 = ((($26)) + 12|0);
    HEAP32[$27>>2] = $4;
    $28 = ($$0|0)==(0|0);
    if ($28) {
     $$045 = 0;
     return ($$045|0);
    } else {
     $$1 = $$0;
    }
   }
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$1>>2] = $30;
  $31 = ((($29)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$2>>2] = $32;
  $33 = ($3|0)==(0|0);
  if ($33) {
   $$2 = $$1;
  } else {
   $34 = ((($29)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   HEAP32[$3>>2] = $35;
   $$2 = $$1;
  }
 }
 $36 = ((($0)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 _free($37);
 HEAP32[$36>>2] = 0;
 $38 = ((($0)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 _free($39);
 HEAP32[$38>>2] = 0;
 $40 = ((($0)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 _free($41);
 HEAP32[$40>>2] = 0;
 $$045 = $$2;
 return ($$045|0);
}
function _stbi__parse_png_file($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0219 = 0, $$0208 = 0, $$0213 = 0, $$0216 = 0, $$0219 = 0, $$0228595 = 0, $$0230 = 0, $$0233 = 0, $$0237 = 0, $$0241593 = 0, $$0243 = 0, $$0247 = 0, $$1209 = 0, $$1214 = 0, $$1217 = 0, $$1220 = 0, $$1229590 = 0, $$1231 = 0, $$1242591 = 0;
 var $$1248 = 0, $$2221 = 0, $$2235 = 0, $$2239 = 0, $$2245 = 0, $$256 = 0, $$3211 = 0, $$3222 = 0, $$4 = 0, $$6$ph = 0, $$7 = 0, $$lobit = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond11 = 0, $or$cond250 = 0, $or$cond5$not = 0, $or$cond7 = 0, $switch$split112D = 0, $switch$split142D = 0, $switch$split2D = 0, $switch$split52D = 0, $switch$split82D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $3 = sp + 32|0;
 $4 = sp + 22|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($0)) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = (_stbi__check_png_header($8)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$7 = 0;
  STACKTOP = sp;return ($$7|0);
 }
 $14 = ($1|0)==(1);
 if ($14) {
  $$7 = 1;
  STACKTOP = sp;return ($$7|0);
 }
 $15 = ((($6)) + 4|0);
 $16 = ((($8)) + 4|0);
 $17 = ((($0)) + 16|0);
 $18 = ((($8)) + 8|0);
 $19 = ($1|0)==(2);
 $20 = ((($8)) + 8|0);
 $21 = ((($8)) + 8|0);
 $22 = ((($0)) + 16|0);
 $23 = ($1|0)==(2);
 $24 = ($1|0)==(2);
 $$0208 = 0;$$0213 = 0;$$0216 = 0;$$0219 = 0;$$0230 = 0;$$0233 = 0;$$0237 = 0;$$0243 = 1;$$0247 = 0;
 L7: while(1) {
  _stbi__get_chunk_header($6,$8);
  $25 = HEAP32[$15>>2]|0;
  $switch$split2D = ($25|0)<(1229472850);
  L9: do {
   if ($switch$split2D) {
    $switch$split52D = ($25|0)<(1229209940);
    if ($switch$split52D) {
     switch ($25|0) {
     case 1130840649:  {
      break;
     }
     default: {
      label = 105;
      break L9;
     }
     }
     $26 = HEAP32[$6>>2]|0;
     _stbi__skip($8,$26);
     $$1214 = $$0213;$$1217 = $$0216;$$1231 = 1;$$1248 = $$0247;$$2235 = $$0233;$$2239 = $$0237;$$2245 = $$0243;$$3211 = $$0208;$$3222 = $$0219;
     break;
    }
    $switch$split112D = ($25|0)<(1229278788);
    if (!($switch$split112D)) {
     switch ($25|0) {
     case 1229278788:  {
      label = 85;
      break L7;
      break;
     }
     default: {
      label = 105;
      break L9;
     }
     }
    }
    switch ($25|0) {
    case 1229209940:  {
     break;
    }
    default: {
     label = 105;
     break L9;
    }
    }
    $130 = ($$0243|0)==(0);
    if (!($130)) {
     label = 70;
     break L7;
    }
    $131 = ($$0208<<24>>24)==(0);
    $132 = ($$0247|0)!=(0);
    $or$cond = $132 | $131;
    if (!($or$cond)) {
     label = 72;
     break L7;
    }
    if ($24) {
     label = 74;
     break L7;
    }
    $135 = HEAP32[$6>>2]|0;
    $136 = (($135) + ($$0216))|0;
    $137 = ($136|0)<($$0216|0);
    if ($137) {
     $$6$ph = 0;
     break L7;
    }
    $138 = ($136>>>0)>($$0219>>>0);
    if ($138) {
     $139 = ($$0219|0)==(0);
     $140 = ($135>>>0)>(4096);
     $141 = $140 ? $135 : 4096;
     $$$0219 = $139 ? $141 : $$0219;
     $142 = HEAP32[$6>>2]|0;
     $143 = (($142) + ($$0216))|0;
     $$1220 = $$$0219;
     while(1) {
      $144 = ($143>>>0)>($$1220>>>0);
      $145 = $$1220 << 1;
      if ($144) {
       $$1220 = $145;
      } else {
       break;
      }
     }
     $146 = HEAP32[$10>>2]|0;
     $147 = (_realloc($146,$$1220)|0);
     $148 = ($147|0)==(0|0);
     if ($148) {
      label = 81;
      break L7;
     }
     HEAP32[$10>>2] = $147;
     $$2221 = $$1220;
    } else {
     $$2221 = $$0219;
    }
    $149 = HEAP32[$10>>2]|0;
    $150 = (($149) + ($$0216)|0);
    $151 = HEAP32[$6>>2]|0;
    $152 = (_stbi__getn($8,$150,$151)|0);
    $153 = ($152|0)==(0);
    if ($153) {
     label = 83;
     break L7;
    }
    $154 = HEAP32[$6>>2]|0;
    $155 = (($154) + ($$0216))|0;
    $$1214 = $$0213;$$1217 = $155;$$1231 = $$0230;$$1248 = $$0247;$$2235 = $$0233;$$2239 = $$0237;$$2245 = $$0243;$$3211 = $$0208;$$3222 = $$2221;
   } else {
    $switch$split82D = ($25|0)<(1347179589);
    if ($switch$split82D) {
     switch ($25|0) {
     case 1229472850:  {
      break;
     }
     default: {
      label = 105;
      break L9;
     }
     }
     $27 = ($$0243|0)==(0);
     if ($27) {
      label = 7;
      break L7;
     }
     $28 = HEAP32[$6>>2]|0;
     $29 = ($28|0)==(13);
     if (!($29)) {
      label = 9;
      break L7;
     }
     $30 = (_stbi__get32be($8)|0);
     HEAP32[$8>>2] = $30;
     $31 = ($30>>>0)>(16777216);
     if ($31) {
      label = 11;
      break L7;
     }
     $32 = (_stbi__get32be($8)|0);
     HEAP32[$16>>2] = $32;
     $33 = ($32>>>0)>(16777216);
     if ($33) {
      label = 13;
      break L7;
     }
     $34 = (_stbi__get8($8)|0);
     $35 = $34&255;
     HEAP32[$17>>2] = $35;
     switch ($34<<24>>24) {
     case 16: case 8: case 4: case 2: case 1:  {
      break;
     }
     default: {
      label = 15;
      break L7;
     }
     }
     $36 = (_stbi__get8($8)|0);
     $37 = $36&255;
     $38 = ($36&255)>(6);
     if ($38) {
      label = 17;
      break L7;
     }
     $39 = ($36<<24>>24)==(3);
     if ($39) {
      $40 = HEAP32[$17>>2]|0;
      $41 = ($40|0)==(16);
      if ($41) {
       label = 20;
       break L7;
      } else {
       $$1209 = 3;
      }
     } else {
      $42 = $37 & 1;
      $43 = ($42|0)==(0);
      if ($43) {
       $$1209 = $$0208;
      } else {
       label = 22;
       break L7;
      }
     }
     $44 = (_stbi__get8($8)|0);
     $45 = ($44<<24>>24)==(0);
     if (!($45)) {
      label = 24;
      break L7;
     }
     $46 = (_stbi__get8($8)|0);
     $47 = ($46<<24>>24)==(0);
     if (!($47)) {
      label = 26;
      break L7;
     }
     $48 = (_stbi__get8($8)|0);
     $49 = $48&255;
     $50 = ($48&255)>(1);
     if ($50) {
      label = 28;
      break L7;
     }
     $51 = HEAP32[$8>>2]|0;
     $52 = ($51|0)==(0);
     if ($52) {
      label = 31;
      break L7;
     }
     $53 = HEAP32[$16>>2]|0;
     $54 = ($53|0)==(0);
     if ($54) {
      label = 31;
      break L7;
     }
     $55 = ($$1209<<24>>24)==(0);
     $56 = (1073741824 / ($51>>>0))&-1;
     if (!($55)) {
      HEAP32[$20>>2] = 1;
      $63 = $56 >>> 2;
      $64 = ($63>>>0)<($53>>>0);
      if ($64) {
       label = 37;
       break L7;
      } else {
       $$1214 = $$0213;$$1217 = $$0216;$$1231 = $$0230;$$1248 = $$0247;$$2235 = $37;$$2239 = $49;$$2245 = 0;$$3211 = $$1209;$$3222 = $$0219;
       break;
      }
     }
     $57 = $37 & 2;
     $58 = $57 | 1;
     $59 = $37 >>> 2;
     $$lobit = $59 & 1;
     $60 = (($58) + ($$lobit))|0;
     HEAP32[$18>>2] = $60;
     $61 = (($56>>>0) / ($60>>>0))&-1;
     $62 = ($61>>>0)<($53>>>0);
     if ($62) {
      label = 34;
      break L7;
     }
     if ($19) {
      $$6$ph = 1;
      break L7;
     } else {
      $$1214 = $$0213;$$1217 = $$0216;$$1231 = $$0230;$$1248 = $$0247;$$2235 = $37;$$2239 = $49;$$2245 = 0;$$3211 = 0;$$3222 = $$0219;
      break;
     }
    }
    $switch$split142D = ($25|0)<(1951551059);
    if ($switch$split142D) {
     switch ($25|0) {
     case 1347179589:  {
      break;
     }
     default: {
      label = 105;
      break L9;
     }
     }
     $65 = ($$0243|0)==(0);
     if (!($65)) {
      label = 39;
      break L7;
     }
     $66 = HEAP32[$6>>2]|0;
     $67 = ($66>>>0)>(768);
     if ($67) {
      label = 41;
      break L7;
     }
     $68 = (($66>>>0) / 3)&-1;
     $69 = ($68*3)|0;
     $70 = ($69|0)==($66|0);
     if (!($70)) {
      label = 44;
      break L7;
     }
     $71 = ($66>>>0)>(2);
     if ($71) {
      $$0228595 = 0;
     } else {
      $$1214 = $$0213;$$1217 = $$0216;$$1231 = $$0230;$$1248 = $68;$$2235 = $$0233;$$2239 = $$0237;$$2245 = 0;$$3211 = $$0208;$$3222 = $$0219;
      break;
     }
     while(1) {
      $72 = (_stbi__get8($8)|0);
      $73 = $$0228595 << 2;
      $74 = (($3) + ($73)|0);
      HEAP8[$74>>0] = $72;
      $75 = (_stbi__get8($8)|0);
      $76 = $73 | 1;
      $77 = (($3) + ($76)|0);
      HEAP8[$77>>0] = $75;
      $78 = (_stbi__get8($8)|0);
      $79 = $73 | 2;
      $80 = (($3) + ($79)|0);
      HEAP8[$80>>0] = $78;
      $81 = $73 | 3;
      $82 = (($3) + ($81)|0);
      HEAP8[$82>>0] = -1;
      $83 = (($$0228595) + 1)|0;
      $84 = ($83>>>0)<($68>>>0);
      if ($84) {
       $$0228595 = $83;
      } else {
       $$1214 = $$0213;$$1217 = $$0216;$$1231 = $$0230;$$1248 = $68;$$2235 = $$0233;$$2239 = $$0237;$$2245 = $$0243;$$3211 = $$0208;$$3222 = $$0219;
       break L9;
      }
     }
    }
    switch ($25|0) {
    case 1951551059:  {
     break;
    }
    default: {
     label = 105;
     break L9;
    }
    }
    $85 = ($$0243|0)==(0);
    if (!($85)) {
     label = 47;
     break L7;
    }
    $86 = HEAP32[$10>>2]|0;
    $87 = ($86|0)==(0|0);
    if (!($87)) {
     label = 49;
     break L7;
    }
    $88 = ($$0208<<24>>24)==(0);
    if (!($88)) {
     if ($23) {
      label = 52;
      break L7;
     }
     $90 = ($$0247|0)==(0);
     if ($90) {
      label = 54;
      break L7;
     }
     $91 = HEAP32[$6>>2]|0;
     $92 = ($91>>>0)>($$0247>>>0);
     if ($92) {
      label = 58;
      break L7;
     }
     $93 = HEAP32[$6>>2]|0;
     $94 = ($93|0)==(0);
     if ($94) {
      $$1214 = $$0213;$$1217 = $$0216;$$1231 = $$0230;$$1248 = $$0247;$$2235 = $$0233;$$2239 = $$0237;$$2245 = 0;$$3211 = 4;$$3222 = $$0219;
      break;
     }
     $95 = HEAP32[$6>>2]|0;
     $$1229590 = 0;
     while(1) {
      $96 = (_stbi__get8($8)|0);
      $97 = $$1229590 << 2;
      $98 = $97 | 3;
      $99 = (($3) + ($98)|0);
      HEAP8[$99>>0] = $96;
      $100 = (($$1229590) + 1)|0;
      $101 = ($100>>>0)<($95>>>0);
      if ($101) {
       $$1229590 = $100;
      } else {
       $$1214 = $$0213;$$1217 = $$0216;$$1231 = $$0230;$$1248 = $$0247;$$2235 = $$0233;$$2239 = $$0237;$$2245 = $$0243;$$3211 = 4;$$3222 = $$0219;
       break L9;
      }
     }
    }
    $102 = HEAP32[$21>>2]|0;
    $103 = $102 & 1;
    $104 = ($103|0)==(0);
    if ($104) {
     label = 61;
     break L7;
    }
    $105 = HEAP32[$6>>2]|0;
    $106 = $102 << 1;
    $107 = ($105|0)==($106|0);
    if (!($107)) {
     label = 63;
     break L7;
    }
    $108 = HEAP32[$22>>2]|0;
    $109 = ($108|0)==(16);
    $110 = HEAP32[$21>>2]|0;
    $111 = ($110|0)>(0);
    if ($109) {
     if ($111) {
      $$0241593 = 0;
     } else {
      $$1214 = 1;$$1217 = $$0216;$$1231 = $$0230;$$1248 = $$0247;$$2235 = $$0233;$$2239 = $$0237;$$2245 = 0;$$3211 = 0;$$3222 = $$0219;
      break;
     }
     while(1) {
      $112 = (_stbi__get16be($8)|0);
      $113 = $112&65535;
      $114 = (($5) + ($$0241593<<1)|0);
      HEAP16[$114>>1] = $113;
      $115 = (($$0241593) + 1)|0;
      $116 = HEAP32[$21>>2]|0;
      $117 = ($115|0)<($116|0);
      if ($117) {
       $$0241593 = $115;
      } else {
       $$1214 = 1;$$1217 = $$0216;$$1231 = $$0230;$$1248 = $$0247;$$2235 = $$0233;$$2239 = $$0237;$$2245 = $$0243;$$3211 = $$0208;$$3222 = $$0219;
       break;
      }
     }
    } else {
     if ($111) {
      $$1242591 = 0;
     } else {
      $$1214 = 1;$$1217 = $$0216;$$1231 = $$0230;$$1248 = $$0247;$$2235 = $$0233;$$2239 = $$0237;$$2245 = 0;$$3211 = 0;$$3222 = $$0219;
      break;
     }
     while(1) {
      $118 = (_stbi__get16be($8)|0);
      $119 = $118 & 255;
      $120 = HEAP32[$22>>2]|0;
      $121 = (10103 + ($120)|0);
      $122 = HEAP8[$121>>0]|0;
      $123 = $122&255;
      $124 = Math_imul($123, $119)|0;
      $125 = $124&255;
      $126 = (($4) + ($$1242591)|0);
      HEAP8[$126>>0] = $125;
      $127 = (($$1242591) + 1)|0;
      $128 = HEAP32[$21>>2]|0;
      $129 = ($127|0)<($128|0);
      if ($129) {
       $$1242591 = $127;
      } else {
       $$1214 = 1;$$1217 = $$0216;$$1231 = $$0230;$$1248 = $$0247;$$2235 = $$0233;$$2239 = $$0237;$$2245 = $$0243;$$3211 = $$0208;$$3222 = $$0219;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 105) {
   label = 0;
   $205 = ($$0243|0)==(0);
   if (!($205)) {
    label = 106;
    break;
   }
   $206 = $25 & 536870912;
   $207 = ($206|0)==(0);
   if ($207) {
    label = 108;
    break;
   }
   $216 = HEAP32[$6>>2]|0;
   _stbi__skip($8,$216);
   $$1214 = $$0213;$$1217 = $$0216;$$1231 = $$0230;$$1248 = $$0247;$$2235 = $$0233;$$2239 = $$0237;$$2245 = 0;$$3211 = $$0208;$$3222 = $$0219;
  }
  (_stbi__get32be($8)|0);
  $$0208 = $$3211;$$0213 = $$1214;$$0216 = $$1217;$$0219 = $$3222;$$0230 = $$1231;$$0233 = $$2235;$$0237 = $$2239;$$0243 = $$2245;$$0247 = $$1248;
 }
 switch (label|0) {
  case 7: {
   _stbi__err(9877);
   $$6$ph = 0;
   break;
  }
  case 9: {
   _stbi__err(9891);
   $$6$ph = 0;
   break;
  }
  case 11: {
   _stbi__err(9904);
   $$6$ph = 0;
   break;
  }
  case 13: {
   _stbi__err(9904);
   $$6$ph = 0;
   break;
  }
  case 15: {
   _stbi__err(9914);
   $$6$ph = 0;
   break;
  }
  case 17: {
   _stbi__err(9934);
   $$6$ph = 0;
   break;
  }
  case 20: {
   _stbi__err(9934);
   $$6$ph = 0;
   break;
  }
  case 22: {
   _stbi__err(9934);
   $$6$ph = 0;
   break;
  }
  case 24: {
   _stbi__err(9944);
   $$6$ph = 0;
   break;
  }
  case 26: {
   _stbi__err(9960);
   $$6$ph = 0;
   break;
  }
  case 28: {
   _stbi__err(9978);
   $$6$ph = 0;
   break;
  }
  case 31: {
   _stbi__err(9999);
   $$6$ph = 0;
   break;
  }
  case 34: {
   _stbi__err(9904);
   $$6$ph = 0;
   break;
  }
  case 37: {
   _stbi__err(9904);
   $$6$ph = 0;
   break;
  }
  case 39: {
   _stbi__err(10013);
   $$6$ph = 0;
   break;
  }
  case 41: {
   _stbi__err(10028);
   $$6$ph = 0;
   break;
  }
  case 44: {
   _stbi__err(10028);
   $$6$ph = 0;
   break;
  }
  case 47: {
   _stbi__err(10013);
   $$6$ph = 0;
   break;
  }
  case 49: {
   _stbi__err(10041);
   $$6$ph = 0;
   break;
  }
  case 52: {
   $89 = ((($8)) + 8|0);
   HEAP32[$89>>2] = 4;
   $$6$ph = 1;
   break;
  }
  case 54: {
   _stbi__err(10057);
   $$6$ph = 0;
   break;
  }
  case 58: {
   _stbi__err(10074);
   $$6$ph = 0;
   break;
  }
  case 61: {
   _stbi__err(10087);
   $$6$ph = 0;
   break;
  }
  case 63: {
   _stbi__err(10074);
   $$6$ph = 0;
   break;
  }
  case 70: {
   _stbi__err(10013);
   $$6$ph = 0;
   break;
  }
  case 72: {
   _stbi__err(10112);
   $$6$ph = 0;
   break;
  }
  case 74: {
   $133 = $$0208&255;
   $134 = ((($8)) + 8|0);
   HEAP32[$134>>2] = $133;
   $$6$ph = 1;
   break;
  }
  case 81: {
   _stbi__err(9699);
   $$6$ph = 0;
   break;
  }
  case 83: {
   _stbi__err(10120);
   $$6$ph = 0;
   break;
  }
  case 85: {
   $156 = ($$0243|0)==(0);
   do {
    if ($156) {
     $157 = ($1|0)==(0);
     if ($157) {
      $158 = HEAP32[$10>>2]|0;
      $159 = ($158|0)==(0|0);
      if ($159) {
       _stbi__err(10130);
       $$4 = 0;
       break;
      }
      $160 = HEAP32[$8>>2]|0;
      $161 = ((($0)) + 16|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = Math_imul($162, $160)|0;
      $164 = (($163) + 7)|0;
      $165 = $164 >>> 3;
      $166 = ((($8)) + 4|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ((($8)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = Math_imul($169, $167)|0;
      $171 = Math_imul($170, $165)|0;
      $172 = (($171) + ($167))|0;
      HEAP32[$7>>2] = $172;
      $173 = ($$0230|0)!=(0);
      $174 = $173 ^ 1;
      $175 = $174&1;
      $176 = (_stbi_zlib_decode_malloc_guesssize_headerflag($158,$$0216,$172,$7,$175)|0);
      HEAP32[$9>>2] = $176;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$4 = 0;
      } else {
       $178 = HEAP32[$10>>2]|0;
       _free($178);
       HEAP32[$10>>2] = 0;
       $179 = HEAP32[$168>>2]|0;
       $180 = (($179) + 1)|0;
       $notlhs = ($180|0)!=($2|0);
       $notrhs = ($2|0)==(3);
       $or$cond5$not = $notrhs | $notlhs;
       $181 = ($$0208<<24>>24)!=(0);
       $or$cond7 = $181 | $or$cond5$not;
       $182 = ($$0213<<24>>24)==(0);
       $or$cond250 = $182 & $or$cond7;
       $$256 = $or$cond250 ? $179 : $180;
       $183 = ((($8)) + 12|0);
       HEAP32[$183>>2] = $$256;
       $184 = HEAP32[$9>>2]|0;
       $185 = HEAP32[$7>>2]|0;
       $186 = HEAP32[$161>>2]|0;
       $187 = (_stbi__create_png_image($0,$184,$185,$$256,$186,$$0233,$$0237)|0);
       $188 = ($187|0)==(0);
       if ($188) {
        $$4 = 0;
       } else {
        $189 = ($$0213<<24>>24)!=(0);
        do {
         if ($189) {
          $190 = HEAP32[$161>>2]|0;
          $191 = ($190|0)==(16);
          if ($191) {
           $192 = HEAP32[$183>>2]|0;
           _stbi__compute_transparency16($0,$5,$192);
           break;
          } else {
           $193 = HEAP32[$183>>2]|0;
           _stbi__compute_transparency($0,$4,$193);
           break;
          }
         }
        } while(0);
        $194 = HEAP32[84058]|0;
        $195 = ($194|0)!=(0);
        $or$cond11 = $173 & $195;
        if ($or$cond11) {
         $196 = HEAP32[$183>>2]|0;
         $197 = ($196|0)>(2);
         if ($197) {
          _stbi__de_iphone($0);
         }
        }
        if ($181) {
         $198 = $$0208&255;
         HEAP32[$168>>2] = $198;
         $199 = ($2|0)>(2);
         $$ = $199 ? $2 : $198;
         HEAP32[$183>>2] = $$;
         $200 = (_stbi__expand_png_palette($0,$3,$$)|0);
         $201 = ($200|0)==(0);
         if ($201) {
          $$4 = 0;
          break;
         }
        } else {
         if ($189) {
          $202 = HEAP32[$168>>2]|0;
          $203 = (($202) + 1)|0;
          HEAP32[$168>>2] = $203;
         }
        }
        $204 = HEAP32[$9>>2]|0;
        _free($204);
        HEAP32[$9>>2] = 0;
        $$4 = 1;
       }
      }
     } else {
      $$4 = 1;
     }
    } else {
     _stbi__err(10013);
     $$4 = 0;
    }
   } while(0);
   $$6$ph = $$4;
   break;
  }
  case 106: {
   _stbi__err(10013);
   $$6$ph = 0;
   break;
  }
  case 108: {
   $208 = $25 >>> 24;
   $209 = $208&255;
   HEAP8[10138] = $209;
   $210 = HEAP32[$15>>2]|0;
   $211 = $210 >>> 16;
   $212 = $211&255;
   HEAP8[(10139)>>0] = $212;
   $213 = $210 >>> 8;
   $214 = $213&255;
   HEAP8[(10140)>>0] = $214;
   $215 = $210&255;
   HEAP8[(10141)>>0] = $215;
   _stbi__err(10138);
   $$6$ph = 0;
   break;
  }
 }
 $$7 = $$6$ph;
 STACKTOP = sp;return ($$7|0);
}
function _stbi__convert_format($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0151255 = 0, $$0163 = 0, $$0164259 = 0, $$0165 = 0, $$0165254 = 0, $$0165257 = 0, $$0256 = 0, $$10161205 = 0, $$10175 = 0, $$10175204 = 0, $$10175207 = 0, $$10206 = 0, $$11162201 = 0, $$11176 = 0, $$11176200 = 0, $$11176203 = 0, $$11202 = 0, $$1152250 = 0, $$1166 = 0, $$1166249 = 0;
 var $$1166252 = 0, $$1251 = 0, $$2153245 = 0, $$2167 = 0, $$2167244 = 0, $$2167247 = 0, $$2246 = 0, $$3154240 = 0, $$3168 = 0, $$3168239 = 0, $$3168242 = 0, $$3241 = 0, $$4155235 = 0, $$4169 = 0, $$4169234 = 0, $$4169237 = 0, $$4236 = 0, $$5156230 = 0, $$5170 = 0, $$5170229 = 0;
 var $$5170232 = 0, $$5231 = 0, $$6157225 = 0, $$6171 = 0, $$6171224 = 0, $$6171227 = 0, $$6226 = 0, $$7158220 = 0, $$7172 = 0, $$7172219 = 0, $$7172222 = 0, $$7221 = 0, $$8159215 = 0, $$8173 = 0, $$8173214 = 0, $$8173217 = 0, $$8216 = 0, $$9160210 = 0, $$9174 = 0, $$9174209 = 0;
 var $$9174212 = 0, $$9211 = 0, $$off = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($2|0)==($1|0);
 if ($5) {
  $$0163 = $0;
  return ($$0163|0);
 }
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(4);
 if (!($6)) {
  ___assert_fail((9802|0),(9734|0),1477,(9856|0));
  // unreachable;
 }
 $7 = (_stbi__malloc_mad3($2,$3,$4)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  _free($0);
  _stbi__err(9699);
  $$0163 = 0;
  return ($$0163|0);
 }
 $9 = ($4|0)>(0);
 L11: do {
  if ($9) {
   $10 = $1 << 3;
   $11 = (($10) + ($2))|0;
   $$0165254 = (($3) + -1)|0;
   $12 = ($$0165254|0)>(-1);
   $$1166249 = (($3) + -1)|0;
   $13 = ($$1166249|0)>(-1);
   $$2167244 = (($3) + -1)|0;
   $14 = ($$2167244|0)>(-1);
   $$3168239 = (($3) + -1)|0;
   $15 = ($$3168239|0)>(-1);
   $$4169234 = (($3) + -1)|0;
   $16 = ($$4169234|0)>(-1);
   $$5170229 = (($3) + -1)|0;
   $17 = ($$5170229|0)>(-1);
   $$6171224 = (($3) + -1)|0;
   $18 = ($$6171224|0)>(-1);
   $$7172219 = (($3) + -1)|0;
   $19 = ($$7172219|0)>(-1);
   $$8173214 = (($3) + -1)|0;
   $20 = ($$8173214|0)>(-1);
   $$9174209 = (($3) + -1)|0;
   $21 = ($$9174209|0)>(-1);
   $$10175204 = (($3) + -1)|0;
   $22 = ($$10175204|0)>(-1);
   $$11176200 = (($3) + -1)|0;
   $23 = ($$11176200|0)>(-1);
   $$0164259 = 0;
   L13: while(1) {
    $24 = Math_imul($$0164259, $3)|0;
    $25 = Math_imul($24, $1)|0;
    $26 = (($0) + ($25)|0);
    $27 = Math_imul($24, $2)|0;
    $28 = (($7) + ($27)|0);
    do {
     switch ($11|0) {
     case 10:  {
      if ($12) {
       $$0151255 = $26;$$0165257 = $$0165254;$$0256 = $28;
       while(1) {
        $29 = HEAP8[$$0151255>>0]|0;
        HEAP8[$$0256>>0] = $29;
        $30 = ((($$0256)) + 1|0);
        HEAP8[$30>>0] = -1;
        $31 = ((($$0151255)) + 1|0);
        $32 = ((($$0256)) + 2|0);
        $$0165 = (($$0165257) + -1)|0;
        $33 = ($$0165|0)>(-1);
        if ($33) {
         $$0151255 = $31;$$0165257 = $$0165;$$0256 = $32;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 11:  {
      if ($13) {
       $$1152250 = $26;$$1166252 = $$1166249;$$1251 = $28;
       while(1) {
        $34 = HEAP8[$$1152250>>0]|0;
        $35 = ((($$1251)) + 2|0);
        HEAP8[$35>>0] = $34;
        $36 = ((($$1251)) + 1|0);
        HEAP8[$36>>0] = $34;
        HEAP8[$$1251>>0] = $34;
        $37 = ((($$1152250)) + 1|0);
        $38 = ((($$1251)) + 3|0);
        $$1166 = (($$1166252) + -1)|0;
        $39 = ($$1166|0)>(-1);
        if ($39) {
         $$1152250 = $37;$$1166252 = $$1166;$$1251 = $38;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 12:  {
      if ($14) {
       $$2153245 = $26;$$2167247 = $$2167244;$$2246 = $28;
       while(1) {
        $40 = HEAP8[$$2153245>>0]|0;
        $41 = ((($$2246)) + 2|0);
        HEAP8[$41>>0] = $40;
        $42 = ((($$2246)) + 1|0);
        HEAP8[$42>>0] = $40;
        HEAP8[$$2246>>0] = $40;
        $43 = ((($$2246)) + 3|0);
        HEAP8[$43>>0] = -1;
        $44 = ((($$2153245)) + 1|0);
        $45 = ((($$2246)) + 4|0);
        $$2167 = (($$2167247) + -1)|0;
        $46 = ($$2167|0)>(-1);
        if ($46) {
         $$2153245 = $44;$$2167247 = $$2167;$$2246 = $45;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 17:  {
      if ($15) {
       $$3154240 = $26;$$3168242 = $$3168239;$$3241 = $28;
       while(1) {
        $47 = HEAP8[$$3154240>>0]|0;
        HEAP8[$$3241>>0] = $47;
        $48 = ((($$3154240)) + 2|0);
        $49 = ((($$3241)) + 1|0);
        $$3168 = (($$3168242) + -1)|0;
        $50 = ($$3168|0)>(-1);
        if ($50) {
         $$3154240 = $48;$$3168242 = $$3168;$$3241 = $49;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 19:  {
      if ($16) {
       $$4155235 = $26;$$4169237 = $$4169234;$$4236 = $28;
       while(1) {
        $51 = HEAP8[$$4155235>>0]|0;
        $52 = ((($$4236)) + 2|0);
        HEAP8[$52>>0] = $51;
        $53 = ((($$4236)) + 1|0);
        HEAP8[$53>>0] = $51;
        HEAP8[$$4236>>0] = $51;
        $54 = ((($$4155235)) + 2|0);
        $55 = ((($$4236)) + 3|0);
        $$4169 = (($$4169237) + -1)|0;
        $56 = ($$4169|0)>(-1);
        if ($56) {
         $$4155235 = $54;$$4169237 = $$4169;$$4236 = $55;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 20:  {
      if ($17) {
       $$5156230 = $26;$$5170232 = $$5170229;$$5231 = $28;
       while(1) {
        $57 = HEAP8[$$5156230>>0]|0;
        $58 = ((($$5231)) + 2|0);
        HEAP8[$58>>0] = $57;
        $59 = ((($$5231)) + 1|0);
        HEAP8[$59>>0] = $57;
        HEAP8[$$5231>>0] = $57;
        $60 = ((($$5156230)) + 1|0);
        $61 = HEAP8[$60>>0]|0;
        $62 = ((($$5231)) + 3|0);
        HEAP8[$62>>0] = $61;
        $63 = ((($$5156230)) + 2|0);
        $64 = ((($$5231)) + 4|0);
        $$5170 = (($$5170232) + -1)|0;
        $65 = ($$5170|0)>(-1);
        if ($65) {
         $$5156230 = $63;$$5170232 = $$5170;$$5231 = $64;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 28:  {
      if ($18) {
       $$6157225 = $26;$$6171227 = $$6171224;$$6226 = $28;
       while(1) {
        $66 = HEAP8[$$6157225>>0]|0;
        HEAP8[$$6226>>0] = $66;
        $67 = ((($$6157225)) + 1|0);
        $68 = HEAP8[$67>>0]|0;
        $69 = ((($$6226)) + 1|0);
        HEAP8[$69>>0] = $68;
        $70 = ((($$6157225)) + 2|0);
        $71 = HEAP8[$70>>0]|0;
        $72 = ((($$6226)) + 2|0);
        HEAP8[$72>>0] = $71;
        $73 = ((($$6226)) + 3|0);
        HEAP8[$73>>0] = -1;
        $74 = ((($$6157225)) + 3|0);
        $75 = ((($$6226)) + 4|0);
        $$6171 = (($$6171227) + -1)|0;
        $76 = ($$6171|0)>(-1);
        if ($76) {
         $$6157225 = $74;$$6171227 = $$6171;$$6226 = $75;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 25:  {
      if ($19) {
       $$7158220 = $26;$$7172222 = $$7172219;$$7221 = $28;
       while(1) {
        $77 = HEAP8[$$7158220>>0]|0;
        $78 = $77&255;
        $79 = ((($$7158220)) + 1|0);
        $80 = HEAP8[$79>>0]|0;
        $81 = $80&255;
        $82 = ((($$7158220)) + 2|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $85 = (_stbi__compute_y($78,$81,$84)|0);
        HEAP8[$$7221>>0] = $85;
        $86 = ((($$7158220)) + 3|0);
        $87 = ((($$7221)) + 1|0);
        $$7172 = (($$7172222) + -1)|0;
        $88 = ($$7172|0)>(-1);
        if ($88) {
         $$7158220 = $86;$$7172222 = $$7172;$$7221 = $87;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 26:  {
      if ($20) {
       $$8159215 = $26;$$8173217 = $$8173214;$$8216 = $28;
       while(1) {
        $89 = HEAP8[$$8159215>>0]|0;
        $90 = $89&255;
        $91 = ((($$8159215)) + 1|0);
        $92 = HEAP8[$91>>0]|0;
        $93 = $92&255;
        $94 = ((($$8159215)) + 2|0);
        $95 = HEAP8[$94>>0]|0;
        $96 = $95&255;
        $97 = (_stbi__compute_y($90,$93,$96)|0);
        HEAP8[$$8216>>0] = $97;
        $98 = ((($$8216)) + 1|0);
        HEAP8[$98>>0] = -1;
        $99 = ((($$8159215)) + 3|0);
        $100 = ((($$8216)) + 2|0);
        $$8173 = (($$8173217) + -1)|0;
        $101 = ($$8173|0)>(-1);
        if ($101) {
         $$8159215 = $99;$$8173217 = $$8173;$$8216 = $100;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 33:  {
      if ($21) {
       $$9160210 = $26;$$9174212 = $$9174209;$$9211 = $28;
       while(1) {
        $102 = HEAP8[$$9160210>>0]|0;
        $103 = $102&255;
        $104 = ((($$9160210)) + 1|0);
        $105 = HEAP8[$104>>0]|0;
        $106 = $105&255;
        $107 = ((($$9160210)) + 2|0);
        $108 = HEAP8[$107>>0]|0;
        $109 = $108&255;
        $110 = (_stbi__compute_y($103,$106,$109)|0);
        HEAP8[$$9211>>0] = $110;
        $111 = ((($$9160210)) + 4|0);
        $112 = ((($$9211)) + 1|0);
        $$9174 = (($$9174212) + -1)|0;
        $113 = ($$9174|0)>(-1);
        if ($113) {
         $$9160210 = $111;$$9174212 = $$9174;$$9211 = $112;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 34:  {
      if ($22) {
       $$10161205 = $26;$$10175207 = $$10175204;$$10206 = $28;
       while(1) {
        $114 = HEAP8[$$10161205>>0]|0;
        $115 = $114&255;
        $116 = ((($$10161205)) + 1|0);
        $117 = HEAP8[$116>>0]|0;
        $118 = $117&255;
        $119 = ((($$10161205)) + 2|0);
        $120 = HEAP8[$119>>0]|0;
        $121 = $120&255;
        $122 = (_stbi__compute_y($115,$118,$121)|0);
        HEAP8[$$10206>>0] = $122;
        $123 = ((($$10161205)) + 3|0);
        $124 = HEAP8[$123>>0]|0;
        $125 = ((($$10206)) + 1|0);
        HEAP8[$125>>0] = $124;
        $126 = ((($$10161205)) + 4|0);
        $127 = ((($$10206)) + 2|0);
        $$10175 = (($$10175207) + -1)|0;
        $128 = ($$10175|0)>(-1);
        if ($128) {
         $$10161205 = $126;$$10175207 = $$10175;$$10206 = $127;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 35:  {
      if ($23) {
       $$11162201 = $26;$$11176203 = $$11176200;$$11202 = $28;
       while(1) {
        $129 = HEAP8[$$11162201>>0]|0;
        HEAP8[$$11202>>0] = $129;
        $130 = ((($$11162201)) + 1|0);
        $131 = HEAP8[$130>>0]|0;
        $132 = ((($$11202)) + 1|0);
        HEAP8[$132>>0] = $131;
        $133 = ((($$11162201)) + 2|0);
        $134 = HEAP8[$133>>0]|0;
        $135 = ((($$11202)) + 2|0);
        HEAP8[$135>>0] = $134;
        $136 = ((($$11162201)) + 4|0);
        $137 = ((($$11202)) + 3|0);
        $$11176 = (($$11176203) + -1)|0;
        $138 = ($$11176|0)>(-1);
        if ($138) {
         $$11162201 = $136;$$11176203 = $$11176;$$11202 = $137;
        } else {
         break;
        }
       }
      }
      break;
     }
     default: {
      break L13;
     }
     }
    } while(0);
    $139 = (($$0164259) + 1)|0;
    $140 = ($139|0)<($4|0);
    if ($140) {
     $$0164259 = $139;
    } else {
     break L11;
    }
   }
   ___assert_fail((13995|0),(9734|0),1506,(9856|0));
   // unreachable;
  }
 } while(0);
 _free($0);
 $$0163 = $7;
 return ($$0163|0);
}
function _stbi__convert_format16($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0151255 = 0, $$0163 = 0, $$0164259 = 0, $$0165 = 0, $$0165254 = 0, $$0165257 = 0, $$0256 = 0, $$10161205 = 0, $$10175 = 0, $$10175204 = 0, $$10175207 = 0, $$10206 = 0, $$11162201 = 0, $$11176 = 0, $$11176200 = 0, $$11176203 = 0, $$11202 = 0, $$1152250 = 0, $$1166 = 0, $$1166249 = 0;
 var $$1166252 = 0, $$1251 = 0, $$2153245 = 0, $$2167 = 0, $$2167244 = 0, $$2167247 = 0, $$2246 = 0, $$3154240 = 0, $$3168 = 0, $$3168239 = 0, $$3168242 = 0, $$3241 = 0, $$4155235 = 0, $$4169 = 0, $$4169234 = 0, $$4169237 = 0, $$4236 = 0, $$5156230 = 0, $$5170 = 0, $$5170229 = 0;
 var $$5170232 = 0, $$5231 = 0, $$6157225 = 0, $$6171 = 0, $$6171224 = 0, $$6171227 = 0, $$6226 = 0, $$7158220 = 0, $$7172 = 0, $$7172219 = 0, $$7172222 = 0, $$7221 = 0, $$8159215 = 0, $$8173 = 0, $$8173214 = 0, $$8173217 = 0, $$8216 = 0, $$9160210 = 0, $$9174 = 0, $$9174209 = 0;
 var $$9174212 = 0, $$9211 = 0, $$off = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($2|0)==($1|0);
 if ($5) {
  $$0163 = $0;
  return ($$0163|0);
 }
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(4);
 if (!($6)) {
  ___assert_fail((9802|0),(9734|0),1526,(9833|0));
  // unreachable;
 }
 $7 = $2 << 1;
 $8 = Math_imul($7, $3)|0;
 $9 = Math_imul($8, $4)|0;
 $10 = (_stbi__malloc($9)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  _free($0);
  _stbi__err(9699);
  $$0163 = 0;
  return ($$0163|0);
 }
 $12 = ($4|0)>(0);
 L11: do {
  if ($12) {
   $13 = $1 << 3;
   $14 = (($13) + ($2))|0;
   $$0165254 = (($3) + -1)|0;
   $15 = ($$0165254|0)>(-1);
   $$1166249 = (($3) + -1)|0;
   $16 = ($$1166249|0)>(-1);
   $$2167244 = (($3) + -1)|0;
   $17 = ($$2167244|0)>(-1);
   $$3168239 = (($3) + -1)|0;
   $18 = ($$3168239|0)>(-1);
   $$4169234 = (($3) + -1)|0;
   $19 = ($$4169234|0)>(-1);
   $$5170229 = (($3) + -1)|0;
   $20 = ($$5170229|0)>(-1);
   $$6171224 = (($3) + -1)|0;
   $21 = ($$6171224|0)>(-1);
   $$7172219 = (($3) + -1)|0;
   $22 = ($$7172219|0)>(-1);
   $$8173214 = (($3) + -1)|0;
   $23 = ($$8173214|0)>(-1);
   $$9174209 = (($3) + -1)|0;
   $24 = ($$9174209|0)>(-1);
   $$10175204 = (($3) + -1)|0;
   $25 = ($$10175204|0)>(-1);
   $$11176200 = (($3) + -1)|0;
   $26 = ($$11176200|0)>(-1);
   $$0164259 = 0;
   L13: while(1) {
    $27 = Math_imul($$0164259, $3)|0;
    $28 = Math_imul($27, $1)|0;
    $29 = (($0) + ($28<<1)|0);
    $30 = Math_imul($27, $2)|0;
    $31 = (($10) + ($30<<1)|0);
    do {
     switch ($14|0) {
     case 10:  {
      if ($15) {
       $$0151255 = $29;$$0165257 = $$0165254;$$0256 = $31;
       while(1) {
        $32 = HEAP16[$$0151255>>1]|0;
        HEAP16[$$0256>>1] = $32;
        $33 = ((($$0256)) + 2|0);
        HEAP16[$33>>1] = -1;
        $34 = ((($$0151255)) + 2|0);
        $35 = ((($$0256)) + 4|0);
        $$0165 = (($$0165257) + -1)|0;
        $36 = ($$0165|0)>(-1);
        if ($36) {
         $$0151255 = $34;$$0165257 = $$0165;$$0256 = $35;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 11:  {
      if ($16) {
       $$1152250 = $29;$$1166252 = $$1166249;$$1251 = $31;
       while(1) {
        $37 = HEAP16[$$1152250>>1]|0;
        $38 = ((($$1251)) + 4|0);
        HEAP16[$38>>1] = $37;
        $39 = ((($$1251)) + 2|0);
        HEAP16[$39>>1] = $37;
        HEAP16[$$1251>>1] = $37;
        $40 = ((($$1152250)) + 2|0);
        $41 = ((($$1251)) + 6|0);
        $$1166 = (($$1166252) + -1)|0;
        $42 = ($$1166|0)>(-1);
        if ($42) {
         $$1152250 = $40;$$1166252 = $$1166;$$1251 = $41;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 12:  {
      if ($17) {
       $$2153245 = $29;$$2167247 = $$2167244;$$2246 = $31;
       while(1) {
        $43 = HEAP16[$$2153245>>1]|0;
        $44 = ((($$2246)) + 4|0);
        HEAP16[$44>>1] = $43;
        $45 = ((($$2246)) + 2|0);
        HEAP16[$45>>1] = $43;
        HEAP16[$$2246>>1] = $43;
        $46 = ((($$2246)) + 6|0);
        HEAP16[$46>>1] = -1;
        $47 = ((($$2153245)) + 2|0);
        $48 = ((($$2246)) + 8|0);
        $$2167 = (($$2167247) + -1)|0;
        $49 = ($$2167|0)>(-1);
        if ($49) {
         $$2153245 = $47;$$2167247 = $$2167;$$2246 = $48;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 17:  {
      if ($18) {
       $$3154240 = $29;$$3168242 = $$3168239;$$3241 = $31;
       while(1) {
        $50 = HEAP16[$$3154240>>1]|0;
        HEAP16[$$3241>>1] = $50;
        $51 = ((($$3154240)) + 4|0);
        $52 = ((($$3241)) + 2|0);
        $$3168 = (($$3168242) + -1)|0;
        $53 = ($$3168|0)>(-1);
        if ($53) {
         $$3154240 = $51;$$3168242 = $$3168;$$3241 = $52;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 19:  {
      if ($19) {
       $$4155235 = $29;$$4169237 = $$4169234;$$4236 = $31;
       while(1) {
        $54 = HEAP16[$$4155235>>1]|0;
        $55 = ((($$4236)) + 4|0);
        HEAP16[$55>>1] = $54;
        $56 = ((($$4236)) + 2|0);
        HEAP16[$56>>1] = $54;
        HEAP16[$$4236>>1] = $54;
        $57 = ((($$4155235)) + 4|0);
        $58 = ((($$4236)) + 6|0);
        $$4169 = (($$4169237) + -1)|0;
        $59 = ($$4169|0)>(-1);
        if ($59) {
         $$4155235 = $57;$$4169237 = $$4169;$$4236 = $58;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 20:  {
      if ($20) {
       $$5156230 = $29;$$5170232 = $$5170229;$$5231 = $31;
       while(1) {
        $60 = HEAP16[$$5156230>>1]|0;
        $61 = ((($$5231)) + 4|0);
        HEAP16[$61>>1] = $60;
        $62 = ((($$5231)) + 2|0);
        HEAP16[$62>>1] = $60;
        HEAP16[$$5231>>1] = $60;
        $63 = ((($$5156230)) + 2|0);
        $64 = HEAP16[$63>>1]|0;
        $65 = ((($$5231)) + 6|0);
        HEAP16[$65>>1] = $64;
        $66 = ((($$5156230)) + 4|0);
        $67 = ((($$5231)) + 8|0);
        $$5170 = (($$5170232) + -1)|0;
        $68 = ($$5170|0)>(-1);
        if ($68) {
         $$5156230 = $66;$$5170232 = $$5170;$$5231 = $67;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 28:  {
      if ($21) {
       $$6157225 = $29;$$6171227 = $$6171224;$$6226 = $31;
       while(1) {
        $69 = HEAP16[$$6157225>>1]|0;
        HEAP16[$$6226>>1] = $69;
        $70 = ((($$6157225)) + 2|0);
        $71 = HEAP16[$70>>1]|0;
        $72 = ((($$6226)) + 2|0);
        HEAP16[$72>>1] = $71;
        $73 = ((($$6157225)) + 4|0);
        $74 = HEAP16[$73>>1]|0;
        $75 = ((($$6226)) + 4|0);
        HEAP16[$75>>1] = $74;
        $76 = ((($$6226)) + 6|0);
        HEAP16[$76>>1] = -1;
        $77 = ((($$6157225)) + 6|0);
        $78 = ((($$6226)) + 8|0);
        $$6171 = (($$6171227) + -1)|0;
        $79 = ($$6171|0)>(-1);
        if ($79) {
         $$6157225 = $77;$$6171227 = $$6171;$$6226 = $78;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 25:  {
      if ($22) {
       $$7158220 = $29;$$7172222 = $$7172219;$$7221 = $31;
       while(1) {
        $80 = HEAP16[$$7158220>>1]|0;
        $81 = $80&65535;
        $82 = ((($$7158220)) + 2|0);
        $83 = HEAP16[$82>>1]|0;
        $84 = $83&65535;
        $85 = ((($$7158220)) + 4|0);
        $86 = HEAP16[$85>>1]|0;
        $87 = $86&65535;
        $88 = (_stbi__compute_y_16($81,$84,$87)|0);
        HEAP16[$$7221>>1] = $88;
        $89 = ((($$7158220)) + 6|0);
        $90 = ((($$7221)) + 2|0);
        $$7172 = (($$7172222) + -1)|0;
        $91 = ($$7172|0)>(-1);
        if ($91) {
         $$7158220 = $89;$$7172222 = $$7172;$$7221 = $90;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 26:  {
      if ($23) {
       $$8159215 = $29;$$8173217 = $$8173214;$$8216 = $31;
       while(1) {
        $92 = HEAP16[$$8159215>>1]|0;
        $93 = $92&65535;
        $94 = ((($$8159215)) + 2|0);
        $95 = HEAP16[$94>>1]|0;
        $96 = $95&65535;
        $97 = ((($$8159215)) + 4|0);
        $98 = HEAP16[$97>>1]|0;
        $99 = $98&65535;
        $100 = (_stbi__compute_y_16($93,$96,$99)|0);
        HEAP16[$$8216>>1] = $100;
        $101 = ((($$8216)) + 2|0);
        HEAP16[$101>>1] = -1;
        $102 = ((($$8159215)) + 6|0);
        $103 = ((($$8216)) + 4|0);
        $$8173 = (($$8173217) + -1)|0;
        $104 = ($$8173|0)>(-1);
        if ($104) {
         $$8159215 = $102;$$8173217 = $$8173;$$8216 = $103;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 33:  {
      if ($24) {
       $$9160210 = $29;$$9174212 = $$9174209;$$9211 = $31;
       while(1) {
        $105 = HEAP16[$$9160210>>1]|0;
        $106 = $105&65535;
        $107 = ((($$9160210)) + 2|0);
        $108 = HEAP16[$107>>1]|0;
        $109 = $108&65535;
        $110 = ((($$9160210)) + 4|0);
        $111 = HEAP16[$110>>1]|0;
        $112 = $111&65535;
        $113 = (_stbi__compute_y_16($106,$109,$112)|0);
        HEAP16[$$9211>>1] = $113;
        $114 = ((($$9160210)) + 8|0);
        $115 = ((($$9211)) + 2|0);
        $$9174 = (($$9174212) + -1)|0;
        $116 = ($$9174|0)>(-1);
        if ($116) {
         $$9160210 = $114;$$9174212 = $$9174;$$9211 = $115;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 34:  {
      if ($25) {
       $$10161205 = $29;$$10175207 = $$10175204;$$10206 = $31;
       while(1) {
        $117 = HEAP16[$$10161205>>1]|0;
        $118 = $117&65535;
        $119 = ((($$10161205)) + 2|0);
        $120 = HEAP16[$119>>1]|0;
        $121 = $120&65535;
        $122 = ((($$10161205)) + 4|0);
        $123 = HEAP16[$122>>1]|0;
        $124 = $123&65535;
        $125 = (_stbi__compute_y_16($118,$121,$124)|0);
        HEAP16[$$10206>>1] = $125;
        $126 = ((($$10161205)) + 6|0);
        $127 = HEAP16[$126>>1]|0;
        $128 = ((($$10206)) + 2|0);
        HEAP16[$128>>1] = $127;
        $129 = ((($$10161205)) + 8|0);
        $130 = ((($$10206)) + 4|0);
        $$10175 = (($$10175207) + -1)|0;
        $131 = ($$10175|0)>(-1);
        if ($131) {
         $$10161205 = $129;$$10175207 = $$10175;$$10206 = $130;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 35:  {
      if ($26) {
       $$11162201 = $29;$$11176203 = $$11176200;$$11202 = $31;
       while(1) {
        $132 = HEAP16[$$11162201>>1]|0;
        HEAP16[$$11202>>1] = $132;
        $133 = ((($$11162201)) + 2|0);
        $134 = HEAP16[$133>>1]|0;
        $135 = ((($$11202)) + 2|0);
        HEAP16[$135>>1] = $134;
        $136 = ((($$11162201)) + 4|0);
        $137 = HEAP16[$136>>1]|0;
        $138 = ((($$11202)) + 4|0);
        HEAP16[$138>>1] = $137;
        $139 = ((($$11162201)) + 8|0);
        $140 = ((($$11202)) + 6|0);
        $$11176 = (($$11176203) + -1)|0;
        $141 = ($$11176|0)>(-1);
        if ($141) {
         $$11162201 = $139;$$11176203 = $$11176;$$11202 = $140;
        } else {
         break;
        }
       }
      }
      break;
     }
     default: {
      break L13;
     }
     }
    } while(0);
    $142 = (($$0164259) + 1)|0;
    $143 = ($142|0)<($4|0);
    if ($143) {
     $$0164259 = $142;
    } else {
     break L11;
    }
   }
   ___assert_fail((13995|0),(9734|0),1555,(9833|0));
   // unreachable;
  }
 } while(0);
 _free($0);
 $$0163 = $10;
 return ($$0163|0);
}
function _stbi__compute_y_16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0*77)|0;
 $4 = ($1*150)|0;
 $5 = (($4) + ($3))|0;
 $6 = ($2*29)|0;
 $7 = (($5) + ($6))|0;
 $8 = $7 >>> 8;
 $9 = $8&65535;
 return ($9|0);
}
function _stbi__compute_y($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0*77)|0;
 $4 = ($1*150)|0;
 $5 = (($4) + ($3))|0;
 $6 = ($2*29)|0;
 $7 = (($5) + ($6))|0;
 $8 = $7 >>> 8;
 $9 = $8&255;
 return ($9|0);
}
function _stbi__check_png_header($0) {
 $0 = $0|0;
 var $$05 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_stbi__get8($0)|0);
 $2 = ($1<<24>>24)==(-119);
 if ($2) {
  $3 = (_stbi__get8($0)|0);
  $4 = ($3<<24>>24)==(80);
  if ($4) {
   $5 = (_stbi__get8($0)|0);
   $6 = ($5<<24>>24)==(78);
   if ($6) {
    $7 = (_stbi__get8($0)|0);
    $8 = ($7<<24>>24)==(71);
    if ($8) {
     $9 = (_stbi__get8($0)|0);
     $10 = ($9<<24>>24)==(13);
     if ($10) {
      $11 = (_stbi__get8($0)|0);
      $12 = ($11<<24>>24)==(10);
      if ($12) {
       $13 = (_stbi__get8($0)|0);
       $14 = ($13<<24>>24)==(26);
       if ($14) {
        $15 = (_stbi__get8($0)|0);
        $16 = ($15<<24>>24)==(10);
        if ($16) {
         $$05 = 1;
         return ($$05|0);
        }
       }
      }
     }
    }
   }
  }
 }
 _stbi__err(11134);
 $$05 = 0;
 return ($$05|0);
}
function _stbi__get_chunk_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$4$0$$sroa_idx2 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_stbi__get32be($1)|0);
 $3 = (_stbi__get32be($1)|0);
 HEAP32[$0>>2] = $2;
 $$sroa$4$0$$sroa_idx2 = ((($0)) + 4|0);
 HEAP32[$$sroa$4$0$$sroa_idx2>>2] = $3;
 return;
}
function _stbi__skip($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)<(0);
 if ($2) {
  $3 = ((($0)) + 172|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($0)) + 168|0);
  HEAP32[$5>>2] = $4;
  return;
 }
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = ((($0)) + 172|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 168|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $10;
  $14 = (($13) - ($12))|0;
  $15 = ($14|0)<($1|0);
  if ($15) {
   HEAP32[$11>>2] = $10;
   $16 = ((($0)) + 20|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($0)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($1) - ($14))|0;
   FUNCTION_TABLE_vii[$17 & 63]($19,$20);
   return;
  }
 }
 $21 = ((($0)) + 168|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($1)|0);
 HEAP32[$21>>2] = $23;
 return;
}
function _stbi__get32be($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_stbi__get16be($0)|0);
 $2 = $1 << 16;
 $3 = (_stbi__get16be($0)|0);
 $4 = (($2) + ($3))|0;
 return ($4|0);
}
function _stbi__get8($0) {
 $0 = $0|0;
 var $$0 = 0, $$sink6 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 168|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 172|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 do {
  if ($5) {
   $$sink6 = $2;
  } else {
   $6 = ((($0)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   if ($8) {
    $$0 = 0;
    return ($$0|0);
   } else {
    _stbi__refill_buffer($0);
    $9 = HEAP32[$1>>2]|0;
    $$sink6 = $9;
    break;
   }
  }
 } while(0);
 $10 = ((($$sink6)) + 1|0);
 HEAP32[$1>>2] = $10;
 $11 = HEAP8[$$sink6>>0]|0;
 $$0 = $11;
 return ($$0|0);
}
function _stbi__get16be($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_stbi__get8($0)|0);
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = (_stbi__get8($0)|0);
 $5 = $4&255;
 $6 = $3 | $5;
 return ($6|0);
}
function _stbi__getn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($0)) + 172|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 168|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9;
  $11 = (($7) - ($10))|0;
  $12 = ($11|0)<($2|0);
  if ($12) {
   _memcpy(($1|0),($9|0),($11|0))|0;
   $13 = HEAP32[$3>>2]|0;
   $14 = ((($0)) + 28|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($1) + ($11)|0);
   $17 = (($2) - ($11))|0;
   $18 = (FUNCTION_TABLE_iiii[$13 & 15]($15,$16,$17)|0);
   $19 = ($18|0)==($17|0);
   $20 = $19&1;
   $21 = HEAP32[$6>>2]|0;
   HEAP32[$8>>2] = $21;
   $$1 = $20;
   return ($$1|0);
  }
 }
 $22 = ((($0)) + 168|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($2)|0);
 $25 = ((($0)) + 172|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($24>>>0)>($26>>>0);
 if ($27) {
  $$1 = 0;
  return ($$1|0);
 }
 _memcpy(($1|0),($23|0),($2|0))|0;
 $28 = HEAP32[$22>>2]|0;
 $29 = (($28) + ($2)|0);
 HEAP32[$22>>2] = $29;
 $$1 = 1;
 return ($$1|0);
}
function _stbi_zlib_decode_malloc_guesssize_headerflag($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4080|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4080|0);
 $5 = sp;
 $6 = (_stbi__malloc($2)|0);
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $$0 = 0;
  } else {
   HEAP32[$5>>2] = $0;
   $8 = (($0) + ($1)|0);
   $9 = ((($5)) + 4|0);
   HEAP32[$9>>2] = $8;
   $10 = (_stbi__do_zlib($5,$6,$2,1,$4)|0);
   $11 = ($10|0)==(0);
   $12 = ((($5)) + 20|0);
   $13 = HEAP32[$12>>2]|0;
   if ($11) {
    _free($13);
    $$0 = 0;
    break;
   }
   $14 = ($3|0)==(0|0);
   if ($14) {
    $$0 = $13;
   } else {
    $15 = ((($5)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $13;
    $18 = (($16) - ($17))|0;
    HEAP32[$3>>2] = $18;
    $$0 = $13;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _stbi__create_png_image($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0103117 = 0, $$0106116 = 0, $$0107115 = 0, $$095119 = 0, $$099118 = 0, $$3102$ph = 0, $$398$ph = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ($4|0)==(16);
 $8 = $7 ? 2 : 1;
 $9 = Math_imul($8, $3)|0;
 $10 = ($6|0)==(0);
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($11)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 if ($10) {
  $15 = (_stbi__create_png_image_raw($0,$1,$2,$3,$12,$14,$4,$5)|0);
  $$4 = $15;
  return ($$4|0);
 }
 $16 = (_stbi__malloc_mad3($12,$14,$9)|0);
 $17 = ((($0)) + 12|0);
 $18 = ((($0)) + 12|0);
 $$0103117 = 0;$$095119 = $1;$$099118 = $2;
 while(1) {
  $19 = HEAP32[$0>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = (3272 + ($$0103117<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (3300 + ($$0103117<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($20) + -1)|0;
  $26 = (($25) - ($22))|0;
  $27 = (($26) + ($24))|0;
  $28 = (($27>>>0) / ($24>>>0))&-1;
  $29 = ((($19)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (3328 + ($$0103117<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (3356 + ($$0103117<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($30) + -1)|0;
  $36 = (($35) - ($32))|0;
  $37 = (($36) + ($34))|0;
  $38 = (($37>>>0) / ($34>>>0))&-1;
  $39 = ($24>>>0)<=($27>>>0);
  $40 = ($34>>>0)<=($37>>>0);
  $or$cond = $39 & $40;
  if ($or$cond) {
   $41 = ((($19)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = Math_imul($28, $4)|0;
   $44 = Math_imul($43, $42)|0;
   $45 = (($44) + 7)|0;
   $46 = $45 >> 3;
   $47 = (($46) + 1)|0;
   $48 = Math_imul($47, $38)|0;
   $49 = (_stbi__create_png_image_raw($0,$$095119,$$099118,$3,$28,$38,$4,$5)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    label = 13;
    break;
   }
   $51 = ($38|0)>(0);
   if ($51) {
    $52 = ($28|0)>(0);
    $$0106116 = 0;
    while(1) {
     if ($52) {
      $53 = HEAP32[$33>>2]|0;
      $54 = Math_imul($53, $$0106116)|0;
      $55 = HEAP32[$31>>2]|0;
      $56 = (($54) + ($55))|0;
      $57 = HEAP32[$23>>2]|0;
      $58 = HEAP32[$21>>2]|0;
      $59 = Math_imul($56, $9)|0;
      $60 = Math_imul($$0106116, $28)|0;
      $$0107115 = 0;
      while(1) {
       $61 = Math_imul($57, $$0107115)|0;
       $62 = (($61) + ($58))|0;
       $63 = HEAP32[$0>>2]|0;
       $64 = HEAP32[$63>>2]|0;
       $65 = Math_imul($59, $64)|0;
       $66 = (($16) + ($65)|0);
       $67 = Math_imul($62, $9)|0;
       $68 = (($66) + ($67)|0);
       $69 = HEAP32[$18>>2]|0;
       $70 = (($$0107115) + ($60))|0;
       $71 = Math_imul($70, $9)|0;
       $72 = (($69) + ($71)|0);
       _memcpy(($68|0),($72|0),($9|0))|0;
       $73 = (($$0107115) + 1)|0;
       $74 = ($73|0)<($28|0);
       if ($74) {
        $$0107115 = $73;
       } else {
        break;
       }
      }
     }
     $75 = (($$0106116) + 1)|0;
     $76 = ($75|0)<($38|0);
     if ($76) {
      $$0106116 = $75;
     } else {
      break;
     }
    }
   }
   $77 = HEAP32[$17>>2]|0;
   _free($77);
   $78 = (($$095119) + ($48)|0);
   $79 = (($$099118) - ($48))|0;
   $$3102$ph = $79;$$398$ph = $78;
  } else {
   $$3102$ph = $$099118;$$398$ph = $$095119;
  }
  $80 = (($$0103117) + 1)|0;
  $81 = ($80|0)<(7);
  if ($81) {
   $$0103117 = $80;$$095119 = $$398$ph;$$099118 = $$3102$ph;
  } else {
   label = 15;
   break;
  }
 }
 if ((label|0) == 13) {
  _free($16);
  $$4 = 0;
  return ($$4|0);
 }
 else if ((label|0) == 15) {
  $82 = ((($0)) + 12|0);
  HEAP32[$82>>2] = $16;
  $$4 = 1;
  return ($$4|0);
 }
 return (0)|0;
}
function _stbi__compute_transparency16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0323 = 0, $$04 = 0, $$1335 = 0, $$16 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($6, $4)|0;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 switch ($2|0) {
 case 2:  {
  $13 = ($7|0)==(0);
  if ($13) {
   return;
  } else {
   $$0323 = 0;$$04 = $9;
  }
  while(1) {
   $14 = HEAP16[$$04>>1]|0;
   $15 = HEAP16[$1>>1]|0;
   $not$ = ($14<<16>>16)!=($15<<16>>16);
   $16 = $not$ << 31 >> 31;
   $17 = ((($$04)) + 2|0);
   HEAP16[$17>>1] = $16;
   $18 = ((($$04)) + 4|0);
   $19 = (($$0323) + 1)|0;
   $exitcond = ($19|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $$0323 = $19;$$04 = $18;
   }
  }
  return;
  break;
 }
 case 4:  {
  $10 = ($7|0)==(0);
  if ($10) {
   return;
  }
  $11 = ((($1)) + 2|0);
  $12 = ((($1)) + 4|0);
  $$1335 = 0;$$16 = $9;
  while(1) {
   $20 = HEAP16[$$16>>1]|0;
   $21 = HEAP16[$1>>1]|0;
   $22 = ($20<<16>>16)==($21<<16>>16);
   if ($22) {
    $23 = ((($$16)) + 2|0);
    $24 = HEAP16[$23>>1]|0;
    $25 = HEAP16[$11>>1]|0;
    $26 = ($24<<16>>16)==($25<<16>>16);
    if ($26) {
     $27 = ((($$16)) + 4|0);
     $28 = HEAP16[$27>>1]|0;
     $29 = HEAP16[$12>>1]|0;
     $30 = ($28<<16>>16)==($29<<16>>16);
     if ($30) {
      $31 = ((($$16)) + 6|0);
      HEAP16[$31>>1] = 0;
     }
    }
   }
   $32 = ((($$16)) + 8|0);
   $33 = (($$1335) + 1)|0;
   $exitcond9 = ($33|0)==($7|0);
   if ($exitcond9) {
    break;
   } else {
    $$1335 = $33;$$16 = $32;
   }
  }
  return;
  break;
 }
 default: {
  ___assert_fail((10197|0),(9734|0),4568,(10249|0));
  // unreachable;
 }
 }
}
function _stbi__compute_transparency($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0323 = 0, $$04 = 0, $$1335 = 0, $$16 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($6, $4)|0;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 switch ($2|0) {
 case 2:  {
  $13 = ($7|0)==(0);
  if ($13) {
   return;
  } else {
   $$0323 = 0;$$04 = $9;
  }
  while(1) {
   $14 = HEAP8[$$04>>0]|0;
   $15 = HEAP8[$1>>0]|0;
   $not$ = ($14<<24>>24)!=($15<<24>>24);
   $16 = $not$ << 31 >> 31;
   $17 = ((($$04)) + 1|0);
   HEAP8[$17>>0] = $16;
   $18 = ((($$04)) + 2|0);
   $19 = (($$0323) + 1)|0;
   $exitcond = ($19|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $$0323 = $19;$$04 = $18;
   }
  }
  return;
  break;
 }
 case 4:  {
  $10 = ($7|0)==(0);
  if ($10) {
   return;
  }
  $11 = ((($1)) + 1|0);
  $12 = ((($1)) + 2|0);
  $$1335 = 0;$$16 = $9;
  while(1) {
   $20 = HEAP8[$$16>>0]|0;
   $21 = HEAP8[$1>>0]|0;
   $22 = ($20<<24>>24)==($21<<24>>24);
   if ($22) {
    $23 = ((($$16)) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = HEAP8[$11>>0]|0;
    $26 = ($24<<24>>24)==($25<<24>>24);
    if ($26) {
     $27 = ((($$16)) + 2|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = HEAP8[$12>>0]|0;
     $30 = ($28<<24>>24)==($29<<24>>24);
     if ($30) {
      $31 = ((($$16)) + 3|0);
      HEAP8[$31>>0] = 0;
     }
    }
   }
   $32 = ((($$16)) + 4|0);
   $33 = (($$1335) + 1)|0;
   $exitcond9 = ($33|0)==($7|0);
   if ($exitcond9) {
    break;
   } else {
    $$1335 = $33;$$16 = $32;
   }
  }
  return;
  break;
 }
 default: {
  ___assert_fail((10197|0),(9734|0),4543,(10222|0));
  // unreachable;
 }
 }
}
function _stbi__de_iphone($0) {
 $0 = $0|0;
 var $$05461 = 0, $$062 = 0, $$15566 = 0, $$167 = 0, $$25663 = 0, $$264 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $exitcond = 0, $exitcond71 = 0;
 var $exitcond72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = Math_imul($4, $2)|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 switch ($9|0) {
 case 3:  {
  $10 = ($5|0)==(0);
  if ($10) {
   return;
  } else {
   $$05461 = $7;$$062 = 0;
  }
  while(1) {
   $11 = HEAP8[$$05461>>0]|0;
   $12 = ((($$05461)) + 2|0);
   $13 = HEAP8[$12>>0]|0;
   HEAP8[$$05461>>0] = $13;
   HEAP8[$12>>0] = $11;
   $14 = ((($$05461)) + 3|0);
   $15 = (($$062) + 1)|0;
   $exitcond = ($15|0)==($5|0);
   if ($exitcond) {
    break;
   } else {
    $$05461 = $14;$$062 = $15;
   }
  }
  return;
  break;
 }
 case 4:  {
  $16 = HEAP32[84059]|0;
  $17 = ($16|0)==(0);
  $18 = ($5|0)!=(0);
  if ($17) {
   if ($18) {
    $$25663 = $7;$$264 = 0;
   } else {
    return;
   }
   while(1) {
    $46 = HEAP8[$$25663>>0]|0;
    $47 = ((($$25663)) + 2|0);
    $48 = HEAP8[$47>>0]|0;
    HEAP8[$$25663>>0] = $48;
    HEAP8[$47>>0] = $46;
    $49 = ((($$25663)) + 4|0);
    $50 = (($$264) + 1)|0;
    $exitcond71 = ($50|0)==($5|0);
    if ($exitcond71) {
     break;
    } else {
     $$25663 = $49;$$264 = $50;
    }
   }
   return;
  }
  if ($18) {
   $$15566 = $7;$$167 = 0;
  } else {
   return;
  }
  while(1) {
   $19 = ((($$15566)) + 3|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = HEAP8[$$15566>>0]|0;
   $22 = ($20<<24>>24)==(0);
   $23 = ((($$15566)) + 2|0);
   $24 = HEAP8[$23>>0]|0;
   if ($22) {
    HEAP8[$$15566>>0] = $24;
    $$sink = $21;
   } else {
    $25 = $20&255;
    $div = ($20&255) >>> 1;
    $26 = $24&255;
    $27 = ($26*255)|0;
    $28 = $div&255;
    $29 = (($27) + ($28))|0;
    $30 = (($29>>>0) / ($25>>>0))&-1;
    $31 = $30&255;
    HEAP8[$$15566>>0] = $31;
    $32 = ((($$15566)) + 1|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = ($34*255)|0;
    $36 = (($35) + ($28))|0;
    $37 = (($36>>>0) / ($25>>>0))&-1;
    $38 = $37&255;
    HEAP8[$32>>0] = $38;
    $39 = $21&255;
    $40 = ($39*255)|0;
    $41 = (($40) + ($28))|0;
    $42 = (($41>>>0) / ($25>>>0))&-1;
    $43 = $42&255;
    $$sink = $43;
   }
   HEAP8[$23>>0] = $$sink;
   $44 = ((($$15566)) + 4|0);
   $45 = (($$167) + 1)|0;
   $exitcond72 = ($45|0)==($5|0);
   if ($exitcond72) {
    break;
   } else {
    $$15566 = $44;$$167 = $45;
   }
  }
  return;
  break;
 }
 default: {
  ___assert_fail((10163|0),(9734|0),4649,(10181|0));
  // unreachable;
 }
 }
}
function _stbi__expand_png_palette($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0574 = 0, $$0583 = 0, $$1595 = 0, $$16 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($6, $4)|0;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_stbi__malloc_mad2($7,$2)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  _stbi__err(9699);
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ($2|0)==(3);
 $13 = ($7|0)!=(0);
 if ($12) {
  if ($13) {
   $$0574 = 0;$$0583 = $10;
   while(1) {
    $14 = (($9) + ($$0574)|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = $16 << 2;
    $18 = (($1) + ($17)|0);
    $19 = HEAP8[$18>>0]|0;
    HEAP8[$$0583>>0] = $19;
    $20 = $17 | 1;
    $21 = (($1) + ($20)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ((($$0583)) + 1|0);
    HEAP8[$23>>0] = $22;
    $24 = $17 | 2;
    $25 = (($1) + ($24)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ((($$0583)) + 2|0);
    HEAP8[$27>>0] = $26;
    $28 = ((($$0583)) + 3|0);
    $29 = (($$0574) + 1)|0;
    $exitcond = ($29|0)==($7|0);
    if ($exitcond) {
     break;
    } else {
     $$0574 = $29;$$0583 = $28;
    }
   }
  }
 } else {
  if ($13) {
   $$1595 = $10;$$16 = 0;
   while(1) {
    $30 = (($9) + ($$16)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = $32 << 2;
    $34 = (($1) + ($33)|0);
    $35 = HEAP8[$34>>0]|0;
    HEAP8[$$1595>>0] = $35;
    $36 = $33 | 1;
    $37 = (($1) + ($36)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ((($$1595)) + 1|0);
    HEAP8[$39>>0] = $38;
    $40 = $33 | 2;
    $41 = (($1) + ($40)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = ((($$1595)) + 2|0);
    HEAP8[$43>>0] = $42;
    $44 = $33 | 3;
    $45 = (($1) + ($44)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = ((($$1595)) + 3|0);
    HEAP8[$47>>0] = $46;
    $48 = ((($$1595)) + 4|0);
    $49 = (($$16) + 1)|0;
    $exitcond9 = ($49|0)==($7|0);
    if ($exitcond9) {
     break;
    } else {
     $$1595 = $48;$$16 = $49;
    }
   }
  }
 }
 $50 = HEAP32[$8>>2]|0;
 _free($50);
 HEAP32[$8>>2] = $10;
 $$0 = 1;
 return ($$0|0);
}
function _stbi__malloc_mad2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_stbi__mad2sizes_valid($0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = Math_imul($1, $0)|0;
 $5 = (_stbi__malloc($4)|0);
 $$0 = $5;
 return ($$0|0);
}
function _stbi__mad2sizes_valid($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_stbi__mul2sizes_valid($0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = 0;
  $7 = $8&1;
  return ($7|0);
 }
 $4 = Math_imul($1, $0)|0;
 $5 = (_stbi__addsizes_valid($4)|0);
 $6 = ($5|0)!=(0);
 $8 = $6;
 $7 = $8&1;
 return ($7|0);
}
function _stbi__create_png_image_raw($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0562 = 0, $$0562718 = 0, $$0562719 = 0, $$0565$lcssa = 0, $$0565709 = 0, $$0568$lcssa = 0, $$0568708 = 0, $$0571811 = 0, $$0582 = 0, $$0591 = 0, $$0602810 = 0, $$0605809 = 0, $$0608 = 0, $$0608787 = 0, $$0608790 = 0, $$0617808 = 0, $$0619728 = 0, $$0725 = 0, $$1 = 0, $$10629758 = 0;
 var $$11$ph = 0, $$11630749 = 0, $$12741 = 0, $$13733 = 0, $$14$lcssa = 0, $$14707 = 0, $$15$lcssa = 0, $$1566$lcssa = 0, $$1566701 = 0, $$1569$lcssa = 0, $$1569700 = 0, $$15699 = 0, $$1572 = 0, $$16$lcssa = 0, $$1603 = 0, $$1606 = 0, $$1609 = 0, $$1609779 = 0, $$1609782 = 0, $$1618721 = 0;
 var $$1620806 = 0, $$16694 = 0, $$1715 = 0, $$1716 = 0, $$2 = 0, $$2567$lcssa = 0, $$2567696 = 0, $$2573789 = 0, $$2593788 = 0, $$2610 = 0, $$2610770 = 0, $$2610774 = 0, $$2621804 = 0, $$3574781 = 0, $$3586772 = 0, $$3594780 = 0, $$3611 = 0, $$3611761 = 0, $$3611765 = 0, $$3622802 = 0;
 var $$4$lcssa = 0, $$4575773 = 0, $$4587763 = 0, $$4595771 = 0, $$4612 = 0, $$4612752 = 0, $$4612756 = 0, $$4623800 = 0, $$4695 = 0, $$5576764 = 0, $$5588754 = 0, $$5596762 = 0, $$5613 = 0, $$5613744 = 0, $$5613747 = 0, $$5624798 = 0, $$6577755 = 0, $$6597753 = 0, $$6614 = 0, $$6614736 = 0;
 var $$6614739 = 0, $$6625796 = 0, $$7578746 = 0, $$7598745 = 0, $$7615792 = 0, $$7626784 = 0, $$8579738 = 0, $$8599737 = 0, $$8616723 = 0, $$8627776 = 0, $$9580 = 0, $$9600793 = 0, $$9628767 = 0, $$not = 0, $$sink = 0, $$sink1 = 0, $$sink635 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge888 = 0;
 var $exitcond = 0, $exitcond858 = 0, $exitcond859 = 0, $exitcond861 = 0, $exitcond863 = 0, $exitcond865 = 0, $exitcond867 = 0, $exitcond869 = 0, $exitcond871 = 0, $exitcond874 = 0, $exitcond875 = 0, $exitcond876 = 0, $exitcond877 = 0, $exitcond878 = 0, $exitcond879 = 0, $exitcond880 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $indvars$iv$next843 = 0, $indvars$iv$next846 = 0;
 var $indvars$iv$next849 = 0, $indvars$iv$next852 = 0, $indvars$iv$next855 = 0, $indvars$iv842 = 0, $indvars$iv845 = 0, $indvars$iv848 = 0, $indvars$iv851 = 0, $indvars$iv854 = 0, $or$cond = 0, $scevgep = 0, $scevgep844 = 0, $scevgep847 = 0, $scevgep850 = 0, $scevgep853 = 0, $scevgep856 = 0, $scevgep860 = 0, $scevgep862 = 0, $scevgep864 = 0, $scevgep866 = 0, $scevgep868 = 0;
 var $scevgep870 = 0, $scevgep873 = 0, $trunc = 0, $trunc631 = 0, $trunc632 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = ($6|0)==(16);
 $9 = $8 ? 2 : 1;
 $10 = HEAP32[$0>>2]|0;
 $11 = Math_imul($4, $3)|0;
 $12 = Math_imul($9, $11)|0;
 $13 = ((($10)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = Math_imul($9, $3)|0;
 $16 = Math_imul($14, $9)|0;
 $17 = ($14|0)==($3|0);
 $18 = (($14) + 1)|0;
 $19 = ($18|0)==($3|0);
 $or$cond = $17 | $19;
 if (!($or$cond)) {
  ___assert_fail((10278|0),(9734|0),4294,(10319|0));
  // unreachable;
 }
 $20 = (_stbi__malloc_mad3($4,$5,$15)|0);
 $21 = ((($0)) + 12|0);
 HEAP32[$21>>2] = $20;
 $22 = ($20|0)==(0|0);
 if ($22) {
  _stbi__err(9699);
  $$2 = 0;
  return ($$2|0);
 }
 $23 = Math_imul($14, $4)|0;
 $24 = Math_imul($23, $6)|0;
 $25 = (($24) + 7)|0;
 $26 = $25 >>> 3;
 $27 = (($26) + 1)|0;
 $28 = Math_imul($27, $5)|0;
 $29 = ($28>>>0)>($2>>>0);
 if ($29) {
  _stbi__err(10346);
  $$2 = 0;
  return ($$2|0);
 }
 $30 = ($5|0)==(0);
 L12: do {
  if (!($30)) {
   $31 = ($6|0)<(8);
   $32 = ($26>>>0)>($4>>>0);
   $33 = (($11) - ($26))|0;
   $34 = (0 - ($12))|0;
   $35 = ($6|0)==(8);
   $brmerge = $31 | $17;
   $36 = ($4|0)==(0);
   $$0608787 = (($4) + -1)|0;
   $37 = ($$0608787|0)==(0);
   $$1609779 = (($4) + -1)|0;
   $38 = ($$1609779|0)==(0);
   $$2610770 = (($4) + -1)|0;
   $39 = ($$2610770|0)==(0);
   $$3611761 = (($4) + -1)|0;
   $40 = ($$3611761|0)==(0);
   $$4612752 = (($4) + -1)|0;
   $41 = ($$4612752|0)==(0);
   $$5613744 = (($4) + -1)|0;
   $42 = ($$5613744|0)==(0);
   $$6614736 = (($4) + -1)|0;
   $43 = ($$6614736|0)==(0);
   $$not = $8 ^ 1;
   $brmerge888 = $36 | $$not;
   $$0571811 = $1;$$0602810 = $4;$$0605809 = $16;$$0617808 = 0;
   while(1) {
    $44 = HEAP32[$21>>2]|0;
    $45 = Math_imul($$0617808, $12)|0;
    $46 = (($44) + ($45)|0);
    $47 = ((($$0571811)) + 1|0);
    $48 = HEAP8[$$0571811>>0]|0;
    $49 = $48&255;
    $50 = ($48&255)>(4);
    if ($50) {
     label = 101;
     break;
    }
    if ($31) {
     if ($32) {
      label = 12;
      break;
     }
     $51 = (($46) + ($33)|0);
     $$0591 = $51;$$1603 = $26;$$1606 = 1;
    } else {
     $$0591 = $46;$$1603 = $$0602810;$$1606 = $$0605809;
    }
    $52 = (($$0591) + ($34)|0);
    $53 = ($$0617808|0)==(0);
    if ($53) {
     $54 = (10385 + ($49)|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = $55&255;
     $$0582 = $56;
    } else {
     $$0582 = $49;
    }
    $57 = ($$1606|0)>(0);
    L24: do {
     if ($57) {
      $trunc632 = $$0582&255;
      $$0619728 = 0;
      while(1) {
       switch ($trunc632<<24>>24) {
       case 0:  {
        $58 = (($47) + ($$0619728)|0);
        $59 = HEAP8[$58>>0]|0;
        $$sink = $59;
        label = 26;
        break;
       }
       case 1:  {
        $60 = (($47) + ($$0619728)|0);
        $61 = HEAP8[$60>>0]|0;
        $$sink = $61;
        label = 26;
        break;
       }
       case 2:  {
        $62 = (($47) + ($$0619728)|0);
        $63 = HEAP8[$62>>0]|0;
        $64 = $63&255;
        $65 = (($52) + ($$0619728)|0);
        $66 = HEAP8[$65>>0]|0;
        $67 = $66&255;
        $68 = (($67) + ($64))|0;
        $69 = $68&255;
        $$sink = $69;
        label = 26;
        break;
       }
       case 3:  {
        $70 = (($47) + ($$0619728)|0);
        $71 = HEAP8[$70>>0]|0;
        $72 = $71&255;
        $73 = (($52) + ($$0619728)|0);
        $74 = HEAP8[$73>>0]|0;
        $75 = $74&255;
        $76 = $75 >>> 1;
        $77 = (($76) + ($72))|0;
        $78 = $77&255;
        $$sink = $78;
        label = 26;
        break;
       }
       case 4:  {
        $79 = (($47) + ($$0619728)|0);
        $80 = HEAP8[$79>>0]|0;
        $81 = $80&255;
        $82 = (($52) + ($$0619728)|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $85 = (_stbi__paeth(0,$84,0)|0);
        $86 = (($85) + ($81))|0;
        $87 = $86&255;
        $$sink = $87;
        label = 26;
        break;
       }
       case 5:  {
        $88 = (($47) + ($$0619728)|0);
        $89 = HEAP8[$88>>0]|0;
        $$sink = $89;
        label = 26;
        break;
       }
       case 6:  {
        $90 = (($47) + ($$0619728)|0);
        $91 = HEAP8[$90>>0]|0;
        $$sink = $91;
        label = 26;
        break;
       }
       default: {
       }
       }
       if ((label|0) == 26) {
        label = 0;
        $$sink1 = (($$0591) + ($$0619728)|0);
        HEAP8[$$sink1>>0] = $$sink;
       }
       $92 = (($$0619728) + 1)|0;
       $exitcond858 = ($92|0)==($$1606|0);
       if ($exitcond858) {
        break L24;
       } else {
        $$0619728 = $92;
       }
      }
     }
    } while(0);
    do {
     if ($35) {
      if (!($17)) {
       $93 = (($$0591) + ($14)|0);
       HEAP8[$93>>0] = -1;
      }
      $94 = (($47) + ($14)|0);
      $$1572 = $94;$$sink635 = $3;
     } else {
      if (!($8)) {
       $99 = ((($$0571811)) + 2|0);
       $$1572 = $99;$$sink635 = 1;
       break;
      }
      if (!($17)) {
       $95 = (($$1606) + 1)|0;
       $96 = (($$0591) + ($95)|0);
       $97 = (($$0591) + ($$1606)|0);
       HEAP8[$97>>0] = -1;
       HEAP8[$96>>0] = -1;
      }
      $98 = (($47) + ($$1606)|0);
      $$1572 = $98;$$sink635 = $15;
     }
    } while(0);
    $100 = (($$0591) + ($$sink635)|0);
    $101 = (($52) + ($$sink635)|0);
    if ($brmerge) {
     $102 = (($$1603) + -1)|0;
     $103 = Math_imul($102, $$1606)|0;
     $trunc631 = $$0582&255;
     switch ($trunc631<<24>>24) {
     case 0:  {
      _memcpy(($100|0),($$1572|0),($103|0))|0;
      break;
     }
     case 1:  {
      $109 = ($103|0)>(0);
      if ($109) {
       $$1620806 = 0;
       while(1) {
        $110 = (($$1572) + ($$1620806)|0);
        $111 = HEAP8[$110>>0]|0;
        $112 = $111&255;
        $113 = (($$1620806) - ($$1606))|0;
        $114 = (($100) + ($113)|0);
        $115 = HEAP8[$114>>0]|0;
        $116 = $115&255;
        $117 = (($116) + ($112))|0;
        $118 = $117&255;
        $119 = (($100) + ($$1620806)|0);
        HEAP8[$119>>0] = $118;
        $120 = (($$1620806) + 1)|0;
        $exitcond880 = ($120|0)==($103|0);
        if ($exitcond880) {
         break;
        } else {
         $$1620806 = $120;
        }
       }
      }
      break;
     }
     case 2:  {
      $108 = ($103|0)>(0);
      if ($108) {
       $$2621804 = 0;
       while(1) {
        $121 = (($$1572) + ($$2621804)|0);
        $122 = HEAP8[$121>>0]|0;
        $123 = $122&255;
        $124 = (($101) + ($$2621804)|0);
        $125 = HEAP8[$124>>0]|0;
        $126 = $125&255;
        $127 = (($126) + ($123))|0;
        $128 = $127&255;
        $129 = (($100) + ($$2621804)|0);
        HEAP8[$129>>0] = $128;
        $130 = (($$2621804) + 1)|0;
        $exitcond879 = ($130|0)==($103|0);
        if ($exitcond879) {
         break;
        } else {
         $$2621804 = $130;
        }
       }
      }
      break;
     }
     case 3:  {
      $107 = ($103|0)>(0);
      if ($107) {
       $$3622802 = 0;
       while(1) {
        $131 = (($$1572) + ($$3622802)|0);
        $132 = HEAP8[$131>>0]|0;
        $133 = $132&255;
        $134 = (($101) + ($$3622802)|0);
        $135 = HEAP8[$134>>0]|0;
        $136 = $135&255;
        $137 = (($$3622802) - ($$1606))|0;
        $138 = (($100) + ($137)|0);
        $139 = HEAP8[$138>>0]|0;
        $140 = $139&255;
        $141 = (($140) + ($136))|0;
        $142 = $141 >>> 1;
        $143 = (($142) + ($133))|0;
        $144 = $143&255;
        $145 = (($100) + ($$3622802)|0);
        HEAP8[$145>>0] = $144;
        $146 = (($$3622802) + 1)|0;
        $exitcond878 = ($146|0)==($103|0);
        if ($exitcond878) {
         break;
        } else {
         $$3622802 = $146;
        }
       }
      }
      break;
     }
     case 4:  {
      $106 = ($103|0)>(0);
      if ($106) {
       $$4623800 = 0;
       while(1) {
        $147 = (($$1572) + ($$4623800)|0);
        $148 = HEAP8[$147>>0]|0;
        $149 = $148&255;
        $150 = (($$4623800) - ($$1606))|0;
        $151 = (($100) + ($150)|0);
        $152 = HEAP8[$151>>0]|0;
        $153 = $152&255;
        $154 = (($101) + ($$4623800)|0);
        $155 = HEAP8[$154>>0]|0;
        $156 = $155&255;
        $157 = (($101) + ($150)|0);
        $158 = HEAP8[$157>>0]|0;
        $159 = $158&255;
        $160 = (_stbi__paeth($153,$156,$159)|0);
        $161 = (($160) + ($149))|0;
        $162 = $161&255;
        $163 = (($100) + ($$4623800)|0);
        HEAP8[$163>>0] = $162;
        $164 = (($$4623800) + 1)|0;
        $exitcond877 = ($164|0)==($103|0);
        if ($exitcond877) {
         break;
        } else {
         $$4623800 = $164;
        }
       }
      }
      break;
     }
     case 5:  {
      $105 = ($103|0)>(0);
      if ($105) {
       $$5624798 = 0;
       while(1) {
        $165 = (($$1572) + ($$5624798)|0);
        $166 = HEAP8[$165>>0]|0;
        $167 = $166&255;
        $168 = (($$5624798) - ($$1606))|0;
        $169 = (($100) + ($168)|0);
        $170 = HEAP8[$169>>0]|0;
        $171 = $170&255;
        $172 = $171 >>> 1;
        $173 = (($172) + ($167))|0;
        $174 = $173&255;
        $175 = (($100) + ($$5624798)|0);
        HEAP8[$175>>0] = $174;
        $176 = (($$5624798) + 1)|0;
        $exitcond876 = ($176|0)==($103|0);
        if ($exitcond876) {
         break;
        } else {
         $$5624798 = $176;
        }
       }
      }
      break;
     }
     case 6:  {
      $104 = ($103|0)>(0);
      if ($104) {
       $$6625796 = 0;
       while(1) {
        $177 = (($$1572) + ($$6625796)|0);
        $178 = HEAP8[$177>>0]|0;
        $179 = $178&255;
        $180 = (($$6625796) - ($$1606))|0;
        $181 = (($100) + ($180)|0);
        $182 = HEAP8[$181>>0]|0;
        $183 = $182&255;
        $184 = (_stbi__paeth($183,0,0)|0);
        $185 = (($184) + ($179))|0;
        $186 = $185&255;
        $187 = (($100) + ($$6625796)|0);
        HEAP8[$187>>0] = $186;
        $188 = (($$6625796) + 1)|0;
        $exitcond875 = ($188|0)==($103|0);
        if ($exitcond875) {
         break;
        } else {
         $$6625796 = $188;
        }
       }
      }
      break;
     }
     default: {
     }
     }
     $189 = (($$1572) + ($103)|0);
     $$11$ph = $189;
    } else {
     if (!($19)) {
      label = 54;
      break;
     }
     $trunc = $$0582&255;
     switch ($trunc<<24>>24) {
     case 0:  {
      if ($37) {
       $$9580 = $$1572;
      } else {
       $202 = ($$1606|0)>(0);
       $203 = Math_imul($$6614736, $$1606)|0;
       $$0608790 = $$0608787;$$2573789 = $$1572;$$2593788 = $100;
       while(1) {
        if ($202) {
         $$7626784 = 0;
         while(1) {
          $204 = (($$2573789) + ($$7626784)|0);
          $205 = HEAP8[$204>>0]|0;
          $206 = (($$2593788) + ($$7626784)|0);
          HEAP8[$206>>0] = $205;
          $207 = (($$7626784) + 1)|0;
          $exitcond871 = ($207|0)==($$1606|0);
          if ($exitcond871) {
           break;
          } else {
           $$7626784 = $207;
          }
         }
        }
        $208 = (($$2593788) + ($$1606)|0);
        HEAP8[$208>>0] = -1;
        $209 = (($$2573789) + ($$1606)|0);
        $210 = (($$2593788) + ($15)|0);
        $$0608 = (($$0608790) + -1)|0;
        $211 = ($$0608|0)==(0);
        if ($211) {
         break;
        } else {
         $$0608790 = $$0608;$$2573789 = $209;$$2593788 = $210;
        }
       }
       $scevgep873 = (($$1572) + ($203)|0);
       $$9580 = $scevgep873;
      }
      break;
     }
     case 1:  {
      if ($38) {
       $$9580 = $$1572;
      } else {
       $200 = ($$1606|0)>(0);
       $201 = Math_imul($$6614736, $$1606)|0;
       $$1609782 = $$1609779;$$3574781 = $$1572;$$3594780 = $100;
       while(1) {
        if ($200) {
         $$8627776 = 0;
         while(1) {
          $212 = (($$3574781) + ($$8627776)|0);
          $213 = HEAP8[$212>>0]|0;
          $214 = $213&255;
          $215 = (($$8627776) - ($15))|0;
          $216 = (($$3594780) + ($215)|0);
          $217 = HEAP8[$216>>0]|0;
          $218 = $217&255;
          $219 = (($218) + ($214))|0;
          $220 = $219&255;
          $221 = (($$3594780) + ($$8627776)|0);
          HEAP8[$221>>0] = $220;
          $222 = (($$8627776) + 1)|0;
          $exitcond869 = ($222|0)==($$1606|0);
          if ($exitcond869) {
           break;
          } else {
           $$8627776 = $222;
          }
         }
        }
        $223 = (($$3594780) + ($$1606)|0);
        HEAP8[$223>>0] = -1;
        $224 = (($$3574781) + ($$1606)|0);
        $225 = (($$3594780) + ($15)|0);
        $$1609 = (($$1609782) + -1)|0;
        $226 = ($$1609|0)==(0);
        if ($226) {
         break;
        } else {
         $$1609782 = $$1609;$$3574781 = $224;$$3594780 = $225;
        }
       }
       $scevgep870 = (($$1572) + ($201)|0);
       $$9580 = $scevgep870;
      }
      break;
     }
     case 2:  {
      if ($39) {
       $$9580 = $$1572;
      } else {
       $198 = ($$1606|0)>(0);
       $199 = Math_imul($$6614736, $$1606)|0;
       $$2610774 = $$2610770;$$3586772 = $101;$$4575773 = $$1572;$$4595771 = $100;
       while(1) {
        if ($198) {
         $$9628767 = 0;
         while(1) {
          $227 = (($$4575773) + ($$9628767)|0);
          $228 = HEAP8[$227>>0]|0;
          $229 = $228&255;
          $230 = (($$3586772) + ($$9628767)|0);
          $231 = HEAP8[$230>>0]|0;
          $232 = $231&255;
          $233 = (($232) + ($229))|0;
          $234 = $233&255;
          $235 = (($$4595771) + ($$9628767)|0);
          HEAP8[$235>>0] = $234;
          $236 = (($$9628767) + 1)|0;
          $exitcond867 = ($236|0)==($$1606|0);
          if ($exitcond867) {
           break;
          } else {
           $$9628767 = $236;
          }
         }
        }
        $237 = (($$4595771) + ($$1606)|0);
        HEAP8[$237>>0] = -1;
        $238 = (($$4575773) + ($$1606)|0);
        $239 = (($$4595771) + ($15)|0);
        $240 = (($$3586772) + ($15)|0);
        $$2610 = (($$2610774) + -1)|0;
        $241 = ($$2610|0)==(0);
        if ($241) {
         break;
        } else {
         $$2610774 = $$2610;$$3586772 = $240;$$4575773 = $238;$$4595771 = $239;
        }
       }
       $scevgep868 = (($$1572) + ($199)|0);
       $$9580 = $scevgep868;
      }
      break;
     }
     case 3:  {
      if ($40) {
       $$9580 = $$1572;
      } else {
       $196 = ($$1606|0)>(0);
       $197 = Math_imul($$6614736, $$1606)|0;
       $$3611765 = $$3611761;$$4587763 = $101;$$5576764 = $$1572;$$5596762 = $100;
       while(1) {
        if ($196) {
         $$10629758 = 0;
         while(1) {
          $242 = (($$5576764) + ($$10629758)|0);
          $243 = HEAP8[$242>>0]|0;
          $244 = $243&255;
          $245 = (($$4587763) + ($$10629758)|0);
          $246 = HEAP8[$245>>0]|0;
          $247 = $246&255;
          $248 = (($$10629758) - ($15))|0;
          $249 = (($$5596762) + ($248)|0);
          $250 = HEAP8[$249>>0]|0;
          $251 = $250&255;
          $252 = (($251) + ($247))|0;
          $253 = $252 >>> 1;
          $254 = (($253) + ($244))|0;
          $255 = $254&255;
          $256 = (($$5596762) + ($$10629758)|0);
          HEAP8[$256>>0] = $255;
          $257 = (($$10629758) + 1)|0;
          $exitcond865 = ($257|0)==($$1606|0);
          if ($exitcond865) {
           break;
          } else {
           $$10629758 = $257;
          }
         }
        }
        $258 = (($$5596762) + ($$1606)|0);
        HEAP8[$258>>0] = -1;
        $259 = (($$5576764) + ($$1606)|0);
        $260 = (($$5596762) + ($15)|0);
        $261 = (($$4587763) + ($15)|0);
        $$3611 = (($$3611765) + -1)|0;
        $262 = ($$3611|0)==(0);
        if ($262) {
         break;
        } else {
         $$3611765 = $$3611;$$4587763 = $261;$$5576764 = $259;$$5596762 = $260;
        }
       }
       $scevgep866 = (($$1572) + ($197)|0);
       $$9580 = $scevgep866;
      }
      break;
     }
     case 4:  {
      if ($41) {
       $$9580 = $$1572;
      } else {
       $194 = ($$1606|0)>(0);
       $195 = Math_imul($$6614736, $$1606)|0;
       $$4612756 = $$4612752;$$5588754 = $101;$$6577755 = $$1572;$$6597753 = $100;
       while(1) {
        if ($194) {
         $$11630749 = 0;
         while(1) {
          $263 = (($$6577755) + ($$11630749)|0);
          $264 = HEAP8[$263>>0]|0;
          $265 = $264&255;
          $266 = (($$11630749) - ($15))|0;
          $267 = (($$6597753) + ($266)|0);
          $268 = HEAP8[$267>>0]|0;
          $269 = $268&255;
          $270 = (($$5588754) + ($$11630749)|0);
          $271 = HEAP8[$270>>0]|0;
          $272 = $271&255;
          $273 = (($$5588754) + ($266)|0);
          $274 = HEAP8[$273>>0]|0;
          $275 = $274&255;
          $276 = (_stbi__paeth($269,$272,$275)|0);
          $277 = (($276) + ($265))|0;
          $278 = $277&255;
          $279 = (($$6597753) + ($$11630749)|0);
          HEAP8[$279>>0] = $278;
          $280 = (($$11630749) + 1)|0;
          $exitcond863 = ($280|0)==($$1606|0);
          if ($exitcond863) {
           break;
          } else {
           $$11630749 = $280;
          }
         }
        }
        $281 = (($$6597753) + ($$1606)|0);
        HEAP8[$281>>0] = -1;
        $282 = (($$6577755) + ($$1606)|0);
        $283 = (($$6597753) + ($15)|0);
        $284 = (($$5588754) + ($15)|0);
        $$4612 = (($$4612756) + -1)|0;
        $285 = ($$4612|0)==(0);
        if ($285) {
         break;
        } else {
         $$4612756 = $$4612;$$5588754 = $284;$$6577755 = $282;$$6597753 = $283;
        }
       }
       $scevgep864 = (($$1572) + ($195)|0);
       $$9580 = $scevgep864;
      }
      break;
     }
     case 5:  {
      if ($42) {
       $$9580 = $$1572;
      } else {
       $192 = ($$1606|0)>(0);
       $193 = Math_imul($$6614736, $$1606)|0;
       $$5613747 = $$5613744;$$7578746 = $$1572;$$7598745 = $100;
       while(1) {
        if ($192) {
         $$12741 = 0;
         while(1) {
          $286 = (($$7578746) + ($$12741)|0);
          $287 = HEAP8[$286>>0]|0;
          $288 = $287&255;
          $289 = (($$12741) - ($15))|0;
          $290 = (($$7598745) + ($289)|0);
          $291 = HEAP8[$290>>0]|0;
          $292 = $291&255;
          $293 = $292 >>> 1;
          $294 = (($293) + ($288))|0;
          $295 = $294&255;
          $296 = (($$7598745) + ($$12741)|0);
          HEAP8[$296>>0] = $295;
          $297 = (($$12741) + 1)|0;
          $exitcond861 = ($297|0)==($$1606|0);
          if ($exitcond861) {
           break;
          } else {
           $$12741 = $297;
          }
         }
        }
        $298 = (($$7598745) + ($$1606)|0);
        HEAP8[$298>>0] = -1;
        $299 = (($$7578746) + ($$1606)|0);
        $300 = (($$7598745) + ($15)|0);
        $$5613 = (($$5613747) + -1)|0;
        $301 = ($$5613|0)==(0);
        if ($301) {
         break;
        } else {
         $$5613747 = $$5613;$$7578746 = $299;$$7598745 = $300;
        }
       }
       $scevgep862 = (($$1572) + ($193)|0);
       $$9580 = $scevgep862;
      }
      break;
     }
     case 6:  {
      if ($43) {
       $$9580 = $$1572;
      } else {
       $190 = ($$1606|0)>(0);
       $191 = Math_imul($$6614736, $$1606)|0;
       $$6614739 = $$6614736;$$8579738 = $$1572;$$8599737 = $100;
       while(1) {
        if ($190) {
         $$13733 = 0;
         while(1) {
          $302 = (($$8579738) + ($$13733)|0);
          $303 = HEAP8[$302>>0]|0;
          $304 = $303&255;
          $305 = (($$13733) - ($15))|0;
          $306 = (($$8599737) + ($305)|0);
          $307 = HEAP8[$306>>0]|0;
          $308 = $307&255;
          $309 = (_stbi__paeth($308,0,0)|0);
          $310 = (($309) + ($304))|0;
          $311 = $310&255;
          $312 = (($$8599737) + ($$13733)|0);
          HEAP8[$312>>0] = $311;
          $313 = (($$13733) + 1)|0;
          $exitcond859 = ($313|0)==($$1606|0);
          if ($exitcond859) {
           break;
          } else {
           $$13733 = $313;
          }
         }
        }
        $314 = (($$8599737) + ($$1606)|0);
        HEAP8[$314>>0] = -1;
        $315 = (($$8579738) + ($$1606)|0);
        $316 = (($$8599737) + ($15)|0);
        $$6614 = (($$6614739) + -1)|0;
        $317 = ($$6614|0)==(0);
        if ($317) {
         break;
        } else {
         $$6614739 = $$6614;$$8579738 = $315;$$8599737 = $316;
        }
       }
       $scevgep860 = (($$1572) + ($191)|0);
       $$9580 = $scevgep860;
      }
      break;
     }
     default: {
      $$9580 = $$1572;
     }
     }
     if ($brmerge888) {
      $$11$ph = $$9580;
     } else {
      $318 = HEAP32[$21>>2]|0;
      $319 = (($318) + ($45)|0);
      $320 = (($$1606) + 1)|0;
      $$7615792 = 0;$$9600793 = $319;
      while(1) {
       $321 = (($$9600793) + ($320)|0);
       HEAP8[$321>>0] = -1;
       $322 = (($$7615792) + 1)|0;
       $323 = (($$9600793) + ($15)|0);
       $exitcond874 = ($322|0)==($4|0);
       if ($exitcond874) {
        $$11$ph = $$9580;
        break;
       } else {
        $$7615792 = $322;$$9600793 = $323;
       }
      }
     }
    }
    $324 = (($$0617808) + 1)|0;
    $325 = ($324>>>0)<($5>>>0);
    if ($325) {
     $$0571811 = $$11$ph;$$0602810 = $$1603;$$0605809 = $$1606;$$0617808 = $324;
    } else {
     break L12;
    }
   }
   if ((label|0) == 12) {
    ___assert_fail((10364|0),(9734|0),4314,(10319|0));
    // unreachable;
   }
   else if ((label|0) == 54) {
    ___assert_fail((10390|0),(9734|0),4376,(10319|0));
    // unreachable;
   }
   else if ((label|0) == 101) {
    _stbi__err(10407);
    $$2 = 0;
    return ($$2|0);
   }
  }
 } while(0);
 $326 = ($6|0)<(8);
 if (!($326)) {
  if (!($8)) {
   $$2 = 1;
   return ($$2|0);
  }
  $595 = Math_imul($4, $3)|0;
  $596 = Math_imul($595, $5)|0;
  $597 = ($596|0)==(0);
  if ($597) {
   $$2 = 1;
   return ($$2|0);
  }
  $598 = HEAP32[$21>>2]|0;
  $$0725 = $598;$$8616723 = 0;
  while(1) {
   $599 = HEAP8[$$0725>>0]|0;
   $600 = $599&255;
   $601 = $600 << 8;
   $602 = ((($$0725)) + 1|0);
   $603 = HEAP8[$602>>0]|0;
   $604 = $603&255;
   $605 = $601 | $604;
   $606 = $605&65535;
   HEAP16[$$0725>>1] = $606;
   $607 = (($$8616723) + 1)|0;
   $608 = ((($$0725)) + 2|0);
   $exitcond = ($607|0)==($596|0);
   if ($exitcond) {
    $$2 = 1;
    break;
   } else {
    $$0725 = $608;$$8616723 = $607;
   }
  }
  return ($$2|0);
 }
 $327 = ($5|0)==(0);
 if ($327) {
  $$2 = 1;
  return ($$2|0);
 }
 $328 = (0 - ($26))|0;
 $329 = ($7|0)==(0);
 $330 = (10103 + ($6)|0);
 $$0562718 = (($4) + -1)|0;
 $331 = ($$0562718|0)>(-1);
 $$1715 = (($4) + -1)|0;
 $332 = ($$1715|0)>(-1);
 $333 = ($23|0)>(1);
 $334 = ($23|0)>(3);
 $335 = ($23|0)>(7);
 $336 = (($23) + -8)|0;
 $337 = $336 >>> 3;
 $338 = $337 << 3;
 $339 = (($338) + 8)|0;
 $340 = (($336) - ($338))|0;
 $341 = (($337) + ($11))|0;
 $342 = (($341) + 1)|0;
 $343 = (($342) - ($26))|0;
 $344 = (($23) + -4)|0;
 $345 = $344 >>> 2;
 $346 = $345 << 2;
 $347 = (($346) + 4)|0;
 $348 = (($344) - ($346))|0;
 $349 = (($345) + ($11))|0;
 $350 = (($349) + 1)|0;
 $351 = (($350) - ($26))|0;
 $352 = (($23) + -2)|0;
 $353 = $352 >>> 1;
 $354 = $353 << 1;
 $355 = (($354) + 2)|0;
 $356 = (($352) - ($354))|0;
 $357 = (($353) + ($11))|0;
 $358 = (($357) + 1)|0;
 $359 = (($358) - ($26))|0;
 $$1618721 = 0;$indvars$iv = $339;$indvars$iv842 = $343;$indvars$iv845 = $347;$indvars$iv848 = $351;$indvars$iv851 = $355;$indvars$iv854 = $359;
 L168: while(1) {
  $360 = HEAP32[$21>>2]|0;
  $361 = Math_imul($$1618721, $12)|0;
  $362 = (($360) + ($361)|0);
  $363 = (($362) + ($11)|0);
  $364 = (($363) + ($328)|0);
  if ($329) {
   $365 = HEAP8[$330>>0]|0;
   $366 = $365&255;
   $371 = $366;
  } else {
   $371 = 1;
  }
  switch ($6|0) {
  case 4:  {
   if ($333) {
    $scevgep853 = (($360) + ($indvars$iv851)|0);
    $$0565709 = $364;$$0568708 = $362;$$14707 = $23;
    while(1) {
     $367 = HEAP8[$$0565709>>0]|0;
     $368 = $367&255;
     $369 = $368 >>> 4;
     $370 = Math_imul($369, $371)|0;
     $372 = $370&255;
     $373 = ((($$0568708)) + 1|0);
     HEAP8[$$0568708>>0] = $372;
     $374 = HEAP8[$$0565709>>0]|0;
     $375 = $374 & 15;
     $376 = $375&255;
     $377 = Math_imul($376, $371)|0;
     $378 = $377&255;
     $379 = ((($$0568708)) + 2|0);
     HEAP8[$373>>0] = $378;
     $380 = (($$14707) + -2)|0;
     $381 = ((($$0565709)) + 1|0);
     $382 = ($380|0)>(1);
     if ($382) {
      $$0565709 = $381;$$0568708 = $379;$$14707 = $380;
     } else {
      break;
     }
    }
    $scevgep856 = (($360) + ($indvars$iv854)|0);
    $$0565$lcssa = $scevgep856;$$0568$lcssa = $scevgep853;$$14$lcssa = $356;
   } else {
    $$0565$lcssa = $364;$$0568$lcssa = $362;$$14$lcssa = $23;
   }
   $383 = ($$14$lcssa|0)==(1);
   if ($383) {
    $384 = HEAP8[$$0565$lcssa>>0]|0;
    $385 = $384&255;
    $386 = $385 >>> 4;
    $387 = Math_imul($386, $371)|0;
    $388 = $387&255;
    HEAP8[$$0568$lcssa>>0] = $388;
   }
   break;
  }
  case 2:  {
   if ($334) {
    $scevgep847 = (($360) + ($indvars$iv845)|0);
    $$1566701 = $364;$$1569700 = $362;$$15699 = $23;
    while(1) {
     $389 = HEAP8[$$1566701>>0]|0;
     $390 = $389&255;
     $391 = $390 >>> 6;
     $392 = Math_imul($391, $371)|0;
     $393 = $392&255;
     $394 = ((($$1569700)) + 1|0);
     HEAP8[$$1569700>>0] = $393;
     $395 = HEAP8[$$1566701>>0]|0;
     $396 = $395&255;
     $397 = $396 >>> 4;
     $398 = $397 & 3;
     $399 = Math_imul($398, $371)|0;
     $400 = $399&255;
     $401 = ((($$1569700)) + 2|0);
     HEAP8[$394>>0] = $400;
     $402 = HEAP8[$$1566701>>0]|0;
     $403 = $402&255;
     $404 = $403 >>> 2;
     $405 = $404 & 3;
     $406 = Math_imul($405, $371)|0;
     $407 = $406&255;
     $408 = ((($$1569700)) + 3|0);
     HEAP8[$401>>0] = $407;
     $409 = HEAP8[$$1566701>>0]|0;
     $410 = $409 & 3;
     $411 = $410&255;
     $412 = Math_imul($411, $371)|0;
     $413 = $412&255;
     $414 = ((($$1569700)) + 4|0);
     HEAP8[$408>>0] = $413;
     $415 = (($$15699) + -4)|0;
     $416 = ((($$1566701)) + 1|0);
     $417 = ($415|0)>(3);
     if ($417) {
      $$1566701 = $416;$$1569700 = $414;$$15699 = $415;
     } else {
      break;
     }
    }
    $scevgep850 = (($360) + ($indvars$iv848)|0);
    $$15$lcssa = $348;$$1566$lcssa = $scevgep850;$$1569$lcssa = $scevgep847;
   } else {
    $$15$lcssa = $23;$$1566$lcssa = $364;$$1569$lcssa = $362;
   }
   $418 = ($$15$lcssa|0)>(0);
   if ($418) {
    $419 = HEAP8[$$1566$lcssa>>0]|0;
    $420 = $419&255;
    $421 = $420 >>> 6;
    $422 = Math_imul($421, $371)|0;
    $423 = $422&255;
    HEAP8[$$1569$lcssa>>0] = $423;
    $424 = ($$15$lcssa|0)==(1);
    if (!($424)) {
     $425 = ((($$1569$lcssa)) + 1|0);
     $426 = HEAP8[$$1566$lcssa>>0]|0;
     $427 = $426&255;
     $428 = $427 >>> 4;
     $429 = $428 & 3;
     $430 = Math_imul($429, $371)|0;
     $431 = $430&255;
     HEAP8[$425>>0] = $431;
     $432 = ($$15$lcssa|0)>(2);
     if ($432) {
      $433 = ((($$1569$lcssa)) + 2|0);
      $434 = HEAP8[$$1566$lcssa>>0]|0;
      $435 = $434&255;
      $436 = $435 >>> 2;
      $437 = $436 & 3;
      $438 = Math_imul($437, $371)|0;
      $439 = $438&255;
      HEAP8[$433>>0] = $439;
     }
    }
   }
   break;
  }
  case 1:  {
   if ($335) {
    $scevgep = (($360) + ($indvars$iv)|0);
    $$16694 = $23;$$2567696 = $364;$$4695 = $362;
    while(1) {
     $440 = HEAP8[$$2567696>>0]|0;
     $441 = $440&255;
     $442 = $441 >>> 7;
     $443 = (0 - ($442))|0;
     $444 = $371 & $443;
     $445 = $444&255;
     $446 = ((($$4695)) + 1|0);
     HEAP8[$$4695>>0] = $445;
     $447 = HEAP8[$$2567696>>0]|0;
     $448 = $447&255;
     $449 = $448 >>> 6;
     $450 = $449 & 1;
     $451 = (0 - ($450))|0;
     $452 = $371 & $451;
     $453 = $452&255;
     $454 = ((($$4695)) + 2|0);
     HEAP8[$446>>0] = $453;
     $455 = HEAP8[$$2567696>>0]|0;
     $456 = $455&255;
     $457 = $456 >>> 5;
     $458 = $457 & 1;
     $459 = (0 - ($458))|0;
     $460 = $371 & $459;
     $461 = $460&255;
     $462 = ((($$4695)) + 3|0);
     HEAP8[$454>>0] = $461;
     $463 = HEAP8[$$2567696>>0]|0;
     $464 = $463&255;
     $465 = $464 >>> 4;
     $466 = $465 & 1;
     $467 = (0 - ($466))|0;
     $468 = $371 & $467;
     $469 = $468&255;
     $470 = ((($$4695)) + 4|0);
     HEAP8[$462>>0] = $469;
     $471 = HEAP8[$$2567696>>0]|0;
     $472 = $471&255;
     $473 = $472 >>> 3;
     $474 = $473 & 1;
     $475 = (0 - ($474))|0;
     $476 = $371 & $475;
     $477 = $476&255;
     $478 = ((($$4695)) + 5|0);
     HEAP8[$470>>0] = $477;
     $479 = HEAP8[$$2567696>>0]|0;
     $480 = $479&255;
     $481 = $480 >>> 2;
     $482 = $481 & 1;
     $483 = (0 - ($482))|0;
     $484 = $371 & $483;
     $485 = $484&255;
     $486 = ((($$4695)) + 6|0);
     HEAP8[$478>>0] = $485;
     $487 = HEAP8[$$2567696>>0]|0;
     $488 = $487&255;
     $489 = $488 >>> 1;
     $490 = $489 & 1;
     $491 = (0 - ($490))|0;
     $492 = $371 & $491;
     $493 = $492&255;
     $494 = ((($$4695)) + 7|0);
     HEAP8[$486>>0] = $493;
     $495 = HEAP8[$$2567696>>0]|0;
     $496 = $495 & 1;
     $497 = $496&255;
     $498 = (0 - ($497))|0;
     $499 = $371 & $498;
     $500 = $499&255;
     $501 = ((($$4695)) + 8|0);
     HEAP8[$494>>0] = $500;
     $502 = (($$16694) + -8)|0;
     $503 = ((($$2567696)) + 1|0);
     $504 = ($502|0)>(7);
     if ($504) {
      $$16694 = $502;$$2567696 = $503;$$4695 = $501;
     } else {
      break;
     }
    }
    $scevgep844 = (($360) + ($indvars$iv842)|0);
    $$16$lcssa = $340;$$2567$lcssa = $scevgep844;$$4$lcssa = $scevgep;
   } else {
    $$16$lcssa = $23;$$2567$lcssa = $364;$$4$lcssa = $362;
   }
   $505 = ($$16$lcssa|0)>(0);
   if ($505) {
    $506 = HEAP8[$$2567$lcssa>>0]|0;
    $507 = $506&255;
    $508 = $507 >>> 7;
    $509 = (0 - ($508))|0;
    $510 = $371 & $509;
    $511 = $510&255;
    HEAP8[$$4$lcssa>>0] = $511;
    $512 = ($$16$lcssa|0)==(1);
    if (!($512)) {
     $513 = ((($$4$lcssa)) + 1|0);
     $514 = HEAP8[$$2567$lcssa>>0]|0;
     $515 = $514&255;
     $516 = $515 >>> 6;
     $517 = $516 & 1;
     $518 = (0 - ($517))|0;
     $519 = $371 & $518;
     $520 = $519&255;
     HEAP8[$513>>0] = $520;
     $521 = ($$16$lcssa|0)>(2);
     if ($521) {
      $522 = ((($$4$lcssa)) + 2|0);
      $523 = HEAP8[$$2567$lcssa>>0]|0;
      $524 = $523&255;
      $525 = $524 >>> 5;
      $526 = $525 & 1;
      $527 = (0 - ($526))|0;
      $528 = $371 & $527;
      $529 = $528&255;
      HEAP8[$522>>0] = $529;
      $530 = ($$16$lcssa|0)==(3);
      if (!($530)) {
       $531 = ((($$4$lcssa)) + 3|0);
       $532 = HEAP8[$$2567$lcssa>>0]|0;
       $533 = $532&255;
       $534 = $533 >>> 4;
       $535 = $534 & 1;
       $536 = (0 - ($535))|0;
       $537 = $371 & $536;
       $538 = $537&255;
       HEAP8[$531>>0] = $538;
       $539 = ($$16$lcssa|0)>(4);
       if ($539) {
        $540 = ((($$4$lcssa)) + 4|0);
        $541 = HEAP8[$$2567$lcssa>>0]|0;
        $542 = $541&255;
        $543 = $542 >>> 3;
        $544 = $543 & 1;
        $545 = (0 - ($544))|0;
        $546 = $371 & $545;
        $547 = $546&255;
        HEAP8[$540>>0] = $547;
        $548 = ($$16$lcssa|0)==(5);
        if (!($548)) {
         $549 = ((($$4$lcssa)) + 5|0);
         $550 = HEAP8[$$2567$lcssa>>0]|0;
         $551 = $550&255;
         $552 = $551 >>> 2;
         $553 = $552 & 1;
         $554 = (0 - ($553))|0;
         $555 = $371 & $554;
         $556 = $555&255;
         HEAP8[$549>>0] = $556;
         $557 = ($$16$lcssa|0)>(6);
         if ($557) {
          $558 = ((($$4$lcssa)) + 6|0);
          $559 = HEAP8[$$2567$lcssa>>0]|0;
          $560 = $559&255;
          $561 = $560 >>> 1;
          $562 = $561 & 1;
          $563 = (0 - ($562))|0;
          $564 = $371 & $563;
          $565 = $564&255;
          HEAP8[$558>>0] = $565;
         }
        }
       }
      }
     }
    }
   }
   break;
  }
  default: {
  }
  }
  L207: do {
   if (!($17)) {
    $566 = HEAP32[$21>>2]|0;
    $567 = (($566) + ($361)|0);
    switch ($14|0) {
    case 1:  {
     if ($331) {
      $$0562719 = $$0562718;
     } else {
      break L207;
     }
     while(1) {
      $568 = $$0562719 << 1;
      $569 = $568 | 1;
      $570 = (($567) + ($569)|0);
      HEAP8[$570>>0] = -1;
      $571 = (($567) + ($$0562719)|0);
      $572 = HEAP8[$571>>0]|0;
      $573 = (($567) + ($568)|0);
      HEAP8[$573>>0] = $572;
      $$0562 = (($$0562719) + -1)|0;
      $574 = ($$0562|0)>(-1);
      if ($574) {
       $$0562719 = $$0562;
      } else {
       break;
      }
     }
     break;
    }
    case 3:  {
     if ($332) {
      $$1716 = $$1715;
     } else {
      break L207;
     }
     while(1) {
      $575 = $$1716 << 2;
      $576 = $575 | 3;
      $577 = (($567) + ($576)|0);
      HEAP8[$577>>0] = -1;
      $578 = ($$1716*3)|0;
      $579 = (($578) + 2)|0;
      $580 = (($567) + ($579)|0);
      $581 = HEAP8[$580>>0]|0;
      $582 = $575 | 2;
      $583 = (($567) + ($582)|0);
      HEAP8[$583>>0] = $581;
      $584 = (($578) + 1)|0;
      $585 = (($567) + ($584)|0);
      $586 = HEAP8[$585>>0]|0;
      $587 = $575 | 1;
      $588 = (($567) + ($587)|0);
      HEAP8[$588>>0] = $586;
      $589 = (($567) + ($578)|0);
      $590 = HEAP8[$589>>0]|0;
      $591 = (($567) + ($575)|0);
      HEAP8[$591>>0] = $590;
      $$1 = (($$1716) + -1)|0;
      $592 = ($$1|0)>(-1);
      if ($592) {
       $$1716 = $$1;
      } else {
       break;
      }
     }
     break;
    }
    default: {
     label = 140;
     break L168;
    }
    }
   }
  } while(0);
  $593 = (($$1618721) + 1)|0;
  $594 = ($593>>>0)<($5>>>0);
  $indvars$iv$next = (($indvars$iv) + ($12))|0;
  $indvars$iv$next843 = (($indvars$iv842) + ($12))|0;
  $indvars$iv$next846 = (($indvars$iv845) + ($12))|0;
  $indvars$iv$next849 = (($indvars$iv848) + ($12))|0;
  $indvars$iv$next852 = (($indvars$iv851) + ($12))|0;
  $indvars$iv$next855 = (($indvars$iv854) + ($12))|0;
  if ($594) {
   $$1618721 = $593;$indvars$iv = $indvars$iv$next;$indvars$iv842 = $indvars$iv$next843;$indvars$iv845 = $indvars$iv$next846;$indvars$iv848 = $indvars$iv$next849;$indvars$iv851 = $indvars$iv$next852;$indvars$iv854 = $indvars$iv$next855;
  } else {
   $$2 = 1;
   label = 147;
   break;
  }
 }
 if ((label|0) == 140) {
  ___assert_fail((10422|0),(9734|0),4465,(10319|0));
  // unreachable;
 }
 else if ((label|0) == 147) {
  return ($$2|0);
 }
 return (0)|0;
}
function _stbi__paeth($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos26 = 0, $ispos28 = 0, $neg = 0, $neg27 = 0, $neg29 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($1) + ($0))|0;
 $4 = (($3) - ($2))|0;
 $5 = (($4) - ($0))|0;
 $ispos = ($5|0)>(-1);
 $neg = (0 - ($5))|0;
 $6 = $ispos ? $5 : $neg;
 $7 = (($4) - ($1))|0;
 $ispos26 = ($7|0)>(-1);
 $neg27 = (0 - ($7))|0;
 $8 = $ispos26 ? $7 : $neg27;
 $9 = (($4) - ($2))|0;
 $ispos28 = ($9|0)>(-1);
 $neg29 = (0 - ($9))|0;
 $10 = $ispos28 ? $9 : $neg29;
 $11 = ($6|0)>($8|0);
 $12 = ($6|0)>($10|0);
 $or$cond = $11 | $12;
 $13 = ($8|0)>($10|0);
 $$ = $13 ? $2 : $1;
 $$0 = $or$cond ? $$ : $0;
 return ($$0|0);
}
function _stbi__do_zlib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = $1;
 $7 = (($1) + ($2)|0);
 $8 = ((($0)) + 24|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($0)) + 28|0);
 HEAP32[$9>>2] = $3;
 $10 = (_stbi__parse_zlib($0,$4)|0);
 return ($10|0);
}
function _stbi__parse_zlib($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (_stbi__parse_zlib_header($0)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 32|0);
 $8 = ((($0)) + 2052|0);
 L5: while(1) {
  $9 = (_stbi__zreceive($0,1)|0);
  $10 = (_stbi__zreceive($0,2)|0);
  switch ($10|0) {
  case 3:  {
   $$0 = 0;
   label = 11;
   break L5;
   break;
  }
  case 0:  {
   $11 = (_stbi__parse_uncompressed_block($0)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $$0 = 0;
    label = 11;
    break L5;
   }
   break;
  }
  case 1:  {
   $13 = (_stbi__zbuild_huffman($7,10433,288)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $$0 = 0;
    label = 11;
    break L5;
   }
   $15 = (_stbi__zbuild_huffman($8,10721,32)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0 = 0;
    label = 11;
    break L5;
   } else {
    label = 9;
   }
   break;
  }
  default: {
   $17 = (_stbi__compute_huffman_codes($0)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$0 = 0;
    label = 11;
    break L5;
   } else {
    label = 9;
   }
  }
  }
  if ((label|0) == 9) {
   label = 0;
   $19 = (_stbi__parse_huffman_block($0)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $$0 = 0;
    label = 11;
    break;
   }
  }
  $21 = ($9|0)==(0);
  if (!($21)) {
   $$0 = 1;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__parse_zlib_header($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_stbi__zget8($0)|0);
 $2 = $1&255;
 $3 = $2 & 15;
 $4 = (_stbi__zget8($0)|0);
 $5 = $4&255;
 $6 = $2 << 8;
 $7 = $6 | $5;
 $8 = (($7>>>0) % 31)&-1;
 $9 = ($8|0)==(0);
 if (!($9)) {
  _stbi__err(11087);
  $$0 = 0;
  return ($$0|0);
 }
 $10 = $5 & 32;
 $11 = ($10|0)==(0);
 if (!($11)) {
  _stbi__err(11103);
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ($3|0)==(8);
 if ($12) {
  $$0 = 1;
  return ($$0|0);
 }
 _stbi__err(11118);
 $$0 = 0;
 return ($$0|0);
}
function _stbi__zreceive($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<($1|0);
 if ($4) {
  _stbi__fill_bits($0);
 }
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = 1 << $1;
 $8 = (($7) + -1)|0;
 $9 = $6 & $8;
 $10 = $6 >>> $1;
 HEAP32[$5>>2] = $10;
 $11 = HEAP32[$2>>2]|0;
 $12 = (($11) - ($1))|0;
 HEAP32[$2>>2] = $12;
 return ($9|0);
}
function _stbi__parse_uncompressed_block($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$034 = 0, $$037 = 0, $$136 = 0, $$lcssa = 0, $$ph = 0, $$pr = 0, $$promoted = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond47 = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 7;
 $5 = ($4|0)==(0);
 if ($5) {
  $$ph = $3;
 } else {
  (_stbi__zreceive($0,$4)|0);
  $$pr = HEAP32[$2>>2]|0;
  $$ph = $$pr;
 }
 $6 = ($$ph|0)>(0);
 if ($6) {
  $7 = ((($0)) + 12|0);
  $$promoted = HEAP32[$7>>2]|0;
  $8 = $$ph ^ -1;
  $9 = ($8|0)>(-9);
  $smax = $9 ? $8 : -9;
  $10 = (($$ph) + ($smax))|0;
  $11 = (($10) + 8)|0;
  $12 = $11 >>> 3;
  $13 = (($12) + 1)|0;
  $14 = $12 << 3;
  $$037 = 0;$16 = $$promoted;
  while(1) {
   $15 = $16&255;
   $17 = (($$037) + 1)|0;
   $18 = (($1) + ($$037)|0);
   HEAP8[$18>>0] = $15;
   $19 = $16 >>> 8;
   $exitcond47 = ($17|0)==($13|0);
   if ($exitcond47) {
    break;
   } else {
    $$037 = $17;$16 = $19;
   }
  }
  $20 = (($$ph) + -8)|0;
  $21 = (($20) - ($14))|0;
  HEAP32[$7>>2] = $19;
  HEAP32[$2>>2] = $21;
  $$0$lcssa = $13;$$lcssa = $21;
 } else {
  $$0$lcssa = 0;$$lcssa = $$ph;
 }
 $22 = ($$lcssa|0)==(0);
 if (!($22)) {
  ___assert_fail((11009|0),(9734|0),4033,(11026|0));
  // unreachable;
 }
 $23 = ($$0$lcssa|0)<(4);
 if ($23) {
  $$136 = $$0$lcssa;
  while(1) {
   $24 = (_stbi__zget8($0)|0);
   $25 = (($$136) + 1)|0;
   $26 = (($1) + ($$136)|0);
   HEAP8[$26>>0] = $24;
   $exitcond = ($25|0)==(4);
   if ($exitcond) {
    break;
   } else {
    $$136 = $25;
   }
  }
 }
 $27 = ((($1)) + 1|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 8;
 $31 = HEAP8[$1>>0]|0;
 $32 = $31&255;
 $33 = $30 | $32;
 $34 = ((($1)) + 3|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 << 8;
 $38 = ((($1)) + 2|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $37 | $40;
 $42 = $33 ^ 65535;
 $43 = ($41|0)==($42|0);
 if (!($43)) {
  _stbi__err(11057);
  $$034 = 0;
  STACKTOP = sp;return ($$034|0);
 }
 $44 = HEAP32[$0>>2]|0;
 $45 = (($44) + ($33)|0);
 $46 = ((($0)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($45>>>0)>($47>>>0);
 if ($48) {
  _stbi__err(11070);
  $$034 = 0;
  STACKTOP = sp;return ($$034|0);
 }
 $49 = ((($0)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + ($33)|0);
 $52 = ((($0)) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($51>>>0)>($53>>>0);
 if ($54) {
  $55 = (_stbi__zexpand($0,$50,$33)|0);
  $56 = ($55|0)==(0);
  if ($56) {
   $$034 = 0;
   STACKTOP = sp;return ($$034|0);
  }
 }
 $57 = HEAP32[$49>>2]|0;
 $58 = HEAP32[$0>>2]|0;
 _memcpy(($57|0),($58|0),($33|0))|0;
 $59 = HEAP32[$0>>2]|0;
 $60 = (($59) + ($33)|0);
 HEAP32[$0>>2] = $60;
 $61 = HEAP32[$49>>2]|0;
 $62 = (($61) + ($33)|0);
 HEAP32[$49>>2] = $62;
 $$034 = 1;
 STACKTOP = sp;return ($$034|0);
}
function _stbi__zbuild_huffman($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$075 = 0, $$07688 = 0, $$07785 = 0, $$07884 = 0, $$081 = 0, $$286 = 0, $$382 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond91 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = sp + 72|0;
 $4 = sp;
 dest=$4; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _memset(($0|0),0,1024)|0;
 $5 = ($2|0)>(0);
 if ($5) {
  $$07688 = 0;
  while(1) {
   $6 = (($1) + ($$07688)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = (($4) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 1)|0;
   HEAP32[$9>>2] = $11;
   $12 = (($$07688) + 1)|0;
   $exitcond91 = ($12|0)==($2|0);
   if ($exitcond91) {
    break;
   } else {
    $$07688 = $12;
   }
  }
 }
 HEAP32[$4>>2] = 0;
 $16 = ((($4)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)>(2);
 if (!($18)) {
  $13 = ((($4)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)>(4);
  if (!($15)) {
   $69 = ((($4)) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)>(8);
   if (!($71)) {
    $72 = ((($4)) + 16|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)>(16);
    if (!($74)) {
     $75 = ((($4)) + 20|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)>(32);
     if (!($77)) {
      $78 = ((($4)) + 24|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)>(64);
      if (!($80)) {
       $81 = ((($4)) + 28|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ($82|0)>(128);
       if (!($83)) {
        $84 = ((($4)) + 32|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = ($85|0)>(256);
        if (!($86)) {
         $87 = ((($4)) + 36|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = ($88|0)>(512);
         if (!($89)) {
          $90 = ((($4)) + 40|0);
          $91 = HEAP32[$90>>2]|0;
          $92 = ($91|0)>(1024);
          if (!($92)) {
           $93 = ((($4)) + 44|0);
           $94 = HEAP32[$93>>2]|0;
           $95 = ($94|0)>(2048);
           if (!($95)) {
            $96 = ((($4)) + 48|0);
            $97 = HEAP32[$96>>2]|0;
            $98 = ($97|0)>(4096);
            if (!($98)) {
             $99 = ((($4)) + 52|0);
             $100 = HEAP32[$99>>2]|0;
             $101 = ($100|0)>(8192);
             if (!($101)) {
              $102 = ((($4)) + 56|0);
              $103 = HEAP32[$102>>2]|0;
              $104 = ($103|0)>(16384);
              if (!($104)) {
               $105 = ((($4)) + 60|0);
               $106 = HEAP32[$105>>2]|0;
               $107 = ($106|0)>(32768);
               if (!($107)) {
                $$07785 = 0;$$07884 = 0;$$286 = 1;
                while(1) {
                 $19 = (($3) + ($$286<<2)|0);
                 HEAP32[$19>>2] = $$07884;
                 $20 = $$07884&65535;
                 $21 = (((($0)) + 1024|0) + ($$286<<1)|0);
                 HEAP16[$21>>1] = $20;
                 $22 = $$07785&65535;
                 $23 = (((($0)) + 1124|0) + ($$286<<1)|0);
                 HEAP16[$23>>1] = $22;
                 $24 = (($4) + ($$286<<2)|0);
                 $25 = HEAP32[$24>>2]|0;
                 $26 = (($25) + ($$07884))|0;
                 $27 = ($25|0)!=(0);
                 $28 = 1 << $$286;
                 $29 = ($26|0)>($28|0);
                 $or$cond = $27 & $29;
                 if ($or$cond) {
                  label = 7;
                  break;
                 }
                 $30 = (16 - ($$286))|0;
                 $31 = $26 << $30;
                 $32 = (((($0)) + 1056|0) + ($$286<<2)|0);
                 HEAP32[$32>>2] = $31;
                 $33 = $26 << 1;
                 $34 = (($25) + ($$07785))|0;
                 $35 = (($$286) + 1)|0;
                 $36 = ($35|0)<(16);
                 if ($36) {
                  $$07785 = $34;$$07884 = $33;$$286 = $35;
                 } else {
                  break;
                 }
                }
                if ((label|0) == 7) {
                 _stbi__err(10947);
                 $$075 = 0;
                 STACKTOP = sp;return ($$075|0);
                }
                $37 = ((($0)) + 1120|0);
                HEAP32[$37>>2] = 65536;
                $38 = ($2|0)>(0);
                if ($38) {
                 $$382 = 0;
                } else {
                 $$075 = 1;
                 STACKTOP = sp;return ($$075|0);
                }
                while(1) {
                 $39 = (($1) + ($$382)|0);
                 $40 = HEAP8[$39>>0]|0;
                 $41 = $40&255;
                 $42 = ($40<<24>>24)==(0);
                 if (!($42)) {
                  $43 = (($3) + ($41<<2)|0);
                  $44 = HEAP32[$43>>2]|0;
                  $45 = (((($0)) + 1024|0) + ($41<<1)|0);
                  $46 = HEAP16[$45>>1]|0;
                  $47 = $46&65535;
                  $48 = (($44) - ($47))|0;
                  $49 = (((($0)) + 1124|0) + ($41<<1)|0);
                  $50 = HEAP16[$49>>1]|0;
                  $51 = $50&65535;
                  $52 = (($48) + ($51))|0;
                  $53 = $41 << 9;
                  $54 = $53 | $$382;
                  $55 = $54&65535;
                  $56 = (((($0)) + 1156|0) + ($52)|0);
                  HEAP8[$56>>0] = $40;
                  $57 = $$382&65535;
                  $58 = (((($0)) + 1444|0) + ($52<<1)|0);
                  HEAP16[$58>>1] = $57;
                  $59 = ($40&255)<(10);
                  do {
                   if ($59) {
                    $60 = (_stbi__bit_reverse($44,$41)|0);
                    $61 = ($60|0)<(512);
                    if (!($61)) {
                     break;
                    }
                    $62 = 1 << $41;
                    $$081 = $60;
                    while(1) {
                     $63 = (($0) + ($$081<<1)|0);
                     HEAP16[$63>>1] = $55;
                     $64 = (($$081) + ($62))|0;
                     $65 = ($64|0)<(512);
                     if ($65) {
                      $$081 = $64;
                     } else {
                      break;
                     }
                    }
                   }
                  } while(0);
                  $66 = HEAP32[$43>>2]|0;
                  $67 = (($66) + 1)|0;
                  HEAP32[$43>>2] = $67;
                 }
                 $68 = (($$382) + 1)|0;
                 $exitcond = ($68|0)==($2|0);
                 if ($exitcond) {
                  $$075 = 1;
                  break;
                 } else {
                  $$382 = $68;
                 }
                }
                STACKTOP = sp;return ($$075|0);
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 _stbi__err(10999);
 $$075 = 0;
 STACKTOP = sp;return ($$075|0);
}
function _stbi__compute_huffman_codes($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$061 = 0, $$06579 = 0, $$066$be = 0, $$066$lcssa = 0, $$06678 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $not$ = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2496|0);
 $1 = sp;
 $2 = sp + 2039|0;
 $3 = sp + 2020|0;
 $4 = (_stbi__zreceive($0,5)|0);
 $5 = (($4) + 257)|0;
 $6 = (_stbi__zreceive($0,5)|0);
 $7 = (($6) + 1)|0;
 $8 = (_stbi__zreceive($0,4)|0);
 $9 = (($8) + 4)|0;
 $10 = (($7) + ($5))|0;
 dest=$3; stop=dest+19|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $11 = ($9|0)>(0);
 if ($11) {
  $$06579 = 0;
  while(1) {
   $12 = (_stbi__zreceive($0,3)|0);
   $13 = $12&255;
   $14 = (10928 + ($$06579)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = (($3) + ($16)|0);
   HEAP8[$17>>0] = $13;
   $18 = (($$06579) + 1)|0;
   $exitcond = ($18|0)==($9|0);
   if ($exitcond) {
    break;
   } else {
    $$06579 = $18;
   }
  }
 }
 $19 = (_stbi__zbuild_huffman($1,$3,19)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $21 = ($10|0)>(0);
 L8: do {
  if ($21) {
   $$06678 = 0;
   L9: while(1) {
    $22 = (_stbi__zhuffman_decode($0,$1)|0);
    $23 = ($22>>>0)>(18);
    if ($23) {
     label = 6;
     break;
    }
    $24 = ($22|0)<(16);
    if ($24) {
     $25 = $22&255;
     $26 = (($$06678) + 1)|0;
     $27 = (($2) + ($$06678)|0);
     HEAP8[$27>>0] = $25;
     $$066$be = $26;
    } else {
     switch ($22|0) {
     case 16:  {
      $28 = (_stbi__zreceive($0,2)|0);
      $29 = ($$06678|0)==(0);
      if ($29) {
       label = 11;
       break L9;
      }
      $30 = (($28) + 3)|0;
      $31 = (($$06678) + -1)|0;
      $32 = (($2) + ($31)|0);
      $33 = HEAP8[$32>>0]|0;
      $$0 = $33;$$061 = $30;
      break;
     }
     case 17:  {
      $34 = (_stbi__zreceive($0,3)|0);
      $35 = (($34) + 3)|0;
      $$0 = 0;$$061 = $35;
      break;
     }
     case 18:  {
      $36 = (_stbi__zreceive($0,7)|0);
      $37 = (($36) + 11)|0;
      $$0 = 0;$$061 = $37;
      break;
     }
     default: {
      label = 14;
      break L9;
     }
     }
     $38 = (($10) - ($$06678))|0;
     $39 = ($38|0)<($$061|0);
     if ($39) {
      label = 17;
      break;
     }
     $40 = (($2) + ($$06678)|0);
     _memset(($40|0),($$0|0),($$061|0))|0;
     $41 = (($$061) + ($$06678))|0;
     $$066$be = $41;
    }
    $42 = ($10|0)>($$066$be|0);
    if ($42) {
     $$06678 = $$066$be;
    } else {
     $$066$lcssa = $$066$be;
     break L8;
    }
   }
   if ((label|0) == 6) {
    _stbi__err(10947);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 11) {
    _stbi__err(10947);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 14) {
    ___assert_fail((10963|0),(9734|0),4006,(10971|0));
    // unreachable;
   }
   else if ((label|0) == 17) {
    _stbi__err(10947);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
  } else {
   $$066$lcssa = 0;
  }
 } while(0);
 $43 = ($10|0)==($$066$lcssa|0);
 if (!($43)) {
  _stbi__err(10947);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $44 = ((($0)) + 32|0);
 $45 = (_stbi__zbuild_huffman($44,$2,$5)|0);
 $46 = ($45|0)==(0);
 if ($46) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $47 = ((($0)) + 2052|0);
 $48 = (($2) + ($5)|0);
 $49 = (_stbi__zbuild_huffman($47,$48,$7)|0);
 $not$ = ($49|0)!=(0);
 $$ = $not$&1;
 $$4 = $$;
 STACKTOP = sp;return ($$4|0);
}
function _stbi__parse_huffman_block($0) {
 $0 = $0|0;
 var $$063 = 0, $$064 = 0, $$067 = 0, $$070 = 0, $$171 = 0, $$266 = 0, $$272 = 0, $$3$ph = 0, $$5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 32|0);
 $4 = ((($0)) + 24|0);
 $5 = ((($0)) + 2052|0);
 $6 = ((($0)) + 20|0);
 $7 = ((($0)) + 24|0);
 $$070 = $2;
 while(1) {
  $10 = (_stbi__zhuffman_decode($0,$3)|0);
  $11 = ($10|0)<(256);
  if ($11) {
   $12 = ($10|0)<(0);
   if ($12) {
    label = 6;
    break;
   }
   $13 = HEAP32[$4>>2]|0;
   $14 = ($$070>>>0)<($13>>>0);
   if ($14) {
    $$171 = $$070;
   } else {
    $15 = (_stbi__zexpand($0,$$070,1)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $$3$ph = 0;
     label = 28;
     break;
    }
    $17 = HEAP32[$1>>2]|0;
    $$171 = $17;
   }
   $18 = $10&255;
   $19 = ((($$171)) + 1|0);
   HEAP8[$$171>>0] = $18;
   $$070 = $19;
   continue;
  }
  $20 = ($10|0)==(256);
  if ($20) {
   label = 12;
   break;
  }
  $21 = (($10) + -257)|0;
  $22 = (3384 + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($10) + -265)|0;
  $25 = ($24>>>0)<(20);
  if ($25) {
   $26 = (3508 + ($21<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_stbi__zreceive($0,$27)|0);
   $29 = (($28) + ($23))|0;
   $$064 = $29;
  } else {
   $$064 = $23;
  }
  $30 = (_stbi__zhuffman_decode($0,$5)|0);
  $31 = ($30|0)<(0);
  if ($31) {
   label = 16;
   break;
  }
  $32 = (3632 + ($30<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($30) + -4)|0;
  $35 = ($34>>>0)<(26);
  if ($35) {
   $36 = (3760 + ($30<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (_stbi__zreceive($0,$37)|0);
   $39 = (($38) + ($33))|0;
   $$063 = $39;
  } else {
   $$063 = $33;
  }
  $40 = HEAP32[$6>>2]|0;
  $41 = $$070;
  $42 = (($41) - ($40))|0;
  $43 = ($42|0)<($$063|0);
  if ($43) {
   label = 20;
   break;
  }
  $44 = (($$070) + ($$064)|0);
  $45 = HEAP32[$7>>2]|0;
  $46 = ($44>>>0)>($45>>>0);
  if ($46) {
   $47 = (_stbi__zexpand($0,$$070,$$064)|0);
   $48 = ($47|0)==(0);
   if ($48) {
    $$3$ph = 0;
    label = 28;
    break;
   }
   $49 = HEAP32[$1>>2]|0;
   $$272 = $49;
  } else {
   $$272 = $$070;
  }
  $50 = (0 - ($$063))|0;
  $9 = (($$272) + ($50)|0);
  $51 = ($$063|0)==(1);
  $52 = ($$064|0)!=(0);
  if ($51) {
   if (!($52)) {
    $$070 = $$272;
    continue;
   }
   $8 = HEAP8[$9>>0]|0;
   _memset(($$272|0),($8|0),($$064|0))|0;
   $scevgep92 = (($$272) + ($$064)|0);
   $$070 = $scevgep92;
   continue;
  }
  if ($52) {
   $$067 = $9;$$266 = $$064;$$5 = $$272;
  } else {
   $$070 = $$272;
   continue;
  }
  while(1) {
   $53 = ((($$067)) + 1|0);
   $54 = HEAP8[$$067>>0]|0;
   $55 = ((($$5)) + 1|0);
   HEAP8[$$5>>0] = $54;
   $56 = (($$266) + -1)|0;
   $57 = ($56|0)==(0);
   if ($57) {
    break;
   } else {
    $$067 = $53;$$266 = $56;$$5 = $55;
   }
  }
  $scevgep = (($$272) + ($$064)|0);
  $$070 = $scevgep;
 }
 if ((label|0) == 6) {
  _stbi__err(10753);
  $$3$ph = 0;
  return ($$3$ph|0);
 }
 else if ((label|0) == 12) {
  HEAP32[$1>>2] = $$070;
  $$3$ph = 1;
  return ($$3$ph|0);
 }
 else if ((label|0) == 16) {
  _stbi__err(10753);
  $$3$ph = 0;
  return ($$3$ph|0);
 }
 else if ((label|0) == 20) {
  _stbi__err(10770);
  $$3$ph = 0;
  return ($$3$ph|0);
 }
 else if ((label|0) == 28) {
  return ($$3$ph|0);
 }
 return (0)|0;
}
function _stbi__zhuffman_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(16);
 if ($4) {
  _stbi__fill_bits($0);
 }
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 511;
 $8 = (($1) + ($7<<1)|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($9<<16>>16)==(0);
 if ($11) {
  $17 = (_stbi__zhuffman_decode_slowpath($0,$1)|0);
  $$0 = $17;
  return ($$0|0);
 } else {
  $12 = $10 >>> 9;
  $13 = $6 >>> $12;
  HEAP32[$5>>2] = $13;
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) - ($12))|0;
  HEAP32[$2>>2] = $15;
  $16 = $10 & 511;
  $$0 = $16;
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__zexpand($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$029 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  _stbi__err(10779);
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = ((($0)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) - ($10))|0;
 $15 = (($11) + ($2))|0;
 $$029 = $14;
 while(1) {
  $16 = ($15|0)>($$029|0);
  $17 = $$029 << 1;
  if ($16) {
   $$029 = $17;
  } else {
   break;
  }
 }
 $18 = (_realloc($8,$$029)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  _stbi__err(9699);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$7>>2] = $18;
  $20 = (($18) + ($11)|0);
  HEAP32[$3>>2] = $20;
  $21 = (($18) + ($$029)|0);
  HEAP32[$12>>2] = $21;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__fill_bits($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = ((($0)) + 8|0);
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = 1 << $4;
  $6 = ($3>>>0)<($5>>>0);
  if (!($6)) {
   label = 3;
   break;
  }
  $7 = (_stbi__zget8($0)|0);
  $8 = $7&255;
  $9 = HEAP32[$2>>2]|0;
  $10 = $8 << $9;
  $11 = HEAP32[$1>>2]|0;
  $12 = $11 | $10;
  HEAP32[$1>>2] = $12;
  $13 = (($9) + 8)|0;
  HEAP32[$2>>2] = $13;
  $14 = ($13|0)<(25);
  if (!($14)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  ___assert_fail((10875|0),(9734|0),3848,(10912|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  return;
 }
}
function _stbi__zhuffman_decode_slowpath($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$025 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_stbi__bit_reverse($3,16)|0);
 $$025 = 10;
 while(1) {
  $5 = (((($1)) + 1056|0) + ($$025<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)<($6|0);
  $8 = (($$025) + 1)|0;
  if ($7) {
   break;
  } else {
   $$025 = $8;
  }
 }
 $9 = ($$025|0)==(16);
 if ($9) {
  $$0 = -1;
  return ($$0|0);
 }
 $10 = (16 - ($$025))|0;
 $11 = $4 >> $10;
 $12 = (((($1)) + 1024|0) + ($$025<<1)|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = (($11) - ($14))|0;
 $16 = (((($1)) + 1124|0) + ($$025<<1)|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = (($15) + ($18))|0;
 $20 = (((($1)) + 1156|0) + ($19)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = ($22|0)==($$025|0);
 if (!($23)) {
  ___assert_fail((10799|0),(9734|0),3876,(10815|0));
  // unreachable;
 }
 $24 = HEAP32[$2>>2]|0;
 $25 = $24 >>> $$025;
 HEAP32[$2>>2] = $25;
 $26 = ((($0)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) - ($$025))|0;
 HEAP32[$26>>2] = $28;
 $29 = (((($1)) + 1444|0) + ($19<<1)|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30&65535;
 $$0 = $31;
 return ($$0|0);
}
function _stbi__bit_reverse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)<(17);
 if ($2) {
  $3 = (_stbi__bitreverse16($0)|0);
  $4 = (16 - ($1))|0;
  $5 = $3 >> $4;
  return ($5|0);
 } else {
  ___assert_fail((10846|0),(9734|0),3766,(10857|0));
  // unreachable;
 }
 return (0)|0;
}
function _stbi__bitreverse16($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = $0 >>> 1;
 $2 = $1 & 21845;
 $3 = $0 << 1;
 $4 = $3 & 43690;
 $5 = $2 | $4;
 $6 = $5 >>> 2;
 $7 = $6 & 13107;
 $8 = $5 << 2;
 $9 = $8 & 52428;
 $10 = $7 | $9;
 $11 = $10 >>> 4;
 $12 = $11 & 3855;
 $13 = $10 << 4;
 $14 = $13 & 61680;
 $15 = $12 | $14;
 $16 = $15 >>> 8;
 $17 = $15 << 8;
 $18 = $17 & 65280;
 $19 = $18 | $16;
 return ($19|0);
}
function _stbi__zget8($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($1)) + 1|0);
 HEAP32[$0>>2] = $5;
 $6 = HEAP8[$1>>0]|0;
 $$0 = $6;
 return ($$0|0);
}
function _stbi__refill_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 40|0);
 $6 = ((($0)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$2 & 15]($4,$5,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = ((($0)) + 32|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($0)) + 168|0);
  HEAP32[$11>>2] = $5;
  $12 = ((($0)) + 41|0);
  $13 = ((($0)) + 172|0);
  HEAP32[$13>>2] = $12;
  HEAP8[$5>>0] = 0;
  return;
 } else {
  $14 = ((($0)) + 168|0);
  HEAP32[$14>>2] = $5;
  $15 = (((($0)) + 40|0) + ($8)|0);
  $16 = ((($0)) + 172|0);
  HEAP32[$16>>2] = $15;
  return;
 }
}
function _stbi__rewind($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 176|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 168|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 180|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 172|0);
 HEAP32[$6>>2] = $5;
 return;
}
function _stbi__hdr_gettoken($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$014 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$014 = 0;
 while(1) {
  $2 = (_stbi__get8($0)|0);
  $3 = (_stbi__at_eof($0)|0);
  $4 = ($3|0)!=(0);
  $5 = ($2<<24>>24)==(10);
  $or$cond = $5 | $4;
  if ($or$cond) {
   $$1 = $$014;
   break;
  }
  $6 = (($$014) + 1)|0;
  $7 = (($1) + ($$014)|0);
  HEAP8[$7>>0] = $2;
  $8 = ($6|0)==(1023);
  if ($8) {
   label = 4;
   break;
  } else {
   $$014 = $6;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   while(1) {
    label = 0;
    $9 = (_stbi__at_eof($0)|0);
    $10 = ($9|0)==(0);
    if (!($10)) {
     $$1 = $6;
     break L4;
    }
    $11 = (_stbi__get8($0)|0);
    $12 = ($11<<24>>24)==(10);
    if ($12) {
     $$1 = $6;
     break;
    } else {
     label = 4;
    }
   }
  }
 } while(0);
 $13 = (($1) + ($$1)|0);
 HEAP8[$13>>0] = 0;
 return ($1|0);
}
function _stbi__hdr_convert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0.0, $$sink1 = 0, $$sink30 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  switch ($2|0) {
  case 4:  {
   $38 = ((($0)) + 12|0);
   HEAPF32[$38>>2] = 1.0;
   label = 10;
   break;
  }
  case 3:  {
   label = 10;
   break;
  }
  case 2:  {
   $$sink30 = 1.0;
   label = 11;
   break;
  }
  case 1:  {
   break;
  }
  default: {
   return;
  }
  }
  if ((label|0) == 10) {
   $39 = ((($0)) + 8|0);
   HEAPF32[$39>>2] = 0.0;
   $$sink30 = 0.0;
   label = 11;
  }
  if ((label|0) == 11) {
   $40 = ((($0)) + 4|0);
   HEAPF32[$40>>2] = $$sink30;
  }
  HEAPF32[$0>>2] = 0.0;
  return;
 }
 $6 = $4&255;
 $7 = (($6) + -136)|0;
 $8 = (+_ldexp(1.0,$7));
 $9 = $8;
 $10 = ($2|0)<(3);
 $11 = HEAP8[$1>>0]|0;
 if ($10) {
  $12 = $11&255;
  $13 = ((($1)) + 1|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = (($15) + ($12))|0;
  $17 = ((($1)) + 2|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (($16) + ($19))|0;
  $21 = (+($20|0));
  $22 = $9 * $21;
  $23 = $22 / 3.0;
  $$sink = $23;$$sink1 = $0;
 } else {
  $24 = (+($11&255));
  $25 = $9 * $24;
  HEAPF32[$0>>2] = $25;
  $26 = ((($1)) + 1|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = (+($27&255));
  $29 = $9 * $28;
  $30 = ((($0)) + 4|0);
  HEAPF32[$30>>2] = $29;
  $31 = ((($1)) + 2|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = (+($32&255));
  $34 = $9 * $33;
  $35 = ((($0)) + 8|0);
  $$sink = $34;$$sink1 = $35;
 }
 HEAPF32[$$sink1>>2] = $$sink;
 switch ($2|0) {
 case 2:  {
  $36 = ((($0)) + 4|0);
  HEAPF32[$36>>2] = 1.0;
  return;
  break;
 }
 case 4:  {
  $37 = ((($0)) + 12|0);
  HEAPF32[$37>>2] = 1.0;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _stbi__at_eof($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (FUNCTION_TABLE_ii[$5 & 15]($7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = 0;
   return ($$0|0);
  }
  $10 = ((($0)) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $13 = ((($0)) + 168|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 172|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($14>>>0)>=($16>>>0);
 $18 = $17&1;
 $$0 = $18;
 return ($$0|0);
}
function _stbi__hdr_test_core($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07 = 0, $$08 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if (!($3)) {
   $$08 = 0;$11 = $1;
   while(1) {
    $8 = (_stbi__get8($0)|0);
    $9 = $8&255;
    $10 = HEAP8[$11>>0]|0;
    $12 = $10 << 24 >> 24;
    $13 = ($9|0)==($12|0);
    $5 = (($$08) + 1)|0;
    if (!($13)) {
     $$07 = 0;
     break;
    }
    $4 = (($1) + ($5)|0);
    $6 = HEAP8[$4>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     break L1;
    } else {
     $$08 = $5;$11 = $4;
    }
   }
   return ($$07|0);
  }
 } while(0);
 _stbi__rewind($0);
 $$07 = 1;
 return ($$07|0);
}
function _stbi__start_callbacks($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 ;HEAP32[$3>>2]=HEAP32[$1>>2]|0;HEAP32[$3+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$1+8>>2]|0;
 $4 = ((($0)) + 28|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($0)) + 36|0);
 HEAP32[$5>>2] = 128;
 $6 = ((($0)) + 32|0);
 HEAP32[$6>>2] = 1;
 $7 = ((($0)) + 40|0);
 $8 = ((($0)) + 176|0);
 HEAP32[$8>>2] = $7;
 _stbi__refill_buffer($0);
 $9 = ((($0)) + 172|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 180|0);
 HEAP32[$11>>2] = $10;
 return;
}
function _stbi__stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_fread($1,1,$2,$0)|0);
 return ($3|0);
}
function _stbi__stdio_skip($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_fseek($0,$1,1)|0);
 return;
}
function _stbi__stdio_eof($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_feof($0)|0);
 return ($1|0);
}
function _ImageCopy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$sroa$6$0 = 0, $$sroa$6$0$$sroa_idx11 = 0, $$sroa$7$0 = 0, $$sroa$7$0$$sroa_idx13 = 0, $$sroa$8$0 = 0, $$sroa$8$0$$sroa_idx15 = 0, $$sroa$9$0 = 0, $$sroa$9$0$$sroa_idx17 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($5, $3)|0;
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 switch ($8|0) {
 case 18: case 15: case 12: case 11: case 1:  {
  $$0 = $6;
  break;
 }
 case 6: case 5: case 3: case 2:  {
  $9 = $6 << 1;
  $$0 = $9;
  break;
 }
 case 4:  {
  $10 = ($6*3)|0;
  $$0 = $10;
  break;
 }
 case 7:  {
  $11 = $6 << 2;
  $$0 = $11;
  break;
 }
 case 8:  {
  $12 = ($6*12)|0;
  $$0 = $12;
  break;
 }
 case 17: case 16: case 14: case 13: case 10: case 9:  {
  $13 = (($6|0) / 2)&-1;
  $$0 = $13;
  break;
 }
 case 19:  {
  $14 = (($6|0) / 4)&-1;
  $$0 = $14;
  break;
 }
 default: {
  _TraceLog(1,11800,$vararg_buffer);
  $$0 = $6;
 }
 }
 $15 = (_malloc($$0)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$sroa$6$0 = 0;$$sroa$7$0 = 0;$$sroa$8$0 = 0;$$sroa$9$0 = 0;
 } else {
  $17 = HEAP32[$1>>2]|0;
  _memcpy(($15|0),($17|0),($$0|0))|0;
  $18 = HEAP32[$2>>2]|0;
  $19 = HEAP32[$4>>2]|0;
  $20 = ((($1)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $$sroa$6$0 = $18;$$sroa$7$0 = $19;$$sroa$8$0 = $21;$$sroa$9$0 = $22;
 }
 HEAP32[$0>>2] = $15;
 $$sroa$6$0$$sroa_idx11 = ((($0)) + 4|0);
 HEAP32[$$sroa$6$0$$sroa_idx11>>2] = $$sroa$6$0;
 $$sroa$7$0$$sroa_idx13 = ((($0)) + 8|0);
 HEAP32[$$sroa$7$0$$sroa_idx13>>2] = $$sroa$7$0;
 $$sroa$8$0$$sroa_idx15 = ((($0)) + 12|0);
 HEAP32[$$sroa$8$0$$sroa_idx15>>2] = $$sroa$8$0;
 $$sroa$9$0$$sroa_idx17 = ((($0)) + 16|0);
 HEAP32[$$sroa$9$0$$sroa_idx17>>2] = $$sroa$9$0;
 STACKTOP = sp;return;
}
function _ImageAlphaMask($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$031 = 0, $$032 = 0, $$033 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy3 = sp + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 12|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)==($11|0);
  if ($12) {
   $13 = ((($0)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)>(8);
   if ($15) {
    _TraceLog(1,11743,$vararg_buffer1);
    STACKTOP = sp;return;
   }
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$$byval_copy3+16>>2]=HEAP32[$1+16>>2]|0;
   _ImageCopy($2,$$byval_copy3);
   $16 = ((($2)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(1);
   if (!($18)) {
    _ImageFormat($2,1);
   }
   $19 = HEAP32[$13>>2]|0;
   L11: do {
    switch ($19|0) {
    case 1:  {
     _ImageFormat($0,2);
     $20 = ((($2)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ((($2)) + 8|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = Math_imul($23, $21)|0;
     $25 = HEAP32[$2>>2]|0;
     $$032 = 1;$$033 = 0;
     while(1) {
      $26 = ($$033|0)<($24|0);
      if (!($26)) {
       $27 = HEAP32[$3>>2]|0;
       $28 = HEAP32[$8>>2]|0;
       $29 = Math_imul($28, $27)|0;
       $30 = ($$033|0)<($29|0);
       if (!($30)) {
        break L11;
       }
      }
      $31 = (($25) + ($$033)|0);
      $32 = HEAP8[$31>>0]|0;
      $33 = HEAP32[$0>>2]|0;
      $34 = (($33) + ($$032)|0);
      HEAP8[$34>>0] = $32;
      $35 = (($$033) + 1)|0;
      $36 = (($$032) + 2)|0;
      $$032 = $36;$$033 = $35;
     }
     break;
    }
    case 7:  {
     label = 14;
     break;
    }
    default: {
     _ImageFormat($0,7);
     label = 14;
    }
    }
   } while(0);
   L19: do {
    if ((label|0) == 14) {
     $37 = ((($2)) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($2)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = Math_imul($40, $38)|0;
     $42 = HEAP32[$2>>2]|0;
     $$0 = 3;$$031 = 0;
     while(1) {
      $43 = ($$031|0)<($41|0);
      if (!($43)) {
       $44 = HEAP32[$3>>2]|0;
       $45 = HEAP32[$8>>2]|0;
       $46 = Math_imul($45, $44)|0;
       $47 = ($$031|0)<($46|0);
       if (!($47)) {
        break L19;
       }
      }
      $48 = (($42) + ($$031)|0);
      $49 = HEAP8[$48>>0]|0;
      $50 = HEAP32[$0>>2]|0;
      $51 = (($50) + ($$0)|0);
      HEAP8[$51>>0] = $49;
      $52 = (($$031) + 1)|0;
      $53 = (($$0) + 4)|0;
      $$0 = $53;$$031 = $52;
     }
    }
   } while(0);
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$byval_copy3+16>>2]=HEAP32[$2+16>>2]|0;
   _UnloadImage($$byval_copy3);
   STACKTOP = sp;return;
  }
 }
 _TraceLog(1,11705,$vararg_buffer);
 STACKTOP = sp;return;
}
function _UnloadSpriteFont($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 40|0;
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $2 = HEAP32[$0>>2]|0;
 _GetDefaultFont($1);
 $3 = HEAP32[$1>>2]|0;
 $4 = ($2|0)==($3|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;
 _UnloadTexture($$byval_copy);
 $5 = ((($0)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 _TraceLog(3,11679,$vararg_buffer);
 STACKTOP = sp;return;
}
function _LoadTTF($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0124130 = 0, $$0125129 = 0, $$0128 = 0, $$byval_copy9 = 0, $$sroa$0 = 0, $$sroa$10$0$$sroa_idx58 = 0, $$sroa$10$0$$sroa_idx59 = 0, $$sroa$6$0$$sroa_idx49 = 0, $$sroa$6$0$$sroa_idx50 = 0, $$sroa$7$0$$sroa_idx53 = 0, $$sroa$7$0$$sroa_idx54 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $9 = 0.0, $exitcond = 0, $exp2 = 0.0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy9 = sp + 48|0;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $$sroa$0 = sp;
 $5 = sp + 68|0;
 $6 = sp + 88|0;
 $7 = (+($2|0));
 $8 = $7 * 3.0;
 $9 = $8 * 0.25;
 $10 = (+Math_ceil((+$9)));
 $11 = (+($3|0));
 $12 = (+Math_sqrt((+$11)));
 $13 = (+Math_ceil((+$12)));
 $14 = $10 * $13;
 $15 = (+Math_log((+$14)));
 $16 = $15 / 0.69314718246459961;
 $17 = (+Math_ceil((+$16)));
 $exp2 = (+_llvm_exp2_f32((+$17)));
 $18 = (~~(($exp2)));
 HEAP32[$$byval_copy9>>2] = $18;
 $vararg_ptr1 = ((($$byval_copy9)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $18;
 _TraceLog(0,11887,$$byval_copy9);
 $19 = (_malloc(16777216)|0);
 $20 = Math_imul($18, $18)|0;
 $21 = (_malloc($20)|0);
 $22 = ($3*20)|0;
 $23 = (_malloc($22)|0);
 ;HEAP32[$$sroa$0>>2]=0|0;HEAP32[$$sroa$0+4>>2]=0|0;HEAP32[$$sroa$0+8>>2]=0|0;HEAP32[$$sroa$0+12>>2]=0|0;HEAP32[$$sroa$0+16>>2]=0|0;
 $24 = (_fopen($1,14498)|0);
 $25 = ($24|0)==(0|0);
 if ($25) {
  HEAP32[$vararg_buffer2>>2] = $1;
  _TraceLog(1,11941,$vararg_buffer2);
  ;HEAP32[$0>>2]=HEAP32[$$sroa$0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$$sroa$0+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$$sroa$0+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$$sroa$0+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$$sroa$0+16>>2]|0;
  $$sroa$6$0$$sroa_idx49 = ((($0)) + 20|0);
  HEAP32[$$sroa$6$0$$sroa_idx49>>2] = 0;
  $$sroa$7$0$$sroa_idx53 = ((($0)) + 24|0);
  HEAP32[$$sroa$7$0$$sroa_idx53>>2] = 0;
  $$sroa$10$0$$sroa_idx58 = ((($0)) + 28|0);
  HEAP32[$$sroa$10$0$$sroa_idx58>>2] = 0;
  STACKTOP = sp;return;
 }
 (_fread($19,1,16777216,$24)|0);
 $26 = HEAP32[$4>>2]|0;
 $27 = ($26|0)==(32);
 if (!($27)) {
  _TraceLog(1,11975,$vararg_buffer5);
 }
 $28 = HEAP32[$4>>2]|0;
 $29 = (_stbtt_BakeFontBitmap($19,$7,$21,$18,$18,$28,$3,$23)|0);
 $30 = ($29|0)<(0);
 if ($30) {
  _TraceLog(1,12042,$vararg_buffer7);
 }
 _free($19);
 $31 = $20 << 1;
 $32 = (_malloc($31)|0);
 $33 = ($20|0)==(0);
 if (!($33)) {
  $$0124130 = 0;$$0125129 = 0;
  while(1) {
   $41 = (($32) + ($$0124130)|0);
   HEAP8[$41>>0] = -1;
   $42 = (($21) + ($$0125129)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $$0124130 | 1;
   $45 = (($32) + ($44)|0);
   HEAP8[$45>>0] = $43;
   $46 = (($$0125129) + 1)|0;
   $47 = (($$0124130) + 2)|0;
   $48 = ($46|0)<($20|0);
   if ($48) {
    $$0124130 = $47;$$0125129 = $46;
   } else {
    break;
   }
  }
 }
 _free($21);
 $34 = ((($5)) + 4|0);
 HEAP32[$34>>2] = $18;
 $35 = ((($5)) + 8|0);
 HEAP32[$35>>2] = $18;
 $36 = ((($5)) + 12|0);
 HEAP32[$36>>2] = 1;
 $37 = ((($5)) + 16|0);
 HEAP32[$37>>2] = 2;
 HEAP32[$5>>2] = $32;
 ;HEAP32[$$byval_copy9>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy9+16>>2]=HEAP32[$5+16>>2]|0;
 _LoadTextureFromImage($6,$$byval_copy9);
 ;HEAP32[$$sroa$0>>2]=HEAP32[$6>>2]|0;HEAP32[$$sroa$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$sroa$0+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$sroa$0+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$$sroa$0+16>>2]=HEAP32[$6+16>>2]|0;
 ;HEAP32[$$byval_copy9>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy9+16>>2]=HEAP32[$5+16>>2]|0;
 _UnloadImage($$byval_copy9);
 $38 = $3 << 5;
 $39 = (_malloc($38)|0);
 $40 = ($3|0)>(0);
 if ($40) {
  $$0128 = 0;
  while(1) {
   $49 = (($4) + ($$0128<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($39) + ($$0128<<5)|0);
   HEAP32[$51>>2] = $50;
   $52 = (($23) + (($$0128*20)|0)|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $53&65535;
   $55 = (((($39) + ($$0128<<5)|0)) + 4|0);
   HEAP32[$55>>2] = $54;
   $56 = (((($23) + (($$0128*20)|0)|0)) + 2|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $57&65535;
   $59 = (((($39) + ($$0128<<5)|0)) + 8|0);
   HEAP32[$59>>2] = $58;
   $60 = (((($23) + (($$0128*20)|0)|0)) + 4|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61&65535;
   $63 = (($62) - ($54))|0;
   $64 = (((($39) + ($$0128<<5)|0)) + 12|0);
   HEAP32[$64>>2] = $63;
   $65 = (((($23) + (($$0128*20)|0)|0)) + 6|0);
   $66 = HEAP16[$65>>1]|0;
   $67 = $66&65535;
   $68 = (($67) - ($58))|0;
   $69 = (((($39) + ($$0128<<5)|0)) + 16|0);
   HEAP32[$69>>2] = $68;
   $70 = (((($23) + (($$0128*20)|0)|0)) + 8|0);
   $71 = +HEAPF32[$70>>2];
   $72 = (~~(($71)));
   $73 = (((($39) + ($$0128<<5)|0)) + 20|0);
   HEAP32[$73>>2] = $72;
   $74 = (((($23) + (($$0128*20)|0)|0)) + 12|0);
   $75 = +HEAPF32[$74>>2];
   $76 = (~~(($75)));
   $77 = (((($39) + ($$0128<<5)|0)) + 24|0);
   HEAP32[$77>>2] = $76;
   $78 = (((($23) + (($$0128*20)|0)|0)) + 16|0);
   $79 = +HEAPF32[$78>>2];
   $80 = (~~(($79)));
   $81 = (((($39) + ($$0128<<5)|0)) + 28|0);
   HEAP32[$81>>2] = $80;
   $82 = (($$0128) + 1)|0;
   $exitcond = ($82|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $$0128 = $82;
   }
  }
 }
 _free($23);
 ;HEAP32[$0>>2]=HEAP32[$$sroa$0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$$sroa$0+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$$sroa$0+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$$sroa$0+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$$sroa$0+16>>2]|0;
 $$sroa$6$0$$sroa_idx50 = ((($0)) + 20|0);
 HEAP32[$$sroa$6$0$$sroa_idx50>>2] = $2;
 $$sroa$7$0$$sroa_idx54 = ((($0)) + 24|0);
 HEAP32[$$sroa$7$0$$sroa_idx54>>2] = $3;
 $$sroa$10$0$$sroa_idx59 = ((($0)) + 28|0);
 HEAP32[$$sroa$10$0$$sroa_idx59>>2] = $39;
 STACKTOP = sp;return;
}
function _stbtt_BakeFontBitmap($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = (_stbtt_BakeFontBitmap_internal($0,$1,$2,$3,$4,$5,$6,$7)|0);
 return ($8|0);
}
function _stbtt_BakeFontBitmap_internal($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$05 = 0, $$084$ = 0, $$0844 = 0, $$087$$091 = 0, $$0873 = 0, $$089 = 0, $$0902 = 0, $$091$ = 0, $$0911 = 0, $$1 = 0, $$2 = 0, $$286 = 0, $$293 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0;
 var $57 = 0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $8 = sp + 24|0;
 $9 = sp + 20|0;
 $10 = sp + 16|0;
 $11 = sp + 12|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 HEAP32[$8>>2] = 0;
 $15 = (_stbtt_InitFont($8,$0)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $$2 = -1;
  STACKTOP = sp;return ($$2|0);
 }
 $17 = Math_imul($4, $3)|0;
 _memset(($2|0),0,($17|0))|0;
 $18 = (+_stbtt_ScaleForPixelHeight($8,$1));
 $19 = ($6|0)>(0);
 if (!($19)) {
  $$2 = 1;
  STACKTOP = sp;return ($$2|0);
 }
 $$05 = 0;$$0844 = 1;$$0873 = 1;$$0902 = 0;$$0911 = 1;
 while(1) {
  $22 = (($$0902) + ($5))|0;
  $23 = (_stbtt_FindGlyphIndex($8,$22)|0);
  _stbtt_GetGlyphHMetrics($8,$23,$9,$10);
  _stbtt_GetGlyphBitmapBox($8,$23,$18,$18,$11,$12,$13,$14);
  $24 = HEAP32[$13>>2]|0;
  $25 = HEAP32[$11>>2]|0;
  $26 = (($24) - ($25))|0;
  $27 = HEAP32[$14>>2]|0;
  $28 = HEAP32[$12>>2]|0;
  $29 = (($27) - ($28))|0;
  $30 = (($$0844) + 1)|0;
  $31 = (($30) + ($26))|0;
  $32 = ($31|0)<($3|0);
  $$087$$091 = $32 ? $$0873 : $$0911;
  $$084$ = $32 ? $$0844 : 1;
  $33 = (($$087$$091) + ($29))|0;
  $34 = (($33) + 1)|0;
  $35 = ($34|0)<($4|0);
  if ($35) {
   $37 = (($$084$) + ($26))|0;
   $38 = ($37|0)<($3|0);
   if (!($38)) {
    label = 8;
    break;
   }
   $39 = (($2) + ($$084$)|0);
   $40 = Math_imul($$087$$091, $3)|0;
   $41 = (($39) + ($40)|0);
   _stbtt_MakeGlyphBitmap($8,$41,$26,$29,$3,$18,$18,$23);
   $42 = $$084$&65535;
   $43 = (($7) + (($$0902*20)|0)|0);
   HEAP16[$43>>1] = $42;
   $44 = $$087$$091&65535;
   $45 = (((($7) + (($$0902*20)|0)|0)) + 2|0);
   HEAP16[$45>>1] = $44;
   $46 = $37&65535;
   $47 = (((($7) + (($$0902*20)|0)|0)) + 4|0);
   HEAP16[$47>>1] = $46;
   $48 = $33&65535;
   $49 = (((($7) + (($$0902*20)|0)|0)) + 6|0);
   HEAP16[$49>>1] = $48;
   $50 = HEAP32[$9>>2]|0;
   $51 = (+($50|0));
   $52 = $18 * $51;
   $53 = (((($7) + (($$0902*20)|0)|0)) + 16|0);
   HEAPF32[$53>>2] = $52;
   $54 = HEAP32[$11>>2]|0;
   $55 = (+($54|0));
   $56 = (((($7) + (($$0902*20)|0)|0)) + 8|0);
   HEAPF32[$56>>2] = $55;
   $57 = HEAP32[$12>>2]|0;
   $58 = (+($57|0));
   $59 = (((($7) + (($$0902*20)|0)|0)) + 12|0);
   HEAPF32[$59>>2] = $58;
   $60 = (($37) + 1)|0;
   $61 = ($33|0)<($$0911|0);
   $$091$ = $61 ? $$0911 : $34;
   $$089 = 1;$$1 = $$05;$$286 = $60;$$293 = $$091$;
  } else {
   $36 = (0 - ($$0902))|0;
   $$089 = 0;$$1 = $36;$$286 = $$084$;$$293 = $$0911;
  }
  $21 = (($$0902) + 1)|0;
  if (!($$089)) {
   $$2 = $$1;
   label = 11;
   break;
  }
  $20 = ($21|0)<($6|0);
  if ($20) {
   $$05 = $$1;$$0844 = $$286;$$0873 = $$087$$091;$$0902 = $21;$$0911 = $$293;
  } else {
   $$2 = $$293;
   label = 11;
   break;
  }
 }
 if ((label|0) == 8) {
  ___assert_fail((12105|0),(12115|0),3371,(12141|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  STACKTOP = sp;return ($$2|0);
 }
 return (0)|0;
}
function _stbtt_InitFont($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_stbtt_InitFont_internal($0,$1)|0);
 return ($2|0);
}
function _stbtt_ScaleForPixelHeight($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($5)|0);
 $7 = ((($6)) + 4|0);
 $8 = (_ttSHORT($7)|0);
 $9 = $8 << 16 >> 16;
 $10 = ((($6)) + 6|0);
 $11 = (_ttSHORT($10)|0);
 $12 = $11 << 16 >> 16;
 $13 = (($9) - ($12))|0;
 $14 = (+($13|0));
 $15 = $1 / $14;
 return (+$15);
}
function _stbtt_FindGlyphIndex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$1172 = 0, $$0163180 = 0, $$0164179 = 0, $$0165 = 0, $$0165$ph = 0, $$0168$ph = 0, $$1172$lcssa = 0, $$1172178 = 0, $$2 = 0, $$2$shrunk = 0, $$5 = 0, $$8 = 0, $$neg = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($5)|0);
 $7 = (_ttUSHORT($6)|0);
 switch ($7<<16>>16) {
 case 0:  {
  $8 = ((($6)) + 2|0);
  $9 = (_ttUSHORT($8)|0);
  $10 = $9&65535;
  $11 = (($10) + -6)|0;
  $12 = ($11|0)>($1|0);
  if (!($12)) {
   $$8 = 0;
   return ($$8|0);
  }
  $13 = ((($6)) + 6|0);
  $14 = (($13) + ($1)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $$8 = $16;
  return ($$8|0);
  break;
 }
 case 6:  {
  $17 = ((($6)) + 6|0);
  $18 = (_ttUSHORT($17)|0);
  $19 = $18&65535;
  $20 = ($19>>>0)>($1>>>0);
  if ($20) {
   $$8 = 0;
   return ($$8|0);
  }
  $21 = ((($6)) + 8|0);
  $22 = (_ttUSHORT($21)|0);
  $23 = $22&65535;
  $24 = (($23) + ($19))|0;
  $25 = ($24>>>0)>($1>>>0);
  if (!($25)) {
   $$8 = 0;
   return ($$8|0);
  }
  $26 = ((($6)) + 10|0);
  $27 = (($1) - ($19))|0;
  $28 = $27 << 1;
  $29 = (($26) + ($28)|0);
  $30 = (_ttUSHORT($29)|0);
  $31 = $30&65535;
  $$8 = $31;
  return ($$8|0);
  break;
 }
 case 2:  {
  ___assert_fail((13995|0),(12115|0),1434,(12915|0));
  // unreachable;
  break;
 }
 case 4:  {
  $32 = ((($6)) + 6|0);
  $33 = (_ttUSHORT($32)|0);
  $34 = ($33&65535) >>> 1;
  $35 = ($1|0)>(65535);
  if ($35) {
   $$8 = 0;
   return ($$8|0);
  }
  $36 = (($5) + 14)|0;
  $37 = ((($6)) + 12|0);
  $38 = (_ttUSHORT($37)|0);
  $39 = ((($6)) + 10|0);
  $40 = (_ttUSHORT($39)|0);
  $41 = $38 & -2;
  $42 = (($3) + ($36)|0);
  $43 = $41&65535;
  $44 = (($42) + ($43)|0);
  $45 = (_ttUSHORT($44)|0);
  $46 = $45&65535;
  $47 = ($46|0)>($1|0);
  $48 = $47 ? 0 : $43;
  $$ = (($5) + 12)|0;
  $49 = (($$) + ($48))|0;
  $50 = ($40<<16>>16)==(0);
  if ($50) {
   $$1172$lcssa = $49;
  } else {
   $51 = ((($6)) + 8|0);
   $52 = (_ttUSHORT($51)|0);
   $53 = ($52&65535) >>> 1;
   $$0163180 = $53;$$0164179 = $40;$$1172178 = $49;
   while(1) {
    $54 = ($$0163180&65535) >>> 1;
    $55 = (($3) + ($$1172178)|0);
    $56 = ($54 << 1)&65535;
    $57 = $56&65535;
    $58 = (($55) + ($57)|0);
    $59 = (_ttUSHORT($58)|0);
    $60 = $59&65535;
    $61 = ($60|0)<($1|0);
    $62 = $61 ? $57 : 0;
    $$$1172 = (($62) + ($$1172178))|0;
    $63 = (($$0164179) + -1)<<16>>16;
    $64 = ($63<<16>>16)==(0);
    if ($64) {
     $$1172$lcssa = $$$1172;
     break;
    } else {
     $$0163180 = $54;$$0164179 = $63;$$1172178 = $$$1172;
    }
   }
  }
  $$neg = (-14 - ($5))|0;
  $65 = (($$neg) + 2)|0;
  $66 = (($65) + ($$1172$lcssa))|0;
  $67 = $66 & 131070;
  $68 = (($42) + ($67)|0);
  $69 = (_ttUSHORT($68)|0);
  $70 = $69&65535;
  $71 = ($70|0)<($1|0);
  if ($71) {
   ___assert_fail((12936|0),(12115|0),1470,(12915|0));
   // unreachable;
  }
  $72 = ((($6)) + 14|0);
  $73 = $34&65535;
  $74 = ($34 << 1)&65535;
  $75 = $74&65535;
  $76 = (($72) + ($75)|0);
  $77 = ((($76)) + 2|0);
  $78 = (($77) + ($67)|0);
  $79 = (_ttUSHORT($78)|0);
  $80 = $79&65535;
  $81 = ($80|0)>($1|0);
  do {
   if ($81) {
    $$2$shrunk = 0;
   } else {
    $82 = ($73*6)|0;
    $83 = (($72) + ($82)|0);
    $84 = ((($83)) + 2|0);
    $85 = (($84) + ($67)|0);
    $86 = (_ttUSHORT($85)|0);
    $87 = ($86<<16>>16)==(0);
    if ($87) {
     $88 = $73 << 2;
     $89 = (($72) + ($88)|0);
     $90 = ((($89)) + 2|0);
     $91 = (($90) + ($67)|0);
     $92 = (_ttSHORT($91)|0);
     $93 = $92&65535;
     $94 = (($93) + ($1))|0;
     $95 = $94&65535;
     $$2$shrunk = $95;
     break;
    } else {
     $96 = $86&65535;
     $97 = (($3) + ($96)|0);
     $98 = (($1) - ($80))|0;
     $99 = $98 << 1;
     $100 = (($97) + ($99)|0);
     $101 = (($100) + ($5)|0);
     $102 = ((($101)) + 14|0);
     $103 = (($102) + ($82)|0);
     $104 = ((($103)) + 2|0);
     $105 = (($104) + ($67)|0);
     $106 = (_ttUSHORT($105)|0);
     $$2$shrunk = $106;
     break;
    }
   }
  } while(0);
  $$2 = $$2$shrunk&65535;
  $$8 = $$2;
  return ($$8|0);
  break;
 }
 default: {
  $107 = ($7<<16>>16)==(12);
  $108 = $7 & -2;
  $switch = ($108<<16>>16)==(12);
  if (!($switch)) {
   ___assert_fail((13995|0),(12115|0),1505,(12915|0));
   // unreachable;
  }
  $109 = ((($6)) + 12|0);
  $110 = (_ttULONG($109)|0);
  $111 = ((($6)) + 16|0);
  $$0165$ph = $110;$$0168$ph = 0;
  L6: while(1) {
   $$0165 = $$0165$ph;
   while(1) {
    $112 = ($$0165|0)>($$0168$ph|0);
    if (!($112)) {
     $$8 = 0;
     label = 27;
     break L6;
    }
    $113 = (($$0165) - ($$0168$ph))|0;
    $114 = $113 >> 1;
    $115 = (($114) + ($$0168$ph))|0;
    $116 = ($115*12)|0;
    $117 = (($111) + ($116)|0);
    $118 = (_ttULONG($117)|0);
    $119 = ($118>>>0)>($1>>>0);
    if ($119) {
     $$0165 = $115;
    } else {
     break;
    }
   }
   $120 = ((($117)) + 4|0);
   $121 = (_ttULONG($120)|0);
   $122 = ($121>>>0)<($1>>>0);
   $123 = (($115) + 1)|0;
   if ($122) {
    $$0165$ph = $$0165;$$0168$ph = $123;
   } else {
    break;
   }
  }
  if ((label|0) == 27) {
   return ($$8|0);
  }
  $124 = ((($117)) + 8|0);
  $125 = (_ttULONG($124)|0);
  $126 = (($1) - ($118))|0;
  $127 = $107 ? $126 : 0;
  $$5 = (($125) + ($127))|0;
  $$8 = $$5;
  return ($$8|0);
 }
 }
 return (0)|0;
}
function _stbtt_GetGlyphHMetrics($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7)|0);
 $9 = ((($8)) + 34|0);
 $10 = (_ttUSHORT($9)|0);
 $11 = $10&65535;
 $12 = ($11|0)>($1|0);
 $13 = ($2|0)!=(0|0);
 if ($12) {
  if ($13) {
   $14 = ((($0)) + 32|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($5) + ($15)|0);
   $17 = $1 << 2;
   $18 = (($16) + ($17)|0);
   $19 = (_ttSHORT($18)|0);
   $20 = $19 << 16 >> 16;
   HEAP32[$2>>2] = $20;
  }
  $21 = ($3|0)==(0|0);
  if ($21) {
   return;
  }
  $22 = HEAP32[$4>>2]|0;
  $23 = ((($0)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + ($24)|0);
  $26 = $1 << 2;
  $27 = (($25) + ($26)|0);
  $28 = ((($27)) + 2|0);
  $29 = (_ttSHORT($28)|0);
  $30 = $29 << 16 >> 16;
  HEAP32[$3>>2] = $30;
  return;
 } else {
  if ($13) {
   $31 = ((($0)) + 32|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($5) + ($32)|0);
   $34 = $11 << 2;
   $35 = (($34) + -4)|0;
   $36 = (($33) + ($35)|0);
   $37 = (_ttSHORT($36)|0);
   $38 = $37 << 16 >> 16;
   HEAP32[$2>>2] = $38;
  }
  $39 = ($3|0)==(0|0);
  if ($39) {
   return;
  }
  $40 = HEAP32[$4>>2]|0;
  $41 = ((($0)) + 32|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + ($42)|0);
  $44 = $11 << 2;
  $45 = (($43) + ($44)|0);
  $46 = (($1) - ($11))|0;
  $47 = $46 << 1;
  $48 = (($45) + ($47)|0);
  $49 = (_ttSHORT($48)|0);
  $50 = $49 << 16 >> 16;
  HEAP32[$3>>2] = $50;
  return;
 }
}
function _stbtt_GetGlyphBitmapBox($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _stbtt_GetGlyphBitmapBoxSubpixel($0,$1,$2,$3,$4,$5,$6,$7);
 return;
}
function _stbtt_MakeGlyphBitmap($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _stbtt_MakeGlyphBitmapSubpixel($0,$1,$2,$3,$4,$5,$6,$7);
 return;
}
function _stbtt_MakeGlyphBitmapSubpixel($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp + 24|0;
 $9 = sp + 20|0;
 $10 = sp + 16|0;
 $11 = sp;
 $12 = (_stbtt_GetGlyphShape($0,$7,$10)|0);
 _stbtt_GetGlyphBitmapBoxSubpixel($0,$7,$5,$6,$8,$9,0,0);
 $13 = ((($11)) + 12|0);
 HEAP32[$13>>2] = $1;
 HEAP32[$11>>2] = $2;
 $14 = ((($11)) + 4|0);
 HEAP32[$14>>2] = $3;
 $15 = ((($11)) + 8|0);
 HEAP32[$15>>2] = $4;
 $16 = ($2|0)==(0);
 $17 = ($3|0)==(0);
 $or$cond = $16 | $17;
 if ($or$cond) {
  $21 = HEAP32[$10>>2]|0;
  _free($21);
  STACKTOP = sp;return;
 }
 $18 = HEAP32[$10>>2]|0;
 $19 = HEAP32[$8>>2]|0;
 $20 = HEAP32[$9>>2]|0;
 _stbtt_Rasterize($11,$18,$12,$5,$6,$19,$20);
 $21 = HEAP32[$10>>2]|0;
 _free($21);
 STACKTOP = sp;return;
}
function _stbtt_GetGlyphShape($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_stbtt__GetGlyphShapeTT($0,$1,$2)|0);
  $$0 = $6;
  return ($$0|0);
 } else {
  $7 = (_stbtt__GetGlyphShapeT2($0,$1,$2)|0);
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function _stbtt_GetGlyphBitmapBoxSubpixel($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $8 = 0, $9 = 0, $ceilf = 0.0, $ceilf1 = 0.0, $floorf = 0.0, $floorf2 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$8>>2] = 0;
 HEAP32[$9>>2] = 0;
 $12 = (_stbtt_GetGlyphBox($0,$1,$8,$9,$10,$11)|0);
 $13 = ($12|0)==(0);
 $14 = ($4|0)!=(0|0);
 if ($13) {
  if ($14) {
   HEAP32[$4>>2] = 0;
  }
  $15 = ($5|0)==(0|0);
  if (!($15)) {
   HEAP32[$5>>2] = 0;
  }
  $16 = ($6|0)==(0|0);
  if (!($16)) {
   HEAP32[$6>>2] = 0;
  }
  $17 = ($7|0)==(0|0);
  if ($17) {
   STACKTOP = sp;return;
  }
  HEAP32[$7>>2] = 0;
  STACKTOP = sp;return;
 } else {
  if ($14) {
   $18 = HEAP32[$8>>2]|0;
   $19 = (+($18|0));
   $20 = $19 * $2;
   $21 = $20 + 0.0;
   $floorf2 = (+Math_floor((+$21)));
   $22 = (~~(($floorf2)));
   HEAP32[$4>>2] = $22;
  }
  $23 = ($5|0)==(0|0);
  if (!($23)) {
   $24 = HEAP32[$11>>2]|0;
   $25 = (0 - ($24))|0;
   $26 = (+($25|0));
   $27 = $26 * $3;
   $28 = $27 + 0.0;
   $floorf = (+Math_floor((+$28)));
   $29 = (~~(($floorf)));
   HEAP32[$5>>2] = $29;
  }
  $30 = ($6|0)==(0|0);
  if (!($30)) {
   $31 = HEAP32[$10>>2]|0;
   $32 = (+($31|0));
   $33 = $32 * $2;
   $34 = $33 + 0.0;
   $ceilf1 = (+Math_ceil((+$34)));
   $35 = (~~(($ceilf1)));
   HEAP32[$6>>2] = $35;
  }
  $36 = ($7|0)==(0|0);
  if ($36) {
   STACKTOP = sp;return;
  }
  $37 = HEAP32[$9>>2]|0;
  $38 = (0 - ($37))|0;
  $39 = (+($38|0));
  $40 = $39 * $3;
  $41 = $40 + 0.0;
  $ceilf = (+Math_ceil((+$41)));
  $42 = (~~(($ceilf)));
  HEAP32[$7>>2] = $42;
  STACKTOP = sp;return;
 }
}
function _stbtt_Rasterize($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp + 4|0;
 $8 = sp;
 $9 = $3 > $4;
 $10 = $9 ? $4 : $3;
 $11 = 0.34999999403953552 / $10;
 $12 = (_stbtt_FlattenCurves($1,$2,$11,$8,$7)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$8>>2]|0;
 $15 = HEAP32[$7>>2]|0;
 _stbtt__rasterize($0,$12,$14,$15,$3,$4,$5,$6);
 _free($14);
 _free($12);
 STACKTOP = sp;return;
}
function _stbtt_FlattenCurves($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $$$0113 = 0, $$010 = 0.0, $$01079 = 0.0, $$011014 = 0, $$011113 = 0, $$011316 = 0, $$011715 = 0, $$0119 = 0, $$012012 = 0, $$1 = 0.0, $$1108 = 0.0, $$1112$lcssa = 0, $$11128 = 0, $$11185 = 0, $$1121 = 0, $$2 = 0, $$2115$lcssa = 0, $$21157 = 0, $$3116 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0;
 var $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $exitcond = 0, $exitcond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = $2 * $2;
 $7 = ($1|0)>(0);
 if ($7) {
  $$011316 = 0;$$011715 = 0;
 } else {
  HEAP32[$4>>2] = 0;
  $$0119 = 0;
  STACKTOP = sp;return ($$0119|0);
 }
 while(1) {
  $8 = (((($0) + (($$011715*14)|0)|0)) + 12|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)==(1);
  $11 = $10&1;
  $$$0113 = (($11) + ($$011316))|0;
  $12 = (($$011715) + 1)|0;
  $exitcond21 = ($12|0)==($1|0);
  if ($exitcond21) {
   break;
  } else {
   $$011316 = $$$0113;$$011715 = $12;
  }
 }
 HEAP32[$4>>2] = $$$0113;
 $13 = ($$$0113|0)==(0);
 if ($13) {
  $$0119 = 0;
  STACKTOP = sp;return ($$0119|0);
 }
 $14 = $$$0113 << 2;
 $15 = (_malloc($14)|0);
 HEAP32[$3>>2] = $15;
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$4>>2] = 0;
  $$0119 = 0;
  STACKTOP = sp;return ($$0119|0);
 }
 $17 = ($1|0)>(0);
 $$011014 = 0;$$011113 = 0;$$012012 = 0;
 while(1) {
  $18 = ($$011014|0)==(1);
  if ($18) {
   $19 = HEAP32[$5>>2]|0;
   $20 = $19 << 3;
   $21 = (_malloc($20)|0);
   $22 = ($21|0)==(0|0);
   if ($22) {
    break;
   } else {
    $$1121 = $21;
   }
  } else {
   $$1121 = $$012012;
  }
  HEAP32[$5>>2] = 0;
  L19: do {
   if ($17) {
    $$010 = 0.0;$$01079 = 0.0;$$11128 = $$011113;$$11185 = 0;$$21157 = -1;
    while(1) {
     $23 = (($0) + (($$11185*14)|0)|0);
     $24 = (((($0) + (($$11185*14)|0)|0)) + 12|0);
     $25 = HEAP8[$24>>0]|0;
     switch ($25<<24>>24) {
     case 1:  {
      $26 = ($$21157|0)>(-1);
      if ($26) {
       $27 = HEAP32[$5>>2]|0;
       $28 = (($27) - ($$11128))|0;
       $29 = HEAP32[$3>>2]|0;
       $30 = (($29) + ($$21157<<2)|0);
       HEAP32[$30>>2] = $28;
      }
      $31 = (($$21157) + 1)|0;
      $32 = HEAP32[$5>>2]|0;
      $33 = HEAP16[$23>>1]|0;
      $34 = (+($33<<16>>16));
      $35 = (((($0) + (($$11185*14)|0)|0)) + 2|0);
      $36 = HEAP16[$35>>1]|0;
      $37 = (+($36<<16>>16));
      $38 = (($32) + 1)|0;
      HEAP32[$5>>2] = $38;
      _stbtt__add_point($$1121,$32,$34,$37);
      $$1 = $37;$$1108 = $34;$$2 = $32;$$3116 = $31;
      break;
     }
     case 2:  {
      $39 = HEAP16[$23>>1]|0;
      $40 = (+($39<<16>>16));
      $41 = (((($0) + (($$11185*14)|0)|0)) + 2|0);
      $42 = HEAP16[$41>>1]|0;
      $43 = (+($42<<16>>16));
      $44 = HEAP32[$5>>2]|0;
      $45 = (($44) + 1)|0;
      HEAP32[$5>>2] = $45;
      _stbtt__add_point($$1121,$44,$40,$43);
      $$1 = $43;$$1108 = $40;$$2 = $$11128;$$3116 = $$21157;
      break;
     }
     case 3:  {
      $46 = (((($0) + (($$11185*14)|0)|0)) + 4|0);
      $47 = HEAP16[$46>>1]|0;
      $48 = (+($47<<16>>16));
      $49 = (((($0) + (($$11185*14)|0)|0)) + 6|0);
      $50 = HEAP16[$49>>1]|0;
      $51 = (+($50<<16>>16));
      $52 = HEAP16[$23>>1]|0;
      $53 = (+($52<<16>>16));
      $54 = (((($0) + (($$11185*14)|0)|0)) + 2|0);
      $55 = HEAP16[$54>>1]|0;
      $56 = (+($55<<16>>16));
      _stbtt__tesselate_curve($$1121,$5,$$01079,$$010,$48,$51,$53,$56,$6,0);
      $57 = HEAP16[$23>>1]|0;
      $58 = (+($57<<16>>16));
      $59 = HEAP16[$54>>1]|0;
      $60 = (+($59<<16>>16));
      $$1 = $60;$$1108 = $58;$$2 = $$11128;$$3116 = $$21157;
      break;
     }
     case 4:  {
      $61 = (((($0) + (($$11185*14)|0)|0)) + 4|0);
      $62 = HEAP16[$61>>1]|0;
      $63 = (+($62<<16>>16));
      $64 = (((($0) + (($$11185*14)|0)|0)) + 6|0);
      $65 = HEAP16[$64>>1]|0;
      $66 = (+($65<<16>>16));
      $67 = (((($0) + (($$11185*14)|0)|0)) + 8|0);
      $68 = HEAP16[$67>>1]|0;
      $69 = (+($68<<16>>16));
      $70 = (((($0) + (($$11185*14)|0)|0)) + 10|0);
      $71 = HEAP16[$70>>1]|0;
      $72 = (+($71<<16>>16));
      $73 = HEAP16[$23>>1]|0;
      $74 = (+($73<<16>>16));
      $75 = (((($0) + (($$11185*14)|0)|0)) + 2|0);
      $76 = HEAP16[$75>>1]|0;
      $77 = (+($76<<16>>16));
      _stbtt__tesselate_cubic($$1121,$5,$$01079,$$010,$63,$66,$69,$72,$74,$77,$6,0);
      $78 = HEAP16[$23>>1]|0;
      $79 = (+($78<<16>>16));
      $80 = HEAP16[$75>>1]|0;
      $81 = (+($80<<16>>16));
      $$1 = $81;$$1108 = $79;$$2 = $$11128;$$3116 = $$21157;
      break;
     }
     default: {
      $$1 = $$010;$$1108 = $$01079;$$2 = $$11128;$$3116 = $$21157;
     }
     }
     $82 = (($$11185) + 1)|0;
     $exitcond = ($82|0)==($1|0);
     if ($exitcond) {
      $$1112$lcssa = $$2;$$2115$lcssa = $$3116;
      break L19;
     } else {
      $$010 = $$1;$$01079 = $$1108;$$11128 = $$2;$$11185 = $82;$$21157 = $$3116;
     }
    }
   } else {
    $$1112$lcssa = $$011113;$$2115$lcssa = -1;
   }
  } while(0);
  $83 = HEAP32[$5>>2]|0;
  $84 = (($83) - ($$1112$lcssa))|0;
  $85 = HEAP32[$3>>2]|0;
  $86 = (($85) + ($$2115$lcssa<<2)|0);
  HEAP32[$86>>2] = $84;
  $87 = (($$011014) + 1)|0;
  $88 = ($87|0)<(2);
  if ($88) {
   $$011014 = $87;$$011113 = $$1112$lcssa;$$012012 = $$1121;
  } else {
   $$0119 = $$1121;
   label = 21;
   break;
  }
 }
 if ((label|0) == 21) {
  STACKTOP = sp;return ($$0119|0);
 }
 $89 = HEAP32[$3>>2]|0;
 _free($89);
 HEAP32[$3>>2] = 0;
 HEAP32[$4>>2] = 0;
 $$0119 = 0;
 STACKTOP = sp;return ($$0119|0);
}
function _stbtt__rasterize($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$0101 = 0, $$0102$lcssa = 0, $$010211 = 0, $$010410 = 0, $$01064 = 0, $$01072 = 0, $$01081 = 0, $$01081$phi = 0, $$1$lcssa = 0, $$11055 = 0, $$16 = 0, $$2$lcssa = 0, $$23 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0;
 var $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $8 = 0.0, $9 = 0, $exitcond = 0, $exitcond16 = 0, $phitmp = 0, $phitmp17 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = -$5;
 $9 = ($3|0)>(0);
 if ($9) {
  $$010211 = 0;$$010410 = 0;
  while(1) {
   $10 = (($2) + ($$010410<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($$010211))|0;
   $13 = (($$010410) + 1)|0;
   $exitcond16 = ($13|0)==($3|0);
   if ($exitcond16) {
    break;
   } else {
    $$010211 = $12;$$010410 = $13;
   }
  }
  $phitmp = ($12*20)|0;
  $phitmp17 = (($phitmp) + 20)|0;
  $$0102$lcssa = $phitmp17;
 } else {
  $$0102$lcssa = 20;
 }
 $14 = (_malloc($$0102$lcssa)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  return;
 }
 $16 = ($3|0)>(0);
 if ($16) {
  $$01064 = 0;$$11055 = 0;$$16 = 0;
  while(1) {
   $17 = (($1) + ($$01064<<3)|0);
   $18 = (($2) + ($$11055<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($$01064))|0;
   $21 = ($19|0)>(0);
   if ($21) {
    $22 = (($19) + -1)|0;
    $23 = HEAP32[$18>>2]|0;
    $$01072 = 0;$$01081 = $22;$$23 = $$16;
    while(1) {
     $24 = (($17) + ($$01081<<3)|0);
     $25 = ((($24)) + 4|0);
     $26 = +HEAPF32[$25>>2];
     $27 = (($17) + ($$01072<<3)|0);
     $28 = ((($27)) + 4|0);
     $29 = +HEAPF32[$28>>2];
     $30 = $26 == $29;
     if ($30) {
      $$3 = $$23;
     } else {
      $31 = (((($14) + (($$23*20)|0)|0)) + 16|0);
      $32 = $26 > $29;
      $storemerge = $32&1;
      $$0101 = $32 ? $$01081 : $$01072;
      $$0 = $32 ? $$01072 : $$01081;
      HEAP32[$31>>2] = $storemerge;
      $33 = (($17) + ($$0101<<3)|0);
      $34 = +HEAPF32[$33>>2];
      $35 = $34 * $4;
      $36 = $35 + 0.0;
      $37 = (($14) + (($$23*20)|0)|0);
      HEAPF32[$37>>2] = $36;
      $38 = ((($33)) + 4|0);
      $39 = +HEAPF32[$38>>2];
      $40 = $39 * $8;
      $41 = $40 + 0.0;
      $42 = (((($14) + (($$23*20)|0)|0)) + 4|0);
      HEAPF32[$42>>2] = $41;
      $43 = (($17) + ($$0<<3)|0);
      $44 = +HEAPF32[$43>>2];
      $45 = $44 * $4;
      $46 = $45 + 0.0;
      $47 = (((($14) + (($$23*20)|0)|0)) + 8|0);
      HEAPF32[$47>>2] = $46;
      $48 = ((($43)) + 4|0);
      $49 = +HEAPF32[$48>>2];
      $50 = $49 * $8;
      $51 = $50 + 0.0;
      $52 = (((($14) + (($$23*20)|0)|0)) + 12|0);
      HEAPF32[$52>>2] = $51;
      $53 = (($$23) + 1)|0;
      $$3 = $53;
     }
     $54 = (($$01072) + 1)|0;
     $55 = ($54|0)<($23|0);
     if ($55) {
      $$01081$phi = $$01072;$$01072 = $54;$$23 = $$3;$$01081 = $$01081$phi;
     } else {
      $$2$lcssa = $$3;
      break;
     }
    }
   } else {
    $$2$lcssa = $$16;
   }
   $56 = (($$11055) + 1)|0;
   $exitcond = ($56|0)==($3|0);
   if ($exitcond) {
    $$1$lcssa = $$2$lcssa;
    break;
   } else {
    $$01064 = $20;$$11055 = $56;$$16 = $$2$lcssa;
   }
  }
 } else {
  $$1$lcssa = 0;
 }
 _stbtt__sort_edges($14,$$1$lcssa);
 _stbtt__rasterize_sorted_edges($0,$14,$$1$lcssa,$6,$7);
 _free($14);
 return;
}
function _stbtt__sort_edges($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _stbtt__sort_edges_quicksort($0,$1);
 _stbtt__sort_edges_ins_sort($0,$1);
 return;
}
function _stbtt__rasterize_sorted_edges($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$010025 = 0, $$010123 = 0, $$010219 = 0.0, $$010318 = 0, $$0104 = 0, $$0105$ph15 = 0, $$026 = 0, $$1$lcssa = 0, $$116 = 0, $$sroa$0 = 0, $$sroa$0$0$$sroa$0$0$$0$1 = 0, $$sroa$0$0$$sroa$0$0$$0$1079 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fabsf = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $5 = sp + 520|0;
 $$sroa$0 = sp + 516|0;
 $6 = sp;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
 HEAP32[$$sroa$0>>2] = 0;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)>(64);
 if ($8) {
  $9 = $7 << 3;
  $10 = $9 | 4;
  $11 = (_malloc($10)|0);
  $$0104 = $11;
 } else {
  $$0104 = $6;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = (($$0104) + ($12<<2)|0);
 $14 = ((($0)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($4))|0;
 $17 = (+($16|0));
 $18 = $17 + 1.0;
 $19 = (((($1) + (($2*20)|0)|0)) + 4|0);
 HEAPF32[$19>>2] = $18;
 $20 = HEAP32[$14>>2]|0;
 $21 = ($20|0)>(0);
 L5: do {
  if ($21) {
   $22 = ((($13)) + 4|0);
   $23 = ((($0)) + 12|0);
   $24 = ((($0)) + 8|0);
   $$010025 = $4;$$010123 = 0;$$026 = $1;
   L7: while(1) {
    $25 = (+($$010025|0));
    $26 = $25 + 1.0;
    $27 = HEAP32[$0>>2]|0;
    $28 = $27 << 2;
    _memset(($$0104|0),0,($28|0))|0;
    $29 = (($28) + 4)|0;
    _memset(($13|0),0,($29|0))|0;
    $30 = HEAP32[$$sroa$0>>2]|0;
    $31 = ($30|0)==(0|0);
    L9: do {
     if (!($31)) {
      $$0105$ph15 = $$sroa$0;$99 = $30;
      while(1) {
       $36 = $99;
       while(1) {
        $35 = ((($36)) + 24|0);
        $37 = +HEAPF32[$35>>2];
        $38 = !($37 <= $25);
        if ($38) {
         break;
        }
        $39 = HEAP32[$36>>2]|0;
        HEAP32[$$0105$ph15>>2] = $39;
        $40 = ((($36)) + 16|0);
        $41 = +HEAPF32[$40>>2];
        $42 = $41 != 0.0;
        if (!($42)) {
         label = 11;
         break L7;
        }
        HEAPF32[$40>>2] = 0.0;
        _stbtt__hheap_free($5,$36);
        $43 = HEAP32[$$0105$ph15>>2]|0;
        $44 = ($43|0)==(0|0);
        if ($44) {
         break L9;
        } else {
         $36 = $43;
        }
       }
       $45 = HEAP32[$36>>2]|0;
       $46 = ($45|0)==(0|0);
       if ($46) {
        break;
       } else {
        $$0105$ph15 = $36;$99 = $45;
       }
      }
     }
    } while(0);
    $32 = ((($$026)) + 4|0);
    $33 = +HEAPF32[$32>>2];
    $34 = !($33 <= $26);
    if ($34) {
     $$1$lcssa = $$026;
    } else {
     $$116 = $$026;$50 = $33;
     while(1) {
      $47 = ((($$116)) + 12|0);
      $48 = +HEAPF32[$47>>2];
      $49 = $50 != $48;
      if ($49) {
       $51 = (_stbtt__new_active($5,$$116,$3,$25)|0);
       $52 = ($51|0)==(0|0);
       if (!($52)) {
        $53 = ((($51)) + 24|0);
        $54 = +HEAPF32[$53>>2];
        $55 = !($54 >= $25);
        if ($55) {
         label = 17;
         break L7;
        }
        $$sroa$0$0$$sroa$0$0$$0$1 = HEAP32[$$sroa$0>>2]|0;
        HEAP32[$51>>2] = $$sroa$0$0$$sroa$0$0$$0$1;
        $56 = $51;
        HEAP32[$$sroa$0>>2] = $56;
       }
      }
      $57 = ((($$116)) + 20|0);
      $58 = ((($$116)) + 24|0);
      $59 = +HEAPF32[$58>>2];
      $60 = !($59 <= $26);
      if ($60) {
       $$1$lcssa = $57;
       break;
      } else {
       $$116 = $57;$50 = $59;
      }
     }
    }
    $$sroa$0$0$$sroa$0$0$$0$1079 = HEAP32[$$sroa$0>>2]|0;
    $61 = ($$sroa$0$0$$sroa$0$0$$0$1079|0)==(0|0);
    if (!($61)) {
     $62 = HEAP32[$0>>2]|0;
     _stbtt__fill_active_edges_new($$0104,$22,$62,$$sroa$0$0$$sroa$0$0$$0$1079,$25);
    }
    $63 = HEAP32[$0>>2]|0;
    $64 = ($63|0)>(0);
    if ($64) {
     $$010219 = 0.0;$$010318 = 0;
     while(1) {
      $67 = (($13) + ($$010318<<2)|0);
      $68 = +HEAPF32[$67>>2];
      $69 = $$010219 + $68;
      $70 = (($$0104) + ($$010318<<2)|0);
      $71 = +HEAPF32[$70>>2];
      $72 = $71 + $69;
      $fabsf = (+Math_abs((+$72)));
      $73 = $fabsf * 255.0;
      $74 = $73 + 0.5;
      $75 = (~~(($74)));
      $76 = ($75|0)<(255);
      $$ = $76 ? $75 : 255;
      $77 = $$&255;
      $78 = HEAP32[$23>>2]|0;
      $79 = HEAP32[$24>>2]|0;
      $80 = Math_imul($79, $$010123)|0;
      $81 = (($80) + ($$010318))|0;
      $82 = (($78) + ($81)|0);
      HEAP8[$82>>0] = $77;
      $83 = (($$010318) + 1)|0;
      $84 = HEAP32[$0>>2]|0;
      $85 = ($83|0)<($84|0);
      if ($85) {
       $$010219 = $69;$$010318 = $83;
      } else {
       break;
      }
     }
    }
    $65 = HEAP32[$$sroa$0>>2]|0;
    $66 = ($65|0)==(0|0);
    if (!($66)) {
     $87 = $65;
     while(1) {
      $86 = ((($87)) + 8|0);
      $88 = +HEAPF32[$86>>2];
      $89 = ((($87)) + 4|0);
      $90 = +HEAPF32[$89>>2];
      $91 = $88 + $90;
      HEAPF32[$89>>2] = $91;
      $92 = HEAP32[$87>>2]|0;
      $93 = ($92|0)==(0|0);
      if ($93) {
       break;
      } else {
       $87 = $92;
      }
     }
    }
    $94 = (($$010025) + 1)|0;
    $95 = (($$010123) + 1)|0;
    $96 = HEAP32[$14>>2]|0;
    $97 = ($95|0)<($96|0);
    if ($97) {
     $$010025 = $94;$$010123 = $95;$$026 = $$1$lcssa;
    } else {
     break L5;
    }
   }
   if ((label|0) == 11) {
    ___assert_fail((12171|0),(12115|0),2872,(12184|0));
    // unreachable;
   }
   else if ((label|0) == 17) {
    ___assert_fail((12214|0),(12115|0),2885,(12184|0));
    // unreachable;
   }
  }
 } while(0);
 _stbtt__hheap_cleanup($5);
 $98 = ($$0104|0)==($6|0);
 if ($98) {
  STACKTOP = sp;return;
 }
 _free($$0104);
 STACKTOP = sp;return;
}
function _stbtt__hheap_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 HEAP32[$2>>2] = $1;
 return;
}
function _stbtt__new_active($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_stbtt__hheap_alloc($0)|0);
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = +HEAPF32[$1>>2];
 $8 = $6 - $7;
 $9 = ((($1)) + 12|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($1)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $10 - $12;
 $14 = $8 / $13;
 $15 = ($4|0)==(0|0);
 if ($15) {
  ___assert_fail((12504|0),(12115|0),2472,(12520|0));
  // unreachable;
 } else {
  $16 = ((($4)) + 8|0);
  HEAPF32[$16>>2] = $14;
  $17 = $14 != 0.0;
  $18 = 1.0 / $14;
  $19 = $17 ? $18 : 0.0;
  $20 = ((($4)) + 12|0);
  HEAPF32[$20>>2] = $19;
  $21 = +HEAPF32[$1>>2];
  $22 = +HEAPF32[$11>>2];
  $23 = $3 - $22;
  $24 = $14 * $23;
  $25 = $21 + $24;
  $26 = ((($4)) + 4|0);
  $27 = (+($2|0));
  $28 = $25 - $27;
  HEAPF32[$26>>2] = $28;
  $29 = ((($1)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0);
  $32 = $31 ? 1.0 : -1.0;
  $33 = ((($4)) + 16|0);
  HEAPF32[$33>>2] = $32;
  $34 = ((($4)) + 20|0);
  HEAPF32[$34>>2] = $22;
  $35 = HEAP32[$9>>2]|0;
  $36 = ((($4)) + 24|0);
  HEAP32[$36>>2] = $35;
  HEAP32[$4>>2] = 0;
  return ($4|0);
 }
 return (0)|0;
}
function _stbtt__fill_active_edges_new($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0350 = 0.0, $$0351 = 0.0, $$0352 = 0.0, $$0354 = 0.0, $$0356370 = 0, $$0357 = 0.0, $$0359$lcssa = 0.0, $$0359372 = 0.0, $$0360 = 0.0, $$0361371 = 0, $$0374 = 0, $$1 = 0.0, $$1353 = 0.0, $$1355 = 0.0, $$1358 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0;
 var $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0.0;
 var $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0;
 var $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond380 = 0, $fabsf = 0.0, $or$cond = 0, $or$cond362 = 0, $or$cond363 = 0, $or$cond364 = 0;
 var $or$cond365 = 0, $or$cond366 = 0, $or$cond367 = 0, $or$cond368 = 0, $or$cond369 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 + 1.0;
 $6 = ($3|0)==(0|0);
 if ($6) {
  return;
 }
 $7 = (+($2|0));
 $8 = ((($1)) + -4|0);
 $9 = ((($1)) + -4|0);
 $10 = (+($2|0));
 $11 = ($2|0)>(0);
 $$0374 = $3;
 L4: while(1) {
  $12 = ((($$0374)) + 24|0);
  $13 = +HEAPF32[$12>>2];
  $14 = !($13 >= $4);
  if ($14) {
   label = 4;
   break;
  }
  $15 = ((($$0374)) + 8|0);
  $16 = +HEAPF32[$15>>2];
  $17 = $16 == 0.0;
  $18 = ((($$0374)) + 4|0);
  $19 = +HEAPF32[$18>>2];
  do {
   if ($17) {
    $20 = $19 < $7;
    if ($20) {
     $21 = !($19 >= 0.0);
     if ($21) {
      _stbtt__handle_clipped_edge($8,0,$$0374,$19,$4,$19,$5);
      break;
     } else {
      $22 = (~~(($19)));
      _stbtt__handle_clipped_edge($0,$22,$$0374,$19,$4,$19,$5);
      $23 = (($22) + 1)|0;
      _stbtt__handle_clipped_edge($9,$23,$$0374,$19,$4,$19,$5);
      break;
     }
    }
   } else {
    $24 = $16 + $19;
    $25 = ((($$0374)) + 12|0);
    $26 = +HEAPF32[$25>>2];
    $27 = ((($$0374)) + 20|0);
    $28 = +HEAPF32[$27>>2];
    $29 = !($28 <= $5);
    if ($29) {
     label = 11;
     break L4;
    }
    $30 = $28 > $4;
    $31 = $28 - $4;
    $32 = $16 * $31;
    $33 = $19 + $32;
    $$0354 = $30 ? $28 : $4;
    $$0351 = $30 ? $33 : $19;
    $34 = +HEAPF32[$12>>2];
    $35 = $34 < $5;
    $36 = $34 - $4;
    $37 = $16 * $36;
    $38 = $19 + $37;
    $$0357 = $35 ? $34 : $5;
    $$0352 = $35 ? $38 : $24;
    $39 = $$0351 >= 0.0;
    $40 = $$0352 >= 0.0;
    $or$cond = $39 & $40;
    if ($or$cond) {
     $41 = $$0351 < $10;
     $42 = $$0352 < $10;
     $or$cond362 = $41 & $42;
     if ($or$cond362) {
      $43 = (~~(($$0351)));
      $44 = (~~(($$0352)));
      $45 = ($43|0)==($44|0);
      if ($45) {
       $46 = $$0357 - $$0354;
       $47 = ($43|0)>(-1);
       $48 = ($43|0)<($2|0);
       $or$cond363 = $47 & $48;
       if (!($or$cond363)) {
        label = 17;
        break L4;
       }
       $49 = ((($$0374)) + 16|0);
       $50 = +HEAPF32[$49>>2];
       $51 = (+($43|0));
       $52 = $$0351 - $51;
       $53 = $$0352 - $51;
       $54 = $52 + $53;
       $55 = $54 * 0.5;
       $56 = 1.0 - $55;
       $57 = $56 * $50;
       $58 = $46 * $57;
       $59 = (($0) + ($43<<2)|0);
       $60 = +HEAPF32[$59>>2];
       $61 = $60 + $58;
       HEAPF32[$59>>2] = $61;
       $62 = +HEAPF32[$49>>2];
       $63 = $46 * $62;
       $64 = (($1) + ($43<<2)|0);
       $65 = +HEAPF32[$64>>2];
       $66 = $65 + $63;
       HEAPF32[$64>>2] = $66;
       break;
      }
      $67 = $$0351 > $$0352;
      if ($67) {
       $68 = -$26;
       $69 = $$0357 - $4;
       $70 = $5 - $69;
       $71 = $$0354 - $4;
       $72 = $5 - $71;
       $$0350 = $24;$$0360 = $68;$$1 = $$0352;$$1353 = $$0351;$$1355 = $70;$$1358 = $72;
      } else {
       $$0350 = $19;$$0360 = $26;$$1 = $$0351;$$1353 = $$0352;$$1355 = $$0354;$$1358 = $$0357;
      }
      $73 = (~~(($$1)));
      $74 = (~~(($$1353)));
      $75 = (($73) + 1)|0;
      $76 = (+($75|0));
      $77 = $76 - $$0350;
      $78 = $$0360 * $77;
      $79 = $78 + $4;
      $80 = ((($$0374)) + 16|0);
      $81 = +HEAPF32[$80>>2];
      $82 = $79 - $$1355;
      $83 = $81 * $82;
      $84 = (+($73|0));
      $85 = $$1 - $84;
      $86 = $85 + 1.0;
      $87 = $86 * 0.5;
      $88 = 1.0 - $87;
      $89 = $88 * $83;
      $90 = (($0) + ($73<<2)|0);
      $91 = +HEAPF32[$90>>2];
      $92 = $91 + $89;
      HEAPF32[$90>>2] = $92;
      $93 = $$0360 * $81;
      $94 = ($74|0)>($75|0);
      if ($94) {
       $95 = $93 * 0.5;
       $$0359372 = $83;$$0361371 = $75;
       while(1) {
        $96 = $95 + $$0359372;
        $97 = (($0) + ($$0361371<<2)|0);
        $98 = +HEAPF32[$97>>2];
        $99 = $96 + $98;
        HEAPF32[$97>>2] = $99;
        $100 = $93 + $$0359372;
        $101 = (($$0361371) + 1)|0;
        $exitcond380 = ($101|0)==($74|0);
        if ($exitcond380) {
         $$0359$lcssa = $100;
         break;
        } else {
         $$0359372 = $100;$$0361371 = $101;
        }
       }
      } else {
       $$0359$lcssa = $83;
      }
      $fabsf = (+Math_abs((+$$0359$lcssa)));
      $102 = !($fabsf <= 1.0099999904632568);
      if ($102) {
       label = 25;
       break L4;
      }
      $103 = (($74) - ($75))|0;
      $104 = (+($103|0));
      $105 = $$0360 * $104;
      $106 = $105 + $79;
      $107 = (+($74|0));
      $108 = $$1353 - $107;
      $109 = $108 + 0.0;
      $110 = $109 * 0.5;
      $111 = 1.0 - $110;
      $112 = $81 * $111;
      $113 = $$1358 - $106;
      $114 = $112 * $113;
      $115 = $114 + $$0359$lcssa;
      $116 = (($0) + ($74<<2)|0);
      $117 = +HEAPF32[$116>>2];
      $118 = $115 + $117;
      HEAPF32[$116>>2] = $118;
      $119 = $$1358 - $$1355;
      $120 = $119 * $81;
      $121 = (($1) + ($74<<2)|0);
      $122 = +HEAPF32[$121>>2];
      $123 = $120 + $122;
      HEAPF32[$121>>2] = $123;
      break;
     }
    }
    if ($11) {
     $$0356370 = 0;
     while(1) {
      $124 = (+($$0356370|0));
      $125 = (($$0356370) + 1)|0;
      $126 = (+($125|0));
      $127 = $124 - $19;
      $128 = $127 / $16;
      $129 = $128 + $4;
      $130 = $126 - $19;
      $131 = $130 / $16;
      $132 = $131 + $4;
      $133 = $19 < $124;
      $134 = $24 > $126;
      $or$cond364 = $133 & $134;
      do {
       if ($or$cond364) {
        _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$19,$4,$124,$129);
        _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$124,$129,$126,$132);
        _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$126,$132,$24,$5);
       } else {
        $135 = $24 < $124;
        $136 = $19 > $126;
        $or$cond365 = $135 & $136;
        if ($or$cond365) {
         _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$19,$4,$126,$132);
         _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$126,$132,$124,$129);
         _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$124,$129,$24,$5);
         break;
        }
        $137 = $24 > $124;
        $or$cond366 = $133 & $137;
        if ($or$cond366) {
         _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$19,$4,$124,$129);
         _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$124,$129,$24,$5);
         break;
        }
        $138 = $19 > $124;
        $or$cond367 = $135 & $138;
        if ($or$cond367) {
         _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$19,$4,$124,$129);
         _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$124,$129,$24,$5);
         break;
        }
        $139 = $19 < $126;
        $or$cond368 = $139 & $134;
        if ($or$cond368) {
         _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$19,$4,$126,$132);
         _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$126,$132,$24,$5);
         break;
        }
        $140 = $24 < $126;
        $or$cond369 = $140 & $136;
        if ($or$cond369) {
         _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$19,$4,$126,$132);
         _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$126,$132,$24,$5);
         break;
        } else {
         _stbtt__handle_clipped_edge($0,$$0356370,$$0374,$19,$4,$24,$5);
         break;
        }
       }
      } while(0);
      $exitcond = ($125|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$0356370 = $125;
      }
     }
    }
   }
  } while(0);
  $141 = HEAP32[$$0374>>2]|0;
  $142 = ($141|0)==(0|0);
  if ($142) {
   label = 42;
   break;
  } else {
   $$0374 = $141;
  }
 }
 if ((label|0) == 4) {
  ___assert_fail((12234|0),(12115|0),2684,(12249|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  ___assert_fail((12278|0),(12115|0),2703,(12249|0));
  // unreachable;
 }
 else if ((label|0) == 17) {
  ___assert_fail((12314|0),(12115|0),2731,(12249|0));
  // unreachable;
 }
 else if ((label|0) == 25) {
  ___assert_fail((12332|0),(12115|0),2768,(12249|0));
  // unreachable;
 }
 else if ((label|0) == 42) {
  return;
 }
}
function _stbtt__hheap_cleanup($0) {
 $0 = $0|0;
 var $$in12 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 } else {
  $$in12 = $1;
 }
 while(1) {
  $3 = HEAP32[$$in12>>2]|0;
  _free($$in12);
  $4 = ($3|0)==(0|0);
  if ($4) {
   break;
  } else {
   $$in12 = $3;
  }
 }
 return;
}
function _stbtt__handle_clipped_edge($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$0 = 0.0, $$077 = 0.0, $$078 = 0.0, $$079 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond80 = 0, $or$cond81 = 0, $or$cond82 = 0, $or$cond83 = 0, $or$cond84 = 0, $or$cond85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = $4 == $6;
 if ($7) {
  return;
 }
 $8 = $4 < $6;
 if (!($8)) {
  ___assert_fail((12352|0),(12115|0),2642,(12360|0));
  // unreachable;
 }
 $9 = ((($2)) + 20|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($2)) + 24|0);
 $12 = +HEAPF32[$11>>2];
 $13 = !($10 <= $12);
 if ($13) {
  ___assert_fail((12387|0),(12115|0),2643,(12360|0));
  // unreachable;
 }
 $14 = $12 < $4;
 $15 = $10 > $6;
 $or$cond = $15 | $14;
 if ($or$cond) {
  return;
 }
 $16 = $10 > $4;
 if ($16) {
  $17 = $5 - $3;
  $18 = $10 - $4;
  $19 = $17 * $18;
  $20 = $6 - $4;
  $21 = $19 / $20;
  $22 = $21 + $3;
  $$078 = $10;$$079 = $22;
 } else {
  $$078 = $4;$$079 = $3;
 }
 $23 = +HEAPF32[$11>>2];
 $24 = $23 < $6;
 if ($24) {
  $25 = $5 - $$079;
  $26 = $23 - $6;
  $27 = $25 * $26;
  $28 = $6 - $$078;
  $29 = $27 / $28;
  $30 = $29 + $5;
  $$0 = $23;$$077 = $30;
 } else {
  $$0 = $6;$$077 = $5;
 }
 $31 = (+($1|0));
 $32 = $$079 == $31;
 $33 = (($1) + 1)|0;
 $34 = (+($33|0));
 do {
  if ($32) {
   $35 = !($$077 <= $34);
   if ($35) {
    ___assert_fail((12402|0),(12115|0),2656,(12360|0));
    // unreachable;
   }
  } else {
   $36 = $$079 == $34;
   if ($36) {
    $37 = !($$077 >= $31);
    if (!($37)) {
     break;
    }
    ___assert_fail((12412|0),(12115|0),2658,(12360|0));
    // unreachable;
   }
   $38 = !($$079 <= $31);
   if (!($38)) {
    $39 = !($$077 <= $31);
    if (!($39)) {
     break;
    }
    ___assert_fail((12420|0),(12115|0),2660,(12360|0));
    // unreachable;
   }
   $40 = !($$079 >= $34);
   if ($40) {
    $42 = !($$077 >= $31);
    $43 = !($$077 <= $34);
    $or$cond80 = $42 | $43;
    if (!($or$cond80)) {
     break;
    }
    ___assert_fail((12438|0),(12115|0),2664,(12360|0));
    // unreachable;
   } else {
    $41 = !($$077 >= $34);
    if (!($41)) {
     break;
    }
    ___assert_fail((12428|0),(12115|0),2662,(12360|0));
    // unreachable;
   }
  }
 } while(0);
 $44 = !($$079 <= $31);
 $45 = !($$077 <= $31);
 $or$cond81 = $44 | $45;
 if (!($or$cond81)) {
  $46 = ((($2)) + 16|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $$0 - $$078;
  $49 = $48 * $47;
  $50 = (($0) + ($1<<2)|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $51 + $49;
  HEAPF32[$50>>2] = $52;
  return;
 }
 $53 = !($$079 >= $34);
 $54 = !($$077 >= $34);
 $or$cond82 = $53 | $54;
 if (!($or$cond82)) {
  return;
 }
 $55 = !($$079 >= $31);
 $56 = !($$079 <= $34);
 $or$cond83 = $55 | $56;
 $57 = !($$077 >= $31);
 $or$cond84 = $or$cond83 | $57;
 $58 = !($$077 <= $34);
 $or$cond85 = $58 | $or$cond84;
 if ($or$cond85) {
  ___assert_fail((12459|0),(12115|0),2671,(12360|0));
  // unreachable;
 }
 $59 = ((($2)) + 16|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $$0 - $$078;
 $62 = $61 * $60;
 $63 = $$079 - $31;
 $64 = $$077 - $31;
 $65 = $63 + $64;
 $66 = $65 * 0.5;
 $67 = 1.0 - $66;
 $68 = $67 * $62;
 $69 = (($0) + ($1<<2)|0);
 $70 = +HEAPF32[$69>>2];
 $71 = $70 + $68;
 HEAPF32[$69>>2] = $71;
 return;
}
function _stbtt__hheap_alloc($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $4;
  $$1 = $2;
  return ($$1|0);
 }
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = (_malloc(56004)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$1 = 0;
    return ($$1|0);
   } else {
    $10 = HEAP32[$0>>2]|0;
    HEAP32[$8>>2] = $10;
    HEAP32[$0>>2] = $8;
    HEAP32[$5>>2] = 2000;
    break;
   }
  }
 } while(0);
 $11 = HEAP32[$5>>2]|0;
 $12 = (($11) + -1)|0;
 HEAP32[$5>>2] = $12;
 $13 = HEAP32[$0>>2]|0;
 $14 = ($12*28)|0;
 $15 = (($13) + ($14)|0);
 $$1 = $15;
 return ($$1|0);
}
function _stbtt__sort_edges_quicksort($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$079 = 0, $$081 = 0, $$08390 = 0, $$091 = 0, $$1 = 0, $$180 = 0, $$182 = 0, $$184 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0;
 var $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0;
 var $8 = 0, $9 = 0.0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ($1|0)>(12);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $$08390 = $1;$$091 = $0;
 while(1) {
  $4 = $$08390 >>> 1;
  $5 = ((($$091)) + 4|0);
  $6 = +HEAPF32[$5>>2];
  $7 = (($$091) + (($4*20)|0)|0);
  $8 = (((($$091) + (($4*20)|0)|0)) + 4|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $6 < $9;
  $11 = (($$08390) + -1)|0;
  $12 = (((($$091) + (($11*20)|0)|0)) + 4|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9 < $13;
  $15 = $10 ^ $14;
  $16 = $6 < $13;
  $tmp = $16 ^ $14;
  $17 = $tmp ? $11 : 0;
  $18 = (($$091) + (($17*20)|0)|0);
  if ($15) {
   ;HEAP32[$2>>2]=HEAP32[$18>>2]|0;HEAP32[$2+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$18+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$18+16>>2]|0;
   ;HEAP32[$18>>2]=HEAP32[$7>>2]|0;HEAP32[$18+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$18+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$18+16>>2]=HEAP32[$7+16>>2]|0;
   ;HEAP32[$7>>2]=HEAP32[$2>>2]|0;HEAP32[$7+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$7+16>>2]=HEAP32[$2+16>>2]|0;
  }
  ;HEAP32[$2>>2]=HEAP32[$$091>>2]|0;HEAP32[$2+4>>2]=HEAP32[$$091+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$$091+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$$091+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$$091+16>>2]|0;
  ;HEAP32[$$091>>2]=HEAP32[$7>>2]|0;HEAP32[$$091+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$091+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$091+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$$091+16>>2]=HEAP32[$7+16>>2]|0;
  ;HEAP32[$7>>2]=HEAP32[$2>>2]|0;HEAP32[$7+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$7+16>>2]=HEAP32[$2+16>>2]|0;
  $$079 = $11;$$081 = 1;
  while(1) {
   $19 = +HEAPF32[$5>>2];
   $$182 = $$081;
   while(1) {
    $20 = (((($$091) + (($$182*20)|0)|0)) + 4|0);
    $21 = +HEAPF32[$20>>2];
    $22 = $21 < $19;
    $23 = (($$182) + 1)|0;
    if ($22) {
     $$182 = $23;
    } else {
     $$180 = $$079;
     break;
    }
   }
   while(1) {
    $24 = (((($$091) + (($$180*20)|0)|0)) + 4|0);
    $25 = +HEAPF32[$24>>2];
    $26 = $19 < $25;
    $27 = (($$180) + -1)|0;
    if ($26) {
     $$180 = $27;
    } else {
     break;
    }
   }
   $28 = (($$091) + (($$182*20)|0)|0);
   $29 = ($$182|0)<($$180|0);
   if (!($29)) {
    break;
   }
   $30 = (($$091) + (($$180*20)|0)|0);
   ;HEAP32[$2>>2]=HEAP32[$28>>2]|0;HEAP32[$2+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$28+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$28+16>>2]|0;
   ;HEAP32[$28>>2]=HEAP32[$30>>2]|0;HEAP32[$28+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$30+8>>2]|0;HEAP32[$28+12>>2]=HEAP32[$30+12>>2]|0;HEAP32[$28+16>>2]=HEAP32[$30+16>>2]|0;
   ;HEAP32[$30>>2]=HEAP32[$2>>2]|0;HEAP32[$30+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$30+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$30+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$30+16>>2]=HEAP32[$2+16>>2]|0;
   $31 = (($$182) + 1)|0;
   $32 = (($$180) + -1)|0;
   $$079 = $32;$$081 = $31;
  }
  $33 = (($$08390) - ($$182))|0;
  $34 = ($$180|0)<($33|0);
  if ($34) {
   _stbtt__sort_edges_quicksort($$091,$$180);
   $$1 = $28;$$184 = $33;
  } else {
   _stbtt__sort_edges_quicksort($28,$33);
   $$1 = $$091;$$184 = $$180;
  }
  $35 = ($$184|0)>(12);
  if ($35) {
   $$08390 = $$184;$$091 = $$1;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _stbtt__sort_edges_ins_sort($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03251 = 0, $$033 = 0, $$2$ph = 0, $$sroa$0$0$copyload48 = 0, $$sroa$4$0$$sroa_idx37 = 0, $$sroa$4$0$$sroa_idx38 = 0, $$sroa$4$0$copyload = 0.0, $$sroa$5 = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$5$0$$sroa_idx42 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$sroa$5 = sp;
 $2 = ($1|0)>(1);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $$03251 = 1;
 while(1) {
  $3 = (($0) + (($$03251*20)|0)|0);
  $$sroa$0$0$copyload48 = HEAP32[$3>>2]|0;
  $$sroa$4$0$$sroa_idx37 = (((($0) + (($$03251*20)|0)|0)) + 4|0);
  $$sroa$4$0$copyload = +HEAPF32[$$sroa$4$0$$sroa_idx37>>2];
  $$sroa$5$0$$sroa_idx = (((($0) + (($$03251*20)|0)|0)) + 8|0);
  ;HEAP32[$$sroa$5>>2]=HEAP32[$$sroa$5$0$$sroa_idx>>2]|0;HEAP32[$$sroa$5+4>>2]=HEAP32[$$sroa$5$0$$sroa_idx+4>>2]|0;HEAP32[$$sroa$5+8>>2]=HEAP32[$$sroa$5$0$$sroa_idx+8>>2]|0;
  $$033 = $$03251;
  while(1) {
   $4 = (($$033) + -1)|0;
   $5 = (((($0) + (($4*20)|0)|0)) + 4|0);
   $6 = +HEAPF32[$5>>2];
   $7 = $$sroa$4$0$copyload < $6;
   if (!($7)) {
    $$2$ph = $$033;
    break;
   }
   $8 = (($0) + (($4*20)|0)|0);
   $9 = (($0) + (($$033*20)|0)|0);
   ;HEAP32[$9>>2]=HEAP32[$8>>2]|0;HEAP32[$9+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$8+12>>2]|0;HEAP32[$9+16>>2]=HEAP32[$8+16>>2]|0;
   $10 = ($$033|0)>(1);
   if ($10) {
    $$033 = $4;
   } else {
    $$2$ph = $4;
    break;
   }
  }
  $11 = ($$03251|0)==($$2$ph|0);
  if (!($11)) {
   $$sroa$5$0$$sroa_idx42 = (((($0) + (($$2$ph*20)|0)|0)) + 8|0);
   $$sroa$4$0$$sroa_idx38 = (((($0) + (($$2$ph*20)|0)|0)) + 4|0);
   $12 = (($0) + (($$2$ph*20)|0)|0);
   HEAP32[$12>>2] = $$sroa$0$0$copyload48;
   HEAPF32[$$sroa$4$0$$sroa_idx38>>2] = $$sroa$4$0$copyload;
   ;HEAP32[$$sroa$5$0$$sroa_idx42>>2]=HEAP32[$$sroa$5>>2]|0;HEAP32[$$sroa$5$0$$sroa_idx42+4>>2]=HEAP32[$$sroa$5+4>>2]|0;HEAP32[$$sroa$5$0$$sroa_idx42+8>>2]=HEAP32[$$sroa$5+8>>2]|0;
  }
  $13 = (($$03251) + 1)|0;
  $exitcond = ($13|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$03251 = $13;
  }
 }
 STACKTOP = sp;return;
}
function _stbtt__add_point($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = (((($0) + ($1<<3)|0)) + 4|0);
 $6 = (($0) + ($1<<3)|0);
 HEAPF32[$6>>2] = $2;
 HEAPF32[$5>>2] = $3;
 return;
}
function _stbtt__tesselate_curve($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = $9|0;
 var $$tr210 = 0.0, $$tr210$phi = 0.0, $$tr311 = 0.0, $$tr311$phi = 0.0, $$tr412 = 0.0, $$tr513 = 0.0, $$tr914 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = $4 * 2.0;
 $11 = $10 + $2;
 $12 = $11 + $6;
 $13 = $12 * 0.25;
 $14 = $5 * 2.0;
 $15 = $14 + $3;
 $16 = $15 + $7;
 $17 = $16 * 0.25;
 $18 = ($9|0)>(16);
 if ($18) {
  return;
 }
 $19 = $7 + $3;
 $20 = $19 * 0.5;
 $21 = $20 - $17;
 $22 = $6 + $2;
 $23 = $22 * 0.5;
 $24 = $23 - $13;
 $$tr210 = $2;$$tr311 = $3;$$tr412 = $4;$$tr513 = $5;$$tr914 = $9;$26 = $24;$28 = $21;$36 = $13;$37 = $17;
 while(1) {
  $25 = $26 * $26;
  $27 = $28 * $28;
  $29 = $25 + $27;
  $30 = $29 > $8;
  if (!($30)) {
   break;
  }
  $31 = $$tr210 + $$tr412;
  $32 = $31 * 0.5;
  $33 = $$tr311 + $$tr513;
  $34 = $33 * 0.5;
  $35 = (($$tr914) + 1)|0;
  _stbtt__tesselate_curve($0,$1,$$tr210,$$tr311,$32,$34,$36,$37,$8,$35);
  $38 = $$tr412 + $6;
  $39 = $38 * 0.5;
  $40 = $$tr513 + $7;
  $41 = $40 * 0.5;
  $42 = $39 * 2.0;
  $43 = $36 + $42;
  $44 = $43 + $6;
  $45 = $44 * 0.25;
  $46 = $41 * 2.0;
  $47 = $37 + $46;
  $48 = $47 + $7;
  $49 = $48 * 0.25;
  $50 = $36 + $6;
  $51 = $50 * 0.5;
  $52 = $51 - $45;
  $53 = $37 + $7;
  $54 = $53 * 0.5;
  $55 = $54 - $49;
  $56 = ($$tr914|0)>(15);
  if ($56) {
   label = 6;
   break;
  } else {
   $$tr311$phi = $37;$$tr210$phi = $36;$$tr412 = $39;$$tr513 = $41;$$tr914 = $35;$26 = $52;$28 = $55;$36 = $45;$37 = $49;$$tr311 = $$tr311$phi;$$tr210 = $$tr210$phi;
  }
 }
 if ((label|0) == 6) {
  return;
 }
 $57 = HEAP32[$1>>2]|0;
 _stbtt__add_point($0,$57,$6,$7);
 $58 = HEAP32[$1>>2]|0;
 $59 = (($58) + 1)|0;
 HEAP32[$1>>2] = $59;
 return;
}
function _stbtt__tesselate_cubic($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 $11 = $11|0;
 var $$tr138 = 0.0, $$tr139 = 0.0, $$tr140 = 0.0, $$tr141 = 0.0, $$tr142 = 0.0, $$tr143 = 0.0, $$tr147 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $sqrtf = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $$tr138 = $2;$$tr139 = $3;$$tr140 = $4;$$tr141 = $5;$$tr142 = $6;$$tr143 = $7;$$tr147 = $11;
 while(1) {
  $12 = $$tr140 - $$tr138;
  $13 = $$tr141 - $$tr139;
  $14 = $$tr142 - $$tr140;
  $15 = $$tr143 - $$tr141;
  $16 = $8 - $$tr142;
  $17 = $9 - $$tr143;
  $18 = $8 - $$tr138;
  $19 = $9 - $$tr139;
  $20 = $12 * $12;
  $21 = $13 * $13;
  $22 = $20 + $21;
  $23 = $22;
  $24 = (+Math_sqrt((+$23)));
  $25 = $14 * $14;
  $26 = $15 * $15;
  $27 = $25 + $26;
  $28 = $27;
  $29 = (+Math_sqrt((+$28)));
  $30 = $24 + $29;
  $31 = $16 * $16;
  $32 = $17 * $17;
  $33 = $31 + $32;
  $34 = $33;
  $35 = (+Math_sqrt((+$34)));
  $36 = $30 + $35;
  $37 = $36;
  $38 = $18 * $18;
  $39 = $19 * $19;
  $40 = $38 + $39;
  $sqrtf = (+Math_sqrt((+$40)));
  $41 = ($$tr147|0)>(16);
  if ($41) {
   label = 6;
   break;
  }
  $42 = $37 * $37;
  $43 = $sqrtf * $sqrtf;
  $44 = $42 - $43;
  $45 = $44 > $10;
  if (!($45)) {
   break;
  }
  $46 = $$tr138 + $$tr140;
  $47 = $46 * 0.5;
  $48 = $$tr139 + $$tr141;
  $49 = $48 * 0.5;
  $50 = $$tr140 + $$tr142;
  $51 = $50 * 0.5;
  $52 = $$tr141 + $$tr143;
  $53 = $52 * 0.5;
  $54 = $$tr142 + $8;
  $55 = $54 * 0.5;
  $56 = $$tr143 + $9;
  $57 = $56 * 0.5;
  $58 = $47 + $51;
  $59 = $58 * 0.5;
  $60 = $49 + $53;
  $61 = $60 * 0.5;
  $62 = $51 + $55;
  $63 = $62 * 0.5;
  $64 = $53 + $57;
  $65 = $64 * 0.5;
  $66 = $59 + $63;
  $67 = $66 * 0.5;
  $68 = $61 + $65;
  $69 = $68 * 0.5;
  $70 = (($$tr147) + 1)|0;
  _stbtt__tesselate_cubic($0,$1,$$tr138,$$tr139,$47,$49,$59,$61,$67,$69,$10,$70);
  $$tr138 = $67;$$tr139 = $69;$$tr140 = $63;$$tr141 = $65;$$tr142 = $55;$$tr143 = $57;$$tr147 = $70;
 }
 if ((label|0) == 6) {
  return;
 }
 $71 = HEAP32[$1>>2]|0;
 _stbtt__add_point($0,$71,$8,$9);
 $72 = HEAP32[$1>>2]|0;
 $73 = (($72) + 1)|0;
 HEAP32[$1>>2] = $73;
 return;
}
function _stbtt_GetGlyphBox($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  _stbtt__GetGlyphInfoT2($0,$1,$2,$3,$4,$5);
  $$1 = 1;
  return ($$1|0);
 }
 $9 = (_stbtt__GetGlyfOffset($0,$1)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  $$1 = 0;
  return ($$1|0);
 }
 $11 = ($2|0)==(0|0);
 if (!($11)) {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($9)|0);
  $15 = ((($14)) + 2|0);
  $16 = (_ttSHORT($15)|0);
  $17 = $16 << 16 >> 16;
  HEAP32[$2>>2] = $17;
 }
 $18 = ($3|0)==(0|0);
 if (!($18)) {
  $19 = ((($0)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($9)|0);
  $22 = ((($21)) + 4|0);
  $23 = (_ttSHORT($22)|0);
  $24 = $23 << 16 >> 16;
  HEAP32[$3>>2] = $24;
 }
 $25 = ($4|0)==(0|0);
 if (!($25)) {
  $26 = ((($0)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($9)|0);
  $29 = ((($28)) + 6|0);
  $30 = (_ttSHORT($29)|0);
  $31 = $30 << 16 >> 16;
  HEAP32[$4>>2] = $31;
 }
 $32 = ($5|0)==(0|0);
 if ($32) {
  $$1 = 1;
  return ($$1|0);
 }
 $33 = ((($0)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($9)|0);
 $36 = ((($35)) + 8|0);
 $37 = (_ttSHORT($36)|0);
 $38 = $37 << 16 >> 16;
 HEAP32[$5>>2] = $38;
 $$1 = 1;
 return ($$1|0);
}
function _stbtt__GetGlyphInfoT2($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp;
 $7 = ((($6)) + 4|0);
 dest=$7; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$6>>2] = 1;
 $8 = (_stbtt__run_charstring($0,$1,$6)|0);
 $9 = ($2|0)==(0|0);
 $10 = ($8|0)!=(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $11 = ((($6)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $10 ? $12 : 0;
 HEAP32[$2>>2] = $13;
 $14 = ((($6)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $10 ? $15 : 0;
 HEAP32[$3>>2] = $16;
 $17 = ((($6)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $10 ? $18 : 0;
 HEAP32[$4>>2] = $19;
 $20 = ((($6)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $10 ? $21 : 0;
 HEAP32[$5>>2] = $22;
 STACKTOP = sp;return;
}
function _stbtt__GetGlyfOffset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$023 = 0, $$024 = 0, $$pn = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  ___assert_fail((12538|0),(12115|0),1527,(12554|0));
  // unreachable;
 }
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>($1|0);
 if (!($7)) {
  $$024 = -1;
  return ($$024|0);
 }
 $8 = ((($0)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(1);
 if ($10) {
  $$024 = -1;
  return ($$024|0);
 }
 $11 = ($9|0)==(0);
 $12 = ((($0)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + ($17)|0);
 if ($11) {
  $19 = $1 << 1;
  $20 = (($18) + ($19)|0);
  $21 = (_ttUSHORT($20)|0);
  $22 = $21&65535;
  $23 = $22 << 1;
  $24 = ((($20)) + 2|0);
  $25 = (_ttUSHORT($24)|0);
  $26 = $25&65535;
  $27 = $26 << 1;
  $$pn = $23;$$sink = $27;
 } else {
  $28 = $1 << 2;
  $29 = (($18) + ($28)|0);
  $30 = (_ttULONG($29)|0);
  $31 = ((($29)) + 4|0);
  $32 = (_ttULONG($31)|0);
  $$pn = $30;$$sink = $32;
 }
 $33 = (($$sink) + ($13))|0;
 $$023 = (($$pn) + ($13))|0;
 $34 = ($$023|0)==($33|0);
 $35 = $34 ? -1 : $$023;
 $$024 = $35;
 return ($$024|0);
}
function _ttSHORT($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = ((($0)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $3 | $6;
 $8 = $7&65535;
 return ($8|0);
}
function _ttUSHORT($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = ((($0)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $3 | $6;
 $8 = $7&65535;
 return ($8|0);
}
function _ttULONG($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 24;
 $4 = ((($0)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 16;
 $8 = $7 | $3;
 $9 = ((($0)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 8;
 $13 = $8 | $12;
 $14 = ((($0)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $13 | $16;
 return ($17|0);
}
function _stbtt__run_charstring($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0274$be = 0, $$0274335 = 0, $$0276$be = 0, $$0276334 = 0, $$0279 = 0.0, $$0280 = 0.0, $$0282318 = 0.0, $$0285$be = 0, $$0285333 = 0, $$0288$be = 0, $$0288332 = 0, $$0290329 = 0, $$0294$be = 0, $$0294331 = 0, $$1277 = 0, $$1283 = 0.0, $$1286 = 0, $$1291 = 0, $$2292 = 0;
 var $$3 = 0, $$3293 = 0, $$363 = 0.0, $$4 = 0, $$5327 = 0, $$6$lcssa = 0, $$6322 = 0, $$7$lcssa = 0, $$7319 = 0, $$8317 = 0, $$byval_copy1 = 0, $$lcssa = 0, $$lcssa316 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0;
 var $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0;
 var $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0;
 var $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0.0;
 var $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0;
 var $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $fabsf = 0.0, $fabsf296 = 0.0, $not$ = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $$byval_copy1 = sp + 352|0;
 $3 = sp + 160|0;
 $4 = sp + 40|0;
 $5 = sp + 24|0;
 $6 = sp;
 $7 = sp + 12|0;
 $8 = ((($0)) + 84|0);
 ;HEAP32[$5>>2]=HEAP32[$8>>2]|0;HEAP32[$5+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$8+8>>2]|0;
 $9 = ((($0)) + 60|0);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$9+8>>2]|0;
 _stbtt__cff_index_get($6,$$byval_copy1,$1);
 $10 = ((($6)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)<($13|0);
 if (!($14)) {
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 $15 = ((($0)) + 116|0);
 $16 = ((($0)) + 72|0);
 $17 = ((($3)) + 4|0);
 $18 = ((($3)) + 8|0);
 $19 = ((($3)) + 12|0);
 $20 = ((($3)) + 16|0);
 $21 = ((($3)) + 20|0);
 $22 = ((($3)) + 24|0);
 $23 = ((($3)) + 4|0);
 $24 = ((($3)) + 8|0);
 $25 = ((($3)) + 12|0);
 $26 = ((($3)) + 16|0);
 $27 = ((($3)) + 20|0);
 $28 = ((($3)) + 24|0);
 $29 = ((($3)) + 28|0);
 $30 = ((($3)) + 32|0);
 $31 = ((($3)) + 36|0);
 $32 = ((($3)) + 40|0);
 $33 = ((($3)) + 44|0);
 $34 = ((($3)) + 4|0);
 $35 = ((($3)) + 8|0);
 $36 = ((($3)) + 12|0);
 $37 = ((($3)) + 16|0);
 $38 = ((($3)) + 20|0);
 $39 = ((($3)) + 24|0);
 $40 = ((($3)) + 28|0);
 $41 = ((($3)) + 32|0);
 $42 = ((($3)) + 4|0);
 $43 = ((($3)) + 8|0);
 $44 = ((($3)) + 12|0);
 $45 = ((($3)) + 16|0);
 $46 = ((($3)) + 20|0);
 $47 = ((($3)) + 24|0);
 $48 = ((($3)) + 28|0);
 $49 = ((($3)) + 32|0);
 $50 = ((($3)) + 36|0);
 $51 = ((($3)) + 40|0);
 $$0274335 = 1;$$0276334 = 0;$$0285333 = 0;$$0288332 = 0;$$0294331 = 0;
 L4: while(1) {
  $52 = (_stbtt__buf_get8($6)|0);
  L6: do {
   switch ($52<<24>>24) {
   case 14:  {
    label = 63;
    break L4;
    break;
   }
   case 20: case 19:  {
    $53 = ($$0274335|0)==(0);
    if ($53) {
     $$1277 = $$0276334;
    } else {
     $54 = (($$0294331|0) / 2)&-1;
     $55 = (($$0276334) + ($54))|0;
     $$1277 = $55;
    }
    $56 = (($$1277) + 7)|0;
    $57 = (($56|0) / 8)&-1;
    _stbtt__buf_skip($6,$57);
    $$0274$be = 0;$$0276$be = $$1277;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
    label = 73;
    break;
   }
   case 23: case 18: case 3: case 1:  {
    $58 = (($$0294331|0) / 2)&-1;
    $59 = (($$0276334) + ($58))|0;
    $$0274$be = $$0274335;$$0276$be = $59;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
    label = 73;
    break;
   }
   case 21:  {
    $60 = ($$0294331|0)<(2);
    if ($60) {
     $$3 = 0;
     label = 80;
     break L4;
    }
    $61 = (($$0294331) + -2)|0;
    $62 = (($3) + ($61<<2)|0);
    $63 = +HEAPF32[$62>>2];
    $64 = (($$0294331) + -1)|0;
    $65 = (($3) + ($64<<2)|0);
    $66 = +HEAPF32[$65>>2];
    _stbtt__csctx_rmove_to($2,$63,$66);
    $$0274$be = 0;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
    label = 73;
    break;
   }
   case 4:  {
    $67 = ($$0294331|0)<(1);
    if ($67) {
     $$3 = 0;
     label = 80;
     break L4;
    }
    $68 = (($$0294331) + -1)|0;
    $69 = (($3) + ($68<<2)|0);
    $70 = +HEAPF32[$69>>2];
    _stbtt__csctx_rmove_to($2,0.0,$70);
    $$0274$be = 0;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
    label = 73;
    break;
   }
   case 22:  {
    $71 = ($$0294331|0)<(1);
    if ($71) {
     $$3 = 0;
     label = 80;
     break L4;
    }
    $72 = (($$0294331) + -1)|0;
    $73 = (($3) + ($72<<2)|0);
    $74 = +HEAPF32[$73>>2];
    _stbtt__csctx_rmove_to($2,$74,0.0);
    $$0274$be = 0;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
    label = 73;
    break;
   }
   case 5:  {
    $75 = ($$0294331|0)<(2);
    if ($75) {
     $$3 = 0;
     label = 80;
     break L4;
    } else {
     $$0290329 = 0;$79 = 1;
    }
    while(1) {
     $76 = (($3) + ($$0290329<<2)|0);
     $77 = +HEAPF32[$76>>2];
     $78 = (($3) + ($79<<2)|0);
     $80 = +HEAPF32[$78>>2];
     _stbtt__csctx_rline_to($2,$77,$80);
     $81 = (($$0290329) + 2)|0;
     $82 = $81 | 1;
     $83 = ($82|0)<($$0294331|0);
     if ($83) {
      $$0290329 = $81;$79 = $82;
     } else {
      $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
      label = 73;
      break;
     }
    }
    break;
   }
   case 7:  {
    $84 = ($$0294331|0)<(1);
    if ($84) {
     $$3 = 0;
     label = 80;
     break L4;
    } else {
     $$2292 = 0;
     label = 20;
    }
    break;
   }
   case 6:  {
    $85 = ($$0294331|0)<(1);
    if ($85) {
     $$3 = 0;
     label = 80;
     break L4;
    } else {
     $$1291 = 0;
     label = 18;
    }
    break;
   }
   case 31:  {
    $94 = ($$0294331|0)<(4);
    if ($94) {
     $$3 = 0;
     label = 80;
     break L4;
    } else {
     $$4 = 0;
     label = 28;
    }
    break;
   }
   case 30:  {
    $95 = ($$0294331|0)<(4);
    if ($95) {
     $$3 = 0;
     label = 80;
     break L4;
    } else {
     $$3293 = 0;
     label = 24;
    }
    break;
   }
   case 8:  {
    $134 = ($$0294331|0)<(6);
    if ($134) {
     $$3 = 0;
     label = 80;
     break L4;
    } else {
     $$5327 = 0;$150 = 5;
    }
    while(1) {
     $135 = (($3) + ($$5327<<2)|0);
     $136 = +HEAPF32[$135>>2];
     $137 = $$5327 | 1;
     $138 = (($3) + ($137<<2)|0);
     $139 = +HEAPF32[$138>>2];
     $140 = (($$5327) + 2)|0;
     $141 = (($3) + ($140<<2)|0);
     $142 = +HEAPF32[$141>>2];
     $143 = (($$5327) + 3)|0;
     $144 = (($3) + ($143<<2)|0);
     $145 = +HEAPF32[$144>>2];
     $146 = (($$5327) + 4)|0;
     $147 = (($3) + ($146<<2)|0);
     $148 = +HEAPF32[$147>>2];
     $149 = (($3) + ($150<<2)|0);
     $151 = +HEAPF32[$149>>2];
     _stbtt__csctx_rccurve_to($2,$136,$139,$142,$145,$148,$151);
     $152 = (($$5327) + 6)|0;
     $153 = (($$5327) + 11)|0;
     $154 = ($153|0)<($$0294331|0);
     if ($154) {
      $$5327 = $152;$150 = $153;
     } else {
      $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
      label = 73;
      break;
     }
    }
    break;
   }
   case 24:  {
    $155 = ($$0294331|0)<(8);
    if ($155) {
     $$3 = 0;
     label = 80;
     break L4;
    }
    $156 = (($$0294331) + -2)|0;
    $157 = ($156|0)>(5);
    if ($157) {
     $$6322 = 0;$161 = 1;$173 = 5;
     while(1) {
      $158 = (($3) + ($$6322<<2)|0);
      $159 = +HEAPF32[$158>>2];
      $160 = (($3) + ($161<<2)|0);
      $162 = +HEAPF32[$160>>2];
      $163 = (($$6322) + 2)|0;
      $164 = (($3) + ($163<<2)|0);
      $165 = +HEAPF32[$164>>2];
      $166 = (($$6322) + 3)|0;
      $167 = (($3) + ($166<<2)|0);
      $168 = +HEAPF32[$167>>2];
      $169 = (($$6322) + 4)|0;
      $170 = (($3) + ($169<<2)|0);
      $171 = +HEAPF32[$170>>2];
      $172 = (($3) + ($173<<2)|0);
      $174 = +HEAPF32[$172>>2];
      _stbtt__csctx_rccurve_to($2,$159,$162,$165,$168,$171,$174);
      $175 = (($$6322) + 6)|0;
      $176 = (($$6322) + 11)|0;
      $177 = ($176|0)<($156|0);
      $178 = $175 | 1;
      if ($177) {
       $$6322 = $175;$161 = $178;$173 = $176;
      } else {
       $$6$lcssa = $175;$$lcssa316 = $178;
       break;
      }
     }
    } else {
     $$6$lcssa = 0;$$lcssa316 = 1;
    }
    $179 = ($$lcssa316|0)<($$0294331|0);
    if (!($179)) {
     $$3 = 0;
     label = 80;
     break L4;
    }
    $180 = (($3) + ($$6$lcssa<<2)|0);
    $181 = +HEAPF32[$180>>2];
    $182 = (($3) + ($$lcssa316<<2)|0);
    $183 = +HEAPF32[$182>>2];
    _stbtt__csctx_rline_to($2,$181,$183);
    $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
    label = 73;
    break;
   }
   case 25:  {
    $184 = ($$0294331|0)<(8);
    if ($184) {
     $$3 = 0;
     label = 80;
     break L4;
    }
    $185 = (($$0294331) + -6)|0;
    $186 = ($185|0)>(1);
    if ($186) {
     $$7319 = 0;$190 = 1;
     while(1) {
      $187 = (($3) + ($$7319<<2)|0);
      $188 = +HEAPF32[$187>>2];
      $189 = (($3) + ($190<<2)|0);
      $191 = +HEAPF32[$189>>2];
      _stbtt__csctx_rline_to($2,$188,$191);
      $192 = (($$7319) + 2)|0;
      $193 = $192 | 1;
      $194 = ($193|0)<($185|0);
      if ($194) {
       $$7319 = $192;$190 = $193;
      } else {
       $$7$lcssa = $192;$$lcssa = $193;
       break;
      }
     }
    } else {
     $$7$lcssa = 0;$$lcssa = 1;
    }
    $195 = (($$7$lcssa) + 5)|0;
    $196 = ($195|0)<($$0294331|0);
    if (!($196)) {
     $$3 = 0;
     label = 80;
     break L4;
    }
    $197 = (($3) + ($$7$lcssa<<2)|0);
    $198 = +HEAPF32[$197>>2];
    $199 = (($3) + ($$lcssa<<2)|0);
    $200 = +HEAPF32[$199>>2];
    $201 = (($$7$lcssa) + 2)|0;
    $202 = (($3) + ($201<<2)|0);
    $203 = +HEAPF32[$202>>2];
    $204 = (($$7$lcssa) + 3)|0;
    $205 = (($3) + ($204<<2)|0);
    $206 = +HEAPF32[$205>>2];
    $207 = (($$7$lcssa) + 4)|0;
    $208 = (($3) + ($207<<2)|0);
    $209 = +HEAPF32[$208>>2];
    $210 = (($3) + ($195<<2)|0);
    $211 = +HEAPF32[$210>>2];
    _stbtt__csctx_rccurve_to($2,$198,$200,$203,$206,$209,$211);
    $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
    label = 73;
    break;
   }
   case 27: case 26:  {
    $212 = ($$0294331|0)<(4);
    if ($212) {
     $$3 = 0;
     label = 80;
     break L4;
    }
    $213 = $$0294331 & 1;
    $214 = ($213|0)==(0);
    $215 = (($213) + 3)|0;
    $216 = ($215|0)<($$0294331|0);
    if ($216) {
     $not$ = $214 ^ 1;
     $$ = $not$&1;
     $217 = +HEAPF32[$3>>2];
     $$363 = $214 ? 0.0 : $217;
     $218 = ($52<<24>>24)==(27);
     $$0282318 = $$363;$$8317 = $$;$228 = $215;
     while(1) {
      $219 = (($$8317) + 2)|0;
      $220 = (($$8317) + 1)|0;
      $221 = (($3) + ($219<<2)|0);
      $222 = +HEAPF32[$221>>2];
      $223 = (($3) + ($$8317<<2)|0);
      $224 = +HEAPF32[$223>>2];
      $225 = (($3) + ($220<<2)|0);
      $226 = +HEAPF32[$225>>2];
      $227 = (($3) + ($228<<2)|0);
      $229 = +HEAPF32[$227>>2];
      if ($218) {
       _stbtt__csctx_rccurve_to($2,$224,$$0282318,$226,$222,$229,0.0);
      } else {
       _stbtt__csctx_rccurve_to($2,$$0282318,$224,$226,$222,0.0,$229);
      }
      $230 = (($$8317) + 4)|0;
      $231 = (($$8317) + 7)|0;
      $232 = ($231|0)<($$0294331|0);
      if ($232) {
       $$0282318 = 0.0;$$8317 = $230;$228 = $231;
      } else {
       $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
       label = 73;
       break;
      }
     }
    } else {
     $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
     label = 73;
    }
    break;
   }
   case 10:  {
    $233 = ($$0285333|0)==(0);
    if ($233) {
     $234 = HEAP32[$15>>2]|0;
     $235 = ($234|0)==(0);
     if ($235) {
      $$1286 = 1;
      label = 54;
     } else {
      _stbtt__cid_get_glyph_subrs($5,$0,$1);
      $$1286 = 1;
      label = 54;
     }
    } else {
     $$1286 = $$0285333;
     label = 54;
    }
    break;
   }
   case 29:  {
    $$1286 = $$0285333;
    label = 54;
    break;
   }
   case 11:  {
    $247 = ($$0288332|0)<(1);
    if ($247) {
     $$3 = 0;
     label = 80;
     break L4;
    }
    $248 = (($$0288332) + -1)|0;
    $249 = (($4) + (($248*12)|0)|0);
    ;HEAP32[$6>>2]=HEAP32[$249>>2]|0;HEAP32[$6+4>>2]=HEAP32[$249+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$249+8>>2]|0;
    $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $248;$$0294$be = $$0294331;
    label = 73;
    break;
   }
   case 12:  {
    $250 = (_stbtt__buf_get8($6)|0);
    switch ($250<<24>>24) {
    case 34:  {
     $251 = ($$0294331|0)<(7);
     if ($251) {
      $$3 = 0;
      label = 80;
      break L4;
     }
     $252 = +HEAPF32[$3>>2];
     $253 = +HEAPF32[$17>>2];
     $254 = +HEAPF32[$18>>2];
     $255 = +HEAPF32[$19>>2];
     $256 = +HEAPF32[$20>>2];
     $257 = +HEAPF32[$21>>2];
     $258 = +HEAPF32[$22>>2];
     _stbtt__csctx_rccurve_to($2,$252,0.0,$253,$254,$255,0.0);
     $259 = -$254;
     _stbtt__csctx_rccurve_to($2,$256,0.0,$257,$259,$258,0.0);
     $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
     label = 73;
     break L6;
     break;
    }
    case 35:  {
     $260 = ($$0294331|0)<(13);
     if ($260) {
      $$3 = 0;
      label = 80;
      break L4;
     }
     $261 = +HEAPF32[$3>>2];
     $262 = +HEAPF32[$23>>2];
     $263 = +HEAPF32[$24>>2];
     $264 = +HEAPF32[$25>>2];
     $265 = +HEAPF32[$26>>2];
     $266 = +HEAPF32[$27>>2];
     $267 = +HEAPF32[$28>>2];
     $268 = +HEAPF32[$29>>2];
     $269 = +HEAPF32[$30>>2];
     $270 = +HEAPF32[$31>>2];
     $271 = +HEAPF32[$32>>2];
     $272 = +HEAPF32[$33>>2];
     _stbtt__csctx_rccurve_to($2,$261,$262,$263,$264,$265,$266);
     _stbtt__csctx_rccurve_to($2,$267,$268,$269,$270,$271,$272);
     $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
     label = 73;
     break L6;
     break;
    }
    case 36:  {
     $273 = ($$0294331|0)<(9);
     if ($273) {
      $$3 = 0;
      label = 80;
      break L4;
     }
     $274 = +HEAPF32[$3>>2];
     $275 = +HEAPF32[$34>>2];
     $276 = +HEAPF32[$35>>2];
     $277 = +HEAPF32[$36>>2];
     $278 = +HEAPF32[$37>>2];
     $279 = +HEAPF32[$38>>2];
     $280 = +HEAPF32[$39>>2];
     $281 = +HEAPF32[$40>>2];
     $282 = +HEAPF32[$41>>2];
     _stbtt__csctx_rccurve_to($2,$274,$275,$276,$277,$278,0.0);
     $283 = $275 + $277;
     $284 = $283 + $281;
     $285 = -$284;
     _stbtt__csctx_rccurve_to($2,$279,0.0,$280,$281,$282,$285);
     $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
     label = 73;
     break L6;
     break;
    }
    case 37:  {
     $286 = ($$0294331|0)<(11);
     if ($286) {
      $$3 = 0;
      label = 80;
      break L4;
     }
     $287 = +HEAPF32[$3>>2];
     $288 = +HEAPF32[$42>>2];
     $289 = +HEAPF32[$43>>2];
     $290 = +HEAPF32[$44>>2];
     $291 = +HEAPF32[$45>>2];
     $292 = +HEAPF32[$46>>2];
     $293 = +HEAPF32[$47>>2];
     $294 = +HEAPF32[$48>>2];
     $295 = +HEAPF32[$49>>2];
     $296 = +HEAPF32[$50>>2];
     $297 = +HEAPF32[$51>>2];
     $298 = $287 + $289;
     $299 = $298 + $291;
     $300 = $299 + $293;
     $301 = $300 + $295;
     $302 = $288 + $290;
     $303 = $302 + $292;
     $304 = $303 + $294;
     $305 = $304 + $296;
     $fabsf = (+Math_abs((+$301)));
     $fabsf296 = (+Math_abs((+$305)));
     $306 = $fabsf > $fabsf296;
     $307 = -$305;
     $308 = -$301;
     $$0280 = $306 ? $297 : $308;
     $$0279 = $306 ? $307 : $297;
     _stbtt__csctx_rccurve_to($2,$287,$288,$289,$290,$291,$292);
     _stbtt__csctx_rccurve_to($2,$293,$294,$295,$296,$$0280,$$0279);
     $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
     label = 73;
     break L6;
     break;
    }
    default: {
     $$3 = 0;
     label = 80;
     break L4;
    }
    }
    break;
   }
   case -1:  {
    label = 76;
    break;
   }
   case 28:  {
    label = 77;
    break;
   }
   default: {
    $312 = ($52&255)<(32);
    $313 = ($52<<24>>24)==(-1);
    $or$cond3 = $312 | $313;
    if ($or$cond3) {
     $$3 = 0;
     label = 80;
     break L4;
    }
    if ($313) {
     label = 76;
    } else {
     label = 77;
    }
   }
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   $236 = ($$0294331|0)<(1);
   if ($236) {
    $$3 = 0;
    label = 80;
    break;
   }
   $237 = (($$0294331) + -1)|0;
   $238 = (($3) + ($237<<2)|0);
   $239 = +HEAPF32[$238>>2];
   $240 = (~~(($239)));
   $241 = ($$0288332|0)>(9);
   if ($241) {
    $$3 = 0;
    label = 80;
    break;
   }
   $242 = (($$0288332) + 1)|0;
   $243 = (($4) + (($$0288332*12)|0)|0);
   ;HEAP32[$243>>2]=HEAP32[$6>>2]|0;HEAP32[$243+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$243+8>>2]=HEAP32[$6+8>>2]|0;
   $244 = ($52<<24>>24)==(10);
   if ($244) {
    ;HEAP32[$7>>2]=HEAP32[$5>>2]|0;HEAP32[$7+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$5+8>>2]|0;
   } else {
    ;HEAP32[$7>>2]=HEAP32[$16>>2]|0;HEAP32[$7+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$16+8>>2]|0;
   }
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$7+8>>2]|0;
   _stbtt__get_subr($6,$$byval_copy1,$240);
   $245 = HEAP32[$12>>2]|0;
   $246 = ($245|0)==(0);
   if ($246) {
    $$3 = 0;
    label = 80;
    break;
   }
   HEAP32[$10>>2] = 0;
   $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$1286;$$0288$be = $242;$$0294$be = $237;
   label = 73;
  }
  else if ((label|0) == 76) {
   label = 0;
   $314 = (_stbtt__buf_get($6,4)|0);
   $315 = (+($314>>>0));
   $316 = $315 * 1.52587890625E-5;
   $$1283 = $316;
   label = 78;
  }
  else if ((label|0) == 77) {
   label = 0;
   _stbtt__buf_skip($6,-1);
   $317 = (_stbtt__cff_int($6)|0);
   $318 = $317&65535;
   $319 = (+($318<<16>>16));
   $$1283 = $319;
   label = 78;
  }
  if ((label|0) == 78) {
   label = 0;
   $320 = ($$0294331|0)>(47);
   if ($320) {
    $$3 = 0;
    label = 80;
    break;
   }
   $321 = (($$0294331) + 1)|0;
   $322 = (($3) + ($$0294331<<2)|0);
   HEAPF32[$322>>2] = $$1283;
   $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = $321;
   label = 73;
  }
  while(1) {
   if ((label|0) == 18) {
    label = 0;
    $86 = ($$1291|0)<($$0294331|0);
    if (!($86)) {
     $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
     label = 73;
     continue;
    }
    $87 = (($3) + ($$1291<<2)|0);
    $88 = +HEAPF32[$87>>2];
    _stbtt__csctx_rline_to($2,$88,0.0);
    $89 = (($$1291) + 1)|0;
    $$2292 = $89;
    label = 20;
    continue;
   }
   else if ((label|0) == 20) {
    label = 0;
    $90 = ($$2292|0)<($$0294331|0);
    if (!($90)) {
     $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
     label = 73;
     continue;
    }
    $91 = (($3) + ($$2292<<2)|0);
    $92 = +HEAPF32[$91>>2];
    _stbtt__csctx_rline_to($2,0.0,$92);
    $93 = (($$2292) + 1)|0;
    $$1291 = $93;
    label = 18;
    continue;
   }
   else if ((label|0) == 24) {
    label = 0;
    $96 = (($$3293) + 3)|0;
    $97 = ($96|0)<($$0294331|0);
    if (!($97)) {
     $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
     label = 73;
     continue;
    }
    $98 = (($3) + ($$3293<<2)|0);
    $99 = +HEAPF32[$98>>2];
    $100 = (($$3293) + 1)|0;
    $101 = (($3) + ($100<<2)|0);
    $102 = +HEAPF32[$101>>2];
    $103 = (($$3293) + 2)|0;
    $104 = (($3) + ($103<<2)|0);
    $105 = +HEAPF32[$104>>2];
    $106 = (($3) + ($96<<2)|0);
    $107 = +HEAPF32[$106>>2];
    $108 = (($$0294331) - ($$3293))|0;
    $109 = ($108|0)==(5);
    if ($109) {
     $110 = (($$3293) + 4)|0;
     $111 = (($3) + ($110<<2)|0);
     $112 = +HEAPF32[$111>>2];
     $113 = $112;
    } else {
     $113 = 0.0;
    }
    _stbtt__csctx_rccurve_to($2,0.0,$99,$102,$105,$107,$113);
    $114 = (($$3293) + 4)|0;
    $$4 = $114;
    label = 28;
    continue;
   }
   else if ((label|0) == 28) {
    label = 0;
    $115 = (($$4) + 3)|0;
    $116 = ($115|0)<($$0294331|0);
    if (!($116)) {
     $$0274$be = $$0274335;$$0276$be = $$0276334;$$0285$be = $$0285333;$$0288$be = $$0288332;$$0294$be = 0;
     label = 73;
     continue;
    }
    $117 = (($3) + ($$4<<2)|0);
    $118 = +HEAPF32[$117>>2];
    $119 = (($$4) + 1)|0;
    $120 = (($3) + ($119<<2)|0);
    $121 = +HEAPF32[$120>>2];
    $122 = (($$4) + 2)|0;
    $123 = (($3) + ($122<<2)|0);
    $124 = +HEAPF32[$123>>2];
    $125 = (($$0294331) - ($$4))|0;
    $126 = ($125|0)==(5);
    if ($126) {
     $127 = (($$4) + 4)|0;
     $128 = (($3) + ($127<<2)|0);
     $129 = +HEAPF32[$128>>2];
     $132 = $129;
    } else {
     $132 = 0.0;
    }
    $130 = (($3) + ($115<<2)|0);
    $131 = +HEAPF32[$130>>2];
    _stbtt__csctx_rccurve_to($2,$118,0.0,$121,$124,$132,$131);
    $133 = (($$4) + 4)|0;
    $$3293 = $133;
    label = 24;
    continue;
   }
   else if ((label|0) == 73) {
    label = 0;
    $309 = HEAP32[$10>>2]|0;
    $310 = HEAP32[$12>>2]|0;
    $311 = ($309|0)<($310|0);
    if ($311) {
     $$0274335 = $$0274$be;$$0276334 = $$0276$be;$$0285333 = $$0285$be;$$0288332 = $$0288$be;$$0294331 = $$0294$be;
     continue L4;
    } else {
     $$3 = 0;
     label = 80;
     break L4;
    }
   }
  }
 }
 if ((label|0) == 63) {
  _stbtt__csctx_close_shape($2);
  $$3 = 1;
  STACKTOP = sp;return ($$3|0);
 }
 else if ((label|0) == 80) {
  STACKTOP = sp;return ($$3|0);
 }
 return (0)|0;
}
function _stbtt__cff_index_get($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _stbtt__buf_seek($1,0);
 $3 = (_stbtt__buf_get($1,2)|0);
 $4 = (_stbtt__buf_get8($1)|0);
 $5 = $4&255;
 $6 = ($2|0)>(-1);
 $7 = ($3|0)>($2|0);
 $or$cond = $6 & $7;
 if (!($or$cond)) {
  ___assert_fail((12778|0),(12115|0),1205,(12798|0));
  // unreachable;
 }
 $$off = (($4) + -1)<<24>>24;
 $8 = ($$off&255)<(4);
 if ($8) {
  $9 = Math_imul($5, $2)|0;
  _stbtt__buf_skip($1,$9);
  $10 = (_stbtt__buf_get($1,$5)|0);
  $11 = (_stbtt__buf_get($1,$5)|0);
  $12 = (($3) + 1)|0;
  $13 = Math_imul($5, $12)|0;
  $14 = (($13) + 2)|0;
  $15 = (($14) + ($10))|0;
  $16 = (($11) - ($10))|0;
  _stbtt__buf_range($0,$1,$15,$16);
  return;
 } else {
  ___assert_fail((12695|0),(12115|0),1206,(12798|0));
  // unreachable;
 }
}
function _stbtt__buf_get8($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (($2) + 1)|0;
 $7 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $6;
 $8 = (($7) + ($2)|0);
 $9 = HEAP8[$8>>0]|0;
 $$0 = $9;
 return ($$0|0);
}
function _stbtt__buf_skip($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 _stbtt__buf_seek($0,$4);
 return;
}
function _stbtt__csctx_rmove_to($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 _stbtt__csctx_close_shape($0);
 $3 = ((($0)) + 16|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4 + $1;
 HEAPF32[$3>>2] = $5;
 $6 = ((($0)) + 8|0);
 HEAPF32[$6>>2] = $5;
 $7 = ((($0)) + 20|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 + $2;
 HEAPF32[$7>>2] = $9;
 $10 = ((($0)) + 12|0);
 HEAPF32[$10>>2] = $9;
 $11 = +HEAPF32[$3>>2];
 $12 = (~~(($11)));
 $13 = (~~(($9)));
 _stbtt__csctx_v($0,1,$12,$13,0,0,0,0);
 return;
}
function _stbtt__csctx_rline_to($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4 + $1;
 HEAPF32[$3>>2] = $5;
 $6 = ((($0)) + 20|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7 + $2;
 HEAPF32[$6>>2] = $8;
 $9 = (~~(($5)));
 $10 = (~~(($8)));
 _stbtt__csctx_v($0,2,$9,$10,0,0,0,0);
 return;
}
function _stbtt__csctx_rccurve_to($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($0)) + 16|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 + $1;
 $10 = ((($0)) + 20|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 + $2;
 $13 = $9 + $3;
 $14 = $12 + $4;
 $15 = $13 + $5;
 HEAPF32[$7>>2] = $15;
 $16 = $14 + $6;
 HEAPF32[$10>>2] = $16;
 $17 = (~~(($15)));
 $18 = (~~(($16)));
 $19 = (~~(($9)));
 $20 = (~~(($12)));
 $21 = (~~(($13)));
 $22 = (~~(($14)));
 _stbtt__csctx_v($0,4,$17,$18,$19,$20,$21,$22);
 return;
}
function _stbtt__cid_get_glyph_subrs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02931 = 0, $$03034 = 0, $$035 = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy2 = sp + 36|0;
 $$byval_copy1 = sp + 24|0;
 $3 = sp;
 $4 = sp + 12|0;
 $5 = ((($1)) + 108|0);
 ;HEAP32[$3>>2]=HEAP32[$5>>2]|0;HEAP32[$3+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$5+8>>2]|0;
 _stbtt__buf_seek($3,0);
 $6 = (_stbtt__buf_get8($3)|0);
 L1: do {
  switch ($6<<24>>24) {
  case 0:  {
   _stbtt__buf_skip($3,$2);
   $7 = (_stbtt__buf_get8($3)|0);
   $8 = $7&255;
   $$02931 = $8;
   break;
  }
  case 3:  {
   $9 = (_stbtt__buf_get($3,2)|0);
   $10 = (_stbtt__buf_get($3,2)|0);
   $11 = ($9|0)>(0);
   if ($11) {
    $$03034 = $10;$$035 = 0;
    while(1) {
     $14 = (_stbtt__buf_get8($3)|0);
     $15 = (_stbtt__buf_get($3,2)|0);
     $16 = ($$03034|0)<=($2|0);
     $17 = ($15|0)>($2|0);
     $or$cond = $16 & $17;
     $13 = (($$035) + 1)|0;
     if ($or$cond) {
      break;
     }
     $12 = ($13|0)<($9|0);
     if ($12) {
      $$03034 = $15;$$035 = $13;
     } else {
      label = 6;
      break L1;
     }
    }
    $18 = $14&255;
    $$02931 = $18;
   } else {
    label = 6;
   }
   break;
  }
  default: {
   label = 6;
  }
  }
 } while(0);
 if ((label|0) == 6) {
  _stbtt__new_buf($$byval_copy2,0,0);
  $$02931 = -1;
 }
 $19 = ((($1)) + 48|0);
 $20 = ((($1)) + 96|0);
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$20+8>>2]|0;
 _stbtt__cff_index_get($4,$$byval_copy2,$$02931);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$19+8>>2]|0;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$4+8>>2]|0;
 _stbtt__get_subrs($0,$$byval_copy1,$$byval_copy2);
 STACKTOP = sp;return;
}
function _stbtt__get_subr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $3 = (_stbtt__cff_index_count($1)|0);
 $4 = ($3|0)>(33899);
 $5 = ($3|0)>(1239);
 $$ = $5 ? 1131 : 107;
 $$0 = $4 ? 32768 : $$;
 $6 = (($$0) + ($2))|0;
 $7 = ($6|0)>(-1);
 $8 = ($6|0)<($3|0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;
  _stbtt__cff_index_get($0,$$byval_copy,$6);
  STACKTOP = sp;return;
 } else {
  _stbtt__new_buf($0,0,0);
  STACKTOP = sp;return;
 }
}
function _stbtt__csctx_close_shape($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = +HEAPF32[$1>>2];
 $3 = ((($0)) + 16|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $2 != $4;
 $6 = ((($0)) + 12|0);
 $7 = +HEAPF32[$6>>2];
 if (!($5)) {
  $8 = ((($0)) + 20|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $7 != $9;
  if (!($10)) {
   return;
  }
 }
 $11 = (~~(($2)));
 $12 = (~~(($7)));
 _stbtt__csctx_v($0,2,$11,$12,0,0,0,0);
 return;
}
function _stbtt__buf_get($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01011 = 0, $$012 = 0, $$off = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$off = (($1) + -1)|0;
 $2 = ($$off>>>0)<(4);
 if ($2) {
  $$01011 = 0;$$012 = 0;
 } else {
  ___assert_fail((12590|0),(12115|0),1101,(12607|0));
  // unreachable;
 }
 while(1) {
  $3 = $$01011 << 8;
  $4 = (_stbtt__buf_get8($0)|0);
  $5 = $4&255;
  $6 = $5 | $3;
  $7 = (($$012) + 1)|0;
  $exitcond = ($7|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$01011 = $6;$$012 = $7;
  }
 }
 return ($6|0);
}
function _stbtt__cff_int($0) {
 $0 = $0|0;
 var $$0 = 0, $$off = 0, $$off19 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_stbtt__buf_get8($0)|0);
 $2 = $1&255;
 $$off = (($1) + -32)<<24>>24;
 $3 = ($$off&255)<(215);
 if ($3) {
  $4 = (($2) + -139)|0;
  $$0 = $4;
  return ($$0|0);
 }
 $$off19 = (($1) + 9)<<24>>24;
 $5 = ($$off19&255)<(4);
 if ($5) {
  $6 = $2 << 8;
  $7 = (($6) + -63232)|0;
  $8 = (_stbtt__buf_get8($0)|0);
  $9 = $8&255;
  $10 = $9 | $7;
  $11 = (($10) + 108)|0;
  $$0 = $11;
  return ($$0|0);
 }
 $12 = ($1&255)>(250);
 $13 = ($1<<24>>24)!=(-1);
 $or$cond5 = $12 & $13;
 if ($or$cond5) {
  $14 = (251 - ($2))|0;
  $15 = $14 << 8;
  $16 = (_stbtt__buf_get8($0)|0);
  $17 = $16&255;
  $18 = (($15) + -108)|0;
  $19 = (($18) - ($17))|0;
  $$0 = $19;
  return ($$0|0);
 }
 switch ($1<<24>>24) {
 case 28:  {
  $20 = (_stbtt__buf_get($0,2)|0);
  $$0 = $20;
  return ($$0|0);
  break;
 }
 case 29:  {
  $21 = (_stbtt__buf_get($0,4)|0);
  $$0 = $21;
  return ($$0|0);
  break;
 }
 default: {
  ___assert_fail((13995|0),(12115|0),1151,(12575|0));
  // unreachable;
 }
 }
 return (0)|0;
}
function _stbtt__csctx_v($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 40|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + (($14*14)|0)|0);
  _stbtt_setvertex($15,$1,$2,$3,$4,$5);
  $16 = $6&65535;
  $17 = HEAP32[$11>>2]|0;
  $18 = HEAP32[$13>>2]|0;
  $19 = (((($17) + (($18*14)|0)|0)) + 8|0);
  HEAP16[$19>>1] = $16;
  $20 = $7&65535;
  $21 = HEAP32[$11>>2]|0;
  $22 = HEAP32[$13>>2]|0;
  $23 = (((($21) + (($22*14)|0)|0)) + 10|0);
  HEAP16[$23>>1] = $20;
 } else {
  _stbtt__track_vertex($0,$2,$3);
  $10 = ($1<<24>>24)==(4);
  if ($10) {
   _stbtt__track_vertex($0,$4,$5);
   _stbtt__track_vertex($0,$6,$7);
  }
 }
 $24 = ((($0)) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$24>>2] = $26;
 return;
}
function _stbtt__track_vertex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<($1|0);
 if ($5) {
  label = 3;
 } else {
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$3>>2] = $1;
 }
 $9 = ((($0)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<($2|0);
 if ($11) {
  label = 6;
 } else {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  HEAP32[$9>>2] = $2;
 }
 $15 = ((($0)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)>($1|0);
 if ($17) {
  label = 9;
 } else {
  $18 = ((($0)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0);
  if ($20) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  HEAP32[$15>>2] = $1;
 }
 $21 = ((($0)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)>($2|0);
 if (!($23)) {
  $24 = ((($0)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0);
  if (!($26)) {
   $27 = ((($0)) + 4|0);
   HEAP32[$27>>2] = 1;
   return;
  }
 }
 HEAP32[$21>>2] = $2;
 $27 = ((($0)) + 4|0);
 HEAP32[$27>>2] = 1;
 return;
}
function _stbtt_setvertex($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 12|0);
 HEAP8[$6>>0] = $1;
 $7 = $2&65535;
 HEAP16[$0>>1] = $7;
 $8 = $3&65535;
 $9 = ((($0)) + 2|0);
 HEAP16[$9>>1] = $8;
 $10 = $4&65535;
 $11 = ((($0)) + 4|0);
 HEAP16[$11>>1] = $10;
 $12 = $5&65535;
 $13 = ((($0)) + 6|0);
 HEAP16[$13>>1] = $12;
 return;
}
function _stbtt__cff_index_count($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _stbtt__buf_seek($0,0);
 $1 = (_stbtt__buf_get($0,2)|0);
 return ($1|0);
}
function _stbtt__new_buf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$4$0$$sroa_idx2 = 0, $$sroa$5$0$$sroa_idx4 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)<(1073741824);
 if ($3) {
  HEAP32[$0>>2] = $1;
  $$sroa$4$0$$sroa_idx2 = ((($0)) + 4|0);
  HEAP32[$$sroa$4$0$$sroa_idx2>>2] = 0;
  $$sroa$5$0$$sroa_idx4 = ((($0)) + 8|0);
  HEAP32[$$sroa$5$0$$sroa_idx4>>2] = $2;
  return;
 } else {
  ___assert_fail((12622|0),(12115|0),1110,(12640|0));
  // unreachable;
 }
}
function _stbtt__buf_seek($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<($1|0);
 $5 = ($1|0)<(0);
 $or$cond = $5 | $4;
 if ($or$cond) {
  ___assert_fail((12655|0),(12115|0),1088,(12679|0));
  // unreachable;
 } else {
  $6 = ((($0)) + 4|0);
  HEAP32[$6>>2] = $1;
  return;
 }
}
function _stbtt__get_subrs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $4 = sp;
 $5 = sp + 8|0;
 HEAP32[$3>>2] = 0;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 _stbtt__dict_get_ints($2,18,2,$4);
 $10 = ((($4)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = HEAP32[$4>>2]|0;
  $14 = ($13|0)==(0);
  if (!($14)) {
   _stbtt__buf_range($5,$1,$11,$13);
   _stbtt__dict_get_ints($5,19,1,$3);
   $15 = HEAP32[$3>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    _stbtt__new_buf($0,0,0);
    STACKTOP = sp;return;
   } else {
    $17 = HEAP32[$10>>2]|0;
    $18 = (($17) + ($15))|0;
    _stbtt__buf_seek($1,$18);
    _stbtt__cff_get_index($0,$1);
    STACKTOP = sp;return;
   }
  }
 }
 _stbtt__new_buf($0,0,0);
 STACKTOP = sp;return;
}
function _stbtt__dict_get_ints($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$07 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 _stbtt__dict_get($4,$0,$1);
 $5 = ((($4)) + 4|0);
 $6 = ($2|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ((($4)) + 8|0);
 $$07 = 0;
 while(1) {
  $8 = HEAP32[$5>>2]|0;
  $9 = HEAP32[$7>>2]|0;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 5;
   break;
  }
  $11 = (_stbtt__cff_int($4)|0);
  $12 = (($3) + ($$07<<2)|0);
  HEAP32[$12>>2] = $11;
  $13 = (($$07) + 1)|0;
  $14 = ($13|0)<($2|0);
  if ($14) {
   $$07 = $13;
  } else {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function _stbtt__buf_range($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 _stbtt__new_buf($4,0,0);
 $5 = $3 | $2;
 $6 = ($5|0)<(0);
 if (!($6)) {
  $7 = ((($1)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)<($2|0);
  $10 = (($8) - ($2))|0;
  $11 = ($10|0)<($3|0);
  $or$cond = $9 | $11;
  if (!($or$cond)) {
   $12 = HEAP32[$1>>2]|0;
   $13 = (($12) + ($2)|0);
   HEAP32[$4>>2] = $13;
   $14 = ((($4)) + 8|0);
   HEAP32[$14>>2] = $3;
   ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;
   STACKTOP = sp;return;
  }
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function _stbtt__cff_get_index($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_stbtt__buf_get($1,2)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $12 = HEAP32[$2>>2]|0;
  $13 = (($12) - ($3))|0;
  _stbtt__buf_range($0,$1,$3,$13);
  return;
 }
 $6 = (_stbtt__buf_get8($1)|0);
 $7 = $6&255;
 $$off = (($6) + -1)<<24>>24;
 $8 = ($$off&255)<(4);
 if (!($8)) {
  ___assert_fail((12695|0),(12115|0),1136,(12724|0));
  // unreachable;
 }
 $9 = Math_imul($7, $4)|0;
 _stbtt__buf_skip($1,$9);
 $10 = (_stbtt__buf_get($1,$7)|0);
 $11 = (($10) + -1)|0;
 _stbtt__buf_skip($1,$11);
 $12 = HEAP32[$2>>2]|0;
 $13 = (($12) - ($3))|0;
 _stbtt__buf_range($0,$1,$3,$13);
 return;
}
function _stbtt__dict_get($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 _stbtt__buf_seek($1,0);
 $3 = ((($1)) + 4|0);
 $4 = ((($1)) + 8|0);
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = HEAP32[$4>>2]|0;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   label = 9;
   break;
  }
  $8 = (_stbtt__buf_peek8($1)|0);
  $9 = ($8&255)>(27);
  if ($9) {
   while(1) {
    _stbtt__cff_skip_operand($1);
    $10 = (_stbtt__buf_peek8($1)|0);
    $11 = ($10&255)>(27);
    if (!($11)) {
     break;
    }
   }
  }
  $12 = HEAP32[$3>>2]|0;
  $13 = (_stbtt__buf_get8($1)|0);
  $14 = $13&255;
  $15 = ($13<<24>>24)==(12);
  if ($15) {
   $16 = (_stbtt__buf_get8($1)|0);
   $17 = $16&255;
   $18 = $17 | 256;
   $$021 = $18;
  } else {
   $$021 = $14;
  }
  $19 = ($$021|0)==($2|0);
  if ($19) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $20 = (($12) - ($5))|0;
  _stbtt__buf_range($0,$1,$5,$20);
  return;
 }
 else if ((label|0) == 9) {
  _stbtt__buf_range($0,$1,0,0);
  return;
 }
}
function _stbtt__buf_peek8($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($2)|0);
 $8 = HEAP8[$7>>0]|0;
 $$0 = $8;
 return ($$0|0);
}
function _stbtt__cff_skip_operand($0) {
 $0 = $0|0;
 var $$mask = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_stbtt__buf_peek8($0)|0);
 $2 = ($1&255)>(27);
 if (!($2)) {
  ___assert_fail((12745|0),(12115|0),1157,(12754|0));
  // unreachable;
 }
 $3 = ($1<<24>>24)==(30);
 if (!($3)) {
  (_stbtt__cff_int($0)|0);
  return;
 }
 _stbtt__buf_skip($0,1);
 $4 = ((($0)) + 4|0);
 $5 = ((($0)) + 8|0);
 while(1) {
  $6 = HEAP32[$4>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   label = 8;
   break;
  }
  $9 = (_stbtt__buf_get8($0)|0);
  $10 = $9&255;
  $11 = $10 & 15;
  $12 = ($11|0)==(15);
  $$mask = $10 & 240;
  $13 = ($$mask|0)==(240);
  $or$cond = $12 | $13;
  if ($or$cond) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  return;
 }
}
function _stbtt__GetGlyphShapeTT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0348453 = 0, $$0353439 = 0, $$0361449 = 0, $$0363450 = 0, $$0364448 = 0, $$0366447 = 0, $$0372451 = 0, $$0377437 = 0, $$0379436 = 0, $$0381446 = 0, $$0387435 = 0, $$0390434 = 0, $$0393433 = 0, $$0396432 = 0, $$0399431 = 0, $$0401430 = 0, $$0403440 = 0, $$0405443 = 0, $$0407429 = 0, $$0409428 = 0;
 var $$1349 = 0, $$1354 = 0, $$1362 = 0, $$1365 = 0, $$1367445 = 0, $$1378 = 0, $$1380 = 0, $$1382 = 0, $$1388 = 0, $$1391 = 0, $$1394 = 0, $$1397 = 0, $$1400 = 0, $$1402 = 0, $$1404 = 0, $$1406 = 0, $$1408 = 0, $$1410 = 0, $$2368442 = 0, $$2374 = 0;
 var $$2383444 = 0, $$2389 = 0, $$2392 = 0, $$2395 = 0, $$2398 = 0, $$3356 = 0, $$3369438 = 0, $$3384 = 0, $$4 = 0, $$4352 = 0, $$4370 = 0, $$4385441 = 0, $$5371 = 0, $$5386 = 0, $$5452 = 0, $$6 = 0, $$9 = 0, $$sink = 0, $$sroa$0$0 = 0.0, $$sroa$10$0 = 0.0;
 var $$sroa$17$0 = 0.0, $$sroa$24$0 = 0.0, $$sroa$31$0 = 0.0, $$sroa$35$0 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0;
 var $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0;
 var $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0;
 var $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond458 = 0, $exitcond459 = 0, $exitcond460 = 0, $sext = 0, $sext412 = 0, $sqrtf = 0.0, $sqrtf411 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_stbtt__GetGlyfOffset($0,$1)|0);
 HEAP32[$2>>2] = 0;
 $7 = ($6|0)<(0);
 if ($7) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $8 = (($5) + ($6)|0);
 $9 = (_ttSHORT($8)|0);
 $10 = ($9<<16>>16)>(0);
 L4: do {
  if ($10) {
   $11 = $9 << 16 >> 16;
   $12 = ((($8)) + 10|0);
   $13 = $11 << 1;
   $14 = (($12) + ($13)|0);
   $15 = (_ttUSHORT($14)|0);
   $16 = ((($14)) + -2|0);
   $17 = (_ttUSHORT($16)|0);
   $18 = $17&65535;
   $19 = $13 | 1;
   $20 = (($19) + ($18))|0;
   $21 = ($20*14)|0;
   $22 = (_malloc($21)|0);
   $23 = ($22|0)==(0|0);
   if ($23) {
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   $24 = ((($14)) + 2|0);
   $25 = $15&65535;
   $26 = (($24) + ($25)|0);
   $$0361449 = 0;$$0364448 = 0;$$0366447 = 0;$$0381446 = $26;
   while(1) {
    $27 = ($$0364448<<24>>24)==(0);
    if ($27) {
     $28 = ((($$0381446)) + 1|0);
     $29 = HEAP8[$$0381446>>0]|0;
     $30 = $29 & 8;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $$1362 = $29;$$1365 = 0;$$1382 = $28;
     } else {
      $32 = ((($$0381446)) + 2|0);
      $33 = HEAP8[$28>>0]|0;
      $$1362 = $29;$$1365 = $33;$$1382 = $32;
     }
    } else {
     $34 = (($$0364448) + -1)<<24>>24;
     $$1362 = $$0361449;$$1365 = $34;$$1382 = $$0381446;
    }
    $35 = (($$0366447) + ($13))|0;
    $36 = (((($22) + (($35*14)|0)|0)) + 12|0);
    HEAP8[$36>>0] = $$1362;
    $37 = (($$0366447) + 1)|0;
    $exitcond459 = ($$0366447|0)==($18|0);
    if ($exitcond459) {
     $$0405443 = 0;$$1367445 = 0;$$2383444 = $$1382;
     break;
    } else {
     $$0361449 = $$1362;$$0364448 = $$1365;$$0366447 = $37;$$0381446 = $$1382;
    }
   }
   while(1) {
    $38 = (($$1367445) + ($13))|0;
    $39 = (((($22) + (($38*14)|0)|0)) + 12|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = $41 & 2;
    $43 = ($42|0)==(0);
    $44 = $41 & 16;
    $45 = ($44|0)!=(0);
    if ($43) {
     if ($45) {
      $$1406 = $$0405443;$$3384 = $$2383444;
     } else {
      $52 = HEAP8[$$2383444>>0]|0;
      $53 = $52&255;
      $54 = $53 << 8;
      $55 = ((($$2383444)) + 1|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = $56&255;
      $58 = $54 | $57;
      $sext412 = $58 << 16;
      $59 = $sext412 >> 16;
      $60 = (($59) + ($$0405443))|0;
      $61 = ((($$2383444)) + 2|0);
      $$1406 = $60;$$3384 = $61;
     }
    } else {
     $46 = ((($$2383444)) + 1|0);
     $47 = HEAP8[$$2383444>>0]|0;
     $48 = $47&255;
     $49 = (0 - ($48))|0;
     $50 = $45 ? $48 : $49;
     $51 = (($50) + ($$0405443))|0;
     $$1406 = $51;$$3384 = $46;
    }
    $62 = $$1406&65535;
    $63 = (($22) + (($38*14)|0)|0);
    HEAP16[$63>>1] = $62;
    $64 = (($$1367445) + 1)|0;
    $exitcond458 = ($$1367445|0)==($18|0);
    if ($exitcond458) {
     $$0403440 = 0;$$2368442 = 0;$$4385441 = $$3384;
     break;
    } else {
     $$0405443 = $$1406;$$1367445 = $64;$$2383444 = $$3384;
    }
   }
   while(1) {
    $65 = (($$2368442) + ($13))|0;
    $66 = (((($22) + (($65*14)|0)|0)) + 12|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $68 & 4;
    $70 = ($69|0)==(0);
    $71 = $68 & 32;
    $72 = ($71|0)!=(0);
    if ($70) {
     if ($72) {
      $$1404 = $$0403440;$$5386 = $$4385441;
     } else {
      $79 = HEAP8[$$4385441>>0]|0;
      $80 = $79&255;
      $81 = $80 << 8;
      $82 = ((($$4385441)) + 1|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = $83&255;
      $85 = $81 | $84;
      $sext = $85 << 16;
      $86 = $sext >> 16;
      $87 = (($86) + ($$0403440))|0;
      $88 = ((($$4385441)) + 2|0);
      $$1404 = $87;$$5386 = $88;
     }
    } else {
     $73 = ((($$4385441)) + 1|0);
     $74 = HEAP8[$$4385441>>0]|0;
     $75 = $74&255;
     $76 = (0 - ($75))|0;
     $77 = $72 ? $75 : $76;
     $78 = (($77) + ($$0403440))|0;
     $$1404 = $78;$$5386 = $73;
    }
    $89 = $$1404&65535;
    $90 = (((($22) + (($65*14)|0)|0)) + 2|0);
    HEAP16[$90>>1] = $89;
    $91 = (($$2368442) + 1)|0;
    $exitcond = ($$2368442|0)==($18|0);
    if ($exitcond) {
     $$0353439 = 0;$$0377437 = 0;$$0379436 = 0;$$0387435 = 0;$$0390434 = 0;$$0393433 = 0;$$0396432 = 0;$$0399431 = 0;$$0401430 = 0;$$0407429 = 0;$$0409428 = 0;$$3369438 = 0;
     break;
    } else {
     $$0403440 = $$1404;$$2368442 = $91;$$4385441 = $$5386;
    }
   }
   while(1) {
    $92 = (($$3369438) + ($13))|0;
    $93 = (((($22) + (($92*14)|0)|0)) + 12|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = (($22) + (($92*14)|0)|0);
    $96 = HEAP16[$95>>1]|0;
    $97 = $96 << 16 >> 16;
    $98 = (((($22) + (($92*14)|0)|0)) + 2|0);
    $99 = HEAP16[$98>>1]|0;
    $100 = $99 << 16 >> 16;
    $101 = ($$0379436|0)==($$3369438|0);
    $102 = $94 & 1;
    $103 = ($102<<24>>24)!=(0);
    do {
     if ($101) {
      $104 = ($$3369438|0)==(0);
      if ($104) {
       $$1354 = $$0353439;
      } else {
       $105 = (_stbtt__close_shape($22,$$0353439,$$0409428,$$0407429,$$0396432,$$0393433,$$0390434,$$0387435,$$0401430,$$0399431)|0);
       $$1354 = $105;
      }
      $106 = $103 ^ 1;
      $107 = $106&1;
      do {
       if ($103) {
        $$1388 = $$0387435;$$1391 = $$0390434;$$1394 = $100;$$1397 = $97;$$4370 = $$3369438;
       } else {
        $108 = (($92) + 1)|0;
        $109 = (((($22) + (($108*14)|0)|0)) + 12|0);
        $110 = HEAP8[$109>>0]|0;
        $111 = $110 & 1;
        $112 = ($111<<24>>24)==(0);
        $113 = (((($22) + (($108*14)|0)|0)) + 2|0);
        $114 = HEAP16[$113>>1]|0;
        $115 = (($22) + (($108*14)|0)|0);
        $116 = HEAP16[$115>>1]|0;
        $117 = $114 << 16 >> 16;
        $118 = $116 << 16 >> 16;
        if ($112) {
         $119 = (($118) + ($97))|0;
         $120 = $119 >> 1;
         $121 = (($117) + ($100))|0;
         $122 = $121 >> 1;
         $$1388 = $100;$$1391 = $97;$$1394 = $122;$$1397 = $120;$$4370 = $$3369438;
         break;
        } else {
         $123 = (($$3369438) + 1)|0;
         $$1388 = $100;$$1391 = $97;$$1394 = $117;$$1397 = $118;$$4370 = $123;
         break;
        }
       }
      } while(0);
      $124 = (($$1354) + 1)|0;
      $125 = (($22) + (($$1354*14)|0)|0);
      _stbtt_setvertex($125,1,$$1397,$$1394,0,0);
      $126 = $$0377437 << 1;
      $127 = (($12) + ($126)|0);
      $128 = (_ttUSHORT($127)|0);
      $129 = $128&65535;
      $130 = (($129) + 1)|0;
      $131 = (($$0377437) + 1)|0;
      $$1378 = $131;$$1380 = $130;$$1400 = $$0399431;$$1402 = $$0401430;$$1408 = $107;$$1410 = 0;$$2389 = $$1388;$$2392 = $$1391;$$2395 = $$1394;$$2398 = $$1397;$$3356 = $124;$$5371 = $$4370;
     } else {
      $132 = ($$0409428|0)!=(0);
      $133 = (($$0353439) + 1)|0;
      $134 = (($22) + (($$0353439*14)|0)|0);
      if (!($103)) {
       if (!($132)) {
        $$1378 = $$0377437;$$1380 = $$0379436;$$1400 = $100;$$1402 = $97;$$1408 = $$0407429;$$1410 = 1;$$2389 = $$0387435;$$2392 = $$0390434;$$2395 = $$0393433;$$2398 = $$0396432;$$3356 = $$0353439;$$5371 = $$3369438;
        break;
       }
       $135 = (($100) + ($$0399431))|0;
       $136 = $135 >> 1;
       $137 = (($97) + ($$0401430))|0;
       $138 = $137 >> 1;
       _stbtt_setvertex($134,3,$138,$136,$$0401430,$$0399431);
       $$1378 = $$0377437;$$1380 = $$0379436;$$1400 = $100;$$1402 = $97;$$1408 = $$0407429;$$1410 = 1;$$2389 = $$0387435;$$2392 = $$0390434;$$2395 = $$0393433;$$2398 = $$0396432;$$3356 = $133;$$5371 = $$3369438;
       break;
      }
      if ($132) {
       _stbtt_setvertex($134,3,$97,$100,$$0401430,$$0399431);
       $$1378 = $$0377437;$$1380 = $$0379436;$$1400 = $$0399431;$$1402 = $$0401430;$$1408 = $$0407429;$$1410 = 0;$$2389 = $$0387435;$$2392 = $$0390434;$$2395 = $$0393433;$$2398 = $$0396432;$$3356 = $133;$$5371 = $$3369438;
       break;
      } else {
       _stbtt_setvertex($134,2,$97,$100,0,0);
       $$1378 = $$0377437;$$1380 = $$0379436;$$1400 = $$0399431;$$1402 = $$0401430;$$1408 = $$0407429;$$1410 = 0;$$2389 = $$0387435;$$2392 = $$0390434;$$2395 = $$0393433;$$2398 = $$0396432;$$3356 = $133;$$5371 = $$3369438;
       break;
      }
     }
    } while(0);
    $139 = (($$5371) + 1)|0;
    $140 = ($$5371|0)<($18|0);
    if ($140) {
     $$0353439 = $$3356;$$0377437 = $$1378;$$0379436 = $$1380;$$0387435 = $$2389;$$0390434 = $$2392;$$0393433 = $$2395;$$0396432 = $$2398;$$0399431 = $$1400;$$0401430 = $$1402;$$0407429 = $$1408;$$0409428 = $$1410;$$3369438 = $139;
    } else {
     break;
    }
   }
   $141 = (_stbtt__close_shape($22,$$3356,$$1410,$$1408,$$2398,$$2395,$$2392,$$2389,$$1402,$$1400)|0);
   $$4352 = $22;$$9 = $141;
  } else {
   $142 = ($9<<16>>16)==(-1);
   if (!($142)) {
    $264 = ($9<<16>>16)<(0);
    if (!($264)) {
     $$4352 = 0;$$9 = 0;
     break;
    }
    ___assert_fail((13995|0),(12115|0),1811,(12892|0));
    // unreachable;
   }
   $143 = ((($8)) + 10|0);
   $$0348453 = 0;$$0372451 = $143;$$5452 = 0;$250 = 0;$255 = 0;$260 = 0;
   while(1) {
    HEAP32[$3>>2] = 0;
    $144 = (_ttSHORT($$0372451)|0);
    $145 = ((($$0372451)) + 2|0);
    $146 = (_ttSHORT($145)|0);
    $147 = ((($$0372451)) + 4|0);
    $148 = $144&65535;
    $149 = $148 & 2;
    $150 = ($149|0)==(0);
    if ($150) {
     label = 42;
     break;
    }
    $151 = $148 & 1;
    $152 = ($151|0)==(0);
    if ($152) {
     $158 = HEAP8[$147>>0]|0;
     $159 = (+($158<<24>>24));
     $160 = ((($$0372451)) + 5|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = (+($161<<24>>24));
     $$sink = 6;$$sroa$31$0 = $159;$$sroa$35$0 = $162;
    } else {
     $153 = (_ttSHORT($147)|0);
     $154 = (+($153<<16>>16));
     $155 = ((($$0372451)) + 6|0);
     $156 = (_ttSHORT($155)|0);
     $157 = (+($156<<16>>16));
     $$sink = 8;$$sroa$31$0 = $154;$$sroa$35$0 = $157;
    }
    $163 = (($$0372451) + ($$sink)|0);
    $164 = $148 & 8;
    $165 = ($164|0)==(0);
    do {
     if ($165) {
      $170 = $148 & 64;
      $171 = ($170|0)==(0);
      if (!($171)) {
       $172 = (_ttSHORT($163)|0);
       $173 = (+($172<<16>>16));
       $174 = $173 * 6.103515625E-5;
       $175 = ((($163)) + 2|0);
       $176 = (_ttSHORT($175)|0);
       $177 = (+($176<<16>>16));
       $178 = $177 * 6.103515625E-5;
       $179 = ((($163)) + 4|0);
       $$2374 = $179;$$sroa$0$0 = $174;$$sroa$10$0 = 0.0;$$sroa$17$0 = 0.0;$$sroa$24$0 = $178;
       break;
      }
      $180 = $148 & 128;
      $181 = ($180|0)==(0);
      if ($181) {
       $$2374 = $163;$$sroa$0$0 = 1.0;$$sroa$10$0 = 0.0;$$sroa$17$0 = 0.0;$$sroa$24$0 = 1.0;
      } else {
       $182 = (_ttSHORT($163)|0);
       $183 = (+($182<<16>>16));
       $184 = $183 * 6.103515625E-5;
       $185 = ((($163)) + 2|0);
       $186 = (_ttSHORT($185)|0);
       $187 = (+($186<<16>>16));
       $188 = $187 * 6.103515625E-5;
       $189 = ((($163)) + 4|0);
       $190 = (_ttSHORT($189)|0);
       $191 = (+($190<<16>>16));
       $192 = $191 * 6.103515625E-5;
       $193 = ((($163)) + 6|0);
       $194 = (_ttSHORT($193)|0);
       $195 = (+($194<<16>>16));
       $196 = $195 * 6.103515625E-5;
       $197 = ((($163)) + 8|0);
       $$2374 = $197;$$sroa$0$0 = $184;$$sroa$10$0 = $188;$$sroa$17$0 = $192;$$sroa$24$0 = $196;
      }
     } else {
      $166 = (_ttSHORT($163)|0);
      $167 = (+($166<<16>>16));
      $168 = $167 * 6.103515625E-5;
      $169 = ((($163)) + 2|0);
      $$2374 = $169;$$sroa$0$0 = $168;$$sroa$10$0 = 0.0;$$sroa$17$0 = 0.0;$$sroa$24$0 = $168;
     }
    } while(0);
    $198 = $$sroa$0$0 * $$sroa$0$0;
    $199 = $$sroa$10$0 * $$sroa$10$0;
    $200 = $199 + $198;
    $sqrtf = (+Math_sqrt((+$200)));
    $201 = $$sroa$17$0 * $$sroa$17$0;
    $202 = $$sroa$24$0 * $$sroa$24$0;
    $203 = $202 + $201;
    $sqrtf411 = (+Math_sqrt((+$203)));
    $204 = $146&65535;
    $205 = (_stbtt_GetGlyphShape($0,$204,$3)|0);
    $206 = ($205|0)>(0);
    if ($206) {
     $207 = HEAP32[$3>>2]|0;
     $$0363450 = 0;
     while(1) {
      $208 = (($207) + (($$0363450*14)|0)|0);
      $209 = HEAP16[$208>>1]|0;
      $210 = (((($207) + (($$0363450*14)|0)|0)) + 2|0);
      $211 = HEAP16[$210>>1]|0;
      $212 = (+($209<<16>>16));
      $213 = $$sroa$0$0 * $212;
      $214 = (+($211<<16>>16));
      $215 = $$sroa$17$0 * $214;
      $216 = $213 + $215;
      $217 = $$sroa$31$0 + $216;
      $218 = $sqrtf * $217;
      $219 = (~~(($218)));
      HEAP16[$208>>1] = $219;
      $220 = $$sroa$10$0 * $212;
      $221 = $$sroa$24$0 * $214;
      $222 = $220 + $221;
      $223 = $$sroa$35$0 + $222;
      $224 = $sqrtf411 * $223;
      $225 = (~~(($224)));
      HEAP16[$210>>1] = $225;
      $226 = (((($207) + (($$0363450*14)|0)|0)) + 4|0);
      $227 = HEAP16[$226>>1]|0;
      $228 = (((($207) + (($$0363450*14)|0)|0)) + 6|0);
      $229 = HEAP16[$228>>1]|0;
      $230 = (+($227<<16>>16));
      $231 = $$sroa$0$0 * $230;
      $232 = (+($229<<16>>16));
      $233 = $$sroa$17$0 * $232;
      $234 = $231 + $233;
      $235 = $$sroa$31$0 + $234;
      $236 = $sqrtf * $235;
      $237 = (~~(($236)));
      HEAP16[$226>>1] = $237;
      $238 = $$sroa$10$0 * $230;
      $239 = $$sroa$24$0 * $232;
      $240 = $238 + $239;
      $241 = $$sroa$35$0 + $240;
      $242 = $sqrtf411 * $241;
      $243 = (~~(($242)));
      HEAP16[$228>>1] = $243;
      $244 = (($$0363450) + 1)|0;
      $exitcond460 = ($244|0)==($205|0);
      if ($exitcond460) {
       break;
      } else {
       $$0363450 = $244;
      }
     }
     $245 = (($205) + ($$5452))|0;
     $246 = ($245*14)|0;
     $247 = (_malloc($246)|0);
     $248 = ($247|0)==(0|0);
     if ($248) {
      break;
     }
     $253 = ($$5452|0)>(0);
     if ($253) {
      $254 = ($$5452*14)|0;
      _memcpy(($247|0),($255|0),($254|0))|0;
     }
     $256 = (($247) + (($$5452*14)|0)|0);
     $257 = HEAP32[$3>>2]|0;
     $258 = ($205*14)|0;
     _memcpy(($256|0),($257|0),($258|0))|0;
     $259 = ($$0348453|0)==(0|0);
     if (!($259)) {
      _free($260);
     }
     $261 = HEAP32[$3>>2]|0;
     _free($261);
     $$1349 = $247;$$6 = $245;$265 = $247;$266 = $247;$267 = $247;
    } else {
     $$1349 = $$0348453;$$6 = $$5452;$265 = $250;$266 = $260;$267 = $255;
    }
    $262 = $148 & 32;
    $263 = ($262|0)==(0);
    if ($263) {
     $$4352 = $$1349;$$9 = $$6;
     break L4;
    } else {
     $$0348453 = $$1349;$$0372451 = $$2374;$$5452 = $$6;$250 = $265;$255 = $267;$260 = $266;
    }
   }
   if ((label|0) == 42) {
    ___assert_fail((13995|0),(12115|0),1758,(12892|0));
    // unreachable;
   }
   $249 = ($$0348453|0)==(0|0);
   if (!($249)) {
    _free($250);
   }
   $251 = HEAP32[$3>>2]|0;
   $252 = ($251|0)==(0|0);
   if (!($252)) {
    _free($251);
   }
   $$4 = 0;
   STACKTOP = sp;return ($$4|0);
  }
 } while(0);
 HEAP32[$2>>2] = $$4352;
 $$4 = $$9;
 STACKTOP = sp;return ($$4|0);
}
function _stbtt__GetGlyphShapeT2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp + 48|0;
 $4 = sp;
 $5 = ((($3)) + 4|0);
 dest=$5; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$3>>2] = 1;
 dest=$4; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $6 = (_stbtt__run_charstring($0,$1,$3)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($3)) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9*14)|0;
  $11 = (_malloc($10)|0);
  HEAP32[$2>>2] = $11;
  $12 = ((($4)) + 40|0);
  HEAP32[$12>>2] = $11;
  $13 = (_stbtt__run_charstring($0,$1,$4)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   $15 = ((($4)) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$8>>2]|0;
   $18 = ($16|0)==($17|0);
   if ($18) {
    $$0 = $16;
    STACKTOP = sp;return ($$0|0);
   } else {
    ___assert_fail((12819|0),(12115|0),2201,(12869|0));
    // unreachable;
   }
  }
 }
 HEAP32[$2>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stbtt__close_shape($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = ($3|0)==(0);
 $11 = ($2|0)!=(0);
 $12 = (($1) + 1)|0;
 $13 = (($0) + (($1*14)|0)|0);
 if (!($10)) {
  if ($11) {
   $14 = (($9) + ($7))|0;
   $15 = $14 >> 1;
   $16 = (($8) + ($6))|0;
   $17 = $16 >> 1;
   _stbtt_setvertex($13,3,$17,$15,$8,$9);
   $$0 = $12;
  } else {
   $$0 = $1;
  }
  $18 = (($$0) + 1)|0;
  $19 = (($0) + (($$0*14)|0)|0);
  _stbtt_setvertex($19,3,$4,$5,$6,$7);
  $$1 = $18;
  return ($$1|0);
 }
 if ($11) {
  _stbtt_setvertex($13,3,$4,$5,$8,$9);
  $$1 = $12;
  return ($$1|0);
 } else {
  _stbtt_setvertex($13,2,$4,$5,0,0);
  $$1 = $12;
  return ($$1|0);
 }
 return (0)|0;
}
function _stbtt_InitFont_internal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0902 = 0, $$1 = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$pr = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $$byval_copy2 = sp + 172|0;
 $$byval_copy1 = sp + 160|0;
 $2 = sp + 148|0;
 $3 = sp + 136|0;
 $4 = sp + 124|0;
 $5 = sp + 112|0;
 $6 = sp + 108|0;
 $7 = sp + 104|0;
 $8 = sp + 100|0;
 $9 = sp + 96|0;
 $10 = sp + 84|0;
 $11 = sp + 72|0;
 $12 = sp + 60|0;
 $13 = sp + 48|0;
 $14 = sp + 36|0;
 $15 = sp + 24|0;
 $16 = sp + 12|0;
 $17 = sp;
 $18 = ((($0)) + 4|0);
 HEAP32[$18>>2] = $1;
 $19 = ((($0)) + 8|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($0)) + 48|0);
 _stbtt__new_buf($2,0,0);
 ;HEAP32[$20>>2]=HEAP32[$2>>2]|0;HEAP32[$20+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$2+8>>2]|0;
 $21 = (_stbtt__find_table($1,12992)|0);
 $22 = (_stbtt__find_table($1,12997)|0);
 $23 = ((($0)) + 16|0);
 HEAP32[$23>>2] = $22;
 $24 = (_stbtt__find_table($1,13002)|0);
 $25 = ((($0)) + 20|0);
 HEAP32[$25>>2] = $24;
 $26 = (_stbtt__find_table($1,13007)|0);
 $27 = ((($0)) + 24|0);
 HEAP32[$27>>2] = $26;
 $28 = (_stbtt__find_table($1,13012)|0);
 $29 = ((($0)) + 28|0);
 HEAP32[$29>>2] = $28;
 $30 = (_stbtt__find_table($1,13017)|0);
 $31 = ((($0)) + 32|0);
 HEAP32[$31>>2] = $30;
 $32 = (_stbtt__find_table($1,13022)|0);
 $33 = ((($0)) + 36|0);
 HEAP32[$33>>2] = $32;
 $34 = ($21|0)==(0);
 if ($34) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $35 = HEAP32[$25>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $37 = HEAP32[$29>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $39 = HEAP32[$31>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $41 = HEAP32[$27>>2]|0;
 $42 = ($41|0)==(0);
 L13: do {
  if ($42) {
   HEAP32[$6>>2] = 2;
   HEAP32[$7>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $45 = (_stbtt__find_table($1,13027)|0);
   $46 = ($45|0)==(0);
   do {
    if (!($46)) {
     $47 = ((($0)) + 96|0);
     _stbtt__new_buf($10,0,0);
     ;HEAP32[$47>>2]=HEAP32[$10>>2]|0;HEAP32[$47+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$10+8>>2]|0;
     $48 = ((($0)) + 108|0);
     _stbtt__new_buf($11,0,0);
     ;HEAP32[$48>>2]=HEAP32[$11>>2]|0;HEAP32[$48+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$11+8>>2]|0;
     $49 = (($1) + ($45)|0);
     _stbtt__new_buf($12,$49,536870912);
     ;HEAP32[$20>>2]=HEAP32[$12>>2]|0;HEAP32[$20+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$12+8>>2]|0;
     ;HEAP32[$3>>2]=HEAP32[$12>>2]|0;HEAP32[$3+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$12+8>>2]|0;
     _stbtt__buf_skip($3,2);
     $50 = (_stbtt__buf_get8($3)|0);
     $51 = $50&255;
     _stbtt__buf_seek($3,$51);
     _stbtt__cff_get_index($$byval_copy2,$3);
     _stbtt__cff_get_index($5,$3);
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$5+8>>2]|0;
     _stbtt__cff_index_get($4,$$byval_copy2,0);
     _stbtt__cff_get_index($$byval_copy2,$3);
     $52 = ((($0)) + 72|0);
     _stbtt__cff_get_index($13,$3);
     ;HEAP32[$52>>2]=HEAP32[$13>>2]|0;HEAP32[$52+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$52+8>>2]=HEAP32[$13+8>>2]|0;
     _stbtt__dict_get_ints($4,17,1,$7);
     _stbtt__dict_get_ints($4,262,1,$6);
     _stbtt__dict_get_ints($4,292,1,$8);
     _stbtt__dict_get_ints($4,293,1,$9);
     $53 = ((($0)) + 84|0);
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$4+8>>2]|0;
     _stbtt__get_subrs($14,$$byval_copy1,$$byval_copy2);
     ;HEAP32[$53>>2]=HEAP32[$14>>2]|0;HEAP32[$53+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$53+8>>2]=HEAP32[$14+8>>2]|0;
     $54 = HEAP32[$6>>2]|0;
     $55 = ($54|0)!=(2);
     $56 = HEAP32[$7>>2]|0;
     $57 = ($56|0)==(0);
     $or$cond = $55 | $57;
     if (!($or$cond)) {
      $58 = HEAP32[$8>>2]|0;
      $59 = ($58|0)==(0);
      if (!($59)) {
       $60 = HEAP32[$9>>2]|0;
       $61 = ($60|0)==(0);
       if ($61) {
        break;
       }
       _stbtt__buf_seek($3,$58);
       _stbtt__cff_get_index($15,$3);
       ;HEAP32[$47>>2]=HEAP32[$15>>2]|0;HEAP32[$47+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$15+8>>2]|0;
       $62 = HEAP32[$9>>2]|0;
       $63 = ((($3)) + 8|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = (($64) - ($62))|0;
       _stbtt__buf_range($16,$3,$62,$65);
       ;HEAP32[$48>>2]=HEAP32[$16>>2]|0;HEAP32[$48+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$16+8>>2]|0;
      }
      $66 = HEAP32[$7>>2]|0;
      _stbtt__buf_seek($3,$66);
      $67 = ((($0)) + 60|0);
      _stbtt__cff_get_index($17,$3);
      ;HEAP32[$67>>2]=HEAP32[$17>>2]|0;HEAP32[$67+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$67+8>>2]=HEAP32[$17+8>>2]|0;
      break L13;
     }
    }
   } while(0);
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  } else {
   $43 = HEAP32[$23>>2]|0;
   $44 = ($43|0)==(0);
   if ($44) {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 $68 = (_stbtt__find_table($1,13032)|0);
 $69 = ($68|0)==(0);
 if ($69) {
  $$sink = 65535;
 } else {
  $70 = (($1) + ($68)|0);
  $71 = ((($70)) + 4|0);
  $72 = (_ttUSHORT($71)|0);
  $73 = $72&65535;
  $$sink = $73;
 }
 $74 = ((($0)) + 12|0);
 HEAP32[$74>>2] = $$sink;
 $75 = (($1) + ($21)|0);
 $76 = ((($75)) + 2|0);
 $77 = (_ttUSHORT($76)|0);
 $78 = $77&65535;
 $79 = ((($0)) + 40|0);
 HEAP32[$79>>2] = 0;
 $80 = ($77<<16>>16)==(0);
 if ($80) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $81 = (($21) + 4)|0;
 $$0902 = 0;
 while(1) {
  $82 = $$0902 << 3;
  $83 = (($81) + ($82))|0;
  $84 = (($1) + ($83)|0);
  $85 = (_ttUSHORT($84)|0);
  L35: do {
   switch ($85<<16>>16) {
   case 3:  {
    $86 = ((($84)) + 2|0);
    $87 = (_ttUSHORT($86)|0);
    switch ($87<<16>>16) {
    case 10: case 1:  {
     break;
    }
    default: {
     break L35;
    }
    }
    $88 = ((($84)) + 4|0);
    $89 = (_ttULONG($88)|0);
    $90 = (($89) + ($21))|0;
    HEAP32[$79>>2] = $90;
    break;
   }
   case 0:  {
    $91 = ((($84)) + 4|0);
    $92 = (_ttULONG($91)|0);
    $93 = (($92) + ($21))|0;
    HEAP32[$79>>2] = $93;
    break;
   }
   default: {
   }
   }
  } while(0);
  $94 = (($$0902) + 1)|0;
  $exitcond = ($94|0)==($78|0);
  if ($exitcond) {
   break;
  } else {
   $$0902 = $94;
  }
 }
 $$pr = HEAP32[$79>>2]|0;
 $95 = ($$pr|0)==(0);
 if ($95) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $96 = HEAP32[$25>>2]|0;
 $97 = (($1) + ($96)|0);
 $98 = ((($97)) + 50|0);
 $99 = (_ttUSHORT($98)|0);
 $100 = $99&65535;
 $101 = ((($0)) + 44|0);
 HEAP32[$101>>2] = $100;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function _stbtt__find_table($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0312 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = (_ttUSHORT($2)|0);
 $4 = $3&65535;
 $5 = ($3<<16>>16)==(0);
 if ($5) {
  $$2 = 0;
  return ($$2|0);
 }
 $6 = HEAP8[$1>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = ((($1)) + 1|0);
 $9 = ((($1)) + 2|0);
 $10 = ((($1)) + 3|0);
 $$0312 = 0;
 while(1) {
  $11 = $$0312 << 4;
  $12 = $11 | 12;
  $13 = (($0) + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==($7|0);
  if ($16) {
   $17 = ((($13)) + 1|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = HEAP8[$8>>0]|0;
   $21 = $20 << 24 >> 24;
   $22 = ($19|0)==($21|0);
   if ($22) {
    $23 = ((($13)) + 2|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = HEAP8[$9>>0]|0;
    $27 = $26 << 24 >> 24;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = ((($13)) + 3|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $32 = HEAP8[$10>>0]|0;
     $33 = $32 << 24 >> 24;
     $34 = ($31|0)==($33|0);
     if ($34) {
      break;
     }
    }
   }
  }
  $37 = (($$0312) + 1)|0;
  $38 = ($37|0)<($4|0);
  if ($38) {
   $$0312 = $37;
  } else {
   $$2 = 0;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($$2|0);
 }
 $35 = ((($13)) + 8|0);
 $36 = (_ttULONG($35)|0);
 $$2 = $36;
 return ($$2|0);
}
function _DrawText($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy2 = sp + 112|0;
 $$byval_copy1 = sp + 104|0;
 $$byval_copy = sp + 72|0;
 $5 = sp + 32|0;
 $6 = sp + 64|0;
 $7 = sp;
 _GetDefaultFont($5);
 $8 = HEAP32[$5>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = (+($1|0));
 HEAPF32[$6>>2] = $10;
 $11 = ((($6)) + 4|0);
 $12 = (+($2|0));
 HEAPF32[$11>>2] = $12;
 $13 = ($3|0)>(10);
 $$ = $13 ? $3 : 10;
 $14 = (($$>>>0) / 10)&-1;
 _GetDefaultFont($7);
 $15 = (+($$|0));
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$7+20>>2]|0;HEAP32[$$byval_copy+24>>2]=HEAP32[$7+24>>2]|0;HEAP32[$$byval_copy+28>>2]=HEAP32[$7+28>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$6+4>>2]|0;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$4+3>>0]|0;
 _DrawTextEx($$byval_copy,$0,$$byval_copy1,$15,$14,$$byval_copy2);
 STACKTOP = sp;return;
}
function _DrawTextEx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 var $$04954 = 0, $$05153 = 0, $$055 = 0, $$1 = 0, $$150 = 0, $$152 = 0, $$2 = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$sink = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy5 = sp + 88|0;
 $$byval_copy4 = sp + 80|0;
 $$byval_copy3 = sp + 64|0;
 $$byval_copy2 = sp + 48|0;
 $$byval_copy1 = sp + 24|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = (_strlen($1)|0);
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (+($10|0));
 $12 = $3 / $11;
 $13 = ($8|0)>(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = ((($0)) + 28|0);
 $15 = +HEAPF32[$2>>2];
 $16 = ((($6)) + 4|0);
 $17 = ((($2)) + 4|0);
 $18 = ((($6)) + 8|0);
 $19 = ((($6)) + 12|0);
 $20 = ((($7)) + 4|0);
 $21 = (+($4|0));
 $$04954 = 0;$$05153 = 0;$$055 = 0;
 while(1) {
  $22 = (($1) + ($$055)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  switch ($23<<24>>24) {
  case 10:  {
   $25 = HEAP32[$9>>2]|0;
   $26 = (($25|0) / 2)&-1;
   $27 = (($26) + ($25))|0;
   $28 = (+($27|0));
   $29 = $12 * $28;
   $30 = (~~(($29)));
   $31 = (($30) + ($$05153))|0;
   $$150 = 0;$$152 = $31;$$2 = $$055;
   break;
  }
  case -62:  {
   $32 = (($$055) + 1)|0;
   $33 = (($1) + ($32)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $$1 = $32;$$sink = $35;
   label = 8;
   break;
  }
  case -61:  {
   $36 = (($$055) + 1)|0;
   $37 = (($1) + ($36)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = (($39) + 64)|0;
   $$1 = $36;$$sink = $40;
   label = 8;
   break;
  }
  default: {
   $$1 = $$055;$$sink = $24;
   label = 8;
  }
  }
  do {
   if ((label|0) == 8) {
    label = 0;
    ;HEAP32[$$byval_copy5>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy5+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy5+20>>2]=HEAP32[$0+20>>2]|0;HEAP32[$$byval_copy5+24>>2]=HEAP32[$0+24>>2]|0;HEAP32[$$byval_copy5+28>>2]=HEAP32[$0+28>>2]|0;
    $41 = (_GetCharIndex($$byval_copy5,$$sink)|0);
    $42 = HEAP32[$14>>2]|0;
    $43 = (((($42) + ($41<<5)|0)) + 4|0);
    $44 = (+($$04954|0));
    $45 = $44 + $15;
    $46 = (((($42) + ($41<<5)|0)) + 20|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (+($47|0));
    $49 = $12 * $48;
    $50 = $45 + $49;
    $51 = (~~(($50)));
    HEAP32[$6>>2] = $51;
    $52 = +HEAPF32[$17>>2];
    $53 = (+($$05153|0));
    $54 = $53 + $52;
    $55 = (((($42) + ($41<<5)|0)) + 24|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (+($56|0));
    $58 = $12 * $57;
    $59 = $54 + $58;
    $60 = (~~(($59)));
    HEAP32[$16>>2] = $60;
    $61 = (((($42) + ($41<<5)|0)) + 12|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (+($62|0));
    $64 = $12 * $63;
    $65 = (~~(($64)));
    HEAP32[$18>>2] = $65;
    $66 = (((($42) + ($41<<5)|0)) + 16|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (+($67|0));
    $69 = $12 * $68;
    $70 = (~~(($69)));
    HEAP32[$19>>2] = $70;
    HEAPF32[$7>>2] = 0.0;
    HEAPF32[$20>>2] = 0.0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$0+16>>2]|0;
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$43>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$43+12>>2]|0;
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$6+12>>2]|0;
    ;HEAP32[$$byval_copy4>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$7+4>>2]|0;
    ;HEAP8[$$byval_copy5>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy5+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy5+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy5+3>>0]=HEAP8[$5+3>>0]|0;
    _DrawTexturePro($$byval_copy1,$$byval_copy2,$$byval_copy3,$$byval_copy4,0.0,$$byval_copy5);
    $71 = HEAP32[$14>>2]|0;
    $72 = (((($71) + ($41<<5)|0)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(0);
    if ($74) {
     $75 = (((($71) + ($41<<5)|0)) + 12|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (+($76|0));
     $78 = $12 * $77;
     $79 = $21 + $78;
     $80 = (~~(($79)));
     $81 = (($80) + ($$04954))|0;
     $$150 = $81;$$152 = $$05153;$$2 = $$1;
     break;
    } else {
     $82 = (+($73|0));
     $83 = $12 * $82;
     $84 = $21 + $83;
     $85 = (~~(($84)));
     $86 = (($85) + ($$04954))|0;
     $$150 = $86;$$152 = $$05153;$$2 = $$1;
     break;
    }
   }
  } while(0);
  $87 = (($$2) + 1)|0;
  $88 = ($87|0)<($8|0);
  if ($88) {
   $$04954 = $$150;$$05153 = $$152;$$055 = $87;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _GetCharIndex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$08 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  $$08 = 0;
  return ($$08|0);
 }
 $5 = ((($0)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $$09 = 0;
 while(1) {
  $7 = (($6) + ($$09<<5)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==($1|0);
  if ($9) {
   $$08 = $$09;
   label = 5;
   break;
  }
  $10 = (($$09) + 1)|0;
  $11 = HEAP32[$2>>2]|0;
  $12 = ($10|0)<($11|0);
  if ($12) {
   $$09 = $10;
  } else {
   $$08 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$08|0);
 }
 return (0)|0;
}
function _DrawTexturePro($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  return;
 }
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<(0);
 if ($10) {
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) - ($9))|0;
  HEAP32[$1>>2] = $12;
 }
 $13 = ((($1)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)<(0);
 if ($15) {
  $16 = ((($1)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) - ($14))|0;
  HEAP32[$16>>2] = $18;
 }
 $19 = HEAP32[$0>>2]|0;
 _rlEnableTexture($19);
 _rlPushMatrix();
 $20 = HEAP32[$2>>2]|0;
 $21 = (+($20|0));
 $22 = ((($2)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (+($23|0));
 _rlTranslatef($21,$24,0.0);
 _rlRotatef($4,0.0,0.0,1.0);
 $25 = +HEAPF32[$3>>2];
 $26 = -$25;
 $27 = ((($3)) + 4|0);
 $28 = +HEAPF32[$27>>2];
 $29 = -$28;
 _rlTranslatef($26,$29,0.0);
 _rlBegin(7);
 $30 = HEAP8[$5>>0]|0;
 $31 = ((($5)) + 1|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ((($5)) + 2|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ((($5)) + 3|0);
 $36 = HEAP8[$35>>0]|0;
 _rlColor4ub($30,$32,$34,$36);
 $37 = HEAP32[$1>>2]|0;
 $38 = (+($37|0));
 $39 = ((($0)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (+($40|0));
 $42 = $38 / $41;
 $43 = ((($1)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (+($44|0));
 $46 = ((($0)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (+($47|0));
 $49 = $45 / $48;
 _rlTexCoord2f($42,$49);
 _rlVertex2f(0.0,0.0);
 $50 = HEAP32[$1>>2]|0;
 $51 = (+($50|0));
 $52 = HEAP32[$39>>2]|0;
 $53 = (+($52|0));
 $54 = $51 / $53;
 $55 = HEAP32[$43>>2]|0;
 $56 = HEAP32[$13>>2]|0;
 $57 = (($56) + ($55))|0;
 $58 = (+($57|0));
 $59 = HEAP32[$46>>2]|0;
 $60 = (+($59|0));
 $61 = $58 / $60;
 _rlTexCoord2f($54,$61);
 $62 = ((($2)) + 12|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (+($63|0));
 _rlVertex2f(0.0,$64);
 $65 = HEAP32[$1>>2]|0;
 $66 = HEAP32[$8>>2]|0;
 $67 = (($66) + ($65))|0;
 $68 = (+($67|0));
 $69 = HEAP32[$39>>2]|0;
 $70 = (+($69|0));
 $71 = $68 / $70;
 $72 = HEAP32[$43>>2]|0;
 $73 = HEAP32[$13>>2]|0;
 $74 = (($73) + ($72))|0;
 $75 = (+($74|0));
 $76 = HEAP32[$46>>2]|0;
 $77 = (+($76|0));
 $78 = $75 / $77;
 _rlTexCoord2f($71,$78);
 $79 = ((($2)) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (+($80|0));
 $82 = HEAP32[$62>>2]|0;
 $83 = (+($82|0));
 _rlVertex2f($81,$83);
 $84 = HEAP32[$1>>2]|0;
 $85 = HEAP32[$8>>2]|0;
 $86 = (($85) + ($84))|0;
 $87 = (+($86|0));
 $88 = HEAP32[$39>>2]|0;
 $89 = (+($88|0));
 $90 = $87 / $89;
 $91 = HEAP32[$43>>2]|0;
 $92 = (+($91|0));
 $93 = HEAP32[$46>>2]|0;
 $94 = (+($93|0));
 $95 = $92 / $94;
 _rlTexCoord2f($90,$95);
 $96 = HEAP32[$79>>2]|0;
 $97 = (+($96|0));
 _rlVertex2f($97,0.0);
 _rlEnd();
 _rlPopMatrix();
 _rlDisableTexture();
 return;
}
function _rlEnableTexture($0) {
 $0 = $0|0;
 var $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[84107]|0;
 $2 = HEAP32[84105]|0;
 $3 = (($2) + -1)|0;
 $4 = (((($1) + (($3*144)|0)|0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($0|0);
 if ($6) {
  return;
 }
 $7 = (($1) + (($3*144)|0)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = (($2) + 1)|0;
 if ($9) {
  HEAP32[84105] = $10;
  $12 = $10;
 } else {
  $$pr = HEAP32[84105]|0;
  $12 = $$pr;
 }
 $11 = ($12|0)>(255);
 if ($11) {
  _rlglDraw();
  HEAP32[84105] = 1;
 }
 $13 = HEAP32[84107]|0;
 $14 = HEAP32[84105]|0;
 $15 = (($14) + -1)|0;
 $16 = (((($13) + (($15*144)|0)|0)) + 8|0);
 HEAP32[$16>>2] = $0;
 $17 = (($13) + (($15*144)|0)|0);
 HEAP32[$17>>2] = 0;
 return;
}
function _rlPushMatrix() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[84293]|0;
 $1 = ($0|0)==(15);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = 16;
  _TraceLog(2,13116,$vararg_buffer);
 }
 $2 = HEAP32[84293]|0;
 $3 = (337176 + ($2<<6)|0);
 $4 = HEAP32[84550]|0;
 dest=$3; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _rlLoadIdentity();
 $5 = HEAP32[84293]|0;
 $6 = (($5) + 1)|0;
 HEAP32[84293] = $6;
 $7 = HEAP32[84555]|0;
 $8 = ($7|0)==(5888);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[84551] = 1;
 STACKTOP = sp;return;
}
function _rlTranslatef($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $$byval_copy = 0, $$byval_copy1 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy1 = sp + 192|0;
 $$byval_copy = sp + 128|0;
 $3 = sp + 64|0;
 $4 = sp;
 _MatrixTranslate($3,$0,$1,$2);
 $5 = HEAP32[84550]|0;
 dest=$$byval_copy; src=$3; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy1; src=$5; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($4,$$byval_copy,$$byval_copy1);
 dest=$5; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlRotatef($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0.0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $$byval_copy2 = sp + 272|0;
 $$byval_copy1 = sp + 208|0;
 $4 = sp + 144|0;
 $5 = sp + 64|0;
 $6 = sp + 80|0;
 $7 = sp;
 _MatrixIdentity($4);
 HEAPF32[$5>>2] = $1;
 $8 = ((($5)) + 4|0);
 HEAPF32[$8>>2] = $2;
 $9 = ((($5)) + 8|0);
 HEAPF32[$9>>2] = $3;
 _Vector3Normalize($5);
 $10 = $0 * 0.01745329238474369;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$5+8>>2]|0;
 _MatrixRotate($6,$$byval_copy2,$10);
 dest=$4; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $11 = HEAP32[84550]|0;
 dest=$$byval_copy1; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy2; src=$11; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($7,$$byval_copy1,$$byval_copy2);
 dest=$11; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlBegin($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[84554] = $0;
 return;
}
function _rlColor4ub($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink37 = 0, $$sink38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[84554]|0;
 switch ($4|0) {
 case 1:  {
  $$sink37 = (336440);$$sink38 = (336452);
  break;
 }
 case 4:  {
  $$sink37 = (336488);$$sink38 = (336500);
  break;
 }
 case 7:  {
  $$sink37 = (336248);$$sink38 = (336260);
  break;
 }
 default: {
  return;
 }
 }
 $5 = HEAP32[$$sink38>>2]|0;
 $6 = HEAP32[$$sink37>>2]|0;
 $7 = $6 << 2;
 $8 = (($5) + ($7)|0);
 HEAP8[$8>>0] = $0;
 $9 = HEAP32[$$sink38>>2]|0;
 $10 = HEAP32[$$sink37>>2]|0;
 $11 = $10 << 2;
 $12 = $11 | 1;
 $13 = (($9) + ($12)|0);
 HEAP8[$13>>0] = $1;
 $14 = HEAP32[$$sink38>>2]|0;
 $15 = HEAP32[$$sink37>>2]|0;
 $16 = $15 << 2;
 $17 = $16 | 2;
 $18 = (($14) + ($17)|0);
 HEAP8[$18>>0] = $2;
 $19 = HEAP32[$$sink38>>2]|0;
 $20 = HEAP32[$$sink37>>2]|0;
 $21 = $20 << 2;
 $22 = $21 | 3;
 $23 = (($19) + ($22)|0);
 HEAP8[$23>>0] = $3;
 $24 = HEAP32[$$sink37>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[$$sink37>>2] = $25;
 return;
}
function _rlNormal3f($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _rlTexCoord2f($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[84554]|0;
 $3 = ($2|0)==(7);
 if (!($3)) {
  return;
 }
 $4 = HEAP32[(336256)>>2]|0;
 $5 = HEAP32[(336244)>>2]|0;
 $6 = $5 << 1;
 $7 = (($4) + ($6<<2)|0);
 HEAPF32[$7>>2] = $0;
 $8 = $6 | 1;
 $9 = (($4) + ($8<<2)|0);
 HEAPF32[$9>>2] = $1;
 $10 = (($5) + 1)|0;
 HEAP32[(336244)>>2] = $10;
 return;
}
function _rlVertex2f($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[975];
 _rlVertex3f($0,$1,$2);
 return;
}
function _rlEnd() {
 var $$03956 = 0, $$04052 = 0, $$04154 = 0, $$04248 = 0, $$04347 = 0, $$byval_copy = 0, $$promoted = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond60 = 0, $exitcond63 = 0;
 var $scevgep = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp;
 $0 = HEAP32[84551]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[84552]|0;
  $3 = ($2|0)>(0);
  if ($3) {
   $$03956 = 0;
   while(1) {
    $6 = HEAP32[84553]|0;
    $7 = (($6) + (($$03956*12)|0)|0);
    $8 = HEAP32[84550]|0;
    dest=$$byval_copy; src=$8; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    _Vector3Transform($7,$$byval_copy);
    $9 = (($$03956) + 1)|0;
    $5 = HEAP32[84552]|0;
    $10 = ($9|0)<($5|0);
    if ($10) {
     $$03956 = $9;
    } else {
     break;
    }
   }
   HEAP32[84551] = 0;
   $4 = ($5|0)>(0);
   if ($4) {
    $$04154 = 0;
    while(1) {
     $11 = HEAP32[84553]|0;
     $12 = (($11) + (($$04154*12)|0)|0);
     $13 = +HEAPF32[$12>>2];
     $14 = (((($11) + (($$04154*12)|0)|0)) + 4|0);
     $15 = +HEAPF32[$14>>2];
     $16 = (((($11) + (($$04154*12)|0)|0)) + 8|0);
     $17 = +HEAPF32[$16>>2];
     _rlVertex3f($13,$15,$17);
     $18 = (($$04154) + 1)|0;
     $19 = HEAP32[84552]|0;
     $20 = ($18|0)<($19|0);
     if ($20) {
      $$04154 = $18;
     } else {
      break;
     }
    }
   }
  } else {
   HEAP32[84551] = 0;
  }
  HEAP32[84552] = 0;
 }
 $21 = HEAP32[84554]|0;
 switch ($21|0) {
 case 1:  {
  $22 = HEAP32[84108]|0;
  $23 = HEAP32[(336440)>>2]|0;
  $24 = ($22|0)==($23|0);
  if ($24) {
   $148 = +HEAPF32[975];
   $149 = $148 + 4.9999998736893758E-5;
   HEAPF32[975] = $149;
   STACKTOP = sp;return;
  }
  $25 = (($22) - ($23))|0;
  $26 = ($25|0)>(0);
  if ($26) {
   $$04347 = 0;
  } else {
   $148 = +HEAPF32[975];
   $149 = $148 + 4.9999998736893758E-5;
   HEAPF32[975] = $149;
   STACKTOP = sp;return;
  }
  while(1) {
   $27 = HEAP32[(336452)>>2]|0;
   $28 = HEAP32[(336440)>>2]|0;
   $29 = $28 << 2;
   $30 = (($29) + -4)|0;
   $31 = (($27) + ($30)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = (($27) + ($29)|0);
   HEAP8[$33>>0] = $32;
   $34 = HEAP32[(336452)>>2]|0;
   $35 = HEAP32[(336440)>>2]|0;
   $36 = $35 << 2;
   $37 = (($36) + -3)|0;
   $38 = (($34) + ($37)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $36 | 1;
   $41 = (($34) + ($40)|0);
   HEAP8[$41>>0] = $39;
   $42 = HEAP32[(336452)>>2]|0;
   $43 = HEAP32[(336440)>>2]|0;
   $44 = $43 << 2;
   $45 = (($44) + -2)|0;
   $46 = (($42) + ($45)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $44 | 2;
   $49 = (($42) + ($48)|0);
   HEAP8[$49>>0] = $47;
   $50 = HEAP32[(336452)>>2]|0;
   $51 = HEAP32[(336440)>>2]|0;
   $52 = $51 << 2;
   $53 = (($52) + -1)|0;
   $54 = (($50) + ($53)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $52 | 3;
   $57 = (($50) + ($56)|0);
   HEAP8[$57>>0] = $55;
   $58 = HEAP32[(336440)>>2]|0;
   $59 = (($58) + 1)|0;
   HEAP32[(336440)>>2] = $59;
   $60 = (($$04347) + 1)|0;
   $exitcond = ($60|0)==($25|0);
   if ($exitcond) {
    break;
   } else {
    $$04347 = $60;
   }
  }
  $148 = +HEAPF32[975];
  $149 = $148 + 4.9999998736893758E-5;
  HEAPF32[975] = $149;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $61 = HEAP32[84120]|0;
  $62 = HEAP32[(336488)>>2]|0;
  $63 = ($61|0)==($62|0);
  if ($63) {
   $148 = +HEAPF32[975];
   $149 = $148 + 4.9999998736893758E-5;
   HEAPF32[975] = $149;
   STACKTOP = sp;return;
  }
  $64 = (($61) - ($62))|0;
  $65 = ($64|0)>(0);
  if ($65) {
   $$04248 = 0;
  } else {
   $148 = +HEAPF32[975];
   $149 = $148 + 4.9999998736893758E-5;
   HEAPF32[975] = $149;
   STACKTOP = sp;return;
  }
  while(1) {
   $66 = HEAP32[(336500)>>2]|0;
   $67 = HEAP32[(336488)>>2]|0;
   $68 = $67 << 2;
   $69 = (($68) + -4)|0;
   $70 = (($66) + ($69)|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = (($66) + ($68)|0);
   HEAP8[$72>>0] = $71;
   $73 = HEAP32[(336500)>>2]|0;
   $74 = HEAP32[(336488)>>2]|0;
   $75 = $74 << 2;
   $76 = (($75) + -3)|0;
   $77 = (($73) + ($76)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $75 | 1;
   $80 = (($73) + ($79)|0);
   HEAP8[$80>>0] = $78;
   $81 = HEAP32[(336500)>>2]|0;
   $82 = HEAP32[(336488)>>2]|0;
   $83 = $82 << 2;
   $84 = (($83) + -2)|0;
   $85 = (($81) + ($84)|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $83 | 2;
   $88 = (($81) + ($87)|0);
   HEAP8[$88>>0] = $86;
   $89 = HEAP32[(336500)>>2]|0;
   $90 = HEAP32[(336488)>>2]|0;
   $91 = $90 << 2;
   $92 = (($91) + -1)|0;
   $93 = (($89) + ($92)|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $91 | 3;
   $96 = (($89) + ($95)|0);
   HEAP8[$96>>0] = $94;
   $97 = HEAP32[(336488)>>2]|0;
   $98 = (($97) + 1)|0;
   HEAP32[(336488)>>2] = $98;
   $99 = (($$04248) + 1)|0;
   $exitcond60 = ($99|0)==($64|0);
   if ($exitcond60) {
    break;
   } else {
    $$04248 = $99;
   }
  }
  $148 = +HEAPF32[975];
  $149 = $148 + 4.9999998736893758E-5;
  HEAPF32[975] = $149;
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $100 = HEAP32[84060]|0;
  $101 = HEAP32[(336248)>>2]|0;
  $102 = ($100|0)==($101|0);
  if (!($102)) {
   $103 = (($100) - ($101))|0;
   $104 = ($103|0)>(0);
   if ($104) {
    $$04052 = 0;
    while(1) {
     $105 = HEAP32[(336260)>>2]|0;
     $106 = HEAP32[(336248)>>2]|0;
     $107 = $106 << 2;
     $108 = (($107) + -4)|0;
     $109 = (($105) + ($108)|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = (($105) + ($107)|0);
     HEAP8[$111>>0] = $110;
     $112 = HEAP32[(336260)>>2]|0;
     $113 = HEAP32[(336248)>>2]|0;
     $114 = $113 << 2;
     $115 = (($114) + -3)|0;
     $116 = (($112) + ($115)|0);
     $117 = HEAP8[$116>>0]|0;
     $118 = $114 | 1;
     $119 = (($112) + ($118)|0);
     HEAP8[$119>>0] = $117;
     $120 = HEAP32[(336260)>>2]|0;
     $121 = HEAP32[(336248)>>2]|0;
     $122 = $121 << 2;
     $123 = (($122) + -2)|0;
     $124 = (($120) + ($123)|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = $122 | 2;
     $127 = (($120) + ($126)|0);
     HEAP8[$127>>0] = $125;
     $128 = HEAP32[(336260)>>2]|0;
     $129 = HEAP32[(336248)>>2]|0;
     $130 = $129 << 2;
     $131 = (($130) + -1)|0;
     $132 = (($128) + ($131)|0);
     $133 = HEAP8[$132>>0]|0;
     $134 = $130 | 3;
     $135 = (($128) + ($134)|0);
     HEAP8[$135>>0] = $133;
     $136 = HEAP32[(336248)>>2]|0;
     $137 = (($136) + 1)|0;
     HEAP32[(336248)>>2] = $137;
     $138 = (($$04052) + 1)|0;
     $exitcond63 = ($138|0)==($103|0);
     if ($exitcond63) {
      break;
     } else {
      $$04052 = $138;
     }
    }
   }
  }
  $139 = HEAP32[84060]|0;
  $140 = HEAP32[(336244)>>2]|0;
  $141 = ($139|0)>($140|0);
  if (!($141)) {
   $148 = +HEAPF32[975];
   $149 = $148 + 4.9999998736893758E-5;
   HEAPF32[975] = $149;
   STACKTOP = sp;return;
  }
  $142 = HEAP32[(336256)>>2]|0;
  $$promoted = HEAP32[(336244)>>2]|0;
  $143 = $$promoted << 1;
  $scevgep = (($142) + ($143<<2)|0);
  $144 = (($139) - ($140))|0;
  $145 = $144 << 3;
  _memset(($scevgep|0),0,($145|0))|0;
  $146 = (($139) + ($$promoted))|0;
  $147 = (($146) - ($140))|0;
  HEAP32[(336244)>>2] = $147;
  $148 = +HEAPF32[975];
  $149 = $148 + 4.9999998736893758E-5;
  HEAPF32[975] = $149;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $148 = +HEAPF32[975];
  $149 = $148 + 4.9999998736893758E-5;
  HEAPF32[975] = $149;
  STACKTOP = sp;return;
 }
 }
}
function _rlPopMatrix() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[84293]|0;
 $1 = ($0|0)>(0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[84293]|0;
 $3 = (($2) + -1)|0;
 $4 = (337176 + ($3<<6)|0);
 $5 = HEAP32[84550]|0;
 _memmove(($5|0),($4|0),64)|0;
 $6 = (($2) + -1)|0;
 HEAP32[84293] = $6;
 return;
}
function _rlDisableTexture() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[84060]|0;
 $1 = ($0|0)>(4095);
 if (!($1)) {
  return;
 }
 _rlglDraw();
 return;
}
function _rlglDraw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _UpdateBuffersDefault();
 _DrawBuffersDefault();
 return;
}
function _UpdateBuffersDefault() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[84108]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[84165]|0;
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = HEAP32[84166]|0;
   $5 = HEAP32[(336460)>>2]|0;
   FUNCTION_TABLE_vi[$4 & 31]($5);
  }
  $6 = HEAP32[(336464)>>2]|0;
  _glBindBuffer(34962,($6|0));
  $7 = HEAP32[84108]|0;
  $8 = ($7*12)|0;
  $9 = HEAP32[(336444)>>2]|0;
  _glBufferSubData(34962,0,($8|0),($9|0));
  $10 = HEAP32[(336468)>>2]|0;
  _glBindBuffer(34962,($10|0));
  $11 = HEAP32[(336440)>>2]|0;
  $12 = $11 << 2;
  $13 = HEAP32[(336452)>>2]|0;
  _glBufferSubData(34962,0,($12|0),($13|0));
 }
 $14 = HEAP32[84120]|0;
 $15 = ($14|0)>(0);
 if ($15) {
  $16 = HEAP32[84165]|0;
  $17 = ($16|0)==(0);
  if (!($17)) {
   $18 = HEAP32[84166]|0;
   $19 = HEAP32[(336508)>>2]|0;
   FUNCTION_TABLE_vi[$18 & 31]($19);
  }
  $20 = HEAP32[(336512)>>2]|0;
  _glBindBuffer(34962,($20|0));
  $21 = HEAP32[84120]|0;
  $22 = ($21*12)|0;
  $23 = HEAP32[(336492)>>2]|0;
  _glBufferSubData(34962,0,($22|0),($23|0));
  $24 = HEAP32[(336516)>>2]|0;
  _glBindBuffer(34962,($24|0));
  $25 = HEAP32[(336488)>>2]|0;
  $26 = $25 << 2;
  $27 = HEAP32[(336500)>>2]|0;
  _glBufferSubData(34962,0,($26|0),($27|0));
 }
 $28 = HEAP32[84060]|0;
 $29 = ($28|0)>(0);
 if ($29) {
  $30 = HEAP32[84165]|0;
  $31 = ($30|0)==(0);
  if (!($31)) {
   $32 = HEAP32[84166]|0;
   $33 = HEAP32[(336268)>>2]|0;
   FUNCTION_TABLE_vi[$32 & 31]($33);
  }
  $34 = HEAP32[(336272)>>2]|0;
  _glBindBuffer(34962,($34|0));
  $35 = HEAP32[84060]|0;
  $36 = ($35*12)|0;
  $37 = HEAP32[(336252)>>2]|0;
  _glBufferSubData(34962,0,($36|0),($37|0));
  $38 = HEAP32[(336276)>>2]|0;
  _glBindBuffer(34962,($38|0));
  $39 = HEAP32[84060]|0;
  $40 = $39 << 3;
  $41 = HEAP32[(336256)>>2]|0;
  _glBufferSubData(34962,0,($40|0),($41|0));
  $42 = HEAP32[(336280)>>2]|0;
  _glBindBuffer(34962,($42|0));
  $43 = HEAP32[84060]|0;
  $44 = $43 << 2;
  $45 = HEAP32[(336260)>>2]|0;
  _glBufferSubData(34962,0,($44|0),($45|0));
 }
 $46 = HEAP32[84165]|0;
 $47 = ($46|0)==(0);
 if ($47) {
  return;
 }
 $48 = HEAP32[84166]|0;
 FUNCTION_TABLE_vi[$48 & 31](0);
 return;
}
function _DrawBuffersDefault() {
 var $$ = 0, $$02830 = 0, $$02932 = 0, $$031 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $modelview$byval_copy = 0, $or$cond = 0, $or$cond3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $$byval_copy2 = sp + 256|0;
 $modelview$byval_copy = sp + 192|0;
 $0 = sp + 128|0;
 $1 = sp + 64|0;
 $2 = sp;
 dest=$0; src=336288; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$1; src=336352; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $3 = HEAP32[84104]|0;
 $4 = ($3|0)!=(0);
 $$ = $4 ? 2 : 1;
 $$02932 = 0;
 while(1) {
  if ($4) {
   dest=$modelview$byval_copy; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   dest=$$byval_copy2; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   _SetStereoView($$02932,$modelview$byval_copy,$$byval_copy2);
  }
  $8 = HEAP32[84108]|0;
  $9 = ($8|0)>(0);
  $10 = HEAP32[84120]|0;
  $11 = ($10|0)>(0);
  $or$cond = $9 | $11;
  $12 = HEAP32[84060]|0;
  $13 = ($12|0)>(0);
  $or$cond3 = $or$cond | $13;
  if ($or$cond3) {
   $14 = HEAP32[84132]|0;
   _glUseProgram(($14|0));
   dest=$modelview$byval_copy; src=336352; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   dest=$$byval_copy2; src=336288; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   _MatrixMultiply($2,$modelview$byval_copy,$$byval_copy2);
   $15 = HEAP32[(336556)>>2]|0;
   dest=$$byval_copy2; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $16 = (_MatrixToFloat($$byval_copy2)|0);
   _glUniformMatrix4fv(($15|0),1,0,($16|0));
   $17 = HEAP32[(336576)>>2]|0;
   _glUniform4f(($17|0),1.0,1.0,1.0,1.0);
   $18 = HEAP32[(336588)>>2]|0;
   _glUniform1i(($18|0),0);
  }
  $19 = HEAP32[84108]|0;
  $20 = ($19|0)>(0);
  if ($20) {
   _glActiveTexture(33984);
   $21 = HEAP32[84106]|0;
   _glBindTexture(3553,($21|0));
   $22 = HEAP32[84165]|0;
   $23 = ($22|0)==(0);
   if ($23) {
    $26 = HEAP32[(336464)>>2]|0;
    _glBindBuffer(34962,($26|0));
    $27 = HEAP32[(336532)>>2]|0;
    _glVertexAttribPointer(($27|0),3,5126,0,0,(0|0));
    $28 = HEAP32[(336532)>>2]|0;
    _glEnableVertexAttribArray(($28|0));
    $29 = HEAP32[(336468)>>2]|0;
    _glBindBuffer(34962,($29|0));
    $30 = HEAP32[(336552)>>2]|0;
    _glVertexAttribPointer(($30|0),4,5121,1,0,(0|0));
    $31 = HEAP32[(336552)>>2]|0;
    _glEnableVertexAttribArray(($31|0));
   } else {
    $24 = HEAP32[84166]|0;
    $25 = HEAP32[(336460)>>2]|0;
    FUNCTION_TABLE_vi[$24 & 31]($25);
   }
   $32 = HEAP32[84108]|0;
   _glDrawArrays(1,0,($32|0));
   $33 = HEAP32[84165]|0;
   $34 = ($33|0)==(0);
   if ($34) {
    _glBindBuffer(34962,0);
   }
   _glBindTexture(3553,0);
  }
  $35 = HEAP32[84120]|0;
  $36 = ($35|0)>(0);
  if ($36) {
   _glActiveTexture(33984);
   $37 = HEAP32[84106]|0;
   _glBindTexture(3553,($37|0));
   $38 = HEAP32[84165]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $42 = HEAP32[(336512)>>2]|0;
    _glBindBuffer(34962,($42|0));
    $43 = HEAP32[(336532)>>2]|0;
    _glVertexAttribPointer(($43|0),3,5126,0,0,(0|0));
    $44 = HEAP32[(336532)>>2]|0;
    _glEnableVertexAttribArray(($44|0));
    $45 = HEAP32[(336516)>>2]|0;
    _glBindBuffer(34962,($45|0));
    $46 = HEAP32[(336552)>>2]|0;
    _glVertexAttribPointer(($46|0),4,5121,1,0,(0|0));
    $47 = HEAP32[(336552)>>2]|0;
    _glEnableVertexAttribArray(($47|0));
   } else {
    $40 = HEAP32[84166]|0;
    $41 = HEAP32[(336508)>>2]|0;
    FUNCTION_TABLE_vi[$40 & 31]($41);
   }
   $48 = HEAP32[84120]|0;
   _glDrawArrays(4,0,($48|0));
   $49 = HEAP32[84165]|0;
   $50 = ($49|0)==(0);
   if ($50) {
    _glBindBuffer(34962,0);
   }
   _glBindTexture(3553,0);
  }
  $51 = HEAP32[84060]|0;
  $52 = ($51|0)>(0);
  if ($52) {
   $53 = HEAP32[84165]|0;
   $54 = ($53|0)==(0);
   if ($54) {
    $57 = HEAP32[(336272)>>2]|0;
    _glBindBuffer(34962,($57|0));
    $58 = HEAP32[(336532)>>2]|0;
    _glVertexAttribPointer(($58|0),3,5126,0,0,(0|0));
    $59 = HEAP32[(336532)>>2]|0;
    _glEnableVertexAttribArray(($59|0));
    $60 = HEAP32[(336276)>>2]|0;
    _glBindBuffer(34962,($60|0));
    $61 = HEAP32[(336536)>>2]|0;
    _glVertexAttribPointer(($61|0),2,5126,0,0,(0|0));
    $62 = HEAP32[(336536)>>2]|0;
    _glEnableVertexAttribArray(($62|0));
    $63 = HEAP32[(336280)>>2]|0;
    _glBindBuffer(34962,($63|0));
    $64 = HEAP32[(336552)>>2]|0;
    _glVertexAttribPointer(($64|0),4,5121,1,0,(0|0));
    $65 = HEAP32[(336552)>>2]|0;
    _glEnableVertexAttribArray(($65|0));
    $66 = HEAP32[(336284)>>2]|0;
    _glBindBuffer(34963,($66|0));
   } else {
    $55 = HEAP32[84166]|0;
    $56 = HEAP32[(336268)>>2]|0;
    FUNCTION_TABLE_vi[$55 & 31]($56);
   }
   $67 = HEAP32[84105]|0;
   $68 = ($67|0)>(0);
   if ($68) {
    $$02830 = 0;$$031 = 0;
    while(1) {
     $71 = HEAP32[84107]|0;
     $72 = (($71) + (($$031*144)|0)|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = (($73|0) / 4)&-1;
     $75 = ($74*6)|0;
     _glActiveTexture(33984);
     $76 = HEAP32[84107]|0;
     $77 = (((($76) + (($$031*144)|0)|0)) + 8|0);
     $78 = HEAP32[$77>>2]|0;
     _glBindTexture(3553,($78|0));
     $79 = $$02830 << 1;
     $80 = $79;
     _glDrawElements(4,($75|0),5123,($80|0));
     $81 = HEAP32[84107]|0;
     $82 = (($81) + (($$031*144)|0)|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (($83|0) / 4)&-1;
     $85 = ($84*6)|0;
     $86 = (($85) + ($$02830))|0;
     $87 = (($$031) + 1)|0;
     $88 = HEAP32[84105]|0;
     $89 = ($87|0)<($88|0);
     if ($89) {
      $$02830 = $86;$$031 = $87;
     } else {
      break;
     }
    }
   }
   $69 = HEAP32[84165]|0;
   $70 = ($69|0)==(0);
   if ($70) {
    _glBindBuffer(34962,0);
    _glBindBuffer(34963,0);
   }
   _glBindTexture(3553,0);
  }
  $90 = HEAP32[84165]|0;
  $91 = ($90|0)==(0);
  if (!($91)) {
   $92 = HEAP32[84166]|0;
   FUNCTION_TABLE_vi[$92 & 31](0);
  }
  _glUseProgram(0);
  $93 = (($$02932) + 1)|0;
  $94 = ($93|0)<($$|0);
  if ($94) {
   $$02932 = $93;
  } else {
   break;
  }
 }
 HEAP32[84105] = 1;
 $5 = HEAP32[84106]|0;
 $6 = HEAP32[84107]|0;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = $5;
 HEAP32[$6>>2] = 0;
 HEAP32[84108] = 0;
 HEAP32[(336440)>>2] = 0;
 HEAP32[84120] = 0;
 HEAP32[(336488)>>2] = 0;
 HEAP32[84060] = 0;
 HEAP32[(336244)>>2] = 0;
 HEAP32[(336248)>>2] = 0;
 HEAPF32[975] = -1.0;
 dest=336288; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=336352; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _SetStereoView($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy3 = sp + 192|0;
 $$byval_copy = sp + 64|0;
 $3 = sp;
 $4 = sp + 128|0;
 dest=$3; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $5 = HEAP32[84183]|0;
 $6 = Math_imul($5, $0)|0;
 $7 = (($6|0) / 2)&-1;
 $8 = (($5|0) / 2)&-1;
 $9 = HEAP32[84184]|0;
 _rlViewport($7,0,$8,$9);
 $10 = (337044 + ($0<<6)|0);
 dest=$$byval_copy; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy3; src=$10; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($4,$$byval_copy,$$byval_copy3);
 $11 = (336916 + ($0<<6)|0);
 dest=$3; src=$11; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy3; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _SetMatrixModelview($$byval_copy3);
 dest=$$byval_copy3; src=$3; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _SetMatrixProjection($$byval_copy3);
 STACKTOP = sp;return;
}
function _MatrixMultiply($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$10$0$$sroa_idx14 = 0, $$sroa$11$0$$sroa_idx16 = 0, $$sroa$12$0$$sroa_idx18 = 0, $$sroa$13$0$$sroa_idx20 = 0, $$sroa$14$0$$sroa_idx22 = 0, $$sroa$15$0$$sroa_idx24 = 0, $$sroa$16$0$$sroa_idx26 = 0, $$sroa$17$0$$sroa_idx28 = 0, $$sroa$18$0$$sroa_idx30 = 0, $$sroa$4$0$$sroa_idx2 = 0, $$sroa$5$0$$sroa_idx4 = 0, $$sroa$6$0$$sroa_idx6 = 0, $$sroa$7$0$$sroa_idx8 = 0, $$sroa$8$0$$sroa_idx10 = 0, $$sroa$9$0$$sroa_idx12 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0;
 var $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0;
 var $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0;
 var $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0;
 var $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0;
 var $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0;
 var $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = +HEAPF32[$1>>2];
 $4 = +HEAPF32[$2>>2];
 $5 = $3 * $4;
 $6 = ((($1)) + 16|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($2)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 * $9;
 $11 = $5 + $10;
 $12 = ((($1)) + 32|0);
 $13 = +HEAPF32[$12>>2];
 $14 = ((($2)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $13 * $15;
 $17 = $11 + $16;
 $18 = ((($1)) + 48|0);
 $19 = +HEAPF32[$18>>2];
 $20 = ((($2)) + 12|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $19 * $21;
 $23 = $17 + $22;
 $24 = ((($2)) + 16|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $3 * $25;
 $27 = ((($2)) + 20|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $7 * $28;
 $30 = $26 + $29;
 $31 = ((($2)) + 24|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $13 * $32;
 $34 = $30 + $33;
 $35 = ((($2)) + 28|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $19 * $36;
 $38 = $34 + $37;
 $39 = ((($2)) + 32|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $3 * $40;
 $42 = ((($2)) + 36|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $7 * $43;
 $45 = $41 + $44;
 $46 = ((($2)) + 40|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $13 * $47;
 $49 = $45 + $48;
 $50 = ((($2)) + 44|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $19 * $51;
 $53 = $49 + $52;
 $54 = ((($2)) + 48|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $3 * $55;
 $57 = ((($2)) + 52|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $7 * $58;
 $60 = $56 + $59;
 $61 = ((($2)) + 56|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $13 * $62;
 $64 = $60 + $63;
 $65 = ((($2)) + 60|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $19 * $66;
 $68 = $64 + $67;
 $69 = ((($1)) + 4|0);
 $70 = +HEAPF32[$69>>2];
 $71 = $4 * $70;
 $72 = ((($1)) + 20|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $9 * $73;
 $75 = $71 + $74;
 $76 = ((($1)) + 36|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $15 * $77;
 $79 = $75 + $78;
 $80 = ((($1)) + 52|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $21 * $81;
 $83 = $79 + $82;
 $84 = $25 * $70;
 $85 = $28 * $73;
 $86 = $84 + $85;
 $87 = $32 * $77;
 $88 = $86 + $87;
 $89 = $36 * $81;
 $90 = $88 + $89;
 $91 = $40 * $70;
 $92 = $43 * $73;
 $93 = $91 + $92;
 $94 = $47 * $77;
 $95 = $93 + $94;
 $96 = $51 * $81;
 $97 = $95 + $96;
 $98 = $55 * $70;
 $99 = $58 * $73;
 $100 = $98 + $99;
 $101 = $62 * $77;
 $102 = $100 + $101;
 $103 = $66 * $81;
 $104 = $102 + $103;
 $105 = ((($1)) + 8|0);
 $106 = +HEAPF32[$105>>2];
 $107 = $4 * $106;
 $108 = ((($1)) + 24|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $9 * $109;
 $111 = $107 + $110;
 $112 = ((($1)) + 40|0);
 $113 = +HEAPF32[$112>>2];
 $114 = $15 * $113;
 $115 = $111 + $114;
 $116 = ((($1)) + 56|0);
 $117 = +HEAPF32[$116>>2];
 $118 = $21 * $117;
 $119 = $115 + $118;
 $120 = $25 * $106;
 $121 = $28 * $109;
 $122 = $120 + $121;
 $123 = $32 * $113;
 $124 = $122 + $123;
 $125 = $36 * $117;
 $126 = $124 + $125;
 $127 = $40 * $106;
 $128 = $43 * $109;
 $129 = $127 + $128;
 $130 = $47 * $113;
 $131 = $129 + $130;
 $132 = $51 * $117;
 $133 = $131 + $132;
 $134 = $55 * $106;
 $135 = $58 * $109;
 $136 = $134 + $135;
 $137 = $62 * $113;
 $138 = $136 + $137;
 $139 = $66 * $117;
 $140 = $138 + $139;
 $141 = ((($1)) + 12|0);
 $142 = +HEAPF32[$141>>2];
 $143 = $4 * $142;
 $144 = ((($1)) + 28|0);
 $145 = +HEAPF32[$144>>2];
 $146 = $9 * $145;
 $147 = $143 + $146;
 $148 = ((($1)) + 44|0);
 $149 = +HEAPF32[$148>>2];
 $150 = $15 * $149;
 $151 = $147 + $150;
 $152 = ((($1)) + 60|0);
 $153 = +HEAPF32[$152>>2];
 $154 = $21 * $153;
 $155 = $151 + $154;
 $156 = $25 * $142;
 $157 = $28 * $145;
 $158 = $156 + $157;
 $159 = $32 * $149;
 $160 = $158 + $159;
 $161 = $36 * $153;
 $162 = $160 + $161;
 $163 = $40 * $142;
 $164 = $43 * $145;
 $165 = $163 + $164;
 $166 = $47 * $149;
 $167 = $165 + $166;
 $168 = $51 * $153;
 $169 = $167 + $168;
 $170 = $55 * $142;
 $171 = $58 * $145;
 $172 = $170 + $171;
 $173 = $62 * $149;
 $174 = $172 + $173;
 $175 = $66 * $153;
 $176 = $174 + $175;
 HEAPF32[$0>>2] = $23;
 $$sroa$4$0$$sroa_idx2 = ((($0)) + 4|0);
 HEAPF32[$$sroa$4$0$$sroa_idx2>>2] = $83;
 $$sroa$5$0$$sroa_idx4 = ((($0)) + 8|0);
 HEAPF32[$$sroa$5$0$$sroa_idx4>>2] = $119;
 $$sroa$6$0$$sroa_idx6 = ((($0)) + 12|0);
 HEAPF32[$$sroa$6$0$$sroa_idx6>>2] = $155;
 $$sroa$7$0$$sroa_idx8 = ((($0)) + 16|0);
 HEAPF32[$$sroa$7$0$$sroa_idx8>>2] = $38;
 $$sroa$8$0$$sroa_idx10 = ((($0)) + 20|0);
 HEAPF32[$$sroa$8$0$$sroa_idx10>>2] = $90;
 $$sroa$9$0$$sroa_idx12 = ((($0)) + 24|0);
 HEAPF32[$$sroa$9$0$$sroa_idx12>>2] = $126;
 $$sroa$10$0$$sroa_idx14 = ((($0)) + 28|0);
 HEAPF32[$$sroa$10$0$$sroa_idx14>>2] = $162;
 $$sroa$11$0$$sroa_idx16 = ((($0)) + 32|0);
 HEAPF32[$$sroa$11$0$$sroa_idx16>>2] = $53;
 $$sroa$12$0$$sroa_idx18 = ((($0)) + 36|0);
 HEAPF32[$$sroa$12$0$$sroa_idx18>>2] = $97;
 $$sroa$13$0$$sroa_idx20 = ((($0)) + 40|0);
 HEAPF32[$$sroa$13$0$$sroa_idx20>>2] = $133;
 $$sroa$14$0$$sroa_idx22 = ((($0)) + 44|0);
 HEAPF32[$$sroa$14$0$$sroa_idx22>>2] = $169;
 $$sroa$15$0$$sroa_idx24 = ((($0)) + 48|0);
 HEAPF32[$$sroa$15$0$$sroa_idx24>>2] = $68;
 $$sroa$16$0$$sroa_idx26 = ((($0)) + 52|0);
 HEAPF32[$$sroa$16$0$$sroa_idx26>>2] = $104;
 $$sroa$17$0$$sroa_idx28 = ((($0)) + 56|0);
 HEAPF32[$$sroa$17$0$$sroa_idx28>>2] = $140;
 $$sroa$18$0$$sroa_idx30 = ((($0)) + 60|0);
 HEAPF32[$$sroa$18$0$$sroa_idx30>>2] = $176;
 return;
}
function _MatrixToFloat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[84167] = $1;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[(336672)>>2] = $3;
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[(336676)>>2] = $5;
 $6 = ((($0)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[(336680)>>2] = $7;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[(336684)>>2] = $9;
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[(336688)>>2] = $11;
 $12 = ((($0)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[(336692)>>2] = $13;
 $14 = ((($0)) + 52|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[(336696)>>2] = $15;
 $16 = ((($0)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[(336700)>>2] = $17;
 $18 = ((($0)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[(336704)>>2] = $19;
 $20 = ((($0)) + 40|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[(336708)>>2] = $21;
 $22 = ((($0)) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[(336712)>>2] = $23;
 $24 = ((($0)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP32[(336716)>>2] = $25;
 $26 = ((($0)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[(336720)>>2] = $27;
 $28 = ((($0)) + 44|0);
 $29 = HEAP32[$28>>2]|0;
 HEAP32[(336724)>>2] = $29;
 $30 = ((($0)) + 60|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[(336728)>>2] = $31;
 return (336668|0);
}
function _rlViewport($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _glViewport(($0|0),($1|0),($2|0),($3|0));
 return;
}
function _SetMatrixModelview($0) {
 $0 = $0|0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=336352; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _SetMatrixProjection($0) {
 $0 = $0|0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=336288; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _Vector3Transform($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0;
 var $47 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$0>>2];
 $3 = ((($0)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($0)) + 8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = +HEAPF32[$1>>2];
 $8 = $2 * $7;
 $9 = ((($1)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $4 * $10;
 $12 = $8 + $11;
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $6 * $14;
 $16 = $12 + $15;
 $17 = ((($1)) + 12|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $18 + $16;
 HEAPF32[$0>>2] = $19;
 $20 = ((($1)) + 16|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $2 * $21;
 $23 = ((($1)) + 20|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $4 * $24;
 $26 = $22 + $25;
 $27 = ((($1)) + 24|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $6 * $28;
 $30 = $26 + $29;
 $31 = ((($1)) + 28|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $32 + $30;
 HEAPF32[$3>>2] = $33;
 $34 = ((($1)) + 32|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $2 * $35;
 $37 = ((($1)) + 36|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $4 * $38;
 $40 = $36 + $39;
 $41 = ((($1)) + 40|0);
 $42 = +HEAPF32[$41>>2];
 $43 = $6 * $42;
 $44 = $40 + $43;
 $45 = ((($1)) + 44|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $46 + $44;
 HEAPF32[$5>>2] = $47;
 return;
}
function _rlVertex3f($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = HEAP32[84551]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = HEAP32[84553]|0;
  $6 = HEAP32[84552]|0;
  $7 = (($5) + (($6*12)|0)|0);
  HEAPF32[$7>>2] = $0;
  $8 = (((($5) + (($6*12)|0)|0)) + 4|0);
  HEAPF32[$8>>2] = $1;
  $9 = (((($5) + (($6*12)|0)|0)) + 8|0);
  HEAPF32[$9>>2] = $2;
  $10 = (($6) + 1)|0;
  HEAP32[84552] = $10;
  STACKTOP = sp;return;
 }
 $11 = HEAP32[84554]|0;
 switch ($11|0) {
 case 1:  {
  $12 = HEAP32[84108]|0;
  $13 = ($12|0)<(2048);
  if ($13) {
   $14 = HEAP32[(336444)>>2]|0;
   $15 = ($12*3)|0;
   $16 = (($14) + ($15<<2)|0);
   HEAPF32[$16>>2] = $0;
   $17 = (($15) + 1)|0;
   $18 = (($14) + ($17<<2)|0);
   HEAPF32[$18>>2] = $1;
   $19 = (($15) + 2)|0;
   $20 = (($14) + ($19<<2)|0);
   HEAPF32[$20>>2] = $2;
   $21 = (($12) + 1)|0;
   HEAP32[84108] = $21;
   STACKTOP = sp;return;
  } else {
   _TraceLog(2,13037,$vararg_buffer);
   STACKTOP = sp;return;
  }
  break;
 }
 case 4:  {
  $22 = HEAP32[84120]|0;
  $23 = ($22|0)<(6144);
  if ($23) {
   $24 = HEAP32[(336492)>>2]|0;
   $25 = ($22*3)|0;
   $26 = (($24) + ($25<<2)|0);
   HEAPF32[$26>>2] = $0;
   $27 = (($25) + 1)|0;
   $28 = (($24) + ($27<<2)|0);
   HEAPF32[$28>>2] = $1;
   $29 = (($25) + 2)|0;
   $30 = (($24) + ($29<<2)|0);
   HEAPF32[$30>>2] = $2;
   $31 = (($22) + 1)|0;
   HEAP32[84120] = $31;
   STACKTOP = sp;return;
  } else {
   _TraceLog(2,13062,$vararg_buffer1);
   STACKTOP = sp;return;
  }
  break;
 }
 case 7:  {
  $32 = HEAP32[84060]|0;
  $33 = ($32|0)<(4096);
  if ($33) {
   $34 = HEAP32[(336252)>>2]|0;
   $35 = ($32*3)|0;
   $36 = (($34) + ($35<<2)|0);
   HEAPF32[$36>>2] = $0;
   $37 = (($35) + 1)|0;
   $38 = (($34) + ($37<<2)|0);
   HEAPF32[$38>>2] = $1;
   $39 = (($35) + 2)|0;
   $40 = (($34) + ($39<<2)|0);
   HEAPF32[$40>>2] = $2;
   $41 = (($32) + 1)|0;
   HEAP32[84060] = $41;
   $42 = HEAP32[84107]|0;
   $43 = HEAP32[84105]|0;
   $44 = (($43) + -1)|0;
   $45 = (($42) + (($44*144)|0)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 1)|0;
   HEAP32[$45>>2] = $47;
   STACKTOP = sp;return;
  } else {
   _TraceLog(2,13091,$vararg_buffer3);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _MatrixIdentity($0) {
 $0 = $0|0;
 var $$sroa$5$0$$sroa_idx = 0, $$sroa$55$0$$sroa_idx6 = 0, $$sroa$6$0$$sroa_idx = 0, $$sroa$611$0$$sroa_idx12 = 0, $$sroa$7$0$$sroa_idx = 0, $$sroa$717$0$$sroa_idx18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$0>>2] = 1.0;
 $$sroa$5$0$$sroa_idx = ((($0)) + 4|0);
 ;HEAP32[$$sroa$5$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$5$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$5$0$$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$5$0$$sroa_idx+12>>2]=0|0;
 $$sroa$55$0$$sroa_idx6 = ((($0)) + 20|0);
 HEAPF32[$$sroa$55$0$$sroa_idx6>>2] = 1.0;
 $$sroa$6$0$$sroa_idx = ((($0)) + 24|0);
 ;HEAP32[$$sroa$6$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$6$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$6$0$$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$6$0$$sroa_idx+12>>2]=0|0;
 $$sroa$611$0$$sroa_idx12 = ((($0)) + 40|0);
 HEAPF32[$$sroa$611$0$$sroa_idx12>>2] = 1.0;
 $$sroa$7$0$$sroa_idx = ((($0)) + 44|0);
 ;HEAP32[$$sroa$7$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$7$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$7$0$$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$7$0$$sroa_idx+12>>2]=0|0;
 $$sroa$717$0$$sroa_idx18 = ((($0)) + 60|0);
 HEAPF32[$$sroa$717$0$$sroa_idx18>>2] = 1.0;
 return;
}
function _Vector3Normalize($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$op = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;
 $1 = (+_Vector3Length($$byval_copy));
 $2 = $1 == 0.0;
 $$op = 1.0 / $1;
 $3 = $2 ? 1.0 : $$op;
 $4 = +HEAPF32[$0>>2];
 $5 = $4 * $3;
 HEAPF32[$0>>2] = $5;
 $6 = ((($0)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $3 * $7;
 HEAPF32[$6>>2] = $8;
 $9 = ((($0)) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $3 * $10;
 HEAPF32[$9>>2] = $11;
 STACKTOP = sp;return;
}
function _MatrixRotate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$ = 0.0, $$221 = 0.0, $$222 = 0.0, $$sroa$10$0$$sroa_idx199 = 0, $$sroa$11$0$$sroa_idx201 = 0, $$sroa$12$0$$sroa_idx203 = 0, $$sroa$13$0$$sroa_idx205 = 0, $$sroa$14$0$$sroa_idx207 = 0, $$sroa$15$0$$sroa_idx209 = 0, $$sroa$16$0$$sroa_idx211 = 0, $$sroa$17$0$$sroa_idx213 = 0, $$sroa$18$0$$sroa_idx215 = 0, $$sroa$4$0$$sroa_idx187 = 0, $$sroa$5$0$$sroa_idx189 = 0, $$sroa$6$0$$sroa_idx191 = 0, $$sroa$7$0$$sroa_idx193 = 0, $$sroa$8$0$$sroa_idx195 = 0, $$sroa$9$0$$sroa_idx197 = 0, $10 = 0.0, $100 = 0.0;
 var $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0;
 var $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0;
 var $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 _MatrixIdentity($3);
 $4 = +HEAPF32[$1>>2];
 $5 = ((($1)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $4 * $4;
 $10 = $6 * $6;
 $11 = $9 + $10;
 $12 = $8 * $8;
 $13 = $11 + $12;
 $14 = (+Math_sqrt((+$13)));
 $15 = $14 != 1.0;
 $16 = $14 != 0.0;
 $or$cond = $15 & $16;
 $17 = 1.0 / $14;
 $18 = $4 * $17;
 $19 = $6 * $17;
 $20 = $8 * $17;
 $$ = $or$cond ? $20 : $8;
 $$221 = $or$cond ? $19 : $6;
 $$222 = $or$cond ? $18 : $4;
 $21 = (+Math_sin((+$2)));
 $22 = (+Math_cos((+$2)));
 $23 = 1.0 - $22;
 $24 = +HEAPF32[$3>>2];
 $25 = ((($3)) + 16|0);
 $26 = +HEAPF32[$25>>2];
 $27 = ((($3)) + 32|0);
 $28 = +HEAPF32[$27>>2];
 $29 = ((($3)) + 48|0);
 $30 = +HEAPF32[$29>>2];
 $31 = ((($3)) + 4|0);
 $32 = +HEAPF32[$31>>2];
 $33 = ((($3)) + 20|0);
 $34 = +HEAPF32[$33>>2];
 $35 = ((($3)) + 36|0);
 $36 = +HEAPF32[$35>>2];
 $37 = ((($3)) + 52|0);
 $38 = +HEAPF32[$37>>2];
 $39 = ((($3)) + 8|0);
 $40 = +HEAPF32[$39>>2];
 $41 = ((($3)) + 24|0);
 $42 = +HEAPF32[$41>>2];
 $43 = ((($3)) + 40|0);
 $44 = +HEAPF32[$43>>2];
 $45 = ((($3)) + 56|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $$222 * $$222;
 $48 = $23 * $47;
 $49 = $22 + $48;
 $50 = $$221 * $$222;
 $51 = $23 * $50;
 $52 = $21 * $$;
 $53 = $52 + $51;
 $54 = $$ * $$222;
 $55 = $23 * $54;
 $56 = $21 * $$221;
 $57 = $55 - $56;
 $58 = $51 - $52;
 $59 = $$221 * $$221;
 $60 = $23 * $59;
 $61 = $22 + $60;
 $62 = $$ * $$221;
 $63 = $23 * $62;
 $64 = $21 * $$222;
 $65 = $64 + $63;
 $66 = $56 + $55;
 $67 = $63 - $64;
 $68 = $$ * $$;
 $69 = $23 * $68;
 $70 = $22 + $69;
 $71 = $24 * $49;
 $72 = $53 * $32;
 $73 = $71 + $72;
 $74 = $57 * $40;
 $75 = $73 + $74;
 $76 = $26 * $49;
 $77 = $53 * $34;
 $78 = $76 + $77;
 $79 = $57 * $42;
 $80 = $78 + $79;
 $81 = $28 * $49;
 $82 = $53 * $36;
 $83 = $81 + $82;
 $84 = $57 * $44;
 $85 = $83 + $84;
 $86 = $30 * $49;
 $87 = $53 * $38;
 $88 = $86 + $87;
 $89 = $57 * $46;
 $90 = $88 + $89;
 $91 = $24 * $58;
 $92 = $61 * $32;
 $93 = $91 + $92;
 $94 = $65 * $40;
 $95 = $93 + $94;
 $96 = $26 * $58;
 $97 = $61 * $34;
 $98 = $96 + $97;
 $99 = $65 * $42;
 $100 = $98 + $99;
 $101 = $28 * $58;
 $102 = $61 * $36;
 $103 = $101 + $102;
 $104 = $65 * $44;
 $105 = $103 + $104;
 $106 = $30 * $58;
 $107 = $61 * $38;
 $108 = $106 + $107;
 $109 = $65 * $46;
 $110 = $108 + $109;
 $111 = $24 * $66;
 $112 = $67 * $32;
 $113 = $111 + $112;
 $114 = $70 * $40;
 $115 = $113 + $114;
 $116 = $26 * $66;
 $117 = $67 * $34;
 $118 = $116 + $117;
 $119 = $70 * $42;
 $120 = $118 + $119;
 $121 = $28 * $66;
 $122 = $67 * $36;
 $123 = $121 + $122;
 $124 = $70 * $44;
 $125 = $123 + $124;
 $126 = $30 * $66;
 $127 = $67 * $38;
 $128 = $126 + $127;
 $129 = $70 * $46;
 $130 = $128 + $129;
 $131 = ((($3)) + 12|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ((($3)) + 28|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ((($3)) + 44|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ((($3)) + 60|0);
 $138 = HEAP32[$137>>2]|0;
 HEAPF32[$0>>2] = $75;
 $$sroa$4$0$$sroa_idx187 = ((($0)) + 4|0);
 HEAPF32[$$sroa$4$0$$sroa_idx187>>2] = $95;
 $$sroa$5$0$$sroa_idx189 = ((($0)) + 8|0);
 HEAPF32[$$sroa$5$0$$sroa_idx189>>2] = $115;
 $$sroa$6$0$$sroa_idx191 = ((($0)) + 12|0);
 HEAP32[$$sroa$6$0$$sroa_idx191>>2] = $132;
 $$sroa$7$0$$sroa_idx193 = ((($0)) + 16|0);
 HEAPF32[$$sroa$7$0$$sroa_idx193>>2] = $80;
 $$sroa$8$0$$sroa_idx195 = ((($0)) + 20|0);
 HEAPF32[$$sroa$8$0$$sroa_idx195>>2] = $100;
 $$sroa$9$0$$sroa_idx197 = ((($0)) + 24|0);
 HEAPF32[$$sroa$9$0$$sroa_idx197>>2] = $120;
 $$sroa$10$0$$sroa_idx199 = ((($0)) + 28|0);
 HEAP32[$$sroa$10$0$$sroa_idx199>>2] = $134;
 $$sroa$11$0$$sroa_idx201 = ((($0)) + 32|0);
 HEAPF32[$$sroa$11$0$$sroa_idx201>>2] = $85;
 $$sroa$12$0$$sroa_idx203 = ((($0)) + 36|0);
 HEAPF32[$$sroa$12$0$$sroa_idx203>>2] = $105;
 $$sroa$13$0$$sroa_idx205 = ((($0)) + 40|0);
 HEAPF32[$$sroa$13$0$$sroa_idx205>>2] = $125;
 $$sroa$14$0$$sroa_idx207 = ((($0)) + 44|0);
 HEAP32[$$sroa$14$0$$sroa_idx207>>2] = $136;
 $$sroa$15$0$$sroa_idx209 = ((($0)) + 48|0);
 HEAPF32[$$sroa$15$0$$sroa_idx209>>2] = $90;
 $$sroa$16$0$$sroa_idx211 = ((($0)) + 52|0);
 HEAPF32[$$sroa$16$0$$sroa_idx211>>2] = $110;
 $$sroa$17$0$$sroa_idx213 = ((($0)) + 56|0);
 HEAPF32[$$sroa$17$0$$sroa_idx213>>2] = $130;
 $$sroa$18$0$$sroa_idx215 = ((($0)) + 60|0);
 HEAP32[$$sroa$18$0$$sroa_idx215>>2] = $138;
 STACKTOP = sp;return;
}
function _Vector3Length($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[$0>>2];
 $2 = $1 * $1;
 $3 = ((($0)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $4 * $4;
 $6 = $2 + $5;
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 * $8;
 $10 = $6 + $9;
 $11 = (+Math_sqrt((+$10)));
 return (+$11);
}
function _MatrixTranslate($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$sroa$10$0$$sroa_idx14 = 0, $$sroa$11$0$$sroa_idx16 = 0, $$sroa$12$0$$sroa_idx18 = 0, $$sroa$13$0$$sroa_idx20 = 0, $$sroa$14$0$$sroa_idx22 = 0, $$sroa$15$0$$sroa_idx24 = 0, $$sroa$16$0$$sroa_idx26 = 0, $$sroa$17$0$$sroa_idx28 = 0, $$sroa$18$0$$sroa_idx30 = 0, $$sroa$4$0$$sroa_idx2 = 0, $$sroa$5$0$$sroa_idx4 = 0, $$sroa$6$0$$sroa_idx6 = 0, $$sroa$7$0$$sroa_idx8 = 0, $$sroa$8$0$$sroa_idx10 = 0, $$sroa$9$0$$sroa_idx12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$0>>2] = 1.0;
 $$sroa$4$0$$sroa_idx2 = ((($0)) + 4|0);
 HEAPF32[$$sroa$4$0$$sroa_idx2>>2] = 0.0;
 $$sroa$5$0$$sroa_idx4 = ((($0)) + 8|0);
 HEAPF32[$$sroa$5$0$$sroa_idx4>>2] = 0.0;
 $$sroa$6$0$$sroa_idx6 = ((($0)) + 12|0);
 HEAPF32[$$sroa$6$0$$sroa_idx6>>2] = $1;
 $$sroa$7$0$$sroa_idx8 = ((($0)) + 16|0);
 HEAPF32[$$sroa$7$0$$sroa_idx8>>2] = 0.0;
 $$sroa$8$0$$sroa_idx10 = ((($0)) + 20|0);
 HEAPF32[$$sroa$8$0$$sroa_idx10>>2] = 1.0;
 $$sroa$9$0$$sroa_idx12 = ((($0)) + 24|0);
 HEAPF32[$$sroa$9$0$$sroa_idx12>>2] = 0.0;
 $$sroa$10$0$$sroa_idx14 = ((($0)) + 28|0);
 HEAPF32[$$sroa$10$0$$sroa_idx14>>2] = $2;
 $$sroa$11$0$$sroa_idx16 = ((($0)) + 32|0);
 HEAPF32[$$sroa$11$0$$sroa_idx16>>2] = 0.0;
 $$sroa$12$0$$sroa_idx18 = ((($0)) + 36|0);
 HEAPF32[$$sroa$12$0$$sroa_idx18>>2] = 0.0;
 $$sroa$13$0$$sroa_idx20 = ((($0)) + 40|0);
 HEAPF32[$$sroa$13$0$$sroa_idx20>>2] = 1.0;
 $$sroa$14$0$$sroa_idx22 = ((($0)) + 44|0);
 HEAPF32[$$sroa$14$0$$sroa_idx22>>2] = $3;
 $$sroa$15$0$$sroa_idx24 = ((($0)) + 48|0);
 HEAPF32[$$sroa$15$0$$sroa_idx24>>2] = 0.0;
 $$sroa$16$0$$sroa_idx26 = ((($0)) + 52|0);
 HEAPF32[$$sroa$16$0$$sroa_idx26>>2] = 0.0;
 $$sroa$17$0$$sroa_idx28 = ((($0)) + 56|0);
 HEAPF32[$$sroa$17$0$$sroa_idx28>>2] = 0.0;
 $$sroa$18$0$$sroa_idx30 = ((($0)) + 60|0);
 HEAPF32[$$sroa$18$0$$sroa_idx30>>2] = 1.0;
 return;
}
function _rlLoadIdentity() {
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $0 = sp;
 $1 = HEAP32[84550]|0;
 _MatrixIdentity($0);
 dest=$1; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _FormatText($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 (_vsprintf(340400,$0,$1)|0);
 STACKTOP = sp;return (340400|0);
}
function _MeasureText($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$byval_copy = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 72|0;
 $2 = sp + 40|0;
 $3 = sp + 8|0;
 $4 = sp;
 _GetDefaultFont($2);
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$sroa$0$0 = 0;
  STACKTOP = sp;return ($$sroa$0$0|0);
 }
 $7 = ($1|0)>(10);
 $$ = $7 ? $1 : 10;
 $8 = (($$>>>0) / 10)&-1;
 _GetDefaultFont($3);
 $9 = (+($$|0));
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$3+20>>2]|0;HEAP32[$$byval_copy+24>>2]=HEAP32[$3+24>>2]|0;HEAP32[$$byval_copy+28>>2]=HEAP32[$3+28>>2]|0;
 _MeasureTextEx($4,$$byval_copy,$0,$9,$8);
 $$sroa$0$0$copyload = +HEAPF32[$4>>2];
 $phitmp = (~~(($$sroa$0$0$copyload)));
 $$sroa$0$0 = $phitmp;
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function _MeasureTextEx($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $$0$lcssa = 0, $$05064 = 0, $$052$lcssa = 0.0, $$05263 = 0.0, $$05462 = 0, $$055$lcssa = 0.0, $$05561 = 0.0, $$058$lcssa = 0.0, $$05860 = 0.0, $$065 = 0, $$151 = 0, $$151$$0 = 0, $$153 = 0.0, $$156 = 0.0, $$159 = 0.0, $$2 = 0.0, $$257 = 0.0, $$3 = 0.0, $$byval_copy = 0, $$pn = 0.0;
 var $$pn$in = 0, $$sroa$4$0$$sroa_idx2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 $5 = (_strlen($2)|0);
 $6 = ((($1)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (+($7|0));
 $9 = $3 / $8;
 $10 = ($5|0)>(0);
 if (!($10)) {
  $$0$lcssa = -1;$$052$lcssa = 0.0;$$055$lcssa = 0.0;$$058$lcssa = $8;
  $12 = $$055$lcssa < $$052$lcssa;
  $$3 = $12 ? $$052$lcssa : $$055$lcssa;
  $13 = $9 * $$3;
  $14 = Math_imul($$0$lcssa, $4)|0;
  $15 = (+($14|0));
  $16 = $13 + $15;
  $17 = $9 * $$058$lcssa;
  HEAPF32[$0>>2] = $16;
  $$sroa$4$0$$sroa_idx2 = ((($0)) + 4|0);
  HEAPF32[$$sroa$4$0$$sroa_idx2>>2] = $17;
  STACKTOP = sp;return;
 }
 $11 = ((($1)) + 28|0);
 $$05064 = 0;$$05263 = 0.0;$$05462 = 0;$$05561 = 0.0;$$05860 = $8;$$065 = 0;
 while(1) {
  $18 = (($$05064) + 1)|0;
  $19 = (($2) + ($$05462)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = ($20<<24>>24)==(10);
  if ($21) {
   $33 = $$05561 < $$05263;
   $$156 = $33 ? $$05263 : $$05561;
   $34 = HEAP32[$6>>2]|0;
   $35 = (+($34|0));
   $36 = $35 * 1.5;
   $37 = $$05860 + $36;
   $$151 = 0;$$159 = $37;$$2 = 0.0;$$257 = $$156;
  } else {
   $22 = $20 << 24 >> 24;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$1+20>>2]|0;HEAP32[$$byval_copy+24>>2]=HEAP32[$1+24>>2]|0;HEAP32[$$byval_copy+28>>2]=HEAP32[$1+28>>2]|0;
   $23 = (_GetCharIndex($$byval_copy,$22)|0);
   $24 = HEAP32[$11>>2]|0;
   $25 = (((($24) + ($23<<5)|0)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = (((($24) + ($23<<5)|0)) + 20|0);
    $29 = (((($24) + ($23<<5)|0)) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = HEAP32[$28>>2]|0;
    $32 = (($31) + ($30))|0;
    $$pn$in = $32;
   } else {
    $$pn$in = $26;
   }
   $$pn = (+($$pn$in|0));
   $$153 = $$05263 + $$pn;
   $$151 = $18;$$159 = $$05860;$$2 = $$153;$$257 = $$05561;
  }
  $38 = ($$065|0)<($$151|0);
  $$151$$0 = $38 ? $$151 : $$065;
  $39 = (($$05462) + 1)|0;
  $exitcond = ($39|0)==($5|0);
  if ($exitcond) {
   break;
  } else {
   $$05064 = $$151;$$05263 = $$2;$$05462 = $39;$$05561 = $$257;$$05860 = $$159;$$065 = $$151$$0;
  }
 }
 $phitmp = (($$151$$0) + -1)|0;
 $$0$lcssa = $phitmp;$$052$lcssa = $$2;$$055$lcssa = $$257;$$058$lcssa = $$159;
 $12 = $$055$lcssa < $$052$lcssa;
 $$3 = $12 ? $$052$lcssa : $$055$lcssa;
 $13 = $9 * $$3;
 $14 = Math_imul($$0$lcssa, $4)|0;
 $15 = (+($14|0));
 $16 = $13 + $15;
 $17 = $9 * $$058$lcssa;
 HEAPF32[$0>>2] = $16;
 $$sroa$4$0$$sroa_idx2 = ((($0)) + 4|0);
 HEAPF32[$$sroa$4$0$$sroa_idx2>>2] = $17;
 STACKTOP = sp;return;
}
function _DrawFPS($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$sink = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = sp + 4|0;
 $3 = HEAP32[84556]|0;
 $4 = HEAP32[976]|0;
 $5 = ($3|0)<($4|0);
 if ($5) {
  $6 = (($3) + 1)|0;
  $$sink = $6;
 } else {
  $7 = (_GetFPS()|0);
  HEAP32[84557] = $7;
  HEAP32[976] = $7;
  $$sink = 0;
 }
 HEAP32[84556] = $$sink;
 $8 = HEAP32[84557]|0;
 HEAP32[$$byval_copy>>2] = $8;
 (_FormatText(13154,$$byval_copy)|0);
 HEAP8[$2>>0] = 0;
 $9 = ((($2)) + 1|0);
 HEAP8[$9>>0] = -98;
 $10 = ((($2)) + 2|0);
 HEAP8[$10>>0] = 47;
 $11 = ((($2)) + 3|0);
 HEAP8[$11>>0] = -1;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$2+3>>0]|0;
 _DrawText(340400,$0,$1,20,$$byval_copy);
 STACKTOP = sp;return;
}
function _GetFPS() {
 var $0 = 0.0, $1 = 0.0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_GetFrameTime());
 $1 = 1.0 / $0;
 $2 = (~~(($1)));
 return ($2|0);
}
function _GetFrameTime() {
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[3276];
 $1 = $0;
 return (+$1);
}
function _LoadTexture($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy1 = sp + 44|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $3 = sp + 4|0;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;
 _LoadImage($3,$1);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _TraceLog(1,13162,$vararg_buffer);
  ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$3+16>>2]|0;
  _LoadTextureFromImage($2,$$byval_copy1);
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$3+16>>2]|0;
  _UnloadImage($$byval_copy1);
  ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;
  STACKTOP = sp;return;
 }
}
function _rlGetVersion() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function _GetRandomValue($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ispos = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)>($1|0);
 $$ = $2 ? $0 : $1;
 $$10 = $2 ? $1 : $0;
 $3 = (_rand()|0);
 $4 = (($$) - ($$10))|0;
 $ispos = ($4|0)>(-1);
 $neg = (0 - ($4))|0;
 $5 = $ispos ? $4 : $neg;
 $6 = (($5) + 1)|0;
 $7 = (($3|0) % ($6|0))&-1;
 $8 = (($7) + ($$10))|0;
 return ($8|0);
}
function _DrawTextureRec($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos1 = 0, $neg = 0, $neg2 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy3 = sp + 88|0;
 $tmpcast$byval_copy = sp + 80|0;
 $$byval_copy2 = sp + 64|0;
 $$byval_copy1 = sp + 48|0;
 $$byval_copy = sp + 24|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = +HEAPF32[$2>>2];
 $7 = (~~(($6)));
 HEAP32[$4>>2] = $7;
 $8 = ((($4)) + 4|0);
 $9 = ((($2)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = (~~(($10)));
 HEAP32[$8>>2] = $11;
 $12 = ((($4)) + 8|0);
 $13 = ((($1)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $ispos = ($14|0)>(-1);
 $neg = (0 - ($14))|0;
 $15 = $ispos ? $14 : $neg;
 HEAP32[$12>>2] = $15;
 $16 = ((($4)) + 12|0);
 $17 = ((($1)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $ispos1 = ($18|0)>(-1);
 $neg2 = (0 - ($18))|0;
 $19 = $ispos1 ? $18 : $neg2;
 HEAP32[$16>>2] = $19;
 $20 = $5;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$4+12>>2]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$3+3>>0]|0;
 _DrawTexturePro($$byval_copy,$$byval_copy1,$$byval_copy2,$tmpcast$byval_copy,0.0,$$byval_copy3);
 STACKTOP = sp;return;
}
function _MatrixScale($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$sroa$5$0$$sroa_idx = 0, $$sroa$55$0$$sroa_idx6 = 0, $$sroa$6$0$$sroa_idx = 0, $$sroa$611$0$$sroa_idx12 = 0, $$sroa$7$0$$sroa_idx = 0, $$sroa$717$0$$sroa_idx18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$0>>2] = $1;
 $$sroa$5$0$$sroa_idx = ((($0)) + 4|0);
 ;HEAP32[$$sroa$5$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$5$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$5$0$$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$5$0$$sroa_idx+12>>2]=0|0;
 $$sroa$55$0$$sroa_idx6 = ((($0)) + 20|0);
 HEAPF32[$$sroa$55$0$$sroa_idx6>>2] = $2;
 $$sroa$6$0$$sroa_idx = ((($0)) + 24|0);
 ;HEAP32[$$sroa$6$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$6$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$6$0$$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$6$0$$sroa_idx+12>>2]=0|0;
 $$sroa$611$0$$sroa_idx12 = ((($0)) + 40|0);
 HEAPF32[$$sroa$611$0$$sroa_idx12>>2] = $3;
 $$sroa$7$0$$sroa_idx = ((($0)) + 44|0);
 ;HEAP32[$$sroa$7$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$7$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$7$0$$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$7$0$$sroa_idx+12>>2]=0|0;
 $$sroa$717$0$$sroa_idx18 = ((($0)) + 60|0);
 HEAPF32[$$sroa$717$0$$sroa_idx18>>2] = 1.0;
 return;
}
function _GetTextureDefault($0) {
 $0 = $0|0;
 var $$sroa$4$0$$sroa_idx2 = 0, $$sroa$5$0$$sroa_idx4 = 0, $$sroa$6$0$$sroa_idx6 = 0, $$sroa$7$0$$sroa_idx8 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[84106]|0;
 HEAP32[$0>>2] = $1;
 $$sroa$4$0$$sroa_idx2 = ((($0)) + 4|0);
 HEAP32[$$sroa$4$0$$sroa_idx2>>2] = 1;
 $$sroa$5$0$$sroa_idx4 = ((($0)) + 8|0);
 HEAP32[$$sroa$5$0$$sroa_idx4>>2] = 1;
 $$sroa$6$0$$sroa_idx6 = ((($0)) + 12|0);
 HEAP32[$$sroa$6$0$$sroa_idx6>>2] = 1;
 $$sroa$7$0$$sroa_idx8 = ((($0)) + 16|0);
 HEAP32[$$sroa$7$0$$sroa_idx8>>2] = 7;
 return;
}
function _UnloadShader($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 _rlDeleteShader($1);
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 _TraceLog(0,13191,$vararg_buffer);
 STACKTOP = sp;return;
}
function _rlDeleteShader($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 _glDeleteProgram(($0|0));
 return;
}
function _rlVertex2i($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+($0|0));
 $3 = (+($1|0));
 $4 = +HEAPF32[975];
 _rlVertex3f($2,$3,$4);
 return;
}
function _DrawRectangle($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy2 = sp + 32|0;
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 16|0;
 $5 = sp + 8|0;
 $6 = sp;
 $7 = (+($0|0));
 HEAPF32[$5>>2] = $7;
 $8 = ((($5)) + 4|0);
 $9 = (+($1|0));
 HEAPF32[$8>>2] = $9;
 $10 = (+($2|0));
 HEAPF32[$6>>2] = $10;
 $11 = ((($6)) + 4|0);
 $12 = (+($3|0));
 HEAPF32[$11>>2] = $12;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$6+4>>2]|0;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$4+3>>0]|0;
 _DrawRectangleV($$byval_copy,$$byval_copy1,$$byval_copy2);
 STACKTOP = sp;return;
}
function _DrawRectangleV($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = (_rlGetVersion()|0);
 $5 = ($4|0)==(1);
 if ($5) {
  _rlBegin(4);
  $6 = HEAP8[$2>>0]|0;
  $7 = ((($2)) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ((($2)) + 2|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($2)) + 3|0);
  $12 = HEAP8[$11>>0]|0;
  _rlColor4ub($6,$8,$10,$12);
  $13 = +HEAPF32[$0>>2];
  $14 = (~~(($13)));
  $15 = ((($0)) + 4|0);
  $16 = +HEAPF32[$15>>2];
  $17 = (~~(($16)));
  _rlVertex2i($14,$17);
  $18 = ((($1)) + 4|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $16 + $19;
  $21 = (~~(($20)));
  _rlVertex2i($14,$21);
  $22 = +HEAPF32[$0>>2];
  $23 = +HEAPF32[$1>>2];
  $24 = $22 + $23;
  $25 = (~~(($24)));
  $26 = +HEAPF32[$15>>2];
  $27 = +HEAPF32[$18>>2];
  $28 = $26 + $27;
  $29 = (~~(($28)));
  _rlVertex2i($25,$29);
  $30 = +HEAPF32[$0>>2];
  $31 = (~~(($30)));
  $32 = +HEAPF32[$15>>2];
  $33 = (~~(($32)));
  _rlVertex2i($31,$33);
  $34 = +HEAPF32[$1>>2];
  $35 = $30 + $34;
  $36 = (~~(($35)));
  $37 = +HEAPF32[$18>>2];
  $38 = $32 + $37;
  $39 = (~~(($38)));
  _rlVertex2i($36,$39);
  $40 = +HEAPF32[$0>>2];
  $41 = +HEAPF32[$1>>2];
  $42 = $40 + $41;
  $43 = (~~(($42)));
  $44 = +HEAPF32[$15>>2];
  $45 = (~~(($44)));
  _rlVertex2i($43,$45);
  _rlEnd();
  STACKTOP = sp;return;
 }
 $46 = (_rlGetVersion()|0);
 $47 = ($46|0)==(2);
 if (!($47)) {
  $48 = (_rlGetVersion()|0);
  $49 = ($48|0)==(3);
  if (!($49)) {
   $50 = (_rlGetVersion()|0);
   $51 = ($50|0)==(4);
   if (!($51)) {
    STACKTOP = sp;return;
   }
  }
 }
 _GetTextureDefault($3);
 $52 = HEAP32[$3>>2]|0;
 _rlEnableTexture($52);
 _rlBegin(7);
 $53 = HEAP8[$2>>0]|0;
 $54 = ((($2)) + 1|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = ((($2)) + 2|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = ((($2)) + 3|0);
 $59 = HEAP8[$58>>0]|0;
 _rlColor4ub($53,$55,$57,$59);
 _rlTexCoord2f(0.0,0.0);
 $60 = +HEAPF32[$0>>2];
 $61 = ((($0)) + 4|0);
 $62 = +HEAPF32[$61>>2];
 _rlVertex2f($60,$62);
 _rlTexCoord2f(0.0,1.0);
 $63 = ((($1)) + 4|0);
 $64 = +HEAPF32[$63>>2];
 $65 = $62 + $64;
 _rlVertex2f($60,$65);
 _rlTexCoord2f(1.0,1.0);
 $66 = +HEAPF32[$0>>2];
 $67 = +HEAPF32[$1>>2];
 $68 = $66 + $67;
 $69 = +HEAPF32[$61>>2];
 $70 = +HEAPF32[$63>>2];
 $71 = $69 + $70;
 _rlVertex2f($68,$71);
 _rlTexCoord2f(1.0,0.0);
 $72 = +HEAPF32[$0>>2];
 $73 = +HEAPF32[$1>>2];
 $74 = $72 + $73;
 $75 = +HEAPF32[$61>>2];
 _rlVertex2f($74,$75);
 _rlEnd();
 _rlDisableTexture();
 STACKTOP = sp;return;
}
function _CheckCollisionPointRec($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$0>>2];
 $3 = HEAP32[$1>>2]|0;
 $4 = (+($3|0));
 $5 = !($2 >= $4);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($3))|0;
 $9 = (+($8|0));
 $10 = !($2 <= $9);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ((($0)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($1)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($14|0));
 $16 = !($12 >= $15);
 if ($16) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = ((($1)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($14))|0;
 $20 = (+($19|0));
 $21 = !($12 <= $20);
 if ($21) {
  $$0 = 0;
  return ($$0|0);
 }
 $$0 = 1;
 return ($$0|0);
}
function _CheckCollisionRecs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$neg11 = 0, $$neg14 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos8 = 0, $neg = 0, $neg9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4|0) / 2)&-1;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8|0) / 2)&-1;
 $$neg11 = (($5) + ($2))|0;
 $10 = (($$neg11) - ($6))|0;
 $11 = (($10) - ($9))|0;
 $ispos = ($11|0)>(-1);
 $neg = (0 - ($11))|0;
 $12 = $ispos ? $11 : $neg;
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16|0) / 2)&-1;
 $18 = ((($1)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($1)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21|0) / 2)&-1;
 $$neg14 = (($17) + ($14))|0;
 $23 = (($$neg14) - ($19))|0;
 $24 = (($23) - ($22))|0;
 $25 = (($9) + ($5))|0;
 $26 = ($12|0)>($25|0);
 if ($26) {
  return 0;
 } else {
  $ispos8 = ($24|0)>(-1);
  $neg9 = (0 - ($24))|0;
  $27 = $ispos8 ? $24 : $neg9;
  $28 = (($22) + ($17))|0;
  $not$ = ($27|0)<=($28|0);
  $$ = $not$&1;
  return ($$|0);
 }
 return (0)|0;
}
function _CheckCollisionCircleRec($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $narrow = 0, $not$or$cond = 0, $notlhs = 0, $notrhs = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5|0) / 2)&-1;
 $7 = (($6) + ($3))|0;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($2)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11|0) / 2)&-1;
 $13 = (($12) + ($9))|0;
 $14 = +HEAPF32[$0>>2];
 $15 = (+($7|0));
 $16 = $14 - $15;
 $17 = (+Math_abs((+$16)));
 $18 = ((($0)) + 4|0);
 $19 = +HEAPF32[$18>>2];
 $20 = (+($13|0));
 $21 = $19 - $20;
 $22 = (+Math_abs((+$21)));
 $23 = (+($5|0));
 $24 = $23 * 0.5;
 $25 = $24 + $1;
 $26 = $17 > $25;
 if ($26) {
  return 0;
 }
 $27 = (+($11|0));
 $28 = $27 * 0.5;
 $29 = $28 + $1;
 $30 = $22 > $29;
 if ($30) {
  return 0;
 } else {
  $31 = $17 - $24;
  $32 = $31 * $31;
  $33 = $22 - $28;
  $34 = $33 * $33;
  $35 = $32 + $34;
  $36 = $1 * $1;
  $37 = $35 <= $36;
  $notlhs = $17 <= $24;
  $notrhs = $22 <= $28;
  $not$or$cond = $notlhs | $notrhs;
  $narrow = $not$or$cond | $37;
  $$ = $narrow&1;
  return ($$|0);
 }
 return (0)|0;
}
function _jar_xm_generate_samples_16bit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$015 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 << 1;
 $4 = $2 << 3;
 $5 = (_malloc($4)|0);
 _jar_xm_generate_samples($0,$5,$2);
 $6 = ($1|0)!=(0|0);
 $7 = ($3|0)!=(0);
 $or$cond = $6 & $7;
 if ($or$cond) {
  $$015 = 0;
 } else {
  _free($5);
  return;
 }
 while(1) {
  $8 = (($5) + ($$015<<2)|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $9 * 32767.0;
  $11 = (~~(($10)));
  $12 = (($1) + ($$015<<1)|0);
  HEAP16[$12>>1] = $11;
  $13 = (($$015) + 1)|0;
  $exitcond = ($13|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$015 = $13;
  }
 }
 _free($5);
 return;
}
function _jar_xm_generate_samples($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)!=(0|0);
 $4 = ($1|0)!=(0|0);
 $or$cond = $3 & $4;
 if (!($or$cond)) {
  return;
 }
 $5 = ((($0)) + 360|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_i64Add(($8|0),($11|0),($2|0),0)|0);
 $13 = tempRet0;
 $14 = $5;
 $15 = $14;
 HEAP32[$15>>2] = $12;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 $18 = ($2|0)==(0);
 if ($18) {
  return;
 } else {
  $$013 = 0;
 }
 while(1) {
  $19 = $$013 << 1;
  $20 = (($1) + ($19<<2)|0);
  $21 = $19 | 1;
  $22 = (($1) + ($21<<2)|0);
  _jar_xm_sample($0,$20,$22);
  $23 = (($$013) + 1)|0;
  $exitcond = ($23|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$013 = $23;
  }
 }
 return;
}
function _jar_xm_sample($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$072 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0;
 var $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 352|0);
 $4 = +HEAPF32[$3>>2];
 $5 = !($4 <= 0.0);
 if (!($5)) {
  _jar_xm_tick($0);
 }
 $6 = +HEAPF32[$3>>2];
 $7 = $6 + -1.0;
 HEAPF32[$3>>2] = $7;
 HEAPF32[$1>>2] = 0.0;
 HEAPF32[$2>>2] = 0.0;
 $8 = ((($0)) + 385|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if (!($10)) {
  $11 = ((($0)) + 384|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12&255)<($9&255);
  if (!($13)) {
   return;
  }
 }
 $14 = ((($0)) + 50|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ($15<<16>>16)==(0);
 if (!($16)) {
  $17 = ((($0)) + 388|0);
  $18 = ((($0)) + 340|0);
  $19 = ((($0)) + 344|0);
  $20 = ((($0)) + 344|0);
  $21 = ((($0)) + 340|0);
  $$072 = 0;$33 = 0;
  while(1) {
   $31 = HEAP32[$17>>2]|0;
   $32 = (($31) + (($33*304)|0)|0);
   $34 = (((($31) + (($33*304)|0)|0)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   do {
    if (!($36)) {
     $37 = (((($31) + (($33*304)|0)|0)) + 12|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==(0|0);
     if (!($39)) {
      $40 = (((($31) + (($33*304)|0)|0)) + 20|0);
      $41 = +HEAPF32[$40>>2];
      $42 = $41 < 0.0;
      if (!($42)) {
       $43 = (+_jar_xm_next_of_sample($32));
       $44 = (((($31) + (($33*304)|0)|0)) + 152|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ($45|0)==(0);
       if ($46) {
        $47 = HEAP32[$34>>2]|0;
        $48 = ((($47)) + 272|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = ($49|0)==(0);
        if ($50) {
         $51 = (((($31) + (($33*304)|0)|0)) + 300|0);
         $52 = +HEAPF32[$51>>2];
         $53 = $43 * $52;
         $54 = (((($31) + (($33*304)|0)|0)) + 296|0);
         $55 = +HEAPF32[$54>>2];
         $56 = 1.0 - $55;
         $57 = $53 * $56;
         $58 = +HEAPF32[$1>>2];
         $59 = $58 + $57;
         HEAPF32[$1>>2] = $59;
         $60 = +HEAPF32[$51>>2];
         $61 = $43 * $60;
         $62 = +HEAPF32[$54>>2];
         $63 = $61 * $62;
         $64 = +HEAPF32[$2>>2];
         $65 = $64 + $63;
         HEAPF32[$2>>2] = $65;
        }
       }
       $66 = (((($31) + (($33*304)|0)|0)) + 164|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($67) + 1)|0;
       HEAP32[$66>>2] = $68;
       $69 = (((($31) + (($33*304)|0)|0)) + 300|0);
       $70 = +HEAPF32[$69>>2];
       $71 = (((($31) + (($33*304)|0)|0)) + 160|0);
       $72 = +HEAPF32[$71>>2];
       $73 = $70 > $72;
       if ($73) {
        $74 = +HEAPF32[$18>>2];
        $75 = $70 - $74;
        HEAPF32[$69>>2] = $75;
        $76 = $75 < $72;
        if ($76) {
         HEAPF32[$69>>2] = $72;
        }
       } else {
        $77 = $70 < $72;
        if ($77) {
         $78 = +HEAPF32[$21>>2];
         $79 = $70 + $78;
         HEAPF32[$69>>2] = $79;
         $80 = $79 > $72;
         if ($80) {
          HEAPF32[$69>>2] = $72;
         }
        }
       }
       $81 = (((($31) + (($33*304)|0)|0)) + 296|0);
       $82 = +HEAPF32[$81>>2];
       $83 = (((($31) + (($33*304)|0)|0)) + 156|0);
       $84 = +HEAPF32[$83>>2];
       $85 = $82 > $84;
       if ($85) {
        $86 = +HEAPF32[$19>>2];
        $87 = $82 - $86;
        HEAPF32[$81>>2] = $87;
        $88 = $87 < $84;
        if (!($88)) {
         break;
        }
        HEAPF32[$81>>2] = $84;
        break;
       }
       $89 = $82 < $84;
       if ($89) {
        $90 = +HEAPF32[$20>>2];
        $91 = $82 + $90;
        HEAPF32[$81>>2] = $91;
        $92 = $91 > $84;
        if ($92) {
         HEAPF32[$81>>2] = $84;
        }
       }
      }
     }
    }
   } while(0);
   $93 = (($$072) + 1)<<24>>24;
   $94 = $93&255;
   $95 = HEAP16[$14>>1]|0;
   $96 = $95&65535;
   $97 = ($94>>>0)<($96>>>0);
   if ($97) {
    $$072 = $93;$33 = $94;
   } else {
    break;
   }
  }
 }
 $22 = ((($0)) + 332|0);
 $23 = +HEAPF32[$22>>2];
 $24 = ((($0)) + 336|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $23 * $25;
 $27 = +HEAPF32[$1>>2];
 $28 = $27 * $26;
 HEAPF32[$1>>2] = $28;
 $29 = +HEAPF32[$2>>2];
 $30 = $26 * $29;
 HEAPF32[$2>>2] = $30;
 return;
}
function _jar_xm_tick($0) {
 $0 = $0|0;
 var $$0 = 0.0, $$0195202 = 0, $$0196 = 0.0, $$1 = 0.0, $$not = 0, $$pr = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0;
 var $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0;
 var $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0;
 var $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge = 0.0, $storemerge198 = 0.0, $trunc = 0, $trunc$clear = 0, $trunc199 = 0, $trunc199$clear = 0, $trunc200 = 0, $trunc200$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 350|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  _jar_xm_row($0);
 }
 $4 = ((($0)) + 50|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(0);
 L4: do {
  if (!($6)) {
   $7 = ((($0)) + 388|0);
   $8 = ((($0)) + 328|0);
   $9 = ((($0)) + 332|0);
   $$0195202 = 0;$23 = 0;
   while(1) {
    $21 = HEAP32[$7>>2]|0;
    $22 = (($21) + (($23*304)|0)|0);
    _jar_xm_envelopes($22);
    _jar_xm_autovibrato($0,$22);
    $24 = (((($21) + (($23*304)|0)|0)) + 76|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0);
    do {
     if (!($26)) {
      $27 = (((($21) + (($23*304)|0)|0)) + 16|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ((($28)) + 3|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = ($30<<24>>24)==(0);
      if ($31) {
       $32 = ((($28)) + 4|0);
       $33 = HEAP8[$32>>0]|0;
       $34 = ($33<<24>>24)==(0);
       if (!($34)) {
        break;
       }
      }
      HEAP32[$24>>2] = 0;
      $35 = (((($21) + (($23*304)|0)|0)) + 80|0);
      HEAP8[$35>>0] = 0;
      _jar_xm_update_frequency($0,$22);
     }
    } while(0);
    $36 = (((($21) + (($23*304)|0)|0)) + 100|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0);
    if (!($38)) {
     $39 = (((($21) + (($23*304)|0)|0)) + 16|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($40)) + 3|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = ($42<<24>>24)==(4);
     if (!($43)) {
      $44 = ((($40)) + 4|0);
      $45 = HEAP8[$44>>0]|0;
      $46 = ($45<<24>>24)==(6);
      if (!($46)) {
       $47 = ((($40)) + 2|0);
       $48 = HEAP8[$47>>0]|0;
       $49 = $48 & -16;
       $50 = ($49<<24>>24)==(-80);
       if (!($50)) {
        $51 = (((($21) + (($23*304)|0)|0)) + 116|0);
        HEAP32[$36>>2] = 0;
        HEAPF32[$51>>2] = 0.0;
        _jar_xm_update_frequency($0,$22);
       }
      }
     }
    }
    $52 = (((($21) + (($23*304)|0)|0)) + 16|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($53)) + 2|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $trunc = ($55&255) >>> 4;
    $trunc$clear = $trunc & 15;
    switch ($trunc$clear<<24>>24) {
    case 6:  {
     $57 = HEAP16[$1>>1]|0;
     $58 = ($57<<16>>16)==(0);
     if (!($58)) {
      $59 = $56 & 15;
      $60 = $59&255;
      _jar_xm_volume_slide($22,$60);
     }
     break;
    }
    case 7:  {
     $61 = HEAP16[$1>>1]|0;
     $62 = ($61<<16>>16)==(0);
     if (!($62)) {
      $63 = $56 << 4;
      $64 = $63&255;
      _jar_xm_volume_slide($22,$64);
     }
     break;
    }
    case 11:  {
     $65 = HEAP16[$1>>1]|0;
     $66 = ($65<<16>>16)==(0);
     if (!($66)) {
      HEAP32[$36>>2] = 0;
      $67 = (((($21) + (($23*304)|0)|0)) + 112|0);
      $68 = HEAP8[$67>>0]|0;
      $69 = (((($21) + (($23*304)|0)|0)) + 114|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = (($70) + 1)<<16>>16;
      HEAP16[$69>>1] = $71;
      _jar_xm_vibrato($0,$22,$68,$70);
     }
     break;
    }
    case 13:  {
     $72 = HEAP16[$1>>1]|0;
     $73 = ($72<<16>>16)==(0);
     if (!($73)) {
      $74 = $56 & 15;
      $75 = $74&255;
      _jar_xm_panning_slide($22,$75);
     }
     break;
    }
    case 14:  {
     $76 = HEAP16[$1>>1]|0;
     $77 = ($76<<16>>16)==(0);
     if (!($77)) {
      $78 = $56 << 4;
      $79 = $78&255;
      _jar_xm_panning_slide($22,$79);
     }
     break;
    }
    case 15:  {
     $80 = HEAP16[$1>>1]|0;
     $81 = ($80<<16>>16)==(0);
     if (!($81)) {
      _jar_xm_tone_portamento($0,$22);
     }
     break;
    }
    default: {
    }
    }
    $82 = HEAP32[$52>>2]|0;
    $83 = ((($82)) + 3|0);
    $84 = HEAP8[$83>>0]|0;
    L34: do {
     switch ($84<<24>>24) {
     case 0:  {
      $85 = ((($82)) + 4|0);
      $86 = HEAP8[$85>>0]|0;
      $87 = ($86<<24>>24)==(0);
      if (!($87)) {
       $88 = HEAP16[$8>>1]|0;
       $89 = (($88&65535) % 3)&-1;
       $90 = $89&65535;
       $trunc200 = $89&255;
       $trunc200$clear = $trunc200 & 3;
       switch ($trunc200$clear<<24>>24) {
       case 2:  {
        $91 = HEAP16[$1>>1]|0;
        $92 = ($91<<16>>16)==(1);
        if ($92) {
         HEAP32[$24>>2] = 1;
         $93 = ($86&255) >>> 4;
         $94 = (((($21) + (($23*304)|0)|0)) + 80|0);
         HEAP8[$94>>0] = $93;
         _jar_xm_update_frequency($0,$22);
         break L34;
        } else {
         $96 = $91;
         label = 34;
        }
        break;
       }
       case 1:  {
        $$pr = HEAP16[$1>>1]|0;
        $96 = $$pr;
        label = 34;
        break;
       }
       case 0:  {
        break;
       }
       default: {
        break L34;
       }
       }
       if ((label|0) == 34) {
        label = 0;
        $95 = ($96<<16>>16)==(0);
        if ($95) {
         HEAP32[$24>>2] = 0;
         $97 = (((($21) + (($23*304)|0)|0)) + 80|0);
         HEAP8[$97>>0] = 0;
         _jar_xm_update_frequency($0,$22);
         break L34;
        }
       }
       $98 = HEAP32[$52>>2]|0;
       $99 = ((($98)) + 4|0);
       $100 = HEAP8[$99>>0]|0;
       $101 = HEAP16[$1>>1]|0;
       $102 = $101&65535;
       $103 = (($102) - ($90))|0;
       $104 = $103&65535;
       _jar_xm_arpeggio($0,$22,$100,$104);
      }
      break;
     }
     case 1:  {
      $105 = HEAP16[$1>>1]|0;
      $106 = ($105<<16>>16)==(0);
      if (!($106)) {
       $107 = (((($21) + (($23*304)|0)|0)) + 85|0);
       $108 = HEAP8[$107>>0]|0;
       $109 = $108&255;
       $110 = (0 - ($109))|0;
       $111 = (+($110|0));
       _jar_xm_pitch_slide($0,$22,$111);
      }
      break;
     }
     case 2:  {
      $112 = HEAP16[$1>>1]|0;
      $113 = ($112<<16>>16)==(0);
      if (!($113)) {
       $114 = (((($21) + (($23*304)|0)|0)) + 86|0);
       $115 = HEAP8[$114>>0]|0;
       $116 = (+($115&255));
       _jar_xm_pitch_slide($0,$22,$116);
      }
      break;
     }
     case 3:  {
      $117 = HEAP16[$1>>1]|0;
      $118 = ($117<<16>>16)==(0);
      if (!($118)) {
       _jar_xm_tone_portamento($0,$22);
      }
      break;
     }
     case 4:  {
      $119 = HEAP16[$1>>1]|0;
      $120 = ($119<<16>>16)==(0);
      if (!($120)) {
       HEAP32[$36>>2] = 1;
       $121 = (((($21) + (($23*304)|0)|0)) + 112|0);
       $122 = HEAP8[$121>>0]|0;
       $123 = (((($21) + (($23*304)|0)|0)) + 114|0);
       $124 = HEAP16[$123>>1]|0;
       $125 = (($124) + 1)<<16>>16;
       HEAP16[$123>>1] = $125;
       _jar_xm_vibrato($0,$22,$122,$124);
      }
      break;
     }
     case 5:  {
      $126 = HEAP16[$1>>1]|0;
      $127 = ($126<<16>>16)==(0);
      if (!($127)) {
       $128 = (((($21) + (($23*304)|0)|0)) + 81|0);
       _jar_xm_tone_portamento($0,$22);
       $129 = HEAP8[$128>>0]|0;
       _jar_xm_volume_slide($22,$129);
      }
      break;
     }
     case 6:  {
      $130 = HEAP16[$1>>1]|0;
      $131 = ($130<<16>>16)==(0);
      if (!($131)) {
       HEAP32[$36>>2] = 1;
       $132 = (((($21) + (($23*304)|0)|0)) + 112|0);
       $133 = HEAP8[$132>>0]|0;
       $134 = (((($21) + (($23*304)|0)|0)) + 114|0);
       $135 = HEAP16[$134>>1]|0;
       $136 = (($135) + 1)<<16>>16;
       HEAP16[$134>>1] = $136;
       _jar_xm_vibrato($0,$22,$133,$135);
       $137 = (((($21) + (($23*304)|0)|0)) + 81|0);
       $138 = HEAP8[$137>>0]|0;
       _jar_xm_volume_slide($22,$138);
      }
      break;
     }
     case 7:  {
      $139 = HEAP16[$1>>1]|0;
      $140 = ($139<<16>>16)==(0);
      if (!($140)) {
       $141 = (((($21) + (($23*304)|0)|0)) + 128|0);
       $142 = HEAP8[$141>>0]|0;
       $143 = (((($21) + (($23*304)|0)|0)) + 129|0);
       $144 = HEAP8[$143>>0]|0;
       $145 = (($144) + 1)<<24>>24;
       HEAP8[$143>>0] = $145;
       $146 = $144&255;
       _jar_xm_tremolo($22,$142,$146);
      }
      break;
     }
     case 10:  {
      $147 = HEAP16[$1>>1]|0;
      $148 = ($147<<16>>16)==(0);
      if (!($148)) {
       $149 = (((($21) + (($23*304)|0)|0)) + 81|0);
       $150 = HEAP8[$149>>0]|0;
       _jar_xm_volume_slide($22,$150);
      }
      break;
     }
     case 14:  {
      $151 = ((($82)) + 4|0);
      $152 = HEAP8[$151>>0]|0;
      $153 = $152&255;
      $trunc199 = ($152&255) >>> 4;
      $trunc199$clear = $trunc199 & 15;
      switch ($trunc199$clear<<24>>24) {
      case 9:  {
       $154 = HEAP16[$1>>1]|0;
       $155 = $154&65535;
       $156 = ($154<<16>>16)==(0);
       if ($156) {
        break L34;
       }
       $157 = $153 & 15;
       $158 = ($157|0)==(0);
       if ($158) {
        break L34;
       }
       $159 = (($155>>>0) % ($157>>>0))&-1;
       $160 = ($159|0)==(0);
       if (!($160)) {
        break L34;
       }
       _jar_xm_trigger_note($0,$22,0);
       _jar_xm_envelopes($22);
       break L34;
       break;
      }
      case 12:  {
       $161 = $153 & 15;
       $162 = HEAP16[$1>>1]|0;
       $163 = $162&65535;
       $164 = ($161|0)==($163|0);
       if (!($164)) {
        break L34;
       }
       _jar_xm_cut_note($22);
       break L34;
       break;
      }
      case 13:  {
       $165 = (((($21) + (($23*304)|0)|0)) + 97|0);
       $166 = HEAP8[$165>>0]|0;
       $167 = $166&255;
       $168 = HEAP16[$1>>1]|0;
       $169 = $168&65535;
       $170 = ($167|0)==($169|0);
       if (!($170)) {
        break L34;
       }
       _jar_xm_handle_note_and_instrument($0,$22,$82);
       _jar_xm_envelopes($22);
       break L34;
       break;
      }
      default: {
       break L34;
      }
      }
      break;
     }
     case 17:  {
      $171 = HEAP16[$1>>1]|0;
      $172 = ($171<<16>>16)==(0);
      if (!($172)) {
       $173 = (((($21) + (($23*304)|0)|0)) + 83|0);
       $174 = HEAP8[$173>>0]|0;
       $175 = $174&255;
       $176 = $175 & 240;
       $177 = ($176|0)!=(0);
       $$not = $177 ^ 1;
       $178 = $175 & 15;
       $179 = ($178|0)==(0);
       $or$cond = $179 | $$not;
       if ($or$cond) {
        $180 = +HEAPF32[$9>>2];
        if ($177) {
         $181 = $175 >>> 4;
         $182 = (+($181|0));
         $183 = $182 * 0.015625;
         $184 = $183 + $180;
         $185 = $184 > 1.0;
         $storemerge198 = $185 ? 1.0 : $184;
         HEAPF32[$9>>2] = $storemerge198;
         break L34;
        } else {
         $186 = (+($178|0));
         $187 = $186 * 0.015625;
         $188 = $180 - $187;
         $189 = $188 < 0.0;
         $storemerge = $189 ? 0.0 : $188;
         HEAPF32[$9>>2] = $storemerge;
         break L34;
        }
       }
      }
      break;
     }
     case 20:  {
      $190 = HEAP16[$1>>1]|0;
      $191 = $190&65535;
      $192 = ((($82)) + 4|0);
      $193 = HEAP8[$192>>0]|0;
      $194 = $193&255;
      $195 = ($191|0)==($194|0);
      if ($195) {
       _jar_xm_key_off($22);
      }
      break;
     }
     case 25:  {
      $196 = HEAP16[$1>>1]|0;
      $197 = ($196<<16>>16)==(0);
      if (!($197)) {
       $198 = (((($21) + (($23*304)|0)|0)) + 84|0);
       $199 = HEAP8[$198>>0]|0;
       _jar_xm_panning_slide($22,$199);
      }
      break;
     }
     case 27:  {
      $200 = HEAP16[$1>>1]|0;
      $201 = $200&65535;
      $202 = ($200<<16>>16)==(0);
      if (!($202)) {
       $203 = (((($21) + (($23*304)|0)|0)) + 96|0);
       $204 = HEAP8[$203>>0]|0;
       $205 = $204&255;
       $206 = $205 & 15;
       $207 = ($206|0)==(0);
       if (!($207)) {
        $208 = (($201>>>0) % ($206>>>0))&-1;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = (((($21) + (($23*304)|0)|0)) + 40|0);
         $211 = +HEAPF32[$210>>2];
         $212 = $205 >>> 4;
         $213 = (3908 + ($212<<2)|0);
         $214 = +HEAPF32[$213>>2];
         $215 = $211 * $214;
         $216 = (3972 + ($212<<2)|0);
         $217 = +HEAPF32[$216>>2];
         $218 = $215 + $217;
         $219 = $218 > 1.0;
         if ($219) {
          $$0196 = 1.0;
         } else {
          $220 = $218 < 0.0;
          if ($220) {
           $$0196 = 0.0;
          } else {
           $$0196 = $218;
          }
         }
         _jar_xm_trigger_note($0,$22,0);
         HEAPF32[$210>>2] = $$0196;
        }
       }
      }
      break;
     }
     case 29:  {
      $221 = HEAP16[$1>>1]|0;
      $222 = ($221<<16>>16)==(0);
      if (!($222)) {
       $223 = $221&65535;
       $224 = (($223) + -1)|0;
       $225 = (((($21) + (($23*304)|0)|0)) + 136|0);
       $226 = HEAP8[$225>>0]|0;
       $227 = $226&255;
       $228 = $227 >>> 4;
       $229 = $227 & 15;
       $230 = (($229) + 2)|0;
       $231 = (($230) + ($228))|0;
       $232 = (($224|0) % ($231|0))&-1;
       $233 = ($232|0)>($228|0);
       $234 = $233&1;
       $235 = (((($21) + (($23*304)|0)|0)) + 140|0);
       HEAP32[$235>>2] = $234;
      }
      break;
     }
     default: {
     }
     }
    } while(0);
    $236 = (((($21) + (($23*304)|0)|0)) + 44|0);
    $237 = +HEAPF32[$236>>2];
    $238 = (((($21) + (($23*304)|0)|0)) + 64|0);
    $239 = +HEAPF32[$238>>2];
    $240 = $239 + -0.5;
    $241 = $237 + -0.5;
    $242 = (+Math_abs((+$241)));
    $243 = 0.5 - $242;
    $244 = $240 * $243;
    $245 = $244 * 2.0;
    $246 = $237 + $245;
    $247 = (((($21) + (($23*304)|0)|0)) + 140|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $250 = (((($21) + (($23*304)|0)|0)) + 40|0);
     $251 = +HEAPF32[$250>>2];
     $252 = (((($21) + (($23*304)|0)|0)) + 132|0);
     $253 = +HEAPF32[$252>>2];
     $254 = $251 + $253;
     $255 = $254 > 1.0;
     if ($255) {
      $$0 = 1.0;
     } else {
      $256 = $254 < 0.0;
      if ($256) {
       $$0 = 0.0;
      } else {
       $$0 = $254;
      }
     }
     $257 = (((($21) + (($23*304)|0)|0)) + 56|0);
     $258 = +HEAPF32[$257>>2];
     $259 = (((($21) + (($23*304)|0)|0)) + 60|0);
     $260 = +HEAPF32[$259>>2];
     $261 = $258 * $260;
     $262 = $$0 * $261;
     $$1 = $262;
    } else {
     $$1 = 0.0;
    }
    $263 = (((($21) + (($23*304)|0)|0)) + 156|0);
    HEAPF32[$263>>2] = $246;
    $264 = (((($21) + (($23*304)|0)|0)) + 160|0);
    HEAPF32[$264>>2] = $$1;
    $265 = (($$0195202) + 1)<<24>>24;
    $266 = $265&255;
    $267 = HEAP16[$4>>1]|0;
    $268 = $267&65535;
    $269 = ($266>>>0)<($268>>>0);
    if ($269) {
     $$0195202 = $265;$23 = $266;
    } else {
     break L4;
    }
   }
  }
 } while(0);
 $10 = HEAP16[$1>>1]|0;
 $11 = (($10) + 1)<<16>>16;
 HEAP16[$1>>1] = $11;
 $12 = $11&65535;
 $13 = ((($0)) + 328|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = ((($0)) + 378|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = (($18) + ($15))|0;
 $20 = ($12>>>0)<($19>>>0);
 if ($20) {
  $270 = ((($0)) + 324|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = (+($271>>>0));
  $273 = ((($0)) + 330|0);
  $274 = HEAP16[$273>>1]|0;
  $275 = (+($274&65535));
  $276 = $275 * 0.40000000596046448;
  $277 = $272 / $276;
  $278 = ((($0)) + 352|0);
  $279 = +HEAPF32[$278>>2];
  $280 = $279 + $277;
  HEAPF32[$278>>2] = $280;
  return;
 }
 HEAP16[$1>>1] = 0;
 HEAP16[$16>>1] = 0;
 $270 = ((($0)) + 324|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = (+($271>>>0));
 $273 = ((($0)) + 330|0);
 $274 = HEAP16[$273>>1]|0;
 $275 = (+($274&65535));
 $276 = $275 * 0.40000000596046448;
 $277 = $272 / $276;
 $278 = ((($0)) + 352|0);
 $279 = +HEAPF32[$278>>2];
 $280 = $279 + $277;
 HEAPF32[$278>>2] = $280;
 return;
}
function _jar_xm_next_of_sample($0) {
 $0 = $0|0;
 var $$0100 = 0.0, $$0101 = 0.0, $$1 = 0.0, $$pr = 0.0, $$sink = 0.0, $$sink$p = 0.0, $$sink103 = 0, $$sink105 = 0, $$sink2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0;
 var $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0;
 var $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $storemerge106 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = ((($0)) + 20|0);
   $8 = +HEAPF32[$7>>2];
   $9 = $8 < 0.0;
   if (!($9)) {
    $20 = ((($5)) + 24|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0);
    if ($22) {
     $$1 = 0.0;
     return (+$$1);
    }
    $23 = (~~(($8))>>>0);
    $24 = (($23) + 1)|0;
    $25 = (+($23>>>0));
    $26 = $8 - $25;
    $27 = ((($5)) + 72|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($23<<2)|0);
    $30 = +HEAPF32[$29>>2];
    $31 = ((($5)) + 48|0);
    $32 = HEAP32[$31>>2]|0;
    L8: do {
     switch ($32|0) {
     case 0:  {
      $33 = ($24>>>0)<($21>>>0);
      if ($33) {
       $34 = (($28) + ($24<<2)|0);
       $35 = +HEAPF32[$34>>2];
       $135 = $35;
      } else {
       $135 = 0.0;
      }
      $36 = ((($0)) + 32|0);
      $37 = +HEAPF32[$36>>2];
      $38 = +HEAPF32[$7>>2];
      $39 = $37 + $38;
      HEAPF32[$7>>2] = $39;
      $40 = HEAP32[$4>>2]|0;
      $41 = ((($40)) + 24|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (+($42>>>0));
      $44 = !($39 >= $43);
      if ($44) {
       $$0100 = $30;$$0101 = $135;
      } else {
       HEAPF32[$7>>2] = -1.0;
       $$0100 = $30;$$0101 = $135;
      }
      break;
     }
     case 1:  {
      $45 = ((($5)) + 36|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($24|0)==($46|0);
      if ($47) {
       $48 = ((($5)) + 28|0);
       $49 = HEAP32[$48>>2]|0;
       $51 = $49;
      } else {
       $51 = $24;
      }
      $50 = (($28) + ($51<<2)|0);
      $52 = +HEAPF32[$50>>2];
      $53 = ((($0)) + 32|0);
      $54 = +HEAPF32[$53>>2];
      $55 = +HEAPF32[$7>>2];
      $56 = $54 + $55;
      HEAPF32[$7>>2] = $56;
      $57 = HEAP32[$4>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (+($59>>>0));
      $61 = !($56 >= $60);
      if ($61) {
       $$0100 = $30;$$0101 = $52;
      } else {
       $62 = HEAP32[$4>>2]|0;
       $63 = ((($62)) + 36|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = (+($64>>>0));
       $67 = $57;$storemerge106 = $56;
       while(1) {
        $66 = ((($67)) + 32|0);
        $68 = HEAP32[$66>>2]|0;
        $69 = (+($68>>>0));
        $70 = $storemerge106 - $69;
        $71 = !($70 >= $65);
        if ($71) {
         break;
        } else {
         $67 = $62;$storemerge106 = $70;
        }
       }
       HEAPF32[$7>>2] = $70;
       $$0100 = $30;$$0101 = $52;
      }
      break;
     }
     case 2:  {
      $72 = ((($0)) + 36|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)!=(0);
      $75 = ((($0)) + 32|0);
      $76 = +HEAPF32[$75>>2];
      $77 = -$76;
      $$sink$p = $74 ? $76 : $77;
      $$sink = $8 + $$sink$p;
      HEAPF32[$7>>2] = $$sink;
      if ($74) {
       $78 = HEAP32[$4>>2]|0;
       $79 = ((($78)) + 36|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = ($24>>>0)>=($80>>>0);
       $82 = ((($78)) + 72|0);
       $83 = HEAP32[$82>>2]|0;
       $$sink2 = $81 ? $23 : $24;
       $84 = (($83) + ($$sink2<<2)|0);
       $85 = +HEAPF32[$84>>2];
       $86 = (+($80>>>0));
       $87 = !($$sink >= $86);
       if (!($87)) {
        $88 = $80 << 1;
        $89 = (+($88>>>0));
        HEAP32[$72>>2] = 0;
        $90 = +HEAPF32[$7>>2];
        $91 = $89 - $90;
        HEAPF32[$7>>2] = $91;
       }
       $92 = +HEAPF32[$7>>2];
       $93 = ((($78)) + 24|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = (+($94>>>0));
       $96 = !($92 >= $95);
       if ($96) {
        $$0100 = $30;$$0101 = $85;
        break L8;
       }
       $97 = (($94) + -1)|0;
       $98 = (+($97>>>0));
       $99 = $92 - $98;
       HEAP32[$72>>2] = 0;
       HEAPF32[$7>>2] = $99;
       $$0100 = $30;$$0101 = $85;
       break L8;
      }
      $100 = ($23|0)==(0);
      if ($100) {
       label = 24;
      } else {
       $101 = (($23) + -1)|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ((($102)) + 28|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ($101>>>0)>($104>>>0);
       if ($105) {
        $$sink103 = $101;$$sink105 = $102;
       } else {
        label = 24;
       }
      }
      if ((label|0) == 24) {
       $106 = HEAP32[$4>>2]|0;
       $$sink103 = $23;$$sink105 = $106;
      }
      $107 = ((($$sink105)) + 72|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = (($108) + ($$sink103<<2)|0);
      $110 = +HEAPF32[$109>>2];
      $111 = +HEAPF32[$7>>2];
      $112 = HEAP32[$4>>2]|0;
      $113 = ((($112)) + 28|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = (+($114>>>0));
      $116 = !($111 <= $115);
      $117 = $114 << 1;
      $118 = (+($117>>>0));
      $119 = $118 - $111;
      if ($116) {
       $$pr = +HEAPF32[$7>>2];
       $121 = $$pr;
      } else {
       HEAP32[$72>>2] = 1;
       HEAPF32[$7>>2] = $119;
       $121 = $119;
      }
      $120 = !($121 <= 0.0);
      if ($120) {
       $$0100 = $110;$$0101 = $30;
      } else {
       HEAP32[$72>>2] = 1;
       HEAPF32[$7>>2] = 0.0;
       $$0100 = $110;$$0101 = $30;
      }
      break;
     }
     default: {
      $$0100 = $30;$$0101 = 0.0;
     }
     }
    } while(0);
    $122 = $$0101 - $$0100;
    $123 = $26 * $122;
    $124 = $$0100 + $123;
    $125 = ((($0)) + 164|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126>>>0)<(32);
    if (!($127)) {
     $$1 = $124;
     return (+$$1);
    }
    $128 = (+($126>>>0));
    $129 = $128 * 0.03125;
    $130 = (((($0)) + 168|0) + ($126<<2)|0);
    $131 = +HEAPF32[$130>>2];
    $132 = $124 - $131;
    $133 = $129 * $132;
    $134 = $131 + $133;
    $$1 = $134;
    return (+$$1);
   }
  }
 }
 $10 = ((($0)) + 164|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11>>>0)<(32);
 if (!($12)) {
  $$1 = 0.0;
  return (+$$1);
 }
 $13 = (+($11>>>0));
 $14 = $13 * 0.03125;
 $15 = (((($0)) + 168|0) + ($11<<2)|0);
 $16 = +HEAPF32[$15>>2];
 $17 = 0.0 - $16;
 $18 = $14 * $17;
 $19 = $16 + $18;
 $$1 = $19;
 return (+$$1);
}
function _jar_xm_row($0) {
 $0 = $0|0;
 var $$0$ = 0, $$06061 = 0, $$062 = 0, $$1 = 0, $$mask = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 368|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $11 = ((($0)) + 372|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if (!($13)) {
   $14 = ((($0)) + 348|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = (($15) + 1)<<24>>24;
   HEAP8[$14>>0] = $16;
   $17 = ((($0)) + 377|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ((($0)) + 349|0);
   HEAP8[$19>>0] = $18;
   HEAP32[$11>>2] = 0;
   HEAP8[$17>>0] = 0;
   _jar_xm_post_pattern_change($0);
  }
 } else {
  $4 = ((($0)) + 376|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ((($0)) + 348|0);
  HEAP8[$6>>0] = $5;
  $7 = ((($0)) + 377|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ((($0)) + 349|0);
  HEAP8[$9>>0] = $8;
  HEAP32[$1>>2] = 0;
  $10 = ((($0)) + 372|0);
  HEAP32[$10>>2] = 0;
  HEAP8[$7>>0] = 0;
  _jar_xm_post_pattern_change($0);
 }
 $20 = ((($0)) + 316|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($0)) + 348|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (((($0)) + 60|0) + ($24)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ((($0)) + 50|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = ($29<<16>>16)==(0);
 if ($30) {
  label = 15;
 } else {
  $31 = $29&65535;
  $32 = (((($21) + ($27<<3)|0)) + 4|0);
  $33 = ((($0)) + 349|0);
  $34 = ((($0)) + 388|0);
  $$06061 = 0;$$062 = 0;$40 = $31;$43 = 0;
  while(1) {
   $36 = HEAP32[$32>>2]|0;
   $37 = HEAP8[$33>>0]|0;
   $38 = $37&255;
   $39 = Math_imul($38, $40)|0;
   $41 = (($36) + (($39*5)|0)|0);
   $42 = (($41) + (($43*5)|0)|0);
   $44 = HEAP32[$34>>2]|0;
   $45 = (($44) + (($43*304)|0)|0);
   $46 = (((($44) + (($43*304)|0)|0)) + 16|0);
   HEAP32[$46>>2] = $42;
   $47 = ((($42)) + 3|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48<<24>>24)==(14);
   if ($49) {
    $50 = ((($42)) + 4|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $51&255;
    $$mask = $52 & 240;
    $53 = ($$mask|0)==(208);
    if ($53) {
     $54 = $52 & 15;
     $55 = $54&255;
     $56 = (((($44) + (($43*304)|0)|0)) + 97|0);
     HEAP8[$56>>0] = $55;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
   if ((label|0) == 10) {
    label = 0;
    _jar_xm_handle_note_and_instrument($0,$45,$42);
   }
   $57 = ($$062|0)==(0);
   if ($57) {
    $58 = (((($44) + (($43*304)|0)|0)) + 99|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = ($59<<24>>24)==(0);
    $$0$ = $60 ? $$062 : 1;
    $$1 = $$0$;
   } else {
    $$1 = $$062;
   }
   $61 = (($$06061) + 1)<<24>>24;
   $62 = $61&255;
   $63 = HEAP16[$28>>1]|0;
   $64 = $63&65535;
   $65 = ($62>>>0)<($64>>>0);
   if ($65) {
    $$06061 = $61;$$062 = $$1;$40 = $64;$43 = $62;
   } else {
    break;
   }
  }
  $35 = ($$1|0)==(0);
  if ($35) {
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $66 = ((($0)) + 380|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = HEAP8[$22>>0]|0;
  $69 = $68&255;
  $70 = $69 << 8;
  $71 = ((($0)) + 349|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $70 | $73;
  $75 = (($67) + ($74)|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = (($76) + 1)<<24>>24;
  HEAP8[$75>>0] = $77;
  $78 = ((($0)) + 384|0);
  HEAP8[$78>>0] = $76;
 }
 $79 = ((($0)) + 349|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = (($80) + 1)<<24>>24;
 HEAP8[$79>>0] = $81;
 $82 = HEAP32[$1>>2]|0;
 $83 = ($82|0)==(0);
 if (!($83)) {
  return;
 }
 $84 = ((($0)) + 372|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)==(0);
 if (!($86)) {
  return;
 }
 $87 = $81&255;
 $88 = (($21) + ($27<<3)|0);
 $89 = HEAP16[$88>>1]|0;
 $90 = $89&65535;
 $91 = ($87>>>0)>=($90>>>0);
 $92 = ($81<<24>>24)==(0);
 $or$cond = $92 | $91;
 if (!($or$cond)) {
  return;
 }
 $93 = HEAP8[$22>>0]|0;
 $94 = (($93) + 1)<<24>>24;
 HEAP8[$22>>0] = $94;
 $95 = ((($0)) + 377|0);
 $96 = HEAP8[$95>>0]|0;
 HEAP8[$79>>0] = $96;
 HEAP8[$95>>0] = 0;
 _jar_xm_post_pattern_change($0);
 return;
}
function _jar_xm_envelopes($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 176|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ((($0)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = ((($2)) + 260|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = (+($11&65535));
   $13 = $12 * 1.52587890625E-5;
   $14 = ((($0)) + 56|0);
   $15 = +HEAPF32[$14>>2];
   $16 = $15 - $13;
   HEAPF32[$14>>2] = $16;
   $17 = $16 < 0.0;
   if ($17) {
    HEAPF32[$14>>2] = 0.0;
   }
  }
  $18 = HEAP32[$1>>2]|0;
  $19 = ((($18)) + 124|0);
  $20 = ((($0)) + 68|0);
  $21 = ((($0)) + 60|0);
  _jar_xm_envelope_tick($0,$19,$20,$21);
 }
 $22 = HEAP32[$1>>2]|0;
 $23 = ((($22)) + 240|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  return;
 }
 $26 = ((($22)) + 188|0);
 $27 = ((($0)) + 70|0);
 $28 = ((($0)) + 64|0);
 _jar_xm_envelope_tick($0,$26,$27,$28);
 return;
}
function _jar_xm_autovibrato($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = ((($3)) + 257|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  return;
 }
 $8 = ((($1)) + 48|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ((($3)) + 256|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($10>>>0)<($13>>>0);
 $15 = (+($9&65535));
 $16 = (+($12&255));
 $17 = $15 / $16;
 $18 = $17 + 0.0;
 $$ = $14 ? $18 : 1.0;
 $19 = (($9) + 1)<<16>>16;
 HEAP16[$8>>1] = $19;
 $20 = ((($3)) + 258|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = Math_imul($22, $10)|0;
 $24 = $23 >>> 2;
 $25 = ((($3)) + 252|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $24&255;
 $28 = (+_jar_xm_waveform($26,$27));
 $29 = $28 * 0.25;
 $30 = HEAP8[$5>>0]|0;
 $31 = (+($30&255));
 $32 = $29 * $31;
 $33 = $32 / 15.0;
 $34 = $$ * $33;
 $35 = ((($1)) + 72|0);
 HEAPF32[$35>>2] = $34;
 _jar_xm_update_frequency($0,$1);
 return;
}
function _jar_xm_update_frequency($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 24|0);
 $3 = +HEAPF32[$2>>2];
 $4 = ((($1)) + 80|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $8 = ((($1)) + 116|0);
  $9 = +HEAPF32[$8>>2];
  $10 = ((($1)) + 72|0);
  $11 = +HEAPF32[$10>>2];
  $12 = $9 + $11;
  $13 = $12;
 } else {
  $7 = (+($5&255));
  $13 = $7;
 }
 $14 = (+_jar_xm_frequency($0,$3,$13));
 $15 = ((($1)) + 28|0);
 HEAPF32[$15>>2] = $14;
 $16 = ((($0)) + 324|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (+($17>>>0));
 $19 = $14 / $18;
 $20 = ((($1)) + 32|0);
 HEAPF32[$20>>2] = $19;
 return;
}
function _jar_xm_volume_slide($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$not = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1&255;
 $3 = $2 & 240;
 $4 = ($3|0)!=(0);
 $$not = $4 ^ 1;
 $5 = $2 & 15;
 $6 = ($5|0)==(0);
 $or$cond = $6 | $$not;
 if (!($or$cond)) {
  return;
 }
 $7 = ((($0)) + 40|0);
 $8 = +HEAPF32[$7>>2];
 if ($4) {
  $9 = $2 >>> 4;
  $10 = (+($9|0));
  $11 = $10 * 0.015625;
  $12 = $11 + $8;
  HEAPF32[$7>>2] = $12;
  $13 = $12 > 1.0;
  if (!($13)) {
   return;
  }
  HEAPF32[$7>>2] = 1.0;
  return;
 } else {
  $14 = (+($5|0));
  $15 = $14 * 0.015625;
  $16 = $8 - $15;
  HEAPF32[$7>>2] = $16;
  $17 = $16 < 0.0;
  if (!($17)) {
   return;
  }
  HEAPF32[$7>>2] = 0.0;
  return;
 }
}
function _jar_xm_vibrato($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3&65535;
 $5 = $2&255;
 $6 = $5 >>> 4;
 $7 = Math_imul($4, $6)|0;
 $8 = ((($1)) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $7&255;
 $11 = (+_jar_xm_waveform($9,$10));
 $12 = $11 * 2.0;
 $13 = $5 & 15;
 $14 = (+($13|0));
 $15 = $14 * $12;
 $16 = $15 / 15.0;
 $17 = ((($1)) + 116|0);
 HEAPF32[$17>>2] = $16;
 _jar_xm_update_frequency($0,$1);
 return;
}
function _jar_xm_panning_slide($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$not = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1&255;
 $3 = $2 & 240;
 $4 = ($3|0)!=(0);
 $$not = $4 ^ 1;
 $5 = $2 & 15;
 $6 = ($5|0)==(0);
 $or$cond = $6 | $$not;
 if (!($or$cond)) {
  return;
 }
 $7 = ((($0)) + 44|0);
 $8 = +HEAPF32[$7>>2];
 if ($4) {
  $9 = $2 >>> 4;
  $10 = (+($9|0));
  $11 = $10 / 255.0;
  $12 = $11 + $8;
  HEAPF32[$7>>2] = $12;
  $13 = $12 > 1.0;
  if (!($13)) {
   return;
  }
  HEAPF32[$7>>2] = 1.0;
  return;
 } else {
  $14 = (+($5|0));
  $15 = $14 / 255.0;
  $16 = $8 - $15;
  HEAPF32[$7>>2] = $16;
  $17 = $16 < 0.0;
  if (!($17)) {
   return;
  }
  HEAPF32[$7>>2] = 0.0;
  return;
 }
}
function _jar_xm_tone_portamento($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 92|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3 == 0.0;
 if ($4) {
  return;
 }
 $5 = ((($1)) + 24|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $6 != $3;
 if (!($7)) {
  return;
 }
 $8 = $6 > $3;
 if ($8) {
  $9 = ((($0)) + 56|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  $12 = $11 ? 4.0 : 1.0;
  $13 = ((($1)) + 91|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = (+($14&255));
  $16 = $12 * $15;
  $17 = $6 - $16;
  HEAPF32[$5>>2] = $17;
  $18 = $17 < $3;
  if ($18) {
   HEAPF32[$5>>2] = $3;
  }
 } else {
  $19 = $6 < $3;
  if ($19) {
   $20 = ((($0)) + 56|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0);
   $23 = $22 ? 4.0 : 1.0;
   $24 = ((($1)) + 91|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = (+($25&255));
   $27 = $23 * $26;
   $28 = $6 + $27;
   HEAPF32[$5>>2] = $28;
   $29 = $28 > $3;
   if ($29) {
    HEAPF32[$5>>2] = $3;
   }
  }
 }
 _jar_xm_update_frequency($0,$1);
 return;
}
function _jar_xm_arpeggio($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($3&65535) % 3)&-1;
 $trunc = $4&255;
 $trunc$clear = $trunc & 3;
 switch ($trunc$clear<<24>>24) {
 case 0:  {
  $5 = ((($1)) + 76|0);
  HEAP32[$5>>2] = 0;
  $$sink = 0;
  break;
 }
 case 2:  {
  $6 = ((($1)) + 76|0);
  HEAP32[$6>>2] = 1;
  $7 = ($2&255) >>> 4;
  $$sink = $7;
  break;
 }
 case 1:  {
  $8 = ((($1)) + 76|0);
  HEAP32[$8>>2] = 1;
  $9 = $2 & 15;
  $$sink = $9;
  break;
 }
 default: {
  _jar_xm_update_frequency($0,$1);
  return;
 }
 }
 $10 = ((($1)) + 80|0);
 HEAP8[$10>>0] = $$sink;
 _jar_xm_update_frequency($0,$1);
 return;
}
function _jar_xm_pitch_slide($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$ = 0.0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = $2 * 4.0;
 $$ = $5 ? $6 : $2;
 $7 = ((($1)) + 24|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 + $$;
 $10 = $9 < 0.0;
 $storemerge = $10 ? 0.0 : $9;
 HEAPF32[$7>>2] = $storemerge;
 _jar_xm_update_frequency($0,$1);
 return;
}
function _jar_xm_tremolo($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2&65535;
 $4 = $1&255;
 $5 = $4 >>> 4;
 $6 = Math_imul($3, $5)|0;
 $7 = ((($0)) + 120|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $6&255;
 $10 = (+_jar_xm_waveform($8,$9));
 $11 = $4 & 15;
 $12 = (+($11|0));
 $13 = $12 * $10;
 $14 = -$13;
 $15 = $14 / 15.0;
 $16 = ((($0)) + 132|0);
 HEAPF32[$16>>2] = $15;
 return;
}
function _jar_xm_trigger_note($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 & 4;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($1)) + 20|0);
  HEAPF32[$5>>2] = 0.0;
  $6 = ((($1)) + 36|0);
  HEAP32[$6>>2] = 1;
 }
 $7 = ((($1)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = $2 & 1;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = ((($8)) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($1)) + 40|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = ((($8)) + 52|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($1)) + 44|0);
  HEAP32[$17>>2] = $16;
 }
 $18 = ((($1)) + 52|0);
 HEAP32[$18>>2] = 1;
 $19 = ((($1)) + 60|0);
 HEAPF32[$19>>2] = 1.0;
 $20 = ((($1)) + 56|0);
 HEAPF32[$20>>2] = 1.0;
 $21 = ((($1)) + 64|0);
 HEAPF32[$21>>2] = 0.5;
 $22 = ((($1)) + 70|0);
 HEAP16[$22>>1] = 0;
 $23 = ((($1)) + 68|0);
 HEAP16[$23>>1] = 0;
 $24 = ((($1)) + 116|0);
 HEAPF32[$24>>2] = 0.0;
 $25 = ((($1)) + 132|0);
 HEAPF32[$25>>2] = 0.0;
 $26 = ((($1)) + 140|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($1)) + 48|0);
 HEAP16[$27>>1] = 0;
 $28 = ((($1)) + 108|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = ((($1)) + 114|0);
  HEAP16[$31>>1] = 0;
 }
 $32 = ((($1)) + 124|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 if (!($34)) {
  $35 = ((($1)) + 129|0);
  HEAP8[$35>>0] = 0;
 }
 $36 = $2 & 2;
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = +HEAPF32[$1>>2];
  $39 = (+_jar_xm_period($0,$38));
  $40 = ((($1)) + 24|0);
  HEAPF32[$40>>2] = $39;
  _jar_xm_update_frequency($0,$1);
 }
 $41 = ((($0)) + 360|0);
 $42 = $41;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($1)) + 144|0);
 $49 = $48;
 $50 = $49;
 HEAP32[$50>>2] = $44;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $47;
 $53 = ((($1)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0|0);
 if (!($55)) {
  $56 = ((($54)) + 264|0);
  $57 = $56;
  $58 = $57;
  HEAP32[$58>>2] = $44;
  $59 = (($57) + 4)|0;
  $60 = $59;
  HEAP32[$60>>2] = $47;
 }
 $61 = HEAP32[$7>>2]|0;
 $62 = ($61|0)==(0|0);
 if ($62) {
  return;
 }
 $63 = ((($61)) + 64|0);
 $64 = $63;
 $65 = $64;
 HEAP32[$65>>2] = $44;
 $66 = (($64) + 4)|0;
 $67 = $66;
 HEAP32[$67>>2] = $47;
 return;
}
function _jar_xm_cut_note($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 HEAPF32[$1>>2] = 0.0;
 return;
}
function _jar_xm_handle_note_and_instrument($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0275 = 0, $$lobit = 0, $$lobit262 = 0, $$mask = 0, $$mask265 = 0, $$mask266 = 0, $$off = 0, $$off273 = 0, $$off274 = 0, $$old1 = 0, $$sink = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $exitcond = 0, $or$cond = 0, $phitmp = 0.0, $phitmp260 = 0.0, $phitmp263 = 0.0, $phitmp264 = 0.0, $trunc = 0, $trunc$clear = 0, $trunc259 = 0, $trunc259$clear = 0, $trunc261 = 0, $trunc261$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if (!($5)) {
   $6 = ((($1)) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($7)) + 3|0);
   $9 = HEAP8[$8>>0]|0;
   switch ($9<<24>>24) {
   case 5: case 3:  {
    label = 4;
    break;
   }
   default: {
    $10 = ((($7)) + 2|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = ($11&255)>(239);
    if ($12) {
     label = 4;
    }
   }
   }
   if ((label|0) == 4) {
    $13 = ((($1)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = ((($1)) + 12|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(0|0);
     if (!($18)) {
      _jar_xm_trigger_note($0,$1,6);
      break;
     }
    }
   }
   $19 = HEAP8[$3>>0]|0;
   $20 = $19&255;
   $21 = ((($0)) + 54|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = $22&65535;
   $24 = ($20>>>0)>($23>>>0);
   if ($24) {
    _jar_xm_cut_note($1);
    $25 = ((($1)) + 8|0);
    HEAP32[$25>>2] = 0;
    $26 = ((($1)) + 12|0);
    HEAP32[$26>>2] = 0;
    break;
   }
   $27 = ((($0)) + 320|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($20) + -1)|0;
   $30 = (($28) + (($29*280)|0)|0);
   $31 = ((($1)) + 8|0);
   HEAP32[$31>>2] = $30;
   $32 = HEAP8[$2>>0]|0;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    $34 = ((($1)) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     _jar_xm_trigger_note($0,$1,4);
    }
   }
  }
 } while(0);
 $37 = HEAP8[$2>>0]|0;
 $$off = (($37) + -1)<<24>>24;
 $38 = ($$off&255)<(96);
 do {
  if ($38) {
   $39 = ((($1)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($1)) + 16|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 3|0);
   $44 = HEAP8[$43>>0]|0;
   $$old1 = ($40|0)!=(0|0);
   switch ($44<<24>>24) {
   case 5: case 3:  {
    if ($$old1) {
     label = 16;
    }
    break;
   }
   default: {
    $45 = ((($42)) + 2|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = ($46&255)>(239);
    $or$cond = $$old1 & $47;
    if ($or$cond) {
     label = 16;
    } else {
     $66 = ($40|0)==(0|0);
     if (!($66)) {
      label = 19;
     }
    }
   }
   }
   if ((label|0) == 16) {
    $48 = ((($1)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(0|0);
    if ($50) {
     label = 19;
    } else {
     $51 = HEAP8[$2>>0]|0;
     $52 = $51&255;
     $53 = ((($49)) + 56|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = (($55) + ($52))|0;
     $57 = (+($56|0));
     $58 = ((($49)) + 44|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = (+($59<<24>>24));
     $61 = $60 * 0.0078125;
     $62 = $57 + $61;
     $63 = $62 + -1.0;
     HEAPF32[$1>>2] = $63;
     $64 = (+_jar_xm_period($0,$63));
     $65 = ((($1)) + 92|0);
     HEAPF32[$65>>2] = $64;
     break;
    }
   }
   if ((label|0) == 19) {
    $67 = HEAP32[$39>>2]|0;
    $68 = ((($67)) + 24|0);
    $69 = HEAP16[$68>>1]|0;
    $70 = ($69<<16>>16)==(0);
    if (!($70)) {
     $71 = HEAP8[$2>>0]|0;
     $72 = $71&255;
     $73 = (($72) + -1)|0;
     $74 = (((($40)) + 26|0) + ($73)|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $75&255;
     $77 = ((($40)) + 24|0);
     $78 = HEAP16[$77>>1]|0;
     $79 = $78&65535;
     $80 = ($76>>>0)<($79>>>0);
     if ($80) {
      $$0275 = 0;
     } else {
      _jar_xm_cut_note($1);
      break;
     }
     while(1) {
      $106 = (+_jar_xm_next_of_sample($1));
      $107 = (((($1)) + 168|0) + ($$0275<<2)|0);
      HEAPF32[$107>>2] = $106;
      $108 = (($$0275) + 1)|0;
      $exitcond = ($108|0)==(32);
      if ($exitcond) {
       break;
      } else {
       $$0275 = $108;
      }
     }
     $81 = ((($1)) + 164|0);
     HEAP32[$81>>2] = 0;
     $82 = ((($40)) + 276|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = HEAP8[$2>>0]|0;
     $85 = $84&255;
     $86 = (($85) + -1)|0;
     $87 = (((($40)) + 26|0) + ($86)|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = $88&255;
     $90 = (($83) + (($89*80)|0)|0);
     $91 = ((($1)) + 12|0);
     HEAP32[$91>>2] = $90;
     $92 = (((($83) + (($89*80)|0)|0)) + 56|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = $93 << 24 >> 24;
     $95 = (($94) + ($85))|0;
     $96 = (+($95|0));
     $97 = (((($83) + (($89*80)|0)|0)) + 44|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = (+($98<<24>>24));
     $100 = $99 * 0.0078125;
     $101 = $96 + $100;
     $102 = $101 + -1.0;
     HEAPF32[$1>>2] = $102;
     $103 = ((($1)) + 4|0);
     HEAPF32[$103>>2] = $102;
     $104 = HEAP8[$3>>0]|0;
     $105 = ($104<<24>>24)==(0);
     if ($105) {
      _jar_xm_trigger_note($0,$1,1);
      break;
     } else {
      _jar_xm_trigger_note($0,$1,0);
      break;
     }
    }
   }
   _jar_xm_cut_note($1);
  } else {
   $109 = ($37<<24>>24)==(97);
   if ($109) {
    _jar_xm_key_off($1);
   }
  }
 } while(0);
 $110 = ((($2)) + 2|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $trunc = ($111&255) >>> 4;
 $trunc$clear = $trunc & 15;
 switch ($trunc$clear<<24>>24) {
 case 5:  {
  $113 = ($111&255)>(80);
  if (!($113)) {
   label = 31;
  }
  break;
 }
 case 4: case 3: case 2: case 1:  {
  label = 31;
  break;
 }
 case 8:  {
  $118 = $112 & 15;
  $119 = $118&255;
  _jar_xm_volume_slide($1,$119);
  break;
 }
 case 9:  {
  $120 = $112 << 4;
  $121 = $120&255;
  _jar_xm_volume_slide($1,$121);
  break;
 }
 case 10:  {
  $122 = ((($1)) + 112|0);
  $123 = HEAP8[$122>>0]|0;
  $124 = $123 & 15;
  $125 = $124&255;
  $126 = $112 << 4;
  $127 = $125 | $126;
  $128 = $127&255;
  HEAP8[$122>>0] = $128;
  break;
 }
 case 12:  {
  $129 = $112 & 15;
  $130 = $129 << 4;
  $131 = $130 | $129;
  $132 = (+($131|0));
  $133 = $132 / 255.0;
  $134 = ((($1)) + 44|0);
  HEAPF32[$134>>2] = $133;
  break;
 }
 case 15:  {
  $135 = $112 & 15;
  $136 = ($135|0)==(0);
  if (!($136)) {
   $137 = ((($1)) + 91|0);
   $138 = $112 << 4;
   $139 = $138 | $135;
   $140 = $139&255;
   HEAP8[$137>>0] = $140;
  }
  break;
 }
 default: {
 }
 }
 if ((label|0) == 31) {
  $114 = (($112) + -16)|0;
  $115 = (+($114|0));
  $116 = $115 * 0.015625;
  $117 = ((($1)) + 40|0);
  HEAPF32[$117>>2] = $116;
 }
 $141 = ((($2)) + 3|0);
 $142 = HEAP8[$141>>0]|0;
 do {
  switch ($142<<24>>24) {
  case 1:  {
   $143 = ((($2)) + 4|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = ($144<<24>>24)==(0);
   if ($145) {
    return;
   }
   $146 = ((($1)) + 85|0);
   HEAP8[$146>>0] = $144;
   return;
   break;
  }
  case 2:  {
   $147 = ((($2)) + 4|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = ($148<<24>>24)==(0);
   if ($149) {
    return;
   }
   $150 = ((($1)) + 86|0);
   HEAP8[$150>>0] = $148;
   return;
   break;
  }
  case 3:  {
   $151 = ((($2)) + 4|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = ($152<<24>>24)==(0);
   if ($153) {
    return;
   }
   $154 = ((($1)) + 91|0);
   HEAP8[$154>>0] = $152;
   return;
   break;
  }
  case 4:  {
   $155 = ((($2)) + 4|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = $157 & 15;
   $159 = ($158|0)==(0);
   if (!($159)) {
    $160 = ((($1)) + 112|0);
    $161 = HEAP8[$160>>0]|0;
    $162 = $161 & -16;
    $163 = $162&255;
    $164 = $163 | $158;
    $165 = $164&255;
    HEAP8[$160>>0] = $165;
   }
   $$mask266 = $157 & 240;
   $166 = ($$mask266|0)==(0);
   if ($166) {
    return;
   }
   $167 = ((($1)) + 112|0);
   $168 = HEAP8[$167>>0]|0;
   $169 = $168 & 15;
   $170 = $169&255;
   $171 = $170 | $$mask266;
   $172 = $171&255;
   HEAP8[$167>>0] = $172;
   return;
   break;
  }
  case 5:  {
   $173 = ((($2)) + 4|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = ($174<<24>>24)==(0);
   if ($175) {
    return;
   }
   $176 = ((($1)) + 81|0);
   HEAP8[$176>>0] = $174;
   return;
   break;
  }
  case 6:  {
   $177 = ((($2)) + 4|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = ($178<<24>>24)==(0);
   if ($179) {
    return;
   }
   $180 = ((($1)) + 81|0);
   HEAP8[$180>>0] = $178;
   return;
   break;
  }
  case 7:  {
   $181 = ((($2)) + 4|0);
   $182 = HEAP8[$181>>0]|0;
   $183 = $182&255;
   $184 = $183 & 15;
   $185 = ($184|0)==(0);
   if (!($185)) {
    $186 = ((($1)) + 128|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187 & -16;
    $189 = $188&255;
    $190 = $189 | $184;
    $191 = $190&255;
    HEAP8[$186>>0] = $191;
   }
   $$mask265 = $183 & 240;
   $192 = ($$mask265|0)==(0);
   if ($192) {
    return;
   }
   $193 = ((($1)) + 128|0);
   $194 = HEAP8[$193>>0]|0;
   $195 = $194 & 15;
   $196 = $195&255;
   $197 = $196 | $$mask265;
   $198 = $197&255;
   HEAP8[$193>>0] = $198;
   return;
   break;
  }
  case 8:  {
   $199 = ((($2)) + 4|0);
   $200 = HEAP8[$199>>0]|0;
   $201 = (+($200&255));
   $202 = $201 / 255.0;
   $203 = ((($1)) + 44|0);
   HEAPF32[$203>>2] = $202;
   return;
   break;
  }
  case 9:  {
   $204 = ((($1)) + 12|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = ($205|0)==(0|0);
   if ($206) {
    return;
   }
   $207 = HEAP8[$2>>0]|0;
   $$off274 = (($207) + -1)<<24>>24;
   $208 = ($$off274&255)<(96);
   if (!($208)) {
    return;
   }
   $209 = ((($2)) + 4|0);
   $210 = HEAP8[$209>>0]|0;
   $211 = $210&255;
   $212 = ((($205)) + 23|0);
   $213 = HEAP8[$212>>0]|0;
   $214 = ($213<<24>>24)==(16);
   $215 = $214 ? 7 : 8;
   $216 = $211 << $215;
   $217 = ((($205)) + 24|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = ($216>>>0)<($218>>>0);
   if ($219) {
    $221 = (+($216>>>0));
    $222 = ((($1)) + 20|0);
    HEAPF32[$222>>2] = $221;
    return;
   } else {
    $220 = ((($1)) + 20|0);
    HEAPF32[$220>>2] = -1.0;
    return;
   }
   break;
  }
  case 10:  {
   $223 = ((($2)) + 4|0);
   $224 = HEAP8[$223>>0]|0;
   $225 = ($224<<24>>24)==(0);
   if ($225) {
    return;
   }
   $226 = ((($1)) + 81|0);
   HEAP8[$226>>0] = $224;
   return;
   break;
  }
  case 11:  {
   $227 = ((($2)) + 4|0);
   $228 = HEAP8[$227>>0]|0;
   $229 = $228&255;
   $230 = ((($0)) + 46|0);
   $231 = HEAP16[$230>>1]|0;
   $232 = $231&65535;
   $233 = ($229>>>0)<($232>>>0);
   if (!($233)) {
    return;
   }
   $234 = ((($0)) + 368|0);
   HEAP32[$234>>2] = 1;
   $235 = ((($0)) + 376|0);
   HEAP8[$235>>0] = $228;
   return;
   break;
  }
  case 12:  {
   $236 = ((($2)) + 4|0);
   $237 = HEAP8[$236>>0]|0;
   $238 = ($237&255)>(64);
   $phitmp263 = (+($237&255));
   $phitmp264 = $phitmp263 * 0.015625;
   $239 = $238 ? 1.0 : $phitmp264;
   $240 = ((($1)) + 40|0);
   HEAPF32[$240>>2] = $239;
   return;
   break;
  }
  case 13:  {
   $241 = ((($0)) + 372|0);
   HEAP32[$241>>2] = 1;
   $242 = ((($2)) + 4|0);
   $243 = HEAP8[$242>>0]|0;
   $244 = $243&255;
   $245 = $244 >>> 4;
   $246 = ($245*10)|0;
   $247 = $244 & 15;
   $248 = (($246) + ($247))|0;
   $249 = $248&255;
   $250 = ((($0)) + 377|0);
   HEAP8[$250>>0] = $249;
   return;
   break;
  }
  case 14:  {
   $251 = ((($2)) + 4|0);
   $252 = HEAP8[$251>>0]|0;
   $253 = $252&255;
   $trunc261 = ($252&255) >>> 4;
   $trunc261$clear = $trunc261 & 15;
   do {
    switch ($trunc261$clear<<24>>24) {
    case 1:  {
     $254 = $253 & 15;
     $255 = ($254|0)==(0);
     if (!($255)) {
      $256 = $254&255;
      $257 = ((($1)) + 87|0);
      HEAP8[$257>>0] = $256;
     }
     $258 = ((($1)) + 87|0);
     $259 = HEAP8[$258>>0]|0;
     $260 = $259&255;
     $261 = (0 - ($260))|0;
     $262 = (+($261|0));
     _jar_xm_pitch_slide($0,$1,$262);
     return;
     break;
    }
    case 2:  {
     $263 = $253 & 15;
     $264 = ($263|0)==(0);
     if (!($264)) {
      $265 = $263&255;
      $266 = ((($1)) + 88|0);
      HEAP8[$266>>0] = $265;
     }
     $267 = ((($1)) + 88|0);
     $268 = HEAP8[$267>>0]|0;
     $269 = (+($268&255));
     _jar_xm_pitch_slide($0,$1,$269);
     return;
     break;
    }
    case 4:  {
     $270 = $253 & 3;
     $271 = ((($1)) + 104|0);
     HEAP32[$271>>2] = $270;
     $272 = $253 >>> 2;
     $$lobit262 = $272 & 1;
     $273 = $$lobit262 ^ 1;
     $274 = ((($1)) + 108|0);
     HEAP32[$274>>2] = $273;
     return;
     break;
    }
    case 5:  {
     $275 = ((($1)) + 16|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = HEAP8[$276>>0]|0;
     $278 = $277&255;
     $$off273 = (($277) + -1)<<24>>24;
     $279 = ($$off273&255)<(96);
     if (!($279)) {
      return;
     }
     $280 = ((($1)) + 12|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = ($281|0)==(0|0);
     if ($282) {
      return;
     }
     $283 = ((($281)) + 56|0);
     $284 = HEAP8[$283>>0]|0;
     $285 = $284 << 24 >> 24;
     $286 = (($285) + ($278))|0;
     $287 = (+($286|0));
     $288 = $253 << 4;
     $289 = $288 & 240;
     $290 = (($289) + -128)|0;
     $291 = (+($290|0));
     $292 = $291 * 0.0078125;
     $293 = $292 + $287;
     $294 = $293 + -1.0;
     HEAPF32[$1>>2] = $294;
     $295 = (+_jar_xm_period($0,$294));
     $296 = ((($1)) + 24|0);
     HEAPF32[$296>>2] = $295;
     _jar_xm_update_frequency($0,$1);
     return;
     break;
    }
    case 6:  {
     $297 = $253 & 15;
     $298 = ($297|0)==(0);
     if ($298) {
      $311 = ((($0)) + 349|0);
      $312 = HEAP8[$311>>0]|0;
      $313 = ((($1)) + 98|0);
      HEAP8[$313>>0] = $312;
      $314 = ((($0)) + 377|0);
      HEAP8[$314>>0] = $312;
      return;
     }
     $299 = ((($1)) + 99|0);
     $300 = HEAP8[$299>>0]|0;
     $301 = $300&255;
     $302 = ($297|0)==($301|0);
     if ($302) {
      HEAP8[$299>>0] = 0;
      return;
     } else {
      $303 = (($300) + 1)<<24>>24;
      HEAP8[$299>>0] = $303;
      $304 = ((($0)) + 368|0);
      HEAP32[$304>>2] = 1;
      $305 = ((($1)) + 98|0);
      $306 = HEAP8[$305>>0]|0;
      $307 = ((($0)) + 377|0);
      HEAP8[$307>>0] = $306;
      $308 = ((($0)) + 348|0);
      $309 = HEAP8[$308>>0]|0;
      $310 = ((($0)) + 376|0);
      HEAP8[$310>>0] = $309;
      return;
     }
     break;
    }
    case 7:  {
     $315 = $253 & 3;
     $316 = ((($1)) + 120|0);
     HEAP32[$316>>2] = $315;
     $317 = $253 >>> 2;
     $$lobit = $317 & 1;
     $318 = $$lobit ^ 1;
     $319 = ((($1)) + 124|0);
     HEAP32[$319>>2] = $318;
     return;
     break;
    }
    case 10:  {
     $320 = $253 & 15;
     $321 = ($320|0)==(0);
     if (!($321)) {
      $322 = $320&255;
      $323 = ((($1)) + 82|0);
      HEAP8[$323>>0] = $322;
     }
     $324 = ((($1)) + 82|0);
     $325 = HEAP8[$324>>0]|0;
     $326 = $325&255;
     $327 = $326 << 4;
     $328 = $327&255;
     _jar_xm_volume_slide($1,$328);
     return;
     break;
    }
    case 11:  {
     $329 = $253 & 15;
     $330 = ($329|0)==(0);
     if (!($330)) {
      $331 = $329&255;
      $332 = ((($1)) + 82|0);
      HEAP8[$332>>0] = $331;
     }
     $333 = ((($1)) + 82|0);
     $334 = HEAP8[$333>>0]|0;
     _jar_xm_volume_slide($1,$334);
     return;
     break;
    }
    case 13:  {
     $335 = HEAP8[$2>>0]|0;
     $336 = ($335<<24>>24)==(0);
     if (!($336)) {
      return;
     }
     $337 = HEAP8[$3>>0]|0;
     $338 = ($337<<24>>24)==(0);
     if (!($338)) {
      return;
     }
     $339 = ((($1)) + 16|0);
     $340 = HEAP32[$339>>2]|0;
     $341 = ((($340)) + 4|0);
     $342 = HEAP8[$341>>0]|0;
     $343 = $342 & 15;
     $344 = ($343<<24>>24)==(0);
     if ($344) {
      _jar_xm_trigger_note($0,$1,7);
      return;
     } else {
      $345 = ((($1)) + 4|0);
      $346 = HEAP32[$345>>2]|0;
      HEAP32[$1>>2] = $346;
      _jar_xm_trigger_note($0,$1,1);
      return;
     }
     break;
    }
    case 14:  {
     $347 = ((($1)) + 16|0);
     $348 = HEAP32[$347>>2]|0;
     $349 = ((($348)) + 4|0);
     $350 = HEAP8[$349>>0]|0;
     $351 = $350 & 15;
     $352 = $351&255;
     $353 = ((($0)) + 328|0);
     $354 = HEAP16[$353>>1]|0;
     $355 = $354&65535;
     $356 = Math_imul($352, $355)|0;
     $357 = $356&65535;
     $358 = ((($0)) + 378|0);
     HEAP16[$358>>1] = $357;
     return;
     break;
    }
    default: {
     return;
    }
    }
   } while(0);
   break;
  }
  case 15:  {
   $359 = ((($2)) + 4|0);
   $360 = HEAP8[$359>>0]|0;
   $361 = ($360<<24>>24)==(0);
   if ($361) {
    return;
   }
   $362 = ($360&255)<(32);
   $363 = $360&255;
   if ($362) {
    $364 = ((($0)) + 328|0);
    HEAP16[$364>>1] = $363;
    return;
   } else {
    $365 = ((($0)) + 330|0);
    HEAP16[$365>>1] = $363;
    return;
   }
   break;
  }
  case 16:  {
   $366 = ((($2)) + 4|0);
   $367 = HEAP8[$366>>0]|0;
   $368 = ($367&255)>(64);
   $phitmp = (+($367&255));
   $phitmp260 = $phitmp * 0.015625;
   $369 = $368 ? 1.0 : $phitmp260;
   $370 = ((($0)) + 332|0);
   HEAPF32[$370>>2] = $369;
   return;
   break;
  }
  case 17:  {
   $371 = ((($2)) + 4|0);
   $372 = HEAP8[$371>>0]|0;
   $373 = ($372<<24>>24)==(0);
   if ($373) {
    return;
   }
   $374 = ((($1)) + 83|0);
   HEAP8[$374>>0] = $372;
   return;
   break;
  }
  case 21:  {
   $375 = ((($2)) + 4|0);
   $376 = HEAP8[$375>>0]|0;
   $377 = $376&255;
   $378 = ((($1)) + 68|0);
   HEAP16[$378>>1] = $377;
   $379 = ((($1)) + 70|0);
   HEAP16[$379>>1] = $377;
   return;
   break;
  }
  case 25:  {
   $380 = ((($2)) + 4|0);
   $381 = HEAP8[$380>>0]|0;
   $382 = ($381<<24>>24)==(0);
   if ($382) {
    return;
   }
   $383 = ((($1)) + 84|0);
   HEAP8[$383>>0] = $381;
   return;
   break;
  }
  case 27:  {
   $384 = ((($2)) + 4|0);
   $385 = HEAP8[$384>>0]|0;
   $386 = $385&255;
   $387 = ($385<<24>>24)==(0);
   if ($387) {
    return;
   }
   $$mask = $386 & 240;
   $388 = ($$mask|0)==(0);
   if ($388) {
    $389 = ((($1)) + 96|0);
    $390 = HEAP8[$389>>0]|0;
    $391 = $390 & -16;
    $392 = $391&255;
    $393 = $386 & 15;
    $394 = $392 | $393;
    $395 = $394&255;
    $$sink = $395;
   } else {
    $$sink = $385;
   }
   $396 = ((($1)) + 96|0);
   HEAP8[$396>>0] = $$sink;
   return;
   break;
  }
  case 29:  {
   $397 = ((($2)) + 4|0);
   $398 = HEAP8[$397>>0]|0;
   $399 = ($398<<24>>24)==(0);
   if ($399) {
    return;
   }
   $400 = ((($1)) + 136|0);
   HEAP8[$400>>0] = $398;
   return;
   break;
  }
  case 33:  {
   $401 = ((($2)) + 4|0);
   $402 = HEAP8[$401>>0]|0;
   $403 = $402&255;
   $trunc259 = ($402&255) >>> 4;
   $trunc259$clear = $trunc259 & 15;
   switch ($trunc259$clear<<24>>24) {
   case 1:  {
    $404 = $403 & 15;
    $405 = ($404|0)==(0);
    if (!($405)) {
     $406 = $404&255;
     $407 = ((($1)) + 89|0);
     HEAP8[$407>>0] = $406;
    }
    $408 = ((($1)) + 89|0);
    $409 = HEAP8[$408>>0]|0;
    $410 = (+($409&255));
    $411 = -$410;
    _jar_xm_pitch_slide($0,$1,$411);
    return;
    break;
   }
   case 2:  {
    $412 = $403 & 15;
    $413 = ($412|0)==(0);
    if (!($413)) {
     $414 = $412&255;
     $415 = ((($1)) + 90|0);
     HEAP8[$415>>0] = $414;
    }
    $416 = ((($1)) + 90|0);
    $417 = HEAP8[$416>>0]|0;
    $418 = (+($417&255));
    _jar_xm_pitch_slide($0,$1,$418);
    return;
    break;
   }
   default: {
    return;
   }
   }
   break;
  }
  default: {
   return;
  }
  }
 } while(0);
}
function _jar_xm_key_off($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($3)) + 176|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   return;
  }
 }
 _jar_xm_cut_note($0);
 return;
}
function _jar_xm_period($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 0:  {
  $4 = (+_jar_xm_linear_period($1));
  $$0 = $4;
  break;
 }
 case 1:  {
  $5 = (+_jar_xm_amiga_period($1));
  $$0 = $5;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 return (+$$0);
}
function _jar_xm_linear_period($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 * 64.0;
 $2 = 7680.0 - $1;
 return (+$2);
}
function _jar_xm_amiga_period($0) {
 $0 = +$0;
 var $$0 = 0, $$023 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (~~(($0))>>>0);
 $2 = (($1>>>0) % 12)&-1;
 $3 = $0 / 12.0;
 $4 = $3 + -2.0;
 $5 = (~~(($4)));
 $6 = (5976 + ($2<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = (($2) + 1)|0;
 $9 = (5976 + ($8<<1)|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $5 << 24 >> 24;
 $12 = ($5<<24>>24)>(0);
 if ($12) {
  $13 = $7&65535;
  $14 = $13 >>> $11;
  $15 = $14&65535;
  $16 = $10&65535;
  $17 = $16 >>> $11;
  $18 = $17&65535;
  $$0 = $18;$$023 = $15;
 } else {
  $19 = ($5<<24>>24)<(0);
  $20 = (0 - ($11))|0;
  if ($19) {
   $21 = $10&65535;
   $22 = $21 << $20;
   $23 = $7&65535;
   $24 = $23 << $20;
   $25 = $24&65535;
   $26 = $22&65535;
   $$0 = $26;$$023 = $25;
  } else {
   $$0 = $10;$$023 = $7;
  }
 }
 $27 = $$023&65535;
 $28 = (+($$023&65535));
 $29 = (+($1>>>0));
 $30 = $0 - $29;
 $31 = $$0&65535;
 $32 = (($31) - ($27))|0;
 $33 = (+($32|0));
 $34 = $30 * $33;
 $35 = $28 + $34;
 return (+$35);
}
function _jar_xm_waveform($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $3 = 0.0, $4 = 0.0;
 var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 63;
 switch ($0|0) {
 case 0:  {
  $3 = (+($2&255));
  $4 = $3 * 6.2831840515136719;
  $5 = $4 * 0.015625;
  $6 = (+Math_sin((+$5)));
  $7 = -$6;
  $$0 = $7;
  return (+$$0);
  break;
 }
 case 1:  {
  $8 = $2&255;
  $9 = (32 - ($8))|0;
  $10 = (+($9|0));
  $11 = $10 * 0.03125;
  $$0 = $11;
  return (+$$0);
  break;
 }
 case 2:  {
  $12 = ($2&255)>(31);
  $13 = $12 ? 1.0 : -1.0;
  $$0 = $13;
  return (+$$0);
  break;
 }
 case 3:  {
  $14 = HEAP32[1009]|0;
  $15 = Math_imul($14, 1103515245)|0;
  $16 = (($15) + 12345)|0;
  HEAP32[1009] = $16;
  $17 = $16 >>> 16;
  $18 = $17 & 32767;
  $19 = (+($18>>>0));
  $20 = $19 * 6.103515625E-5;
  $21 = $20 + -1.0;
  $$0 = $21;
  return (+$$0);
  break;
 }
 case 4:  {
  $22 = $2&255;
  $23 = (($22) + -32)|0;
  $24 = (+($23|0));
  $25 = $24 * 0.03125;
  $$0 = $25;
  return (+$$0);
  break;
 }
 default: {
  $$0 = 0.0;
  return (+$$0);
 }
 }
 return +(0.0);
}
function _jar_xm_frequency($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$050 = 0.0, $$051 = 0, $$054 = 0, $$1 = 0, $$148 = 0, $$152 = 0, $$253 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0;
 var $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $indvars$iv = 0, $indvars$iv$next = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 0:  {
  $5 = $2 * 64.0;
  $6 = $1 - $5;
  $7 = (+_jar_xm_linear_frequency($6));
  $$050 = $7;
  return (+$$050);
  break;
 }
 case 1:  {
  $8 = $2 == 0.0;
  if ($8) {
   $9 = (+_jar_xm_amiga_frequency($1));
   $$050 = $9;
   return (+$$050);
  }
  $10 = $1 > 1712.0;
  if ($10) {
   $$051 = -1;
   while(1) {
    $11 = $$051 << 24 >> 24;
    $12 = (0 - ($11))|0;
    $13 = 1712 << $12;
    $14 = (+($13|0));
    $15 = $14 < $1;
    $16 = (($$051) + -1)<<24>>24;
    if ($15) {
     $$051 = $16;
    } else {
     $$253 = $$051;
     break;
    }
   }
  } else {
   $17 = $1 < 856.0;
   if ($17) {
    $$152 = 1;
    while(1) {
     $18 = $$152 << 24 >> 24;
     $19 = 856 >>> $18;
     $20 = (+($19|0));
     $21 = $20 > $1;
     $22 = (($$152) + 1)<<24>>24;
     if ($21) {
      $$152 = $22;
     } else {
      $$253 = $$152;
      break;
     }
    }
   } else {
    $$253 = 0;
   }
  }
  $23 = $$253 << 24 >> 24;
  $24 = ($$253<<24>>24)>(0);
  $25 = ($$253<<24>>24)<(0);
  $26 = (0 - ($23))|0;
  $indvars$iv = 0;
  while(1) {
   $27 = (5976 + ($indvars$iv<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = (($indvars$iv) + 1)|0;
   $30 = (5976 + ($29<<1)|0);
   $31 = HEAP16[$30>>1]|0;
   if ($24) {
    $32 = $28&65535;
    $33 = $32 >>> $23;
    $34 = $33&65535;
    $35 = $31&65535;
    $36 = $35 >>> $23;
    $37 = $36&65535;
    $$1 = $37;$$148 = $34;
   } else {
    if ($25) {
     $38 = $31&65535;
     $39 = $38 << $26;
     $40 = $28&65535;
     $41 = $40 << $26;
     $42 = $41&65535;
     $43 = $39&65535;
     $$1 = $43;$$148 = $42;
    } else {
     $$1 = $31;$$148 = $28;
    }
   }
   $44 = (+($$1&65535));
   $45 = !($44 <= $1);
   $46 = (+($$148&65535));
   $47 = !($46 >= $1);
   $or$cond = $47 | $45;
   $48 = $indvars$iv&255;
   if (!($or$cond)) {
    $$054 = $48;
    break;
   }
   $indvars$iv$next = (($indvars$iv) + 1)|0;
   $49 = ($indvars$iv$next>>>0)<(12);
   if ($49) {
    $indvars$iv = $indvars$iv$next;
   } else {
    $$054 = 0;
    break;
   }
  }
  $50 = $$253 << 24 >> 24;
  $51 = (($50) + 2)|0;
  $52 = (+($51|0));
  $53 = $52 * 12.0;
  $54 = (+($$054&255));
  $55 = $53 + $54;
  $56 = $$148&65535;
  $57 = (+($$148&65535));
  $58 = $1 - $57;
  $59 = $$1&65535;
  $60 = (($59) - ($56))|0;
  $61 = (+($60|0));
  $62 = $58 / $61;
  $63 = $55 + $62;
  $64 = $63 + $2;
  $65 = (+_jar_xm_amiga_period($64));
  $66 = (+_jar_xm_amiga_frequency($65));
  $$050 = $66;
  return (+$$050);
  break;
 }
 default: {
  $$050 = 0.0;
  return (+$$050);
 }
 }
 return +(0.0);
}
function _jar_xm_linear_frequency($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $exp2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = 4608.0 - $0;
 $2 = $1 / 768.0;
 $exp2 = (+_llvm_exp2_f32((+$2)));
 $3 = $exp2 * 8363.0;
 return (+$3);
}
function _jar_xm_amiga_frequency($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 == 0.0;
 $2 = $0 * 2.0;
 $3 = 7093789.0 / $2;
 $$0 = $1 ? 0.0 : $3;
 return (+$$0);
}
function _jar_xm_envelope_tick($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$043 = 0, $$lcssa = 0, $$lcssa42 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 48|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5&255)<(2);
 if ($6) {
  $7 = ($5<<24>>24)==(1);
  if (!($7)) {
   return;
  }
  $8 = ((($1)) + 2|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = (+($9&65535));
  $11 = $10 * 0.015625;
  HEAPF32[$3>>2] = $11;
  $12 = $11 > 1.0;
  if (!($12)) {
   return;
  }
  HEAPF32[$3>>2] = 1.0;
  return;
 }
 $13 = ((($1)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $16 = ((($1)) + 51|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($1) + ($18<<2)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = HEAP16[$2>>1]|0;
  $22 = ($21&65535)<($20&65535);
  if (!($22)) {
   $23 = $21&65535;
   $24 = $20&65535;
   $25 = ((($1)) + 50|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = (($1) + ($27<<2)|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29&65535;
   $31 = (($23) - ($24))|0;
   $32 = (($31) + ($30))|0;
   $33 = $32&65535;
   HEAP16[$2>>1] = $33;
  }
 }
 $34 = HEAP8[$4>>0]|0;
 $35 = ($34&255)>(2);
 $36 = HEAP16[$2>>1]|0;
 L15: do {
  if ($35) {
   $$043 = 0;$38 = 0;$41 = $36;
   while(1) {
    $37 = (($1) + ($38<<2)|0);
    $39 = HEAP16[$37>>1]|0;
    $40 = ($39&65535)>($41&65535);
    if (!($40)) {
     $42 = (($38) + 1)|0;
     $43 = (($1) + ($42<<2)|0);
     $44 = HEAP16[$43>>1]|0;
     $45 = ($44&65535)<($41&65535);
     if (!($45)) {
      $$lcssa = $41;$$lcssa42 = $38;
      break L15;
     }
    }
    $46 = (($$043) + 1)<<24>>24;
    $47 = $46&255;
    $48 = HEAP8[$4>>0]|0;
    $49 = $48&255;
    $50 = (($49) + -2)|0;
    $51 = ($47|0)<($50|0);
    $52 = HEAP16[$2>>1]|0;
    if ($51) {
     $$043 = $46;$38 = $47;$41 = $52;
    } else {
     $$lcssa = $52;$$lcssa42 = $47;
     break;
    }
   }
  } else {
   $$lcssa = $36;$$lcssa42 = 0;
  }
 } while(0);
 $53 = (($1) + ($$lcssa42<<2)|0);
 $54 = ((($53)) + 4|0);
 $55 = (+_jar_xm_envelope_lerp($53,$54,$$lcssa));
 $56 = $55 * 0.015625;
 HEAPF32[$3>>2] = $56;
 $57 = ((($0)) + 52|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(0);
 if (!($59)) {
  $60 = ((($1)) + 56|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(0);
  if (!($62)) {
   $63 = HEAP16[$2>>1]|0;
   $64 = ((($1)) + 49|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = (($1) + ($66<<2)|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = ($63<<16>>16)==($68<<16>>16);
   if ($69) {
    return;
   }
  }
 }
 $70 = HEAP16[$2>>1]|0;
 $71 = (($70) + 1)<<16>>16;
 HEAP16[$2>>1] = $71;
 return;
}
function _jar_xm_envelope_lerp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2&65535;
 $4 = HEAP16[$0>>1]|0;
 $5 = $4&65535;
 $6 = ($4&65535)<($2&65535);
 if (!($6)) {
  $7 = ((($0)) + 2|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = (+($8&65535));
  $$0 = $9;
  return (+$$0);
 }
 $10 = HEAP16[$1>>1]|0;
 $11 = ($10&65535)>($2&65535);
 $12 = ((($1)) + 2|0);
 $13 = HEAP16[$12>>1]|0;
 if ($11) {
  $15 = $10&65535;
  $16 = (($3) - ($5))|0;
  $17 = (+($16|0));
  $18 = (($15) - ($5))|0;
  $19 = (+($18|0));
  $20 = $17 / $19;
  $21 = ((($0)) + 2|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = (+($22&65535));
  $24 = 1.0 - $20;
  $25 = $24 * $23;
  $26 = (+($13&65535));
  $27 = $26 * $20;
  $28 = $27 + $25;
  $$0 = $28;
  return (+$$0);
 } else {
  $14 = (+($13&65535));
  $$0 = $14;
  return (+$$0);
 }
 return +(0.0);
}
function _jar_xm_post_pattern_change($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 348|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = ((($0)) + 46|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($3>>>0)<($6>>>0);
 if ($7) {
  return;
 }
 $8 = ((($0)) + 48|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&255;
 HEAP8[$1>>0] = $10;
 return;
}
function _jar_xm_create_context_safe($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$06061 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_jar_xm_check_sanity_preload($1,$2)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = 1;
  return ($$0|0);
 }
 $6 = (_jar_xm_get_memory_needed_for_context($1,$2)|0);
 $7 = (_malloc($6)|0);
 $8 = ($7|0)==(0|0);
 $9 = ($6|0)!=(0);
 $or$cond = $9 & $8;
 if ($or$cond) {
  $$0 = 2;
  return ($$0|0);
 }
 _memset(($7|0),0,($6|0))|0;
 HEAP32[$0>>2] = $7;
 HEAP32[$7>>2] = $7;
 $10 = ((($7)) + 392|0);
 $11 = ((($7)) + 324|0);
 HEAP32[$11>>2] = $3;
 $12 = (_jar_xm_load_module($7,$1,$2,$10)|0);
 $13 = ((($7)) + 388|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($7)) + 50|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($16*304)|0;
 $18 = (($12) + ($17)|0);
 $19 = ((($7)) + 332|0);
 HEAPF32[$19>>2] = 1.0;
 $20 = ((($7)) + 336|0);
 HEAPF32[$20>>2] = 0.25;
 $21 = ((($7)) + 340|0);
 HEAPF32[$21>>2] = 0.0078125;
 $22 = ((($7)) + 344|0);
 HEAPF32[$22>>2] = 0.0078125;
 $23 = HEAP16[$14>>1]|0;
 $24 = ($23<<16>>16)==(0);
 if (!($24)) {
  $25 = HEAP32[$13>>2]|0;
  $26 = HEAP16[$14>>1]|0;
  $27 = $26&65535;
  $$06061 = 0;$32 = 0;
  while(1) {
   $31 = (((($25) + (($32*304)|0)|0)) + 36|0);
   HEAP32[$31>>2] = 1;
   $33 = (((($25) + (($32*304)|0)|0)) + 104|0);
   HEAP32[$33>>2] = 0;
   $34 = (((($25) + (($32*304)|0)|0)) + 108|0);
   HEAP32[$34>>2] = 1;
   $35 = (((($25) + (($32*304)|0)|0)) + 120|0);
   HEAP32[$35>>2] = 0;
   $36 = (((($25) + (($32*304)|0)|0)) + 124|0);
   HEAP32[$36>>2] = 1;
   $37 = (((($25) + (($32*304)|0)|0)) + 56|0);
   HEAPF32[$37>>2] = 1.0;
   $38 = (((($25) + (($32*304)|0)|0)) + 60|0);
   HEAPF32[$38>>2] = 1.0;
   $39 = (((($25) + (($32*304)|0)|0)) + 40|0);
   HEAPF32[$39>>2] = 1.0;
   $40 = (((($25) + (($32*304)|0)|0)) + 64|0);
   HEAPF32[$40>>2] = 0.5;
   $41 = (((($25) + (($32*304)|0)|0)) + 44|0);
   HEAPF32[$41>>2] = 0.5;
   $42 = (((($25) + (($32*304)|0)|0)) + 300|0);
   HEAPF32[$42>>2] = 0.0;
   $43 = (((($25) + (($32*304)|0)|0)) + 296|0);
   HEAPF32[$43>>2] = 0.5;
   $44 = (($$06061) + 1)<<24>>24;
   $45 = $44&255;
   $46 = ($45>>>0)<($27>>>0);
   if ($46) {
    $$06061 = $44;$32 = $45;
   } else {
    break;
   }
  }
 }
 $28 = ((($7)) + 380|0);
 HEAP32[$28>>2] = $18;
 $29 = (_jar_xm_check_sanity_postload($7)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $$0 = 0;
  return ($$0|0);
 }
 _jar_xm_free_context($7);
 $$0 = 1;
 return ($$0|0);
}
function _jar_xm_check_sanity_preload($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(60);
 if ($2) {
  $$0 = 4;
  return ($$0|0);
 }
 $3 = (_memcmp(13233,$0,17)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = ((($0)) + 37|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(26);
 if (!($7)) {
  $$0 = 2;
  return ($$0|0);
 }
 $8 = ((($0)) + 59|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(1);
 if ($10) {
  $11 = ((($0)) + 58|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(4);
  $$ = $13 ? 0 : 3;
  return ($$|0);
 } else {
  $$0 = 3;
  return ($$0|0);
 }
 return (0)|0;
}
function _jar_xm_get_memory_needed_for_context($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$0209$lcssa = 0, $$0209274 = 0, $$0212262 = 0, $$0213$lcssa = 0, $$0213261 = 0, $$0214 = 0, $$0215267 = 0, $$0216273 = 0, $$0275 = 0, $$1$lcssa = 0, $$1210268 = 0, $$1269 = 0, $$2$lcssa = 0, $$2211$lcssa = 0, $$2211263 = 0, $$2264 = 0, $$3 = 0, $$ph = 0, $$ph228 = 0;
 var $$ph233 = 0, $$ph234 = 0, $$ph237 = 0, $$ph238 = 0, $$ph239 = 0, $$ph240 = 0, $$ph241 = 0, $$ph242 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, $phitmp294 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(68);
 $3 = ($1>>>0)>(69);
 if ($2) {
  $4 = ((($0)) + 68|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $12 = $6;
 } else {
  $12 = 0;
 }
 do {
  if ($3) {
   $7 = ((($0)) + 69|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = $9 << 8;
   $11 = $10 | $12;
   $13 = ($1|0)==(70);
   do {
    if ($13) {
     $$ph = 0;$$ph233 = 0;$$ph234 = 0;
    } else {
     $14 = ((($0)) + 70|0);
     $15 = HEAP8[$14>>0]|0;
     $16 = $15&255;
     $17 = ($1>>>0)>(71);
     if (!($17)) {
      $18 = $16 << 3;
      $$ph = $18;$$ph233 = 0;$$ph234 = $16;
      break;
     }
     $19 = ((($0)) + 71|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = $20&255;
     $22 = $21 << 8;
     $23 = $22 | $16;
     $24 = $23 << 3;
     $25 = ($1|0)==(72);
     if ($25) {
      $$ph = $24;$$ph233 = 0;$$ph234 = $23;
     } else {
      $26 = ((($0)) + 72|0);
      $27 = HEAP8[$26>>0]|0;
      $28 = $27&255;
      $29 = ($1>>>0)>(73);
      if ($29) {
       $30 = ((($0)) + 73|0);
       $31 = HEAP8[$30>>0]|0;
       $32 = $31&255;
       $phitmp294 = $32 << 8;
       $$ph228 = $phitmp294;
      } else {
       $$ph228 = 0;
      }
      $33 = $$ph228 | $28;
      $34 = ($33*280)|0;
      $35 = (($34) + ($24))|0;
      $$ph = $35;$$ph233 = $33;$$ph234 = $23;
     }
    }
   } while(0);
   $37 = ((($0)) + 64|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $284 = $39;$285 = $11;$286 = $$ph234;$287 = $$ph233;$288 = $$ph;
   label = 14;
  } else {
   $36 = ($1>>>0)>(64);
   if ($36) {
    $40 = ((($0)) + 64|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = ($1|0)==(65);
    if ($43) {
     $$ph237 = $42;$$ph238 = $12;$$ph239 = 0;$$ph240 = 0;$$ph241 = 0;$$ph242 = 0;
     label = 15;
     break;
    } else {
     $284 = $42;$285 = $12;$286 = 0;$287 = 0;$288 = 0;
     label = 14;
     break;
    }
   }
   $61 = ($1>>>0)>(62);
   if (!($61)) {
    $$1$lcssa = 0;$155 = $12;
    $154 = ($155*304)|0;
    $156 = (($154) + 392)|0;
    $157 = (($156) + ($$1$lcssa))|0;
    return ($157|0);
   }
   $62 = ((($0)) + 61|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = $64 << 8;
   $66 = ((($0)) + 60|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = $65 | $68;
   $70 = ((($0)) + 62|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = ($1|0)==(63);
   if ($73) {
    $$1$lcssa = 0;$155 = $12;
    $154 = ($155*304)|0;
    $156 = (($154) + 392)|0;
    $157 = (($156) + ($$1$lcssa))|0;
    return ($157|0);
   } else {
    $289 = 0;$79 = $72;$82 = $69;$85 = 0;$87 = $12;$89 = 0;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $44 = ((($0)) + 65|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $phitmp = $46 << 8;
  $$ph237 = $284;$$ph238 = $285;$$ph239 = $286;$$ph240 = $287;$$ph241 = $288;$$ph242 = $phitmp;
  label = 15;
 }
 if ((label|0) == 15) {
  $47 = $$ph242 | $$ph237;
  $48 = $47 << 8;
  $49 = (($48) + ($$ph241))|0;
  $50 = ((($0)) + 60|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = ((($0)) + 61|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $55 << 8;
  $57 = $56 | $52;
  $58 = ((($0)) + 62|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $289 = $49;$79 = $60;$82 = $57;$85 = $$ph239;$87 = $$ph238;$89 = $$ph240;
 }
 $74 = ((($0)) + 63|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = $76 << 8;
 $78 = $77 | $79;
 $80 = $78 << 16;
 $81 = $80 | $82;
 $83 = (($81) + 60)|0;
 $84 = ($85|0)==(0);
 if ($84) {
  $$0$lcssa = $289;$$0209$lcssa = $83;
 } else {
  $86 = ($87*5)|0;
  $$0209274 = $83;$$0216273 = 0;$$0275 = $289;
  while(1) {
   $90 = (($$0209274) + 5)|0;
   $91 = ($90>>>0)<($1>>>0);
   if ($91) {
    $92 = (($0) + ($90)|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $103 = $94;
   } else {
    $103 = 0;
   }
   $95 = (($$0209274) + 6)|0;
   $96 = ($95>>>0)<($1>>>0);
   if ($96) {
    $97 = (($0) + ($95)|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $101 = $99;
   } else {
    $101 = 0;
   }
   $100 = $101 << 8;
   $102 = $100 | $103;
   $104 = Math_imul($86, $102)|0;
   $105 = (($104) + ($$0275))|0;
   $106 = ($$0209274>>>0)<($1>>>0);
   if ($106) {
    $107 = (($0) + ($$0209274)|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $118 = $109;
   } else {
    $118 = 0;
   }
   $110 = (($$0209274) + 1)|0;
   $111 = ($110>>>0)<($1>>>0);
   if ($111) {
    $112 = (($0) + ($110)|0);
    $113 = HEAP8[$112>>0]|0;
    $114 = $113&255;
    $116 = $114;
   } else {
    $116 = 0;
   }
   $115 = $116 << 8;
   $117 = $115 | $118;
   $119 = (($$0209274) + 2)|0;
   $120 = ($119>>>0)<($1>>>0);
   if ($120) {
    $121 = (($0) + ($119)|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122&255;
    $132 = $123;
   } else {
    $132 = 0;
   }
   $124 = (($$0209274) + 3)|0;
   $125 = ($124>>>0)<($1>>>0);
   if ($125) {
    $126 = (($0) + ($124)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127&255;
    $130 = $128;
   } else {
    $130 = 0;
   }
   $129 = $130 << 8;
   $131 = $129 | $132;
   $133 = $131 << 16;
   $134 = $117 | $133;
   $135 = (($$0209274) + 7)|0;
   $136 = ($135>>>0)<($1>>>0);
   if ($136) {
    $137 = (($0) + ($135)|0);
    $138 = HEAP8[$137>>0]|0;
    $139 = $138&255;
    $148 = $139;
   } else {
    $148 = 0;
   }
   $140 = (($$0209274) + 8)|0;
   $141 = ($140>>>0)<($1>>>0);
   if ($141) {
    $142 = (($0) + ($140)|0);
    $143 = HEAP8[$142>>0]|0;
    $144 = $143&255;
    $146 = $144;
   } else {
    $146 = 0;
   }
   $145 = $146 << 8;
   $147 = $145 | $148;
   $149 = (($134) + ($$0209274))|0;
   $150 = (($149) + ($147))|0;
   $151 = (($$0216273) + 1)<<16>>16;
   $152 = $151&65535;
   $153 = ($152>>>0)<($85>>>0);
   if ($153) {
    $$0209274 = $150;$$0216273 = $151;$$0275 = $105;
   } else {
    $$0$lcssa = $105;$$0209$lcssa = $150;
    break;
   }
  }
 }
 $88 = ($89|0)==(0);
 if ($88) {
  $$1$lcssa = $$0$lcssa;$155 = $87;
  $154 = ($155*304)|0;
  $156 = (($154) + 392)|0;
  $157 = (($156) + ($$1$lcssa))|0;
  return ($157|0);
 } else {
  $$0215267 = 0;$$1210268 = $$0209$lcssa;$$1269 = $$0$lcssa;
 }
 while(1) {
  $158 = (($$1210268) + 27)|0;
  $159 = ($158>>>0)<($1>>>0);
  if ($159) {
   $160 = (($0) + ($158)|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $171 = $162;
  } else {
   $171 = 0;
  }
  $163 = (($$1210268) + 28)|0;
  $164 = ($163>>>0)<($1>>>0);
  if ($164) {
   $165 = (($0) + ($163)|0);
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $169 = $167;
  } else {
   $169 = 0;
  }
  $168 = $169 << 8;
  $170 = $168 | $171;
  $172 = ($170*80)|0;
  $173 = (($172) + ($$1269))|0;
  $174 = ($170|0)==(0);
  if ($174) {
   $$0214 = 0;
  } else {
   $175 = (($$1210268) + 29)|0;
   $176 = ($175>>>0)<($1>>>0);
   if ($176) {
    $177 = (($0) + ($175)|0);
    $178 = HEAP8[$177>>0]|0;
    $179 = $178&255;
    $188 = $179;
   } else {
    $188 = 0;
   }
   $180 = (($$1210268) + 30)|0;
   $181 = ($180>>>0)<($1>>>0);
   if ($181) {
    $182 = (($0) + ($180)|0);
    $183 = HEAP8[$182>>0]|0;
    $184 = $183&255;
    $186 = $184;
   } else {
    $186 = 0;
   }
   $185 = $186 << 8;
   $187 = $185 | $188;
   $189 = (($$1210268) + 31)|0;
   $190 = ($189>>>0)<($1>>>0);
   if ($190) {
    $191 = (($0) + ($189)|0);
    $192 = HEAP8[$191>>0]|0;
    $193 = $192&255;
    $202 = $193;
   } else {
    $202 = 0;
   }
   $194 = (($$1210268) + 32)|0;
   $195 = ($194>>>0)<($1>>>0);
   if ($195) {
    $196 = (($0) + ($194)|0);
    $197 = HEAP8[$196>>0]|0;
    $198 = $197&255;
    $200 = $198;
   } else {
    $200 = 0;
   }
   $199 = $200 << 8;
   $201 = $199 | $202;
   $203 = $201 << 16;
   $204 = $187 | $203;
   $$0214 = $204;
  }
  $205 = ($$1210268>>>0)<($1>>>0);
  if ($205) {
   $206 = (($0) + ($$1210268)|0);
   $207 = HEAP8[$206>>0]|0;
   $208 = $207&255;
   $217 = $208;
  } else {
   $217 = 0;
  }
  $209 = (($$1210268) + 1)|0;
  $210 = ($209>>>0)<($1>>>0);
  if ($210) {
   $211 = (($0) + ($209)|0);
   $212 = HEAP8[$211>>0]|0;
   $213 = $212&255;
   $215 = $213;
  } else {
   $215 = 0;
  }
  $214 = $215 << 8;
  $216 = $214 | $217;
  $218 = (($$1210268) + 2)|0;
  $219 = ($218>>>0)<($1>>>0);
  if ($219) {
   $220 = (($0) + ($218)|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = $221&255;
   $231 = $222;
  } else {
   $231 = 0;
  }
  $223 = (($$1210268) + 3)|0;
  $224 = ($223>>>0)<($1>>>0);
  if ($224) {
   $225 = (($0) + ($223)|0);
   $226 = HEAP8[$225>>0]|0;
   $227 = $226&255;
   $229 = $227;
  } else {
   $229 = 0;
  }
  $228 = $229 << 8;
  $230 = $228 | $231;
  $232 = $230 << 16;
  $233 = $216 | $232;
  $234 = (($233) + ($$1210268))|0;
  $235 = ($170|0)==(0);
  if ($235) {
   $$0213$lcssa = 0;$$2$lcssa = $173;$$2211$lcssa = $234;
  } else {
   $$0212262 = 0;$$0213261 = 0;$$2211263 = $234;$$2264 = $173;
   while(1) {
    $240 = ($$2211263>>>0)<($1>>>0);
    if ($240) {
     $241 = (($0) + ($$2211263)|0);
     $242 = HEAP8[$241>>0]|0;
     $243 = $242&255;
     $252 = $243;
    } else {
     $252 = 0;
    }
    $244 = (($$2211263) + 1)|0;
    $245 = ($244>>>0)<($1>>>0);
    if ($245) {
     $246 = (($0) + ($244)|0);
     $247 = HEAP8[$246>>0]|0;
     $248 = $247&255;
     $250 = $248;
    } else {
     $250 = 0;
    }
    $249 = $250 << 8;
    $251 = $249 | $252;
    $253 = (($$2211263) + 2)|0;
    $254 = ($253>>>0)<($1>>>0);
    if ($254) {
     $255 = (($0) + ($253)|0);
     $256 = HEAP8[$255>>0]|0;
     $257 = $256&255;
     $266 = $257;
    } else {
     $266 = 0;
    }
    $258 = (($$2211263) + 3)|0;
    $259 = ($258>>>0)<($1>>>0);
    if ($259) {
     $260 = (($0) + ($258)|0);
     $261 = HEAP8[$260>>0]|0;
     $262 = $261&255;
     $264 = $262;
    } else {
     $264 = 0;
    }
    $263 = $264 << 8;
    $265 = $263 | $266;
    $267 = $265 << 16;
    $268 = $251 | $267;
    $269 = (($$2211263) + 14)|0;
    $270 = ($269>>>0)<($1>>>0);
    if ($270) {
     $271 = (($0) + ($269)|0);
     $272 = HEAP8[$271>>0]|0;
     $273 = $272&255;
     $276 = $273;
    } else {
     $276 = 0;
    }
    $274 = (($268) + ($$0213261))|0;
    $275 = $276 >>> 4;
    $277 = $275 & 1;
    $278 = (2 - ($277))|0;
    $279 = $268 << $278;
    $$3 = (($279) + ($$2264))|0;
    $280 = (($$2211263) + ($$0214))|0;
    $281 = (($$0212262) + 1)<<16>>16;
    $282 = $281&65535;
    $283 = ($282>>>0)<($170>>>0);
    if ($283) {
     $$0212262 = $281;$$0213261 = $274;$$2211263 = $280;$$2264 = $$3;
    } else {
     $$0213$lcssa = $274;$$2$lcssa = $$3;$$2211$lcssa = $280;
     break;
    }
   }
  }
  $236 = (($$2211$lcssa) + ($$0213$lcssa))|0;
  $237 = (($$0215267) + 1)<<16>>16;
  $238 = $237&65535;
  $239 = ($238>>>0)<($89>>>0);
  if ($239) {
   $$0215267 = $237;$$1210268 = $236;$$1269 = $$2$lcssa;
  } else {
   $$1$lcssa = $$2$lcssa;$155 = $87;
   break;
  }
 }
 $154 = ($155*304)|0;
 $156 = (($154) + 392)|0;
 $157 = (($156) + ($$1$lcssa))|0;
 return ($157|0);
}
function _jar_xm_load_module($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0668761 = 0, $$0669766 = 0, $$0670765 = 0, $$0671$lcssa = 0, $$0671787 = 0, $$0672$lcssa = 0, $$0672786 = 0, $$0677769 = 0, $$0678785 = 0, $$0679755 = 0, $$0680753 = 0, $$0681752 = 0, $$0682783 = 0, $$0687 = 0, $$0688776 = 0, $$0689782 = 0, $$0762 = 0, $$1$lcssa = 0, $$1673777 = 0, $$1683 = 0;
 var $$1778 = 0, $$2 = 0, $$2674756 = 0, $$2684 = 0, $$3$lcssa794 = 0, $$3675$lcssa = 0, $$3675770 = 0, $$3685 = 0, $$3757 = 0, $$4 = 0, $$4676 = 0, $$4686 = 0, $$5 = 0, $$ph700 = 0, $$ph701 = 0, $$ph707 = 0, $$ph708 = 0, $$ph714 = 0, $$ph715 = 0, $$ph721 = 0;
 var $$ph722 = 0, $$ph729 = 0, $$ph730 = 0, $$ph731 = 0, $$ph740 = 0, $$pn = 0, $$pn693 = 0, $$pr = 0, $$sink = 0, $$sink694 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0.0, $769 = 0, $77 = 0, $770 = 0.0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0.0, $802 = 0, $803 = 0.0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0.0, $866 = 0.0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0.0, $882 = 0.0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond793 = 0, $phitmp = 0, $phitmp804 = 0;
 var $sext = 0, $sext690 = 0, $sext691 = 0, $sext692 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 _memcpy_pad($4,20,$1,$2,17);
 $5 = ((($0)) + 25|0);
 _memcpy_pad($5,20,$1,$2,38);
 $6 = ($2>>>0)>(60);
 if ($6) {
  $7 = ((($1)) + 60|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = ($2|0)==(61);
  if ($10) {
   $$ph700 = 0;$$ph701 = $9;
   label = 5;
  } else {
   $11 = ((($1)) + 61|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = $13 << 8;
   $15 = $14 | $9;
   $16 = ($2>>>0)>(62);
   if ($16) {
    $17 = ((($1)) + 62|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = ($2|0)==(63);
    if ($20) {
     $$ph700 = $19;$$ph701 = $15;
     label = 5;
    } else {
     $23 = ((($1)) + 63|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = $25 << 8;
     $27 = $26 | $19;
     $28 = $27 << 16;
     $29 = $28 | $15;
     $30 = ($2>>>0)>(64);
     if ($30) {
      $31 = ((($1)) + 64|0);
      $32 = HEAP8[$31>>0]|0;
      $33 = $32&255;
      $34 = ($2|0)==(65);
      if ($34) {
       $$ph707 = $33;$$ph708 = $29;
       label = 8;
      } else {
       $37 = ((($1)) + 65|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = $38&255;
       $40 = $39 << 8;
       $41 = $40 | $33;
       $42 = $41&65535;
       $43 = ((($0)) + 46|0);
       HEAP16[$43>>1] = $42;
       $44 = ($2>>>0)>(66);
       if ($44) {
        $45 = ((($1)) + 66|0);
        $46 = HEAP8[$45>>0]|0;
        $47 = $46&255;
        $48 = ($2|0)==(67);
        if ($48) {
         $$ph714 = $47;$$ph715 = $29;
         label = 11;
        } else {
         $51 = ((($1)) + 67|0);
         $52 = HEAP8[$51>>0]|0;
         $53 = $52&255;
         $54 = $53 << 8;
         $55 = $54 | $47;
         $56 = $55&65535;
         $57 = ((($0)) + 48|0);
         HEAP16[$57>>1] = $56;
         $58 = ($2>>>0)>(68);
         if ($58) {
          $59 = ((($1)) + 68|0);
          $60 = HEAP8[$59>>0]|0;
          $61 = $60&255;
          $62 = ($2|0)==(69);
          if ($62) {
           $$ph721 = $61;$$ph722 = $29;
           label = 14;
          } else {
           $65 = ((($1)) + 69|0);
           $66 = HEAP8[$65>>0]|0;
           $67 = $66&255;
           $68 = $67 << 8;
           $69 = $68 | $61;
           $70 = $69&65535;
           $71 = ((($0)) + 50|0);
           HEAP16[$71>>1] = $70;
           $72 = ($2>>>0)>(70);
           if ($72) {
            $73 = ((($1)) + 70|0);
            $74 = HEAP8[$73>>0]|0;
            $75 = $74&255;
            $76 = ($2|0)==(71);
            if ($76) {
             $$ph729 = $75;$$ph730 = $29;$$ph731 = $71;
             label = 17;
            } else {
             $79 = ((($1)) + 71|0);
             $80 = HEAP8[$79>>0]|0;
             $81 = $80&255;
             $82 = $81 << 8;
             $83 = $82 | $75;
             $84 = $83&65535;
             $85 = ((($0)) + 52|0);
             HEAP16[$85>>1] = $84;
             $86 = ($2>>>0)>(72);
             if ($86) {
              $87 = ((($1)) + 72|0);
              $88 = HEAP8[$87>>0]|0;
              $89 = $88&255;
              $90 = ($2|0)==(73);
              if ($90) {
               $101 = $85;$147 = $29;$186 = $71;$95 = 0;$96 = $89;
              } else {
               $91 = ((($1)) + 73|0);
               $92 = HEAP8[$91>>0]|0;
               $93 = $92&255;
               $phitmp = $93 << 8;
               $101 = $85;$147 = $29;$186 = $71;$95 = $phitmp;$96 = $89;
              }
             } else {
              $101 = $85;$147 = $29;$186 = $71;$95 = 0;$96 = 0;
             }
            }
           } else {
            $$ph729 = 0;$$ph730 = $29;$$ph731 = $71;
            label = 17;
           }
          }
         } else {
          $$ph721 = 0;$$ph722 = $29;
          label = 14;
         }
        }
       } else {
        $$ph714 = 0;$$ph715 = $29;
        label = 11;
       }
      }
     } else {
      $$ph707 = 0;$$ph708 = $29;
      label = 8;
     }
    }
   } else {
    $$ph700 = 0;$$ph701 = $15;
    label = 5;
   }
  }
 } else {
  $$ph700 = 0;$$ph701 = 0;
  label = 5;
 }
 if ((label|0) == 5) {
  $21 = $$ph700 << 16;
  $22 = $$ph701 | $21;
  $$ph707 = 0;$$ph708 = $22;
  label = 8;
 }
 if ((label|0) == 8) {
  $35 = $$ph707&65535;
  $36 = ((($0)) + 46|0);
  HEAP16[$36>>1] = $35;
  $$ph714 = 0;$$ph715 = $$ph708;
  label = 11;
 }
 if ((label|0) == 11) {
  $49 = $$ph714&65535;
  $50 = ((($0)) + 48|0);
  HEAP16[$50>>1] = $49;
  $$ph721 = 0;$$ph722 = $$ph715;
  label = 14;
 }
 if ((label|0) == 14) {
  $63 = $$ph721&65535;
  $64 = ((($0)) + 50|0);
  HEAP16[$64>>1] = $63;
  $$ph729 = 0;$$ph730 = $$ph722;$$ph731 = $64;
  label = 17;
 }
 if ((label|0) == 17) {
  $77 = $$ph729&65535;
  $78 = ((($0)) + 52|0);
  HEAP16[$78>>1] = $77;
  $101 = $78;$147 = $$ph730;$186 = $$ph731;$95 = 0;$96 = 0;
 }
 $94 = $95 | $96;
 $97 = $94&65535;
 $98 = ((($0)) + 54|0);
 HEAP16[$98>>1] = $97;
 $99 = ((($0)) + 316|0);
 HEAP32[$99>>2] = $3;
 $100 = HEAP16[$101>>1]|0;
 $102 = $100&65535;
 $103 = $102 << 3;
 $104 = (($3) + ($103)|0);
 $105 = ((($0)) + 320|0);
 HEAP32[$105>>2] = $104;
 $106 = HEAP16[$98>>1]|0;
 $107 = $106&65535;
 $108 = ($107*280)|0;
 $109 = (($104) + ($108)|0);
 $110 = ($2>>>0)>(74);
 if ($110) {
  $112 = ((($1)) + 74|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = ($2>>>0)>(76);
  $115 = $113 & 1;
  $116 = $115 ^ 1;
  $117 = $116&255;
  $118 = ((($0)) + 56|0);
  HEAP32[$118>>2] = $117;
  if ($114) {
   $119 = ($2|0)==(77);
   $120 = ((($1)) + 76|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = $121&255;
   if ($119) {
    $$ph740 = $122;
    label = 25;
   } else {
    $125 = ((($1)) + 77|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126&255;
    $128 = $127 << 8;
    $129 = $128 | $122;
    $130 = $129&65535;
    $131 = ((($0)) + 328|0);
    HEAP16[$131>>1] = $130;
    $132 = ($2>>>0)>(78);
    if ($132) {
     $133 = ((($1)) + 78|0);
     $134 = HEAP8[$133>>0]|0;
     $135 = $134&255;
     $136 = ($2|0)==(79);
     if ($136) {
      $141 = 0;$142 = $135;
     } else {
      $137 = ((($1)) + 79|0);
      $138 = HEAP8[$137>>0]|0;
      $139 = $138&255;
      $phitmp804 = $139 << 8;
      $141 = $phitmp804;$142 = $135;
     }
    } else {
     $141 = 0;$142 = 0;
    }
   }
  } else {
   $$ph740 = 0;
   label = 25;
  }
 } else {
  $111 = ((($0)) + 56|0);
  HEAP32[$111>>2] = 1;
  $$ph740 = 0;
  label = 25;
 }
 if ((label|0) == 25) {
  $123 = $$ph740&65535;
  $124 = ((($0)) + 328|0);
  HEAP16[$124>>1] = $123;
  $141 = 0;$142 = 0;
 }
 $140 = $141 | $142;
 $143 = $140&65535;
 $144 = ((($0)) + 330|0);
 HEAP16[$144>>1] = $143;
 $145 = ((($0)) + 60|0);
 _memcpy_pad($145,256,$1,$2,80);
 $146 = (($147) + 60)|0;
 $148 = HEAP16[$101>>1]|0;
 $149 = ($148<<16>>16)==(0);
 if ($149) {
  $$0671$lcssa = $109;$$0672$lcssa = $146;
 } else {
  $$0671787 = $109;$$0672786 = $146;$$0678785 = 0;$183 = 0;
  while(1) {
   $152 = (($$0672786) + 7)|0;
   $153 = ($152>>>0)<($2>>>0);
   if ($153) {
    $154 = (($1) + ($152)|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = $155&255;
    $165 = $156;
   } else {
    $165 = 0;
   }
   $157 = (($$0672786) + 8)|0;
   $158 = ($157>>>0)<($2>>>0);
   if ($158) {
    $159 = (($1) + ($157)|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $160&255;
    $163 = $161;
   } else {
    $163 = 0;
   }
   $162 = $163 << 8;
   $164 = $162 | $165;
   $166 = HEAP32[$99>>2]|0;
   $167 = (($$0672786) + 5)|0;
   $168 = ($167>>>0)<($2>>>0);
   if ($168) {
    $169 = (($1) + ($167)|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $170&255;
    $180 = $171;
   } else {
    $180 = 0;
   }
   $172 = (($$0672786) + 6)|0;
   $173 = ($172>>>0)<($2>>>0);
   if ($173) {
    $174 = (($1) + ($172)|0);
    $175 = HEAP8[$174>>0]|0;
    $176 = $175&255;
    $178 = $176;
   } else {
    $178 = 0;
   }
   $177 = $178 << 8;
   $179 = $177 | $180;
   $181 = $179&65535;
   $182 = (($166) + ($183<<3)|0);
   HEAP16[$182>>1] = $181;
   $184 = (((($166) + ($183<<3)|0)) + 4|0);
   HEAP32[$184>>2] = $$0671787;
   $185 = HEAP16[$186>>1]|0;
   $187 = $185&65535;
   $188 = ($179*5)|0;
   $189 = Math_imul($188, $187)|0;
   $190 = (($$0671787) + ($189)|0);
   $191 = ($$0672786>>>0)<($2>>>0);
   if ($191) {
    $192 = (($1) + ($$0672786)|0);
    $193 = HEAP8[$192>>0]|0;
    $194 = $193&255;
    $203 = $194;
   } else {
    $203 = 0;
   }
   $195 = (($$0672786) + 1)|0;
   $196 = ($195>>>0)<($2>>>0);
   if ($196) {
    $197 = (($1) + ($195)|0);
    $198 = HEAP8[$197>>0]|0;
    $199 = $198&255;
    $201 = $199;
   } else {
    $201 = 0;
   }
   $200 = $201 << 8;
   $202 = $200 | $203;
   $204 = (($$0672786) + 2)|0;
   $205 = ($204>>>0)<($2>>>0);
   if ($205) {
    $206 = (($1) + ($204)|0);
    $207 = HEAP8[$206>>0]|0;
    $208 = $207&255;
    $217 = $208;
   } else {
    $217 = 0;
   }
   $209 = (($$0672786) + 3)|0;
   $210 = ($209>>>0)<($2>>>0);
   if ($210) {
    $211 = (($1) + ($209)|0);
    $212 = HEAP8[$211>>0]|0;
    $213 = $212&255;
    $215 = $213;
   } else {
    $215 = 0;
   }
   $214 = $215 << 8;
   $216 = $214 | $217;
   $218 = $216 << 16;
   $219 = $202 | $218;
   $220 = (($219) + ($$0672786))|0;
   $221 = ($164|0)==(0);
   if ($221) {
    $222 = HEAP32[$184>>2]|0;
    $223 = HEAP16[$182>>1]|0;
    $224 = $223&65535;
    $225 = ($224*5)|0;
    $226 = HEAP16[$186>>1]|0;
    $227 = $226&65535;
    $228 = Math_imul($225, $227)|0;
    _memset(($222|0),0,($228|0))|0;
   } else {
    $$0682783 = 0;$$0689782 = 0;$230 = 0;
    while(1) {
     $229 = (($230) + ($220))|0;
     $231 = ($229>>>0)<($2>>>0);
     do {
      if ($231) {
       $235 = (($1) + ($229)|0);
       $236 = HEAP8[$235>>0]|0;
       $237 = $236&255;
       $238 = HEAP32[$184>>2]|0;
       $239 = $$0689782&65535;
       $240 = (($238) + (($239*5)|0)|0);
       $241 = $237 & 128;
       $242 = ($241|0)==(0);
       if ($242) {
        $308 = $237;$309 = $240;$318 = $238;$319 = $239;
        label = 77;
       } else {
        $243 = (($$0682783) + 1)<<16>>16;
        $244 = $237 & 1;
        $245 = ($244|0)==(0);
        if ($245) {
         HEAP8[$240>>0] = 0;
         $$1683 = $243;
        } else {
         $246 = $243&65535;
         $247 = (($246) + ($220))|0;
         $248 = ($247>>>0)<($2>>>0);
         if ($248) {
          $249 = (($1) + ($247)|0);
          $250 = HEAP8[$249>>0]|0;
          $251 = $250&255;
          $253 = $251;
         } else {
          $253 = 0;
         }
         $252 = $253&255;
         HEAP8[$240>>0] = $252;
         $254 = (($$0682783) + 2)<<16>>16;
         $$1683 = $254;
        }
        $255 = $237 & 2;
        $256 = ($255|0)==(0);
        if ($256) {
         $267 = (((($238) + (($239*5)|0)|0)) + 1|0);
         HEAP8[$267>>0] = 0;
         $$2684 = $$1683;
        } else {
         $257 = $$1683&65535;
         $258 = (($257) + ($220))|0;
         $259 = ($258>>>0)<($2>>>0);
         if ($259) {
          $260 = (($1) + ($258)|0);
          $261 = HEAP8[$260>>0]|0;
          $262 = $261&255;
          $264 = $262;
         } else {
          $264 = 0;
         }
         $263 = $264&255;
         $265 = (((($238) + (($239*5)|0)|0)) + 1|0);
         HEAP8[$265>>0] = $263;
         $266 = (($$1683) + 1)<<16>>16;
         $$2684 = $266;
        }
        $268 = $237 & 4;
        $269 = ($268|0)==(0);
        if ($269) {
         $280 = (((($238) + (($239*5)|0)|0)) + 2|0);
         HEAP8[$280>>0] = 0;
         $$3685 = $$2684;
        } else {
         $270 = $$2684&65535;
         $271 = (($270) + ($220))|0;
         $272 = ($271>>>0)<($2>>>0);
         if ($272) {
          $273 = (($1) + ($271)|0);
          $274 = HEAP8[$273>>0]|0;
          $275 = $274&255;
          $277 = $275;
         } else {
          $277 = 0;
         }
         $276 = $277&255;
         $278 = (((($238) + (($239*5)|0)|0)) + 2|0);
         HEAP8[$278>>0] = $276;
         $279 = (($$2684) + 1)<<16>>16;
         $$3685 = $279;
        }
        $281 = $237 & 8;
        $282 = ($281|0)==(0);
        if ($282) {
         $293 = (((($238) + (($239*5)|0)|0)) + 3|0);
         HEAP8[$293>>0] = 0;
         $$4686 = $$3685;
        } else {
         $283 = $$3685&65535;
         $284 = (($283) + ($220))|0;
         $285 = ($284>>>0)<($2>>>0);
         if ($285) {
          $286 = (($1) + ($284)|0);
          $287 = HEAP8[$286>>0]|0;
          $288 = $287&255;
          $290 = $288;
         } else {
          $290 = 0;
         }
         $289 = $290&255;
         $291 = (((($238) + (($239*5)|0)|0)) + 3|0);
         HEAP8[$291>>0] = $289;
         $292 = (($$3685) + 1)<<16>>16;
         $$4686 = $292;
        }
        $294 = $237 & 16;
        $295 = ($294|0)==(0);
        if ($295) {
         $306 = (((($238) + (($239*5)|0)|0)) + 4|0);
         HEAP8[$306>>0] = 0;
         $$5 = $$4686;
         break;
        }
        $296 = $$4686&65535;
        $297 = (($296) + ($220))|0;
        $298 = ($297>>>0)<($2>>>0);
        if ($298) {
         $299 = (($1) + ($297)|0);
         $300 = HEAP8[$299>>0]|0;
         $301 = $300&255;
         $303 = $301;
        } else {
         $303 = 0;
        }
        $302 = $303&255;
        $304 = (((($238) + (($239*5)|0)|0)) + 4|0);
        HEAP8[$304>>0] = $302;
        $305 = (($$4686) + 1)<<16>>16;
        $$5 = $305;
       }
      } else {
       $232 = HEAP32[$184>>2]|0;
       $233 = $$0689782&65535;
       $234 = (($232) + (($233*5)|0)|0);
       $308 = 0;$309 = $234;$318 = $232;$319 = $233;
       label = 77;
      }
     } while(0);
     if ((label|0) == 77) {
      label = 0;
      $307 = $308&255;
      HEAP8[$309>>0] = $307;
      $310 = (($229) + 1)|0;
      $311 = ($310>>>0)<($2>>>0);
      if ($311) {
       $312 = (($1) + ($310)|0);
       $313 = HEAP8[$312>>0]|0;
       $314 = $313&255;
       $316 = $314;
      } else {
       $316 = 0;
      }
      $315 = $316&255;
      $317 = (((($318) + (($319*5)|0)|0)) + 1|0);
      HEAP8[$317>>0] = $315;
      $320 = (($229) + 2)|0;
      $321 = ($320>>>0)<($2>>>0);
      if ($321) {
       $322 = (($1) + ($320)|0);
       $323 = HEAP8[$322>>0]|0;
       $324 = $323&255;
       $326 = $324;
      } else {
       $326 = 0;
      }
      $325 = $326&255;
      $327 = (((($318) + (($319*5)|0)|0)) + 2|0);
      HEAP8[$327>>0] = $325;
      $328 = (($229) + 3)|0;
      $329 = ($328>>>0)<($2>>>0);
      if ($329) {
       $330 = (($1) + ($328)|0);
       $331 = HEAP8[$330>>0]|0;
       $332 = $331&255;
       $334 = $332;
      } else {
       $334 = 0;
      }
      $333 = $334&255;
      $335 = (((($318) + (($319*5)|0)|0)) + 3|0);
      HEAP8[$335>>0] = $333;
      $336 = (($229) + 4)|0;
      $337 = ($336>>>0)<($2>>>0);
      if ($337) {
       $338 = (($1) + ($336)|0);
       $339 = HEAP8[$338>>0]|0;
       $340 = $339&255;
       $342 = $340;
      } else {
       $342 = 0;
      }
      $341 = $342&255;
      $343 = (((($318) + (($319*5)|0)|0)) + 4|0);
      HEAP8[$343>>0] = $341;
      $344 = (($230) + 5)|0;
      $345 = $344&65535;
      $$5 = $345;
     }
     $346 = (($$0689782) + 1)<<16>>16;
     $347 = $$5&65535;
     $348 = ($347>>>0)<($164>>>0);
     if ($348) {
      $$0682783 = $$5;$$0689782 = $346;$230 = $347;
     } else {
      break;
     }
    }
   }
   $349 = (($220) + ($164))|0;
   $350 = (($$0678785) + 1)<<16>>16;
   $351 = $350&65535;
   $352 = HEAP16[$101>>1]|0;
   $353 = ($350&65535)<($352&65535);
   if ($353) {
    $$0671787 = $190;$$0672786 = $349;$$0678785 = $350;$183 = $351;
   } else {
    $$0671$lcssa = $190;$$0672$lcssa = $349;
    break;
   }
  }
 }
 $150 = HEAP16[$98>>1]|0;
 $151 = ($150<<16>>16)==(0);
 if ($151) {
  $$1$lcssa = $$0671$lcssa;
  return ($$1$lcssa|0);
 } else {
  $$0688776 = 0;$$1673777 = $$0672$lcssa;$$1778 = $$0671$lcssa;
 }
 while(1) {
  $354 = $$0688776&65535;
  $355 = HEAP32[$105>>2]|0;
  $356 = (($355) + (($354*280)|0)|0);
  $357 = (($$1673777) + 4)|0;
  _memcpy_pad($356,22,$1,$2,$357);
  $358 = (($$1673777) + 27)|0;
  $359 = ($358>>>0)<($2>>>0);
  if ($359) {
   $360 = (($1) + ($358)|0);
   $361 = HEAP8[$360>>0]|0;
   $362 = $361&255;
   $371 = $362;
  } else {
   $371 = 0;
  }
  $363 = (($$1673777) + 28)|0;
  $364 = ($363>>>0)<($2>>>0);
  if ($364) {
   $365 = (($1) + ($363)|0);
   $366 = HEAP8[$365>>0]|0;
   $367 = $366&255;
   $369 = $367;
  } else {
   $369 = 0;
  }
  $368 = $369 << 8;
  $370 = $368 | $371;
  $372 = $370&65535;
  $373 = (((($355) + (($354*280)|0)|0)) + 24|0);
  HEAP16[$373>>1] = $372;
  $374 = ($370|0)==(0);
  if ($374) {
   $629 = (((($355) + (($354*280)|0)|0)) + 276|0);
   HEAP32[$629>>2] = 0;
   $$0687 = 0;$$2 = $$1778;
  } else {
   $375 = (($$1673777) + 29)|0;
   $376 = ($375>>>0)<($2>>>0);
   if ($376) {
    $377 = (($1) + ($375)|0);
    $378 = HEAP8[$377>>0]|0;
    $379 = $378&255;
    $388 = $379;
   } else {
    $388 = 0;
   }
   $380 = (($$1673777) + 30)|0;
   $381 = ($380>>>0)<($2>>>0);
   if ($381) {
    $382 = (($1) + ($380)|0);
    $383 = HEAP8[$382>>0]|0;
    $384 = $383&255;
    $386 = $384;
   } else {
    $386 = 0;
   }
   $385 = $386 << 8;
   $387 = $385 | $388;
   $389 = (($$1673777) + 31)|0;
   $390 = ($389>>>0)<($2>>>0);
   if ($390) {
    $391 = (($1) + ($389)|0);
    $392 = HEAP8[$391>>0]|0;
    $393 = $392&255;
    $402 = $393;
   } else {
    $402 = 0;
   }
   $394 = (($$1673777) + 32)|0;
   $395 = ($394>>>0)<($2>>>0);
   if ($395) {
    $396 = (($1) + ($394)|0);
    $397 = HEAP8[$396>>0]|0;
    $398 = $397&255;
    $400 = $398;
   } else {
    $400 = 0;
   }
   $399 = $400 << 8;
   $401 = $399 | $402;
   $403 = $401 << 16;
   $404 = $387 | $403;
   $405 = (((($355) + (($354*280)|0)|0)) + 26|0);
   $406 = (($$1673777) + 33)|0;
   _memcpy_pad($405,96,$1,$2,$406);
   $407 = (($$1673777) + 225)|0;
   $408 = ($407>>>0)<($2>>>0);
   if ($408) {
    $409 = (($1) + ($407)|0);
    $410 = HEAP8[$409>>0]|0;
    $411 = $410&255;
    $413 = $411;
   } else {
    $413 = 0;
   }
   $412 = $413&255;
   $414 = (((($355) + (($354*280)|0)|0)) + 172|0);
   HEAP8[$414>>0] = $412;
   $415 = (($$1673777) + 226)|0;
   $416 = ($415>>>0)<($2>>>0);
   if ($416) {
    $417 = (($1) + ($415)|0);
    $418 = HEAP8[$417>>0]|0;
    $419 = $418&255;
    $421 = $419;
   } else {
    $421 = 0;
   }
   $420 = $421&255;
   $422 = (((($355) + (($354*280)|0)|0)) + 236|0);
   HEAP8[$422>>0] = $420;
   $423 = HEAP8[$414>>0]|0;
   $424 = ($423<<24>>24)==(0);
   if ($424) {
    $427 = $420;
   } else {
    $425 = (($$1673777) + 129)|0;
    $$0681752 = 0;$430 = 0;
    while(1) {
     $429 = $430 << 2;
     $431 = (($425) + ($429))|0;
     $432 = ($431>>>0)<($2>>>0);
     if ($432) {
      $433 = (($1) + ($431)|0);
      $434 = HEAP8[$433>>0]|0;
      $435 = $434&255;
      $444 = $435;
     } else {
      $444 = 0;
     }
     $436 = (($431) + 1)|0;
     $437 = ($436>>>0)<($2>>>0);
     if ($437) {
      $438 = (($1) + ($436)|0);
      $439 = HEAP8[$438>>0]|0;
      $440 = $439&255;
      $442 = $440;
     } else {
      $442 = 0;
     }
     $441 = $442 << 8;
     $443 = $441 | $444;
     $445 = $443&65535;
     $446 = ((((($355) + (($354*280)|0)|0)) + 124|0) + ($430<<2)|0);
     HEAP16[$446>>1] = $445;
     $447 = (($431) + 2)|0;
     $448 = ($447>>>0)<($2>>>0);
     if ($448) {
      $449 = (($1) + ($447)|0);
      $450 = HEAP8[$449>>0]|0;
      $451 = $450&255;
      $460 = $451;
     } else {
      $460 = 0;
     }
     $452 = (($431) + 3)|0;
     $453 = ($452>>>0)<($2>>>0);
     if ($453) {
      $454 = (($1) + ($452)|0);
      $455 = HEAP8[$454>>0]|0;
      $456 = $455&255;
      $458 = $456;
     } else {
      $458 = 0;
     }
     $457 = $458 << 8;
     $459 = $457 | $460;
     $461 = $459&65535;
     $462 = ((((((($355) + (($354*280)|0)|0)) + 124|0) + ($430<<2)|0)) + 2|0);
     HEAP16[$462>>1] = $461;
     $463 = (($$0681752) + 1)<<24>>24;
     $464 = $463&255;
     $465 = HEAP8[$414>>0]|0;
     $466 = ($463&255)<($465&255);
     if ($466) {
      $$0681752 = $463;$430 = $464;
     } else {
      break;
     }
    }
    $$pr = HEAP8[$422>>0]|0;
    $427 = $$pr;
   }
   $426 = ($427<<24>>24)==(0);
   if (!($426)) {
    $428 = (($$1673777) + 177)|0;
    $$0680753 = 0;$470 = 0;
    while(1) {
     $469 = $470 << 2;
     $471 = (($428) + ($469))|0;
     $472 = ($471>>>0)<($2>>>0);
     if ($472) {
      $473 = (($1) + ($471)|0);
      $474 = HEAP8[$473>>0]|0;
      $475 = $474&255;
      $484 = $475;
     } else {
      $484 = 0;
     }
     $476 = (($471) + 1)|0;
     $477 = ($476>>>0)<($2>>>0);
     if ($477) {
      $478 = (($1) + ($476)|0);
      $479 = HEAP8[$478>>0]|0;
      $480 = $479&255;
      $482 = $480;
     } else {
      $482 = 0;
     }
     $481 = $482 << 8;
     $483 = $481 | $484;
     $485 = $483&65535;
     $486 = ((((($355) + (($354*280)|0)|0)) + 188|0) + ($470<<2)|0);
     HEAP16[$486>>1] = $485;
     $487 = (($471) + 2)|0;
     $488 = ($487>>>0)<($2>>>0);
     if ($488) {
      $489 = (($1) + ($487)|0);
      $490 = HEAP8[$489>>0]|0;
      $491 = $490&255;
      $500 = $491;
     } else {
      $500 = 0;
     }
     $492 = (($471) + 3)|0;
     $493 = ($492>>>0)<($2>>>0);
     if ($493) {
      $494 = (($1) + ($492)|0);
      $495 = HEAP8[$494>>0]|0;
      $496 = $495&255;
      $498 = $496;
     } else {
      $498 = 0;
     }
     $497 = $498 << 8;
     $499 = $497 | $500;
     $501 = $499&65535;
     $502 = ((((((($355) + (($354*280)|0)|0)) + 188|0) + ($470<<2)|0)) + 2|0);
     HEAP16[$502>>1] = $501;
     $503 = (($$0680753) + 1)<<24>>24;
     $504 = $503&255;
     $505 = HEAP8[$422>>0]|0;
     $506 = ($503&255)<($505&255);
     if ($506) {
      $$0680753 = $503;$470 = $504;
     } else {
      break;
     }
    }
   }
   $467 = (($$1673777) + 227)|0;
   $468 = ($467>>>0)<($2>>>0);
   if ($468) {
    $507 = (($1) + ($467)|0);
    $508 = HEAP8[$507>>0]|0;
    $509 = $508&255;
    $511 = $509;
   } else {
    $511 = 0;
   }
   $510 = $511&255;
   $512 = (((($355) + (($354*280)|0)|0)) + 173|0);
   HEAP8[$512>>0] = $510;
   $513 = (($$1673777) + 228)|0;
   $514 = ($513>>>0)<($2>>>0);
   if ($514) {
    $515 = (($1) + ($513)|0);
    $516 = HEAP8[$515>>0]|0;
    $517 = $516&255;
    $519 = $517;
   } else {
    $519 = 0;
   }
   $518 = $519&255;
   $520 = (((($355) + (($354*280)|0)|0)) + 174|0);
   HEAP8[$520>>0] = $518;
   $521 = (($$1673777) + 229)|0;
   $522 = ($521>>>0)<($2>>>0);
   if ($522) {
    $523 = (($1) + ($521)|0);
    $524 = HEAP8[$523>>0]|0;
    $525 = $524&255;
    $527 = $525;
   } else {
    $527 = 0;
   }
   $526 = $527&255;
   $528 = (((($355) + (($354*280)|0)|0)) + 175|0);
   HEAP8[$528>>0] = $526;
   $529 = (($$1673777) + 230)|0;
   $530 = ($529>>>0)<($2>>>0);
   if ($530) {
    $531 = (($1) + ($529)|0);
    $532 = HEAP8[$531>>0]|0;
    $533 = $532&255;
    $535 = $533;
   } else {
    $535 = 0;
   }
   $534 = $535&255;
   $536 = (((($355) + (($354*280)|0)|0)) + 237|0);
   HEAP8[$536>>0] = $534;
   $537 = (($$1673777) + 231)|0;
   $538 = ($537>>>0)<($2>>>0);
   if ($538) {
    $539 = (($1) + ($537)|0);
    $540 = HEAP8[$539>>0]|0;
    $541 = $540&255;
    $543 = $541;
   } else {
    $543 = 0;
   }
   $542 = $543&255;
   $544 = (((($355) + (($354*280)|0)|0)) + 238|0);
   HEAP8[$544>>0] = $542;
   $545 = (($$1673777) + 232)|0;
   $546 = ($545>>>0)<($2>>>0);
   if ($546) {
    $547 = (($1) + ($545)|0);
    $548 = HEAP8[$547>>0]|0;
    $549 = $548&255;
    $551 = $549;
   } else {
    $551 = 0;
   }
   $550 = $551&255;
   $552 = (((($355) + (($354*280)|0)|0)) + 239|0);
   HEAP8[$552>>0] = $550;
   $553 = (($$1673777) + 233)|0;
   $554 = ($553>>>0)<($2>>>0);
   if ($554) {
    $555 = (($1) + ($553)|0);
    $556 = HEAP8[$555>>0]|0;
    $557 = $556&255;
    $559 = $557;
   } else {
    $559 = 0;
   }
   $558 = $559 & 1;
   $560 = (((($355) + (($354*280)|0)|0)) + 176|0);
   HEAP32[$560>>2] = $558;
   $561 = $559 & 2;
   $562 = (((($355) + (($354*280)|0)|0)) + 180|0);
   HEAP32[$562>>2] = $561;
   $563 = $559 & 4;
   $564 = (((($355) + (($354*280)|0)|0)) + 184|0);
   HEAP32[$564>>2] = $563;
   $565 = (($$1673777) + 234)|0;
   $566 = ($565>>>0)<($2>>>0);
   if ($566) {
    $567 = (($1) + ($565)|0);
    $568 = HEAP8[$567>>0]|0;
    $569 = $568&255;
    $571 = $569;
   } else {
    $571 = 0;
   }
   $570 = $571 & 1;
   $572 = (((($355) + (($354*280)|0)|0)) + 240|0);
   HEAP32[$572>>2] = $570;
   $573 = $571 & 2;
   $574 = (((($355) + (($354*280)|0)|0)) + 244|0);
   HEAP32[$574>>2] = $573;
   $575 = $571 & 4;
   $576 = (((($355) + (($354*280)|0)|0)) + 248|0);
   HEAP32[$576>>2] = $575;
   $577 = (($$1673777) + 235)|0;
   $578 = ($577>>>0)<($2>>>0);
   L213: do {
    if ($578) {
     $580 = (($1) + ($577)|0);
     $581 = HEAP8[$580>>0]|0;
     $582 = $581&255;
     $583 = (((($355) + (($354*280)|0)|0)) + 252|0);
     HEAP32[$583>>2] = $582;
     switch ($581<<24>>24) {
     case 2:  {
      $$sink694 = 1;
      break;
     }
     case 1:  {
      $$sink694 = 2;
      break;
     }
     default: {
      break L213;
     }
     }
     HEAP32[$583>>2] = $$sink694;
    } else {
     $579 = (((($355) + (($354*280)|0)|0)) + 252|0);
     HEAP32[$579>>2] = 0;
    }
   } while(0);
   $584 = (($$1673777) + 236)|0;
   $585 = ($584>>>0)<($2>>>0);
   if ($585) {
    $586 = (($1) + ($584)|0);
    $587 = HEAP8[$586>>0]|0;
    $588 = $587&255;
    $590 = $588;
   } else {
    $590 = 0;
   }
   $589 = $590&255;
   $591 = (((($355) + (($354*280)|0)|0)) + 256|0);
   HEAP8[$591>>0] = $589;
   $592 = (($$1673777) + 237)|0;
   $593 = ($592>>>0)<($2>>>0);
   if ($593) {
    $594 = (($1) + ($592)|0);
    $595 = HEAP8[$594>>0]|0;
    $596 = $595&255;
    $598 = $596;
   } else {
    $598 = 0;
   }
   $597 = $598&255;
   $599 = (((($355) + (($354*280)|0)|0)) + 257|0);
   HEAP8[$599>>0] = $597;
   $600 = (($$1673777) + 238)|0;
   $601 = ($600>>>0)<($2>>>0);
   if ($601) {
    $602 = (($1) + ($600)|0);
    $603 = HEAP8[$602>>0]|0;
    $604 = $603&255;
    $606 = $604;
   } else {
    $606 = 0;
   }
   $605 = $606&255;
   $607 = (((($355) + (($354*280)|0)|0)) + 258|0);
   HEAP8[$607>>0] = $605;
   $608 = (($$1673777) + 239)|0;
   $609 = ($608>>>0)<($2>>>0);
   if ($609) {
    $610 = (($1) + ($608)|0);
    $611 = HEAP8[$610>>0]|0;
    $612 = $611&255;
    $621 = $612;
   } else {
    $621 = 0;
   }
   $613 = (($$1673777) + 240)|0;
   $614 = ($613>>>0)<($2>>>0);
   if ($614) {
    $615 = (($1) + ($613)|0);
    $616 = HEAP8[$615>>0]|0;
    $617 = $616&255;
    $619 = $617;
   } else {
    $619 = 0;
   }
   $618 = $619 << 8;
   $620 = $618 | $621;
   $622 = $620&65535;
   $623 = (((($355) + (($354*280)|0)|0)) + 260|0);
   HEAP16[$623>>1] = $622;
   $624 = (((($355) + (($354*280)|0)|0)) + 276|0);
   HEAP32[$624>>2] = $$1778;
   $625 = HEAP16[$373>>1]|0;
   $626 = $625&65535;
   $627 = ($626*80)|0;
   $628 = (($$1778) + ($627)|0);
   $$0687 = $404;$$2 = $628;
  }
  $630 = ($$1673777>>>0)<($2>>>0);
  if ($630) {
   $631 = (($1) + ($$1673777)|0);
   $632 = HEAP8[$631>>0]|0;
   $633 = $632&255;
   $642 = $633;
  } else {
   $642 = 0;
  }
  $634 = (($$1673777) + 1)|0;
  $635 = ($634>>>0)<($2>>>0);
  if ($635) {
   $636 = (($1) + ($634)|0);
   $637 = HEAP8[$636>>0]|0;
   $638 = $637&255;
   $640 = $638;
  } else {
   $640 = 0;
  }
  $639 = $640 << 8;
  $641 = $639 | $642;
  $643 = (($$1673777) + 2)|0;
  $644 = ($643>>>0)<($2>>>0);
  if ($644) {
   $645 = (($1) + ($643)|0);
   $646 = HEAP8[$645>>0]|0;
   $647 = $646&255;
   $656 = $647;
  } else {
   $656 = 0;
  }
  $648 = (($$1673777) + 3)|0;
  $649 = ($648>>>0)<($2>>>0);
  if ($649) {
   $650 = (($1) + ($648)|0);
   $651 = HEAP8[$650>>0]|0;
   $652 = $651&255;
   $654 = $652;
  } else {
   $654 = 0;
  }
  $653 = $654 << 8;
  $655 = $653 | $656;
  $657 = $655 << 16;
  $658 = $641 | $657;
  $659 = (($658) + ($$1673777))|0;
  $660 = HEAP16[$373>>1]|0;
  $661 = ($660<<16>>16)==(0);
  if ($661) {
   $$3$lcssa794 = $$2;$$3675$lcssa = $659;
  } else {
   $662 = (((($355) + (($354*280)|0)|0)) + 276|0);
   $$0679755 = 0;$$2674756 = $659;$$3757 = $$2;
   while(1) {
    $666 = $$0679755&65535;
    $667 = HEAP32[$662>>2]|0;
    $668 = ($$2674756>>>0)<($2>>>0);
    if ($668) {
     $669 = (($1) + ($$2674756)|0);
     $670 = HEAP8[$669>>0]|0;
     $671 = $670&255;
     $680 = $671;
    } else {
     $680 = 0;
    }
    $672 = (($$2674756) + 1)|0;
    $673 = ($672>>>0)<($2>>>0);
    if ($673) {
     $674 = (($1) + ($672)|0);
     $675 = HEAP8[$674>>0]|0;
     $676 = $675&255;
     $678 = $676;
    } else {
     $678 = 0;
    }
    $677 = $678 << 8;
    $679 = $677 | $680;
    $681 = (($$2674756) + 2)|0;
    $682 = ($681>>>0)<($2>>>0);
    if ($682) {
     $683 = (($1) + ($681)|0);
     $684 = HEAP8[$683>>0]|0;
     $685 = $684&255;
     $694 = $685;
    } else {
     $694 = 0;
    }
    $686 = (($$2674756) + 3)|0;
    $687 = ($686>>>0)<($2>>>0);
    if ($687) {
     $688 = (($1) + ($686)|0);
     $689 = HEAP8[$688>>0]|0;
     $690 = $689&255;
     $692 = $690;
    } else {
     $692 = 0;
    }
    $691 = $692 << 8;
    $693 = $691 | $694;
    $695 = $693 << 16;
    $696 = $679 | $695;
    $697 = (((($667) + (($666*80)|0)|0)) + 24|0);
    HEAP32[$697>>2] = $696;
    $698 = (($$2674756) + 4)|0;
    $699 = ($698>>>0)<($2>>>0);
    if ($699) {
     $700 = (($1) + ($698)|0);
     $701 = HEAP8[$700>>0]|0;
     $702 = $701&255;
     $711 = $702;
    } else {
     $711 = 0;
    }
    $703 = (($$2674756) + 5)|0;
    $704 = ($703>>>0)<($2>>>0);
    if ($704) {
     $705 = (($1) + ($703)|0);
     $706 = HEAP8[$705>>0]|0;
     $707 = $706&255;
     $709 = $707;
    } else {
     $709 = 0;
    }
    $708 = $709 << 8;
    $710 = $708 | $711;
    $712 = (($$2674756) + 6)|0;
    $713 = ($712>>>0)<($2>>>0);
    if ($713) {
     $714 = (($1) + ($712)|0);
     $715 = HEAP8[$714>>0]|0;
     $716 = $715&255;
     $725 = $716;
    } else {
     $725 = 0;
    }
    $717 = (($$2674756) + 7)|0;
    $718 = ($717>>>0)<($2>>>0);
    if ($718) {
     $719 = (($1) + ($717)|0);
     $720 = HEAP8[$719>>0]|0;
     $721 = $720&255;
     $723 = $721;
    } else {
     $723 = 0;
    }
    $722 = $723 << 8;
    $724 = $722 | $725;
    $726 = $724 << 16;
    $727 = $710 | $726;
    $728 = (((($667) + (($666*80)|0)|0)) + 28|0);
    HEAP32[$728>>2] = $727;
    $729 = (($$2674756) + 8)|0;
    $730 = ($729>>>0)<($2>>>0);
    if ($730) {
     $731 = (($1) + ($729)|0);
     $732 = HEAP8[$731>>0]|0;
     $733 = $732&255;
     $742 = $733;
    } else {
     $742 = 0;
    }
    $734 = (($$2674756) + 9)|0;
    $735 = ($734>>>0)<($2>>>0);
    if ($735) {
     $736 = (($1) + ($734)|0);
     $737 = HEAP8[$736>>0]|0;
     $738 = $737&255;
     $740 = $738;
    } else {
     $740 = 0;
    }
    $739 = $740 << 8;
    $741 = $739 | $742;
    $743 = (($$2674756) + 10)|0;
    $744 = ($743>>>0)<($2>>>0);
    if ($744) {
     $745 = (($1) + ($743)|0);
     $746 = HEAP8[$745>>0]|0;
     $747 = $746&255;
     $756 = $747;
    } else {
     $756 = 0;
    }
    $748 = (($$2674756) + 11)|0;
    $749 = ($748>>>0)<($2>>>0);
    if ($749) {
     $750 = (($1) + ($748)|0);
     $751 = HEAP8[$750>>0]|0;
     $752 = $751&255;
     $754 = $752;
    } else {
     $754 = 0;
    }
    $753 = $754 << 8;
    $755 = $753 | $756;
    $757 = $755 << 16;
    $758 = $741 | $757;
    $759 = (((($667) + (($666*80)|0)|0)) + 32|0);
    HEAP32[$759>>2] = $758;
    $760 = HEAP32[$728>>2]|0;
    $761 = (($758) + ($760))|0;
    $762 = (((($667) + (($666*80)|0)|0)) + 36|0);
    HEAP32[$762>>2] = $761;
    $763 = (($$2674756) + 12)|0;
    $764 = ($763>>>0)<($2>>>0);
    if ($764) {
     $765 = (($1) + ($763)|0);
     $766 = HEAP8[$765>>0]|0;
     $767 = $766&255;
     $769 = $767;
    } else {
     $769 = 0;
    }
    $768 = (+($769|0));
    $770 = $768 * 0.015625;
    $771 = (((($667) + (($666*80)|0)|0)) + 40|0);
    HEAPF32[$771>>2] = $770;
    $772 = (($$2674756) + 13)|0;
    $773 = ($772>>>0)<($2>>>0);
    if ($773) {
     $774 = (($1) + ($772)|0);
     $775 = HEAP8[$774>>0]|0;
     $776 = $775&255;
     $778 = $776;
    } else {
     $778 = 0;
    }
    $777 = $778&255;
    $779 = (((($667) + (($666*80)|0)|0)) + 44|0);
    HEAP8[$779>>0] = $777;
    $780 = (($$2674756) + 14)|0;
    $781 = ($780>>>0)<($2>>>0);
    do {
     if ($781) {
      $782 = (($1) + ($780)|0);
      $783 = HEAP8[$782>>0]|0;
      $784 = $783&255;
      $785 = $784 & 3;
      $786 = ($785|0)==(0);
      if ($786) {
       $889 = $784;
       label = 204;
       break;
      }
      $788 = ($785|0)==(1);
      $789 = (((($667) + (($666*80)|0)|0)) + 48|0);
      $$sink = $788 ? 1 : 2;
      HEAP32[$789>>2] = $$sink;
      $791 = $784;
     } else {
      $889 = 0;
      label = 204;
     }
    } while(0);
    if ((label|0) == 204) {
     label = 0;
     $787 = (((($667) + (($666*80)|0)|0)) + 48|0);
     HEAP32[$787>>2] = 0;
     $791 = $889;
    }
    $790 = $791 >>> 1;
    $792 = $790 & 8;
    $793 = (($792) + 8)|0;
    $794 = $793&255;
    $795 = (((($667) + (($666*80)|0)|0)) + 23|0);
    HEAP8[$795>>0] = $794;
    $796 = (($$2674756) + 15)|0;
    $797 = ($796>>>0)<($2>>>0);
    if ($797) {
     $798 = (($1) + ($796)|0);
     $799 = HEAP8[$798>>0]|0;
     $800 = $799&255;
     $802 = $800;
    } else {
     $802 = 0;
    }
    $801 = (+($802|0));
    $803 = $801 / 255.0;
    $804 = (((($667) + (($666*80)|0)|0)) + 52|0);
    HEAPF32[$804>>2] = $803;
    $805 = (($$2674756) + 16)|0;
    $806 = ($805>>>0)<($2>>>0);
    if ($806) {
     $807 = (($1) + ($805)|0);
     $808 = HEAP8[$807>>0]|0;
     $809 = $808&255;
     $811 = $809;
    } else {
     $811 = 0;
    }
    $810 = $811&255;
    $812 = (((($667) + (($666*80)|0)|0)) + 56|0);
    HEAP8[$812>>0] = $810;
    $813 = (($667) + (($666*80)|0)|0);
    _memcpy_pad($813,22,$1,$2,18);
    $814 = (((($667) + (($666*80)|0)|0)) + 72|0);
    HEAP32[$814>>2] = $$3757;
    $815 = HEAP8[$795>>0]|0;
    $816 = ($815<<24>>24)==(16);
    $817 = HEAP32[$697>>2]|0;
    if ($816) {
     $818 = $817 << 1;
     $819 = HEAP32[$728>>2]|0;
     $820 = $819 >>> 1;
     HEAP32[$728>>2] = $820;
     $821 = HEAP32[$759>>2]|0;
     $822 = $821 >>> 1;
     HEAP32[$759>>2] = $822;
     $823 = HEAP32[$762>>2]|0;
     $824 = $823 >>> 1;
     HEAP32[$762>>2] = $824;
     $825 = HEAP32[$697>>2]|0;
     $826 = $825 >>> 1;
     HEAP32[$697>>2] = $826;
     $$pn693 = $818;
    } else {
     $827 = $817 << 2;
     $$pn693 = $827;
    }
    $$4 = (($$3757) + ($$pn693)|0);
    $828 = (($$2674756) + ($$0687))|0;
    $829 = (($$0679755) + 1)<<16>>16;
    $664 = HEAP16[$373>>1]|0;
    $830 = ($829&65535)<($664&65535);
    if ($830) {
     $$0679755 = $829;$$2674756 = $828;$$3757 = $$4;
    } else {
     break;
    }
   }
   $663 = ($664<<16>>16)==(0);
   if ($663) {
    $$3$lcssa794 = $$4;$$3675$lcssa = $828;
   } else {
    $665 = (((($355) + (($354*280)|0)|0)) + 276|0);
    $$0677769 = 0;$$3675770 = $828;
    while(1) {
     $834 = $$0677769&65535;
     $835 = HEAP32[$665>>2]|0;
     $836 = (((($835) + (($834*80)|0)|0)) + 24|0);
     $837 = HEAP32[$836>>2]|0;
     $838 = (((($835) + (($834*80)|0)|0)) + 23|0);
     $839 = HEAP8[$838>>0]|0;
     $840 = ($839<<24>>24)==(16);
     $841 = ($837|0)!=(0);
     if ($840) {
      if ($841) {
       $843 = (((($835) + (($834*80)|0)|0)) + 72|0);
       $$0669766 = 0;$$0670765 = 0;
       while(1) {
        $sext691 = $$0670765 << 16;
        $846 = $sext691 >> 16;
        $847 = $$0669766 << 1;
        $848 = (($847) + ($$3675770))|0;
        $849 = ($848>>>0)<($2>>>0);
        if ($849) {
         $850 = (($1) + ($848)|0);
         $851 = HEAP8[$850>>0]|0;
         $852 = $851&255;
         $861 = $852;
        } else {
         $861 = 0;
        }
        $853 = (($848) + 1)|0;
        $854 = ($853>>>0)<($2>>>0);
        if ($854) {
         $855 = (($1) + ($853)|0);
         $856 = HEAP8[$855>>0]|0;
         $857 = $856&255;
         $859 = $857;
        } else {
         $859 = 0;
        }
        $858 = $859 << 8;
        $860 = $858 | $861;
        $sext692 = $860 << 16;
        $862 = $sext692 >> 16;
        $863 = (($862) + ($846))|0;
        $864 = $863&65535;
        $865 = (+($864<<16>>16));
        $866 = $865 * 3.0517578125E-5;
        $867 = HEAP32[$843>>2]|0;
        $868 = (($867) + ($$0669766<<2)|0);
        HEAPF32[$868>>2] = $866;
        $869 = (($$0669766) + 1)|0;
        $exitcond793 = ($869|0)==($837|0);
        if ($exitcond793) {
         break;
        } else {
         $$0669766 = $869;$$0670765 = $863;
        }
       }
      }
      $844 = HEAP32[$836>>2]|0;
      $845 = $844 << 1;
      $$pn = $845;
     } else {
      if ($841) {
       $842 = (((($835) + (($834*80)|0)|0)) + 72|0);
       $$0668761 = 0;$$0762 = 0;
       while(1) {
        $sext = $$0668761 << 24;
        $871 = $sext >> 24;
        $872 = (($$0762) + ($$3675770))|0;
        $873 = ($872>>>0)<($2>>>0);
        if ($873) {
         $874 = (($1) + ($872)|0);
         $875 = HEAP8[$874>>0]|0;
         $876 = $875&255;
         $877 = $876;
        } else {
         $877 = 0;
        }
        $sext690 = $877 << 24;
        $878 = $sext690 >> 24;
        $879 = (($878) + ($871))|0;
        $880 = $879&255;
        $881 = (+($880<<24>>24));
        $882 = $881 * 0.0078125;
        $883 = HEAP32[$842>>2]|0;
        $884 = (($883) + ($$0762<<2)|0);
        HEAPF32[$884>>2] = $882;
        $885 = (($$0762) + 1)|0;
        $exitcond = ($885|0)==($837|0);
        if ($exitcond) {
         break;
        } else {
         $$0668761 = $879;$$0762 = $885;
        }
       }
      }
      $870 = HEAP32[$836>>2]|0;
      $$pn = $870;
     }
     $$4676 = (($$pn) + ($$3675770))|0;
     $886 = (($$0677769) + 1)<<16>>16;
     $887 = HEAP16[$373>>1]|0;
     $888 = ($886&65535)<($887&65535);
     if ($888) {
      $$0677769 = $886;$$3675770 = $$4676;
     } else {
      $$3$lcssa794 = $$4;$$3675$lcssa = $$4676;
      break;
     }
    }
   }
  }
  $831 = (($$0688776) + 1)<<16>>16;
  $832 = HEAP16[$98>>1]|0;
  $833 = ($831&65535)<($832&65535);
  if ($833) {
   $$0688776 = $831;$$1673777 = $$3675$lcssa;$$1778 = $$3$lcssa794;
  } else {
   $$1$lcssa = $$3$lcssa794;
   break;
  }
 }
 return ($$1$lcssa|0);
}
function _jar_xm_check_sanity_postload($0) {
 $0 = $0|0;
 var $$01113 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 46|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  $24 = 0;
  return ($24|0);
 }
 $4 = $2&65535;
 $5 = ((($0)) + 52|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $$01113 = 0;$15 = $4;$17 = $2;$9 = 0;
 while(1) {
  $8 = (((($0)) + 60|0) + ($9)|0);
  $10 = HEAP8[$8>>0]|0;
  $11 = $10&255;
  $12 = ($11>>>0)<($7>>>0);
  if (!($12)) {
   $13 = (($9) + 1)|0;
   $14 = ($13|0)==($15|0);
   $16 = ($17&65535)>(1);
   $or$cond = $16 & $14;
   if (!($or$cond)) {
    $24 = 1;
    label = 7;
    break;
   }
   $18 = (($17) + -1)<<16>>16;
   HEAP16[$1>>1] = $18;
  }
  $19 = (($$01113) + 1)<<24>>24;
  $20 = $19&255;
  $21 = HEAP16[$1>>1]|0;
  $22 = $21&65535;
  $23 = ($20>>>0)<($22>>>0);
  if ($23) {
   $$01113 = $19;$15 = $22;$17 = $21;$9 = $20;
  } else {
   $24 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($24|0);
 }
 return (0)|0;
}
function _jar_xm_free_context($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _free($1);
 return;
}
function _memcpy_pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $10 = 0, $11 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($3>>>0)<($4>>>0);
 $6 = (($3) - ($4))|0;
 $$ = $5 ? 0 : $6;
 $7 = ($$>>>0)>($1>>>0);
 $8 = $7 ? $1 : $$;
 $9 = (($2) + ($4)|0);
 _memcpy(($0|0),($9|0),($8|0))|0;
 $10 = (($0) + ($8)|0);
 $11 = (($1) - ($8))|0;
 _memset(($10|0),0,($11|0))|0;
 return;
}
function _jar_xm_set_max_loop_count($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 385|0);
 HEAP8[$2>>0] = $1;
 return;
}
function _jar_xm_get_loop_count($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 384|0);
 $2 = HEAP8[$1>>0]|0;
 return ($2|0);
}
function _jar_xm_get_remaining_samples($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_jar_xm_get_loop_count($0)|0);
 _jar_xm_set_max_loop_count($0,0);
 $2 = (_jar_xm_get_loop_count($0)|0);
 $3 = ($2<<24>>24)==($1<<24>>24);
 if (!($3)) {
  $15 = 0;$16 = 0;
  $14 = ((($0)) + 384|0);
  HEAP8[$14>>0] = $1;
  tempRet0 = ($15);
  return ($16|0);
 }
 $4 = ((($0)) + 352|0);
 $6 = 0;$7 = 0;
 while(1) {
  $5 = +HEAPF32[$4>>2];
  $8 = (+($6>>>0)) + (4294967296.0*(+($7>>>0)));
  $9 = $8 + $5;
  $10 = (~~$9)>>>0;
  $11 = +Math_abs($9) >= 1.0 ? $9 > 0.0 ? (~~+Math_min(+Math_floor($9 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($9 - +(~~$9 >>> 0)) / 4294967296.0) >>> 0 : 0;
  HEAPF32[$4>>2] = 0.0;
  _jar_xm_tick($0);
  $12 = (_jar_xm_get_loop_count($0)|0);
  $13 = ($12<<24>>24)==($1<<24>>24);
  if ($13) {
   $6 = $10;$7 = $11;
  } else {
   $15 = $11;$16 = $10;
   break;
  }
 }
 $14 = ((($0)) + 384|0);
 HEAP8[$14>>0] = $1;
 tempRet0 = ($15);
 return ($16|0);
}
function _jar_xm_create_context_from_file($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $$1$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_fopen($2,14498)|0);
 $4 = ($3|0)==(0|0);
 L1: do {
  if ($4) {
   $5 = HEAP32[1327]|0;
   (_fwrite(13251,25,1,$5)|0);
   (_fflush($5)|0);
   $$1$ph = 3;
  } else {
   (_fseek($3,0,2)|0);
   $6 = (_ftell($3)|0);
   _rewind($3);
   $7 = ($6|0)==(-1);
   if ($7) {
    (_fclose($3)|0);
    $8 = HEAP32[1327]|0;
    (_fwrite(13277,14,1,$8)|0);
    (_fflush($8)|0);
    $$1$ph = 4;
    break;
   }
   $9 = (($6) + 1)|0;
   $10 = (_malloc($9)|0);
   $11 = (_fread($10,1,$6,$3)|0);
   $12 = ($11>>>0)<($6>>>0);
   (_fclose($3)|0);
   if ($12) {
    $13 = HEAP32[1327]|0;
    (_fwrite(13292,14,1,$13)|0);
    (_fflush($13)|0);
    $$1$ph = 5;
    break;
   }
   $14 = (_jar_xm_create_context_safe($0,$10,$6,$1)|0);
   switch ($14|0) {
   case 1:  {
    $15 = HEAP32[1327]|0;
    (_fwrite(13307,45,1,$15)|0);
    (_fflush($15)|0);
    $$1$ph = 1;
    break L1;
    break;
   }
   case 2:  {
    $16 = HEAP32[1327]|0;
    (_fwrite(13353,40,1,$16)|0);
    (_fflush($16)|0);
    _exit(1);
    // unreachable;
    break;
   }
   case 0:  {
    $$1 = 0;
    return ($$1|0);
    break;
   }
   default: {
    $17 = HEAP32[1327]|0;
    (_fwrite(13394,40,1,$17)|0);
    (_fflush($17)|0);
    _exit(1);
    // unreachable;
   }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $$1 = $$1$ph;
 return ($$1|0);
}
function _jar_mod_init($0) {
 $0 = $0|0;
 var $$021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$021 = 0;
  return ($$021|0);
 }
 _memclear($0,5884);
 $2 = ((($0)) + 1724|0);
 HEAP32[$2>>2] = 48000;
 $3 = ((($0)) + 5864|0);
 HEAP16[$3>>1] = 1;
 $4 = ((($0)) + 5866|0);
 HEAP16[$4>>1] = 1;
 $5 = ((($0)) + 5868|0);
 HEAP16[$5>>1] = 16;
 $6 = ((($0)) + 5870|0);
 HEAP16[$6>>1] = 1;
 $indvars$iv = 0;
 while(1) {
  $7 = (6002 + ($indvars$iv<<1)|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 << 16 >> 16;
  $10 = (($indvars$iv) + 1)|0;
  $11 = (6002 + ($10<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = (($9) - ($13))|0;
  $15 = (($14|0) / 8)&-1;
  $16 = $indvars$iv << 3;
  $17 = (((($0)) + 3554|0) + ($16<<1)|0);
  HEAP16[$17>>1] = $8;
  $18 = (($9) - ($15))|0;
  $19 = $18&65535;
  $20 = $16 | 1;
  $21 = (((($0)) + 3554|0) + ($20<<1)|0);
  HEAP16[$21>>1] = $19;
  $22 = $15 << 1;
  $23 = (($9) - ($22))|0;
  $24 = $23&65535;
  $25 = $16 | 2;
  $26 = (((($0)) + 3554|0) + ($25<<1)|0);
  HEAP16[$26>>1] = $24;
  $27 = Math_imul($15, -3)|0;
  $28 = (($9) + ($27))|0;
  $29 = $28&65535;
  $30 = $16 | 3;
  $31 = (((($0)) + 3554|0) + ($30<<1)|0);
  HEAP16[$31>>1] = $29;
  $32 = $15 << 2;
  $33 = (($9) - ($32))|0;
  $34 = $33&65535;
  $35 = $16 | 4;
  $36 = (((($0)) + 3554|0) + ($35<<1)|0);
  HEAP16[$36>>1] = $34;
  $37 = Math_imul($15, -5)|0;
  $38 = (($9) + ($37))|0;
  $39 = $38&65535;
  $40 = $16 | 5;
  $41 = (((($0)) + 3554|0) + ($40<<1)|0);
  HEAP16[$41>>1] = $39;
  $42 = Math_imul($15, -6)|0;
  $43 = (($9) + ($42))|0;
  $44 = $43&65535;
  $45 = $16 | 6;
  $46 = (((($0)) + 3554|0) + ($45<<1)|0);
  HEAP16[$46>>1] = $44;
  $47 = Math_imul($15, -7)|0;
  $48 = (($9) + ($47))|0;
  $49 = $48&65535;
  $50 = $16 | 7;
  $51 = (((($0)) + 3554|0) + ($50<<1)|0);
  HEAP16[$51>>1] = $49;
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $exitcond = ($indvars$iv$next|0)==(143);
  if ($exitcond) {
   $$021 = 1;
   break;
  } else {
   $indvars$iv = $indvars$iv$next;
  }
 }
 return ($$021|0);
}
function _memclear($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 _memset(($0|0),0,($1|0))|0;
 return;
}
function _jar_mod_fillbuffer($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$4 = 0, $$$4261 = 0, $$0248300 = 0, $$0249281 = 0, $$0250272 = 0, $$0252$lcssa = 0, $$0252293 = 0, $$0253$lcssa = 0, $$0253292 = 0, $$0254$ = 0, $$0254$lcssa = 0, $$0254280 = 0, $$0257$ = 0, $$0257$lcssa = 0, $$0257279 = 0, $$0264291 = 0, $$0284 = 0, $$1251276 = 0, $$1255$ph = 0, $$1255268 = 0;
 var $$1258 = 0, $$1265 = 0, $$1294 = 0, $$2256 = 0, $$2259 = 0, $$4 = 0, $$4261 = 0, $$6 = 0, $$6263 = 0, $$lcssa = 0, $$off = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $div = 0, $exitcond = 0, $exitcond304 = 0, $or$cond = 0, $or$cond3 = 0, $sext = 0, $sext266 = 0, $sext267 = 0, $switch = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)!=(0|0);
 $5 = ($1|0)!=(0|0);
 $or$cond = $4 & $5;
 if (!($or$cond)) {
  return;
 }
 $6 = ((($0)) + 5858|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(0);
 if ($8) {
  $9 = ($2|0)==(0);
  if (!($9)) {
   $267 = $2 << 2;
   _memset(($1|0),0,($267|0))|0;
  }
  $268 = ($3|0)==(0|0);
  if ($268) {
   return;
  }
  $269 = ((($3)) + 4|0);
  HEAP32[$269>>2] = 0;
  $270 = ((($3)) + 8|0);
  HEAP32[$270>>2] = 0;
  $271 = ((($3)) + 16|0);
  HEAP8[$271>>0] = 0;
  $272 = ((($3)) + 948|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = HEAP32[$3>>2]|0;
  $275 = ($274*348)|0;
  _memclear($273,$275);
  $276 = ((($3)) + 80|0);
  _memclear($276,868);
  return;
 }
 $10 = ($3|0)==(0|0);
 if (!($10)) {
  $11 = ((($3)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($3)) + 16|0);
  _memcopy($12,$0,20);
  $$0248300 = 0;
  while(1) {
   $13 = (((($3)) + 80|0) + (($$0248300*28)|0)|0);
   $14 = (((($0)) + 20|0) + (($$0248300*30)|0)|0);
   _memcopy($13,$14,22);
   $15 = (($$0248300) + 1)|0;
   $exitcond304 = ($15|0)==(31);
   if ($exitcond304) {
    break;
   } else {
    $$0248300 = $15;
   }
  }
 }
 $16 = ((($0)) + 5862|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = ((($0)) + 5860|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = ($2|0)==(0);
 if ($22) {
  $$0252$lcssa = $21;$$0253$lcssa = $18;
 } else {
  $23 = ((($0)) + 1740|0);
  $24 = ((($0)) + 1748|0);
  $25 = ((($0)) + 1732|0);
  $26 = ((($0)) + 1728|0);
  $27 = ((($0)) + 1730|0);
  $28 = ((($0)) + 1744|0);
  $29 = ((($0)) + 3552|0);
  $30 = ((($0)) + 1734|0);
  $31 = ((($0)) + 950|0);
  $32 = ((($0)) + 5880|0);
  $33 = ((($0)) + 1744|0);
  $34 = ((($0)) + 1744|0);
  $35 = ((($0)) + 1084|0);
  $36 = ((($0)) + 1760|0);
  $37 = ((($0)) + 3552|0);
  $38 = ((($0)) + 5870|0);
  $39 = ((($0)) + 5866|0);
  $40 = ((($3)) + 12|0);
  $41 = ((($3)) + 4|0);
  $42 = ((($3)) + 4|0);
  $43 = ((($3)) + 948|0);
  $44 = ((($0)) + 1728|0);
  $45 = ((($0)) + 1730|0);
  $46 = ((($0)) + 1736|0);
  $47 = ((($0)) + 1752|0);
  $48 = ((($3)) + 4|0);
  $49 = ((($3)) + 948|0);
  $50 = ((($0)) + 3552|0);
  $$0252293 = $21;$$0253292 = $18;$$0264291 = 0;$$1294 = 0;
  while(1) {
   $51 = HEAP32[$23>>2]|0;
   $52 = (($51) + 1)|0;
   HEAP32[$23>>2] = $52;
   $53 = HEAP32[$24>>2]|0;
   $54 = ($51>>>0)>($53>>>0);
   do {
    if ($54) {
     $55 = HEAP16[$25>>1]|0;
     $56 = ($55<<16>>16)==(0);
     if (!($56)) {
      $96 = (($55) + -1)<<16>>16;
      HEAP16[$25>>1] = $96;
      HEAP32[$23>>2] = 0;
      HEAP32[$33>>2] = 0;
      break;
     }
     $57 = HEAP16[$26>>1]|0;
     $58 = $57&65535;
     $59 = (((($0)) + 952|0) + ($58)|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60&255;
     $62 = (((($0)) + 1212|0) + ($61<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = HEAP16[$27>>1]|0;
     $65 = $64&65535;
     $66 = (($63) + ($65<<2)|0);
     HEAP32[$23>>2] = 0;
     HEAP32[$28>>2] = 0;
     $67 = HEAP16[$29>>1]|0;
     $68 = $67&65535;
     $69 = ($67<<16>>16)==(0);
     if ($69) {
      $$lcssa = $68;
     } else {
      $$0250272 = 0;$71 = 0;
      while(1) {
       $70 = (($66) + ($71<<2)|0);
       $72 = (((($0)) + 1760|0) + (($71*56)|0)|0);
       _worknote($70,$72,$0);
       $73 = (($$0250272) + 1)<<24>>24;
       $74 = $73&255;
       $75 = HEAP16[$29>>1]|0;
       $76 = $75&65535;
       $77 = ($74>>>0)<($76>>>0);
       if ($77) {
        $$0250272 = $73;$71 = $74;
       } else {
        $$lcssa = $76;
        break;
       }
      }
     }
     $78 = HEAP16[$30>>1]|0;
     $79 = ($78<<16>>16)==(0);
     if ($79) {
      $80 = HEAP16[$27>>1]|0;
      $81 = $80&65535;
      $82 = (($81) + ($$lcssa))|0;
      $83 = $82&65535;
      HEAP16[$27>>1] = $83;
     } else {
      HEAP16[$30>>1] = 0;
     }
     $84 = HEAP16[$27>>1]|0;
     $85 = $84&65535;
     $86 = $$lcssa << 6;
     $87 = ($85|0)==($86|0);
     if ($87) {
      $88 = HEAP16[$26>>1]|0;
      $89 = (($88) + 1)<<16>>16;
      HEAP16[$26>>1] = $89;
      HEAP16[$27>>1] = 0;
      $90 = $89&65535;
      $91 = HEAP8[$31>>0]|0;
      $92 = $91&255;
      $93 = ($90>>>0)<($92>>>0);
      if (!($93)) {
       HEAP16[$26>>1] = 0;
       $94 = HEAP16[$32>>1]|0;
       $95 = (($94) + 1)<<16>>16;
       HEAP16[$32>>1] = $95;
      }
     }
    }
   } while(0);
   $97 = HEAP32[$34>>2]|0;
   $98 = (($97) + 1)|0;
   HEAP32[$34>>2] = $98;
   $99 = HEAP32[$24>>2]|0;
   $100 = HEAP8[$35>>0]|0;
   $101 = $100&255;
   $102 = (($99>>>0) / ($101>>>0))&-1;
   $103 = ($97>>>0)>($102>>>0);
   if ($103) {
    $104 = HEAP16[$50>>1]|0;
    $105 = ($104<<16>>16)==(0);
    if (!($105)) {
     $$1251276 = 0;$107 = 0;
     while(1) {
      $106 = (((($0)) + 1760|0) + (($107*56)|0)|0);
      _workeffect($106);
      $108 = (($$1251276) + 1)<<24>>24;
      $109 = $108&255;
      $110 = HEAP16[$50>>1]|0;
      $111 = $110&65535;
      $112 = ($109>>>0)<($111>>>0);
      if ($112) {
       $$1251276 = $108;$107 = $109;
      } else {
       break;
      }
     }
    }
    HEAP32[$34>>2] = 0;
   }
   $113 = ($$0264291|0)!=(0);
   $or$cond3 = $10 | $113;
   if (!($or$cond3)) {
    $114 = HEAP32[$48>>2]|0;
    $115 = HEAP32[$3>>2]|0;
    $116 = ($114|0)<($115|0);
    if ($116) {
     $117 = HEAP32[$49>>2]|0;
     $118 = (($117) + (($114*348)|0)|0);
     _memclear($118,348);
    }
   }
   $119 = HEAP16[$37>>1]|0;
   $120 = ($119<<16>>16)==(0);
   if ($120) {
    $$0254$lcssa = 0;$$0257$lcssa = 0;
   } else {
    $$0249281 = 0;$$0254280 = 0;$$0257279 = 0;$$0284 = $36;
    while(1) {
     $121 = ((($$0284)) + 16|0);
     $122 = HEAP16[$121>>1]|0;
     $123 = ($122<<16>>16)==(0);
     if ($123) {
      $$2256 = $$0254280;$$2259 = $$0257279;
     } else {
      $124 = $122&65535;
      $125 = ((($$0284)) + 28|0);
      $126 = HEAP16[$125>>1]|0;
      $127 = $126&65535;
      $128 = (($124) - ($127))|0;
      $129 = ((($$0284)) + 34|0);
      $130 = HEAP16[$129>>1]|0;
      $131 = $130&65535;
      $132 = (($128) - ($131))|0;
      $133 = $132&65535;
      $134 = ($133<<16>>16)==(0);
      if (!($134)) {
       $135 = HEAP32[$47>>2]|0;
       $136 = $135 << 10;
       $sext267 = $132 << 16;
       $137 = $sext267 >> 16;
       $138 = (($136>>>0) / ($137>>>0))&-1;
       $139 = ((($$0284)) + 12|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = (($140) + ($138))|0;
       HEAP32[$139>>2] = $141;
      }
      $142 = ((($$0284)) + 20|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = (($143) + 1)|0;
      HEAP32[$142>>2] = $144;
      $145 = ((($$0284)) + 10|0);
      $146 = HEAP16[$145>>1]|0;
      $147 = ($146&65535)<(3);
      $148 = ((($$0284)) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = $149 >>> 10;
      if ($147) {
       $151 = ((($$0284)) + 6|0);
       $152 = HEAP16[$151>>1]|0;
       $153 = $152&65535;
       $154 = ($150>>>0)<($153>>>0);
       if (!($154)) {
        HEAP16[$151>>1] = 0;
        $155 = ((($$0284)) + 8|0);
        HEAP16[$155>>1] = 0;
        HEAP32[$148>>2] = 0;
       }
      } else {
       $156 = $146&65535;
       $157 = ((($$0284)) + 8|0);
       $158 = HEAP16[$157>>1]|0;
       $159 = $158&65535;
       $160 = (($159) + ($156))|0;
       $161 = ($150>>>0)<($160>>>0);
       if (!($161)) {
        $162 = $160 << 10;
        $163 = $159 << 10;
        $164 = (($149>>>0) % ($162>>>0))&-1;
        $165 = (($164) + ($163))|0;
        HEAP32[$148>>2] = $165;
       }
      }
      $166 = HEAP32[$148>>2]|0;
      $167 = $166 >>> 10;
      $168 = HEAP32[$$0284>>2]|0;
      $169 = ($168|0)==(0|0);
      L64: do {
       if ($169) {
        $$1255268 = $$0254280;$$1258 = $$0257279;
       } else {
        $170 = $$0249281 & 3;
        $$off = (($170) + -1)|0;
        $switch = ($$off>>>0)<(2);
        if ($switch) {
         $171 = (($168) + ($167)|0);
         $172 = HEAP8[$171>>0]|0;
         $173 = $172 << 24 >> 24;
         $174 = ((($$0284)) + 18|0);
         $175 = HEAP8[$174>>0]|0;
         $176 = $175&255;
         $177 = Math_imul($176, $173)|0;
         $178 = (($177) + ($$0254280))|0;
         $$1255$ph = $178;
        } else {
         $$1255$ph = $$0254280;
        }
        $trunc = $$0249281&255;
        $trunc$clear = $trunc & 3;
        switch ($trunc$clear<<24>>24) {
        case 3: case 0:  {
         break;
        }
        default: {
         $$1255268 = $$1255$ph;$$1258 = $$0257279;
         break L64;
        }
        }
        $179 = (($168) + ($167)|0);
        $180 = HEAP8[$179>>0]|0;
        $181 = $180 << 24 >> 24;
        $182 = ((($$0284)) + 18|0);
        $183 = HEAP8[$182>>0]|0;
        $184 = $183&255;
        $185 = Math_imul($184, $181)|0;
        $186 = (($185) + ($$0257279))|0;
        $$1255268 = $$1255$ph;$$1258 = $186;
       }
      } while(0);
      if ($or$cond3) {
       $$2256 = $$1255268;$$2259 = $$1258;
      } else {
       $187 = HEAP32[$42>>2]|0;
       $188 = HEAP32[$3>>2]|0;
       $189 = ($187|0)<($188|0);
       if ($189) {
        $190 = HEAP16[$37>>1]|0;
        $191 = $190&65535;
        $192 = HEAP32[$43>>2]|0;
        $193 = (($192) + (($187*348)|0)|0);
        HEAP32[$193>>2] = $191;
        $194 = (((($192) + (($187*348)|0)|0)) + 24|0);
        HEAP32[$194>>2] = $$1294;
        $195 = HEAP16[$44>>1]|0;
        $196 = $195&65535;
        $197 = (((($0)) + 952|0) + ($196)|0);
        $198 = HEAP8[$197>>0]|0;
        $199 = $198&255;
        $200 = (((($192) + (($187*348)|0)|0)) + 12|0);
        HEAP32[$200>>2] = $199;
        $201 = HEAP16[$45>>1]|0;
        $div = (($201&65535) / ($190&65535))&-1;
        $202 = $div&65535;
        $203 = (((($192) + (($187*348)|0)|0)) + 16|0);
        HEAP32[$203>>2] = $202;
        $204 = (((($192) + (($187*348)|0)|0)) + 20|0);
        HEAP32[$204>>2] = $196;
        $205 = HEAP8[$46>>0]|0;
        $206 = $205&255;
        $207 = (((($192) + (($187*348)|0)|0)) + 4|0);
        HEAP32[$207>>2] = $206;
        $208 = HEAP8[$35>>0]|0;
        $209 = $208&255;
        $210 = (((($192) + (($187*348)|0)|0)) + 8|0);
        HEAP32[$210>>2] = $209;
        $211 = ((($$0284)) + 26|0);
        $212 = HEAP16[$211>>1]|0;
        $213 = ((((((($192) + (($187*348)|0)|0)) + 28|0) + (($$0249281*10)|0)|0)) + 6|0);
        HEAP16[$213>>1] = $212;
        $214 = ((($$0284)) + 25|0);
        $215 = HEAP8[$214>>0]|0;
        $216 = $215&255;
        $217 = ((((((($192) + (($187*348)|0)|0)) + 28|0) + (($$0249281*10)|0)|0)) + 8|0);
        HEAP16[$217>>1] = $216;
        $218 = ((((((($192) + (($187*348)|0)|0)) + 28|0) + (($$0249281*10)|0)|0)) + 2|0);
        HEAP16[$218>>1] = $133;
        $219 = ((($$0284)) + 18|0);
        $220 = HEAP8[$219>>0]|0;
        $221 = ((((((($192) + (($187*348)|0)|0)) + 28|0) + (($$0249281*10)|0)|0)) + 4|0);
        HEAP8[$221>>0] = $220;
        $222 = ((($$0284)) + 4|0);
        $223 = HEAP16[$222>>1]|0;
        $224 = $223&255;
        $225 = ((((($192) + (($187*348)|0)|0)) + 28|0) + (($$0249281*10)|0)|0);
        HEAP8[$225>>0] = $224;
        $$2256 = $$1255268;$$2259 = $$1258;
       } else {
        $$2256 = $$1255268;$$2259 = $$1258;
       }
      }
     }
     $226 = (($$0249281) + 1)|0;
     $227 = ((($$0284)) + 56|0);
     $228 = HEAP16[$37>>1]|0;
     $229 = $228&65535;
     $230 = ($226>>>0)<($229>>>0);
     if ($230) {
      $$0249281 = $226;$$0254280 = $$2256;$$0257279 = $$2259;$$0284 = $227;
     } else {
      $$0254$lcssa = $$2256;$$0257$lcssa = $$2259;
      break;
     }
    }
   }
   if ($or$cond3) {
    $236 = (($$0264291) + -1)|0;
    $$1265 = $236;
   } else {
    $231 = HEAP32[$40>>2]|0;
    $232 = HEAP32[$41>>2]|0;
    $233 = HEAP32[$3>>2]|0;
    $234 = ($232|0)<($233|0);
    if ($234) {
     $235 = (($232) + 1)|0;
     HEAP32[$41>>2] = $235;
     $$1265 = $231;
    } else {
     $$1265 = $231;
    }
   }
   $sext = $$0257$lcssa << 16;
   $237 = $sext >> 16;
   $sext266 = $$0254$lcssa << 16;
   $238 = $sext266 >> 16;
   $239 = HEAP16[$38>>1]|0;
   $240 = ($239<<16>>16)==(0);
   $241 = (($$0257$lcssa) + ($$0253292))|0;
   $242 = $241 >> 1;
   $243 = (($$0254$lcssa) + ($$0252293))|0;
   $244 = $243 >> 1;
   $$0257$ = $240 ? $$0257$lcssa : $242;
   $$0254$ = $240 ? $$0254$lcssa : $244;
   $245 = HEAP16[$39>>1]|0;
   $246 = ($245<<16>>16)==(1);
   $247 = $$0254$ >> 1;
   $248 = (($247) + ($$0257$))|0;
   $249 = $248 >> 1;
   $$4261 = $246 ? $248 : $$0257$;
   $250 = $246 ? $249 : 0;
   $$4 = (($250) + ($$0254$))|0;
   $251 = ($$4261|0)<(32767);
   $$$4261 = $251 ? $$4261 : 32767;
   $252 = ($$$4261|0)>(-32768);
   $$6263 = $252 ? $$$4261 : -32768;
   $253 = ($$4|0)<(32767);
   $$$4 = $253 ? $$4 : 32767;
   $254 = ($$$4|0)>(-32768);
   $$6 = $254 ? $$$4 : -32768;
   $255 = $$6263&65535;
   $256 = $$1294 << 1;
   $257 = (($1) + ($256<<1)|0);
   HEAP16[$257>>1] = $255;
   $258 = $$6&65535;
   $259 = $256 | 1;
   $260 = (($1) + ($259<<1)|0);
   HEAP16[$260>>1] = $258;
   $261 = (($$1294) + 1)|0;
   $exitcond = ($261|0)==($2|0);
   if ($exitcond) {
    $$0252$lcssa = $238;$$0253$lcssa = $237;
    break;
   } else {
    $$0252293 = $238;$$0253292 = $237;$$0264291 = $$1265;$$1294 = $261;
   }
  }
 }
 $262 = $$0253$lcssa&65535;
 HEAP16[$16>>1] = $262;
 $263 = $$0252$lcssa&65535;
 HEAP16[$19>>1] = $263;
 $264 = ((($0)) + 1756|0);
 $265 = HEAP32[$264>>2]|0;
 $266 = (($265) + ($2))|0;
 HEAP32[$264>>2] = $266;
 return;
}
function _memcopy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$013 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 } else {
  $$013 = 0;
 }
 while(1) {
  $4 = (($1) + ($$013)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = (($0) + ($$013)|0);
  HEAP8[$6>>0] = $5;
  $7 = (($$013) + 1)|0;
  $exitcond = ($7|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$013 = $7;
  }
 }
 return;
}
function _worknote($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1208 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$not = 0, $$off = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond3 = 0, $trunc = 0, $trunc$clear = 0, $trunc1 = 0, $trunc1$clear = 0, $trunc11$clear = 0, $trunc12 = 0, $trunc12$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$0>>0]|0;
 $4 = $3&255;
 $5 = $4 & 240;
 $6 = ((($0)) + 2|0);
 $trunc = HEAP8[$6>>0]|0;
 $7 = $trunc&255;
 $8 = $7 >>> 4;
 $9 = $8 | $5;
 $10 = $4 << 8;
 $11 = $10 & 3840;
 $12 = ((($0)) + 1|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $11 | $14;
 $16 = $15&65535;
 $17 = $7 << 8;
 $18 = $17 & 3840;
 $19 = ((($0)) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $18 | $21;
 $23 = $22&65535;
 $24 = ((($1)) + 16|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = ($15|0)==(0);
 $27 = $15 | $9;
 $28 = ($27|0)==(0);
 if ($28) {
  $$1208 = $16;
 } else {
  $$off = (($9) + -1)|0;
  $29 = ($$off>>>0)<(31);
  if ($29) {
   $30 = ((($1)) + 4|0);
   $31 = (($9) + 65535)|0;
   $32 = $31&65535;
   HEAP16[$30>>1] = $32;
  }
  $33 = ((($1)) + 4|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = (((($2)) + 1088|0) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  HEAP32[$1>>2] = $37;
  $38 = (((((($2)) + 20|0) + (($35*30)|0)|0)) + 22|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = ((($1)) + 6|0);
  HEAP16[$40>>1] = $39;
  $41 = (((((($2)) + 20|0) + (($35*30)|0)|0)) + 26|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = ((($1)) + 8|0);
  HEAP16[$43>>1] = $42;
  $44 = (((((($2)) + 20|0) + (($35*30)|0)|0)) + 28|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = ((($1)) + 10|0);
  HEAP16[$46>>1] = $45;
  $47 = (((((($2)) + 20|0) + (($35*30)|0)|0)) + 24|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48 & 15;
  $50 = ((($1)) + 49|0);
  HEAP8[$50>>0] = $49;
  $trunc11$clear = $trunc & 15;
  switch ($trunc11$clear<<24>>24) {
  case 6: case 4:  {
   break;
  }
  default: {
   $51 = ((($1)) + 34|0);
   HEAP16[$51>>1] = 0;
   $52 = ((($1)) + 48|0);
   HEAP8[$52>>0] = 0;
  }
  }
  $53 = $18 >>> 8;
  $$not = ($9|0)==(0);
  $54 = ($53|0)==(5);
  $or$cond3 = $$not | $54;
  if (!($or$cond3)) {
   $55 = ((($1)) + 4|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56&65535;
   $58 = (((((($2)) + 20|0) + (($57*30)|0)|0)) + 25|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = ((($1)) + 18|0);
   HEAP8[$60>>0] = $59;
   $61 = ((($1)) + 46|0);
   HEAP8[$61>>0] = 0;
  }
  $trunc12 = $53&255;
  $trunc12$clear = $trunc12 & 15;
  switch ($trunc12$clear<<24>>24) {
  case 5: case 3:  {
   break;
  }
  default: {
   if (!($26)) {
    $62 = ((($1)) + 12|0);
    HEAP32[$62>>2] = 0;
   }
  }
  }
  $63 = ((($1)) + 28|0);
  HEAP16[$63>>1] = 0;
  $64 = ($16<<16>>16)==(0);
  if ($64) {
   $$1208 = 0;
  } else {
   $65 = ((($1)) + 49|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = ($66<<24>>24)==(0);
   $68 = $66&255;
   if ($67) {
    $$0 = $16;
   } else {
    $69 = ($66&255)<(8);
    $70 = (($68) + -16)|0;
    $$sink = $69 ? $68 : $70;
    $71 = (_getnote($2,$16)|0);
    $72 = (($71) + ($$sink))|0;
    $73 = (((($2)) + 3554|0) + ($72<<1)|0);
    $74 = HEAP16[$73>>1]|0;
    $$0 = $74;
   }
   HEAP16[$24>>1] = $$0;
   $$1208 = $$0;
  }
 }
 $75 = ((($1)) + 24|0);
 HEAP8[$75>>0] = 0;
 $76 = ((($1)) + 25|0);
 HEAP8[$76>>0] = 0;
 $77 = ((($1)) + 26|0);
 HEAP16[$77>>1] = $23;
 $trunc$clear = $trunc & 15;
 do {
  switch ($trunc$clear<<24>>24) {
  case 0:  {
   $78 = ($20<<24>>24)==(0);
   if ($78) {
    return;
   }
   HEAP8[$75>>0] = 0;
   HEAP8[$76>>0] = $20;
   $79 = ((($1)) + 42|0);
   HEAP8[$79>>0] = 0;
   $80 = HEAP16[$24>>1]|0;
   $81 = (_getnote($2,$80)|0);
   $82 = ((($1)) + 36|0);
   HEAP16[$82>>1] = $80;
   $83 = HEAP8[$76>>0]|0;
   $84 = $83&255;
   $85 = $84 >>> 4;
   $86 = $85 << 3;
   $87 = (($86) + ($81))|0;
   $88 = $87 & 65408;
   $89 = ($88>>>0)>(1151);
   $90 = $87 & 65535;
   $91 = $89 ? 1151 : $90;
   $92 = (((($2)) + 3554|0) + ($91<<1)|0);
   $93 = HEAP16[$92>>1]|0;
   $94 = ((($1)) + 38|0);
   HEAP16[$94>>1] = $93;
   $95 = HEAP8[$76>>0]|0;
   $96 = ($95 << 3)&255;
   $97 = $96 & 120;
   $98 = $97&255;
   $99 = (($98) + ($81))|0;
   $100 = $99 & 65408;
   $101 = ($100>>>0)>(1151);
   $102 = $99 & 65535;
   $103 = $101 ? 1151 : $102;
   $104 = (((($2)) + 3554|0) + ($103<<1)|0);
   $105 = HEAP16[$104>>1]|0;
   $106 = ((($1)) + 40|0);
   HEAP16[$106>>1] = $105;
   return;
   break;
  }
  case 1:  {
   HEAP8[$75>>0] = 1;
   HEAP8[$76>>0] = $20;
   return;
   break;
  }
  case 2:  {
   HEAP8[$75>>0] = 2;
   HEAP8[$76>>0] = $20;
   return;
   break;
  }
  case 3:  {
   HEAP8[$75>>0] = 3;
   $107 = ($20<<24>>24)==(0);
   if (!($107)) {
    $108 = ((($1)) + 30|0);
    $109 = $20&255;
    HEAP16[$108>>1] = $109;
   }
   $110 = ($$1208<<16>>16)==(0);
   if ($110) {
    return;
   }
   $111 = ((($1)) + 32|0);
   HEAP16[$111>>1] = $$1208;
   HEAP16[$24>>1] = $25;
   return;
   break;
  }
  case 4:  {
   HEAP8[$75>>0] = 4;
   $112 = $21 & 15;
   $113 = ($112|0)==(0);
   if (!($113)) {
    $114 = ((($1)) + 47|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115 & -16;
    $117 = $116&255;
    $118 = $117 | $112;
    $119 = $118&255;
    HEAP8[$114>>0] = $119;
   }
   $120 = $21 & 240;
   $121 = ($120|0)==(0);
   if ($121) {
    return;
   }
   $122 = ((($1)) + 47|0);
   $123 = HEAP8[$122>>0]|0;
   $124 = $123 & 15;
   $125 = $124&255;
   $126 = $125 | $120;
   $127 = $126&255;
   HEAP8[$122>>0] = $127;
   return;
   break;
  }
  case 5:  {
   $128 = ($$1208<<16>>16)==(0);
   if (!($128)) {
    $129 = ((($1)) + 32|0);
    HEAP16[$129>>1] = $$1208;
    HEAP16[$24>>1] = $25;
   }
   HEAP8[$75>>0] = 5;
   $130 = ($20<<24>>24)==(0);
   if ($130) {
    return;
   }
   $131 = ((($1)) + 46|0);
   HEAP8[$131>>0] = $20;
   return;
   break;
  }
  case 6:  {
   HEAP8[$75>>0] = 6;
   $132 = ($20<<24>>24)==(0);
   if ($132) {
    return;
   }
   $133 = ((($1)) + 46|0);
   HEAP8[$133>>0] = $20;
   return;
   break;
  }
  case 9:  {
   $134 = $22 >>> 4;
   $135 = $134 << 12;
   $136 = $21 << 8;
   $137 = $136 & 3840;
   $138 = $135 | $137;
   $139 = ((($1)) + 12|0);
   HEAP32[$139>>2] = $138;
   return;
   break;
  }
  case 10:  {
   HEAP8[$75>>0] = 10;
   $140 = ((($1)) + 46|0);
   HEAP8[$140>>0] = $20;
   return;
   break;
  }
  case 11:  {
   $141 = $20&255;
   $142 = ((($2)) + 1728|0);
   $143 = ((($2)) + 950|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = ($20&255)<($144&255);
   $$ = $145 ? $141 : 0;
   HEAP16[$142>>1] = $$;
   $146 = ((($2)) + 1730|0);
   HEAP16[$146>>1] = 0;
   $147 = ((($2)) + 1734|0);
   HEAP16[$147>>1] = 1;
   return;
   break;
  }
  case 12:  {
   $148 = ((($1)) + 18|0);
   HEAP8[$148>>0] = $20;
   return;
   break;
  }
  case 13:  {
   $149 = $21 >>> 4;
   $150 = ($149*10)|0;
   $151 = $21 & 15;
   $152 = (($150) + ($151))|0;
   $153 = ((($2)) + 3552|0);
   $154 = HEAP16[$153>>1]|0;
   $155 = $154&65535;
   $156 = Math_imul($155, $152)|0;
   $157 = $156&65535;
   $158 = ((($2)) + 1730|0);
   HEAP16[$158>>1] = $157;
   $159 = ((($2)) + 1734|0);
   HEAP16[$159>>1] = 1;
   $160 = ((($2)) + 1728|0);
   $161 = HEAP16[$160>>1]|0;
   $162 = (($161) + 1)<<16>>16;
   $163 = $162&65535;
   $164 = ((($2)) + 950|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = ($163>>>0)<($166>>>0);
   $$5 = $167 ? $162 : 0;
   HEAP16[$160>>1] = $$5;
   return;
   break;
  }
  case 14:  {
   $trunc1 = ($20&255) >>> 4;
   $trunc1$clear = $trunc1 & 15;
   switch ($trunc1$clear<<24>>24) {
   case 1:  {
    $168 = $21 & 15;
    $169 = HEAP16[$24>>1]|0;
    $170 = $169&65535;
    $171 = (($170) - ($168))|0;
    $172 = $171&65535;
    $173 = $171 & 65535;
    $174 = ($173>>>0)<(113);
    $$6 = $174 ? 113 : $172;
    HEAP16[$24>>1] = $$6;
    return;
    break;
   }
   case 2:  {
    $175 = $21 & 15;
    $176 = HEAP16[$24>>1]|0;
    $177 = $176&65535;
    $178 = (($177) + ($175))|0;
    $179 = $178&65535;
    $180 = $178 & 65535;
    $181 = ($180>>>0)>(856);
    $$7 = $181 ? 856 : $179;
    HEAP16[$24>>1] = $$7;
    return;
    break;
   }
   case 10:  {
    $182 = $21 & 15;
    $183 = ((($1)) + 18|0);
    $184 = HEAP8[$183>>0]|0;
    $185 = $184&255;
    $186 = (($185) + ($182))|0;
    $187 = $186&255;
    $188 = $186 & 255;
    $189 = ($188>>>0)>(64);
    $$8 = $189 ? 64 : $187;
    HEAP8[$183>>0] = $$8;
    return;
    break;
   }
   case 11:  {
    $190 = $21 & 15;
    $191 = ((($1)) + 18|0);
    $192 = HEAP8[$191>>0]|0;
    $193 = $192&255;
    $194 = (($193) - ($190))|0;
    $195 = $194&255;
    $196 = $194 & 255;
    $197 = ($196>>>0)>(200);
    $$9 = $197 ? 0 : $195;
    HEAP8[$191>>0] = $$9;
    return;
    break;
   }
   case 6:  {
    $198 = $21 & 15;
    $199 = ($198|0)==(0);
    if ($199) {
     $217 = ((($2)) + 1730|0);
     $218 = HEAP16[$217>>1]|0;
     $219 = ((($1)) + 54|0);
     HEAP16[$219>>1] = $218;
     return;
    }
    $200 = ((($1)) + 52|0);
    $201 = HEAP16[$200>>1]|0;
    $202 = ($201<<16>>16)==(0);
    if ($202) {
     $212 = $198&65535;
     HEAP16[$200>>1] = $212;
     $213 = ((($1)) + 54|0);
     $214 = HEAP16[$213>>1]|0;
     $215 = ((($2)) + 1730|0);
     HEAP16[$215>>1] = $214;
     $216 = ((($2)) + 1734|0);
     HEAP16[$216>>1] = 1;
     return;
    }
    $203 = (($201) + -1)<<16>>16;
    HEAP16[$200>>1] = $203;
    $204 = ($203<<16>>16)==(0);
    if ($204) {
     $209 = ((($2)) + 1730|0);
     $210 = HEAP16[$209>>1]|0;
     $211 = ((($1)) + 54|0);
     HEAP16[$211>>1] = $210;
     return;
    } else {
     $205 = ((($1)) + 54|0);
     $206 = HEAP16[$205>>1]|0;
     $207 = ((($2)) + 1730|0);
     HEAP16[$207>>1] = $206;
     $208 = ((($2)) + 1734|0);
     HEAP16[$208>>1] = 1;
     return;
    }
    break;
   }
   case 14:  {
    $220 = $21 & 15;
    $221 = $220&65535;
    $222 = ((($2)) + 1732|0);
    HEAP16[$222>>1] = $221;
    return;
    break;
   }
   case 12:  {
    HEAP8[$75>>0] = 12;
    $223 = $21 & 15;
    $224 = $223&255;
    $225 = ((($1)) + 50|0);
    HEAP8[$225>>0] = $224;
    $226 = ($224<<24>>24)==(0);
    if (!($226)) {
     return;
    }
    $227 = ((($1)) + 18|0);
    HEAP8[$227>>0] = 0;
    return;
    break;
   }
   default: {
    return;
   }
   }
   break;
  }
  case 15:  {
   $228 = (($20) + -1)<<24>>24;
   $229 = ($228&255)>(31);
   if (!($229)) {
    $230 = ((($2)) + 1084|0);
    HEAP8[$230>>0] = $20;
    $231 = ((($2)) + 1724|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = ($232*5)|0;
    $234 = ((($2)) + 1736|0);
    $235 = HEAP8[$234>>0]|0;
    $236 = $235&255;
    $237 = $236 << 1;
    $238 = (($233>>>0) / ($237>>>0))&-1;
    $239 = Math_imul($238, $21)|0;
    $240 = ((($2)) + 1748|0);
    HEAP32[$240>>2] = $239;
    return;
   }
   $241 = ($20&255)>(32);
   if (!($241)) {
    return;
   }
   $242 = ((($2)) + 1736|0);
   HEAP8[$242>>0] = $20;
   $243 = ((($2)) + 1084|0);
   $244 = HEAP8[$243>>0]|0;
   $245 = $244&255;
   $246 = ((($2)) + 1724|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = ($247*5)|0;
   $249 = $21 << 1;
   $250 = (($248>>>0) / ($249>>>0))&-1;
   $251 = Math_imul($250, $245)|0;
   $252 = ((($2)) + 1748|0);
   HEAP32[$252>>2] = $251;
   return;
   break;
  }
  default: {
   return;
  }
  }
 } while(0);
}
function _workeffect($0) {
 $0 = $0|0;
 var $$ = 0, $$1 = 0, $$10 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$off = 0, $$sink = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond2 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP8[$1>>0]|0;
 switch ($2<<24>>24) {
 case 0:  {
  $3 = ((($0)) + 25|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   return;
  } else {
   $6 = ((($0)) + 16|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = $7&65535;
   $9 = ((($0)) + 42|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = (((($0)) + 36|0) + ($11<<1)|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = $13&65535;
   $15 = (($8) - ($14))|0;
   $16 = $15&65535;
   $17 = ((($0)) + 28|0);
   HEAP16[$17>>1] = $16;
   $18 = (($10) + 1)<<24>>24;
   $19 = ($18&255)>(2);
   $$ = $19 ? 0 : $18;
   HEAP8[$9>>0] = $$;
   return;
  }
  break;
 }
 case 1:  {
  $20 = ((($0)) + 16|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = ($21<<16>>16)==(0);
  if ($22) {
   return;
  } else {
   $23 = ((($0)) + 25|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $21&65535;
   $27 = (($26) - ($25))|0;
   $28 = $27&65535;
   $29 = $27 & 65535;
   $$off = (($29) + -113)|0;
   $30 = ($$off>>>0)>(19887);
   $$10 = $30 ? 113 : $28;
   HEAP16[$20>>1] = $$10;
   return;
  }
  break;
 }
 case 2:  {
  $31 = ((($0)) + 16|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = ($32<<16>>16)==(0);
  if ($33) {
   return;
  }
  $34 = ((($0)) + 25|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $32&65535;
  $38 = (($36) + ($37))|0;
  $39 = $38&65535;
  $40 = $38 & 65535;
  $41 = ($40>>>0)>(20000);
  $$1 = $41 ? 20000 : $39;
  HEAP16[$31>>1] = $$1;
  return;
  break;
 }
 case 3: case 5:  {
  $42 = ((($0)) + 16|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43&65535;
  $45 = ($43<<16>>16)==(0);
  if (!($45)) {
   $46 = ((($0)) + 32|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47 << 16 >> 16;
   $49 = ($44|0)==($48|0);
   $50 = ($47<<16>>16)==(0);
   $or$cond2 = $50 | $49;
   if (!($or$cond2)) {
    $51 = ($44|0)>($48|0);
    $52 = ((($0)) + 30|0);
    $53 = HEAP16[$52>>1]|0;
    $54 = $53 << 16 >> 16;
    if ($51) {
     $55 = (($44) - ($48))|0;
     $56 = ($55|0)<($54|0);
     if ($56) {
      $$sink = $47;
     } else {
      $57 = (($44) - ($54))|0;
      $58 = $57&65535;
      $$sink = $58;
     }
    } else {
     $59 = (($48) - ($44))|0;
     $60 = ($59|0)<($54|0);
     if ($60) {
      $$sink = $47;
     } else {
      $61 = (($54) + ($44))|0;
      $62 = $61&65535;
      $$sink = $62;
     }
    }
    HEAP16[$42>>1] = $$sink;
    $63 = $$sink&65535;
    $64 = HEAP16[$46>>1]|0;
    $65 = $64 << 16 >> 16;
    $66 = ($63|0)==($65|0);
    if ($66) {
     HEAP16[$46>>1] = 0;
    }
   }
  }
  $67 = HEAP8[$1>>0]|0;
  $68 = ($67<<24>>24)==(5);
  if (!($68)) {
   return;
  }
  $69 = ((($0)) + 46|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = ($70&255)>(15);
  $73 = ((($0)) + 18|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  if ($72) {
   $76 = $71 >>> 4;
   $77 = (($75) + ($76))|0;
   $78 = $77&255;
   $79 = $77 & 192;
   $80 = ($79>>>0)>(63);
   $$3 = $80 ? 63 : $78;
   HEAP8[$73>>0] = $$3;
   return;
  } else {
   $81 = (($75) - ($71))|0;
   $82 = $81&255;
   $83 = $81 & 192;
   $84 = ($83>>>0)>(63);
   $$4 = $84 ? 0 : $82;
   HEAP8[$73>>0] = $$4;
   return;
  }
  break;
 }
 case 4: case 6:  {
  $85 = ((($0)) + 47|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $87 & 15;
  $89 = ((($0)) + 48|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = $91 & 31;
  $93 = (6290 + ($92<<1)|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = $94 << 16 >> 16;
  $96 = Math_imul($95, $88)|0;
  $97 = $96 >>> 7;
  $98 = ((($0)) + 34|0);
  $99 = ($90&255)>(31);
  $100 = (0 - ($97))|0;
  $$5 = $99 ? $100 : $97;
  $storemerge = $$5&65535;
  HEAP16[$98>>1] = $storemerge;
  $101 = $87 >>> 4;
  $102 = (($91) + ($101))|0;
  $103 = $102 & 63;
  $104 = $103&255;
  HEAP8[$89>>0] = $104;
  $105 = HEAP8[$1>>0]|0;
  $106 = ($105<<24>>24)==(6);
  if (!($106)) {
   return;
  }
  $107 = ((($0)) + 46|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = ($108&255)>(15);
  $111 = ((($0)) + 18|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  if ($110) {
   $114 = $109 >>> 4;
   $115 = (($113) + ($114))|0;
   $116 = $115&255;
   $117 = $115 & 255;
   $118 = ($117>>>0)>(64);
   $$6 = $118 ? 64 : $116;
   HEAP8[$111>>0] = $$6;
   return;
  } else {
   $119 = (($113) - ($109))|0;
   $120 = $119&255;
   $121 = $119 & 255;
   $122 = ($121>>>0)>(64);
   $$7 = $122 ? 0 : $120;
   HEAP8[$111>>0] = $$7;
   return;
  }
  break;
 }
 case 10:  {
  $123 = ((($0)) + 46|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $124&255;
  $126 = ($124&255)>(15);
  $127 = ((($0)) + 18|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = $128&255;
  if ($126) {
   $130 = $125 >>> 4;
   $131 = (($129) + ($130))|0;
   $132 = $131&255;
   $133 = $131 & 255;
   $134 = ($133>>>0)>(64);
   $$8 = $134 ? 64 : $132;
   HEAP8[$127>>0] = $$8;
   return;
  } else {
   $135 = $125 & 15;
   $136 = (($129) - ($135))|0;
   $137 = $136&255;
   $138 = $136 & 255;
   $139 = ($138>>>0)>(64);
   $$9 = $139 ? 0 : $137;
   HEAP8[$127>>0] = $$9;
   return;
  }
  break;
 }
 case 12:  {
  $140 = ((($0)) + 50|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = ($141<<24>>24)==(0);
  $143 = (($141) + -1)<<24>>24;
  if (!($142)) {
   HEAP8[$140>>0] = $143;
   $144 = ($143<<24>>24)==(0);
   if (!($144)) {
    return;
   }
  }
  $145 = ((($0)) + 18|0);
  HEAP8[$145>>0] = 0;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _getnote($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01 = 0, $$06 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = 0;
 while(1) {
  $2 = (((($0)) + 3554|0) + ($$01<<1)|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = ($3&65535)>($1&65535);
  if (!($4)) {
   $$06 = $$01;
   label = 4;
   break;
  }
  $5 = (($$01) + 1)|0;
  $6 = ($5|0)<(1152);
  if ($6) {
   $$01 = $5;
  } else {
   $$06 = 144;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$06|0);
 }
 return (0)|0;
}
function _jar_mod_unload($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 5872|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  _free($3);
  HEAP32[$2>>2] = 0;
  $5 = ((($0)) + 5876|0);
  HEAP32[$5>>2] = 0;
  $6 = ((($0)) + 5880|0);
  HEAP16[$6>>1] = 0;
 }
 (_jar_mod_reset($0)|0);
 return;
}
function _jar_mod_reset($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 _memclear($0,1085);
 $2 = ((($0)) + 1088|0);
 _memclear($2,124);
 $3 = ((($0)) + 1212|0);
 _memclear($3,512);
 $4 = ((($0)) + 1728|0);
 $5 = ((($0)) + 1740|0);
 $6 = ((($0)) + 1760|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP8[$4+8>>0]=0|0;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;
 _memclear($6,1792);
 $7 = ((($0)) + 3552|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($0)) + 5858|0);
 HEAP16[$8>>1] = 0;
 $9 = ((($0)) + 5860|0);
 HEAP16[$9>>1] = 0;
 $10 = ((($0)) + 5862|0);
 HEAP16[$10>>1] = 0;
 $11 = (_jar_mod_init($0)|0);
 $$0 = $11;
 return ($$0|0);
}
function _jar_mod_load_file($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 5872|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  _free($3);
  HEAP32[$2>>2] = 0;
 }
 $5 = (_fopen($1,14498)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  return 0;
 }
 (_fseek($5,0,2)|0);
 $7 = (_ftell($5)|0);
 (_fseek($5,0,0)|0);
 $$off = (($7) + -1)|0;
 $8 = ($$off>>>0)<(33554431);
 if ($8) {
  $9 = (_malloc($7)|0);
  HEAP32[$2>>2] = $9;
  $10 = ((($0)) + 5876|0);
  HEAP32[$10>>2] = $7;
  _memset(($9|0),0,($7|0))|0;
  (_fread($9,$7,1,$5)|0);
  (_fclose($5)|0);
  $11 = HEAP32[$2>>2]|0;
  $12 = (_jar_mod_load($0,$11,$7)|0);
  $13 = ($12|0)==(0);
  $$ = $13 ? 0 : $7;
  return ($$|0);
 } else {
  return 0;
 }
 return (0)|0;
}
function _jar_mod_load($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0104 = 0, $$0105123 = 0, $$0106129 = 0, $$0111126 = 0, $$1112 = 0, $$1128 = 0, $$2 = 0, $$3124 = 0, $$4 = 0, $$pr = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $indvars$iv$next137 = 0, $indvars$iv$next142 = 0, $indvars$iv136 = 0, $indvars$iv141 = 0, $or$cond = 0, $scevgep = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $3 = (($1) + ($2)|0);
 $4 = ($1|0)!=(0|0);
 $5 = ($0|0)!=(0|0);
 $or$cond = $5 & $4;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcopy($0,$1,1084);
 $6 = ((($0)) + 3552|0);
 HEAP16[$6>>1] = 0;
 $7 = HEAP32[(68)>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  label = 8;
 } else {
  $9 = ((($0)) + 1080|0);
  $$0106129 = 0;$11 = 0;$15 = $7;
  while(1) {
   $10 = (60 + (($11*12)|0)|0);
   $12 = (_memcompare($9,$10)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    $14 = $15&65535;
    HEAP16[$6>>1] = $14;
   }
   $16 = (($$0106129) + 1)<<16>>16;
   $17 = $16&65535;
   $18 = (((60 + (($17*12)|0)|0)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0);
   if ($20) {
    break;
   } else {
    $$0106129 = $16;$11 = $17;$15 = $19;
   }
  }
  $$pr = HEAP16[$6>>1]|0;
  $21 = ($$pr<<16>>16)==(0);
  if ($21) {
   label = 8;
  } else {
   $26 = ((($1)) + 1084|0);
   $$0104 = $26;
  }
 }
 if ((label|0) == 8) {
  $22 = ((($0)) + 1080|0);
  _memcopy($22,13435,4);
  $23 = ((($0)) + 950|0);
  $24 = ((($0)) + 470|0);
  _memcopy($23,$24,130);
  _memclear($24,480);
  $25 = ((($1)) + 600|0);
  HEAP16[$6>>1] = 4;
  $$0104 = $25;
 }
 $27 = ($$0104>>>0)<($3>>>0);
 if ($27) {
  $$0111126 = 0;$$1128 = $$0104;$indvars$iv141 = 0;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 L18: while(1) {
  $28 = (((($0)) + 952|0) + ($indvars$iv141)|0);
  $$1112 = $$0111126;$$2 = $$1128;
  while(1) {
   $29 = $$1112&65535;
   $30 = HEAP8[$28>>0]|0;
   $31 = $30&255;
   $32 = ($29>>>0)>($31>>>0);
   if ($32) {
    break;
   }
   $33 = (((($0)) + 1212|0) + ($29<<2)|0);
   HEAP32[$33>>2] = $$2;
   $34 = HEAP16[$6>>1]|0;
   $35 = $34&65535;
   $36 = $35 << 8;
   $37 = (($$2) + ($36)|0);
   $38 = (($$1112) + 1)<<16>>16;
   $39 = ($37>>>0)<($3>>>0);
   if ($39) {
    $$1112 = $38;$$2 = $37;
   } else {
    $$0 = 0;
    label = 24;
    break L18;
   }
  }
  $indvars$iv$next142 = (($indvars$iv141) + 1)|0;
  $40 = ($indvars$iv$next142>>>0)<(128);
  if ($40) {
   $$0111126 = $$1112;$$1128 = $$2;$indvars$iv141 = $indvars$iv$next142;
  } else {
   break;
  }
 }
 if ((label|0) == 24) {
  return ($$0|0);
 }
 $scevgep = ((($0)) + 1088|0);
 dest=$scevgep; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $41 = ((($0)) + 20|0);
 $$0105123 = $41;$$3124 = $$2;$indvars$iv136 = 0;
 while(1) {
  $42 = ((($$0105123)) + 22|0);
  $43 = HEAPU8[$42>>0]|(HEAPU8[$42+1>>0]<<8);
  $44 = $43&65535;
  $45 = $44 >>> 8;
  $46 = $44 << 8;
  $47 = $45 | $46;
  $48 = $47 << 1;
  $49 = $48&65535;
  HEAP8[$42>>0]=$49&255;HEAP8[$42+1>>0]=$49>>8;
  $50 = ((($$0105123)) + 26|0);
  $51 = HEAPU8[$50>>0]|(HEAPU8[$50+1>>0]<<8);
  $52 = $51&65535;
  $53 = $52 >>> 8;
  $54 = $52 << 8;
  $55 = $53 | $54;
  $56 = $55 << 1;
  $57 = $56&65535;
  HEAP8[$50>>0]=$57&255;HEAP8[$50+1>>0]=$57>>8;
  $58 = ((($$0105123)) + 28|0);
  $59 = HEAPU8[$58>>0]|(HEAPU8[$58+1>>0]<<8);
  $60 = $59&65535;
  $61 = $60 >>> 8;
  $62 = $60 << 8;
  $63 = $61 | $62;
  $64 = $63 << 1;
  $65 = $64&65535;
  HEAP8[$58>>0]=$65&255;HEAP8[$58+1>>0]=$65>>8;
  $66 = HEAPU8[$42>>0]|(HEAPU8[$42+1>>0]<<8);
  $67 = $66&65535;
  $68 = ($66<<16>>16)==(0);
  if ($68) {
   $$4 = $$3124;
  } else {
   $69 = (((($0)) + 1088|0) + ($indvars$iv136<<2)|0);
   HEAP32[$69>>2] = $$3124;
   $70 = (($$3124) + ($67)|0);
   $71 = HEAPU8[$58>>0]|(HEAPU8[$58+1>>0]<<8);
   $72 = $71&65535;
   $73 = HEAPU8[$50>>0]|(HEAPU8[$50+1>>0]<<8);
   $74 = $73&65535;
   $75 = (($74) + ($72))|0;
   $76 = ($75>>>0)>($67>>>0);
   if ($76) {
    $77 = (($67) - ($74))|0;
    $78 = $77&65535;
    HEAP8[$58>>0]=$78&255;HEAP8[$58+1>>0]=$78>>8;
   }
   $79 = ($70>>>0)>($3>>>0);
   if ($79) {
    $$0 = 0;
    label = 24;
    break;
   } else {
    $$4 = $70;
   }
  }
  $indvars$iv$next137 = (($indvars$iv136) + 1)|0;
  $80 = ((($$0105123)) + 30|0);
  $81 = ($indvars$iv$next137>>>0)<(31);
  if ($81) {
   $$0105123 = $80;$$3124 = $$4;$indvars$iv136 = $indvars$iv$next137;
  } else {
   break;
  }
 }
 if ((label|0) == 24) {
  return ($$0|0);
 }
 $82 = ((($0)) + 1728|0);
 HEAP16[$82>>1] = 0;
 $83 = ((($0)) + 1730|0);
 HEAP16[$83>>1] = 0;
 $84 = ((($0)) + 1084|0);
 HEAP8[$84>>0] = 6;
 $85 = ((($0)) + 1736|0);
 HEAP8[$85>>0] = 125;
 $86 = ((($0)) + 1756|0);
 HEAP32[$86>>2] = 0;
 $87 = ((($0)) + 1724|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88*30)|0;
 $90 = (($89>>>0) / 250)&-1;
 $91 = (($90) + 1)|0;
 $92 = ((($0)) + 1740|0);
 HEAP32[$92>>2] = $91;
 $93 = ((($0)) + 1748|0);
 HEAP32[$93>>2] = $90;
 $94 = (3546894 / ($88>>>0))&-1;
 $95 = ((($0)) + 1752|0);
 HEAP32[$95>>2] = $94;
 $96 = HEAP16[$6>>1]|0;
 $97 = ($96<<16>>16)==(0);
 if (!($97)) {
  $indvars$iv = 0;
  while(1) {
   $98 = (((((($0)) + 1760|0) + (($indvars$iv*56)|0)|0)) + 18|0);
   HEAP8[$98>>0] = 0;
   $99 = (((((($0)) + 1760|0) + (($indvars$iv*56)|0)|0)) + 16|0);
   HEAP16[$99>>1] = 0;
   $indvars$iv$next = (($indvars$iv) + 1)|0;
   $100 = HEAP16[$6>>1]|0;
   $101 = $100&65535;
   $102 = ($indvars$iv$next>>>0)<($101>>>0);
   if ($102) {
    $indvars$iv = $indvars$iv$next;
   } else {
    break;
   }
  }
 }
 $103 = ((($0)) + 5858|0);
 HEAP16[$103>>1] = 1;
 $$0 = 1;
 return ($$0|0);
}
function _memcompare($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)==($3<<24>>24);
 if (!($4)) {
  return 0;
 }
 $5 = ((($0)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ((($1)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($6<<24>>24)==($8<<24>>24);
 if (!($9)) {
  return 0;
 }
 $10 = ((($0)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ((($1)) + 2|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($11<<24>>24)==($13<<24>>24);
 if ($14) {
  $15 = ((($0)) + 3|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ((($1)) + 3|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($16<<24>>24)==($18<<24>>24);
  $$ = $19&1;
  return ($$|0);
 } else {
  return 0;
 }
 return (0)|0;
}
function _jar_mod_max_samples($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 5880|0);
 $3 = HEAP16[$2>>1]|0;
 while(1) {
  _jar_mod_fillbuffer($0,$1,1,0);
  $4 = HEAP16[$2>>1]|0;
  $5 = ($4&65535)>($3&65535);
  if ($5) {
   break;
  }
 }
 $6 = ((($0)) + 1756|0);
 $7 = HEAP32[$6>>2]|0;
 _jar_mod_seek_start($0);
 STACKTOP = sp;return ($7|0);
}
function _jar_mod_seek_start($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 5872|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = ((($0)) + 5876|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 5880|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = (_jar_mod_reset($0)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  return;
 }
 (_jar_mod_load($0,$3,$6)|0);
 HEAP32[$2>>2] = $3;
 HEAP32[$5>>2] = $6;
 HEAP16[$7>>1] = $8;
 return;
}
function _InitAudioDevice() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_alcOpenDevice((0|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _TraceLog(2,13440,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $2 = (_alcCreateContext(($0|0),(0|0))|0);
 $cond = ($2|0)==(0|0);
 do {
  if (!($cond)) {
   $3 = (_alcMakeContextCurrent(($2|0))|0);
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    _alcDestroyContext(($2|0));
    break;
   }
   $5 = (_alcGetString(($0|0),4101)|0);
   HEAP32[$vararg_buffer3>>2] = $5;
   _TraceLog(0,13508,$vararg_buffer3);
   _alListener3f(4100,0.0,0.0,0.0);
   _alListener3f(4102,0.0,0.0,0.0);
   _alListener3f(4111,0.0,0.0,-1.0);
   _alListenerf(4106,1.0);
   STACKTOP = sp;return;
  }
 } while(0);
 (_alcCloseDevice(($0|0))|0);
 _TraceLog(2,13473,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _CloseAudioDevice() {
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_alcGetCurrentContext()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _TraceLog(1,13562,$vararg_buffer);
 }
 $2 = (_alcGetContextsDevice(($0|0))|0);
 (_alcMakeContextCurrent((0|0))|0);
 _alcDestroyContext(($0|0));
 (_alcCloseDevice(($2|0))|0);
 _TraceLog(0,13610,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _LoadWave($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 12|0;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;
 $3 = (_IsFileExtension($1,13643)|0);
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = (_IsFileExtension($1,13648)|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    _LoadOGG($2,$1);
    break;
   }
   $7 = (_IsFileExtension($1,13653)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    HEAP32[$vararg_buffer1>>2] = $1;
    _TraceLog(1,13705,$vararg_buffer1);
    break;
   }
   $9 = (_LoadResource($1,0)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(2);
   if ($11) {
    $12 = ((($9)) + 20|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($9)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($9)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($9)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($9)) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    _LoadWaveEx($2,$13,$15,$17,$19,$21);
   } else {
    HEAP32[$vararg_buffer>>2] = $1;
    _TraceLog(1,13659,$vararg_buffer);
   }
   _UnloadResource($9);
  } else {
   _LoadWAV($2,$1);
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;
 STACKTOP = sp;return;
}
function _LoadWAV($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0;
 var $vararg_ptr23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 120|0;
 $3 = sp + 96|0;
 $4 = sp + 88|0;
 $5 = sp + 64|0;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;
 $6 = (_fopen($1,14498)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$vararg_buffer>>2] = $1;
  _TraceLog(1,14879,$vararg_buffer);
  $8 = ((($5)) + 16|0);
  HEAP32[$8>>2] = 0;
  ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$5+16>>2]|0;
  STACKTOP = sp;return;
 }
 (_fread($2,12,1,$6)|0);
 $9 = (_strncmp($2,14913,4)|0);
 $10 = ($9|0)==(0);
 do {
  if ($10) {
   $11 = ((($2)) + 8|0);
   $12 = (_strncmp($11,14918,4)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    (_fread($3,24,1,$6)|0);
    $14 = HEAP8[$3>>0]|0;
    $15 = ($14<<24>>24)==(102);
    if ($15) {
     $16 = ((($3)) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = ($17<<24>>24)==(109);
     if ($18) {
      $19 = ((($3)) + 2|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = ($20<<24>>24)==(116);
      if ($21) {
       $22 = ((($3)) + 3|0);
       $23 = HEAP8[$22>>0]|0;
       $24 = ($23<<24>>24)==(32);
       if ($24) {
        $25 = ((($3)) + 4|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = ($26|0)>(16);
        if ($27) {
         (_fseek($6,2,1)|0);
        }
        (_fread($4,8,1,$6)|0);
        $28 = HEAP8[$4>>0]|0;
        $29 = ($28<<24>>24)==(100);
        if ($29) {
         $30 = ((($4)) + 1|0);
         $31 = HEAP8[$30>>0]|0;
         $32 = ($31<<24>>24)==(97);
         if ($32) {
          $33 = ((($4)) + 2|0);
          $34 = HEAP8[$33>>0]|0;
          $35 = ($34<<24>>24)==(116);
          if ($35) {
           $36 = ((($4)) + 3|0);
           $37 = HEAP8[$36>>0]|0;
           $38 = ($37<<24>>24)==(97);
           if ($38) {
            $39 = ((($4)) + 4|0);
            $40 = HEAP32[$39>>2]|0;
            $41 = (_malloc($40)|0);
            $42 = ((($5)) + 16|0);
            HEAP32[$42>>2] = $41;
            (_fread($41,$40,1,$6)|0);
            $43 = ((($3)) + 12|0);
            $44 = HEAP32[$43>>2]|0;
            $45 = ((($5)) + 4|0);
            HEAP32[$45>>2] = $44;
            $46 = ((($3)) + 22|0);
            $47 = HEAP16[$46>>1]|0;
            $48 = $47 << 16 >> 16;
            $49 = ((($5)) + 8|0);
            HEAP32[$49>>2] = $48;
            $50 = ((($3)) + 10|0);
            $51 = HEAP16[$50>>1]|0;
            $52 = $51 << 16 >> 16;
            $53 = ((($5)) + 12|0);
            HEAP32[$53>>2] = $52;
            switch ($47<<16>>16) {
            case 32: case 16: case 8:  {
             $57 = $52;
             break;
            }
            default: {
             HEAP32[$vararg_buffer10>>2] = $1;
             $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
             HEAP32[$vararg_ptr13>>2] = $48;
             _TraceLog(1,15006,$vararg_buffer10);
             $54 = HEAP32[$45>>2]|0;
             $55 = HEAP32[$53>>2]|0;
             _WaveFormat($5,$54,16,$55);
             $$pr = HEAP32[$53>>2]|0;
             $57 = $$pr;
            }
            }
            $56 = ($57>>>0)>(2);
            if ($56) {
             $58 = HEAP32[$45>>2]|0;
             $59 = HEAP32[$49>>2]|0;
             _WaveFormat($5,$58,$59,2);
             $60 = HEAP32[$53>>2]|0;
             HEAP32[$vararg_buffer14>>2] = $1;
             $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
             HEAP32[$vararg_ptr17>>2] = $60;
             _TraceLog(1,15069,$vararg_buffer14);
            }
            $61 = HEAP32[$39>>2]|0;
            $62 = HEAP32[$49>>2]|0;
            $63 = $62 >>> 3;
            $64 = (($61>>>0) / ($63>>>0))&-1;
            $65 = HEAP32[$53>>2]|0;
            $66 = (($64>>>0) / ($65>>>0))&-1;
            HEAP32[$5>>2] = $66;
            $67 = HEAP32[$45>>2]|0;
            $68 = ($65|0)==(1);
            $69 = $68 ? 13929 : 13934;
            HEAP32[$vararg_buffer18>>2] = $1;
            $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
            HEAP32[$vararg_ptr21>>2] = $67;
            $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
            HEAP32[$vararg_ptr22>>2] = $62;
            $vararg_ptr23 = ((($vararg_buffer18)) + 12|0);
            HEAP32[$vararg_ptr23>>2] = $69;
            _TraceLog(0,15138,$vararg_buffer18);
            break;
           }
          }
         }
        }
        HEAP32[$vararg_buffer7>>2] = $1;
        _TraceLog(1,14981,$vararg_buffer7);
        break;
       }
      }
     }
    }
    HEAP32[$vararg_buffer4>>2] = $1;
    _TraceLog(1,14956,$vararg_buffer4);
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  HEAP32[$vararg_buffer1>>2] = $1;
  _TraceLog(1,14923,$vararg_buffer1);
 }
 (_fclose($6)|0);
 ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$5+16>>2]|0;
 STACKTOP = sp;return;
}
function _LoadOGG($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$0$0 = 0, $$sroa$11$0 = 0, $$sroa$11$0$$sroa_idx19 = 0, $$sroa$15$0 = 0, $$sroa$15$0$$sroa_idx23 = 0, $$sroa$7$0 = 0, $$sroa$7$0$$sroa_idx15 = 0, $$sroa$9$0 = 0, $$sroa$9$0$$sroa_idx17 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 48|0;
 $3 = (_stb_vorbis_open_filename($1,0,0)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$vararg_buffer>>2] = $1;
  _TraceLog(1,13761,$vararg_buffer);
  $$sroa$0$0 = 0;$$sroa$11$0 = 0;$$sroa$15$0 = 0;$$sroa$7$0 = 0;$$sroa$9$0 = 0;
 } else {
  _stb_vorbis_get_info($2,$3);
  $5 = HEAP32[$2>>2]|0;
  $6 = ((($2)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_stb_vorbis_stream_length_in_samples($3)|0);
  $9 = (+_stb_vorbis_stream_length_in_seconds($3));
  $10 = $9 > 10.0;
  if ($10) {
   $11 = $9;
   HEAP32[$vararg_buffer1>>2] = $1;
   $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
   HEAPF64[$vararg_ptr4>>3] = $11;
   _TraceLog(1,13795,$vararg_buffer1);
  }
  $12 = Math_imul($8, $7)|0;
  $13 = $12 << 1;
  $14 = (_malloc($13)|0);
  $15 = HEAP32[$6>>2]|0;
  $16 = (_stb_vorbis_get_samples_short_interleaved($3,$15,$14,$12)|0);
  HEAP32[$vararg_buffer5>>2] = $1;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $16;
  _TraceLog(3,13903,$vararg_buffer5);
  $17 = ($7|0)==(1);
  $18 = $17 ? 13929 : 13934;
  HEAP32[$vararg_buffer9>>2] = $1;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = $5;
  $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
  HEAP32[$vararg_ptr13>>2] = 16;
  $vararg_ptr14 = ((($vararg_buffer9)) + 12|0);
  HEAP32[$vararg_ptr14>>2] = $18;
  _TraceLog(0,13941,$vararg_buffer9);
  _stb_vorbis_close($3);
  $$sroa$0$0 = $8;$$sroa$11$0 = $7;$$sroa$15$0 = $14;$$sroa$7$0 = $5;$$sroa$9$0 = 16;
 }
 HEAP32[$0>>2] = $$sroa$0$0;
 $$sroa$7$0$$sroa_idx15 = ((($0)) + 4|0);
 HEAP32[$$sroa$7$0$$sroa_idx15>>2] = $$sroa$7$0;
 $$sroa$9$0$$sroa_idx17 = ((($0)) + 8|0);
 HEAP32[$$sroa$9$0$$sroa_idx17>>2] = $$sroa$9$0;
 $$sroa$11$0$$sroa_idx19 = ((($0)) + 12|0);
 HEAP32[$$sroa$11$0$$sroa_idx19>>2] = $$sroa$11$0;
 $$sroa$15$0$$sroa_idx23 = ((($0)) + 16|0);
 HEAP32[$$sroa$15$0$$sroa_idx23>>2] = $$sroa$15$0;
 STACKTOP = sp;return;
}
function _LoadWaveEx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 40|0;
 $6 = sp + 20|0;
 $7 = sp;
 $8 = ((($6)) + 16|0);
 HEAP32[$8>>2] = $1;
 HEAP32[$6>>2] = $2;
 $9 = ((($6)) + 4|0);
 HEAP32[$9>>2] = $3;
 $10 = ((($6)) + 8|0);
 HEAP32[$10>>2] = $4;
 $11 = ((($6)) + 12|0);
 HEAP32[$11>>2] = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$6+16>>2]|0;
 _WaveCopy($7,$$byval_copy);
 _WaveFormat($7,$3,$4,$5);
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$7+16>>2]|0;
 STACKTOP = sp;return;
}
function _WaveCopy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$0$0 = 0, $$sroa$5$0 = 0, $$sroa$5$0$$sroa_idx2 = 0, $$sroa$6$0 = 0, $$sroa$6$0$$sroa_idx4 = 0, $$sroa$7$0 = 0, $$sroa$7$0$$sroa_idx6 = 0, $$sroa$8$0$$sroa_idx8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = Math_imul($4, $2)|0;
 $6 = $5 >>> 3;
 $7 = ((($1)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = Math_imul($6, $8)|0;
 $10 = (_malloc($9)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$sroa$0$0 = 0;$$sroa$5$0 = 0;$$sroa$6$0 = 0;$$sroa$7$0 = 0;
 } else {
  $12 = ((($1)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = Math_imul($4, $2)|0;
  $15 = Math_imul($14, $8)|0;
  $16 = $15 >>> 3;
  _memcpy(($10|0),($13|0),($16|0))|0;
  $17 = HEAP32[$1>>2]|0;
  $18 = ((($1)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$3>>2]|0;
  $21 = HEAP32[$7>>2]|0;
  $$sroa$0$0 = $17;$$sroa$5$0 = $19;$$sroa$6$0 = $20;$$sroa$7$0 = $21;
 }
 HEAP32[$0>>2] = $$sroa$0$0;
 $$sroa$5$0$$sroa_idx2 = ((($0)) + 4|0);
 HEAP32[$$sroa$5$0$$sroa_idx2>>2] = $$sroa$5$0;
 $$sroa$6$0$$sroa_idx4 = ((($0)) + 8|0);
 HEAP32[$$sroa$6$0$$sroa_idx4>>2] = $$sroa$6$0;
 $$sroa$7$0$$sroa_idx6 = ((($0)) + 12|0);
 HEAP32[$$sroa$7$0$$sroa_idx6>>2] = $$sroa$7$0;
 $$sroa$8$0$$sroa_idx8 = ((($0)) + 16|0);
 HEAP32[$$sroa$8$0$$sroa_idx8>>2] = $10;
 return;
}
function _WaveFormat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0153164 = 0, $$0154162 = 0, $$0155163 = 0, $$0156170 = 0, $$0157167 = 0, $$0165 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($1|0);
 if (!($6)) {
  HEAP32[$4>>2] = $1;
 }
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($2|0);
 if (!($9)) {
  $10 = HEAP32[$0>>2]|0;
  $11 = ((($0)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = Math_imul($10, $2)|0;
  $14 = Math_imul($13, $12)|0;
  $15 = $14 >>> 3;
  $16 = (_malloc($15)|0);
  $17 = HEAP32[$0>>2]|0;
  $18 = ($17|0)==(0);
  if (!($18)) {
   $19 = ((($0)) + 16|0);
   $20 = ((($0)) + 16|0);
   $21 = ((($0)) + 16|0);
   $22 = ((($0)) + 16|0);
   $23 = ((($0)) + 16|0);
   $24 = ((($0)) + 16|0);
   $$0156170 = 0;
   while(1) {
    $25 = HEAP32[$11>>2]|0;
    $26 = ($25|0)==(0);
    L10: do {
     if (!($26)) {
      $$0157167 = 0;$35 = $25;
      while(1) {
       L13: do {
        switch ($2|0) {
        case 8:  {
         $32 = HEAP32[$7>>2]|0;
         switch ($32|0) {
         case 16:  {
          $33 = HEAP32[$19>>2]|0;
          $34 = Math_imul($35, $$0156170)|0;
          $36 = (($34) + ($$0157167))|0;
          $37 = (($33) + ($36<<1)|0);
          $38 = HEAP16[$37>>1]|0;
          $39 = (+($38<<16>>16));
          $40 = $39 / 32767.0;
          $41 = $40 * 256.0;
          $42 = (~~(($41))&255);
          $43 = (($16) + ($36)|0);
          HEAP8[$43>>0] = $42;
          break L13;
          break;
         }
         case 32:  {
          $44 = HEAP32[$20>>2]|0;
          $45 = Math_imul($35, $$0156170)|0;
          $46 = (($45) + ($$0157167))|0;
          $47 = (($44) + ($46<<2)|0);
          $48 = +HEAPF32[$47>>2];
          $49 = $48 * 127.0;
          $50 = $49 + 127.0;
          $51 = (~~(($50))&255);
          $52 = (($16) + ($46)|0);
          HEAP8[$52>>0] = $51;
          break L13;
          break;
         }
         default: {
          break L13;
         }
         }
         break;
        }
        case 16:  {
         $53 = HEAP32[$7>>2]|0;
         switch ($53|0) {
         case 8:  {
          $54 = HEAP32[$21>>2]|0;
          $55 = Math_imul($35, $$0156170)|0;
          $56 = (($55) + ($$0157167))|0;
          $57 = (($54) + ($56)|0);
          $58 = HEAP8[$57>>0]|0;
          $59 = $58&255;
          $60 = (($59) + -127)|0;
          $61 = (+($60|0));
          $62 = $61 * 0.00390625;
          $63 = $62 * 32767.0;
          $64 = (~~(($63)));
          $65 = (($16) + ($56<<1)|0);
          HEAP16[$65>>1] = $64;
          break L13;
          break;
         }
         case 32:  {
          $66 = HEAP32[$22>>2]|0;
          $67 = Math_imul($35, $$0156170)|0;
          $68 = (($67) + ($$0157167))|0;
          $69 = (($66) + ($68<<2)|0);
          $70 = +HEAPF32[$69>>2];
          $71 = $70 * 32767.0;
          $72 = (~~(($71)));
          $73 = (($16) + ($68<<1)|0);
          HEAP16[$73>>1] = $72;
          break L13;
          break;
         }
         default: {
          break L13;
         }
         }
         break;
        }
        case 32:  {
         $74 = HEAP32[$7>>2]|0;
         switch ($74|0) {
         case 8:  {
          $75 = HEAP32[$23>>2]|0;
          $76 = Math_imul($35, $$0156170)|0;
          $77 = (($76) + ($$0157167))|0;
          $78 = (($75) + ($77)|0);
          $79 = HEAP8[$78>>0]|0;
          $80 = $79&255;
          $81 = (($80) + -127)|0;
          $82 = (+($81|0));
          $83 = $82 * 0.00390625;
          $84 = (($16) + ($77<<2)|0);
          HEAPF32[$84>>2] = $83;
          break L13;
          break;
         }
         case 16:  {
          $85 = HEAP32[$24>>2]|0;
          $86 = Math_imul($35, $$0156170)|0;
          $87 = (($86) + ($$0157167))|0;
          $88 = (($85) + ($87<<1)|0);
          $89 = HEAP16[$88>>1]|0;
          $90 = (+($89<<16>>16));
          $91 = $90 / 32767.0;
          $92 = (($16) + ($87<<2)|0);
          HEAPF32[$92>>2] = $91;
          break L13;
          break;
         }
         default: {
          break L13;
         }
         }
         break;
        }
        default: {
        }
        }
       } while(0);
       $93 = (($$0157167) + 1)|0;
       $94 = HEAP32[$11>>2]|0;
       $95 = ($93>>>0)<($94>>>0);
       if ($95) {
        $$0157167 = $93;$35 = $94;
       } else {
        break L10;
       }
      }
     }
    } while(0);
    $29 = (($$0156170) + 1)|0;
    $30 = HEAP32[$0>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $$0156170 = $29;
    } else {
     break;
    }
   }
  }
  HEAP32[$7>>2] = $2;
  $27 = ((($0)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  _free($28);
  HEAP32[$27>>2] = $16;
 }
 $96 = ((($0)) + 12|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)==($3|0);
 if ($98) {
  return;
 }
 $99 = HEAP32[$0>>2]|0;
 $100 = HEAP32[$7>>2]|0;
 $101 = Math_imul($100, $99)|0;
 $102 = $101 >>> 3;
 $103 = Math_imul($102, $3)|0;
 $104 = (_malloc($103)|0);
 $105 = HEAP32[$96>>2]|0;
 $106 = ($105|0)==(1);
 $107 = ($3|0)==(2);
 $or$cond = $107 & $106;
 L33: do {
  if ($or$cond) {
   $108 = HEAP32[$0>>2]|0;
   $109 = ($108|0)==(0);
   if (!($109)) {
    $110 = ((($0)) + 16|0);
    $111 = ((($0)) + 16|0);
    $112 = ((($0)) + 16|0);
    $$0155163 = 0;
    while(1) {
     $113 = Math_imul($$0155163, $3)|0;
     $114 = Math_imul($$0155163, $3)|0;
     $115 = Math_imul($$0155163, $3)|0;
     $$0154162 = 0;
     while(1) {
      $119 = HEAP32[$7>>2]|0;
      switch ($119|0) {
      case 8:  {
       $120 = HEAP32[$110>>2]|0;
       $121 = (($120) + ($$0155163)|0);
       $122 = HEAP8[$121>>0]|0;
       $123 = (($$0154162) + ($113))|0;
       $124 = (($104) + ($123)|0);
       HEAP8[$124>>0] = $122;
       break;
      }
      case 16:  {
       $125 = HEAP32[$111>>2]|0;
       $126 = (($125) + ($$0155163<<1)|0);
       $127 = HEAP16[$126>>1]|0;
       $128 = (($$0154162) + ($114))|0;
       $129 = (($104) + ($128<<1)|0);
       HEAP16[$129>>1] = $127;
       break;
      }
      case 32:  {
       $130 = HEAP32[$112>>2]|0;
       $131 = (($130) + ($$0155163<<2)|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = (($$0154162) + ($115))|0;
       $134 = (($104) + ($133<<2)|0);
       HEAP32[$134>>2] = $132;
       break;
      }
      default: {
      }
      }
      $135 = (($$0154162) + 1)|0;
      $exitcond = ($135|0)==($3|0);
      if ($exitcond) {
       break;
      } else {
       $$0154162 = $135;
      }
     }
     $116 = (($$0155163) + 1)|0;
     $117 = HEAP32[$0>>2]|0;
     $118 = ($116>>>0)<($117>>>0);
     if ($118) {
      $$0155163 = $116;
     } else {
      break;
     }
    }
   }
  } else {
   $136 = ($105|0)==(2);
   $137 = ($3|0)==(1);
   $or$cond3 = $137 & $136;
   if ($or$cond3) {
    $138 = HEAP32[$0>>2]|0;
    $139 = ($138|0)==(0);
    if (!($139)) {
     $140 = ((($0)) + 16|0);
     $141 = ((($0)) + 16|0);
     $142 = ((($0)) + 16|0);
     $$0153164 = 0;$$0165 = 0;
     while(1) {
      $143 = HEAP32[$7>>2]|0;
      switch ($143|0) {
      case 8:  {
       $144 = HEAP32[$140>>2]|0;
       $145 = (($144) + ($$0165)|0);
       $146 = HEAP8[$145>>0]|0;
       $147 = $146&255;
       $148 = $$0165 | 1;
       $149 = (($144) + ($148)|0);
       $150 = HEAP8[$149>>0]|0;
       $151 = $150&255;
       $152 = (($151) + ($147))|0;
       $153 = $152 >>> 1;
       $154 = $153&255;
       $155 = (($104) + ($$0153164)|0);
       HEAP8[$155>>0] = $154;
       break;
      }
      case 16:  {
       $156 = HEAP32[$141>>2]|0;
       $157 = (($156) + ($$0165<<1)|0);
       $158 = HEAP16[$157>>1]|0;
       $159 = $158 << 16 >> 16;
       $160 = $$0165 | 1;
       $161 = (($156) + ($160<<1)|0);
       $162 = HEAP16[$161>>1]|0;
       $163 = $162 << 16 >> 16;
       $164 = (($163) + ($159))|0;
       $165 = (($164|0) / 2)&-1;
       $166 = $165&65535;
       $167 = (($104) + ($$0153164<<1)|0);
       HEAP16[$167>>1] = $166;
       break;
      }
      case 32:  {
       $168 = HEAP32[$142>>2]|0;
       $169 = (($168) + ($$0165<<2)|0);
       $170 = +HEAPF32[$169>>2];
       $171 = $$0165 | 1;
       $172 = (($168) + ($171<<2)|0);
       $173 = +HEAPF32[$172>>2];
       $174 = $170 + $173;
       $175 = $174 * 0.5;
       $176 = (($104) + ($$0153164<<2)|0);
       HEAPF32[$176>>2] = $175;
       break;
      }
      default: {
      }
      }
      $177 = (($$0153164) + 1)|0;
      $178 = (($$0165) + 2)|0;
      $179 = HEAP32[$0>>2]|0;
      $180 = ($177>>>0)<($179>>>0);
      if ($180) {
       $$0153164 = $177;$$0165 = $178;
      } else {
       break L33;
      }
     }
    }
   }
  }
 } while(0);
 HEAP32[$96>>2] = $3;
 $181 = ((($0)) + 16|0);
 $182 = HEAP32[$181>>2]|0;
 _free($182);
 HEAP32[$181>>2] = $104;
 return;
}
function _stb_vorbis_open_filename($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_fopen($0,14498)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $6 = ($1|0)==(0|0);
  if ($6) {
   $$0 = 0;
  } else {
   HEAP32[$1>>2] = 6;
   $$0 = 0;
  }
 } else {
  $5 = (_stb_vorbis_open_file($3,1,$1,$2)|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _stb_vorbis_get_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$4$0$$sroa_idx2 = 0, $$sroa$5$0$$sroa_idx4 = 0, $$sroa$6$0$$sroa_idx6 = 0, $$sroa$7$0$$sroa_idx8 = 0, $$sroa$8$0$$sroa_idx10 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 116|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >> 1;
 HEAP32[$0>>2] = $4;
 $$sroa$4$0$$sroa_idx2 = ((($0)) + 4|0);
 HEAP32[$$sroa$4$0$$sroa_idx2>>2] = $3;
 $$sroa$5$0$$sroa_idx4 = ((($0)) + 8|0);
 HEAP32[$$sroa$5$0$$sroa_idx4>>2] = $6;
 $$sroa$6$0$$sroa_idx6 = ((($0)) + 12|0);
 HEAP32[$$sroa$6$0$$sroa_idx6>>2] = $8;
 $$sroa$7$0$$sroa_idx8 = ((($0)) + 16|0);
 HEAP32[$$sroa$7$0$$sroa_idx8>>2] = $10;
 $$sroa$8$0$$sroa_idx10 = ((($0)) + 20|0);
 HEAP32[$$sroa$8$0$$sroa_idx10>>2] = $13;
 return;
}
function _stb_vorbis_stream_length_in_samples($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$050 = 0, $$51 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 $3 = sp + 8|0;
 $4 = ((($0)) + 48|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  _error($0,2);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 796|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = (_stb_vorbis_get_file_offset($0)|0);
  $11 = ((($0)) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12>>>0)>(65535);
  $14 = ((($0)) + 52|0);
  $15 = HEAP32[$14>>2]|0;
  if ($13) {
   $16 = (($12) + -65536)|0;
   $17 = ($16>>>0)<($15>>>0);
   if ($17) {
    label = 6;
   } else {
    $$050 = $16;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   $$050 = $15;
  }
  _set_file_offset($0,$$050);
  $18 = (_vorbis_find_page($0,$1,$2)|0);
  $19 = ($18|0)==(0);
  do {
   if ($19) {
    $20 = ((($0)) + 100|0);
    HEAP32[$20>>2] = 36;
    HEAP32[$7>>2] = -1;
   } else {
    while(1) {
     $21 = (_stb_vorbis_get_file_offset($0)|0);
     $22 = HEAP32[$2>>2]|0;
     $23 = ($22|0)==(0);
     if (!($23)) {
      break;
     }
     $24 = HEAP32[$1>>2]|0;
     _set_file_offset($0,$24);
     $25 = (_vorbis_find_page($0,$1,$2)|0);
     $26 = ($25|0)==(0);
     if ($26) {
      break;
     }
    }
    _set_file_offset($0,$21);
    (_getn($0,$3,6)|0);
    $27 = (_get32($0)|0);
    $28 = (_get32($0)|0);
    $29 = $28 & $27;
    $30 = ($29|0)==(-1);
    if ($30) {
     $31 = ((($0)) + 100|0);
     HEAP32[$31>>2] = 36;
     HEAP32[$7>>2] = -1;
     break;
    } else {
     $32 = ($28|0)==(0);
     $$ = $32 ? $27 : -2;
     HEAP32[$7>>2] = $$;
     $33 = ((($0)) + 68|0);
     HEAP32[$33>>2] = $21;
     $34 = HEAP32[$1>>2]|0;
     $35 = ((($0)) + 72|0);
     HEAP32[$35>>2] = $34;
     $36 = ((($0)) + 76|0);
     HEAP32[$36>>2] = $$;
     break;
    }
   }
  } while(0);
  _set_file_offset($0,$10);
 }
 $37 = HEAP32[$7>>2]|0;
 $38 = ($37|0)==(-1);
 $$51 = $38 ? 0 : $37;
 $$0 = $$51;
 STACKTOP = sp;return ($$0|0);
}
function _stb_vorbis_stream_length_in_seconds($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_stb_vorbis_stream_length_in_samples($0)|0);
 $2 = (+($1>>>0));
 $3 = HEAP32[$0>>2]|0;
 $4 = (+($3>>>0));
 $5 = $2 / $4;
 return (+$5);
}
function _stb_vorbis_get_samples_short_interleaved($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$041 = 0, $$042 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (($3|0) / ($1|0))&-1;
 $6 = ((($0)) + 4|0);
 $7 = ((($0)) + 1508|0);
 $8 = ((($0)) + 1504|0);
 $9 = ((($0)) + 800|0);
 $$041 = 0;$$042 = $2;
 while(1) {
  $10 = ($5|0)>($$041|0);
  if (!($10)) {
   $$1 = $$041;
   label = 7;
   break;
  }
  $11 = HEAP32[$7>>2]|0;
  $12 = HEAP32[$8>>2]|0;
  $13 = (($11) - ($12))|0;
  $14 = (($13) + ($$041))|0;
  $15 = ($14|0)<($5|0);
  $16 = (($5) - ($$041))|0;
  $$ = $15 ? $13 : $16;
  $17 = ($$|0)==(0);
  if (!($17)) {
   $18 = HEAP32[$6>>2]|0;
   _convert_channels_short_interleaved($1,$$042,$18,$9,$12,$$);
  }
  $19 = (($$) + ($$041))|0;
  $20 = HEAP32[$8>>2]|0;
  $21 = (($20) + ($$))|0;
  HEAP32[$8>>2] = $21;
  $22 = ($19|0)==($5|0);
  if ($22) {
   $$1 = $19;
   label = 7;
   break;
  }
  $23 = Math_imul($$, $1)|0;
  $24 = (($$042) + ($23<<1)|0);
  $25 = (_stb_vorbis_get_frame_float($0,0,$4)|0);
  $not$ = ($25|0)==(0);
  if ($not$) {
   $$1 = $19;
   label = 7;
   break;
  } else {
   $$041 = $19;$$042 = $24;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($$1|0);
 }
 return (0)|0;
}
function _stb_vorbis_close($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 _vorbis_deinit($0);
 _setup_free($0,$0);
 return;
}
function _vorbis_deinit($0) {
 $0 = $0|0;
 var $$0103 = 0, $$08399 = 0, $$195 = 0, $$293 = 0, $$392 = 0, $$lcssa = 0, $$lcssa89 = 0, $$lcssa90 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 396|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 264|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)>(0);
  if ($6) {
   $7 = ((($0)) + 124|0);
   $$0103 = 0;
   while(1) {
    $8 = HEAP32[$1>>2]|0;
    $9 = (((($8) + (($$0103*24)|0)|0)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0|0);
    if (!($11)) {
     $12 = HEAP32[$7>>2]|0;
     $13 = (((($8) + (($$0103*24)|0)|0)) + 13|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = $14&255;
     $16 = (((($12) + (($15*2096)|0)|0)) + 4|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)>(0);
     $19 = HEAP32[$9>>2]|0;
     if ($18) {
      $$08399 = 0;$21 = $19;
      while(1) {
       $20 = (($21) + ($$08399<<2)|0);
       $22 = HEAP32[$20>>2]|0;
       _setup_free($0,$22);
       $23 = (($$08399) + 1)|0;
       $24 = HEAP32[$7>>2]|0;
       $25 = HEAP8[$13>>0]|0;
       $26 = $25&255;
       $27 = (((($24) + (($26*2096)|0)|0)) + 4|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($23|0)<($28|0);
       $30 = HEAP32[$9>>2]|0;
       if ($29) {
        $$08399 = $23;$21 = $30;
       } else {
        $$lcssa90 = $30;
        break;
       }
      }
     } else {
      $$lcssa90 = $19;
     }
     _setup_free($0,$$lcssa90);
    }
    $31 = (((($8) + (($$0103*24)|0)|0)) + 20|0);
    $32 = HEAP32[$31>>2]|0;
    _setup_free($0,$32);
    $33 = (($$0103) + 1)|0;
    $34 = HEAP32[$4>>2]|0;
    $35 = ($33|0)<($34|0);
    if ($35) {
     $$0103 = $33;
    } else {
     break;
    }
   }
  }
 }
 $36 = ((($0)) + 124|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if (!($38)) {
  $39 = ((($0)) + 120|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)>(0);
  $42 = HEAP32[$36>>2]|0;
  if ($41) {
   $$195 = 0;$44 = $42;
   while(1) {
    $43 = (((($44) + (($$195*2096)|0)|0)) + 8|0);
    $45 = HEAP32[$43>>2]|0;
    _setup_free($0,$45);
    $46 = (((($44) + (($$195*2096)|0)|0)) + 28|0);
    $47 = HEAP32[$46>>2]|0;
    _setup_free($0,$47);
    $48 = (((($44) + (($$195*2096)|0)|0)) + 32|0);
    $49 = HEAP32[$48>>2]|0;
    _setup_free($0,$49);
    $50 = (((($44) + (($$195*2096)|0)|0)) + 2084|0);
    $51 = HEAP32[$50>>2]|0;
    _setup_free($0,$51);
    $52 = (((($44) + (($$195*2096)|0)|0)) + 2088|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(0|0);
    $55 = ((($53)) + -4|0);
    $56 = $54 ? 0 : $55;
    _setup_free($0,$56);
    $57 = (($$195) + 1)|0;
    $58 = HEAP32[$39>>2]|0;
    $59 = ($57|0)<($58|0);
    $60 = HEAP32[$36>>2]|0;
    if ($59) {
     $$195 = $57;$44 = $60;
    } else {
     $$lcssa89 = $60;
     break;
    }
   }
  } else {
   $$lcssa89 = $42;
  }
  _setup_free($0,$$lcssa89);
 }
 $61 = ((($0)) + 260|0);
 $62 = HEAP32[$61>>2]|0;
 _setup_free($0,$62);
 $63 = HEAP32[$1>>2]|0;
 _setup_free($0,$63);
 $64 = ((($0)) + 404|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)==(0|0);
 if (!($66)) {
  $67 = ((($0)) + 400|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)>(0);
  $70 = HEAP32[$64>>2]|0;
  if ($69) {
   $$293 = 0;$72 = $70;
   while(1) {
    $71 = (((($72) + (($$293*40)|0)|0)) + 4|0);
    $73 = HEAP32[$71>>2]|0;
    _setup_free($0,$73);
    $74 = (($$293) + 1)|0;
    $75 = HEAP32[$67>>2]|0;
    $76 = ($74|0)<($75|0);
    $77 = HEAP32[$64>>2]|0;
    if ($76) {
     $$293 = $74;$72 = $77;
    } else {
     $$lcssa = $77;
     break;
    }
   }
  } else {
   $$lcssa = $70;
  }
  _setup_free($0,$$lcssa);
 }
 $78 = ((($0)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)>(0);
 if ($80) {
  $$392 = 0;
  while(1) {
   $81 = (((($0)) + 800|0) + ($$392<<2)|0);
   $82 = HEAP32[$81>>2]|0;
   _setup_free($0,$82);
   $83 = (((($0)) + 928|0) + ($$392<<2)|0);
   $84 = HEAP32[$83>>2]|0;
   _setup_free($0,$84);
   $85 = (((($0)) + 996|0) + ($$392<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   _setup_free($0,$86);
   $87 = (($$392) + 1)|0;
   $88 = HEAP32[$78>>2]|0;
   $89 = ($87|0)<($88|0);
   $90 = ($87|0)<(16);
   $91 = $90 & $89;
   if ($91) {
    $$392 = $87;
   } else {
    break;
   }
  }
 }
 $92 = ((($0)) + 1068|0);
 $93 = HEAP32[$92>>2]|0;
 _setup_free($0,$93);
 $94 = ((($0)) + 1076|0);
 $95 = HEAP32[$94>>2]|0;
 _setup_free($0,$95);
 $96 = ((($0)) + 1084|0);
 $97 = HEAP32[$96>>2]|0;
 _setup_free($0,$97);
 $98 = ((($0)) + 1092|0);
 $99 = HEAP32[$98>>2]|0;
 _setup_free($0,$99);
 $100 = ((($0)) + 1100|0);
 $101 = HEAP32[$100>>2]|0;
 _setup_free($0,$101);
 $102 = ((($0)) + 1072|0);
 $103 = HEAP32[$102>>2]|0;
 _setup_free($0,$103);
 $104 = ((($0)) + 1080|0);
 $105 = HEAP32[$104>>2]|0;
 _setup_free($0,$105);
 $106 = ((($0)) + 1088|0);
 $107 = HEAP32[$106>>2]|0;
 _setup_free($0,$107);
 $108 = ((($0)) + 1096|0);
 $109 = HEAP32[$108>>2]|0;
 _setup_free($0,$109);
 $110 = ((($0)) + 1104|0);
 $111 = HEAP32[$110>>2]|0;
 _setup_free($0,$111);
 $112 = ((($0)) + 28|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)==(0);
 if ($114) {
  return;
 }
 $115 = ((($0)) + 20|0);
 $116 = HEAP32[$115>>2]|0;
 (_fclose($116)|0);
 return;
}
function _setup_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  return;
 }
 _free($1);
 return;
}
function _convert_channels_short_interleaved($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$04866 = 0, $$04956 = 0, $$05265 = 0, $$1$lcssa = 0, $$150$lcssa = 0, $$15057 = 0, $$158 = 0, $$2$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $or$cond = 0, $or$cond3 = 0, $scevgep = 0, $smax = 0, $smax71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($0|0)!=($2|0);
 $7 = ($0|0)<(3);
 $or$cond = $7 & $6;
 $8 = ($2|0)<(7);
 $or$cond3 = $8 & $or$cond;
 if ($or$cond3) {
  $9 = ($0|0)==(2);
  if ($9) {
   $$04956 = 0;
  } else {
   ___assert_fail((14410|0),(13997|0),4760,(14421|0));
   // unreachable;
  }
  while(1) {
   _compute_stereo_samples($1,$2,$3,$4,$5);
   $10 = (($$04956) + 1)|0;
   $11 = ($10|0)<($0|0);
   if ($11) {
    $$04956 = $10;
   } else {
    break;
   }
  }
  return;
 }
 $12 = ($0|0)<($2|0);
 $13 = $12 ? $0 : $2;
 $14 = ($5|0)>(0);
 if (!($14)) {
  return;
 }
 $15 = ($13|0)>(0);
 $16 = ($13|0)>(0);
 $smax = $16 ? $13 : 0;
 $17 = (($0) - ($smax))|0;
 $18 = ($13|0)>(0);
 $smax71 = $18 ? $13 : 0;
 $19 = (($0) - ($smax71))|0;
 $20 = $19 << 1;
 $$04866 = $1;$$05265 = 0;
 while(1) {
  if ($15) {
   $21 = (($$05265) + ($4))|0;
   $$15057 = 0;$$158 = $$04866;
   while(1) {
    $23 = (($3) + ($$15057<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($24) + ($21<<2)|0);
    $26 = +HEAPF32[$25>>2];
    $27 = $26 + 384.0;
    $28 = (HEAPF32[tempDoublePtr>>2]=$27,HEAP32[tempDoublePtr>>2]|0);
    $29 = (($28) + -1136623616)|0;
    $30 = ($29>>>0)>(65535);
    $31 = ($28|0)<(1136656384);
    $32 = $31 ? 32768 : 32767;
    $$0 = $30 ? $32 : $28;
    $33 = $$0&65535;
    $34 = ((($$158)) + 2|0);
    HEAP16[$$158>>1] = $33;
    $35 = (($$15057) + 1)|0;
    $36 = ($35|0)<($13|0);
    if ($36) {
     $$15057 = $35;$$158 = $34;
    } else {
     $$1$lcssa = $34;$$150$lcssa = $13;
     break;
    }
   }
  } else {
   $$1$lcssa = $$04866;$$150$lcssa = 0;
  }
  $22 = ($$150$lcssa|0)<($0|0);
  if ($22) {
   _memset(($$1$lcssa|0),0,($20|0))|0;
   $scevgep = (($$1$lcssa) + ($17<<1)|0);
   $$2$lcssa = $scevgep;
  } else {
   $$2$lcssa = $$1$lcssa;
  }
  $37 = (($$05265) + 1)|0;
  $exitcond = ($37|0)==($5|0);
  if ($exitcond) {
   break;
  } else {
   $$04866 = $$2$lcssa;$$05265 = $37;
  }
 }
 return;
}
function _stb_vorbis_get_frame_float($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$020 = 0, $$022 = 0, $$lcssa = 0, $$lcssa21 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 48|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  _error($0,2);
  $$020 = 0;
  STACKTOP = sp;return ($$020|0);
 }
 $9 = (_vorbis_decode_packet($0,$3,$5,$4)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = ((($0)) + 1508|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 1504|0);
  HEAP32[$12>>2] = 0;
  $$020 = 0;
  STACKTOP = sp;return ($$020|0);
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 $15 = HEAP32[$4>>2]|0;
 $16 = (_vorbis_finish_frame($0,$13,$14,$15)|0);
 HEAP32[$3>>2] = $16;
 $17 = ((($0)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)>(0);
 $20 = HEAP32[$5>>2]|0;
 if ($19) {
  $21 = HEAP32[$5>>2]|0;
  $$022 = 0;$25 = $20;
  while(1) {
   $22 = (((($0)) + 800|0) + ($$022<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + ($25<<2)|0);
   $26 = (((($0)) + 864|0) + ($$022<<2)|0);
   HEAP32[$26>>2] = $24;
   $27 = (($$022) + 1)|0;
   $28 = HEAP32[$17>>2]|0;
   $29 = ($27|0)<($28|0);
   if ($29) {
    $$022 = $27;$25 = $21;
   } else {
    $$lcssa = $21;$$lcssa21 = $28;
    break;
   }
  }
 } else {
  $$lcssa = $20;$$lcssa21 = $18;
 }
 $30 = ((($0)) + 1504|0);
 HEAP32[$30>>2] = $$lcssa;
 $31 = HEAP32[$3>>2]|0;
 $32 = (($31) + ($$lcssa))|0;
 $33 = ((($0)) + 1508|0);
 HEAP32[$33>>2] = $32;
 $34 = ($1|0)==(0|0);
 if (!($34)) {
  HEAP32[$1>>2] = $$lcssa21;
 }
 $35 = ($2|0)==(0|0);
 if ($35) {
  $$020 = $31;
  STACKTOP = sp;return ($$020|0);
 }
 $36 = ((($0)) + 864|0);
 HEAP32[$2>>2] = $36;
 $$020 = $31;
 STACKTOP = sp;return ($$020|0);
}
function _error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 100|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _vorbis_decode_packet($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 $7 = (_vorbis_decode_initial($0,$2,$5,$3,$6,$4)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$4>>2]|0;
 $10 = (((($0)) + 412|0) + (($9*6)|0)|0);
 $11 = HEAP32[$2>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 $13 = HEAP32[$6>>2]|0;
 $14 = (_vorbis_decode_packet_rest($0,$1,$10,$11,$12,$13,$2)|0);
 $$0 = $14;
 STACKTOP = sp;return ($$0|0);
}
function _vorbis_finish_frame($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$06775 = 0, $$06878 = 0, $$06972 = 0, $$07073 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond79 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 992|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $54 = 0;
 } else {
  $7 = (_get_window($0,$5)|0);
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>(0);
  if ($10) {
   $11 = ($5|0)>(0);
   $12 = HEAP32[$8>>2]|0;
   $13 = (($5) + -1)|0;
   $$06878 = 0;
   while(1) {
    if ($11) {
     $14 = (((($0)) + 800|0) + ($$06878<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (((($0)) + 928|0) + ($$06878<<2)|0);
     $17 = HEAP32[$16>>2]|0;
     $$06775 = 0;
     while(1) {
      $18 = (($$06775) + ($2))|0;
      $19 = (($15) + ($18<<2)|0);
      $20 = +HEAPF32[$19>>2];
      $21 = (($7) + ($$06775<<2)|0);
      $22 = +HEAPF32[$21>>2];
      $23 = $20 * $22;
      $24 = (($17) + ($$06775<<2)|0);
      $25 = +HEAPF32[$24>>2];
      $26 = (($13) - ($$06775))|0;
      $27 = (($7) + ($26<<2)|0);
      $28 = +HEAPF32[$27>>2];
      $29 = $25 * $28;
      $30 = $23 + $29;
      HEAPF32[$19>>2] = $30;
      $31 = (($$06775) + 1)|0;
      $exitcond79 = ($31|0)==($5|0);
      if ($exitcond79) {
       break;
      } else {
       $$06775 = $31;
      }
     }
    }
    $32 = (($$06878) + 1)|0;
    $33 = ($32|0)<($12|0);
    if ($33) {
     $$06878 = $32;
    } else {
     break;
    }
   }
  }
  $$pr = HEAP32[$4>>2]|0;
  $54 = $$pr;
 }
 $34 = (($1) - ($3))|0;
 HEAP32[$4>>2] = $34;
 $35 = ((($0)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)>(0);
 if ($37) {
  $38 = ($1|0)>($3|0);
  $39 = HEAP32[$35>>2]|0;
  $40 = (($1) - ($3))|0;
  $$07073 = 0;
  while(1) {
   if ($38) {
    $41 = (((($0)) + 800|0) + ($$07073<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (((($0)) + 928|0) + ($$07073<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $$06972 = 0;$46 = $3;
    while(1) {
     $45 = (($42) + ($46<<2)|0);
     $47 = HEAP32[$45>>2]|0;
     $48 = (($44) + ($$06972<<2)|0);
     HEAP32[$48>>2] = $47;
     $49 = (($$06972) + 1)|0;
     $50 = (($49) + ($3))|0;
     $exitcond = ($49|0)==($40|0);
     if ($exitcond) {
      break;
     } else {
      $$06972 = $49;$46 = $50;
     }
    }
   }
   $51 = (($$07073) + 1)|0;
   $52 = ($51|0)<($39|0);
   if ($52) {
    $$07073 = $51;
   } else {
    break;
   }
  }
 }
 $53 = ($54|0)==(0);
 $55 = ($1|0)<($3|0);
 $$ = $55 ? $1 : $3;
 $56 = (($$) - ($2))|0;
 $57 = ((($0)) + 1416|0);
 if ($53) {
  $$0 = 0;
  return ($$0|0);
 }
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + ($56))|0;
 HEAP32[$57>>2] = $59;
 $$0 = $56;
 return ($$0|0);
}
function _get_window($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$sink = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 1;
 $3 = ((($0)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $$sink = 0;
 } else {
  $6 = ((($0)) + 116|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($2|0)==($7|0);
  if ($8) {
   $$sink = 1;
  } else {
   ___assert_fail((13995|0),(13997|0),2659,(14019|0));
   // unreachable;
  }
 }
 $9 = (((($0)) + 1092|0) + ($$sink<<2)|0);
 $$0 = HEAP32[$9>>2]|0;
 return ($$0|0);
}
function _vorbis_decode_initial($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$062 = 0, $$063 = 0, $$064 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $phitmp = 0, $storemerge = 0, $storemerge65 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 1508|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 1504|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 96|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ((($0)) + 48|0);
 while(1) {
  $14 = (_maybe_start_packet($0)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$0 = 0;
   label = 24;
   break;
  }
  $16 = (_get_bits($0,1)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   label = 9;
   break;
  }
  $18 = HEAP8[$11>>0]|0;
  $19 = ($18<<24>>24)==(0);
  if (!($19)) {
   label = 7;
   break;
  }
  while(1) {
   $20 = (_get8_packet($0)|0);
   $21 = ($20|0)==(-1);
   if ($21) {
    break;
   }
  }
  $12 = HEAP32[$8>>2]|0;
  $13 = ($12|0)==(0);
  if (!($13)) {
   $$0 = 0;
   label = 24;
   break;
  }
 }
 if ((label|0) == 7) {
  _error($0,35);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 9) {
  $22 = ((($0)) + 80|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $25 = ((($0)) + 84|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($0)) + 92|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($26|0)==($28|0);
   if (!($29)) {
    ___assert_fail((14030|0),(13997|0),2738,(14388|0));
    // unreachable;
   }
  }
  $30 = ((($0)) + 408|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + -1)|0;
  $33 = (_ilog($32)|0);
  $34 = (_get_bits($0,$33)|0);
  $35 = ($34|0)==(-1);
  if ($35) {
   $$0 = 0;
   return ($$0|0);
  }
  $36 = HEAP32[$30>>2]|0;
  $37 = ($34|0)<($36|0);
  if (!($37)) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$5>>2] = $34;
  $38 = (((($0)) + 412|0) + (($34*6)|0)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39<<24>>24)==(0);
  if ($40) {
   $45 = ((($0)) + 112|0);
   $46 = HEAP32[$45>>2]|0;
   $$062 = 0;$$063 = 0;$$064 = $46;
  } else {
   $41 = ((($0)) + 116|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (_get_bits($0,1)|0);
   $44 = (_get_bits($0,1)|0);
   $phitmp = ($43|0)!=(0);
   $$062 = $44;$$063 = $phitmp;$$064 = $42;
  }
  $47 = $$064 >> 1;
  $48 = HEAP8[$38>>0]|0;
  $49 = ($48<<24>>24)==(0);
  $or$cond = $$063 | $49;
  if ($or$cond) {
   HEAP32[$1>>2] = 0;
   $storemerge = $47;
  } else {
   $50 = ((($0)) + 112|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($$064) - ($51))|0;
   $53 = $52 >> 2;
   HEAP32[$1>>2] = $53;
   $54 = HEAP32[$50>>2]|0;
   $55 = (($54) + ($$064))|0;
   $56 = $55 >> 2;
   $storemerge = $56;
  }
  HEAP32[$2>>2] = $storemerge;
  $57 = ($$062|0)!=(0);
  $or$cond3 = $57 | $49;
  if ($or$cond3) {
   HEAP32[$3>>2] = $47;
   $storemerge65 = $$064;
  } else {
   $58 = ($$064*3)|0;
   $59 = ((($0)) + 112|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($58) - ($60))|0;
   $62 = $61 >> 2;
   HEAP32[$3>>2] = $62;
   $63 = HEAP32[$59>>2]|0;
   $64 = (($63) + ($58))|0;
   $65 = $64 >> 2;
   $storemerge65 = $65;
  }
  HEAP32[$4>>2] = $storemerge65;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 24) {
  return ($$0|0);
 }
 return (0)|0;
}
function _vorbis_decode_packet_rest($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$0409 = 0.0, $$0410 = 0.0, $$0411 = 0, $$041263 = 0, $$041652 = 0, $$0421$lcssa = 0, $$042133 = 0, $$042347 = 0, $$0427 = 0, $$042851 = 0, $$11 = 0, $$13 = 0, $$141341 = 0, $$141756 = 0, $$1422 = 0, $$1429$lcssa = 0, $$142946 = 0, $$1432 = 0, $$1437 = 0;
 var $$241438 = 0, $$241860 = 0, $$2430 = 0, $$2438 = 0, $$3 = 0, $$341530 = 0, $$341530$in = 0, $$341934 = 0, $$424 = 0, $$442026 = 0, $$4435$ph = 0, $$443545 = 0, $$523 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$lcssa19 = 0, $$sink$sink = 0, $$sink3 = 0, $$sink3$in = 0;
 var $$sink5 = 0, $$sink9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond69 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2560|0);
 $7 = sp + 1280|0;
 $8 = sp + 256|0;
 $9 = sp;
 $10 = sp + 2304|0;
 $11 = HEAP8[$2>>0]|0;
 $12 = $11&255;
 $13 = (((($0)) + 104|0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 404|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($2)) + 1|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = (($16) + (($19*40)|0)|0);
 $21 = $14 >> 1;
 $22 = (0 - ($21))|0;
 $23 = ((($0)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)>(0);
 L1: do {
  if ($25) {
   $26 = (((($16) + (($19*40)|0)|0)) + 4|0);
   $27 = ((($0)) + 260|0);
   $28 = ((($0)) + 1396|0);
   $29 = ((($9)) + 1|0);
   $30 = ((($0)) + 124|0);
   $31 = ((($0)) + 1396|0);
   $32 = ((($0)) + 1392|0);
   $33 = ((($0)) + 124|0);
   $34 = ((($0)) + 1396|0);
   $35 = ((($0)) + 1392|0);
   $$041263 = 0;
   while(1) {
    $36 = HEAP32[$26>>2]|0;
    $37 = (((($36) + (($$041263*3)|0)|0)) + 2|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = (($7) + ($$041263<<2)|0);
    HEAP32[$40>>2] = 0;
    $41 = ((((($16) + (($19*40)|0)|0)) + 9|0) + ($39)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = (((($0)) + 132|0) + ($43<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = ($45<<16>>16)==(0);
    if ($46) {
     break;
    }
    $47 = HEAP32[$27>>2]|0;
    $48 = (_get_bits($0,1)|0);
    $49 = ($48|0)==(0);
    do {
     if ($49) {
      label = 48;
     } else {
      $50 = (((($47) + (($43*1596)|0)|0)) + 1588|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = $51&255;
      $53 = (($52) + -1)|0;
      $54 = (4040 + ($53<<2)|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = (((($0)) + 996|0) + ($$041263<<2)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = (_ilog($55)|0);
      $59 = (($58) + -1)|0;
      $60 = (_get_bits($0,$59)|0);
      $61 = $60&65535;
      HEAP16[$57>>1] = $61;
      $62 = (_get_bits($0,$59)|0);
      $63 = $62&65535;
      $64 = ((($57)) + 2|0);
      HEAP16[$64>>1] = $63;
      $65 = (($47) + (($43*1596)|0)|0);
      $66 = HEAP8[$65>>0]|0;
      $67 = ($66<<24>>24)==(0);
      if (!($67)) {
       $$041652 = 0;$$042851 = 2;
       while(1) {
        $68 = ((((($47) + (($43*1596)|0)|0)) + 1|0) + ($$041652)|0);
        $69 = HEAP8[$68>>0]|0;
        $70 = $69&255;
        $71 = ((((($47) + (($43*1596)|0)|0)) + 33|0) + ($70)|0);
        $72 = HEAP8[$71>>0]|0;
        $73 = $72&255;
        $74 = ((((($47) + (($43*1596)|0)|0)) + 49|0) + ($70)|0);
        $75 = HEAP8[$74>>0]|0;
        $76 = $75&255;
        $77 = 1 << $76;
        $78 = (($77) + -1)|0;
        $79 = ($75<<24>>24)==(0);
        if ($79) {
         $$4435$ph = 0;
        } else {
         $80 = HEAP32[$30>>2]|0;
         $81 = ((((($47) + (($43*1596)|0)|0)) + 65|0) + ($70)|0);
         $82 = HEAP8[$81>>0]|0;
         $83 = $82&255;
         $84 = (($80) + (($83*2096)|0)|0);
         $85 = HEAP32[$31>>2]|0;
         $86 = ($85|0)<(10);
         if ($86) {
          _prep_huffman($0);
         }
         $87 = HEAP32[$32>>2]|0;
         $88 = $87 & 1023;
         $89 = ((((($80) + (($83*2096)|0)|0)) + 36|0) + ($88<<1)|0);
         $90 = HEAP16[$89>>1]|0;
         $91 = $90 << 16 >> 16;
         $92 = ($90<<16>>16)>(-1);
         if ($92) {
          $93 = (((($80) + (($83*2096)|0)|0)) + 8|0);
          $94 = HEAP32[$93>>2]|0;
          $95 = (($94) + ($91)|0);
          $96 = HEAP8[$95>>0]|0;
          $97 = $96&255;
          $98 = $87 >>> $97;
          HEAP32[$32>>2] = $98;
          $99 = HEAP32[$31>>2]|0;
          $100 = (($99) - ($97))|0;
          $101 = ($100|0)<(0);
          $$ = $101 ? 0 : $100;
          $$6 = $101 ? -1 : $91;
          HEAP32[$31>>2] = $$;
          $$1432 = $$6;
         } else {
          $102 = (_codebook_decode_scalar_raw($0,$84)|0);
          $$1432 = $102;
         }
         $103 = (((($80) + (($83*2096)|0)|0)) + 23|0);
         $104 = HEAP8[$103>>0]|0;
         $105 = ($104<<24>>24)==(0);
         if ($105) {
          $$4435$ph = $$1432;
         } else {
          $106 = (((($80) + (($83*2096)|0)|0)) + 2088|0);
          $107 = HEAP32[$106>>2]|0;
          $108 = (($107) + ($$1432<<2)|0);
          $109 = HEAP32[$108>>2]|0;
          $$4435$ph = $109;
         }
        }
        $110 = ($72<<24>>24)==(0);
        if ($110) {
         $$1429$lcssa = $$042851;
        } else {
         $$042347 = 0;$$142946 = $$042851;$$443545 = $$4435$ph;
         while(1) {
          $111 = $$443545 & $78;
          $112 = (((((($47) + (($43*1596)|0)|0)) + 82|0) + ($70<<4)|0) + ($111<<1)|0);
          $113 = HEAP16[$112>>1]|0;
          $114 = $$443545 >> $76;
          $115 = ($113<<16>>16)>(-1);
          if ($115) {
           $116 = $113 << 16 >> 16;
           $117 = HEAP32[$33>>2]|0;
           $118 = (($117) + (($116*2096)|0)|0);
           $119 = HEAP32[$34>>2]|0;
           $120 = ($119|0)<(10);
           if ($120) {
            _prep_huffman($0);
           }
           $121 = HEAP32[$35>>2]|0;
           $122 = $121 & 1023;
           $123 = ((((($117) + (($116*2096)|0)|0)) + 36|0) + ($122<<1)|0);
           $124 = HEAP16[$123>>1]|0;
           $125 = $124 << 16 >> 16;
           $126 = ($124<<16>>16)>(-1);
           if ($126) {
            $127 = (((($117) + (($116*2096)|0)|0)) + 8|0);
            $128 = HEAP32[$127>>2]|0;
            $129 = (($128) + ($125)|0);
            $130 = HEAP8[$129>>0]|0;
            $131 = $130&255;
            $132 = $121 >>> $131;
            HEAP32[$35>>2] = $132;
            $133 = HEAP32[$34>>2]|0;
            $134 = (($133) - ($131))|0;
            $135 = ($134|0)<(0);
            $$7 = $135 ? 0 : $134;
            $$8 = $135 ? -1 : $125;
            HEAP32[$34>>2] = $$7;
            $$1437 = $$8;
           } else {
            $136 = (_codebook_decode_scalar_raw($0,$118)|0);
            $$1437 = $136;
           }
           $137 = (((($117) + (($116*2096)|0)|0)) + 23|0);
           $138 = HEAP8[$137>>0]|0;
           $139 = ($138<<24>>24)==(0);
           if ($139) {
            $$2438 = $$1437;
           } else {
            $140 = (((($117) + (($116*2096)|0)|0)) + 2088|0);
            $141 = HEAP32[$140>>2]|0;
            $142 = (($141) + ($$1437<<2)|0);
            $143 = HEAP32[$142>>2]|0;
            $$2438 = $143;
           }
           $144 = $$2438&65535;
           $$sink9 = $144;
          } else {
           $$sink9 = 0;
          }
          $145 = (($57) + ($$142946<<1)|0);
          HEAP16[$145>>1] = $$sink9;
          $$2430 = (($$142946) + 1)|0;
          $146 = (($$042347) + 1)|0;
          $exitcond69 = ($146|0)==($73|0);
          if ($exitcond69) {
           break;
          } else {
           $$042347 = $146;$$142946 = $$2430;$$443545 = $114;
          }
         }
         $147 = (($$042851) + ($73))|0;
         $$1429$lcssa = $147;
        }
        $148 = (($$041652) + 1)|0;
        $149 = HEAP8[$65>>0]|0;
        $150 = $149&255;
        $151 = ($148|0)<($150|0);
        if ($151) {
         $$041652 = $148;$$042851 = $$1429$lcssa;
        } else {
         break;
        }
       }
      }
      $152 = HEAP32[$28>>2]|0;
      $153 = ($152|0)==(-1);
      if ($153) {
       label = 48;
       break;
      }
      HEAP8[$29>>0] = 1;
      HEAP8[$9>>0] = 1;
      $154 = (((($47) + (($43*1596)|0)|0)) + 1592|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ($155|0)>(2);
      if ($156) {
       $157 = (($55) + 65535)|0;
       $$141756 = 2;
       while(1) {
        $161 = ((((($47) + (($43*1596)|0)|0)) + 1088|0) + ($$141756<<1)|0);
        $162 = HEAP8[$161>>0]|0;
        $163 = $162&255;
        $164 = ((((((($47) + (($43*1596)|0)|0)) + 1088|0) + ($$141756<<1)|0)) + 1|0);
        $165 = HEAP8[$164>>0]|0;
        $166 = $165&255;
        $167 = ((((($47) + (($43*1596)|0)|0)) + 338|0) + ($$141756<<1)|0);
        $168 = HEAP16[$167>>1]|0;
        $169 = $168&65535;
        $170 = ((((($47) + (($43*1596)|0)|0)) + 338|0) + ($163<<1)|0);
        $171 = HEAP16[$170>>1]|0;
        $172 = $171&65535;
        $173 = ((((($47) + (($43*1596)|0)|0)) + 338|0) + ($166<<1)|0);
        $174 = HEAP16[$173>>1]|0;
        $175 = $174&65535;
        $176 = (($57) + ($163<<1)|0);
        $177 = HEAP16[$176>>1]|0;
        $178 = $177 << 16 >> 16;
        $179 = (($57) + ($166<<1)|0);
        $180 = HEAP16[$179>>1]|0;
        $181 = $180 << 16 >> 16;
        $182 = (_predict_point($169,$172,$175,$178,$181)|0);
        $183 = (($57) + ($$141756<<1)|0);
        $184 = HEAP16[$183>>1]|0;
        $185 = $184 << 16 >> 16;
        $186 = (($55) - ($182))|0;
        $187 = ($184<<16>>16)==(0);
        do {
         if ($187) {
          $203 = (($9) + ($$141756)|0);
          HEAP8[$203>>0] = 0;
          $204 = $182&65535;
          $$sink$sink = $204;
         } else {
          $188 = ($186|0)<($182|0);
          $$11 = $188 ? $186 : $182;
          $$0427 = $$11 << 1;
          $189 = (($9) + ($166)|0);
          HEAP8[$189>>0] = 1;
          $190 = (($9) + ($163)|0);
          HEAP8[$190>>0] = 1;
          $191 = (($9) + ($$141756)|0);
          HEAP8[$191>>0] = 1;
          $192 = ($185|0)<($$0427|0);
          if (!($192)) {
           $193 = ($186|0)>($182|0);
           if ($193) {
            $$sink$sink = $184;
            break;
           }
           $194 = (($157) - ($185))|0;
           $195 = $194&65535;
           $$sink$sink = $195;
           break;
          }
          $196 = $185 & 1;
          $197 = ($196|0)==(0);
          if ($197) {
           $201 = $185 >>> 1;
           $202 = (($201) + ($182))|0;
           $$sink3$in = $202;
          } else {
           $198 = (($185) + 1)|0;
           $199 = $198 >> 1;
           $200 = (($182) - ($199))|0;
           $$sink3$in = $200;
          }
          $$sink3 = $$sink3$in&65535;
          $$sink$sink = $$sink3;
         }
        } while(0);
        HEAP16[$183>>1] = $$sink$sink;
        $205 = (($$141756) + 1)|0;
        $206 = HEAP32[$154>>2]|0;
        $207 = ($205|0)<($206|0);
        if ($207) {
         $$141756 = $205;
        } else {
         $159 = $206;
         break;
        }
       }
      } else {
       $159 = $155;
      }
      $158 = ($159|0)>(0);
      if ($158) {
       $160 = HEAP32[$154>>2]|0;
       $$241860 = 0;
       while(1) {
        $208 = (($9) + ($$241860)|0);
        $209 = HEAP8[$208>>0]|0;
        $210 = ($209<<24>>24)==(0);
        if ($210) {
         $211 = (($57) + ($$241860<<1)|0);
         HEAP16[$211>>1] = -1;
        }
        $212 = (($$241860) + 1)|0;
        $213 = ($212|0)<($160|0);
        if ($213) {
         $$241860 = $212;
        } else {
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 48) {
     label = 0;
     HEAP32[$40>>2] = 1;
    }
    $214 = (($$041263) + 1)|0;
    $215 = HEAP32[$23>>2]|0;
    $216 = ($214|0)<($215|0);
    if ($216) {
     $$041263 = $214;
    } else {
     $$lcssa19 = $215;
     break L1;
    }
   }
   _error($0,21);
   $$3 = 0;
   STACKTOP = sp;return ($$3|0);
  } else {
   $$lcssa19 = $24;
  }
 } while(0);
 $217 = ((($0)) + 80|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = ($218|0)==(0|0);
 if (!($219)) {
  $220 = ((($0)) + 84|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = ((($0)) + 92|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = ($221|0)==($223|0);
  if (!($224)) {
   ___assert_fail((14030|0),(13997|0),2887,(14086|0));
   // unreachable;
  }
 }
 $225 = $$lcssa19 << 2;
 _memcpy(($8|0),($7|0),($225|0))|0;
 $226 = HEAP16[$20>>1]|0;
 $227 = ($226<<16>>16)==(0);
 if (!($227)) {
  $228 = (((($16) + (($19*40)|0)|0)) + 4|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = HEAP16[$20>>1]|0;
  $231 = $230&65535;
  $$141341 = 0;
  while(1) {
   $236 = (($229) + (($$141341*3)|0)|0);
   $237 = HEAP8[$236>>0]|0;
   $238 = $237&255;
   $239 = (($7) + ($238<<2)|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = ($240|0)==(0);
   $242 = (((($229) + (($$141341*3)|0)|0)) + 1|0);
   $243 = HEAP8[$242>>0]|0;
   $244 = $243&255;
   if ($241) {
    label = 59;
   } else {
    $245 = (($7) + ($244<<2)|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = ($246|0)==(0);
    if ($247) {
     label = 59;
    }
   }
   if ((label|0) == 59) {
    label = 0;
    $248 = (($7) + ($244<<2)|0);
    HEAP32[$248>>2] = 0;
    HEAP32[$239>>2] = 0;
   }
   $249 = (($$141341) + 1)|0;
   $250 = ($249|0)<($231|0);
   if ($250) {
    $$141341 = $249;
   } else {
    break;
   }
  }
 }
 $232 = (((($16) + (($19*40)|0)|0)) + 8|0);
 $233 = HEAP8[$232>>0]|0;
 $234 = ($233<<24>>24)==(0);
 if (!($234)) {
  $235 = (((($16) + (($19*40)|0)|0)) + 4|0);
  $$241438 = 0;
  while(1) {
   $251 = HEAP32[$23>>2]|0;
   $252 = ($251|0)>(0);
   if ($252) {
    $253 = HEAP32[$235>>2]|0;
    $254 = HEAP32[$23>>2]|0;
    $$042133 = 0;$$341934 = 0;
    while(1) {
     $255 = (((($253) + (($$341934*3)|0)|0)) + 2|0);
     $256 = HEAP8[$255>>0]|0;
     $257 = $256&255;
     $258 = ($257|0)==($$241438|0);
     if ($258) {
      $259 = (($7) + ($$341934<<2)|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = ($260|0)==(0);
      $262 = (($10) + ($$042133)|0);
      if ($261) {
       HEAP8[$262>>0] = 0;
       $263 = (((($0)) + 800|0) + ($$341934<<2)|0);
       $264 = HEAP32[$263>>2]|0;
       $$sink5 = $264;
      } else {
       HEAP8[$262>>0] = 1;
       $$sink5 = 0;
      }
      $265 = (($9) + ($$042133<<2)|0);
      HEAP32[$265>>2] = $$sink5;
      $266 = (($$042133) + 1)|0;
      $$1422 = $266;
     } else {
      $$1422 = $$042133;
     }
     $267 = (($$341934) + 1)|0;
     $268 = ($267|0)<($254|0);
     if ($268) {
      $$042133 = $$1422;$$341934 = $267;
     } else {
      $$0421$lcssa = $$1422;
      break;
     }
    }
   } else {
    $$0421$lcssa = 0;
   }
   $269 = ((((($16) + (($19*40)|0)|0)) + 24|0) + ($$241438)|0);
   $270 = HEAP8[$269>>0]|0;
   $271 = $270&255;
   _decode_residue($0,$9,$$0421$lcssa,$21,$271,$10);
   $272 = (($$241438) + 1)|0;
   $273 = HEAP8[$232>>0]|0;
   $274 = $273&255;
   $275 = ($272|0)<($274|0);
   if ($275) {
    $$241438 = $272;
   } else {
    break;
   }
  }
 }
 $276 = HEAP32[$217>>2]|0;
 $277 = ($276|0)==(0|0);
 if (!($277)) {
  $278 = ((($0)) + 84|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = ((($0)) + 92|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = ($279|0)==($281|0);
  if (!($282)) {
   ___assert_fail((14030|0),(13997|0),2920,(14086|0));
   // unreachable;
  }
 }
 $283 = HEAP16[$20>>1]|0;
 $284 = ($283<<16>>16)==(0);
 if (!($284)) {
  $285 = $283&65535;
  $286 = (((($16) + (($19*40)|0)|0)) + 4|0);
  $287 = HEAP32[$286>>2]|0;
  $288 = ($21|0)>(0);
  $$341530$in = $285;
  while(1) {
   $$341530 = (($$341530$in) + -1)|0;
   $293 = (($287) + (($$341530*3)|0)|0);
   $294 = HEAP8[$293>>0]|0;
   $295 = $294&255;
   $296 = (((($0)) + 800|0) + ($295<<2)|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = (((($287) + (($$341530*3)|0)|0)) + 1|0);
   $299 = HEAP8[$298>>0]|0;
   $300 = $299&255;
   $301 = (((($0)) + 800|0) + ($300<<2)|0);
   $302 = HEAP32[$301>>2]|0;
   if ($288) {
    $$442026 = 0;
    while(1) {
     $303 = (($297) + ($$442026<<2)|0);
     $304 = +HEAPF32[$303>>2];
     $305 = $304 > 0.0;
     $306 = (($302) + ($$442026<<2)|0);
     $307 = +HEAPF32[$306>>2];
     $308 = $307 > 0.0;
     do {
      if ($305) {
       if ($308) {
        $309 = $304 - $307;
        $$0409 = $304;$$0410 = $309;
        break;
       } else {
        $310 = $304 + $307;
        $$0409 = $310;$$0410 = $304;
        break;
       }
      } else {
       if ($308) {
        $311 = $304 + $307;
        $$0409 = $304;$$0410 = $311;
        break;
       } else {
        $312 = $304 - $307;
        $$0409 = $312;$$0410 = $304;
        break;
       }
      }
     } while(0);
     HEAPF32[$303>>2] = $$0409;
     HEAPF32[$306>>2] = $$0410;
     $313 = (($$442026) + 1)|0;
     $exitcond = ($313|0)==($21|0);
     if ($exitcond) {
      break;
     } else {
      $$442026 = $313;
     }
    }
   }
   $289 = ($$341530$in|0)>(1);
   if ($289) {
    $$341530$in = $$341530;
   } else {
    break;
   }
  }
 }
 $290 = HEAP32[$23>>2]|0;
 $291 = ($290|0)>(0);
 if ($291) {
  $292 = $21 << 2;
  $$424 = 0;
  while(1) {
   $316 = (($8) + ($$424<<2)|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = ($317|0)==(0);
   $319 = (((($0)) + 800|0) + ($$424<<2)|0);
   $320 = HEAP32[$319>>2]|0;
   if ($318) {
    $321 = (((($0)) + 996|0) + ($$424<<2)|0);
    $322 = HEAP32[$321>>2]|0;
    _do_floor($0,$20,$$424,$14,$320,$322);
   } else {
    _memset(($320|0),0,($292|0))|0;
   }
   $323 = (($$424) + 1)|0;
   $315 = HEAP32[$23>>2]|0;
   $324 = ($323|0)<($315|0);
   if ($324) {
    $$424 = $323;
   } else {
    break;
   }
  }
  $314 = ($315|0)>(0);
  if ($314) {
   $$523 = 0;
   while(1) {
    $325 = (((($0)) + 800|0) + ($$523<<2)|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = HEAP8[$2>>0]|0;
    $328 = $327&255;
    _inverse_mdct($326,$14,$0,$328);
    $329 = (($$523) + 1)|0;
    $330 = HEAP32[$23>>2]|0;
    $331 = ($329|0)<($330|0);
    if ($331) {
     $$523 = $329;
    } else {
     break;
    }
   }
  }
 }
 _flush_packet($0);
 $332 = ((($0)) + 1377|0);
 $333 = HEAP8[$332>>0]|0;
 $334 = ($333<<24>>24)==(0);
 do {
  if ($334) {
   $339 = ((($0)) + 1412|0);
   $340 = HEAP32[$339>>2]|0;
   $341 = ($340|0)==(0);
   if ($341) {
    $$0411 = $3;
   } else {
    $342 = (($4) - ($3))|0;
    $343 = ($340|0)<($342|0);
    if ($343) {
     $345 = (($340) + ($3))|0;
     HEAP32[$6>>2] = $345;
     HEAP32[$339>>2] = 0;
     $$0411 = $345;
     break;
    } else {
     $344 = (($340) - ($342))|0;
     HEAP32[$339>>2] = $344;
     HEAP32[$6>>2] = $4;
     $$0411 = $4;
     break;
    }
   }
  } else {
   $335 = ((($0)) + 1060|0);
   HEAP32[$335>>2] = $22;
   $336 = (($14) - ($5))|0;
   $337 = ((($0)) + 1412|0);
   HEAP32[$337>>2] = $336;
   $338 = ((($0)) + 1064|0);
   HEAP32[$338>>2] = 1;
   HEAP8[$332>>0] = 0;
   $$0411 = $3;
  }
 } while(0);
 $346 = ((($0)) + 1388|0);
 $347 = HEAP32[$346>>2]|0;
 $348 = ((($0)) + 1404|0);
 $349 = HEAP32[$348>>2]|0;
 $350 = ($347|0)==($349|0);
 if ($350) {
  $351 = ((($0)) + 1064|0);
  $352 = HEAP32[$351>>2]|0;
  $353 = ($352|0)==(0);
  if (!($353)) {
   $354 = ((($0)) + 1375|0);
   $355 = HEAP8[$354>>0]|0;
   $356 = $355 & 4;
   $357 = ($356<<24>>24)==(0);
   if (!($357)) {
    $358 = ((($0)) + 1408|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = (($5) - ($14))|0;
    $361 = (($359) + ($360))|0;
    $362 = ((($0)) + 1060|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = (($5) - ($$0411))|0;
    $365 = (($364) + ($363))|0;
    $366 = ($361>>>0)<($365>>>0);
    $367 = ($361>>>0)<($363>>>0);
    $368 = (($361) - ($363))|0;
    $storemerge = $367 ? 0 : $368;
    $369 = (($storemerge) + ($$0411))|0;
    $370 = ($369|0)>($5|0);
    $$13 = $370 ? $5 : $369;
    if ($366) {
     HEAP32[$1>>2] = $$13;
     $371 = HEAP32[$362>>2]|0;
     $372 = (($371) + ($$13))|0;
     HEAP32[$362>>2] = $372;
     $$3 = 1;
     STACKTOP = sp;return ($$3|0);
    }
   }
  }
  $373 = ((($0)) + 1408|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = (($$0411) - ($21))|0;
  $376 = (($375) + ($374))|0;
  $377 = ((($0)) + 1060|0);
  HEAP32[$377>>2] = $376;
  HEAP32[$351>>2] = 1;
 }
 $378 = ((($0)) + 1064|0);
 $379 = HEAP32[$378>>2]|0;
 $380 = ($379|0)==(0);
 $381 = ((($0)) + 1060|0);
 if (!($380)) {
  $382 = (($4) - ($$0411))|0;
  $383 = HEAP32[$381>>2]|0;
  $384 = (($382) + ($383))|0;
  HEAP32[$381>>2] = $384;
 }
 $385 = HEAP32[$217>>2]|0;
 $386 = ($385|0)==(0|0);
 if (!($386)) {
  $387 = ((($0)) + 84|0);
  $388 = HEAP32[$387>>2]|0;
  $389 = ((($0)) + 92|0);
  $390 = HEAP32[$389>>2]|0;
  $391 = ($388|0)==($390|0);
  if (!($391)) {
   ___assert_fail((14030|0),(13997|0),3036,(14086|0));
   // unreachable;
  }
 }
 HEAP32[$1>>2] = $5;
 $$3 = 1;
 STACKTOP = sp;return ($$3|0);
}
function _get_bits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$2 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 1396|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $$2 = 0;
  return ($$2|0);
 }
 $5 = ($3|0)<($1|0);
 L4: do {
  if ($5) {
   $6 = ($1|0)>(24);
   if ($6) {
    $7 = (_get_bits($0,24)|0);
    $8 = (($1) + -24)|0;
    $9 = (_get_bits($0,$8)|0);
    $10 = $9 << 24;
    $11 = (($10) + ($7))|0;
    return ($11|0);
   }
   $12 = ($3|0)==(0);
   if ($12) {
    $13 = ((($0)) + 1392|0);
    HEAP32[$13>>2] = 0;
   }
   $14 = HEAP32[$2>>2]|0;
   $15 = ($14|0)<($1|0);
   if ($15) {
    $16 = ((($0)) + 1392|0);
    while(1) {
     $17 = (_get8_packet_raw($0)|0);
     $18 = ($17|0)==(-1);
     if ($18) {
      break;
     }
     $19 = HEAP32[$2>>2]|0;
     $20 = $17 << $19;
     $21 = HEAP32[$16>>2]|0;
     $22 = (($21) + ($20))|0;
     HEAP32[$16>>2] = $22;
     $23 = (($19) + 8)|0;
     HEAP32[$2>>2] = $23;
     $24 = ($23|0)<($1|0);
     if (!($24)) {
      $26 = $23;
      break L4;
     }
    }
    HEAP32[$2>>2] = -1;
    $$2 = 0;
    return ($$2|0);
   } else {
    $26 = $14;
   }
  } else {
   $$pr = HEAP32[$2>>2]|0;
   $26 = $$pr;
  }
 } while(0);
 $25 = ($26|0)<(0);
 if ($25) {
  $$2 = 0;
  return ($$2|0);
 }
 $27 = ((($0)) + 1392|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = 1 << $1;
 $30 = (($29) + -1)|0;
 $31 = $28 & $30;
 $32 = $28 >>> $1;
 HEAP32[$27>>2] = $32;
 $33 = (($26) - ($1))|0;
 HEAP32[$2>>2] = $33;
 $$2 = $31;
 return ($$2|0);
}
function _ilog($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($0|0)<(16384);
 if ($2) {
  $3 = ($0|0)<(16);
  if ($3) {
   $4 = (14372 + ($0)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = $5 << 24 >> 24;
   $$0 = $6;
   return ($$0|0);
  }
  $7 = ($0|0)<(512);
  if ($7) {
   $8 = $0 >>> 5;
   $9 = (14372 + ($8)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = (($11) + 5)|0;
   $$0 = $12;
   return ($$0|0);
  } else {
   $13 = $0 >>> 10;
   $14 = (14372 + ($13)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = (($16) + 10)|0;
   $$0 = $17;
   return ($$0|0);
  }
 }
 $18 = ($0|0)<(16777216);
 if ($18) {
  $19 = ($0|0)<(524288);
  if ($19) {
   $20 = $0 >>> 15;
   $21 = (14372 + ($20)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 << 24 >> 24;
   $24 = (($23) + 15)|0;
   $$0 = $24;
   return ($$0|0);
  } else {
   $25 = $0 >>> 20;
   $26 = (14372 + ($25)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = (($28) + 20)|0;
   $$0 = $29;
   return ($$0|0);
  }
 } else {
  $30 = ($0|0)<(536870912);
  if ($30) {
   $31 = $0 >>> 25;
   $32 = (14372 + ($31)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = (($34) + 25)|0;
   $$0 = $35;
   return ($$0|0);
  } else {
   $36 = $0 >>> 30;
   $37 = (14372 + ($36)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38 << 24 >> 24;
   $40 = (($39) + 30)|0;
   $$0 = $40;
   return ($$0|0);
  }
 }
 return (0)|0;
}
function _prep_huffman($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1396|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(25);
 if (!($3)) {
  return;
 }
 $4 = ($2|0)==(0);
 if ($4) {
  $5 = ((($0)) + 1392|0);
  HEAP32[$5>>2] = 0;
 }
 $6 = ((($0)) + 1376|0);
 $7 = ((($0)) + 1384|0);
 $8 = ((($0)) + 1392|0);
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = HEAP8[$6>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    label = 9;
    break;
   }
  }
  $13 = (_get8_packet_raw($0)|0);
  $14 = ($13|0)==(-1);
  if ($14) {
   label = 9;
   break;
  }
  $15 = HEAP32[$1>>2]|0;
  $16 = $13 << $15;
  $17 = HEAP32[$8>>2]|0;
  $18 = (($17) + ($16))|0;
  HEAP32[$8>>2] = $18;
  $19 = (($15) + 8)|0;
  HEAP32[$1>>2] = $19;
  $20 = ($19|0)<(25);
  if (!($20)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return;
 }
}
function _codebook_decode_scalar_raw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$06574 = 0, $$06676 = 0, $$068$lcssa = 0, $$06875 = 0, $$1 = 0, $$167 = 0, $$169 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _prep_huffman($0);
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = ((($1)) + 2084|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$1 = -1;
   return ($$1|0);
  }
 }
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(8);
 if ($10) {
  $11 = ((($1)) + 2084|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   label = 6;
  }
 } else {
  $14 = HEAP32[$2>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $16 = ((($0)) + 1392|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_bit_reverse($17)|0);
  $19 = ((($1)) + 2092|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)>(1);
  if ($21) {
   $22 = ((($1)) + 2084|0);
   $23 = HEAP32[$22>>2]|0;
   $$06676 = $20;$$06875 = 0;
   while(1) {
    $24 = $$06676 >>> 1;
    $25 = (($24) + ($$06875))|0;
    $26 = (($23) + ($25<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27>>>0)>($18>>>0);
    $29 = (($$06676) - ($24))|0;
    $$169 = $28 ? $$06875 : $25;
    $$167 = $28 ? $24 : $29;
    $30 = ($$167|0)>(1);
    if ($30) {
     $$06676 = $$167;$$06875 = $$169;
    } else {
     $$068$lcssa = $$169;
     break;
    }
   }
  } else {
   $$068$lcssa = 0;
  }
  $31 = ((($1)) + 23|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = ($32<<24>>24)==(0);
  if ($33) {
   $34 = ((($1)) + 2088|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($$068$lcssa<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$2 = $37;
  } else {
   $$2 = $$068$lcssa;
  }
  $38 = ((($1)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($$2)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ((($0)) + 1396|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)<($42|0);
  if ($45) {
   $$0 = -1;$storemerge = 0;
  } else {
   $46 = (($44) - ($42))|0;
   $47 = HEAP32[$16>>2]|0;
   $48 = $47 >>> $42;
   HEAP32[$16>>2] = $48;
   $$0 = $$2;$storemerge = $46;
  }
  HEAP32[$43>>2] = $storemerge;
  $$1 = $$0;
  return ($$1|0);
 }
 $49 = ((($1)) + 23|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  ___assert_fail((14334|0),(13997|0),1255,(14345|0));
  // unreachable;
 }
 $52 = HEAP32[$8>>2]|0;
 $53 = ($52|0)>(0);
 L26: do {
  if ($53) {
   $54 = ((($1)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($0)) + 1392|0);
   $$06574 = 0;
   while(1) {
    $57 = (($55) + ($$06574)|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = ($58<<24>>24)==(-1);
    if (!($60)) {
     $61 = HEAP32[$2>>2]|0;
     $62 = (($61) + ($$06574<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = HEAP32[$56>>2]|0;
     $65 = 1 << $59;
     $66 = (($65) + -1)|0;
     $67 = $64 & $66;
     $68 = ($63|0)==($67|0);
     if ($68) {
      break;
     }
    }
    $76 = (($$06574) + 1)|0;
    $77 = HEAP32[$8>>2]|0;
    $78 = ($76|0)<($77|0);
    if ($78) {
     $$06574 = $76;
    } else {
     break L26;
    }
   }
   $69 = ((($0)) + 1396|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)<($59|0);
   if ($71) {
    HEAP32[$69>>2] = 0;
    $$1 = -1;
    return ($$1|0);
   } else {
    $72 = $64 >>> $59;
    HEAP32[$56>>2] = $72;
    $73 = HEAP8[$57>>0]|0;
    $74 = $73&255;
    $75 = (($70) - ($74))|0;
    HEAP32[$69>>2] = $75;
    $$1 = $$06574;
    return ($$1|0);
   }
  }
 } while(0);
 _error($0,21);
 $79 = ((($0)) + 1396|0);
 HEAP32[$79>>2] = 0;
 $$1 = -1;
 return ($$1|0);
}
function _predict_point($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$p = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (($4) - ($3))|0;
 $6 = (($2) - ($1))|0;
 $ispos = ($5|0)>(-1);
 $neg = (0 - ($5))|0;
 $7 = $ispos ? $5 : $neg;
 $8 = (($0) - ($1))|0;
 $9 = Math_imul($7, $8)|0;
 $10 = (($9|0) / ($6|0))&-1;
 $11 = ($5|0)<(0);
 $12 = (0 - ($10))|0;
 $$p = $11 ? $12 : $10;
 $13 = (($$p) + ($3))|0;
 return ($13|0);
}
function _decode_residue($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0434$lcssa = 0, $$0434590 = 0, $$0437586 = 0, $$0439574 = 0, $$0444572 = 0, $$0465608 = 0, $$0466607 = 0, $$0613 = 0, $$1435596 = 0, $$1438611 = 0, $$1440$lcssa = 0, $$1440567 = 0, $$1451 = 0, $$1463 = 0, $$1467$lcssa = 0, $$1467603 = 0, $$1469 = 0, $$1472 = 0, $$1568 = 0;
 var $$2436599 = 0, $$2446562 = 0, $$2452 = 0, $$2464 = 0, $$2470 = 0, $$2473 = 0, $$2561 = 0, $$3442564 = 0, $$3578 = 0, $$4443$lcssa = 0, $$4443560 = 0, $$4448582 = 0, $$4605 = 0, $$477 = 0, $$480 = 0, $$481 = 0, $$484 = 0, $$485 = 0, $$488 = 0, $$489 = 0;
 var $$6584 = 0, $$7$lcssa = 0, $$7577 = 0, $$alloca_mul = 0, $$not = 0, $$not617 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $not$ = 0, $not$521 = 0, $not$522 = 0, $not$523 = 0, $or$cond = 0, $or$cond478 = 0, $or$cond478566 = 0, $or$cond482 = 0, $or$cond482559 = 0;
 var $or$cond486 = 0, $or$cond486576 = 0, $or$cond490 = 0, $or$cond490602 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 396|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (((($0)) + 268|0) + ($4<<1)|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (((($9) + (($4*24)|0)|0)) + 13|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ((($0)) + 124|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + (($15*2096)|0)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (((($9) + (($4*24)|0)|0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($9) + (($4*24)|0)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) - ($23))|0;
 $25 = (((($9) + (($4*24)|0)|0)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24>>>0) / ($26>>>0))&-1;
 $28 = ((($0)) + 92|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($0)) + 80|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 $33 = $27 << 2;
 $34 = (($33) + 4)|0;
 $35 = ((($0)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = Math_imul($36, $34)|0;
 if ($32) {
  $$alloca_mul = $37;
  $39 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
  $41 = $39;
 } else {
  $38 = (_setup_temp_malloc($0,$37)|0);
  $41 = $38;
 }
 $40 = HEAP32[$35>>2]|0;
 $42 = (_make_block_array($41,$40,$33)|0);
 $43 = ($2|0)>(0);
 if ($43) {
  $44 = $3 << 2;
  $$0613 = 0;
  while(1) {
   $45 = (($5) + ($$0613)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = ($46<<24>>24)==(0);
   if ($47) {
    $48 = (($1) + ($$0613<<2)|0);
    $49 = HEAP32[$48>>2]|0;
    _memset(($49|0),0,($44|0))|0;
   }
   $50 = (($$0613) + 1)|0;
   $exitcond = ($50|0)==($2|0);
   if ($exitcond) {
    break;
   } else {
    $$0613 = $50;
   }
  }
 }
 $51 = ($11<<16>>16)==(2);
 $52 = ($2|0)!=(1);
 $or$cond = $52 & $51;
 if (!($or$cond)) {
  $53 = ($27|0)>(0);
  $54 = ($19|0)>(0);
  $55 = ($2|0)>(0);
  $56 = (((($9) + (($4*24)|0)|0)) + 20|0);
  $57 = ((($0)) + 1396|0);
  $58 = ((($0)) + 1392|0);
  $59 = (((($9) + (($4*24)|0)|0)) + 16|0);
  $$not617 = ($2|0)<(1);
  $$1438611 = 0;
  L15: while(1) {
   if ($53) {
    $$not = ($$1438611|0)!=(0);
    $brmerge = $$not | $$not617;
    $$0465608 = 0;$$0466607 = 0;
    while(1) {
     if (!($brmerge)) {
      $$1435596 = 0;
      while(1) {
       $294 = (($5) + ($$1435596)|0);
       $295 = HEAP8[$294>>0]|0;
       $296 = ($295<<24>>24)==(0);
       if ($296) {
        $297 = HEAP32[$16>>2]|0;
        $298 = HEAP8[$13>>0]|0;
        $299 = $298&255;
        $300 = (($297) + (($299*2096)|0)|0);
        $301 = HEAP32[$57>>2]|0;
        $302 = ($301|0)<(10);
        if ($302) {
         _prep_huffman($0);
        }
        $303 = HEAP32[$58>>2]|0;
        $304 = $303 & 1023;
        $305 = ((((($297) + (($299*2096)|0)|0)) + 36|0) + ($304<<1)|0);
        $306 = HEAP16[$305>>1]|0;
        $307 = $306 << 16 >> 16;
        $308 = ($306<<16>>16)>(-1);
        if ($308) {
         $309 = (((($297) + (($299*2096)|0)|0)) + 8|0);
         $310 = HEAP32[$309>>2]|0;
         $311 = (($310) + ($307)|0);
         $312 = HEAP8[$311>>0]|0;
         $313 = $312&255;
         $314 = $303 >>> $313;
         HEAP32[$58>>2] = $314;
         $315 = HEAP32[$57>>2]|0;
         $316 = (($315) - ($313))|0;
         $317 = ($316|0)<(0);
         $$488 = $317 ? 0 : $316;
         $$489 = $317 ? -1 : $307;
         HEAP32[$57>>2] = $$488;
         $$1463 = $$489;
        } else {
         $318 = (_codebook_decode_scalar_raw($0,$300)|0);
         $$1463 = $318;
        }
        $319 = (((($297) + (($299*2096)|0)|0)) + 23|0);
        $320 = HEAP8[$319>>0]|0;
        $321 = ($320<<24>>24)==(0);
        if ($321) {
         $$2464 = $$1463;
        } else {
         $322 = (((($297) + (($299*2096)|0)|0)) + 2088|0);
         $323 = HEAP32[$322>>2]|0;
         $324 = (($323) + ($$1463<<2)|0);
         $325 = HEAP32[$324>>2]|0;
         $$2464 = $325;
        }
        $326 = ($$2464|0)==(-1);
        if ($326) {
         label = 98;
         break L15;
        }
        $327 = HEAP32[$59>>2]|0;
        $328 = (($327) + ($$2464<<2)|0);
        $329 = HEAP32[$328>>2]|0;
        $330 = (($41) + ($$1435596<<2)|0);
        $331 = HEAP32[$330>>2]|0;
        $332 = (($331) + ($$0465608<<2)|0);
        HEAP32[$332>>2] = $329;
       }
       $333 = (($$1435596) + 1)|0;
       $334 = ($333|0)<($2|0);
       if ($334) {
        $$1435596 = $333;
       } else {
        break;
       }
      }
     }
     $293 = ($$0466607|0)<($27|0);
     $or$cond490602 = $293 & $54;
     if ($or$cond490602) {
      $$1467603 = $$0466607;$$4605 = 0;
      while(1) {
       if ($55) {
        $$2436599 = 0;
        while(1) {
         $335 = (($5) + ($$2436599)|0);
         $336 = HEAP8[$335>>0]|0;
         $337 = ($336<<24>>24)==(0);
         if ($337) {
          $338 = (($41) + ($$2436599<<2)|0);
          $339 = HEAP32[$338>>2]|0;
          $340 = (($339) + ($$0465608<<2)|0);
          $341 = HEAP32[$340>>2]|0;
          $342 = (($341) + ($$4605)|0);
          $343 = HEAP8[$342>>0]|0;
          $344 = $343&255;
          $345 = HEAP32[$56>>2]|0;
          $346 = ((($345) + ($344<<4)|0) + ($$1438611<<1)|0);
          $347 = HEAP16[$346>>1]|0;
          $348 = ($347<<16>>16)>(-1);
          if ($348) {
           $349 = $347 << 16 >> 16;
           $350 = (($1) + ($$2436599<<2)|0);
           $351 = HEAP32[$350>>2]|0;
           $352 = HEAP32[$22>>2]|0;
           $353 = HEAP32[$25>>2]|0;
           $354 = Math_imul($353, $$1467603)|0;
           $355 = (($354) + ($352))|0;
           $356 = HEAP32[$16>>2]|0;
           $357 = (($356) + (($349*2096)|0)|0);
           $358 = (_residue_decode($0,$357,$351,$355,$353,$12)|0);
           $not$ = ($358|0)==(0);
           if ($not$) {
            label = 98;
            break L15;
           }
          }
         }
         $359 = (($$2436599) + 1)|0;
         $360 = ($359|0)<($2|0);
         if ($360) {
          $$2436599 = $359;
         } else {
          break;
         }
        }
       }
       $361 = (($$4605) + 1)|0;
       $362 = (($$1467603) + 1)|0;
       $363 = ($361|0)<($19|0);
       $364 = ($362|0)<($27|0);
       $or$cond490 = $364 & $363;
       if ($or$cond490) {
        $$1467603 = $362;$$4605 = $361;
       } else {
        $$1467$lcssa = $362;
        break;
       }
      }
     } else {
      $$1467$lcssa = $$0466607;
     }
     $365 = (($$0465608) + 1)|0;
     $366 = ($$1467$lcssa|0)<($27|0);
     if ($366) {
      $$0465608 = $365;$$0466607 = $$1467$lcssa;
     } else {
      break;
     }
    }
   }
   $367 = (($$1438611) + 1)|0;
   $368 = ($367|0)<(8);
   if ($368) {
    $$1438611 = $367;
   } else {
    label = 98;
    break;
   }
  }
  if ((label|0) == 98) {
   HEAP32[$28>>2] = $29;
   STACKTOP = sp;return;
  }
 }
 $60 = ($2|0)>(0);
 L57: do {
  if ($60) {
   $$0434590 = 0;
   while(1) {
    $61 = (($5) + ($$0434590)|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = ($62<<24>>24)==(0);
    if ($63) {
     $$0434$lcssa = $$0434590;
     break L57;
    }
    $64 = (($$0434590) + 1)|0;
    $65 = ($64|0)<($2|0);
    if ($65) {
     $$0434590 = $64;
    } else {
     $$0434$lcssa = $64;
     break;
    }
   }
  } else {
   $$0434$lcssa = 0;
  }
 } while(0);
 $66 = ($$0434$lcssa|0)==($2|0);
 if ($66) {
  HEAP32[$28>>2] = $29;
  STACKTOP = sp;return;
 }
 $67 = ($27|0)>(0);
 $68 = ((($0)) + 1396|0);
 $69 = ((($0)) + 1392|0);
 $70 = (((($9) + (($4*24)|0)|0)) + 16|0);
 $71 = ($19|0)>(0);
 $72 = (((($9) + (($4*24)|0)|0)) + 20|0);
 $73 = ($27|0)>(0);
 $74 = ((($0)) + 1396|0);
 $75 = ((($0)) + 1392|0);
 $76 = (((($9) + (($4*24)|0)|0)) + 16|0);
 $77 = ($19|0)>(0);
 $78 = (((($9) + (($4*24)|0)|0)) + 20|0);
 $79 = ($27|0)>(0);
 $80 = ((($0)) + 1396|0);
 $81 = ((($0)) + 1392|0);
 $82 = (((($9) + (($4*24)|0)|0)) + 16|0);
 $83 = ($19|0)>(0);
 $84 = (((($9) + (($4*24)|0)|0)) + 20|0);
 $$0437586 = 0;
 L65: while(1) {
  switch ($2|0) {
  case 2:  {
   if ($73) {
    $86 = ($$0437586|0)==(0);
    $$0439574 = 0;$$0444572 = 0;
    while(1) {
     $88 = HEAP32[$22>>2]|0;
     $89 = HEAP32[$25>>2]|0;
     $90 = Math_imul($89, $$0439574)|0;
     $91 = (($90) + ($88))|0;
     $92 = $91 & 1;
     HEAP32[$6>>2] = $92;
     $93 = $91 >> 1;
     HEAP32[$7>>2] = $93;
     if ($86) {
      $94 = HEAP32[$16>>2]|0;
      $95 = HEAP8[$13>>0]|0;
      $96 = $95&255;
      $97 = (($94) + (($96*2096)|0)|0);
      $98 = HEAP32[$74>>2]|0;
      $99 = ($98|0)<(10);
      if ($99) {
       _prep_huffman($0);
      }
      $100 = HEAP32[$75>>2]|0;
      $101 = $100 & 1023;
      $102 = ((((($94) + (($96*2096)|0)|0)) + 36|0) + ($101<<1)|0);
      $103 = HEAP16[$102>>1]|0;
      $104 = $103 << 16 >> 16;
      $105 = ($103<<16>>16)>(-1);
      if ($105) {
       $106 = (((($94) + (($96*2096)|0)|0)) + 8|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = (($107) + ($104)|0);
       $109 = HEAP8[$108>>0]|0;
       $110 = $109&255;
       $111 = $100 >>> $110;
       HEAP32[$75>>2] = $111;
       $112 = HEAP32[$74>>2]|0;
       $113 = (($112) - ($110))|0;
       $114 = ($113|0)<(0);
       $$ = $114 ? 0 : $113;
       $$477 = $114 ? -1 : $104;
       HEAP32[$74>>2] = $$;
       $$1451 = $$477;
      } else {
       $115 = (_codebook_decode_scalar_raw($0,$97)|0);
       $$1451 = $115;
      }
      $116 = (((($94) + (($96*2096)|0)|0)) + 23|0);
      $117 = HEAP8[$116>>0]|0;
      $118 = ($117<<24>>24)==(0);
      if ($118) {
       $$2452 = $$1451;
      } else {
       $119 = (((($94) + (($96*2096)|0)|0)) + 2088|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = (($120) + ($$1451<<2)|0);
       $122 = HEAP32[$121>>2]|0;
       $$2452 = $122;
      }
      $123 = ($$2452|0)==(-1);
      if ($123) {
       label = 38;
       break L65;
      }
      $124 = HEAP32[$76>>2]|0;
      $125 = (($124) + ($$2452<<2)|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = HEAP32[$41>>2]|0;
      $128 = (($127) + ($$0444572<<2)|0);
      HEAP32[$128>>2] = $126;
     }
     $129 = ($$0439574|0)<($27|0);
     $or$cond478566 = $129 & $77;
     if ($or$cond478566) {
      $$1440567 = $$0439574;$$1568 = 0;
      while(1) {
       $130 = HEAP32[$25>>2]|0;
       $131 = HEAP32[$41>>2]|0;
       $132 = (($131) + ($$0444572<<2)|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = (($133) + ($$1568)|0);
       $135 = HEAP8[$134>>0]|0;
       $136 = $135&255;
       $137 = HEAP32[$78>>2]|0;
       $138 = ((($137) + ($136<<4)|0) + ($$0437586<<1)|0);
       $139 = HEAP16[$138>>1]|0;
       $140 = ($139<<16>>16)>(-1);
       if ($140) {
        $141 = $139 << 16 >> 16;
        $142 = HEAP32[$16>>2]|0;
        $143 = (($142) + (($141*2096)|0)|0);
        $144 = (_codebook_decode_deinterleave_repeat($0,$143,$1,$2,$6,$7,$3,$130)|0);
        $not$522 = ($144|0)==(0);
        if ($not$522) {
         label = 38;
         break L65;
        }
       } else {
        $145 = HEAP32[$22>>2]|0;
        $146 = Math_imul($130, $$1440567)|0;
        $147 = (($146) + ($130))|0;
        $148 = (($147) + ($145))|0;
        $149 = $148 & 1;
        HEAP32[$6>>2] = $149;
        $150 = $148 >> 1;
        HEAP32[$7>>2] = $150;
       }
       $151 = (($$1568) + 1)|0;
       $152 = (($$1440567) + 1)|0;
       $153 = ($151|0)<($19|0);
       $154 = ($152|0)<($27|0);
       $or$cond478 = $154 & $153;
       if ($or$cond478) {
        $$1440567 = $152;$$1568 = $151;
       } else {
        $$1440$lcssa = $152;
        break;
       }
      }
     } else {
      $$1440$lcssa = $$0439574;
     }
     $155 = (($$0444572) + 1)|0;
     $156 = ($$1440$lcssa|0)<($27|0);
     if ($156) {
      $$0439574 = $$1440$lcssa;$$0444572 = $155;
     } else {
      break;
     }
    }
   }
   break;
  }
  case 1:  {
   if ($79) {
    $85 = ($$0437586|0)==(0);
    $$2446562 = 0;$$3442564 = 0;
    while(1) {
     $157 = HEAP32[$22>>2]|0;
     $158 = HEAP32[$25>>2]|0;
     $159 = Math_imul($158, $$3442564)|0;
     $160 = (($159) + ($157))|0;
     HEAP32[$6>>2] = 0;
     HEAP32[$7>>2] = $160;
     if ($85) {
      $161 = HEAP32[$16>>2]|0;
      $162 = HEAP8[$13>>0]|0;
      $163 = $162&255;
      $164 = (($161) + (($163*2096)|0)|0);
      $165 = HEAP32[$80>>2]|0;
      $166 = ($165|0)<(10);
      if ($166) {
       _prep_huffman($0);
      }
      $167 = HEAP32[$81>>2]|0;
      $168 = $167 & 1023;
      $169 = ((((($161) + (($163*2096)|0)|0)) + 36|0) + ($168<<1)|0);
      $170 = HEAP16[$169>>1]|0;
      $171 = $170 << 16 >> 16;
      $172 = ($170<<16>>16)>(-1);
      if ($172) {
       $173 = (((($161) + (($163*2096)|0)|0)) + 8|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = (($174) + ($171)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = $167 >>> $177;
       HEAP32[$81>>2] = $178;
       $179 = HEAP32[$80>>2]|0;
       $180 = (($179) - ($177))|0;
       $181 = ($180|0)<(0);
       $$480 = $181 ? 0 : $180;
       $$481 = $181 ? -1 : $171;
       HEAP32[$80>>2] = $$480;
       $$1469 = $$481;
      } else {
       $182 = (_codebook_decode_scalar_raw($0,$164)|0);
       $$1469 = $182;
      }
      $183 = (((($161) + (($163*2096)|0)|0)) + 23|0);
      $184 = HEAP8[$183>>0]|0;
      $185 = ($184<<24>>24)==(0);
      if ($185) {
       $$2470 = $$1469;
      } else {
       $186 = (((($161) + (($163*2096)|0)|0)) + 2088|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = (($187) + ($$1469<<2)|0);
       $189 = HEAP32[$188>>2]|0;
       $$2470 = $189;
      }
      $190 = ($$2470|0)==(-1);
      if ($190) {
       label = 55;
       break L65;
      }
      $191 = HEAP32[$82>>2]|0;
      $192 = (($191) + ($$2470<<2)|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = HEAP32[$41>>2]|0;
      $195 = (($194) + ($$2446562<<2)|0);
      HEAP32[$195>>2] = $193;
     }
     $196 = ($$3442564|0)<($27|0);
     $or$cond482559 = $196 & $83;
     if ($or$cond482559) {
      $$2561 = 0;$$4443560 = $$3442564;
      while(1) {
       $197 = HEAP32[$25>>2]|0;
       $198 = HEAP32[$41>>2]|0;
       $199 = (($198) + ($$2446562<<2)|0);
       $200 = HEAP32[$199>>2]|0;
       $201 = (($200) + ($$2561)|0);
       $202 = HEAP8[$201>>0]|0;
       $203 = $202&255;
       $204 = HEAP32[$84>>2]|0;
       $205 = ((($204) + ($203<<4)|0) + ($$0437586<<1)|0);
       $206 = HEAP16[$205>>1]|0;
       $207 = ($206<<16>>16)>(-1);
       if ($207) {
        $208 = $206 << 16 >> 16;
        $209 = HEAP32[$16>>2]|0;
        $210 = (($209) + (($208*2096)|0)|0);
        $211 = (_codebook_decode_deinterleave_repeat($0,$210,$1,$2,$6,$7,$3,$197)|0);
        $not$521 = ($211|0)==(0);
        if ($not$521) {
         label = 55;
         break L65;
        }
       } else {
        $212 = HEAP32[$22>>2]|0;
        $213 = Math_imul($197, $$4443560)|0;
        $214 = (($213) + ($197))|0;
        $215 = (($214) + ($212))|0;
        HEAP32[$6>>2] = 0;
        HEAP32[$7>>2] = $215;
       }
       $216 = (($$2561) + 1)|0;
       $217 = (($$4443560) + 1)|0;
       $218 = ($216|0)<($19|0);
       $219 = ($217|0)<($27|0);
       $or$cond482 = $219 & $218;
       if ($or$cond482) {
        $$2561 = $216;$$4443560 = $217;
       } else {
        $$4443$lcssa = $217;
        break;
       }
      }
     } else {
      $$4443$lcssa = $$3442564;
     }
     $220 = (($$2446562) + 1)|0;
     $221 = ($$4443$lcssa|0)<($27|0);
     if ($221) {
      $$2446562 = $220;$$3442564 = $$4443$lcssa;
     } else {
      break;
     }
    }
   }
   break;
  }
  default: {
   if ($67) {
    $87 = ($$0437586|0)==(0);
    $$4448582 = 0;$$6584 = 0;
    while(1) {
     $222 = HEAP32[$22>>2]|0;
     $223 = HEAP32[$25>>2]|0;
     $224 = Math_imul($223, $$6584)|0;
     $225 = (($224) + ($222))|0;
     $226 = (($225|0) % ($2|0))&-1;
     HEAP32[$6>>2] = $226;
     $227 = (($225|0) / ($2|0))&-1;
     HEAP32[$7>>2] = $227;
     if ($87) {
      $228 = HEAP32[$16>>2]|0;
      $229 = HEAP8[$13>>0]|0;
      $230 = $229&255;
      $231 = (($228) + (($230*2096)|0)|0);
      $232 = HEAP32[$68>>2]|0;
      $233 = ($232|0)<(10);
      if ($233) {
       _prep_huffman($0);
      }
      $234 = HEAP32[$69>>2]|0;
      $235 = $234 & 1023;
      $236 = ((((($228) + (($230*2096)|0)|0)) + 36|0) + ($235<<1)|0);
      $237 = HEAP16[$236>>1]|0;
      $238 = $237 << 16 >> 16;
      $239 = ($237<<16>>16)>(-1);
      if ($239) {
       $240 = (((($228) + (($230*2096)|0)|0)) + 8|0);
       $241 = HEAP32[$240>>2]|0;
       $242 = (($241) + ($238)|0);
       $243 = HEAP8[$242>>0]|0;
       $244 = $243&255;
       $245 = $234 >>> $244;
       HEAP32[$69>>2] = $245;
       $246 = HEAP32[$68>>2]|0;
       $247 = (($246) - ($244))|0;
       $248 = ($247|0)<(0);
       $$484 = $248 ? 0 : $247;
       $$485 = $248 ? -1 : $238;
       HEAP32[$68>>2] = $$484;
       $$1472 = $$485;
      } else {
       $249 = (_codebook_decode_scalar_raw($0,$231)|0);
       $$1472 = $249;
      }
      $250 = (((($228) + (($230*2096)|0)|0)) + 23|0);
      $251 = HEAP8[$250>>0]|0;
      $252 = ($251<<24>>24)==(0);
      if ($252) {
       $$2473 = $$1472;
      } else {
       $253 = (((($228) + (($230*2096)|0)|0)) + 2088|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = (($254) + ($$1472<<2)|0);
       $256 = HEAP32[$255>>2]|0;
       $$2473 = $256;
      }
      $257 = ($$2473|0)==(-1);
      if ($257) {
       label = 72;
       break L65;
      }
      $258 = HEAP32[$70>>2]|0;
      $259 = (($258) + ($$2473<<2)|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = HEAP32[$41>>2]|0;
      $262 = (($261) + ($$4448582<<2)|0);
      HEAP32[$262>>2] = $260;
     }
     $263 = ($$6584|0)<($27|0);
     $or$cond486576 = $263 & $71;
     if ($or$cond486576) {
      $$3578 = 0;$$7577 = $$6584;
      while(1) {
       $264 = HEAP32[$25>>2]|0;
       $265 = HEAP32[$41>>2]|0;
       $266 = (($265) + ($$4448582<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (($267) + ($$3578)|0);
       $269 = HEAP8[$268>>0]|0;
       $270 = $269&255;
       $271 = HEAP32[$72>>2]|0;
       $272 = ((($271) + ($270<<4)|0) + ($$0437586<<1)|0);
       $273 = HEAP16[$272>>1]|0;
       $274 = ($273<<16>>16)>(-1);
       if ($274) {
        $275 = $273 << 16 >> 16;
        $276 = HEAP32[$16>>2]|0;
        $277 = (($276) + (($275*2096)|0)|0);
        $278 = (_codebook_decode_deinterleave_repeat($0,$277,$1,$2,$6,$7,$3,$264)|0);
        $not$523 = ($278|0)==(0);
        if ($not$523) {
         label = 72;
         break L65;
        }
       } else {
        $279 = HEAP32[$22>>2]|0;
        $280 = Math_imul($264, $$7577)|0;
        $281 = (($280) + ($264))|0;
        $282 = (($281) + ($279))|0;
        $283 = (($282|0) % ($2|0))&-1;
        HEAP32[$6>>2] = $283;
        $284 = (($282|0) / ($2|0))&-1;
        HEAP32[$7>>2] = $284;
       }
       $285 = (($$3578) + 1)|0;
       $286 = (($$7577) + 1)|0;
       $287 = ($285|0)<($19|0);
       $288 = ($286|0)<($27|0);
       $or$cond486 = $288 & $287;
       if ($or$cond486) {
        $$3578 = $285;$$7577 = $286;
       } else {
        $$7$lcssa = $286;
        break;
       }
      }
     } else {
      $$7$lcssa = $$6584;
     }
     $289 = (($$4448582) + 1)|0;
     $290 = ($$7$lcssa|0)<($27|0);
     if ($290) {
      $$4448582 = $289;$$6584 = $$7$lcssa;
     } else {
      break;
     }
    }
   }
  }
  }
  $291 = (($$0437586) + 1)|0;
  $292 = ($291|0)<(8);
  if ($292) {
   $$0437586 = $291;
  } else {
   label = 98;
   break;
  }
 }
 if ((label|0) == 38) {
  HEAP32[$28>>2] = $29;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 55) {
  HEAP32[$28>>2] = $29;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 72) {
  HEAP32[$28>>2] = $29;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 98) {
  HEAP32[$28>>2] = $29;
  STACKTOP = sp;return;
 }
}
function _do_floor($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$062$lcssa = 0, $$0624 = 0, $$063$lcssa = 0, $$0633 = 0, $$0652 = 0, $$0661 = 0, $$1 = 0, $$164 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $3 >> 1;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (((($8) + (($2*3)|0)|0)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (((($1)) + 9|0) + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (((($0)) + 132|0) + ($14<<1)|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = ($16<<16>>16)==(0);
 if ($17) {
  _error($0,21);
  return;
 }
 $18 = ((($0)) + 260|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP16[$5>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = (((($19) + (($14*1596)|0)|0)) + 1588|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = Math_imul($24, $21)|0;
 $26 = (((($19) + (($14*1596)|0)|0)) + 1592|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)>(1);
 if ($28) {
  $$0624 = $25;$$0633 = 0;$$0652 = 1;
  while(1) {
   $29 = ((((($19) + (($14*1596)|0)|0)) + 838|0) + ($$0652)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = (($5) + ($31<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = ($33<<16>>16)>(-1);
   if ($34) {
    $35 = $33 << 16 >> 16;
    $36 = HEAP8[$22>>0]|0;
    $37 = $36&255;
    $38 = Math_imul($37, $35)|0;
    $39 = ((((($19) + (($14*1596)|0)|0)) + 338|0) + ($31<<1)|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40&65535;
    $42 = ($$0633|0)==($41|0);
    if ($42) {
     $$1 = $38;$$164 = $41;
    } else {
     _draw_line($4,$$0633,$$0624,$41,$38,$6);
     $$1 = $38;$$164 = $41;
    }
   } else {
    $$1 = $$0624;$$164 = $$0633;
   }
   $43 = (($$0652) + 1)|0;
   $44 = HEAP32[$26>>2]|0;
   $45 = ($43|0)<($44|0);
   if ($45) {
    $$0624 = $$1;$$0633 = $$164;$$0652 = $43;
   } else {
    $$062$lcssa = $$1;$$063$lcssa = $$164;
    break;
   }
  }
 } else {
  $$062$lcssa = $25;$$063$lcssa = 0;
 }
 $46 = ($$063$lcssa|0)<($6|0);
 if (!($46)) {
  return;
 }
 $47 = (4056 + ($$062$lcssa<<2)|0);
 $48 = +HEAPF32[$47>>2];
 $$0661 = $$063$lcssa;
 while(1) {
  $49 = (($4) + ($$0661<<2)|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $48 * $50;
  HEAPF32[$49>>2] = $51;
  $52 = (($$0661) + 1)|0;
  $exitcond = ($52|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$0661 = $52;
  }
 }
 return;
}
function _inverse_mdct($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$lcssa = 0, $$0492$lcssa = 0, $$0492576 = 0, $$0494 = 0, $$0494522 = 0, $$0494530 = 0, $$0495531 = 0, $$0495531$pn = 0, $$0496527 = 0, $$0497526 = 0, $$0498525 = 0, $$0499524 = 0, $$0500575 = 0, $$0502$lcssa = 0, $$0502574 = 0, $$0504564 = 0, $$0505563 = 0, $$0506562 = 0, $$0507561 = 0, $$0508 = 0;
 var $$0508532 = 0, $$0508536 = 0, $$0509534 = 0, $$0510533 = 0, $$0511560 = 0, $$0512542 = 0, $$0513541 = 0, $$0514540 = 0, $$0515548 = 0, $$0516547 = 0, $$0517554 = 0, $$0518546 = 0, $$0557 = 0, $$1493570 = 0, $$1501569 = 0, $$1503568 = 0, $$1551 = 0, $$alloca_mul = 0, $$pn520529 = 0, $$pn520529$phi = 0;
 var $$pn535 = 0, $$pn535$phi = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0.0;
 var $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0;
 var $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0;
 var $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0.0;
 var $298 = 0, $299 = 0.0, $30 = 0.0, $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0.0, $330 = 0.0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0.0, $350 = 0.0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0.0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0.0, $369 = 0, $37 = 0.0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond584 = 0, $scevgep = 0, $scevgep586 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $1 >> 1;
 $5 = $1 >> 2;
 $6 = $1 >> 3;
 $7 = ((($2)) + 92|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 $12 = $4 << 2;
 if ($11) {
  $$alloca_mul = $12;
  $14 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
  $19 = $14;
 } else {
  $13 = (_setup_temp_malloc($2,$12)|0);
  $19 = $13;
 }
 $15 = (((($2)) + 1068|0) + ($3<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($4) + -2)|0;
 $18 = (($19) + ($17<<2)|0);
 $20 = (($0) + ($4<<2)|0);
 $21 = ($4|0)==(0);
 if ($21) {
  $$0492$lcssa = $18;$$0502$lcssa = $16;
 } else {
  $22 = $4 << 2;
  $23 = (($22) + -16)|0;
  $24 = $23 >>> 4;
  $25 = $24 << 3;
  $26 = (($23) - ($25))|0;
  $scevgep = (($19) + ($26)|0);
  $27 = $24 << 1;
  $28 = (($27) + 2)|0;
  $$0492576 = $18;$$0500575 = $0;$$0502574 = $16;
  while(1) {
   $29 = +HEAPF32[$$0500575>>2];
   $30 = +HEAPF32[$$0502574>>2];
   $31 = $29 * $30;
   $32 = ((($$0500575)) + 8|0);
   $33 = +HEAPF32[$32>>2];
   $34 = ((($$0502574)) + 4|0);
   $35 = +HEAPF32[$34>>2];
   $36 = $33 * $35;
   $37 = $31 - $36;
   $38 = ((($$0492576)) + 4|0);
   HEAPF32[$38>>2] = $37;
   $39 = +HEAPF32[$$0500575>>2];
   $40 = +HEAPF32[$34>>2];
   $41 = $39 * $40;
   $42 = +HEAPF32[$32>>2];
   $43 = +HEAPF32[$$0502574>>2];
   $44 = $42 * $43;
   $45 = $41 + $44;
   HEAPF32[$$0492576>>2] = $45;
   $46 = ((($$0492576)) + -8|0);
   $47 = ((($$0502574)) + 8|0);
   $48 = ((($$0500575)) + 16|0);
   $49 = ($48|0)==($20|0);
   if ($49) {
    break;
   } else {
    $$0492576 = $46;$$0500575 = $48;$$0502574 = $47;
   }
  }
  $scevgep586 = (($16) + ($28<<2)|0);
  $$0492$lcssa = $scevgep;$$0502$lcssa = $scevgep586;
 }
 $50 = ($$0492$lcssa>>>0)<($19>>>0);
 if (!($50)) {
  $51 = (($4) + -3)|0;
  $52 = (($0) + ($51<<2)|0);
  $$1493570 = $$0492$lcssa;$$1501569 = $52;$$1503568 = $$0502$lcssa;
  while(1) {
   $53 = ((($$1501569)) + 8|0);
   $54 = +HEAPF32[$53>>2];
   $55 = +HEAPF32[$$1503568>>2];
   $56 = $54 * $55;
   $57 = +HEAPF32[$$1501569>>2];
   $58 = ((($$1503568)) + 4|0);
   $59 = +HEAPF32[$58>>2];
   $60 = $57 * $59;
   $61 = $60 - $56;
   $62 = ((($$1493570)) + 4|0);
   HEAPF32[$62>>2] = $61;
   $63 = +HEAPF32[$53>>2];
   $64 = +HEAPF32[$58>>2];
   $65 = $63 * $64;
   $66 = +HEAPF32[$$1501569>>2];
   $67 = +HEAPF32[$$1503568>>2];
   $68 = $66 * $67;
   $69 = -$68;
   $70 = $69 - $65;
   HEAPF32[$$1493570>>2] = $70;
   $71 = ((($$1493570)) + -8|0);
   $72 = ((($$1503568)) + 8|0);
   $73 = ((($$1501569)) + -16|0);
   $74 = ($71>>>0)<($19>>>0);
   if ($74) {
    break;
   } else {
    $$1493570 = $71;$$1501569 = $73;$$1503568 = $72;
   }
  }
 }
 $75 = ($4|0)<(8);
 if (!($75)) {
  $76 = (($0) + ($5<<2)|0);
  $77 = (($19) + ($5<<2)|0);
  $78 = (($4) + -8)|0;
  $79 = (($16) + ($78<<2)|0);
  $$0504564 = $79;$$0505563 = $76;$$0506562 = $0;$$0507561 = $77;$$0511560 = $19;
  while(1) {
   $80 = ((($$0507561)) + 4|0);
   $81 = +HEAPF32[$80>>2];
   $82 = ((($$0511560)) + 4|0);
   $83 = +HEAPF32[$82>>2];
   $84 = $81 - $83;
   $85 = +HEAPF32[$$0507561>>2];
   $86 = +HEAPF32[$$0511560>>2];
   $87 = $85 - $86;
   $88 = $81 + $83;
   $89 = ((($$0505563)) + 4|0);
   HEAPF32[$89>>2] = $88;
   $90 = +HEAPF32[$$0507561>>2];
   $91 = +HEAPF32[$$0511560>>2];
   $92 = $90 + $91;
   HEAPF32[$$0505563>>2] = $92;
   $93 = ((($$0504564)) + 16|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $84 * $94;
   $96 = ((($$0504564)) + 20|0);
   $97 = +HEAPF32[$96>>2];
   $98 = $87 * $97;
   $99 = $95 - $98;
   $100 = ((($$0506562)) + 4|0);
   HEAPF32[$100>>2] = $99;
   $101 = +HEAPF32[$93>>2];
   $102 = $87 * $101;
   $103 = +HEAPF32[$96>>2];
   $104 = $84 * $103;
   $105 = $102 + $104;
   HEAPF32[$$0506562>>2] = $105;
   $106 = ((($$0507561)) + 12|0);
   $107 = +HEAPF32[$106>>2];
   $108 = ((($$0511560)) + 12|0);
   $109 = +HEAPF32[$108>>2];
   $110 = $107 - $109;
   $111 = ((($$0507561)) + 8|0);
   $112 = +HEAPF32[$111>>2];
   $113 = ((($$0511560)) + 8|0);
   $114 = +HEAPF32[$113>>2];
   $115 = $112 - $114;
   $116 = $107 + $109;
   $117 = ((($$0505563)) + 12|0);
   HEAPF32[$117>>2] = $116;
   $118 = +HEAPF32[$111>>2];
   $119 = +HEAPF32[$113>>2];
   $120 = $118 + $119;
   $121 = ((($$0505563)) + 8|0);
   HEAPF32[$121>>2] = $120;
   $122 = +HEAPF32[$$0504564>>2];
   $123 = $110 * $122;
   $124 = ((($$0504564)) + 4|0);
   $125 = +HEAPF32[$124>>2];
   $126 = $115 * $125;
   $127 = $123 - $126;
   $128 = ((($$0506562)) + 12|0);
   HEAPF32[$128>>2] = $127;
   $129 = +HEAPF32[$$0504564>>2];
   $130 = $115 * $129;
   $131 = +HEAPF32[$124>>2];
   $132 = $110 * $131;
   $133 = $130 + $132;
   $134 = ((($$0506562)) + 8|0);
   HEAPF32[$134>>2] = $133;
   $135 = ((($$0504564)) + -32|0);
   $136 = ((($$0505563)) + 16|0);
   $137 = ((($$0506562)) + 16|0);
   $138 = ((($$0507561)) + 16|0);
   $139 = ((($$0511560)) + 16|0);
   $140 = ($135>>>0)<($16>>>0);
   if ($140) {
    break;
   } else {
    $$0504564 = $135;$$0505563 = $136;$$0506562 = $137;$$0507561 = $138;$$0511560 = $139;
   }
  }
 }
 $141 = (_ilog($1)|0);
 $142 = $1 >> 4;
 $143 = (($4) + -1)|0;
 $144 = (0 - ($6))|0;
 _imdct_step3_iter0_loop($142,$0,$143,$144,$16);
 $145 = (($143) - ($5))|0;
 _imdct_step3_iter0_loop($142,$0,$145,$144,$16);
 $146 = $1 >> 5;
 $147 = (0 - ($142))|0;
 _imdct_step3_inner_r_loop($146,$0,$143,$147,$16,16);
 $148 = (($143) - ($6))|0;
 _imdct_step3_inner_r_loop($146,$0,$148,$147,$16,16);
 $149 = $6 << 1;
 $150 = (($143) - ($149))|0;
 _imdct_step3_inner_r_loop($146,$0,$150,$147,$16,16);
 $151 = Math_imul($6, -3)|0;
 $152 = (($143) + ($151))|0;
 _imdct_step3_inner_r_loop($146,$0,$152,$147,$16,16);
 $153 = (($141) + -4)|0;
 $154 = $153 >> 1;
 $155 = ($154|0)>(2);
 if ($155) {
  $$0557 = 2;
  while(1) {
   $159 = (($$0557) + 2)|0;
   $160 = $1 >> $159;
   $156 = (($$0557) + 1)|0;
   $161 = 1 << $156;
   $162 = ($156|0)==(31);
   if (!($162)) {
    $163 = $160 >> 1;
    $164 = (($$0557) + 4)|0;
    $165 = $1 >> $164;
    $166 = (0 - ($163))|0;
    $167 = (($$0557) + 3)|0;
    $168 = 1 << $167;
    $$0517554 = 0;
    while(1) {
     $169 = Math_imul($$0517554, $160)|0;
     $170 = (($143) - ($169))|0;
     _imdct_step3_inner_r_loop($165,$0,$170,$166,$16,$168);
     $171 = (($$0517554) + 1)|0;
     $172 = ($171|0)<($161|0);
     if ($172) {
      $$0517554 = $171;
     } else {
      break;
     }
    }
   }
   $exitcond584 = ($156|0)==($154|0);
   if ($exitcond584) {
    $$0$lcssa = $154;
    break;
   } else {
    $$0557 = $156;
   }
  }
 } else {
  $$0$lcssa = 2;
 }
 $157 = (($141) + -7)|0;
 $158 = ($$0$lcssa|0)<($157|0);
 if ($158) {
  $$1551 = $$0$lcssa;
  while(1) {
   $174 = (($$1551) + 2)|0;
   $175 = $1 >> $174;
   $176 = (($$1551) + 3)|0;
   $177 = 1 << $176;
   $178 = (($$1551) + 6)|0;
   $179 = $1 >> $178;
   $173 = (($$1551) + 1)|0;
   $180 = 1 << $173;
   $181 = ($179|0)>(0);
   if ($181) {
    $182 = $175 >> 1;
    $183 = (0 - ($182))|0;
    $184 = $177 << 2;
    $$0515548 = $16;$$0516547 = $143;$$0518546 = $179;
    while(1) {
     _imdct_step3_inner_s_loop($180,$0,$$0516547,$183,$$0515548,$177,$175);
     $185 = (($$0515548) + ($184<<2)|0);
     $186 = (($$0516547) + -8)|0;
     $187 = (($$0518546) + -1)|0;
     $188 = ($$0518546|0)>(1);
     if ($188) {
      $$0515548 = $185;$$0516547 = $186;$$0518546 = $187;
     } else {
      break;
     }
    }
   }
   $exitcond = ($173|0)==($157|0);
   if ($exitcond) {
    break;
   } else {
    $$1551 = $173;
   }
  }
 }
 _imdct_step3_inner_s_loop_ld654($146,$0,$143,$16,$1);
 $189 = (($5) + -4)|0;
 $190 = (($19) + ($189<<2)|0);
 $191 = (($4) + -4)|0;
 $192 = ($190>>>0)<($19>>>0);
 if (!($192)) {
  $193 = (($19) + ($191<<2)|0);
  $194 = (((($2)) + 1100|0) + ($3<<2)|0);
  $195 = HEAP32[$194>>2]|0;
  $$0512542 = $193;$$0513541 = $190;$$0514540 = $195;
  while(1) {
   $196 = HEAP16[$$0514540>>1]|0;
   $197 = $196&65535;
   $198 = (($0) + ($197<<2)|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = ((($$0512542)) + 12|0);
   HEAP32[$200>>2] = $199;
   $201 = (($197) + 1)|0;
   $202 = (($0) + ($201<<2)|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = ((($$0512542)) + 8|0);
   HEAP32[$204>>2] = $203;
   $205 = (($197) + 2)|0;
   $206 = (($0) + ($205<<2)|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = ((($$0513541)) + 12|0);
   HEAP32[$208>>2] = $207;
   $209 = (($197) + 3)|0;
   $210 = (($0) + ($209<<2)|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ((($$0513541)) + 8|0);
   HEAP32[$212>>2] = $211;
   $213 = ((($$0514540)) + 2|0);
   $214 = HEAP16[$213>>1]|0;
   $215 = $214&65535;
   $216 = (($0) + ($215<<2)|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = ((($$0512542)) + 4|0);
   HEAP32[$218>>2] = $217;
   $219 = (($215) + 1)|0;
   $220 = (($0) + ($219<<2)|0);
   $221 = HEAP32[$220>>2]|0;
   HEAP32[$$0512542>>2] = $221;
   $222 = (($215) + 2)|0;
   $223 = (($0) + ($222<<2)|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ((($$0513541)) + 4|0);
   HEAP32[$225>>2] = $224;
   $226 = (($215) + 3)|0;
   $227 = (($0) + ($226<<2)|0);
   $228 = HEAP32[$227>>2]|0;
   HEAP32[$$0513541>>2] = $228;
   $229 = ((($$0513541)) + -16|0);
   $230 = ((($$0512542)) + -16|0);
   $231 = ((($$0514540)) + 4|0);
   $232 = ($229>>>0)<($19>>>0);
   if ($232) {
    break;
   } else {
    $$0512542 = $230;$$0513541 = $229;$$0514540 = $231;
   }
  }
 }
 $233 = (($19) + ($4<<2)|0);
 $$0508532 = ((($233)) + -16|0);
 $234 = ($19>>>0)<($$0508532>>>0);
 if ($234) {
  $235 = (((($2)) + 1084|0) + ($3<<2)|0);
  $236 = HEAP32[$235>>2]|0;
  $$0508536 = $$0508532;$$0509534 = $19;$$0510533 = $236;$$pn535 = $233;
  while(1) {
   $237 = +HEAPF32[$$0509534>>2];
   $238 = ((($$pn535)) + -8|0);
   $239 = +HEAPF32[$238>>2];
   $240 = $237 - $239;
   $241 = ((($$0509534)) + 4|0);
   $242 = +HEAPF32[$241>>2];
   $243 = ((($$pn535)) + -4|0);
   $244 = +HEAPF32[$243>>2];
   $245 = $242 + $244;
   $246 = ((($$0510533)) + 4|0);
   $247 = +HEAPF32[$246>>2];
   $248 = $240 * $247;
   $249 = +HEAPF32[$$0510533>>2];
   $250 = $245 * $249;
   $251 = $248 + $250;
   $252 = $247 * $245;
   $253 = $240 * $249;
   $254 = $252 - $253;
   $255 = $237 + $239;
   $256 = $242 - $244;
   $257 = $255 + $251;
   HEAPF32[$$0509534>>2] = $257;
   $258 = $256 + $254;
   HEAPF32[$241>>2] = $258;
   $259 = $255 - $251;
   HEAPF32[$238>>2] = $259;
   $260 = $254 - $256;
   HEAPF32[$243>>2] = $260;
   $261 = ((($$0509534)) + 8|0);
   $262 = +HEAPF32[$261>>2];
   $263 = +HEAPF32[$$0508536>>2];
   $264 = $262 - $263;
   $265 = ((($$0509534)) + 12|0);
   $266 = +HEAPF32[$265>>2];
   $267 = ((($$pn535)) + -12|0);
   $268 = +HEAPF32[$267>>2];
   $269 = $266 + $268;
   $270 = ((($$0510533)) + 12|0);
   $271 = +HEAPF32[$270>>2];
   $272 = $264 * $271;
   $273 = ((($$0510533)) + 8|0);
   $274 = +HEAPF32[$273>>2];
   $275 = $269 * $274;
   $276 = $272 + $275;
   $277 = $271 * $269;
   $278 = $264 * $274;
   $279 = $277 - $278;
   $280 = $262 + $263;
   $281 = $266 - $268;
   $282 = $280 + $276;
   HEAPF32[$261>>2] = $282;
   $283 = $281 + $279;
   HEAPF32[$265>>2] = $283;
   $284 = $280 - $276;
   HEAPF32[$$0508536>>2] = $284;
   $285 = $279 - $281;
   HEAPF32[$267>>2] = $285;
   $286 = ((($$0510533)) + 16|0);
   $287 = ((($$0509534)) + 16|0);
   $$0508 = ((($$0508536)) + -16|0);
   $288 = ($287>>>0)<($$0508>>>0);
   if ($288) {
    $$pn535$phi = $$0508536;$$0508536 = $$0508;$$0509534 = $287;$$0510533 = $286;$$pn535 = $$pn535$phi;
   } else {
    break;
   }
  }
 }
 $$0494522 = ((($233)) + -32|0);
 $289 = ($$0494522>>>0)<($19>>>0);
 if ($289) {
  HEAP32[$7>>2] = $8;
  STACKTOP = sp;return;
 }
 $290 = (($1) + -4)|0;
 $291 = (($0) + ($290<<2)|0);
 $292 = (($0) + ($191<<2)|0);
 $293 = (((($2)) + 1076|0) + ($3<<2)|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = (($294) + ($4<<2)|0);
 $$0494530 = $$0494522;$$0495531$pn = $295;$$0496527 = $291;$$0497526 = $20;$$0498525 = $292;$$0499524 = $0;$$pn520529 = $233;
 while(1) {
  $$0495531 = ((($$0495531$pn)) + -32|0);
  $296 = ((($$pn520529)) + -8|0);
  $297 = +HEAPF32[$296>>2];
  $298 = ((($$0495531$pn)) + -4|0);
  $299 = +HEAPF32[$298>>2];
  $300 = $297 * $299;
  $301 = ((($$pn520529)) + -4|0);
  $302 = +HEAPF32[$301>>2];
  $303 = ((($$0495531$pn)) + -8|0);
  $304 = +HEAPF32[$303>>2];
  $305 = $302 * $304;
  $306 = $300 - $305;
  $307 = $297 * $304;
  $308 = -$307;
  $309 = $299 * $302;
  $310 = $308 - $309;
  HEAPF32[$$0499524>>2] = $306;
  $311 = -$306;
  $312 = ((($$0498525)) + 12|0);
  HEAPF32[$312>>2] = $311;
  HEAPF32[$$0497526>>2] = $310;
  $313 = ((($$0496527)) + 12|0);
  HEAPF32[$313>>2] = $310;
  $314 = ((($$pn520529)) + -16|0);
  $315 = +HEAPF32[$314>>2];
  $316 = ((($$0495531$pn)) + -12|0);
  $317 = +HEAPF32[$316>>2];
  $318 = $315 * $317;
  $319 = ((($$pn520529)) + -12|0);
  $320 = +HEAPF32[$319>>2];
  $321 = ((($$0495531$pn)) + -16|0);
  $322 = +HEAPF32[$321>>2];
  $323 = $320 * $322;
  $324 = $318 - $323;
  $325 = $315 * $322;
  $326 = -$325;
  $327 = $317 * $320;
  $328 = $326 - $327;
  $329 = ((($$0499524)) + 4|0);
  HEAPF32[$329>>2] = $324;
  $330 = -$324;
  $331 = ((($$0498525)) + 8|0);
  HEAPF32[$331>>2] = $330;
  $332 = ((($$0497526)) + 4|0);
  HEAPF32[$332>>2] = $328;
  $333 = ((($$0496527)) + 8|0);
  HEAPF32[$333>>2] = $328;
  $334 = ((($$pn520529)) + -24|0);
  $335 = +HEAPF32[$334>>2];
  $336 = ((($$0495531$pn)) + -20|0);
  $337 = +HEAPF32[$336>>2];
  $338 = $335 * $337;
  $339 = ((($$pn520529)) + -20|0);
  $340 = +HEAPF32[$339>>2];
  $341 = ((($$0495531$pn)) + -24|0);
  $342 = +HEAPF32[$341>>2];
  $343 = $340 * $342;
  $344 = $338 - $343;
  $345 = $335 * $342;
  $346 = -$345;
  $347 = $337 * $340;
  $348 = $346 - $347;
  $349 = ((($$0499524)) + 8|0);
  HEAPF32[$349>>2] = $344;
  $350 = -$344;
  $351 = ((($$0498525)) + 4|0);
  HEAPF32[$351>>2] = $350;
  $352 = ((($$0497526)) + 8|0);
  HEAPF32[$352>>2] = $348;
  $353 = ((($$0496527)) + 4|0);
  HEAPF32[$353>>2] = $348;
  $354 = +HEAPF32[$$0494530>>2];
  $355 = ((($$0495531$pn)) + -28|0);
  $356 = +HEAPF32[$355>>2];
  $357 = $354 * $356;
  $358 = ((($$pn520529)) + -28|0);
  $359 = +HEAPF32[$358>>2];
  $360 = +HEAPF32[$$0495531>>2];
  $361 = $359 * $360;
  $362 = $357 - $361;
  $363 = $354 * $360;
  $364 = -$363;
  $365 = $356 * $359;
  $366 = $364 - $365;
  $367 = ((($$0499524)) + 12|0);
  HEAPF32[$367>>2] = $362;
  $368 = -$362;
  HEAPF32[$$0498525>>2] = $368;
  $369 = ((($$0497526)) + 12|0);
  HEAPF32[$369>>2] = $366;
  HEAPF32[$$0496527>>2] = $366;
  $370 = ((($$0499524)) + 16|0);
  $371 = ((($$0497526)) + 16|0);
  $372 = ((($$0498525)) + -16|0);
  $373 = ((($$0496527)) + -16|0);
  $$0494 = ((($$0494530)) + -32|0);
  $374 = ($$0494>>>0)<($19>>>0);
  if ($374) {
   break;
  } else {
   $$pn520529$phi = $$0494530;$$0494530 = $$0494;$$0495531$pn = $$0495531;$$0496527 = $373;$$0497526 = $371;$$0498525 = $372;$$0499524 = $370;$$pn520529 = $$pn520529$phi;
  }
 }
 HEAP32[$7>>2] = $8;
 STACKTOP = sp;return;
}
function _flush_packet($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $1 = (_get8_packet_raw($0)|0);
  $2 = ($1|0)==(-1);
  if ($2) {
   break;
  }
 }
 return;
}
function _get8_packet_raw($0) {
 $0 = $0|0;
 var $$0 = 0, $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1376|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = ((($0)) + 1384|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $$0 = -1;
   return ($$0|0);
  }
  $7 = (_next_segment($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = -1;
   return ($$0|0);
  }
  $$pr = HEAP8[$1>>0]|0;
  $9 = ($$pr<<24>>24)==(0);
  if ($9) {
   ___assert_fail((14112|0),(13997|0),1139,(14132|0));
   // unreachable;
  } else {
   $11 = $$pr;
  }
 } else {
  $11 = $2;
 }
 $10 = (($11) + -1)<<24>>24;
 HEAP8[$1>>0] = $10;
 $12 = ((($0)) + 1400|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 $15 = (_get8($0)|0);
 $16 = $15&255;
 $$0 = $16;
 return ($$0|0);
}
function _next_segment($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1384|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 1380|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(-1);
 if ($6) {
  $7 = ((($0)) + 1116|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + -1)|0;
  $10 = ((($0)) + 1388|0);
  HEAP32[$10>>2] = $9;
  $11 = (_start_page($0)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   HEAP32[$1>>2] = 1;
   $$0 = 0;
   return ($$0|0);
  }
  $13 = ((($0)) + 1375|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 & 1;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   _error($0,32);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $17 = HEAP32[$4>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[$4>>2] = $18;
 $19 = (((($0)) + 1120|0) + ($17)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($20<<24>>24)==(-1);
 if (!($22)) {
  HEAP32[$1>>2] = 1;
  $23 = ((($0)) + 1388|0);
  HEAP32[$23>>2] = $17;
 }
 $24 = ((($0)) + 1116|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($18|0)<($25|0);
 if (!($26)) {
  HEAP32[$4>>2] = -1;
 }
 $27 = ((($0)) + 1376|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ($28<<24>>24)==(0);
 if (!($29)) {
  ___assert_fail((14148|0),(13997|0),1125,(14169|0));
  // unreachable;
 }
 HEAP8[$27>>0] = $20;
 $$0 = $21;
 return ($$0|0);
}
function _get8($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $10 = ((($0)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_fgetc($11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $14 = ((($0)) + 96|0);
   HEAP32[$14>>2] = 1;
   $$1 = 0;
   return ($$1|0);
  } else {
   $15 = $12&255;
   $$1 = $15;
   return ($$1|0);
  }
 } else {
  $4 = ((($0)) + 40|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2>>>0)<($5>>>0);
  if ($6) {
   $8 = ((($2)) + 1|0);
   HEAP32[$1>>2] = $8;
   $9 = HEAP8[$2>>0]|0;
   $$1 = $9;
   return ($$1|0);
  } else {
   $7 = ((($0)) + 96|0);
   HEAP32[$7>>2] = 1;
   $$1 = 0;
   return ($$1|0);
  }
 }
 return (0)|0;
}
function _start_page($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_capture_pattern($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _error($0,30);
  $$0 = 0;
  return ($$0|0);
 } else {
  $3 = (_start_page_no_capturepattern($0)|0);
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _capture_pattern($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_get8($0)|0);
 $2 = ($1<<24>>24)==(79);
 if ($2) {
  $3 = (_get8($0)|0);
  $4 = ($3<<24>>24)==(103);
  if ($4) {
   $5 = (_get8($0)|0);
   $6 = ($5<<24>>24)==(103);
   if ($6) {
    $7 = (_get8($0)|0);
    $8 = ($7<<24>>24)==(83);
    $$ = $8&1;
    $$0 = $$;
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _start_page_no_capturepattern($0) {
 $0 = $0|0;
 var $$0 = 0, $$058 = 0, $$058$in = 0, $$059$lcssa = 0, $$05963 = 0, $$06062 = 0, $$lcssa = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$5$0$$sroa_idx3 = 0, $$sroa$6$0$$sroa_idx5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_get8($0)|0);
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  _error($0,31);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_get8($0)|0);
 $4 = ((($0)) + 1375|0);
 HEAP8[$4>>0] = $3;
 $5 = (_get32($0)|0);
 $6 = (_get32($0)|0);
 (_get32($0)|0);
 $7 = (_get32($0)|0);
 $8 = ((($0)) + 1112|0);
 HEAP32[$8>>2] = $7;
 (_get32($0)|0);
 $9 = (_get8($0)|0);
 $10 = $9&255;
 $11 = ((($0)) + 1116|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($0)) + 1120|0);
 $13 = (_getn($0,$12,$10)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  _error($0,10);
  $$0 = 0;
  return ($$0|0);
 }
 $15 = ((($0)) + 1404|0);
 HEAP32[$15>>2] = -2;
 $16 = $6 & $5;
 $17 = ($16|0)==(-1);
 L9: do {
  if (!($17)) {
   $18 = HEAP32[$11>>2]|0;
   $$058$in = $18;
   while(1) {
    $$058 = (($$058$in) + -1)|0;
    $19 = ($$058$in|0)>(0);
    if (!($19)) {
     break L9;
    }
    $20 = (((($0)) + 1120|0) + ($$058)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(-1);
    if ($22) {
     $$058$in = $$058;
    } else {
     break;
    }
   }
   HEAP32[$15>>2] = $$058;
   $23 = ((($0)) + 1408|0);
   HEAP32[$23>>2] = $5;
  }
 } while(0);
 $24 = ((($0)) + 1377|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = ($25<<24>>24)==(0);
 if (!($26)) {
  $27 = HEAP32[$11>>2]|0;
  $28 = ($27|0)>(0);
  if ($28) {
   $29 = HEAP32[$11>>2]|0;
   $$05963 = 0;$$06062 = 0;
   while(1) {
    $30 = (((($0)) + 1120|0) + ($$06062)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = (($32) + ($$05963))|0;
    $34 = (($$06062) + 1)|0;
    $35 = ($34|0)<($29|0);
    if ($35) {
     $$05963 = $33;$$06062 = $34;
    } else {
     break;
    }
   }
   $phitmp = (($33) + 27)|0;
   $$059$lcssa = $phitmp;$$lcssa = $29;
  } else {
   $$059$lcssa = 27;$$lcssa = $27;
  }
  $36 = ((($0)) + 52|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($$059$lcssa) + ($$lcssa))|0;
  $39 = (($38) + ($37))|0;
  $$sroa$0$0$$sroa_idx = ((($0)) + 56|0);
  HEAP32[$$sroa$0$0$$sroa_idx>>2] = $37;
  $$sroa$5$0$$sroa_idx3 = ((($0)) + 60|0);
  HEAP32[$$sroa$5$0$$sroa_idx3>>2] = $39;
  $$sroa$6$0$$sroa_idx5 = ((($0)) + 64|0);
  HEAP32[$$sroa$6$0$$sroa_idx5>>2] = $5;
 }
 $40 = ((($0)) + 1380|0);
 HEAP32[$40>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _get32($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_get8($0)|0);
 $2 = $1&255;
 $3 = (_get8($0)|0);
 $4 = $3&255;
 $5 = $4 << 8;
 $6 = $5 | $2;
 $7 = (_get8($0)|0);
 $8 = $7&255;
 $9 = $8 << 16;
 $10 = $6 | $9;
 $11 = (_get8($0)|0);
 $12 = $11&255;
 $13 = $12 << 24;
 $14 = $10 | $13;
 return ($14|0);
}
function _getn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $13 = ((($0)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_fread($1,$2,1,$14)|0);
  $16 = ($15|0)==(1);
  if ($16) {
   $$0 = 1;
   return ($$0|0);
  }
  $17 = ((($0)) + 96|0);
  HEAP32[$17>>2] = 1;
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (($4) + ($2)|0);
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 if ($9) {
  $10 = ((($0)) + 96|0);
  HEAP32[$10>>2] = 1;
  $$0 = 0;
  return ($$0|0);
 } else {
  _memcpy(($1|0),($4|0),($2|0))|0;
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($2)|0);
  HEAP32[$3>>2] = $12;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _setup_temp_malloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + 3)|0;
 $3 = $2 & -4;
 $4 = ((($0)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $14 = (_malloc($3)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $7 = ((($0)) + 92|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($3))|0;
 $10 = ((($0)) + 88|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)<($11|0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$7>>2] = $9;
 $13 = (($5) + ($9)|0);
 $$0 = $13;
 return ($$0|0);
}
function _imdct_step3_iter0_loop($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0100 = 0, $$09499 = 0, $$09598 = 0, $$09697 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $12 = 0.0;
 var $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0;
 var $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0;
 var $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0;
 var $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (($1) + ($2<<2)|0);
 $6 = $0 & 3;
 $7 = ($6|0)==(0);
 if (!($7)) {
  ___assert_fail((14182|0),(13997|0),2008,(14195|0));
  // unreachable;
 }
 $8 = $0 >> 2;
 $9 = ($8|0)>(0);
 if (!($9)) {
  return;
 }
 $10 = (($5) + ($3<<2)|0);
 $$0100 = $4;$$09499 = $5;$$09598 = $8;$$09697 = $10;
 while(1) {
  $11 = +HEAPF32[$$09499>>2];
  $12 = +HEAPF32[$$09697>>2];
  $13 = $11 - $12;
  $14 = ((($$09499)) + -4|0);
  $15 = +HEAPF32[$14>>2];
  $16 = ((($$09697)) + -4|0);
  $17 = +HEAPF32[$16>>2];
  $18 = $15 - $17;
  $19 = $11 + $12;
  HEAPF32[$$09499>>2] = $19;
  $20 = +HEAPF32[$16>>2];
  $21 = $15 + $20;
  HEAPF32[$14>>2] = $21;
  $22 = +HEAPF32[$$0100>>2];
  $23 = $13 * $22;
  $24 = ((($$0100)) + 4|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $18 * $25;
  $27 = $23 - $26;
  HEAPF32[$$09697>>2] = $27;
  $28 = +HEAPF32[$$0100>>2];
  $29 = $18 * $28;
  $30 = +HEAPF32[$24>>2];
  $31 = $13 * $30;
  $32 = $29 + $31;
  HEAPF32[$16>>2] = $32;
  $33 = ((($$0100)) + 32|0);
  $34 = ((($$09499)) + -8|0);
  $35 = +HEAPF32[$34>>2];
  $36 = ((($$09697)) + -8|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $35 - $37;
  $39 = ((($$09499)) + -12|0);
  $40 = +HEAPF32[$39>>2];
  $41 = ((($$09697)) + -12|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $40 - $42;
  $44 = $35 + $37;
  HEAPF32[$34>>2] = $44;
  $45 = +HEAPF32[$41>>2];
  $46 = $40 + $45;
  HEAPF32[$39>>2] = $46;
  $47 = +HEAPF32[$33>>2];
  $48 = $38 * $47;
  $49 = ((($$0100)) + 36|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $43 * $50;
  $52 = $48 - $51;
  HEAPF32[$36>>2] = $52;
  $53 = +HEAPF32[$33>>2];
  $54 = $43 * $53;
  $55 = +HEAPF32[$49>>2];
  $56 = $38 * $55;
  $57 = $54 + $56;
  HEAPF32[$41>>2] = $57;
  $58 = ((($$0100)) + 64|0);
  $59 = ((($$09499)) + -16|0);
  $60 = +HEAPF32[$59>>2];
  $61 = ((($$09697)) + -16|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $60 - $62;
  $64 = ((($$09499)) + -20|0);
  $65 = +HEAPF32[$64>>2];
  $66 = ((($$09697)) + -20|0);
  $67 = +HEAPF32[$66>>2];
  $68 = $65 - $67;
  $69 = $60 + $62;
  HEAPF32[$59>>2] = $69;
  $70 = +HEAPF32[$66>>2];
  $71 = $65 + $70;
  HEAPF32[$64>>2] = $71;
  $72 = +HEAPF32[$58>>2];
  $73 = $63 * $72;
  $74 = ((($$0100)) + 68|0);
  $75 = +HEAPF32[$74>>2];
  $76 = $68 * $75;
  $77 = $73 - $76;
  HEAPF32[$61>>2] = $77;
  $78 = +HEAPF32[$58>>2];
  $79 = $68 * $78;
  $80 = +HEAPF32[$74>>2];
  $81 = $63 * $80;
  $82 = $79 + $81;
  HEAPF32[$66>>2] = $82;
  $83 = ((($$0100)) + 96|0);
  $84 = ((($$09499)) + -24|0);
  $85 = +HEAPF32[$84>>2];
  $86 = ((($$09697)) + -24|0);
  $87 = +HEAPF32[$86>>2];
  $88 = $85 - $87;
  $89 = ((($$09499)) + -28|0);
  $90 = +HEAPF32[$89>>2];
  $91 = ((($$09697)) + -28|0);
  $92 = +HEAPF32[$91>>2];
  $93 = $90 - $92;
  $94 = $85 + $87;
  HEAPF32[$84>>2] = $94;
  $95 = +HEAPF32[$91>>2];
  $96 = $90 + $95;
  HEAPF32[$89>>2] = $96;
  $97 = +HEAPF32[$83>>2];
  $98 = $88 * $97;
  $99 = ((($$0100)) + 100|0);
  $100 = +HEAPF32[$99>>2];
  $101 = $93 * $100;
  $102 = $98 - $101;
  HEAPF32[$86>>2] = $102;
  $103 = +HEAPF32[$83>>2];
  $104 = $93 * $103;
  $105 = +HEAPF32[$99>>2];
  $106 = $88 * $105;
  $107 = $104 + $106;
  HEAPF32[$91>>2] = $107;
  $108 = ((($$0100)) + 128|0);
  $109 = ((($$09499)) + -32|0);
  $110 = ((($$09697)) + -32|0);
  $111 = (($$09598) + -1)|0;
  $112 = ($$09598|0)>(1);
  if ($112) {
   $$0100 = $108;$$09499 = $109;$$09598 = $111;$$09697 = $110;
  } else {
   break;
  }
 }
 return;
}
function _imdct_step3_inner_r_loop($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0103 = 0, $$097102 = 0, $$098101 = 0, $$099100 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $12 = 0.0, $13 = 0;
 var $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0;
 var $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0;
 var $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (($1) + ($2<<2)|0);
 $7 = $0 >> 2;
 $8 = ($7|0)>(0);
 if (!($8)) {
  return;
 }
 $9 = (($6) + ($3<<2)|0);
 $$0103 = $9;$$097102 = $6;$$098101 = $4;$$099100 = $7;
 while(1) {
  $10 = +HEAPF32[$$097102>>2];
  $11 = +HEAPF32[$$0103>>2];
  $12 = $10 - $11;
  $13 = ((($$097102)) + -4|0);
  $14 = +HEAPF32[$13>>2];
  $15 = ((($$0103)) + -4|0);
  $16 = +HEAPF32[$15>>2];
  $17 = $14 - $16;
  $18 = $10 + $11;
  HEAPF32[$$097102>>2] = $18;
  $19 = +HEAPF32[$15>>2];
  $20 = $14 + $19;
  HEAPF32[$13>>2] = $20;
  $21 = +HEAPF32[$$098101>>2];
  $22 = $12 * $21;
  $23 = ((($$098101)) + 4|0);
  $24 = +HEAPF32[$23>>2];
  $25 = $17 * $24;
  $26 = $22 - $25;
  HEAPF32[$$0103>>2] = $26;
  $27 = +HEAPF32[$$098101>>2];
  $28 = $17 * $27;
  $29 = +HEAPF32[$23>>2];
  $30 = $12 * $29;
  $31 = $28 + $30;
  HEAPF32[$15>>2] = $31;
  $32 = (($$098101) + ($5<<2)|0);
  $33 = ((($$097102)) + -8|0);
  $34 = +HEAPF32[$33>>2];
  $35 = ((($$0103)) + -8|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $34 - $36;
  $38 = ((($$097102)) + -12|0);
  $39 = +HEAPF32[$38>>2];
  $40 = ((($$0103)) + -12|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $39 - $41;
  $43 = $34 + $36;
  HEAPF32[$33>>2] = $43;
  $44 = +HEAPF32[$40>>2];
  $45 = $39 + $44;
  HEAPF32[$38>>2] = $45;
  $46 = +HEAPF32[$32>>2];
  $47 = $37 * $46;
  $48 = ((($32)) + 4|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $42 * $49;
  $51 = $47 - $50;
  HEAPF32[$35>>2] = $51;
  $52 = +HEAPF32[$32>>2];
  $53 = $42 * $52;
  $54 = +HEAPF32[$48>>2];
  $55 = $37 * $54;
  $56 = $53 + $55;
  HEAPF32[$40>>2] = $56;
  $57 = (($32) + ($5<<2)|0);
  $58 = ((($$097102)) + -16|0);
  $59 = +HEAPF32[$58>>2];
  $60 = ((($$0103)) + -16|0);
  $61 = +HEAPF32[$60>>2];
  $62 = $59 - $61;
  $63 = ((($$097102)) + -20|0);
  $64 = +HEAPF32[$63>>2];
  $65 = ((($$0103)) + -20|0);
  $66 = +HEAPF32[$65>>2];
  $67 = $64 - $66;
  $68 = $59 + $61;
  HEAPF32[$58>>2] = $68;
  $69 = +HEAPF32[$65>>2];
  $70 = $64 + $69;
  HEAPF32[$63>>2] = $70;
  $71 = +HEAPF32[$57>>2];
  $72 = $62 * $71;
  $73 = ((($57)) + 4|0);
  $74 = +HEAPF32[$73>>2];
  $75 = $67 * $74;
  $76 = $72 - $75;
  HEAPF32[$60>>2] = $76;
  $77 = +HEAPF32[$57>>2];
  $78 = $67 * $77;
  $79 = +HEAPF32[$73>>2];
  $80 = $62 * $79;
  $81 = $78 + $80;
  HEAPF32[$65>>2] = $81;
  $82 = (($57) + ($5<<2)|0);
  $83 = ((($$097102)) + -24|0);
  $84 = +HEAPF32[$83>>2];
  $85 = ((($$0103)) + -24|0);
  $86 = +HEAPF32[$85>>2];
  $87 = $84 - $86;
  $88 = ((($$097102)) + -28|0);
  $89 = +HEAPF32[$88>>2];
  $90 = ((($$0103)) + -28|0);
  $91 = +HEAPF32[$90>>2];
  $92 = $89 - $91;
  $93 = $84 + $86;
  HEAPF32[$83>>2] = $93;
  $94 = +HEAPF32[$90>>2];
  $95 = $89 + $94;
  HEAPF32[$88>>2] = $95;
  $96 = +HEAPF32[$82>>2];
  $97 = $87 * $96;
  $98 = ((($82)) + 4|0);
  $99 = +HEAPF32[$98>>2];
  $100 = $92 * $99;
  $101 = $97 - $100;
  HEAPF32[$85>>2] = $101;
  $102 = +HEAPF32[$82>>2];
  $103 = $92 * $102;
  $104 = +HEAPF32[$98>>2];
  $105 = $87 * $104;
  $106 = $103 + $105;
  HEAPF32[$90>>2] = $106;
  $107 = ((($$097102)) + -32|0);
  $108 = ((($$0103)) + -32|0);
  $109 = (($82) + ($5<<2)|0);
  $110 = (($$099100) + -1)|0;
  $111 = ($$099100|0)>(1);
  if ($111) {
   $$0103 = $108;$$097102 = $107;$$098101 = $109;$$099100 = $110;
  } else {
   break;
  }
 }
 return;
}
function _imdct_step3_inner_s_loop($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0129132 = 0, $$0130131 = 0, $$0133 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0;
 var $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0;
 var $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0;
 var $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = +HEAPF32[$4>>2];
 $8 = ((($4)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = (($4) + ($5<<2)|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (($5) + 1)|0;
 $13 = (($4) + ($12<<2)|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $5 << 1;
 $16 = (($4) + ($15<<2)|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $15 | 1;
 $19 = (($4) + ($18<<2)|0);
 $20 = +HEAPF32[$19>>2];
 $21 = ($5*3)|0;
 $22 = (($4) + ($21<<2)|0);
 $23 = +HEAPF32[$22>>2];
 $24 = (($21) + 1)|0;
 $25 = (($4) + ($24<<2)|0);
 $26 = +HEAPF32[$25>>2];
 $27 = (($1) + ($2<<2)|0);
 $28 = ($0|0)>(0);
 if (!($28)) {
  return;
 }
 $29 = (($27) + ($3<<2)|0);
 $30 = (0 - ($6))|0;
 $$0129132 = $27;$$0130131 = $0;$$0133 = $29;
 while(1) {
  $31 = +HEAPF32[$$0129132>>2];
  $32 = +HEAPF32[$$0133>>2];
  $33 = $31 - $32;
  $34 = ((($$0129132)) + -4|0);
  $35 = +HEAPF32[$34>>2];
  $36 = ((($$0133)) + -4|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $35 - $37;
  $39 = $31 + $32;
  HEAPF32[$$0129132>>2] = $39;
  $40 = +HEAPF32[$36>>2];
  $41 = $35 + $40;
  HEAPF32[$34>>2] = $41;
  $42 = $7 * $33;
  $43 = $9 * $38;
  $44 = $42 - $43;
  HEAPF32[$$0133>>2] = $44;
  $45 = $7 * $38;
  $46 = $9 * $33;
  $47 = $46 + $45;
  HEAPF32[$36>>2] = $47;
  $48 = ((($$0129132)) + -8|0);
  $49 = +HEAPF32[$48>>2];
  $50 = ((($$0133)) + -8|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $49 - $51;
  $53 = ((($$0129132)) + -12|0);
  $54 = +HEAPF32[$53>>2];
  $55 = ((($$0133)) + -12|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $54 - $56;
  $58 = $49 + $51;
  HEAPF32[$48>>2] = $58;
  $59 = +HEAPF32[$55>>2];
  $60 = $54 + $59;
  HEAPF32[$53>>2] = $60;
  $61 = $11 * $52;
  $62 = $14 * $57;
  $63 = $61 - $62;
  HEAPF32[$50>>2] = $63;
  $64 = $11 * $57;
  $65 = $14 * $52;
  $66 = $65 + $64;
  HEAPF32[$55>>2] = $66;
  $67 = ((($$0129132)) + -16|0);
  $68 = +HEAPF32[$67>>2];
  $69 = ((($$0133)) + -16|0);
  $70 = +HEAPF32[$69>>2];
  $71 = $68 - $70;
  $72 = ((($$0129132)) + -20|0);
  $73 = +HEAPF32[$72>>2];
  $74 = ((($$0133)) + -20|0);
  $75 = +HEAPF32[$74>>2];
  $76 = $73 - $75;
  $77 = $68 + $70;
  HEAPF32[$67>>2] = $77;
  $78 = +HEAPF32[$74>>2];
  $79 = $73 + $78;
  HEAPF32[$72>>2] = $79;
  $80 = $17 * $71;
  $81 = $20 * $76;
  $82 = $80 - $81;
  HEAPF32[$69>>2] = $82;
  $83 = $17 * $76;
  $84 = $20 * $71;
  $85 = $84 + $83;
  HEAPF32[$74>>2] = $85;
  $86 = ((($$0129132)) + -24|0);
  $87 = +HEAPF32[$86>>2];
  $88 = ((($$0133)) + -24|0);
  $89 = +HEAPF32[$88>>2];
  $90 = $87 - $89;
  $91 = ((($$0129132)) + -28|0);
  $92 = +HEAPF32[$91>>2];
  $93 = ((($$0133)) + -28|0);
  $94 = +HEAPF32[$93>>2];
  $95 = $92 - $94;
  $96 = $87 + $89;
  HEAPF32[$86>>2] = $96;
  $97 = +HEAPF32[$93>>2];
  $98 = $92 + $97;
  HEAPF32[$91>>2] = $98;
  $99 = $23 * $90;
  $100 = $26 * $95;
  $101 = $99 - $100;
  HEAPF32[$88>>2] = $101;
  $102 = $23 * $95;
  $103 = $26 * $90;
  $104 = $103 + $102;
  HEAPF32[$93>>2] = $104;
  $105 = (($$0129132) + ($30<<2)|0);
  $106 = (($$0133) + ($30<<2)|0);
  $107 = (($$0130131) + -1)|0;
  $108 = ($$0130131|0)>(1);
  if ($108) {
   $$0129132 = $105;$$0130131 = $107;$$0133 = $106;
  } else {
   break;
  }
 }
 return;
}
function _imdct_step3_inner_s_loop_ld654($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$086 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 >> 3;
 $6 = (($3) + ($5<<2)|0);
 $7 = +HEAPF32[$6>>2];
 $8 = (($1) + ($2<<2)|0);
 $9 = $0 << 4;
 $10 = (0 - ($9))|0;
 $11 = (($8) + ($10<<2)|0);
 $12 = ($10|0)<(0);
 if ($12) {
  $$086 = $8;
 } else {
  return;
 }
 while(1) {
  $13 = +HEAPF32[$$086>>2];
  $14 = ((($$086)) + -32|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $13 - $15;
  $17 = ((($$086)) + -4|0);
  $18 = +HEAPF32[$17>>2];
  $19 = ((($$086)) + -36|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $18 - $20;
  $22 = $13 + $15;
  HEAPF32[$$086>>2] = $22;
  $23 = $18 + $20;
  HEAPF32[$17>>2] = $23;
  HEAPF32[$14>>2] = $16;
  HEAPF32[$19>>2] = $21;
  $24 = ((($$086)) + -8|0);
  $25 = +HEAPF32[$24>>2];
  $26 = ((($$086)) + -40|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $25 - $27;
  $29 = ((($$086)) + -12|0);
  $30 = +HEAPF32[$29>>2];
  $31 = ((($$086)) + -44|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $30 - $32;
  $34 = $25 + $27;
  HEAPF32[$24>>2] = $34;
  $35 = $30 + $32;
  HEAPF32[$29>>2] = $35;
  $36 = $28 + $33;
  $37 = $7 * $36;
  HEAPF32[$26>>2] = $37;
  $38 = $33 - $28;
  $39 = $7 * $38;
  HEAPF32[$31>>2] = $39;
  $40 = ((($$086)) + -48|0);
  $41 = +HEAPF32[$40>>2];
  $42 = ((($$086)) + -16|0);
  $43 = +HEAPF32[$42>>2];
  $44 = $41 - $43;
  $45 = ((($$086)) + -20|0);
  $46 = +HEAPF32[$45>>2];
  $47 = ((($$086)) + -52|0);
  $48 = +HEAPF32[$47>>2];
  $49 = $46 - $48;
  $50 = $41 + $43;
  HEAPF32[$42>>2] = $50;
  $51 = $46 + $48;
  HEAPF32[$45>>2] = $51;
  HEAPF32[$40>>2] = $49;
  HEAPF32[$47>>2] = $44;
  $52 = ((($$086)) + -56|0);
  $53 = +HEAPF32[$52>>2];
  $54 = ((($$086)) + -24|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $53 - $55;
  $57 = ((($$086)) + -28|0);
  $58 = +HEAPF32[$57>>2];
  $59 = ((($$086)) + -60|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $58 - $60;
  $62 = $53 + $55;
  HEAPF32[$54>>2] = $62;
  $63 = $58 + $60;
  HEAPF32[$57>>2] = $63;
  $64 = $56 + $61;
  $65 = $7 * $64;
  HEAPF32[$52>>2] = $65;
  $66 = $56 - $61;
  $67 = $7 * $66;
  HEAPF32[$59>>2] = $67;
  _iter_54($$086);
  _iter_54($14);
  $68 = ((($$086)) + -64|0);
  $69 = ($68>>>0)>($11>>>0);
  if ($69) {
   $$086 = $68;
  } else {
   break;
  }
 }
 return;
}
function _iter_54($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[$0>>2];
 $2 = ((($0)) + -16|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $1 - $3;
 $5 = $1 + $3;
 $6 = ((($0)) + -8|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($0)) + -24|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 + $9;
 $11 = $7 - $9;
 $12 = $5 + $10;
 HEAPF32[$0>>2] = $12;
 $13 = $5 - $10;
 HEAPF32[$6>>2] = $13;
 $14 = ((($0)) + -12|0);
 $15 = +HEAPF32[$14>>2];
 $16 = ((($0)) + -28|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $15 - $17;
 $19 = $4 + $18;
 HEAPF32[$2>>2] = $19;
 $20 = $4 - $18;
 HEAPF32[$8>>2] = $20;
 $21 = ((($0)) + -4|0);
 $22 = +HEAPF32[$21>>2];
 $23 = ((($0)) + -20|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $22 - $24;
 $26 = $22 + $24;
 $27 = $15 + $17;
 $28 = $27 + $26;
 HEAPF32[$21>>2] = $28;
 $29 = $26 - $27;
 HEAPF32[$14>>2] = $29;
 $30 = $25 - $11;
 HEAPF32[$23>>2] = $30;
 $31 = $11 + $25;
 HEAPF32[$16>>2] = $31;
 return;
}
function _draw_line($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0$pn = 0, $$05368 = 0, $$056 = 0, $$05666 = 0, $$05669 = 0, $$1 = 0, $$155 = 0, $$155$sink67 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0;
 var $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos58 = 0, $neg = 0, $neg59 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (($4) - ($2))|0;
 $7 = (($3) - ($1))|0;
 $ispos = ($6|0)>(-1);
 $neg = (0 - ($6))|0;
 $8 = $ispos ? $6 : $neg;
 $9 = (($6|0) / ($7|0))&-1;
 $10 = $6 >> 31;
 $11 = $10 | 1;
 $ispos58 = ($9|0)>(-1);
 $neg59 = (0 - ($9))|0;
 $12 = $ispos58 ? $9 : $neg59;
 $13 = Math_imul($12, $7)|0;
 $14 = (($8) - ($13))|0;
 $15 = ($3|0)>($5|0);
 $$ = $15 ? $5 : $3;
 $16 = ($$|0)>($1|0);
 if (!($16)) {
  return;
 }
 $17 = (4056 + ($2<<2)|0);
 $18 = +HEAPF32[$17>>2];
 $19 = (($0) + ($1<<2)|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $18 * $20;
 HEAPF32[$19>>2] = $21;
 $$05666 = (($1) + 1)|0;
 $22 = ($$05666|0)<($$|0);
 if ($22) {
  $$05368 = 0;$$05669 = $$05666;$$155$sink67 = $2;
 } else {
  return;
 }
 while(1) {
  $23 = (($$05368) + ($14))|0;
  $24 = ($23|0)<($7|0);
  $25 = $24 ? 0 : $11;
  $26 = $24 ? 0 : $7;
  $$1 = (($23) - ($26))|0;
  $$0$pn = (($$155$sink67) + ($9))|0;
  $$155 = (($$0$pn) + ($25))|0;
  $27 = (4056 + ($$155<<2)|0);
  $28 = +HEAPF32[$27>>2];
  $29 = (($0) + ($$05669<<2)|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $28 * $30;
  HEAPF32[$29>>2] = $31;
  $$056 = (($$05669) + 1)|0;
  $32 = ($$056|0)<($$|0);
  if ($32) {
   $$05368 = $$1;$$05669 = $$056;$$155$sink67 = $$155;
  } else {
   break;
  }
 }
 return;
}
function _make_block_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01617 = 0, $$018 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)>(0);
 if (!($3)) {
  return ($0|0);
 }
 $4 = (($0) + ($1<<2)|0);
 $$01617 = 0;$$018 = $4;
 while(1) {
  $5 = (($0) + ($$01617<<2)|0);
  HEAP32[$5>>2] = $$018;
  $6 = (($$018) + ($2)|0);
  $7 = (($$01617) + 1)|0;
  $exitcond = ($7|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$01617 = $7;$$018 = $6;
  }
 }
 return ($0|0);
}
function _codebook_decode_deinterleave_repeat($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $$$1115 = 0, $$$3117 = 0, $$0100145 = 0, $$0102$lcssa = 0, $$0102144 = 0, $$0105133 = 0.0, $$0107143 = 0, $$0112132 = 0, $$0114$lcssa = 0, $$0114142 = 0, $$1103134 = 0, $$1108 = 0, $$1111 = 0, $$1113137 = 0, $$1115131 = 0, $$121 = 0, $$122 = 0, $$123 = 0, $$2 = 0;
 var $$3117136 = 0, $$3138 = 0, $$5 = 0, $$5119 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0;
 var $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $exitcond = 0, $exitcond150 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = HEAP32[$4>>2]|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($1)) + 21|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  _error($0,21);
  $$2 = 0;
  return ($$2|0);
 }
 $14 = ($7|0)>(0);
 L5: do {
  if ($14) {
   $15 = ((($0)) + 1396|0);
   $16 = ((($0)) + 1392|0);
   $17 = ((($1)) + 8|0);
   $18 = ((($1)) + 23|0);
   $19 = Math_imul($6, $3)|0;
   $20 = ((($1)) + 22|0);
   $21 = ((($1)) + 28|0);
   $22 = ((($1)) + 28|0);
   $23 = ((($1)) + 2092|0);
   $$0100145 = $7;$$0102144 = $8;$$0107143 = $10;$$0114142 = $9;
   while(1) {
    $24 = HEAP32[$15>>2]|0;
    $25 = ($24|0)<(10);
    if ($25) {
     _prep_huffman($0);
    }
    $26 = HEAP32[$16>>2]|0;
    $27 = $26 & 1023;
    $28 = (((($1)) + 36|0) + ($27<<1)|0);
    $29 = HEAP16[$28>>1]|0;
    $30 = $29 << 16 >> 16;
    $31 = ($29<<16>>16)>(-1);
    if ($31) {
     $32 = HEAP32[$17>>2]|0;
     $33 = (($32) + ($30)|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = $26 >>> $35;
     HEAP32[$16>>2] = $36;
     $37 = HEAP32[$15>>2]|0;
     $38 = (($37) - ($35))|0;
     $39 = ($38|0)<(0);
     $$ = $39 ? 0 : $38;
     $$121 = $39 ? -1 : $30;
     HEAP32[$15>>2] = $$;
     $$1111 = $$121;
    } else {
     $40 = (_codebook_decode_scalar_raw($0,$1)|0);
     $$1111 = $40;
    }
    $41 = HEAP8[$18>>0]|0;
    $42 = ($41<<24>>24)==(0);
    if (!($42)) {
     $43 = HEAP32[$23>>2]|0;
     $44 = ($$1111|0)<($43|0);
     if (!($44)) {
      label = 12;
      break;
     }
    }
    $45 = ($$1111|0)<(0);
    if ($45) {
     break;
    }
    $52 = Math_imul($$0114142, $3)|0;
    $53 = (($$0107143) + ($52))|0;
    $54 = (($53) + ($$0102144))|0;
    $55 = ($54|0)>($19|0);
    $56 = (($19) - ($52))|0;
    $57 = (($56) + ($$0102144))|0;
    $$1108 = $55 ? $57 : $$0107143;
    $58 = HEAP32[$1>>2]|0;
    $59 = Math_imul($58, $$1111)|0;
    $60 = HEAP8[$20>>0]|0;
    $61 = ($60<<24>>24)==(0);
    $62 = ($$1108|0)>(0);
    if ($61) {
     if ($62) {
      $$1113137 = 0;$$3117136 = $$0114142;$$3138 = $$0102144;
      while(1) {
       $78 = (($2) + ($$3138<<2)|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==(0|0);
       if (!($80)) {
        $81 = HEAP32[$21>>2]|0;
        $82 = (($$1113137) + ($59))|0;
        $83 = (($81) + ($82<<2)|0);
        $84 = +HEAPF32[$83>>2];
        $85 = $84 + 0.0;
        $86 = (($79) + ($$3117136<<2)|0);
        $87 = +HEAPF32[$86>>2];
        $88 = $87 + $85;
        HEAPF32[$86>>2] = $88;
       }
       $89 = (($$3138) + 1)|0;
       $90 = ($89|0)==($3|0);
       $91 = $90&1;
       $$$3117 = (($91) + ($$3117136))|0;
       $$123 = $90 ? 0 : $89;
       $92 = (($$1113137) + 1)|0;
       $exitcond150 = ($92|0)==($$1108|0);
       if ($exitcond150) {
        $$5 = $$123;$$5119 = $$$3117;
        break;
       } else {
        $$1113137 = $92;$$3117136 = $$$3117;$$3138 = $$123;
       }
      }
     } else {
      $$5 = $$0102144;$$5119 = $$0114142;
     }
    } else {
     if ($62) {
      $63 = HEAP32[$22>>2]|0;
      $$0105133 = 0.0;$$0112132 = 0;$$1103134 = $$0102144;$$1115131 = $$0114142;
      while(1) {
       $64 = (($$0112132) + ($59))|0;
       $65 = (($63) + ($64<<2)|0);
       $66 = +HEAPF32[$65>>2];
       $67 = $$0105133 + $66;
       $68 = (($2) + ($$1103134<<2)|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($69|0)==(0|0);
       $71 = (($69) + ($$1115131<<2)|0);
       if (!($70)) {
        $72 = +HEAPF32[$71>>2];
        $73 = $67 + $72;
        HEAPF32[$71>>2] = $73;
       }
       $74 = (($$1103134) + 1)|0;
       $75 = ($74|0)==($3|0);
       $76 = $75&1;
       $$$1115 = (($76) + ($$1115131))|0;
       $$122 = $75 ? 0 : $74;
       $77 = (($$0112132) + 1)|0;
       $exitcond = ($77|0)==($$1108|0);
       if ($exitcond) {
        $$5 = $$122;$$5119 = $$$1115;
        break;
       } else {
        $$0105133 = $67;$$0112132 = $77;$$1103134 = $$122;$$1115131 = $$$1115;
       }
      }
     } else {
      $$5 = $$0102144;$$5119 = $$0114142;
     }
    }
    $93 = (($$0100145) - ($$1108))|0;
    $94 = ($93|0)>(0);
    if ($94) {
     $$0100145 = $93;$$0102144 = $$5;$$0107143 = $$1108;$$0114142 = $$5119;
    } else {
     $$0102$lcssa = $$5;$$0114$lcssa = $$5119;
     break L5;
    }
   }
   if ((label|0) == 12) {
    ___assert_fail((14262|0),(13997|0),1437,(14298|0));
    // unreachable;
   }
   $46 = ((($0)) + 1376|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = ($47<<24>>24)==(0);
   if ($48) {
    $49 = ((($0)) + 1384|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)==(0);
    if (!($51)) {
     $$2 = 0;
     return ($$2|0);
    }
   }
   _error($0,21);
   $$2 = 0;
   return ($$2|0);
  } else {
   $$0102$lcssa = $8;$$0114$lcssa = $9;
  }
 } while(0);
 HEAP32[$4>>2] = $$0102$lcssa;
 HEAP32[$5>>2] = $$0114$lcssa;
 $$2 = 1;
 return ($$2|0);
}
function _residue_decode($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$03237 = 0, $$03440 = 0, $$1 = 0, $$13341 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($5|0)==(0);
 if ($6) {
  $8 = HEAP32[$1>>2]|0;
  $9 = (($4|0) / ($8|0))&-1;
  $10 = (($2) + ($3<<2)|0);
  $11 = ($9|0)>(0);
  if (!($11)) {
   $$1 = 1;
   return ($$1|0);
  }
  $12 = (($4) - ($3))|0;
  $$03237 = 0;
  while(1) {
   $15 = (($10) + ($$03237<<2)|0);
   $16 = (($12) - ($$03237))|0;
   $17 = (_codebook_decode_step($0,$1,$15,$16,$9)|0);
   $18 = ($17|0)==(0);
   $14 = (($$03237) + 1)|0;
   if ($18) {
    $$1 = 0;
    label = 10;
    break;
   }
   $13 = ($14|0)<($9|0);
   if ($13) {
    $$03237 = $14;
   } else {
    $$1 = 1;
    label = 10;
    break;
   }
  }
  if ((label|0) == 10) {
   return ($$1|0);
  }
 } else {
  $7 = ($4|0)>(0);
  if (!($7)) {
   $$1 = 1;
   return ($$1|0);
  }
  $$03440 = $3;$$13341 = 0;
  while(1) {
   $19 = (($2) + ($$03440<<2)|0);
   $20 = (($4) - ($$13341))|0;
   $21 = (_codebook_decode($0,$1,$19,$20)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $$1 = 0;
    label = 10;
    break;
   }
   $23 = HEAP32[$1>>2]|0;
   $24 = (($23) + ($$13341))|0;
   $25 = (($23) + ($$03440))|0;
   $26 = ($24|0)<($4|0);
   if ($26) {
    $$03440 = $25;$$13341 = $24;
   } else {
    $$1 = 1;
    label = 10;
    break;
   }
  }
  if ((label|0) == 10) {
   return ($$1|0);
  }
 }
 return (0)|0;
}
function _codebook_decode_step($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$028$ = 0.0, $$02832 = 0.0, $$02931 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0;
 var $25 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_codebook_decode_start($0,$1)|0);
 $6 = ($5|0)<(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ($7|0)<($3|0);
 $$ = $8 ? $7 : $3;
 $9 = Math_imul($7, $5)|0;
 $10 = ($$|0)>(0);
 if (!($10)) {
  $$0 = 1;
  return ($$0|0);
 }
 $11 = ((($1)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 22|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 $$02832 = 0.0;$$02931 = 0;
 while(1) {
  $16 = (($$02931) + ($9))|0;
  $17 = (($12) + ($16<<2)|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $$02832 + $18;
  $20 = Math_imul($$02931, $4)|0;
  $21 = (($2) + ($20<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $22 + $19;
  HEAPF32[$21>>2] = $23;
  $$028$ = $15 ? $$02832 : $19;
  $24 = (($$02931) + 1)|0;
  $25 = ($24|0)<($$|0);
  if ($25) {
   $$02832 = $$028$;$$02931 = $24;
  } else {
   $$0 = 1;
   break;
  }
 }
 return ($$0|0);
}
function _codebook_decode($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$04046 = 0.0, $$04145 = 0, $$144 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = (_codebook_decode_start($0,$1)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)<($3|0);
 $$ = $7 ? $6 : $3;
 $8 = Math_imul($6, $4)|0;
 $9 = ((($1)) + 22|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 $12 = ($$|0)>(0);
 if ($11) {
  if (!($12)) {
   $$0 = 1;
   return ($$0|0);
  }
  $16 = ((($1)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $$144 = 0;
  while(1) {
   $29 = (($$144) + ($8))|0;
   $30 = (($17) + ($29<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $31 + 0.0;
   $33 = (($2) + ($$144<<2)|0);
   $34 = +HEAPF32[$33>>2];
   $35 = $34 + $32;
   HEAPF32[$33>>2] = $35;
   $36 = (($$144) + 1)|0;
   $37 = ($36|0)<($$|0);
   if ($37) {
    $$144 = $36;
   } else {
    $$0 = 1;
    break;
   }
  }
  return ($$0|0);
 } else {
  if (!($12)) {
   $$0 = 1;
   return ($$0|0);
  }
  $13 = ((($1)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($1)) + 12|0);
  $$04046 = 0.0;$$04145 = 0;
  while(1) {
   $18 = (($$04145) + ($8))|0;
   $19 = (($14) + ($18<<2)|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $$04046 + $20;
   $22 = (($2) + ($$04145<<2)|0);
   $23 = +HEAPF32[$22>>2];
   $24 = $23 + $21;
   HEAPF32[$22>>2] = $24;
   $25 = +HEAPF32[$15>>2];
   $26 = $21 + $25;
   $27 = (($$04145) + 1)|0;
   $28 = ($27|0)<($$|0);
   if ($28) {
    $$04046 = $26;$$04145 = $27;
   } else {
    $$0 = 1;
    break;
   }
  }
  return ($$0|0);
 }
 return (0)|0;
}
function _codebook_decode_start($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$30 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 21|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  _error($0,21);
  $$0 = -1;
  return ($$0|0);
 }
 $5 = ((($0)) + 1396|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<(10);
 if ($7) {
  _prep_huffman($0);
 }
 $8 = ((($0)) + 1392|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1023;
 $11 = (((($1)) + 36|0) + ($10<<1)|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = ($12<<16>>16)>(-1);
 if ($14) {
  $15 = ((($1)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($13)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $9 >>> $19;
  HEAP32[$8>>2] = $20;
  $21 = HEAP32[$5>>2]|0;
  $22 = (($21) - ($19))|0;
  $23 = ($22|0)<(0);
  $$ = $23 ? 0 : $22;
  $$30 = $23 ? -1 : $13;
  HEAP32[$5>>2] = $$;
  $$1 = $$30;
 } else {
  $24 = (_codebook_decode_scalar_raw($0,$1)|0);
  $$1 = $24;
 }
 $25 = ((($1)) + 23|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = ((($1)) + 2092|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($$1|0)<($29|0);
  if (!($30)) {
   ___assert_fail((14218|0),(13997|0),1343,(14240|0));
   // unreachable;
  }
 }
 $31 = ($$1|0)<(0);
 if (!($31)) {
  $$0 = $$1;
  return ($$0|0);
 }
 $32 = ((($0)) + 1376|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = ($33<<24>>24)==(0);
 if ($34) {
  $35 = ((($0)) + 1384|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0 = $$1;
   return ($$0|0);
  }
 }
 _error($0,21);
 $$0 = $$1;
 return ($$0|0);
}
function _bit_reverse($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 >>> 1;
 $2 = $1 & 1431655765;
 $3 = $0 << 1;
 $4 = $3 & -1431655766;
 $5 = $2 | $4;
 $6 = $5 >>> 2;
 $7 = $6 & 858993459;
 $8 = $5 << 2;
 $9 = $8 & -858993460;
 $10 = $7 | $9;
 $11 = $10 >>> 4;
 $12 = $11 & 252645135;
 $13 = $10 << 4;
 $14 = $13 & -252645136;
 $15 = $12 | $14;
 $16 = $15 >>> 8;
 $17 = $16 & 16711935;
 $18 = $15 << 8;
 $19 = $18 & -16711936;
 $20 = $17 | $19;
 $21 = $20 >>> 16;
 $22 = $20 << 16;
 $23 = $21 | $22;
 return ($23|0);
}
function _maybe_start_packet($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1380|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(-1);
 if ($3) {
  $4 = (_get8($0)|0);
  $5 = ((($0)) + 96|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $$1 = 0;
   return ($$1|0);
  }
  $8 = ($4<<24>>24)==(79);
  if (!($8)) {
   _error($0,30);
   $$1 = 0;
   return ($$1|0);
  }
  $9 = (_get8($0)|0);
  $10 = ($9<<24>>24)==(103);
  if (!($10)) {
   _error($0,30);
   $$1 = 0;
   return ($$1|0);
  }
  $11 = (_get8($0)|0);
  $12 = ($11<<24>>24)==(103);
  if (!($12)) {
   _error($0,30);
   $$1 = 0;
   return ($$1|0);
  }
  $13 = (_get8($0)|0);
  $14 = ($13<<24>>24)==(83);
  if (!($14)) {
   _error($0,30);
   $$1 = 0;
   return ($$1|0);
  }
  $15 = (_start_page_no_capturepattern($0)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   $$1 = 0;
   return ($$1|0);
  }
  $17 = ((($0)) + 1375|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if (!($20)) {
   $21 = ((($0)) + 1384|0);
   HEAP32[$21>>2] = 0;
   $22 = ((($0)) + 1376|0);
   HEAP8[$22>>0] = 0;
   _error($0,32);
   $$1 = 0;
   return ($$1|0);
  }
 }
 $23 = (_start_packet($0)|0);
 $$1 = $23;
 return ($$1|0);
}
function _get8_packet($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_get8_packet_raw($0)|0);
 $2 = ((($0)) + 1396|0);
 HEAP32[$2>>2] = 0;
 return ($1|0);
}
function _start_packet($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1380|0);
 $2 = ((($0)) + 1375|0);
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(-1);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = (_start_page($0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $$0 = 0;
   label = 7;
   break;
  }
  $7 = HEAP8[$2>>0]|0;
  $8 = $7 & 1;
  $9 = ($8<<24>>24)==(0);
  if (!($9)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  _error($0,32);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 6) {
  $10 = ((($0)) + 1384|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($0)) + 1396|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 1400|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 1376|0);
  HEAP8[$13>>0] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 7) {
  return ($$0|0);
 }
 return (0)|0;
}
function _compute_stereo_samples($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$$076 = 0, $$0 = 0, $$07386 = 0, $$07488 = 0, $$07593 = 0, $$07692 = 0, $$184 = 0, $$283 = 0, $$390 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $trunc = 0, $trunc$clear = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 $6 = ($4|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ($1|0)>(0);
 $$07593 = 0;$$07692 = 16;
 while(1) {
  $8 = $$07593 << 1;
  dest=$5; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $9 = (($$07593) + ($$07692))|0;
  $10 = ($9|0)>($4|0);
  $11 = (($4) - ($$07593))|0;
  $$$076 = $10 ? $11 : $$07692;
  L6: do {
   if ($7) {
    $12 = ($$$076|0)>(0);
    $13 = (($$07593) + ($3))|0;
    $14 = ($$$076|0)>(0);
    $15 = (($$07593) + ($3))|0;
    $16 = ($$$076|0)>(0);
    $17 = (($$07593) + ($3))|0;
    $$07488 = 0;
    while(1) {
     $20 = ((14456 + (($1*6)|0)|0) + ($$07488)|0);
     $21 = HEAP8[$20>>0]|0;
     $trunc = $21 & 6;
     $trunc$clear = $trunc & 7;
     switch ($trunc$clear<<24>>24) {
     case 6:  {
      if ($12) {
       $26 = (($2) + ($$07488<<2)|0);
       $27 = HEAP32[$26>>2]|0;
       $$07386 = 0;
       while(1) {
        $28 = (($13) + ($$07386))|0;
        $29 = (($27) + ($28<<2)|0);
        $30 = +HEAPF32[$29>>2];
        $31 = $$07386 << 1;
        $32 = (($5) + ($31<<2)|0);
        $33 = +HEAPF32[$32>>2];
        $34 = $30 + $33;
        HEAPF32[$32>>2] = $34;
        $35 = $31 | 1;
        $36 = (($5) + ($35<<2)|0);
        $37 = +HEAPF32[$36>>2];
        $38 = $30 + $37;
        HEAPF32[$36>>2] = $38;
        $39 = (($$07386) + 1)|0;
        $40 = ($39|0)<($$$076|0);
        if ($40) {
         $$07386 = $39;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 2:  {
      if ($14) {
       $24 = (($2) + ($$07488<<2)|0);
       $25 = HEAP32[$24>>2]|0;
       $$184 = 0;
       while(1) {
        $41 = (($15) + ($$184))|0;
        $42 = (($25) + ($41<<2)|0);
        $43 = +HEAPF32[$42>>2];
        $44 = $$184 << 1;
        $45 = (($5) + ($44<<2)|0);
        $46 = +HEAPF32[$45>>2];
        $47 = $43 + $46;
        HEAPF32[$45>>2] = $47;
        $48 = (($$184) + 1)|0;
        $49 = ($48|0)<($$$076|0);
        if ($49) {
         $$184 = $48;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 4:  {
      if ($16) {
       $22 = (($2) + ($$07488<<2)|0);
       $23 = HEAP32[$22>>2]|0;
       $$283 = 0;
       while(1) {
        $50 = (($17) + ($$283))|0;
        $51 = (($23) + ($50<<2)|0);
        $52 = +HEAPF32[$51>>2];
        $53 = $$283 << 1;
        $54 = $53 | 1;
        $55 = (($5) + ($54<<2)|0);
        $56 = +HEAPF32[$55>>2];
        $57 = $52 + $56;
        HEAPF32[$55>>2] = $57;
        $58 = (($$283) + 1)|0;
        $59 = ($58|0)<($$$076|0);
        if ($59) {
         $$283 = $58;
        } else {
         break;
        }
       }
      }
      break;
     }
     default: {
     }
     }
     $60 = (($$07488) + 1)|0;
     $exitcond = ($60|0)==($1|0);
     if ($exitcond) {
      break L6;
     } else {
      $$07488 = $60;
     }
    }
   }
  } while(0);
  $18 = $$$076 << 1;
  $19 = ($18|0)>(0);
  if ($19) {
   $$390 = 0;
   while(1) {
    $61 = (($5) + ($$390<<2)|0);
    $62 = +HEAPF32[$61>>2];
    $63 = $62 + 384.0;
    $64 = (HEAPF32[tempDoublePtr>>2]=$63,HEAP32[tempDoublePtr>>2]|0);
    $65 = (($64) + -1136623616)|0;
    $66 = ($65>>>0)>(65535);
    $67 = ($64|0)<(1136656384);
    $68 = $67 ? 32768 : 32767;
    $$0 = $66 ? $68 : $64;
    $69 = $$0&65535;
    $70 = (($$390) + ($8))|0;
    $71 = (($0) + ($70<<1)|0);
    HEAP16[$71>>1] = $69;
    $72 = (($$390) + 1)|0;
    $73 = ($72|0)<($18|0);
    if ($73) {
     $$390 = $72;
    } else {
     break;
    }
   }
  }
  $74 = (($$07593) + 16)|0;
  $75 = ($74|0)<($4|0);
  if ($75) {
   $$07593 = $74;$$07692 = $$$076;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _stb_vorbis_get_file_offset($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $11 = ((($0)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_ftell($12)|0);
  $14 = ((($0)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) - ($15))|0;
  $$0 = $16;
  return ($$0|0);
 } else {
  $7 = ((($0)) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $5;
  $10 = (($9) - ($8))|0;
  $$0 = $10;
  return ($$0|0);
 }
 return (0)|0;
}
function _set_file_offset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 48|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  return;
 }
 $5 = ((($0)) + 96|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = ((($0)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($1)|0);
  $12 = ((($0)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)>=($13>>>0);
  $15 = ($1|0)<(0);
  $or$cond1 = $15 | $14;
  if ($or$cond1) {
   HEAP32[$6>>2] = $13;
   HEAP32[$5>>2] = 1;
   return;
  } else {
   HEAP32[$6>>2] = $11;
   return;
  }
 }
 $16 = ((($0)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($1))|0;
 $19 = ($18>>>0)<($1>>>0);
 $20 = ($1|0)<(0);
 $or$cond = $20 | $19;
 if ($or$cond) {
  HEAP32[$5>>2] = 1;
  $$0 = 2147483647;
 } else {
  $$0 = $18;
 }
 $21 = ((($0)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_fseek($22,$$0,0)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  return;
 }
 HEAP32[$5>>2] = 1;
 $25 = HEAP32[$21>>2]|0;
 $26 = HEAP32[$16>>2]|0;
 (_fseek($25,$26,2)|0);
 return;
}
function _vorbis_find_page($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$ph = 0, $$069104 = 0, $$070 = 0, $$082$lcssa = 0, $$1 = 0, $$174103 = 0, $$2 = 0, $$275$lcssa = 0, $$275109 = 0, $$480102 = 0, $$5$ph = 0, $$581108 = 0, $$lobit = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $scevgep = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = ((($0)) + 96|0);
 $5 = ((($0)) + 44|0);
 $6 = ((($3)) + 4|0);
 $7 = ((($3)) + 22|0);
 $8 = ((($3)) + 23|0);
 $9 = ((($3)) + 24|0);
 $10 = ((($3)) + 25|0);
 $11 = ((($3)) + 26|0);
 $12 = ($1|0)==(0|0);
 $13 = ($2|0)==(0|0);
 $14 = ((($3)) + 5|0);
 $scevgep = ((($3)) + 22|0);
 $15 = ((($3)) + 4|0);
 $16 = ((($3)) + 5|0);
 $17 = ((($3)) + 6|0);
 $18 = ((($3)) + 7|0);
 $19 = ((($3)) + 8|0);
 $20 = ((($3)) + 9|0);
 $21 = ((($3)) + 10|0);
 $22 = ((($3)) + 11|0);
 $23 = ((($3)) + 12|0);
 $24 = ((($3)) + 13|0);
 $25 = ((($3)) + 14|0);
 $26 = ((($3)) + 15|0);
 $27 = ((($3)) + 16|0);
 $28 = ((($3)) + 17|0);
 $29 = ((($3)) + 18|0);
 $30 = ((($3)) + 19|0);
 $31 = ((($3)) + 20|0);
 $32 = ((($3)) + 21|0);
 $33 = ((($3)) + 22|0);
 $34 = ((($3)) + 23|0);
 $35 = ((($3)) + 24|0);
 $36 = ((($3)) + 25|0);
 $37 = ((($3)) + 26|0);
 $38 = ((($3)) + 1|0);
 $39 = ((($3)) + 2|0);
 $40 = ((($3)) + 3|0);
 $41 = ((($3)) + 4|0);
 $42 = ((($3)) + 5|0);
 $43 = ((($3)) + 6|0);
 $44 = ((($3)) + 7|0);
 $45 = ((($3)) + 8|0);
 $46 = ((($3)) + 9|0);
 $47 = ((($3)) + 10|0);
 $48 = ((($3)) + 11|0);
 $49 = ((($3)) + 12|0);
 $50 = ((($3)) + 13|0);
 $51 = ((($3)) + 14|0);
 $52 = ((($3)) + 15|0);
 $53 = ((($3)) + 16|0);
 $54 = ((($3)) + 17|0);
 $55 = ((($3)) + 18|0);
 $56 = ((($3)) + 19|0);
 $57 = ((($3)) + 20|0);
 $58 = ((($3)) + 21|0);
 $59 = ((($3)) + 22|0);
 $60 = ((($3)) + 23|0);
 $61 = ((($3)) + 24|0);
 $62 = ((($3)) + 25|0);
 $63 = ((($3)) + 26|0);
 $$0$ph = 0;
 L1: while(1) {
  while(1) {
   $64 = HEAP32[$4>>2]|0;
   $65 = ($64|0)==(0);
   if (!($65)) {
    $$5$ph = 0;
    label = 27;
    break L1;
   }
   $66 = (_get8($0)|0);
   $67 = ($66<<24>>24)==(79);
   if ($67) {
    break;
   }
  }
  $68 = (_stb_vorbis_get_file_offset($0)|0);
  $69 = (($68) + -25)|0;
  $70 = HEAP32[$5>>2]|0;
  $71 = ($69>>>0)>($70>>>0);
  if ($71) {
   $$5$ph = 0;
   label = 27;
   break;
  }
  $72 = (_get8($0)|0);
  $73 = HEAP8[(5081)>>0]|0;
  $74 = ($72<<24>>24)==($73<<24>>24);
  if ($74) {
   $75 = (_get8($0)|0);
   $76 = HEAP8[(5082)>>0]|0;
   $77 = ($75<<24>>24)==($76<<24>>24);
   if ($77) {
    $198 = (_get8($0)|0);
    $199 = HEAP8[(5083)>>0]|0;
    $200 = ($198<<24>>24)==($199<<24>>24);
    $$ = $200 ? 4 : 3;
    $$082$lcssa = $$;
   } else {
    $$082$lcssa = 2;
   }
  } else {
   $$082$lcssa = 1;
  }
  $78 = HEAP32[$4>>2]|0;
  $79 = ($78|0)==(0);
  if (!($79)) {
   $$5$ph = 0;
   label = 27;
   break;
  }
  $80 = ($$082$lcssa|0)==(4);
  L13: do {
   if ($80) {
    $81 = HEAP32[1270]|0;
    HEAP32[$3>>2] = $81;
    $82 = (_get8($0)|0);
    HEAP8[$15>>0] = $82;
    $83 = (_get8($0)|0);
    HEAP8[$16>>0] = $83;
    $84 = (_get8($0)|0);
    HEAP8[$17>>0] = $84;
    $85 = (_get8($0)|0);
    HEAP8[$18>>0] = $85;
    $86 = (_get8($0)|0);
    HEAP8[$19>>0] = $86;
    $87 = (_get8($0)|0);
    HEAP8[$20>>0] = $87;
    $88 = (_get8($0)|0);
    HEAP8[$21>>0] = $88;
    $89 = (_get8($0)|0);
    HEAP8[$22>>0] = $89;
    $90 = (_get8($0)|0);
    HEAP8[$23>>0] = $90;
    $91 = (_get8($0)|0);
    HEAP8[$24>>0] = $91;
    $92 = (_get8($0)|0);
    HEAP8[$25>>0] = $92;
    $93 = (_get8($0)|0);
    HEAP8[$26>>0] = $93;
    $94 = (_get8($0)|0);
    HEAP8[$27>>0] = $94;
    $95 = (_get8($0)|0);
    HEAP8[$28>>0] = $95;
    $96 = (_get8($0)|0);
    HEAP8[$29>>0] = $96;
    $97 = (_get8($0)|0);
    HEAP8[$30>>0] = $97;
    $98 = (_get8($0)|0);
    HEAP8[$31>>0] = $98;
    $99 = (_get8($0)|0);
    HEAP8[$32>>0] = $99;
    $100 = (_get8($0)|0);
    HEAP8[$33>>0] = $100;
    $101 = (_get8($0)|0);
    HEAP8[$34>>0] = $101;
    $102 = (_get8($0)|0);
    HEAP8[$35>>0] = $102;
    $103 = (_get8($0)|0);
    HEAP8[$36>>0] = $103;
    $104 = (_get8($0)|0);
    HEAP8[$37>>0] = $104;
    $105 = HEAP32[$4>>2]|0;
    $106 = ($105|0)==(0);
    do {
     if ($106) {
      $107 = HEAP8[$6>>0]|0;
      $108 = ($107<<24>>24)==(0);
      if ($108) {
       $111 = HEAP8[$7>>0]|0;
       $112 = HEAP8[$8>>0]|0;
       $113 = HEAP8[$9>>0]|0;
       $114 = HEAP8[$10>>0]|0;
       $115 = $114&255;
       $116 = $115 << 24;
       HEAP16[$scevgep>>1]=0&65535;HEAP16[$scevgep+2>>1]=0>>>16;
       $117 = $112&255;
       $118 = $117 << 8;
       $119 = $111&255;
       $120 = $118 | $119;
       $121 = $113&255;
       $122 = $121 << 16;
       $123 = $120 | $122;
       $124 = HEAP8[$3>>0]|0;
       $125 = (_crc32_update(0,$124)|0);
       $126 = HEAP8[$38>>0]|0;
       $127 = (_crc32_update($125,$126)|0);
       $128 = HEAP8[$39>>0]|0;
       $129 = (_crc32_update($127,$128)|0);
       $130 = HEAP8[$40>>0]|0;
       $131 = (_crc32_update($129,$130)|0);
       $132 = HEAP8[$41>>0]|0;
       $133 = (_crc32_update($131,$132)|0);
       $134 = HEAP8[$42>>0]|0;
       $135 = (_crc32_update($133,$134)|0);
       $136 = HEAP8[$43>>0]|0;
       $137 = (_crc32_update($135,$136)|0);
       $138 = HEAP8[$44>>0]|0;
       $139 = (_crc32_update($137,$138)|0);
       $140 = HEAP8[$45>>0]|0;
       $141 = (_crc32_update($139,$140)|0);
       $142 = HEAP8[$46>>0]|0;
       $143 = (_crc32_update($141,$142)|0);
       $144 = HEAP8[$47>>0]|0;
       $145 = (_crc32_update($143,$144)|0);
       $146 = HEAP8[$48>>0]|0;
       $147 = (_crc32_update($145,$146)|0);
       $148 = HEAP8[$49>>0]|0;
       $149 = (_crc32_update($147,$148)|0);
       $150 = HEAP8[$50>>0]|0;
       $151 = (_crc32_update($149,$150)|0);
       $152 = HEAP8[$51>>0]|0;
       $153 = (_crc32_update($151,$152)|0);
       $154 = HEAP8[$52>>0]|0;
       $155 = (_crc32_update($153,$154)|0);
       $156 = HEAP8[$53>>0]|0;
       $157 = (_crc32_update($155,$156)|0);
       $158 = HEAP8[$54>>0]|0;
       $159 = (_crc32_update($157,$158)|0);
       $160 = HEAP8[$55>>0]|0;
       $161 = (_crc32_update($159,$160)|0);
       $162 = HEAP8[$56>>0]|0;
       $163 = (_crc32_update($161,$162)|0);
       $164 = HEAP8[$57>>0]|0;
       $165 = (_crc32_update($163,$164)|0);
       $166 = HEAP8[$58>>0]|0;
       $167 = (_crc32_update($165,$166)|0);
       $168 = HEAP8[$59>>0]|0;
       $169 = (_crc32_update($167,$168)|0);
       $170 = HEAP8[$60>>0]|0;
       $171 = (_crc32_update($169,$170)|0);
       $172 = HEAP8[$61>>0]|0;
       $173 = (_crc32_update($171,$172)|0);
       $174 = HEAP8[$62>>0]|0;
       $175 = (_crc32_update($173,$174)|0);
       $176 = HEAP8[$63>>0]|0;
       $177 = (_crc32_update($175,$176)|0);
       $178 = $123 | $116;
       $179 = ($176<<24>>24)==(0);
       if ($179) {
        $$275$lcssa = $177;
       } else {
        $109 = HEAP8[$11>>0]|0;
        $110 = $109&255;
        $$069104 = 0;$$174103 = $177;$$480102 = 0;
        while(1) {
         $180 = (_get8($0)|0);
         $181 = $180&255;
         $182 = (_crc32_update($$174103,$180)|0);
         $183 = (($181) + ($$069104))|0;
         $184 = (($$480102) + 1)|0;
         $185 = ($184>>>0)<($110>>>0);
         if ($185) {
          $$069104 = $183;$$174103 = $182;$$480102 = $184;
         } else {
          break;
         }
        }
        $186 = ($183|0)==(0);
        if ($186) {
         $$275$lcssa = $182;
        } else {
         $187 = HEAP32[$4>>2]|0;
         $188 = ($187|0)==(0);
         if ($188) {
          $$275109 = $182;$$581108 = 0;
         } else {
          $$070 = 1;$$1 = 0;
          break;
         }
         while(1) {
          $189 = (_get8($0)|0);
          $190 = (_crc32_update($$275109,$189)|0);
          $191 = (($$581108) + 1)|0;
          $exitcond = ($191|0)==($183|0);
          if ($exitcond) {
           $$275$lcssa = $190;
           break;
          } else {
           $$275109 = $190;$$581108 = $191;
          }
         }
        }
       }
       $192 = ($$275$lcssa|0)==($178|0);
       if ($192) {
        if (!($12)) {
         $193 = (_stb_vorbis_get_file_offset($0)|0);
         HEAP32[$1>>2] = $193;
        }
        if (!($13)) {
         $194 = HEAP8[$14>>0]|0;
         $195 = ($194&255) >>> 2;
         $$lobit = $195 & 1;
         $196 = $$lobit&255;
         HEAP32[$2>>2] = $196;
        }
        $197 = (($68) + -1)|0;
        _set_file_offset($0,$197);
        $$070 = 1;$$1 = 1;
       } else {
        $$070 = 0;$$1 = $$0$ph;
       }
      } else {
       $$070 = 13;$$1 = $$0$ph;
      }
     } else {
      $$070 = 1;$$1 = 0;
     }
    } while(0);
    $trunc = $$070&255;
    $trunc$clear = $trunc & 15;
    switch ($trunc$clear<<24>>24) {
    case 13: case 0:  {
     $$2 = $$1;
     break L13;
     break;
    }
    default: {
    }
    }
    $cond = ($$070|0)==(0);
    if ($cond) {
     $$0$ph = $$1;
     continue L1;
    } else {
     $$5$ph = $$1;
     label = 27;
     break L1;
    }
   } else {
    $$2 = $$0$ph;
   }
  } while(0);
  _set_file_offset($0,$68);
  $$0$ph = $$2;
 }
 if ((label|0) == 27) {
  STACKTOP = sp;return ($$5$ph|0);
 }
 return (0)|0;
}
function _crc32_update($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 << 8;
 $3 = $1&255;
 $4 = $0 >>> 24;
 $5 = $3 ^ $4;
 $6 = (338372 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 ^ $2;
 return ($8|0);
}
function _stb_vorbis_open_file($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_ftell($0)|0);
 (_fseek($0,0,2)|0);
 $5 = (_ftell($0)|0);
 $6 = (($5) - ($4))|0;
 (_fseek($0,$4,0)|0);
 $7 = (_stb_vorbis_open_file_section($0,$1,$2,$3,$6)|0);
 return ($7|0);
}
function _stb_vorbis_open_file_section($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1520|0);
 $5 = sp;
 _vorbis_init($5,$3);
 $6 = ((($5)) + 20|0);
 HEAP32[$6>>2] = $0;
 $7 = (_ftell($0)|0);
 $8 = ((($5)) + 24|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($5)) + 44|0);
 HEAP32[$9>>2] = $4;
 $10 = ((($5)) + 28|0);
 HEAP32[$10>>2] = $1;
 $11 = (_start_decoder($5)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = (_vorbis_alloc($5)|0);
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   _memcpy(($13|0),($5|0),1512)|0;
   (_vorbis_pump_first_frame($13)|0);
   $$0 = $13;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $15 = ($2|0)==(0|0);
 if (!($15)) {
  $16 = ((($5)) + 100|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$2>>2] = $17;
 }
 _vorbis_deinit($5);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _vorbis_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($0|0),0,1512)|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 80|0);
  $4 = $1;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  $11 = $10;
  HEAP32[$11>>2] = $6;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = $9;
  $14 = ((($0)) + 84|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 3)|0;
  $17 = $16 & -4;
  HEAP32[$14>>2] = $17;
  $18 = ((($0)) + 92|0);
  HEAP32[$18>>2] = $17;
 }
 $19 = ((($0)) + 96|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($0)) + 100|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($0)) + 32|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($0)) + 124|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($0)) + 1420|0);
 HEAP32[$23>>2] = -1;
 $24 = ((($0)) + 28|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($0)) + 20|0);
 HEAP32[$25>>2] = 0;
 return;
}
function _start_decoder($0) {
 $0 = $0|0;
 var $$ = 0, $$$0899 = 0, $$$0929 = 0, $$$0964 = 0, $$0899$lcssa = 0, $$08991120 = 0, $$09011119 = 0, $$09021210 = 0, $$0920 = 0, $$0920$ph = 0, $$0929$lcssa = 0, $$09291199 = 0, $$09501156 = 0, $$0951 = 0, $$09541216 = 0, $$0957 = 0, $$09581209 = 0, $$0962 = 0, $$09641169 = 0, $$09661213 = 0;
 var $$09701227 = 0.0, $$0974$ph = 0, $$0977$ = 0.0, $$09771224 = 0.0, $$109121192 = 0, $$119131195 = 0, $$129141148 = 0, $$139151153 = 0, $$149161160 = 0, $$159171137 = 0, $$169181135 = 0, $$179191139 = 0, $$18921232 = 0, $$19031217 = 0, $$19211174 = 0, $$1955 = 0, $$19631000 = 0, $$19631001$ph = 0, $$1971 = 0.0, $$1971$ = 0.0;
 var $$1971$ph = 0.0, $$28931205 = 0, $$29041220 = 0, $$29221181 = 0, $$2953 = 0, $$2956 = 0, $$2960$ph = 0, $$34 = 0, $$38941200 = 0, $$39051228 = 0, $$39231152 = 0, $$3961 = 0, $$48951165 = 0, $$49061225 = 0, $$49241157 = 0, $$49241157$in = 0, $$58961143 = 0, $$59071118 = 0, $$59251132 = 0, $$68971128 = 0;
 var $$69081170 = 0, $$78981124 = 0, $$79091177 = 0, $$89101185 = 0, $$99111188 = 0, $$in = 0, $$lcssa = 0, $$lcssa1060 = 0, $$lcssa1061 = 0, $$lcssa1073 = 0, $$off = 0, $$off979 = 0, $$pr = 0, $$pr1300 = 0, $$pr1301 = 0, $$sink = 0, $$sink25 = 0, $$sink26 = 0, $$sink986 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0;
 var $262 = 0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$or$cond982 = 0, $notrhs = 0, $or$cond = 0;
 var $or$cond991 = 0, $phitmp = 0, $phitmp1296 = 0, $phitmp1297 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1024|0);
 $1 = sp + 1008|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (_start_page($0)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $7 = ((($0)) + 1375|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 2;
 $11 = ($10|0)==(0);
 if ($11) {
  _error($0,34);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $12 = $9 & 4;
 $13 = ($12|0)==(0);
 if (!($13)) {
  _error($0,34);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $14 = $9 & 1;
 $15 = ($14|0)==(0);
 if (!($15)) {
  _error($0,34);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $16 = ((($0)) + 1116|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(1);
 if (!($18)) {
  _error($0,34);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $19 = ((($0)) + 1120|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)==(30);
 if (!($21)) {
  _error($0,34);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $22 = (_get8($0)|0);
 $23 = ($22<<24>>24)==(1);
 if (!($23)) {
  _error($0,34);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $24 = (_getn($0,$1,6)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  _error($0,10);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $26 = (_vorbis_validate($1)|0);
 $27 = ($26|0)==(0);
 if ($27) {
  _error($0,34);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $28 = (_get32($0)|0);
 $29 = ($28|0)==(0);
 if (!($29)) {
  _error($0,34);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $30 = (_get8($0)|0);
 $31 = $30&255;
 $32 = ((($0)) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = ($30<<24>>24)==(0);
 if ($33) {
  _error($0,34);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $34 = ($30&255)>(16);
 if ($34) {
  _error($0,5);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $35 = (_get32($0)|0);
 HEAP32[$0>>2] = $35;
 $36 = ($35|0)==(0);
 if ($36) {
  _error($0,34);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 (_get32($0)|0);
 (_get32($0)|0);
 (_get32($0)|0);
 $37 = (_get8($0)|0);
 $38 = $37&255;
 $39 = $38 & 15;
 $40 = $38 >>> 4;
 $41 = 1 << $39;
 $42 = ((($0)) + 112|0);
 HEAP32[$42>>2] = $41;
 $43 = 1 << $40;
 $44 = ((($0)) + 116|0);
 HEAP32[$44>>2] = $43;
 $$off = (($39) + -6)|0;
 $45 = ($$off>>>0)>(7);
 if ($45) {
  _error($0,20);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $$off979 = (($37) + -96)<<24>>24;
 $46 = ($$off979<<24>>24)<(0);
 if ($46) {
  _error($0,20);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $47 = ($39>>>0)>($40>>>0);
 if ($47) {
  _error($0,20);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $48 = (_get8($0)|0);
 $49 = $48 & 1;
 $50 = ($49<<24>>24)==(0);
 if ($50) {
  _error($0,34);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $51 = (_start_page($0)|0);
 $52 = ($51|0)==(0);
 if ($52) {
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $53 = (_start_packet($0)|0);
 $54 = ($53|0)==(0);
 if ($54) {
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $55 = ((($0)) + 1376|0);
 while(1) {
  $56 = (_next_segment($0)|0);
  _skip($0,$56);
  HEAP8[$55>>0] = 0;
  $57 = ($56|0)==(0);
  if ($57) {
   break;
  }
 }
 $58 = (_start_packet($0)|0);
 $59 = ($58|0)==(0);
 if ($59) {
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $60 = ((($0)) + 48|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = ($61<<24>>24)==(0);
 do {
  if (!($62)) {
   $63 = (_is_whole_packet_present($0,1)|0);
   $64 = ($63|0)==(0);
   if (!($64)) {
    break;
   }
   $65 = ((($0)) + 100|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(21);
   if (!($67)) {
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
   HEAP32[$65>>2] = 20;
   $$34 = 0;
   STACKTOP = sp;return ($$34|0);
  }
 } while(0);
 _crc32_init();
 $68 = (_get8_packet($0)|0);
 $69 = ($68|0)==(5);
 if (!($69)) {
  _error($0,20);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $70 = (_get8_packet($0)|0);
 $71 = $70&255;
 HEAP8[$1>>0] = $71;
 $72 = (_get8_packet($0)|0);
 $73 = $72&255;
 $74 = ((($1)) + 1|0);
 HEAP8[$74>>0] = $73;
 $75 = (_get8_packet($0)|0);
 $76 = $75&255;
 $77 = ((($1)) + 2|0);
 HEAP8[$77>>0] = $76;
 $78 = (_get8_packet($0)|0);
 $79 = $78&255;
 $80 = ((($1)) + 3|0);
 HEAP8[$80>>0] = $79;
 $81 = (_get8_packet($0)|0);
 $82 = $81&255;
 $83 = ((($1)) + 4|0);
 HEAP8[$83>>0] = $82;
 $84 = (_get8_packet($0)|0);
 $85 = $84&255;
 $86 = ((($1)) + 5|0);
 HEAP8[$86>>0] = $85;
 $87 = (_vorbis_validate($1)|0);
 $88 = ($87|0)==(0);
 if ($88) {
  _error($0,20);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $89 = (_get_bits($0,8)|0);
 $90 = (($89) + 1)|0;
 $91 = ((($0)) + 120|0);
 HEAP32[$91>>2] = $90;
 $92 = ($90*2096)|0;
 $93 = (_setup_malloc($0,$92)|0);
 $94 = ((($0)) + 124|0);
 HEAP32[$94>>2] = $93;
 $95 = ($93|0)==(0|0);
 if ($95) {
  _error($0,3);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $96 = HEAP32[$91>>2]|0;
 $97 = ($96*2096)|0;
 _memset(($93|0),0,($97|0))|0;
 $98 = HEAP32[$91>>2]|0;
 $99 = ($98|0)>(0);
 L100: do {
  if ($99) {
   $100 = ((($0)) + 16|0);
   $101 = ((($0)) + 16|0);
   $$18921232 = 0;
   L102: while(1) {
    $102 = HEAP32[$94>>2]|0;
    $103 = (($102) + (($$18921232*2096)|0)|0);
    $104 = (_get_bits($0,8)|0);
    $105 = $104 & 255;
    $106 = ($105|0)==(66);
    if (!($106)) {
     label = 52;
     break;
    }
    $107 = (_get_bits($0,8)|0);
    $108 = $107 & 255;
    $109 = ($108|0)==(67);
    if (!($109)) {
     label = 54;
     break;
    }
    $110 = (_get_bits($0,8)|0);
    $111 = $110 & 255;
    $112 = ($111|0)==(86);
    if (!($112)) {
     label = 56;
     break;
    }
    $113 = (_get_bits($0,8)|0);
    $114 = (_get_bits($0,8)|0);
    $115 = $114 << 8;
    $116 = $113 & 255;
    $117 = $115 | $116;
    HEAP32[$103>>2] = $117;
    $118 = (_get_bits($0,8)|0);
    $119 = (_get_bits($0,8)|0);
    $120 = (_get_bits($0,8)|0);
    $121 = $120 << 16;
    $122 = $119 << 8;
    $123 = $122 & 65280;
    $124 = $118 & 255;
    $125 = $123 | $124;
    $126 = $125 | $121;
    $127 = (((($102) + (($$18921232*2096)|0)|0)) + 4|0);
    HEAP32[$127>>2] = $126;
    $128 = (_get_bits($0,1)|0);
    $129 = ($128|0)!=(0);
    if ($129) {
     $132 = 0;
    } else {
     $130 = (_get_bits($0,1)|0);
     $132 = $130;
    }
    $131 = $132&255;
    $133 = (((($102) + (($$18921232*2096)|0)|0)) + 23|0);
    HEAP8[$133>>0] = $131;
    $134 = HEAP32[$103>>2]|0;
    $135 = ($134|0)!=(0);
    $136 = HEAP32[$127>>2]|0;
    $137 = ($136|0)==(0);
    $or$cond = $135 | $137;
    if (!($or$cond)) {
     label = 60;
     break;
    }
    $138 = ($131<<24>>24)==(0);
    if ($138) {
     $140 = (_setup_malloc($0,$136)|0);
     $141 = (((($102) + (($$18921232*2096)|0)|0)) + 8|0);
     HEAP32[$141>>2] = $140;
     $$0962 = $140;
    } else {
     $139 = (_setup_temp_malloc($0,$136)|0);
     $$0962 = $139;
    }
    $142 = ($$0962|0)==(0|0);
    if ($142) {
     label = 65;
     break;
    }
    do {
     if ($129) {
      $145 = (_get_bits($0,5)|0);
      $146 = HEAP32[$127>>2]|0;
      $147 = ($146|0)>(0);
      if ($147) {
       $$09661213 = 0;$$in = $145;$150 = $146;
      } else {
       $$3961 = 0;
       break;
      }
      while(1) {
       $148 = (($$in) + 1)|0;
       $149 = (($150) - ($$09661213))|0;
       $151 = (_ilog($149)|0);
       $152 = (_get_bits($0,$151)|0);
       $153 = (($152) + ($$09661213))|0;
       $154 = HEAP32[$127>>2]|0;
       $155 = ($153|0)>($154|0);
       if ($155) {
        label = 71;
        break L102;
       }
       $156 = (($$0962) + ($$09661213)|0);
       $157 = $148&255;
       _memset(($156|0),($157|0),($152|0))|0;
       $158 = HEAP32[$127>>2]|0;
       $159 = ($158|0)>($153|0);
       if ($159) {
        $$09661213 = $153;$$in = $148;$150 = $158;
       } else {
        $$3961 = 0;
        break;
       }
      }
     } else {
      $143 = HEAP32[$127>>2]|0;
      $144 = ($143|0)>(0);
      if ($144) {
       $$09021210 = 0;$$09581209 = 0;
      } else {
       $$3961 = 0;
       break;
      }
      while(1) {
       $160 = HEAP8[$133>>0]|0;
       $161 = ($160<<24>>24)==(0);
       do {
        if ($161) {
         label = 74;
        } else {
         $162 = (_get_bits($0,1)|0);
         $163 = ($162|0)==(0);
         if (!($163)) {
          label = 74;
          break;
         }
         $171 = (($$0962) + ($$09021210)|0);
         HEAP8[$171>>0] = -1;
         $$2960$ph = $$09581209;
        }
       } while(0);
       if ((label|0) == 74) {
        label = 0;
        $164 = (_get_bits($0,5)|0);
        $165 = (($164) + 1)|0;
        $166 = $165&255;
        $167 = (($$0962) + ($$09021210)|0);
        HEAP8[$167>>0] = $166;
        $168 = (($$09581209) + 1)|0;
        $169 = $165 & 255;
        $170 = ($169|0)==(32);
        if ($170) {
         label = 76;
         break L102;
        } else {
         $$2960$ph = $168;
        }
       }
       $172 = (($$09021210) + 1)|0;
       $173 = HEAP32[$127>>2]|0;
       $174 = ($172|0)<($173|0);
       if ($174) {
        $$09021210 = $172;$$09581209 = $$2960$ph;
       } else {
        $$3961 = $$2960$ph;
        break;
       }
      }
     }
    } while(0);
    $175 = HEAP8[$133>>0]|0;
    $176 = ($175<<24>>24)==(0);
    do {
     if ($176) {
      $$19631001$ph = $$0962;
      label = 86;
     } else {
      $177 = HEAP32[$127>>2]|0;
      $178 = $177 >> 2;
      $179 = ($$3961|0)<($178|0);
      if ($179) {
       $$pr = HEAP8[$133>>0]|0;
       $188 = ($$pr<<24>>24)==(0);
       if ($188) {
        $$19631001$ph = $$0962;
        label = 86;
        break;
       } else {
        $$19631000 = $$0962;$$2956 = $$3961;
        break;
       }
      }
      $180 = HEAP32[$101>>2]|0;
      $181 = ($177|0)>($180|0);
      if ($181) {
       HEAP32[$101>>2] = $177;
      }
      $182 = (_setup_malloc($0,$177)|0);
      $183 = (((($102) + (($$18921232*2096)|0)|0)) + 8|0);
      HEAP32[$183>>2] = $182;
      $184 = ($182|0)==(0|0);
      if ($184) {
       label = 83;
       break L102;
      }
      $185 = HEAP32[$127>>2]|0;
      _memcpy(($182|0),($$0962|0),($185|0))|0;
      $186 = HEAP32[$127>>2]|0;
      _setup_temp_free($0,$$0962,$186);
      $187 = HEAP32[$183>>2]|0;
      HEAP8[$133>>0] = 0;
      $$19631001$ph = $187;
      label = 86;
     }
    } while(0);
    do {
     if ((label|0) == 86) {
      label = 0;
      $189 = HEAP32[$127>>2]|0;
      $190 = ($189|0)>(0);
      if (!($190)) {
       $$19631000 = $$19631001$ph;$$2956 = 0;
       break;
      }
      $191 = HEAP32[$127>>2]|0;
      $$09541216 = 0;$$19031217 = 0;
      while(1) {
       $192 = (($$19631001$ph) + ($$19031217)|0);
       $193 = HEAP8[$192>>0]|0;
       $194 = ($193&255)<(11);
       $notrhs = ($193<<24>>24)!=(-1);
       $not$or$cond982 = $194 ^ $notrhs;
       $195 = $not$or$cond982&1;
       $$1955 = (($195) + ($$09541216))|0;
       $196 = (($$19031217) + 1)|0;
       $197 = ($196|0)<($191|0);
       if ($197) {
        $$09541216 = $$1955;$$19031217 = $196;
       } else {
        $$19631000 = $$19631001$ph;$$2956 = $$1955;
        break;
       }
      }
     }
    } while(0);
    $198 = (((($102) + (($$18921232*2096)|0)|0)) + 2092|0);
    HEAP32[$198>>2] = $$2956;
    $199 = HEAP8[$133>>0]|0;
    $200 = ($199<<24>>24)==(0);
    do {
     if ($200) {
      $201 = HEAP32[$127>>2]|0;
      $202 = $201 << 2;
      $203 = (_setup_malloc($0,$202)|0);
      $204 = (((($102) + (($$18921232*2096)|0)|0)) + 32|0);
      HEAP32[$204>>2] = $203;
      $205 = ($203|0)==(0|0);
      if ($205) {
       label = 91;
       break L102;
      } else {
       $$2953 = 0;$230 = 0;
      }
     } else {
      $206 = ($$2956|0)==(0);
      if ($206) {
       $$0951 = 0;$878 = 0;
      } else {
       $207 = (_setup_malloc($0,$$2956)|0);
       $208 = (((($102) + (($$18921232*2096)|0)|0)) + 8|0);
       HEAP32[$208>>2] = $207;
       $209 = ($207|0)==(0|0);
       if ($209) {
        label = 94;
        break L102;
       }
       $210 = HEAP32[$198>>2]|0;
       $211 = $210 << 2;
       $212 = (_setup_temp_malloc($0,$211)|0);
       $213 = (((($102) + (($$18921232*2096)|0)|0)) + 32|0);
       HEAP32[$213>>2] = $212;
       $214 = ($212|0)==(0|0);
       if ($214) {
        label = 96;
        break L102;
       }
       $215 = HEAP32[$198>>2]|0;
       $216 = $215 << 2;
       $217 = (_setup_temp_malloc($0,$216)|0);
       $218 = ($217|0)==(0|0);
       if ($218) {
        label = 98;
        break L102;
       } else {
        $$0951 = $217;$878 = $217;
       }
      }
      $219 = HEAP32[$127>>2]|0;
      $220 = HEAP32[$198>>2]|0;
      $221 = $220 << 3;
      $222 = (($221) + ($219))|0;
      $223 = HEAP32[$100>>2]|0;
      $224 = ($222>>>0)>($223>>>0);
      if (!($224)) {
       $$2953 = $$0951;$230 = $878;
       break;
      }
      HEAP32[$100>>2] = $222;
      $$2953 = $$0951;$230 = $878;
     }
    } while(0);
    $225 = HEAP32[$127>>2]|0;
    $226 = (_compute_codewords($103,$$19631000,$225,$$2953)|0);
    $227 = ($226|0)==(0);
    if ($227) {
     label = 102;
     break;
    }
    $231 = HEAP32[$198>>2]|0;
    $232 = ($231|0)==(0);
    if (!($232)) {
     $233 = $231 << 2;
     $234 = (($233) + 4)|0;
     $235 = (_setup_malloc($0,$234)|0);
     $236 = (((($102) + (($$18921232*2096)|0)|0)) + 2084|0);
     HEAP32[$236>>2] = $235;
     $237 = ($235|0)==(0|0);
     if ($237) {
      label = 107;
      break;
     }
     $238 = HEAP32[$198>>2]|0;
     $239 = $238 << 2;
     $240 = (($239) + 4)|0;
     $241 = (_setup_malloc($0,$240)|0);
     $242 = (((($102) + (($$18921232*2096)|0)|0)) + 2088|0);
     HEAP32[$242>>2] = $241;
     $243 = ($241|0)==(0|0);
     if ($243) {
      label = 109;
      break;
     }
     $244 = ((($241)) + 4|0);
     HEAP32[$242>>2] = $244;
     HEAP32[$241>>2] = -1;
     _compute_sorted_huffman($103,$$19631000,$$2953);
    }
    $245 = HEAP8[$133>>0]|0;
    $246 = ($245<<24>>24)==(0);
    if (!($246)) {
     $247 = HEAP32[$198>>2]|0;
     $248 = $247 << 2;
     _setup_temp_free($0,$230,$248);
     $249 = (((($102) + (($$18921232*2096)|0)|0)) + 32|0);
     $250 = HEAP32[$249>>2]|0;
     $251 = HEAP32[$198>>2]|0;
     $252 = $251 << 2;
     _setup_temp_free($0,$250,$252);
     $253 = HEAP32[$127>>2]|0;
     _setup_temp_free($0,$$19631000,$253);
     HEAP32[$249>>2] = 0;
    }
    _compute_accelerated_huffman($103);
    $254 = (_get_bits($0,4)|0);
    $255 = $254&255;
    $256 = (((($102) + (($$18921232*2096)|0)|0)) + 21|0);
    HEAP8[$256>>0] = $255;
    $257 = $254 & 255;
    $258 = ($257>>>0)>(2);
    if ($258) {
     label = 114;
     break;
    }
    $259 = ($257|0)==(0);
    if (!($259)) {
     $260 = (_get_bits($0,32)|0);
     $261 = (+_float32_unpack($260));
     $262 = (((($102) + (($$18921232*2096)|0)|0)) + 12|0);
     HEAPF32[$262>>2] = $261;
     $263 = (_get_bits($0,32)|0);
     $264 = (+_float32_unpack($263));
     $265 = (((($102) + (($$18921232*2096)|0)|0)) + 16|0);
     HEAPF32[$265>>2] = $264;
     $266 = (_get_bits($0,4)|0);
     $267 = (($266) + 1)|0;
     $268 = $267&255;
     $269 = (((($102) + (($$18921232*2096)|0)|0)) + 20|0);
     HEAP8[$269>>0] = $268;
     $270 = (_get_bits($0,1)|0);
     $271 = $270&255;
     $272 = (((($102) + (($$18921232*2096)|0)|0)) + 22|0);
     HEAP8[$272>>0] = $271;
     $273 = HEAP8[$256>>0]|0;
     $274 = ($273<<24>>24)==(1);
     $275 = HEAP32[$127>>2]|0;
     $276 = HEAP32[$103>>2]|0;
     if ($274) {
      $277 = (_lookup1_values($275,$276)|0);
      $$sink = $277;
     } else {
      $278 = Math_imul($276, $275)|0;
      $$sink = $278;
     }
     $279 = (((($102) + (($$18921232*2096)|0)|0)) + 24|0);
     HEAP32[$279>>2] = $$sink;
     $280 = ($$sink|0)==(0);
     if ($280) {
      label = 120;
      break;
     }
     $281 = $$sink << 1;
     $282 = (_setup_temp_malloc($0,$281)|0);
     $283 = ($282|0)==(0|0);
     if ($283) {
      label = 123;
      break;
     }
     $284 = HEAP32[$279>>2]|0;
     $285 = ($284|0)>(0);
     if ($285) {
      $$29041220 = 0;
      while(1) {
       $286 = HEAP8[$269>>0]|0;
       $287 = $286&255;
       $288 = (_get_bits($0,$287)|0);
       $289 = ($288|0)==(-1);
       if ($289) {
        label = 125;
        break L102;
       }
       $292 = $288&65535;
       $293 = (($282) + ($$29041220<<1)|0);
       HEAP16[$293>>1] = $292;
       $294 = (($$29041220) + 1)|0;
       $295 = HEAP32[$279>>2]|0;
       $296 = ($294|0)<($295|0);
       if ($296) {
        $$29041220 = $294;
       } else {
        $$lcssa1073 = $295;
        break;
       }
      }
     } else {
      $$lcssa1073 = $284;
     }
     $297 = HEAP8[$256>>0]|0;
     $298 = ($297<<24>>24)==(1);
     do {
      if ($298) {
       $299 = HEAP8[$133>>0]|0;
       $300 = ($299<<24>>24)!=(0);
       if ($300) {
        $301 = HEAP32[$198>>2]|0;
        $302 = ($301|0)==(0);
        if ($302) {
         break;
        } else {
         $$sink986 = $301;
        }
       } else {
        $303 = HEAP32[$127>>2]|0;
        $$sink986 = $303;
       }
       $304 = $$sink986 << 2;
       $305 = HEAP32[$103>>2]|0;
       $306 = Math_imul($304, $305)|0;
       $307 = (_setup_malloc($0,$306)|0);
       $308 = (((($102) + (($$18921232*2096)|0)|0)) + 28|0);
       HEAP32[$308>>2] = $307;
       $309 = ($307|0)==(0|0);
       if ($309) {
        label = 132;
        break L102;
       }
       $$sink25 = $300 ? $198 : $127;
       $312 = HEAP32[$$sink25>>2]|0;
       $313 = ($312|0)>(0);
       if ($313) {
        $314 = (((($102) + (($$18921232*2096)|0)|0)) + 2088|0);
        $315 = HEAP32[$103>>2]|0;
        $$09701227 = 0.0;$$39051228 = 0;
        while(1) {
         if ($300) {
          $316 = HEAP32[$314>>2]|0;
          $317 = (($316) + ($$39051228<<2)|0);
          $318 = HEAP32[$317>>2]|0;
          $322 = $318;
         } else {
          $322 = $$39051228;
         }
         $319 = Math_imul($315, $$39051228)|0;
         $$0920$ph = 0;$$0974$ph = 1;$$1971$ph = $$09701227;
         L193: while(1) {
          $$0920 = $$0920$ph;$$1971 = $$1971$ph;
          while(1) {
           $320 = ($$0920|0)<($315|0);
           if (!($320)) {
            break L193;
           }
           $321 = (($322>>>0) / ($$0974$ph>>>0))&-1;
           $323 = HEAP32[$279>>2]|0;
           $324 = (($321>>>0) % ($323>>>0))&-1;
           $325 = (($282) + ($324<<1)|0);
           $326 = HEAP16[$325>>1]|0;
           $327 = (+($326&65535));
           $328 = +HEAPF32[$265>>2];
           $329 = $327 * $328;
           $330 = +HEAPF32[$262>>2];
           $331 = $329 + $330;
           $332 = $$1971 + $331;
           $333 = HEAP32[$308>>2]|0;
           $334 = (($319) + ($$0920))|0;
           $335 = (($333) + ($334<<2)|0);
           HEAPF32[$335>>2] = $332;
           $336 = HEAP8[$272>>0]|0;
           $337 = ($336<<24>>24)==(0);
           $$1971$ = $337 ? $$1971 : $332;
           $338 = (($$0920) + 1)|0;
           $339 = ($338|0)<($315|0);
           if ($339) {
            break;
           } else {
            $$0920 = $338;$$1971 = $$1971$;
           }
          }
          $340 = (4294967295 / ($323>>>0))&-1;
          $341 = ($$0974$ph>>>0)>($340>>>0);
          if ($341) {
           label = 143;
           break L102;
          }
          $342 = Math_imul($323, $$0974$ph)|0;
          $$0920$ph = $338;$$0974$ph = $342;$$1971$ph = $$1971$;
         }
         $344 = (($$39051228) + 1)|0;
         $345 = ($344|0)<($312|0);
         if ($345) {
          $$09701227 = $$1971;$$39051228 = $344;
         } else {
          break;
         }
        }
       }
       HEAP8[$256>>0] = 2;
      } else {
       $346 = $$lcssa1073 << 2;
       $347 = (_setup_malloc($0,$346)|0);
       $348 = (((($102) + (($$18921232*2096)|0)|0)) + 28|0);
       HEAP32[$348>>2] = $347;
       $349 = ($347|0)==(0|0);
       $350 = HEAP32[$279>>2]|0;
       if ($349) {
        label = 150;
        break L102;
       }
       $351 = ($350|0)>(0);
       if (!($351)) {
        break;
       }
       $352 = HEAP32[$348>>2]|0;
       $353 = HEAP8[$272>>0]|0;
       $354 = ($353<<24>>24)==(0);
       $355 = HEAP32[$279>>2]|0;
       $$09771224 = 0.0;$$49061225 = 0;
       while(1) {
        $356 = (($282) + ($$49061225<<1)|0);
        $357 = HEAP16[$356>>1]|0;
        $358 = (+($357&65535));
        $359 = +HEAPF32[$265>>2];
        $360 = $358 * $359;
        $361 = +HEAPF32[$262>>2];
        $362 = $360 + $361;
        $363 = $$09771224 + $362;
        $364 = (($352) + ($$49061225<<2)|0);
        HEAPF32[$364>>2] = $363;
        $$0977$ = $354 ? $$09771224 : $363;
        $365 = (($$49061225) + 1)|0;
        $366 = ($365|0)<($355|0);
        if ($366) {
         $$09771224 = $$0977$;$$49061225 = $365;
        } else {
         break;
        }
       }
      }
     } while(0);
     $368 = HEAP32[$279>>2]|0;
     $369 = $368 << 1;
     _setup_temp_free($0,$282,$369);
    }
    $370 = (($$18921232) + 1)|0;
    $371 = HEAP32[$91>>2]|0;
    $372 = ($370|0)<($371|0);
    if ($372) {
     $$18921232 = $370;
    } else {
     break L100;
    }
   }
   switch (label|0) {
    case 52: {
     _error($0,20);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 54: {
     _error($0,20);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 56: {
     _error($0,20);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 60: {
     _error($0,20);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 65: {
     _error($0,3);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 71: {
     _error($0,20);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 76: {
     _error($0,20);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 83: {
     _error($0,3);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 91: {
     _error($0,3);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 94: {
     _error($0,3);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 96: {
     _error($0,3);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 98: {
     _error($0,3);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 102: {
     $228 = HEAP8[$133>>0]|0;
     $229 = ($228<<24>>24)==(0);
     if (!($229)) {
      _setup_temp_free($0,$230,0);
     }
     _error($0,20);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 107: {
     _error($0,3);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 109: {
     _error($0,3);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 114: {
     _error($0,20);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 120: {
     _error($0,20);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 123: {
     _error($0,3);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 125: {
     $290 = HEAP32[$279>>2]|0;
     $291 = $290 << 1;
     _setup_temp_free($0,$282,$291);
     _error($0,20);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 132: {
     $310 = HEAP32[$279>>2]|0;
     $311 = $310 << 1;
     _setup_temp_free($0,$282,$311);
     _error($0,3);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 143: {
     $343 = $323 << 1;
     _setup_temp_free($0,$282,$343);
     _error($0,20);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
    case 150: {
     $367 = $350 << 1;
     _setup_temp_free($0,$282,$367);
     _error($0,3);
     $$34 = 0;
     STACKTOP = sp;return ($$34|0);
     break;
    }
   }
  }
 } while(0);
 $373 = (_get_bits($0,6)|0);
 $374 = (($373) + 1)|0;
 $375 = $374 & 255;
 $376 = ($375|0)==(0);
 L258: do {
  if (!($376)) {
   $$28931205 = 0;
   while(1) {
    $379 = (_get_bits($0,16)|0);
    $380 = ($379|0)==(0);
    $378 = (($$28931205) + 1)|0;
    if (!($380)) {
     break;
    }
    $377 = ($378|0)<($375|0);
    if ($377) {
     $$28931205 = $378;
    } else {
     break L258;
    }
   }
   _error($0,20);
   $$34 = 0;
   STACKTOP = sp;return ($$34|0);
  }
 } while(0);
 $381 = (_get_bits($0,6)|0);
 $382 = (($381) + 1)|0;
 $383 = ((($0)) + 128|0);
 HEAP32[$383>>2] = $382;
 $384 = ($382*1596)|0;
 $385 = (_setup_malloc($0,$384)|0);
 $386 = ((($0)) + 260|0);
 HEAP32[$386>>2] = $385;
 $387 = ($385|0)==(0|0);
 if ($387) {
  _error($0,3);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $388 = HEAP32[$383>>2]|0;
 $389 = ($388|0)>(0);
 do {
  if ($389) {
   $$09291199 = 0;$$38941200 = 0;
   L271: while(1) {
    $390 = (_get_bits($0,16)|0);
    $391 = $390&65535;
    $392 = (((($0)) + 132|0) + ($$38941200<<1)|0);
    HEAP16[$392>>1] = $391;
    $393 = $390 & 65535;
    $394 = ($393>>>0)>(1);
    if ($394) {
     label = 162;
     break;
    }
    $395 = ($393|0)==(0);
    if ($395) {
     label = 164;
     break;
    }
    $426 = HEAP32[$386>>2]|0;
    $427 = (_get_bits($0,5)|0);
    $428 = $427&255;
    $429 = (($426) + (($$38941200*1596)|0)|0);
    HEAP8[$429>>0] = $428;
    $430 = $427 & 255;
    $431 = ($430|0)==(0);
    if (!($431)) {
     $$09641169 = -1;$$69081170 = 0;
     while(1) {
      $432 = (_get_bits($0,4)|0);
      $433 = $432&255;
      $434 = ((((($426) + (($$38941200*1596)|0)|0)) + 1|0) + ($$69081170)|0);
      HEAP8[$434>>0] = $433;
      $435 = $432 & 255;
      $436 = ($435|0)>($$09641169|0);
      $$$0964 = $436 ? $435 : $$09641169;
      $437 = (($$69081170) + 1)|0;
      $438 = HEAP8[$429>>0]|0;
      $439 = $438&255;
      $440 = ($437|0)<($439|0);
      if ($440) {
       $$09641169 = $$$0964;$$69081170 = $437;
      } else {
       $$79091177 = 0;
       break;
      }
     }
     while(1) {
      $441 = (_get_bits($0,3)|0);
      $442 = (($441) + 1)|0;
      $443 = $442&255;
      $444 = ((((($426) + (($$38941200*1596)|0)|0)) + 33|0) + ($$79091177)|0);
      HEAP8[$444>>0] = $443;
      $445 = (_get_bits($0,2)|0);
      $446 = $445&255;
      $447 = ((((($426) + (($$38941200*1596)|0)|0)) + 49|0) + ($$79091177)|0);
      HEAP8[$447>>0] = $446;
      $448 = ($446<<24>>24)==(0);
      if ($448) {
       $$19211174 = 0;
       label = 175;
      } else {
       $450 = (_get_bits($0,8)|0);
       $451 = $450&255;
       $452 = ((((($426) + (($$38941200*1596)|0)|0)) + 65|0) + ($$79091177)|0);
       HEAP8[$452>>0] = $451;
       $453 = $450 & 255;
       $454 = HEAP32[$91>>2]|0;
       $455 = ($453|0)<($454|0);
       if (!($455)) {
        label = 173;
        break L271;
       }
       $$pr1300 = HEAP8[$447>>0]|0;
       $449 = ($$pr1300<<24>>24)==(31);
       if (!($449)) {
        $$19211174 = 0;
        label = 175;
       }
      }
      if ((label|0) == 175) {
       while(1) {
        label = 0;
        $461 = (_get_bits($0,8)|0);
        $462 = (($461) + 65535)|0;
        $463 = $462&65535;
        $464 = (((((($426) + (($$38941200*1596)|0)|0)) + 82|0) + ($$79091177<<4)|0) + ($$19211174<<1)|0);
        HEAP16[$464>>1] = $463;
        $sext = $462 << 16;
        $465 = $sext >> 16;
        $466 = HEAP32[$91>>2]|0;
        $467 = ($465|0)<($466|0);
        $460 = (($$19211174) + 1)|0;
        if (!($467)) {
         label = 176;
         break L271;
        }
        $456 = HEAP8[$447>>0]|0;
        $457 = $456&255;
        $458 = 1 << $457;
        $459 = ($460|0)<($458|0);
        if ($459) {
         $$19211174 = $460;
         label = 175;
        } else {
         break;
        }
       }
      }
      $468 = (($$79091177) + 1)|0;
      $469 = ($$79091177|0)<($$$0964|0);
      if ($469) {
       $$79091177 = $468;
      } else {
       break;
      }
     }
    }
    $470 = (_get_bits($0,2)|0);
    $471 = (($470) + 1)|0;
    $472 = $471&255;
    $473 = (((($426) + (($$38941200*1596)|0)|0)) + 1588|0);
    HEAP8[$473>>0] = $472;
    $474 = (_get_bits($0,4)|0);
    $475 = $474&255;
    $476 = (((($426) + (($$38941200*1596)|0)|0)) + 1589|0);
    HEAP8[$476>>0] = $475;
    $477 = (((($426) + (($$38941200*1596)|0)|0)) + 338|0);
    HEAP16[$477>>1] = 0;
    $478 = $474 & 255;
    $479 = 1 << $478;
    $480 = $479&65535;
    $481 = (((($426) + (($$38941200*1596)|0)|0)) + 340|0);
    HEAP16[$481>>1] = $480;
    $482 = (((($426) + (($$38941200*1596)|0)|0)) + 1592|0);
    HEAP32[$482>>2] = 2;
    $483 = HEAP8[$429>>0]|0;
    $484 = ($483<<24>>24)==(0);
    if ($484) {
     $$99111188 = 0;
     label = 183;
    } else {
     $$89101185 = 0;
     while(1) {
      $486 = ((((($426) + (($$38941200*1596)|0)|0)) + 1|0) + ($$89101185)|0);
      $487 = HEAP8[$486>>0]|0;
      $488 = $487&255;
      $489 = ((((($426) + (($$38941200*1596)|0)|0)) + 33|0) + ($488)|0);
      $490 = HEAP8[$489>>0]|0;
      $491 = ($490<<24>>24)==(0);
      if (!($491)) {
       $$29221181 = 0;
       while(1) {
        $492 = HEAP8[$476>>0]|0;
        $493 = $492&255;
        $494 = (_get_bits($0,$493)|0);
        $495 = $494&65535;
        $496 = HEAP32[$482>>2]|0;
        $497 = ((((($426) + (($$38941200*1596)|0)|0)) + 338|0) + ($496<<1)|0);
        HEAP16[$497>>1] = $495;
        $498 = HEAP32[$482>>2]|0;
        $499 = (($498) + 1)|0;
        HEAP32[$482>>2] = $499;
        $500 = (($$29221181) + 1)|0;
        $501 = HEAP8[$489>>0]|0;
        $502 = $501&255;
        $503 = ($500|0)<($502|0);
        if ($503) {
         $$29221181 = $500;
        } else {
         break;
        }
       }
      }
      $504 = (($$89101185) + 1)|0;
      $505 = HEAP8[$429>>0]|0;
      $506 = $505&255;
      $507 = ($504|0)<($506|0);
      if ($507) {
       $$89101185 = $504;
      } else {
       break;
      }
     }
     $$pr1301 = HEAP32[$482>>2]|0;
     $485 = ($$pr1301|0)>(0);
     if ($485) {
      $$99111188 = 0;
      label = 183;
     } else {
      $$lcssa1060 = $$pr1301;
     }
    }
    if ((label|0) == 183) {
     while(1) {
      label = 0;
      $508 = ((((($426) + (($$38941200*1596)|0)|0)) + 338|0) + ($$99111188<<1)|0);
      $509 = HEAP16[$508>>1]|0;
      $510 = (($2) + ($$99111188<<2)|0);
      HEAP16[$510>>1] = $509;
      $511 = $$99111188&65535;
      $512 = (((($2) + ($$99111188<<2)|0)) + 2|0);
      HEAP16[$512>>1] = $511;
      $513 = (($$99111188) + 1)|0;
      $514 = HEAP32[$482>>2]|0;
      $515 = ($513|0)<($514|0);
      if ($515) {
       $$99111188 = $513;
       label = 183;
      } else {
       $$lcssa1060 = $514;
       break;
      }
     }
    }
    _qsort($2,$$lcssa1060,4,1);
    $516 = HEAP32[$482>>2]|0;
    $517 = ($516|0)>(0);
    do {
     if ($517) {
      $$109121192 = 0;
      while(1) {
       $520 = (((($2) + ($$109121192<<2)|0)) + 2|0);
       $521 = HEAP16[$520>>1]|0;
       $522 = $521&255;
       $523 = ((((($426) + (($$38941200*1596)|0)|0)) + 838|0) + ($$109121192)|0);
       HEAP8[$523>>0] = $522;
       $524 = (($$109121192) + 1)|0;
       $519 = HEAP32[$482>>2]|0;
       $525 = ($524|0)<($519|0);
       if ($525) {
        $$109121192 = $524;
       } else {
        break;
       }
      }
      $518 = ($519|0)>(2);
      if ($518) {
       $$119131195 = 2;
      } else {
       $$lcssa1061 = $519;
       break;
      }
      while(1) {
       _neighbors($477,$$119131195,$3,$4);
       $526 = HEAP32[$3>>2]|0;
       $527 = $526&255;
       $528 = ((((($426) + (($$38941200*1596)|0)|0)) + 1088|0) + ($$119131195<<1)|0);
       HEAP8[$528>>0] = $527;
       $529 = HEAP32[$4>>2]|0;
       $530 = $529&255;
       $531 = ((((((($426) + (($$38941200*1596)|0)|0)) + 1088|0) + ($$119131195<<1)|0)) + 1|0);
       HEAP8[$531>>0] = $530;
       $532 = (($$119131195) + 1)|0;
       $533 = HEAP32[$482>>2]|0;
       $534 = ($532|0)<($533|0);
       if ($534) {
        $$119131195 = $532;
       } else {
        $$lcssa1061 = $533;
        break;
       }
      }
     } else {
      $$lcssa1061 = $516;
     }
    } while(0);
    $535 = ($$lcssa1061|0)>($$09291199|0);
    $$$0929 = $535 ? $$lcssa1061 : $$09291199;
    $536 = (($$38941200) + 1)|0;
    $537 = HEAP32[$383>>2]|0;
    $538 = ($536|0)<($537|0);
    if ($538) {
     $$09291199 = $$$0929;$$38941200 = $536;
    } else {
     label = 190;
     break;
    }
   }
   if ((label|0) == 162) {
    _error($0,20);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
   else if ((label|0) == 164) {
    $396 = HEAP32[$386>>2]|0;
    $397 = (_get_bits($0,8)|0);
    $398 = $397&255;
    $399 = (($396) + (($$38941200*1596)|0)|0);
    HEAP8[$399>>0] = $398;
    $400 = (_get_bits($0,16)|0);
    $401 = $400&65535;
    $402 = (((($396) + (($$38941200*1596)|0)|0)) + 2|0);
    HEAP16[$402>>1] = $401;
    $403 = (_get_bits($0,16)|0);
    $404 = $403&65535;
    $405 = (((($396) + (($$38941200*1596)|0)|0)) + 4|0);
    HEAP16[$405>>1] = $404;
    $406 = (_get_bits($0,6)|0);
    $407 = $406&255;
    $408 = (((($396) + (($$38941200*1596)|0)|0)) + 6|0);
    HEAP8[$408>>0] = $407;
    $409 = (_get_bits($0,8)|0);
    $410 = $409&255;
    $411 = (((($396) + (($$38941200*1596)|0)|0)) + 7|0);
    HEAP8[$411>>0] = $410;
    $412 = (_get_bits($0,4)|0);
    $413 = (($412) + 1)|0;
    $414 = $413&255;
    $415 = (((($396) + (($$38941200*1596)|0)|0)) + 8|0);
    HEAP8[$415>>0] = $414;
    $416 = $413 & 255;
    $417 = ($416|0)==(0);
    if (!($417)) {
     $418 = (((($396) + (($$38941200*1596)|0)|0)) + 9|0);
     $$59071118 = 0;
     while(1) {
      $419 = (_get_bits($0,8)|0);
      $420 = $419&255;
      $421 = (($418) + ($$59071118)|0);
      HEAP8[$421>>0] = $420;
      $422 = (($$59071118) + 1)|0;
      $423 = HEAP8[$415>>0]|0;
      $424 = $423&255;
      $425 = ($422|0)<($424|0);
      if ($425) {
       $$59071118 = $422;
      } else {
       break;
      }
     }
    }
    _error($0,4);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
   else if ((label|0) == 173) {
    _error($0,20);
   }
   else if ((label|0) == 176) {
    _error($0,20);
   }
   else if ((label|0) == 190) {
    $phitmp1297 = $$$0929 << 1;
    $$0929$lcssa = $phitmp1297;
    break;
   }
   $$34 = 0;
   STACKTOP = sp;return ($$34|0);
  } else {
   $$0929$lcssa = 0;
  }
 } while(0);
 $539 = (_get_bits($0,6)|0);
 $540 = (($539) + 1)|0;
 $541 = ((($0)) + 264|0);
 HEAP32[$541>>2] = $540;
 $542 = ($540*24)|0;
 $543 = (_setup_malloc($0,$542)|0);
 $544 = ((($0)) + 396|0);
 HEAP32[$544>>2] = $543;
 $545 = ($543|0)==(0|0);
 if ($545) {
  _error($0,3);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $546 = HEAP32[$541>>2]|0;
 $547 = ($546*24)|0;
 _memset(($543|0),0,($547|0))|0;
 $548 = HEAP32[$541>>2]|0;
 $549 = ($548|0)>(0);
 L328: do {
  if ($549) {
   $$48951165 = 0;
   L330: while(1) {
    $550 = HEAP32[$544>>2]|0;
    $551 = (_get_bits($0,16)|0);
    $552 = $551&65535;
    $553 = (((($0)) + 268|0) + ($$48951165<<1)|0);
    HEAP16[$553>>1] = $552;
    $554 = $551 & 65535;
    $555 = ($554>>>0)>(2);
    if ($555) {
     label = 196;
     break;
    }
    $556 = (_get_bits($0,24)|0);
    $557 = (($550) + (($$48951165*24)|0)|0);
    HEAP32[$557>>2] = $556;
    $558 = (_get_bits($0,24)|0);
    $559 = (((($550) + (($$48951165*24)|0)|0)) + 4|0);
    HEAP32[$559>>2] = $558;
    $560 = HEAP32[$557>>2]|0;
    $561 = ($558>>>0)<($560>>>0);
    if ($561) {
     label = 198;
     break;
    }
    $562 = (_get_bits($0,24)|0);
    $563 = (($562) + 1)|0;
    $564 = (((($550) + (($$48951165*24)|0)|0)) + 8|0);
    HEAP32[$564>>2] = $563;
    $565 = (_get_bits($0,6)|0);
    $566 = (($565) + 1)|0;
    $567 = $566&255;
    $568 = (((($550) + (($$48951165*24)|0)|0)) + 12|0);
    HEAP8[$568>>0] = $567;
    $569 = (_get_bits($0,8)|0);
    $570 = $569&255;
    $571 = (((($550) + (($$48951165*24)|0)|0)) + 13|0);
    HEAP8[$571>>0] = $570;
    $572 = $569 & 255;
    $573 = HEAP32[$91>>2]|0;
    $574 = ($572|0)<($573|0);
    if (!($574)) {
     label = 201;
     break;
    }
    $575 = HEAP8[$568>>0]|0;
    $576 = $575&255;
    $577 = ($575<<24>>24)==(0);
    if ($577) {
     $$lcssa = $576;
    } else {
     $$129141148 = 0;
     while(1) {
      $578 = (_get_bits($0,3)|0);
      $579 = (_get_bits($0,1)|0);
      $580 = ($579|0)==(0);
      if ($580) {
       $$0957 = 0;
      } else {
       $581 = (_get_bits($0,5)|0);
       $$0957 = $581;
      }
      $582 = $$0957 << 3;
      $583 = (($582) + ($578))|0;
      $584 = $583&255;
      $585 = (($2) + ($$129141148)|0);
      HEAP8[$585>>0] = $584;
      $586 = (($$129141148) + 1)|0;
      $587 = HEAP8[$568>>0]|0;
      $588 = $587&255;
      $589 = ($586|0)<($588|0);
      if ($589) {
       $$129141148 = $586;
      } else {
       $$lcssa = $588;
       break;
      }
     }
    }
    $590 = $$lcssa << 4;
    $591 = (_setup_malloc($0,$590)|0);
    $592 = (((($550) + (($$48951165*24)|0)|0)) + 20|0);
    HEAP32[$592>>2] = $591;
    $593 = ($591|0)==(0|0);
    if ($593) {
     label = 207;
     break;
    }
    $594 = HEAP8[$568>>0]|0;
    $595 = ($594<<24>>24)==(0);
    if (!($595)) {
     $$139151153 = 0;
     while(1) {
      $596 = (($2) + ($$139151153)|0);
      $597 = HEAP8[$596>>0]|0;
      $598 = $597&255;
      $$39231152 = 0;
      while(1) {
       $599 = 1 << $$39231152;
       $600 = $598 & $599;
       $601 = ($600|0)==(0);
       if ($601) {
        $612 = HEAP32[$592>>2]|0;
        $613 = ((($612) + ($$139151153<<4)|0) + ($$39231152<<1)|0);
        HEAP16[$613>>1] = -1;
       } else {
        $602 = (_get_bits($0,8)|0);
        $603 = $602&65535;
        $604 = HEAP32[$592>>2]|0;
        $605 = ((($604) + ($$139151153<<4)|0) + ($$39231152<<1)|0);
        HEAP16[$605>>1] = $603;
        $606 = HEAP32[$592>>2]|0;
        $607 = ((($606) + ($$139151153<<4)|0) + ($$39231152<<1)|0);
        $608 = HEAP16[$607>>1]|0;
        $609 = $608 << 16 >> 16;
        $610 = HEAP32[$91>>2]|0;
        $611 = ($609|0)<($610|0);
        if (!($611)) {
         label = 211;
         break L330;
        }
       }
       $614 = (($$39231152) + 1)|0;
       $615 = ($614|0)<(8);
       if ($615) {
        $$39231152 = $614;
       } else {
        break;
       }
      }
      $616 = (($$139151153) + 1)|0;
      $617 = HEAP8[$568>>0]|0;
      $618 = $617&255;
      $619 = ($616|0)<($618|0);
      if ($619) {
       $$139151153 = $616;
      } else {
       break;
      }
     }
    }
    $620 = HEAP32[$94>>2]|0;
    $621 = HEAP8[$571>>0]|0;
    $622 = $621&255;
    $623 = (((($620) + (($622*2096)|0)|0)) + 4|0);
    $624 = HEAP32[$623>>2]|0;
    $625 = $624 << 2;
    $626 = (_setup_malloc($0,$625)|0);
    $627 = (((($550) + (($$48951165*24)|0)|0)) + 16|0);
    HEAP32[$627>>2] = $626;
    $628 = ($626|0)==(0|0);
    if ($628) {
     label = 216;
     break;
    }
    $629 = HEAP32[$94>>2]|0;
    $630 = HEAP8[$571>>0]|0;
    $631 = $630&255;
    $632 = (((($629) + (($631*2096)|0)|0)) + 4|0);
    $633 = HEAP32[$632>>2]|0;
    $634 = $633 << 2;
    _memset(($626|0),0,($634|0))|0;
    $635 = HEAP32[$94>>2]|0;
    $636 = HEAP8[$571>>0]|0;
    $637 = $636&255;
    $638 = (((($635) + (($637*2096)|0)|0)) + 4|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = ($639|0)>(0);
    if ($640) {
     $$149161160 = 0;$642 = $635;$643 = $637;
     while(1) {
      $641 = (($642) + (($643*2096)|0)|0);
      $644 = HEAP32[$641>>2]|0;
      $645 = (_setup_malloc($0,$644)|0);
      $646 = HEAP32[$627>>2]|0;
      $647 = (($646) + ($$149161160<<2)|0);
      HEAP32[$647>>2] = $645;
      $648 = HEAP32[$627>>2]|0;
      $649 = (($648) + ($$149161160<<2)|0);
      $650 = HEAP32[$649>>2]|0;
      $651 = ($650|0)==(0|0);
      if ($651) {
       label = 221;
       break L330;
      }
      $652 = ($644|0)>(0);
      if ($652) {
       $$09501156 = $$149161160;$$49241157$in = $644;
       while(1) {
        $$49241157 = (($$49241157$in) + -1)|0;
        $653 = HEAP8[$568>>0]|0;
        $654 = $653&255;
        $655 = (($$09501156|0) % ($654|0))&-1;
        $656 = $655&255;
        $657 = HEAP32[$627>>2]|0;
        $658 = (($657) + ($$149161160<<2)|0);
        $659 = HEAP32[$658>>2]|0;
        $660 = (($659) + ($$49241157)|0);
        HEAP8[$660>>0] = $656;
        $661 = HEAP8[$568>>0]|0;
        $662 = $661&255;
        $663 = (($$09501156|0) / ($662|0))&-1;
        $664 = ($$49241157$in|0)>(1);
        if ($664) {
         $$09501156 = $663;$$49241157$in = $$49241157;
        } else {
         break;
        }
       }
      }
      $665 = (($$149161160) + 1)|0;
      $666 = HEAP32[$94>>2]|0;
      $667 = HEAP8[$571>>0]|0;
      $668 = $667&255;
      $669 = (((($666) + (($668*2096)|0)|0)) + 4|0);
      $670 = HEAP32[$669>>2]|0;
      $671 = ($665|0)<($670|0);
      if ($671) {
       $$149161160 = $665;$642 = $666;$643 = $668;
      } else {
       break;
      }
     }
    }
    $672 = (($$48951165) + 1)|0;
    $673 = HEAP32[$541>>2]|0;
    $674 = ($672|0)<($673|0);
    if ($674) {
     $$48951165 = $672;
    } else {
     break L328;
    }
   }
   if ((label|0) == 196) {
    _error($0,20);
   }
   else if ((label|0) == 198) {
    _error($0,20);
   }
   else if ((label|0) == 201) {
    _error($0,20);
   }
   else if ((label|0) == 207) {
    _error($0,3);
   }
   else if ((label|0) == 211) {
    _error($0,20);
   }
   else if ((label|0) == 216) {
    _error($0,3);
   }
   else if ((label|0) == 221) {
    _error($0,3);
   }
   $$34 = 0;
   STACKTOP = sp;return ($$34|0);
  }
 } while(0);
 $675 = (_get_bits($0,6)|0);
 $676 = (($675) + 1)|0;
 $677 = ((($0)) + 400|0);
 HEAP32[$677>>2] = $676;
 $678 = ($676*40)|0;
 $679 = (_setup_malloc($0,$678)|0);
 $680 = ((($0)) + 404|0);
 HEAP32[$680>>2] = $679;
 $681 = ($679|0)==(0|0);
 if ($681) {
  _error($0,3);
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $682 = HEAP32[$677>>2]|0;
 $683 = ($682*40)|0;
 _memset(($679|0),0,($683|0))|0;
 $684 = HEAP32[$677>>2]|0;
 $685 = ($684|0)>(0);
 L379: do {
  if ($685) {
   $$58961143 = 0;
   L380: while(1) {
    $686 = HEAP32[$680>>2]|0;
    $687 = (($686) + (($$58961143*40)|0)|0);
    $688 = (_get_bits($0,16)|0);
    $689 = ($688|0)==(0);
    if (!($689)) {
     label = 229;
     break;
    }
    $690 = HEAP32[$32>>2]|0;
    $691 = ($690*3)|0;
    $692 = (_setup_malloc($0,$691)|0);
    $693 = (((($686) + (($$58961143*40)|0)|0)) + 4|0);
    HEAP32[$693>>2] = $692;
    $694 = ($692|0)==(0|0);
    if ($694) {
     label = 231;
     break;
    }
    $695 = (_get_bits($0,1)|0);
    $696 = ($695|0)==(0);
    if ($696) {
     $$sink26 = 1;
    } else {
     $697 = (_get_bits($0,4)|0);
     $698 = (($697) + 1)|0;
     $699 = $698&255;
     $$sink26 = $699;
    }
    $700 = (((($686) + (($$58961143*40)|0)|0)) + 8|0);
    HEAP8[$700>>0] = $$sink26;
    $701 = (_get_bits($0,1)|0);
    $702 = ($701|0)==(0);
    do {
     if ($702) {
      HEAP16[$687>>1] = 0;
     } else {
      $703 = (_get_bits($0,8)|0);
      $704 = (($703) + 1)|0;
      $705 = $704&65535;
      HEAP16[$687>>1] = $705;
      $706 = $704 & 65535;
      $707 = ($706|0)==(0);
      if ($707) {
       break;
      } else {
       $$59251132 = 0;
      }
      while(1) {
       $712 = HEAP32[$32>>2]|0;
       $713 = (($712) + -1)|0;
       $714 = (_ilog($713)|0);
       $715 = (_get_bits($0,$714)|0);
       $716 = $715&255;
       $717 = HEAP32[$693>>2]|0;
       $718 = (($717) + (($$59251132*3)|0)|0);
       HEAP8[$718>>0] = $716;
       $719 = HEAP32[$32>>2]|0;
       $720 = (($719) + -1)|0;
       $721 = (_ilog($720)|0);
       $722 = (_get_bits($0,$721)|0);
       $723 = $722&255;
       $724 = HEAP32[$693>>2]|0;
       $725 = (((($724) + (($$59251132*3)|0)|0)) + 1|0);
       HEAP8[$725>>0] = $723;
       $726 = HEAP32[$693>>2]|0;
       $727 = (($726) + (($$59251132*3)|0)|0);
       $728 = HEAP8[$727>>0]|0;
       $729 = $728&255;
       $730 = HEAP32[$32>>2]|0;
       $731 = ($729|0)<($730|0);
       if (!($731)) {
        label = 238;
        break L380;
       }
       $732 = (((($726) + (($$59251132*3)|0)|0)) + 1|0);
       $733 = HEAP8[$732>>0]|0;
       $734 = $733&255;
       $735 = ($734|0)<($730|0);
       if (!($735)) {
        label = 240;
        break L380;
       }
       $736 = ($728<<24>>24)==($733<<24>>24);
       $711 = (($$59251132) + 1)|0;
       if ($736) {
        label = 242;
        break L380;
       }
       $708 = HEAP16[$687>>1]|0;
       $709 = $708&65535;
       $710 = ($711|0)<($709|0);
       if ($710) {
        $$59251132 = $711;
       } else {
        break;
       }
      }
     }
    } while(0);
    $737 = (_get_bits($0,2)|0);
    $738 = ($737|0)==(0);
    if (!($738)) {
     label = 245;
     break;
    }
    $739 = HEAP8[$700>>0]|0;
    $740 = ($739&255)>(1);
    $741 = HEAP32[$32>>2]|0;
    $742 = ($741|0)>(0);
    do {
     if ($740) {
      if ($742) {
       $$159171137 = 0;
      } else {
       break;
      }
      while(1) {
       $750 = (_get_bits($0,4)|0);
       $751 = $750&255;
       $752 = HEAP32[$693>>2]|0;
       $753 = (((($752) + (($$159171137*3)|0)|0)) + 2|0);
       HEAP8[$753>>0] = $751;
       $754 = HEAP32[$693>>2]|0;
       $755 = (((($754) + (($$159171137*3)|0)|0)) + 2|0);
       $756 = HEAP8[$755>>0]|0;
       $757 = HEAP8[$700>>0]|0;
       $758 = ($756&255)<($757&255);
       $747 = (($$159171137) + 1)|0;
       if (!($758)) {
        label = 253;
        break L380;
       }
       $745 = HEAP32[$32>>2]|0;
       $746 = ($747|0)<($745|0);
       if ($746) {
        $$159171137 = $747;
       } else {
        break;
       }
      }
     } else {
      if (!($742)) {
       break;
      }
      $743 = HEAP32[$693>>2]|0;
      $744 = HEAP32[$32>>2]|0;
      $$169181135 = 0;
      while(1) {
       $759 = (((($743) + (($$169181135*3)|0)|0)) + 2|0);
       HEAP8[$759>>0] = 0;
       $760 = (($$169181135) + 1)|0;
       $761 = ($760|0)<($744|0);
       if ($761) {
        $$169181135 = $760;
       } else {
        break;
       }
      }
     }
    } while(0);
    $748 = HEAP8[$700>>0]|0;
    $749 = ($748<<24>>24)==(0);
    if (!($749)) {
     $$179191139 = 0;
     while(1) {
      (_get_bits($0,8)|0);
      $766 = (_get_bits($0,8)|0);
      $767 = $766&255;
      $768 = ((((($686) + (($$58961143*40)|0)|0)) + 9|0) + ($$179191139)|0);
      HEAP8[$768>>0] = $767;
      $769 = (_get_bits($0,8)|0);
      $770 = $769&255;
      $771 = ((((($686) + (($$58961143*40)|0)|0)) + 24|0) + ($$179191139)|0);
      HEAP8[$771>>0] = $770;
      $772 = HEAP8[$768>>0]|0;
      $773 = $772&255;
      $774 = HEAP32[$383>>2]|0;
      $775 = ($773|0)<($774|0);
      if (!($775)) {
       label = 257;
       break L380;
      }
      $776 = $769 & 255;
      $777 = HEAP32[$541>>2]|0;
      $778 = ($776|0)<($777|0);
      $765 = (($$179191139) + 1)|0;
      if (!($778)) {
       label = 259;
       break L380;
      }
      $762 = HEAP8[$700>>0]|0;
      $763 = $762&255;
      $764 = ($765|0)<($763|0);
      if ($764) {
       $$179191139 = $765;
      } else {
       break;
      }
     }
    }
    $779 = (($$58961143) + 1)|0;
    $780 = HEAP32[$677>>2]|0;
    $781 = ($779|0)<($780|0);
    if ($781) {
     $$58961143 = $779;
    } else {
     break L379;
    }
   }
   if ((label|0) == 229) {
    _error($0,20);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
   else if ((label|0) == 231) {
    _error($0,3);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
   else if ((label|0) == 238) {
    _error($0,20);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
   else if ((label|0) == 240) {
    _error($0,20);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
   else if ((label|0) == 242) {
    _error($0,20);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
   else if ((label|0) == 245) {
    _error($0,20);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
   else if ((label|0) == 253) {
    _error($0,20);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
   else if ((label|0) == 257) {
    _error($0,20);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
   else if ((label|0) == 259) {
    _error($0,20);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
  }
 } while(0);
 $782 = (_get_bits($0,6)|0);
 $783 = (($782) + 1)|0;
 $784 = ((($0)) + 408|0);
 HEAP32[$784>>2] = $783;
 $785 = ($783|0)>(0);
 L433: do {
  if ($785) {
   $$68971128 = 0;
   while(1) {
    $789 = (_get_bits($0,1)|0);
    $790 = $789&255;
    $791 = (((($0)) + 412|0) + (($$68971128*6)|0)|0);
    HEAP8[$791>>0] = $790;
    $792 = (_get_bits($0,16)|0);
    $793 = $792&65535;
    $794 = (((((($0)) + 412|0) + (($$68971128*6)|0)|0)) + 2|0);
    HEAP16[$794>>1] = $793;
    $795 = (_get_bits($0,16)|0);
    $796 = $795&65535;
    $797 = (((((($0)) + 412|0) + (($$68971128*6)|0)|0)) + 4|0);
    HEAP16[$797>>1] = $796;
    $798 = (_get_bits($0,8)|0);
    $799 = $798&255;
    $800 = (((((($0)) + 412|0) + (($$68971128*6)|0)|0)) + 1|0);
    HEAP8[$800>>0] = $799;
    $801 = HEAP16[$794>>1]|0;
    $802 = ($801<<16>>16)==(0);
    if (!($802)) {
     label = 264;
     break;
    }
    $803 = HEAP16[$797>>1]|0;
    $804 = ($803<<16>>16)==(0);
    if (!($804)) {
     label = 266;
     break;
    }
    $805 = $798 & 255;
    $806 = HEAP32[$677>>2]|0;
    $807 = ($805|0)<($806|0);
    $788 = (($$68971128) + 1)|0;
    if (!($807)) {
     label = 268;
     break;
    }
    $786 = HEAP32[$784>>2]|0;
    $787 = ($788|0)<($786|0);
    if ($787) {
     $$68971128 = $788;
    } else {
     break L433;
    }
   }
   if ((label|0) == 264) {
    _error($0,20);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
   else if ((label|0) == 266) {
    _error($0,20);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
   else if ((label|0) == 268) {
    _error($0,20);
    $$34 = 0;
    STACKTOP = sp;return ($$34|0);
   }
  }
 } while(0);
 _flush_packet($0);
 $808 = ((($0)) + 992|0);
 HEAP32[$808>>2] = 0;
 $809 = HEAP32[$32>>2]|0;
 $810 = ($809|0)>(0);
 L447: do {
  if ($810) {
   $$78981124 = 0;
   while(1) {
    $814 = HEAP32[$44>>2]|0;
    $815 = $814 << 2;
    $816 = (_setup_malloc($0,$815)|0);
    $817 = (((($0)) + 800|0) + ($$78981124<<2)|0);
    HEAP32[$817>>2] = $816;
    $818 = HEAP32[$44>>2]|0;
    $819 = $818 << 1;
    $820 = $819 & 2147483646;
    $821 = (_setup_malloc($0,$820)|0);
    $822 = (((($0)) + 928|0) + ($$78981124<<2)|0);
    HEAP32[$822>>2] = $821;
    $823 = (_setup_malloc($0,$$0929$lcssa)|0);
    $824 = (((($0)) + 996|0) + ($$78981124<<2)|0);
    HEAP32[$824>>2] = $823;
    $825 = HEAP32[$817>>2]|0;
    $826 = ($825|0)==(0|0);
    if ($826) {
     break;
    }
    $827 = HEAP32[$822>>2]|0;
    $828 = ($827|0)==(0|0);
    $829 = ($823|0)==(0|0);
    $or$cond991 = $829 | $828;
    $813 = (($$78981124) + 1)|0;
    if ($or$cond991) {
     break;
    }
    $811 = HEAP32[$32>>2]|0;
    $812 = ($813|0)<($811|0);
    if ($812) {
     $$78981124 = $813;
    } else {
     break L447;
    }
   }
   _error($0,3);
   $$34 = 0;
   STACKTOP = sp;return ($$34|0);
  }
 } while(0);
 $830 = HEAP32[$42>>2]|0;
 $831 = (_init_blocksize($0,0,$830)|0);
 $832 = ($831|0)==(0);
 if ($832) {
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $833 = HEAP32[$44>>2]|0;
 $834 = (_init_blocksize($0,1,$833)|0);
 $835 = ($834|0)==(0);
 if ($835) {
  $$34 = 0;
  STACKTOP = sp;return ($$34|0);
 }
 $836 = HEAP32[$42>>2]|0;
 $837 = ((($0)) + 104|0);
 HEAP32[$837>>2] = $836;
 $838 = HEAP32[$44>>2]|0;
 $839 = ((($0)) + 108|0);
 HEAP32[$839>>2] = $838;
 $840 = $838 << 1;
 $841 = $840 & 2147483646;
 $842 = HEAP32[$541>>2]|0;
 $843 = ($842|0)>(0);
 if ($843) {
  $844 = HEAP32[$544>>2]|0;
  $845 = HEAP32[$541>>2]|0;
  $$08991120 = 0;$$09011119 = 0;
  while(1) {
   $846 = (((($844) + (($$09011119*24)|0)|0)) + 4|0);
   $847 = HEAP32[$846>>2]|0;
   $848 = (($844) + (($$09011119*24)|0)|0);
   $849 = HEAP32[$848>>2]|0;
   $850 = (($847) - ($849))|0;
   $851 = (((($844) + (($$09011119*24)|0)|0)) + 8|0);
   $852 = HEAP32[$851>>2]|0;
   $853 = (($850>>>0) / ($852>>>0))&-1;
   $854 = ($853|0)>($$08991120|0);
   $$$0899 = $854 ? $853 : $$08991120;
   $855 = (($$09011119) + 1)|0;
   $856 = ($855|0)<($845|0);
   if ($856) {
    $$08991120 = $$$0899;$$09011119 = $855;
   } else {
    break;
   }
  }
  $phitmp = $$$0899 << 2;
  $phitmp1296 = (($phitmp) + 4)|0;
  $$0899$lcssa = $phitmp1296;
 } else {
  $$0899$lcssa = 4;
 }
 $857 = HEAP32[$32>>2]|0;
 $858 = Math_imul($857, $$0899$lcssa)|0;
 $859 = ((($0)) + 12|0);
 $860 = ($841>>>0)>($858>>>0);
 $$ = $860 ? $841 : $858;
 HEAP32[$859>>2] = $$;
 $861 = ((($0)) + 1377|0);
 HEAP8[$861>>0] = 1;
 $862 = ((($0)) + 80|0);
 $863 = HEAP32[$862>>2]|0;
 $864 = ($863|0)==(0|0);
 do {
  if (!($864)) {
   $865 = ((($0)) + 92|0);
   $866 = HEAP32[$865>>2]|0;
   $867 = ((($0)) + 84|0);
   $868 = HEAP32[$867>>2]|0;
   $869 = ($866|0)==($868|0);
   if (!($869)) {
    ___assert_fail((14501|0),(13997|0),3715,(14557|0));
    // unreachable;
   }
   $870 = ((($0)) + 88|0);
   $871 = HEAP32[$870>>2]|0;
   $872 = (($871) + 1512)|0;
   $873 = HEAP32[$859>>2]|0;
   $874 = (($872) + ($873))|0;
   $875 = ($874>>>0)>($866>>>0);
   if (!($875)) {
    break;
   }
   _error($0,3);
   $$34 = 0;
   STACKTOP = sp;return ($$34|0);
  }
 } while(0);
 $876 = (_stb_vorbis_get_file_offset($0)|0);
 $877 = ((($0)) + 52|0);
 HEAP32[$877>>2] = $876;
 $$34 = 1;
 STACKTOP = sp;return ($$34|0);
}
function _vorbis_alloc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_setup_malloc($0,1512)|0);
 return ($1|0);
}
function _vorbis_pump_first_frame($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = (_vorbis_decode_packet($0,$1,$3,$2)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return ($4|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 (_vorbis_finish_frame($0,$6,$7,$8)|0);
 STACKTOP = sp;return ($4|0);
}
function _setup_malloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + 3)|0;
 $3 = $2 & -4;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3))|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($0)) + 80|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $17 = ($3|0)==(0);
  if ($17) {
   $$1 = 0;
   return ($$1|0);
  }
  $18 = (_malloc($3)|0);
  $$1 = $18;
  return ($$1|0);
 } else {
  $10 = ((($0)) + 88|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($3))|0;
  $13 = ((($0)) + 92|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12|0)>($14|0);
  if ($15) {
   $$1 = 0;
   return ($$1|0);
  }
  $16 = (($8) + ($11)|0);
  HEAP32[$10>>2] = $12;
  $$1 = $16;
  return ($$1|0);
 }
 return (0)|0;
}
function _vorbis_validate($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_memcmp($0,14873,6)|0);
 $2 = ($1|0)==(0);
 $3 = $2&1;
 return ($3|0);
}
function _skip($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $10 = ((($0)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_ftell($11)|0);
  $13 = HEAP32[$10>>2]|0;
  $14 = (($12) + ($1))|0;
  (_fseek($13,$14,0)|0);
  return;
 }
 $5 = (($3) + ($1)|0);
 HEAP32[$2>>2] = $5;
 $6 = ((($0)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)<($7>>>0);
 if ($8) {
  return;
 }
 $9 = ((($0)) + 96|0);
 HEAP32[$9>>2] = 1;
 return;
}
function _is_whole_packet_present($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$068 = 0, $$$3 = 0, $$068$lcssa = 0, $$06892 = 0, $$07291 = 0, $$078 = 0, $$078$ph = 0, $$173 = 0, $$2 = 0, $$270 = 0, $$270$ph = 0, $$274 = 0, $$274$ph = 0, $$3$lcssa = 0, $$37585 = 0, $$386 = 0, $$476 = 0, $$lcssa = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond82 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 1380|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==(-1);
 if ($6) {
  $$078$ph = 1;$$270$ph = -1;$$274$ph = $5;
 } else {
  $7 = ((($0)) + 1116|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($3|0)<($8|0);
  L3: do {
   if ($9) {
    $$06892 = $3;$$07291 = $5;$67 = $8;
    while(1) {
     $10 = (((($0)) + 1120|0) + ($$06892)|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = $11&255;
     $13 = (($$07291) + ($12)|0);
     $14 = ($11<<24>>24)==(-1);
     if (!($14)) {
      $$068$lcssa = $$06892;$$173 = $13;$$lcssa = $67;
      break L3;
     }
     $15 = (($$06892) + 1)|0;
     $16 = HEAP32[$7>>2]|0;
     $17 = ($15|0)<($16|0);
     if ($17) {
      $$06892 = $15;$$07291 = $13;$67 = $16;
     } else {
      $$068$lcssa = $15;$$173 = $13;$$lcssa = $16;
      break;
     }
    }
   } else {
    $$068$lcssa = $3;$$173 = $5;$$lcssa = $8;
   }
  } while(0);
  $18 = ($1|0)!=(0);
  $19 = (($$lcssa) + -1)|0;
  $20 = ($$068$lcssa|0)<($19|0);
  $or$cond = $18 & $20;
  if ($or$cond) {
   _error($0,21);
   $$2 = 0;
   return ($$2|0);
  }
  $21 = ($$068$lcssa|0)==($$lcssa|0);
  $$$068 = $21 ? -1 : $$068$lcssa;
  $22 = ((($0)) + 40|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($$173>>>0)>($23>>>0);
  if ($24) {
   _error($0,1);
   $$2 = 0;
   return ($$2|0);
  } else {
   $$078$ph = 0;$$270$ph = $$$068;$$274$ph = $$173;
  }
 }
 $25 = ((($0)) + 40|0);
 $26 = ($1|0)!=(0);
 $27 = ((($0)) + 992|0);
 $$078 = $$078$ph;$$270 = $$270$ph;$$274 = $$274$ph;
 while(1) {
  $28 = ($$270|0)==(-1);
  if (!($28)) {
   $$2 = 1;
   label = 32;
   break;
  }
  $29 = ((($$274)) + 26|0);
  $30 = HEAP32[$25>>2]|0;
  $31 = ($29>>>0)<($30>>>0);
  if (!($31)) {
   label = 12;
   break;
  }
  $32 = (_memcmp($$274,5080,4)|0);
  $33 = ($32|0)==(0);
  if (!($33)) {
   label = 14;
   break;
  }
  $34 = ((($$274)) + 4|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if (!($36)) {
   label = 16;
   break;
  }
  $37 = ($$078|0)==(0);
  if ($37) {
   $44 = ((($$274)) + 5|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45 & 1;
   $47 = ($46<<24>>24)==(0);
   if ($47) {
    label = 22;
    break;
   }
  } else {
   $38 = HEAP32[$27>>2]|0;
   $39 = ($38|0)==(0);
   if (!($39)) {
    $40 = ((($$274)) + 5|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41 & 1;
    $43 = ($42<<24>>24)==(0);
    if (!($43)) {
     label = 20;
     break;
    }
   }
  }
  $48 = HEAP8[$29>>0]|0;
  $49 = $48&255;
  $50 = ((($$274)) + 27|0);
  $51 = (($50) + ($49)|0);
  $52 = HEAP32[$25>>2]|0;
  $53 = ($51>>>0)>($52>>>0);
  if ($53) {
   label = 25;
   break;
  }
  $54 = ($48<<24>>24)==(0);
  L27: do {
   if ($54) {
    $$3$lcssa = 0;$$476 = $51;
   } else {
    $$37585 = $51;$$386 = 0;
    while(1) {
     $55 = (($50) + ($$386)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = (($$37585) + ($57)|0);
     $59 = ($56<<24>>24)==(-1);
     if (!($59)) {
      $$3$lcssa = $$386;$$476 = $58;
      break L27;
     }
     $60 = (($$386) + 1)|0;
     $61 = ($60|0)<($49|0);
     if ($61) {
      $$37585 = $58;$$386 = $60;
     } else {
      $$3$lcssa = $60;$$476 = $58;
      break;
     }
    }
   }
  } while(0);
  $62 = (($49) + -1)|0;
  $63 = ($$3$lcssa|0)<($62|0);
  $or$cond82 = $26 & $63;
  if ($or$cond82) {
   label = 29;
   break;
  }
  $64 = ($$3$lcssa|0)==($49|0);
  $$$3 = $64 ? -1 : $$3$lcssa;
  $65 = HEAP32[$25>>2]|0;
  $66 = ($$476>>>0)>($65>>>0);
  if ($66) {
   label = 31;
   break;
  } else {
   $$078 = 0;$$270 = $$$3;$$274 = $$476;
  }
 }
 if ((label|0) == 12) {
  _error($0,1);
  $$2 = 0;
  return ($$2|0);
 }
 else if ((label|0) == 14) {
  _error($0,21);
  $$2 = 0;
  return ($$2|0);
 }
 else if ((label|0) == 16) {
  _error($0,21);
  $$2 = 0;
  return ($$2|0);
 }
 else if ((label|0) == 20) {
  _error($0,21);
  $$2 = 0;
  return ($$2|0);
 }
 else if ((label|0) == 22) {
  _error($0,21);
  $$2 = 0;
  return ($$2|0);
 }
 else if ((label|0) == 25) {
  _error($0,1);
  $$2 = 0;
  return ($$2|0);
 }
 else if ((label|0) == 29) {
  _error($0,21);
  $$2 = 0;
  return ($$2|0);
 }
 else if ((label|0) == 31) {
  _error($0,1);
  $$2 = 0;
  return ($$2|0);
 }
 else if ((label|0) == 32) {
  return ($$2|0);
 }
 return (0)|0;
}
function _crc32_init() {
 var $$01417 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01417 = 0;
 while(1) {
  $0 = $$01417 << 24;
  $1 = $$01417 << 25;
  $2 = $0 >> 31;
  $3 = $2 & 79764919;
  $4 = $3 ^ $1;
  $5 = $4 << 1;
  $6 = $1 >> 31;
  $7 = $6 & 79764919;
  $8 = $7 ^ $5;
  $9 = $8 << 1;
  $10 = $5 >> 31;
  $11 = $10 & 79764919;
  $12 = $11 ^ $9;
  $13 = $12 << 1;
  $14 = $9 >> 31;
  $15 = $14 & 79764919;
  $16 = $15 ^ $13;
  $17 = $16 << 1;
  $18 = $13 >> 31;
  $19 = $18 & 79764919;
  $20 = $19 ^ $17;
  $21 = $20 << 1;
  $22 = $17 >> 31;
  $23 = $22 & 79764919;
  $24 = $23 ^ $21;
  $25 = $24 << 1;
  $26 = $21 >> 31;
  $27 = $26 & 79764919;
  $28 = $27 ^ $25;
  $29 = $28 << 1;
  $30 = $25 >> 31;
  $31 = $30 & 79764919;
  $32 = $31 ^ $29;
  $33 = (338372 + ($$01417<<2)|0);
  HEAP32[$33>>2] = $32;
  $34 = (($$01417) + 1)|0;
  $exitcond = ($34|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $$01417 = $34;
  }
 }
 return;
}
function _setup_temp_free($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _free($1);
  return;
 } else {
  $6 = (($2) + 3)|0;
  $7 = $6 & -4;
  $8 = ((($0)) + 92|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($7))|0;
  HEAP32[$8>>2] = $10;
  return;
 }
}
function _compute_codewords($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$06983 = 0, $$072$ph = 0, $$074$lcssa = 0, $$07488 = 0, $$07586 = 0, $$084 = 0, $$176 = 0, $$176$in = 0, $$176$in$ph = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp;
 dest=$4; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = ($2|0)>(0);
 L1: do {
  if ($5) {
   $$07488 = 0;
   while(1) {
    $6 = (($1) + ($$07488)|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = ($7<<24>>24)==(-1);
    if (!($8)) {
     $$074$lcssa = $$07488;
     break L1;
    }
    $9 = (($$07488) + 1)|0;
    $10 = ($9|0)<($2|0);
    if ($10) {
     $$07488 = $9;
    } else {
     $$074$lcssa = $9;
     break;
    }
   }
  } else {
   $$074$lcssa = 0;
  }
 } while(0);
 $11 = ($$074$lcssa|0)==($2|0);
 if ($11) {
  $12 = ((($0)) + 2092|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $$2 = 1;
   STACKTOP = sp;return ($$2|0);
  } else {
   ___assert_fail((14770|0),(13997|0),666,(14793|0));
   // unreachable;
  }
 }
 $15 = (($1) + ($$074$lcssa)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 _add_entry($0,0,$$074$lcssa,0,$17,$3);
 $18 = HEAP8[$15>>0]|0;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $$072$ph = 1;$$176$in$ph = $$074$lcssa;
 } else {
  $20 = HEAP8[$15>>0]|0;
  $21 = $20&255;
  $$07586 = 1;
  while(1) {
   $22 = (32 - ($$07586))|0;
   $23 = 1 << $22;
   $24 = (($4) + ($$07586<<2)|0);
   HEAP32[$24>>2] = $23;
   $25 = (($$07586) + 1)|0;
   $26 = ($$07586|0)<($21|0);
   if ($26) {
    $$07586 = $25;
   } else {
    $$072$ph = 1;$$176$in$ph = $$074$lcssa;
    break;
   }
  }
 }
 L16: while(1) {
  $$176$in = $$176$in$ph;
  L18: while(1) {
   $$176 = (($$176$in) + 1)|0;
   $27 = ($$176|0)<($2|0);
   if (!($27)) {
    $$2 = 1;
    label = 25;
    break L16;
   }
   $28 = (($1) + ($$176)|0);
   $29 = HEAP8[$28>>0]|0;
   switch ($29<<24>>24) {
   case 0:  {
    $$2 = 0;
    label = 25;
    break L16;
    break;
   }
   case -1:  {
    $$176$in = $$176;
    break;
   }
   default: {
    break L18;
   }
   }
  }
  $30 = $29&255;
  $$06983 = $30;
  while(1) {
   $31 = (($4) + ($$06983<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if (!($33)) {
    break;
   }
   $34 = (($$06983) + -1)|0;
   $35 = ($$06983|0)>(1);
   if ($35) {
    $$06983 = $34;
   } else {
    $$2 = 0;
    label = 25;
    break L16;
   }
  }
  $36 = (($4) + ($$06983<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($$06983>>>0)<(32);
  if (!($38)) {
   label = 17;
   break;
  }
  HEAP32[$36>>2] = 0;
  $39 = (_bit_reverse($37)|0);
  $40 = (($$072$ph) + 1)|0;
  $41 = HEAP8[$28>>0]|0;
  $42 = $41&255;
  _add_entry($0,$39,$$176,$$072$ph,$42,$3);
  $43 = HEAP8[$28>>0]|0;
  $44 = $43&255;
  $45 = ($$06983|0)==($44|0);
  if ($45) {
   $$072$ph = $40;$$176$in$ph = $$176;
   continue;
  }
  $46 = ($43&255)<(32);
  if (!($46)) {
   label = 21;
   break;
  }
  $47 = ($44|0)>($$06983|0);
  if ($47) {
   $$084 = $44;
  } else {
   $$072$ph = $40;$$176$in$ph = $$176;
   continue;
  }
  while(1) {
   $48 = (($4) + ($$084<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(0);
   if (!($50)) {
    label = 23;
    break L16;
   }
   $51 = (32 - ($$084))|0;
   $52 = 1 << $51;
   $53 = (($52) + ($37))|0;
   HEAP32[$48>>2] = $53;
   $54 = (($$084) + -1)|0;
   $55 = ($54|0)>($$06983|0);
   if ($55) {
    $$084 = $54;
   } else {
    $$072$ph = $40;$$176$in$ph = $$176;
    continue L16;
   }
  }
 }
 if ((label|0) == 17) {
  ___assert_fail((14811|0),(13997|0),689,(14793|0));
  // unreachable;
 }
 else if ((label|0) == 21) {
  ___assert_fail((14828|0),(13997|0),694,(14793|0));
  // unreachable;
 }
 else if ((label|0) == 23) {
  ___assert_fail((14855|0),(13997|0),696,(14793|0));
  // unreachable;
 }
 else if ((label|0) == 25) {
  STACKTOP = sp;return ($$2|0);
 }
 return (0)|0;
}
function _compute_sorted_huffman($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$08088 = 0, $$082$lcssa = 0, $$08287 = 0, $$084$lcssa = 0, $$08495 = 0, $$096 = 0, $$1100 = 0, $$181 = 0, $$183 = 0, $$185 = 0, $$290 = 0, $$lcssa = 0, $$sink = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 23|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $13 = ((($0)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)>(0);
  if ($15) {
   $16 = ((($0)) + 32|0);
   $17 = ((($0)) + 2084|0);
   $$08495 = 0;$$096 = 0;
   while(1) {
    $18 = (($1) + ($$096)|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = (_include_in_sort($0,$19)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $$185 = $$08495;
    } else {
     $22 = HEAP32[$16>>2]|0;
     $23 = (($22) + ($$096<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (_bit_reverse($24)|0);
     $26 = HEAP32[$17>>2]|0;
     $27 = (($$08495) + 1)|0;
     $28 = (($26) + ($$08495<<2)|0);
     HEAP32[$28>>2] = $25;
     $$185 = $27;
    }
    $29 = (($$096) + 1)|0;
    $30 = HEAP32[$13>>2]|0;
    $31 = ($29|0)<($30|0);
    if ($31) {
     $$08495 = $$185;$$096 = $29;
    } else {
     $$084$lcssa = $$185;
     break;
    }
   }
  } else {
   $$084$lcssa = 0;
  }
  $32 = ((($0)) + 2092|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($$084$lcssa|0)==($33|0);
  if (!($34)) {
   ___assert_fail((14662|0),(13997|0),763,(14685|0));
   // unreachable;
  }
 } else {
  $6 = ((($0)) + 2092|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)>(0);
  if ($8) {
   $9 = ((($0)) + 32|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($0)) + 2084|0);
   $12 = HEAP32[$11>>2]|0;
   $$1100 = 0;
   while(1) {
    $35 = (($10) + ($$1100<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_bit_reverse($36)|0);
    $38 = (($12) + ($$1100<<2)|0);
    HEAP32[$38>>2] = $37;
    $39 = (($$1100) + 1)|0;
    $40 = HEAP32[$6>>2]|0;
    $41 = ($39|0)<($40|0);
    if ($41) {
     $$1100 = $39;
    } else {
     break;
    }
   }
  }
 }
 $42 = ((($0)) + 2084|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($0)) + 2092|0);
 $45 = HEAP32[$44>>2]|0;
 _qsort($43,$45,4,2);
 $46 = HEAP32[$42>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = (($46) + ($47<<2)|0);
 HEAP32[$48>>2] = -1;
 $49 = HEAP8[$3>>0]|0;
 $50 = ($49<<24>>24)!=(0);
 $51 = ((($0)) + 4|0);
 $$sink = $50 ? $44 : $51;
 $52 = HEAP32[$$sink>>2]|0;
 $53 = ($52|0)>(0);
 if (!($53)) {
  return;
 }
 $54 = ((($0)) + 32|0);
 $55 = ((($0)) + 2088|0);
 $56 = ((($0)) + 8|0);
 $$290 = 0;
 L20: while(1) {
  $57 = HEAP8[$3>>0]|0;
  $58 = ($57<<24>>24)==(0);
  if ($58) {
   $$sink3 = $$290;
  } else {
   $59 = (($2) + ($$290<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $$sink3 = $60;
  }
  $61 = (($1) + ($$sink3)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = (_include_in_sort($0,$62)|0);
  $64 = ($63|0)==(0);
  do {
   if (!($64)) {
    $65 = HEAP32[$54>>2]|0;
    $66 = (($65) + ($$290<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (_bit_reverse($67)|0);
    $69 = HEAP32[$44>>2]|0;
    $70 = ($69|0)>(1);
    $71 = HEAP32[$42>>2]|0;
    if ($70) {
     $72 = HEAP32[$42>>2]|0;
     $$08088 = $69;$$08287 = 0;$76 = $71;
     while(1) {
      $73 = $$08088 >>> 1;
      $74 = (($73) + ($$08287))|0;
      $75 = (($76) + ($74<<2)|0);
      $77 = HEAP32[$75>>2]|0;
      $78 = ($77>>>0)>($68>>>0);
      $79 = (($$08088) - ($73))|0;
      $$183 = $78 ? $$08287 : $74;
      $$181 = $78 ? $73 : $79;
      $80 = ($$181|0)>(1);
      if ($80) {
       $$08088 = $$181;$$08287 = $$183;$76 = $72;
      } else {
       $$082$lcssa = $$183;$$lcssa = $72;
       break;
      }
     }
    } else {
     $$082$lcssa = 0;$$lcssa = $71;
    }
    $81 = (($$lcssa) + ($$082$lcssa<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($68|0);
    if (!($83)) {
     label = 21;
     break L20;
    }
    $84 = HEAP8[$3>>0]|0;
    $85 = ($84<<24>>24)==(0);
    $86 = HEAP32[$55>>2]|0;
    if ($85) {
     $92 = (($86) + ($$082$lcssa<<2)|0);
     HEAP32[$92>>2] = $$290;
     break;
    } else {
     $87 = (($2) + ($$290<<2)|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (($86) + ($$082$lcssa<<2)|0);
     HEAP32[$89>>2] = $88;
     $90 = HEAP32[$56>>2]|0;
     $91 = (($90) + ($$082$lcssa)|0);
     HEAP8[$91>>0] = $62;
     break;
    }
   }
  } while(0);
  $93 = (($$290) + 1)|0;
  $94 = ($93|0)<($52|0);
  if ($94) {
   $$290 = $93;
  } else {
   label = 26;
   break;
  }
 }
 if ((label|0) == 21) {
  ___assert_fail((14708|0),(13997|0),793,(14685|0));
  // unreachable;
 }
 else if ((label|0) == 26) {
  return;
 }
}
function _compute_accelerated_huffman($0) {
 $0 = $0|0;
 var $$ = 0, $$0$ph = 0, $$027 = 0, $$128 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $scevgep = ((($0)) + 36|0);
 _memset(($scevgep|0),-1,2048)|0;
 $1 = ((($0)) + 23|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $4 = ((($0)) + 4|0);
 $5 = ((($0)) + 2092|0);
 $$sink = $3 ? $5 : $4;
 $6 = HEAP32[$$sink>>2]|0;
 $7 = ($6|0)<(32767);
 $$ = $7 ? $6 : 32767;
 $8 = ($6|0)>(0);
 if (!($8)) {
  return;
 }
 $9 = ((($0)) + 8|0);
 $10 = ((($0)) + 32|0);
 $11 = ((($0)) + 2084|0);
 $$128 = 0;
 while(1) {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$128)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14&255)<(11);
  if ($15) {
   $16 = HEAP8[$1>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $22 = HEAP32[$10>>2]|0;
    $23 = (($22) + ($$128<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $$0$ph = $24;
   } else {
    $18 = HEAP32[$11>>2]|0;
    $19 = (($18) + ($$128<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_bit_reverse($20)|0);
    $$0$ph = $21;
   }
   $25 = ($$0$ph>>>0)<(1024);
   if ($25) {
    $26 = $$128&65535;
    $$027 = $$0$ph;
    while(1) {
     $27 = (((($0)) + 36|0) + ($$027<<1)|0);
     HEAP16[$27>>1] = $26;
     $28 = HEAP32[$9>>2]|0;
     $29 = (($28) + ($$128)|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $32 = 1 << $31;
     $33 = (($32) + ($$027))|0;
     $34 = ($33>>>0)<(1024);
     if ($34) {
      $$027 = $33;
     } else {
      break;
     }
    }
   }
  }
  $35 = (($$128) + 1)|0;
  $36 = ($35|0)<($$|0);
  if ($36) {
   $$128 = $35;
  } else {
   break;
  }
 }
 return;
}
function _float32_unpack($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & 2097151;
 $2 = $0 >>> 21;
 $3 = $2 & 1023;
 $4 = ($0|0)<(0);
 $5 = (+($1>>>0));
 $6 = -$5;
 $7 = $4 ? $6 : $5;
 $8 = $7;
 $9 = $8;
 $10 = (($3) + -788)|0;
 $11 = (+_ldexp($9,$10));
 $12 = $11;
 return (+$12);
}
function _lookup1_values($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+($0|0));
 $3 = $2;
 $4 = (+Math_log((+$3)));
 $5 = $4;
 $6 = (+($1|0));
 $7 = $5 / $6;
 $8 = $7;
 $9 = (+Math_exp((+$8)));
 $10 = (+Math_floor((+$9)));
 $11 = (~~(($10)));
 $12 = (+($11|0));
 $13 = $12 + 1.0;
 $14 = $13;
 $15 = (+($1|0));
 $16 = (+Math_pow((+$14),(+$15)));
 $17 = (+Math_floor((+$16)));
 $18 = (~~(($17)));
 $not$ = ($18|0)<=($0|0);
 $19 = $not$&1;
 $$ = (($19) + ($11))|0;
 $20 = (+($$|0));
 $21 = $20 + 1.0;
 $22 = $21;
 $23 = (+Math_pow((+$22),(+$15)));
 $24 = (+($0|0));
 $25 = $23 > $24;
 if (!($25)) {
  ___assert_fail((14571|0),(13997|0),818,(14603|0));
  // unreachable;
 }
 $26 = $20;
 $27 = (+Math_pow((+$26),(+$15)));
 $28 = (+Math_floor((+$27)));
 $29 = (~~(($28)));
 $30 = ($29|0)>($0|0);
 if ($30) {
  ___assert_fail((14618|0),(13997|0),819,(14603|0));
  // unreachable;
 } else {
  return ($$|0);
 }
 return (0)|0;
}
function _point_compare($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$0>>1]|0;
 $3 = HEAP16[$1>>1]|0;
 $4 = ($2&65535)<($3&65535);
 $5 = ($2&65535)>($3&65535);
 $6 = $5&1;
 $7 = $4 ? -1 : $6;
 return ($7|0);
}
function _neighbors($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$02933 = 0, $$03032 = 0, $$034 = 0, $$1 = 0, $$131 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($1|0)>(0);
 if (!($4)) {
  return;
 }
 $5 = (($0) + ($1<<1)|0);
 $6 = (($0) + ($1<<1)|0);
 $$02933 = 65536;$$03032 = -1;$$034 = 0;
 while(1) {
  $7 = (($0) + ($$034<<1)|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = ($9|0)>($$03032|0);
  if ($10) {
   $11 = HEAP16[$5>>1]|0;
   $12 = ($8&65535)<($11&65535);
   if ($12) {
    HEAP32[$2>>2] = $$034;
    $$131 = $9;
   } else {
    $$131 = $$03032;
   }
  } else {
   $$131 = $$03032;
  }
  $13 = ($9|0)<($$02933|0);
  if ($13) {
   $14 = HEAP16[$6>>1]|0;
   $15 = ($8&65535)>($14&65535);
   if ($15) {
    HEAP32[$3>>2] = $$034;
    $$1 = $9;
   } else {
    $$1 = $$02933;
   }
  } else {
   $$1 = $$02933;
  }
  $16 = (($$034) + 1)|0;
  $exitcond = ($16|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$02933 = $$1;$$03032 = $$131;$$034 = $16;
  }
 }
 return;
}
function _init_blocksize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 >>> 1;
 $4 = $2 & -4;
 $5 = $2 >> 3;
 $6 = $3 << 2;
 $7 = (_setup_malloc($0,$6)|0);
 $8 = (((($0)) + 1068|0) + ($1<<2)|0);
 HEAP32[$8>>2] = $7;
 $9 = (_setup_malloc($0,$6)|0);
 $10 = (((($0)) + 1076|0) + ($1<<2)|0);
 HEAP32[$10>>2] = $9;
 $11 = (_setup_malloc($0,$4)|0);
 $12 = (((($0)) + 1084|0) + ($1<<2)|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$8>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = HEAP32[$10>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = ($11|0)==(0|0);
  $or$cond = $17 | $16;
  if (!($or$cond)) {
   _compute_twiddle_factors($2,$13,$15,$11);
   $18 = (_setup_malloc($0,$6)|0);
   $19 = (((($0)) + 1092|0) + ($1<<2)|0);
   HEAP32[$19>>2] = $18;
   $20 = ($18|0)==(0|0);
   if ($20) {
    _error($0,3);
    $$0 = 0;
    return ($$0|0);
   }
   _compute_window($2,$18);
   $21 = $5 << 1;
   $22 = (_setup_malloc($0,$21)|0);
   $23 = (((($0)) + 1100|0) + ($1<<2)|0);
   HEAP32[$23>>2] = $22;
   $24 = ($22|0)==(0|0);
   if ($24) {
    _error($0,3);
    $$0 = 0;
    return ($$0|0);
   } else {
    _compute_bitreverse($2,$22);
    $$0 = 1;
    return ($$0|0);
   }
  }
 }
 _error($0,3);
 $$0 = 0;
 return ($$0|0);
}
function _compute_twiddle_factors($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$04044 = 0, $$045 = 0, $$14142 = 0, $$143 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $exitcond = 0, $exitcond48 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0 >> 2;
 $5 = $0 >> 3;
 $6 = ($4|0)>(0);
 if ($6) {
  $7 = (+($0|0));
  $$04044 = 0;$$045 = 0;
  while(1) {
   $10 = $$04044 << 2;
   $11 = (+($10|0));
   $12 = $11 * 3.1415926535897931;
   $13 = $12 / $7;
   $14 = (+Math_cos((+$13)));
   $15 = $14;
   $16 = (($1) + ($$045<<2)|0);
   HEAPF32[$16>>2] = $15;
   $17 = (+Math_sin((+$13)));
   $18 = $17;
   $19 = -$18;
   $20 = $$045 | 1;
   $21 = (($1) + ($20<<2)|0);
   HEAPF32[$21>>2] = $19;
   $22 = (+($20|0));
   $23 = $22 * 3.1415926535897931;
   $24 = $23 / $7;
   $25 = $24 * 0.5;
   $26 = (+Math_cos((+$25)));
   $27 = $26;
   $28 = $27 * 0.5;
   $29 = (($2) + ($$045<<2)|0);
   HEAPF32[$29>>2] = $28;
   $30 = (+Math_sin((+$25)));
   $31 = $30;
   $32 = $31 * 0.5;
   $33 = (($2) + ($20<<2)|0);
   HEAPF32[$33>>2] = $32;
   $34 = (($$04044) + 1)|0;
   $35 = (($$045) + 2)|0;
   $exitcond48 = ($34|0)==($4|0);
   if ($exitcond48) {
    break;
   } else {
    $$04044 = $34;$$045 = $35;
   }
  }
 }
 $8 = ($5|0)>(0);
 if (!($8)) {
  return;
 }
 $9 = (+($0|0));
 $$14142 = 0;$$143 = 0;
 while(1) {
  $36 = $$143 | 1;
  $37 = $36 << 1;
  $38 = (+($37|0));
  $39 = $38 * 3.1415926535897931;
  $40 = $39 / $9;
  $41 = (+Math_cos((+$40)));
  $42 = $41;
  $43 = (($3) + ($$143<<2)|0);
  HEAPF32[$43>>2] = $42;
  $44 = (+Math_sin((+$40)));
  $45 = $44;
  $46 = -$45;
  $47 = (($3) + ($36<<2)|0);
  HEAPF32[$47>>2] = $46;
  $48 = (($$14142) + 1)|0;
  $49 = (($$143) + 2)|0;
  $exitcond = ($48|0)==($5|0);
  if ($exitcond) {
   break;
  } else {
   $$14142 = $48;$$143 = $49;
  }
 }
 return;
}
function _compute_window($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$010 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = $0 >> 1;
 $3 = ($2|0)>(0);
 if (!($3)) {
  return;
 }
 $4 = (+($2|0));
 $$010 = 0;
 while(1) {
  $5 = (+($$010|0));
  $6 = $5 + 0.5;
  $7 = $6 / $4;
  $8 = $7 * 0.5;
  $9 = $8 * 3.1415926535897931;
  $10 = (+Math_sin((+$9)));
  $11 = $10;
  $12 = (+_square($11));
  $13 = $12;
  $14 = $13 * 1.5707963267948966;
  $15 = (+Math_sin((+$14)));
  $16 = $15;
  $17 = (($1) + ($$010<<2)|0);
  HEAPF32[$17>>2] = $16;
  $18 = (($$010) + 1)|0;
  $exitcond = ($18|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$010 = $18;
  }
 }
 return;
}
function _compute_bitreverse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$013 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 >> 3;
 $3 = ($2|0)>(0);
 if (!($3)) {
  return;
 }
 $4 = (_ilog($0)|0);
 $5 = (36 - ($4))|0;
 $$013 = 0;
 while(1) {
  $6 = (_bit_reverse($$013)|0);
  $7 = $6 >>> $5;
  $8 = $7 << 2;
  $9 = $8&65535;
  $10 = (($1) + ($$013<<1)|0);
  HEAP16[$10>>1] = $9;
  $11 = (($$013) + 1)|0;
  $exitcond = ($11|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$013 = $11;
  }
 }
 return;
}
function _square($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 * $0;
 return (+$1);
}
function _include_in_sort($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$ = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $narrow = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 23|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 $5 = ($1<<24>>24)==(-1);
 if ($4) {
  $6 = ($1&255)>(10);
  $not$ = $5 ^ 1;
  $narrow = $6 & $not$;
  $$$ = $narrow&1;
  return ($$$|0);
 }
 if ($5) {
  ___assert_fail((14739|0),(13997|0),743,(14754|0));
  // unreachable;
 } else {
  return 1;
 }
 return (0)|0;
}
function _uint32_compare($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 $5 = ($2>>>0)>($3>>>0);
 $6 = $5&1;
 $7 = $4 ? -1 : $6;
 return ($7|0);
}
function _add_entry($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 23|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 $9 = ((($0)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 if ($8) {
  $11 = (($10) + ($2<<2)|0);
  $$sink = $1;$$sink1 = $11;
  HEAP32[$$sink1>>2] = $$sink;
  return;
 } else {
  $12 = (($10) + ($3<<2)|0);
  HEAP32[$12>>2] = $1;
  $13 = $4&255;
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($3)|0);
  HEAP8[$16>>0] = $13;
  $17 = (($5) + ($3<<2)|0);
  $$sink = $2;$$sink1 = $17;
  HEAP32[$$sink1>>2] = $$sink;
  return;
 }
}
function _LoadSound($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy1 = sp + 20|0;
 $2 = sp;
 _LoadWave($2,$1);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$2+16>>2]|0;
 _LoadSoundFromWave($0,$$byval_copy1);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$2+16>>2]|0;
 _UnloadWave($$byval_copy1);
 STACKTOP = sp;return;
}
function _LoadSoundFromWave($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$sroa$0$0 = 0, $$sroa$5$0 = 0, $$sroa$5$0$$sroa_idx7 = 0, $$sroa$6$0 = 0, $$sroa$6$0$$sroa_idx9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 48|0;
 $3 = sp + 44|0;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$sroa$0$0 = 0;$$sroa$5$0 = 0;$$sroa$6$0 = 0;
  HEAP32[$0>>2] = $$sroa$0$0;
  $$sroa$5$0$$sroa_idx7 = ((($0)) + 4|0);
  HEAP32[$$sroa$5$0$$sroa_idx7>>2] = $$sroa$5$0;
  $$sroa$6$0$$sroa_idx9 = ((($0)) + 8|0);
  HEAP32[$$sroa$6$0$$sroa_idx9>>2] = $$sroa$6$0;
  STACKTOP = sp;return;
 }
 $7 = ((($1)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 L4: do {
  switch ($8|0) {
  case 1:  {
   $9 = ((($1)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   switch ($10|0) {
   case 8:  {
    $$0 = 4352;
    break L4;
    break;
   }
   case 16:  {
    $$0 = 4353;
    break L4;
    break;
   }
   case 32:  {
    $$0 = 65552;
    break L4;
    break;
   }
   default: {
    HEAP32[$vararg_buffer>>2] = $10;
    _TraceLog(1,15220,$vararg_buffer);
    $$0 = 0;
    break L4;
   }
   }
   break;
  }
  case 2:  {
   $11 = ((($1)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   switch ($12|0) {
   case 8:  {
    $$0 = 4354;
    break L4;
    break;
   }
   case 16:  {
    $$0 = 4355;
    break L4;
    break;
   }
   case 32:  {
    $$0 = 65553;
    break L4;
    break;
   }
   default: {
    HEAP32[$vararg_buffer1>>2] = $12;
    _TraceLog(1,15220,$vararg_buffer1);
    $$0 = 0;
    break L4;
   }
   }
   break;
  }
  default: {
   HEAP32[$vararg_buffer4>>2] = $8;
   _TraceLog(1,15255,$vararg_buffer4);
   $$0 = 0;
  }
  }
 } while(0);
 _alGenSources(1,($2|0));
 $13 = HEAP32[$2>>2]|0;
 _alSourcef(($13|0),4099,1.0);
 $14 = HEAP32[$2>>2]|0;
 _alSourcef(($14|0),4106,1.0);
 $15 = HEAP32[$2>>2]|0;
 _alSource3f(($15|0),4100,0.0,0.0,0.0);
 $16 = HEAP32[$2>>2]|0;
 _alSource3f(($16|0),4102,0.0,0.0,0.0);
 $17 = HEAP32[$2>>2]|0;
 _alSourcei(($17|0),4103,0);
 _alGenBuffers(1,($3|0));
 $18 = HEAP32[$1>>2]|0;
 $19 = HEAP32[$7>>2]|0;
 $20 = Math_imul($19, $18)|0;
 $21 = ((($1)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = Math_imul($20, $22)|0;
 $24 = $23 >>> 3;
 $25 = HEAP32[$3>>2]|0;
 $26 = HEAP32[$4>>2]|0;
 $27 = ((($1)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 _alBufferData(($25|0),($$0|0),($26|0),($24|0),($28|0));
 $29 = HEAP32[$2>>2]|0;
 $30 = HEAP32[$3>>2]|0;
 _alSourcei(($29|0),4105,($30|0));
 $31 = HEAP32[$2>>2]|0;
 $32 = HEAP32[$3>>2]|0;
 $33 = HEAP32[$27>>2]|0;
 $34 = HEAP32[$21>>2]|0;
 $35 = HEAP32[$7>>2]|0;
 $36 = ($35|0)==(1);
 $37 = $36 ? 13929 : 13934;
 HEAP32[$vararg_buffer7>>2] = $31;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $32;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = $33;
 $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
 HEAP32[$vararg_ptr12>>2] = $34;
 $vararg_ptr13 = ((($vararg_buffer7)) + 16|0);
 HEAP32[$vararg_ptr13>>2] = $37;
 _TraceLog(0,15297,$vararg_buffer7);
 $38 = HEAP32[$2>>2]|0;
 $39 = HEAP32[$3>>2]|0;
 $$sroa$0$0 = $38;$$sroa$5$0 = $39;$$sroa$6$0 = $$0;
 HEAP32[$0>>2] = $$sroa$0$0;
 $$sroa$5$0$$sroa_idx7 = ((($0)) + 4|0);
 HEAP32[$$sroa$5$0$$sroa_idx7>>2] = $$sroa$5$0;
 $$sroa$6$0$$sroa_idx9 = ((($0)) + 8|0);
 HEAP32[$$sroa$6$0$$sroa_idx9>>2] = $$sroa$6$0;
 STACKTOP = sp;return;
}
function _UnloadWave($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _free($2);
 }
 _TraceLog(0,15192,$vararg_buffer);
 STACKTOP = sp;return;
}
function _UnloadSound($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 _alSourceStop(($1|0));
 _alDeleteSources(1,($0|0));
 $2 = ((($0)) + 4|0);
 _alDeleteBuffers(1,($2|0));
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 _TraceLog(0,15372,$vararg_buffer);
 STACKTOP = sp;return;
}
function _PlaySound($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _alSourcePlay(($1|0));
 return;
}
function _LoadMusicStream($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer39 = sp + 104|0;
 $vararg_buffer36 = sp + 96|0;
 $vararg_buffer32 = sp + 80|0;
 $vararg_buffer28 = sp + 72|0;
 $vararg_buffer25 = sp + 64|0;
 $vararg_buffer21 = sp + 48|0;
 $vararg_buffer17 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 192|0;
 $2 = sp + 164|0;
 $3 = sp + 136|0;
 $4 = sp + 108|0;
 $5 = (_malloc(5936)|0);
 $6 = (_IsFileExtension($0,13648)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = (_stb_vorbis_open_filename($0,0,0)|0);
  $9 = ((($5)) + 4|0);
  HEAP32[$9>>2] = $8;
  $10 = ($8|0)==(0|0);
  if ($10) {
   HEAP32[$vararg_buffer>>2] = $0;
   _TraceLog(1,15425,$vararg_buffer);
   STACKTOP = sp;return ($5|0);
  } else {
   $11 = HEAP32[$9>>2]|0;
   _stb_vorbis_get_info($1,$11);
   $12 = ((($5)) + 5896|0);
   $13 = HEAP32[$1>>2]|0;
   $14 = ((($1)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   _InitAudioStream($2,$13,16,$15);
   ;HEAP32[$12>>2]=HEAP32[$2>>2]|0;HEAP32[$12+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$12+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$12+20>>2]=HEAP32[$2+20>>2]|0;HEAP32[$12+24>>2]=HEAP32[$2+24>>2]|0;
   $16 = HEAP32[$9>>2]|0;
   $17 = (_stb_vorbis_stream_length_in_samples($16)|0);
   $18 = ((($5)) + 5928|0);
   HEAP32[$18>>2] = $17;
   $19 = ((($5)) + 5932|0);
   HEAP32[$19>>2] = $17;
   HEAP32[$5>>2] = 0;
   $20 = ((($5)) + 5924|0);
   HEAP32[$20>>2] = -1;
   $21 = HEAP32[$18>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $0;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $21;
   _TraceLog(3,15465,$vararg_buffer1);
   $22 = HEAP32[$1>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $0;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $22;
   _TraceLog(3,15493,$vararg_buffer5);
   $23 = HEAP32[$14>>2]|0;
   HEAP32[$vararg_buffer9>>2] = $0;
   $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
   HEAP32[$vararg_ptr12>>2] = $23;
   _TraceLog(3,15518,$vararg_buffer9);
   $24 = ((($1)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$vararg_buffer13>>2] = $0;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $25;
   _TraceLog(3,15540,$vararg_buffer13);
   STACKTOP = sp;return ($5|0);
  }
 }
 $26 = (_IsFileExtension($0,15569)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  $28 = ((($5)) + 8|0);
  $29 = (_jar_xm_create_context_from_file($28,48000,$0)|0);
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = HEAP32[$28>>2]|0;
   _jar_xm_set_max_loop_count($31,0);
   $32 = ((($5)) + 5896|0);
   _InitAudioStream($3,48000,16,2);
   ;HEAP32[$32>>2]=HEAP32[$3>>2]|0;HEAP32[$32+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$32+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$32+20>>2]=HEAP32[$3+20>>2]|0;HEAP32[$32+24>>2]=HEAP32[$3+24>>2]|0;
   $33 = HEAP32[$28>>2]|0;
   $34 = (_jar_xm_get_remaining_samples($33)|0);
   $35 = tempRet0;
   $36 = ((($5)) + 5928|0);
   HEAP32[$36>>2] = $34;
   $37 = ((($5)) + 5932|0);
   HEAP32[$37>>2] = $34;
   HEAP32[$5>>2] = 2;
   $38 = ((($5)) + 5924|0);
   HEAP32[$38>>2] = -1;
   $39 = HEAP32[$36>>2]|0;
   HEAP32[$vararg_buffer17>>2] = $0;
   $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
   HEAP32[$vararg_ptr20>>2] = $39;
   _TraceLog(3,15573,$vararg_buffer17);
   $40 = HEAP32[$36>>2]|0;
   $41 = (+($40>>>0));
   $42 = $41 / 48000.0;
   $43 = $42;
   HEAP32[$vararg_buffer21>>2] = $0;
   $vararg_ptr24 = ((($vararg_buffer21)) + 8|0);
   HEAPF64[$vararg_ptr24>>3] = $43;
   _TraceLog(3,15603,$vararg_buffer21);
   STACKTOP = sp;return ($5|0);
  } else {
   HEAP32[$vararg_buffer25>>2] = $0;
   _TraceLog(1,15636,$vararg_buffer25);
   STACKTOP = sp;return ($5|0);
  }
 }
 $44 = (_IsFileExtension($0,15669)|0);
 $45 = ($44|0)==(0);
 if ($45) {
  HEAP32[$vararg_buffer39>>2] = $0;
  _TraceLog(1,13705,$vararg_buffer39);
  STACKTOP = sp;return ($5|0);
 }
 $46 = ((($5)) + 12|0);
 (_jar_mod_init($46)|0);
 $47 = (_jar_mod_load_file($46,$0)|0);
 $48 = ($47|0)==(0);
 if ($48) {
  HEAP32[$vararg_buffer36>>2] = $0;
  _TraceLog(1,15739,$vararg_buffer36);
  STACKTOP = sp;return ($5|0);
 } else {
  $49 = ((($5)) + 5896|0);
  _InitAudioStream($4,48000,16,2);
  ;HEAP32[$49>>2]=HEAP32[$4>>2]|0;HEAP32[$49+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$49+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$49+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$49+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$49+20>>2]=HEAP32[$4+20>>2]|0;HEAP32[$49+24>>2]=HEAP32[$4+24>>2]|0;
  $50 = (_jar_mod_max_samples($46)|0);
  $51 = ((($5)) + 5928|0);
  HEAP32[$51>>2] = $50;
  $52 = ((($5)) + 5932|0);
  HEAP32[$52>>2] = $50;
  HEAP32[$5>>2] = 3;
  $53 = ((($5)) + 5924|0);
  HEAP32[$53>>2] = -1;
  HEAP32[$vararg_buffer28>>2] = $0;
  $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
  HEAP32[$vararg_ptr31>>2] = $50;
  _TraceLog(3,15674,$vararg_buffer28);
  $54 = HEAP32[$51>>2]|0;
  $55 = (+($54>>>0));
  $56 = $55 / 48000.0;
  $57 = $56;
  HEAP32[$vararg_buffer32>>2] = $0;
  $vararg_ptr35 = ((($vararg_buffer32)) + 8|0);
  HEAPF64[$vararg_ptr35>>3] = $57;
  _TraceLog(3,15705,$vararg_buffer32);
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function _InitAudioStream($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 40|0;
 $5 = ((($4)) + 8|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;
 HEAP32[$4>>2] = $1;
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = $2;
 $$off = (($3) + -1)|0;
 $7 = ($$off>>>0)<(2);
 L1: do {
  if ($7) {
   $9 = ((($4)) + 8|0);
   HEAP32[$9>>2] = $3;
   switch ($3|0) {
   case 1:  {
    $55 = $9;
    label = 4;
    break L1;
    break;
   }
   case 2:  {
    break;
   }
   default: {
    $26 = $9;
    break L1;
   }
   }
   switch ($2|0) {
   case 8:  {
    $13 = ((($4)) + 12|0);
    HEAP32[$13>>2] = 4354;
    $26 = $9;
    break L1;
    break;
   }
   case 16:  {
    $14 = ((($4)) + 12|0);
    HEAP32[$14>>2] = 4355;
    $26 = $9;
    break L1;
    break;
   }
   case 32:  {
    $15 = ((($4)) + 12|0);
    HEAP32[$15>>2] = 65553;
    $26 = $9;
    break L1;
    break;
   }
   default: {
    HEAP32[$vararg_buffer4>>2] = $2;
    _TraceLog(1,15829,$vararg_buffer4);
    $26 = $9;
    break L1;
   }
   }
  } else {
   HEAP32[$vararg_buffer>>2] = $3;
   _TraceLog(1,15773,$vararg_buffer);
   $8 = ((($4)) + 8|0);
   HEAP32[$8>>2] = 1;
   $55 = $8;
   label = 4;
  }
 } while(0);
 L10: do {
  if ((label|0) == 4) {
   switch ($2|0) {
   case 8:  {
    $10 = ((($4)) + 12|0);
    HEAP32[$10>>2] = 4352;
    $26 = $55;
    break L10;
    break;
   }
   case 16:  {
    $11 = ((($4)) + 12|0);
    HEAP32[$11>>2] = 4353;
    $26 = $55;
    break L10;
    break;
   }
   case 32:  {
    $12 = ((($4)) + 12|0);
    HEAP32[$12>>2] = 65552;
    $26 = $55;
    break L10;
    break;
   }
   default: {
    HEAP32[$vararg_buffer1>>2] = $2;
    _TraceLog(1,15829,$vararg_buffer1);
    $26 = $55;
    break L10;
   }
   }
  }
 } while(0);
 $16 = ((($4)) + 16|0);
 _alGenSources(1,($16|0));
 $17 = HEAP32[$16>>2]|0;
 _alSourcef(($17|0),4099,1.0);
 $18 = HEAP32[$16>>2]|0;
 _alSourcef(($18|0),4106,1.0);
 $19 = HEAP32[$16>>2]|0;
 _alSource3f(($19|0),4100,0.0,0.0,0.0);
 $20 = HEAP32[$16>>2]|0;
 _alSource3f(($20|0),4102,0.0,0.0,0.0);
 $21 = ((($4)) + 20|0);
 _alGenBuffers(2,($21|0));
 $22 = HEAP32[$6>>2]|0;
 $23 = $22 << 9;
 $24 = $23 & 536870400;
 $25 = HEAP32[$26>>2]|0;
 $27 = Math_imul($24, $25)|0;
 $28 = (_calloc($27,1)|0);
 $29 = ((($4)) + 12|0);
 $30 = ((($4)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$29>>2]|0;
 $33 = HEAP32[$6>>2]|0;
 $34 = $33 << 9;
 $35 = $34 & 536870400;
 $36 = HEAP32[$26>>2]|0;
 $37 = Math_imul($35, $36)|0;
 $38 = HEAP32[$4>>2]|0;
 _alBufferData(($31|0),($32|0),($28|0),($37|0),($38|0));
 $39 = ((($4)) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$29>>2]|0;
 $42 = HEAP32[$6>>2]|0;
 $43 = $42 << 9;
 $44 = $43 & 536870400;
 $45 = HEAP32[$26>>2]|0;
 $46 = Math_imul($44, $45)|0;
 $47 = HEAP32[$4>>2]|0;
 _alBufferData(($40|0),($41|0),($28|0),($46|0),($47|0));
 _free($28);
 $48 = HEAP32[$16>>2]|0;
 _alSourceQueueBuffers(($48|0),2,($21|0));
 $49 = HEAP32[$16>>2]|0;
 $50 = HEAP32[$4>>2]|0;
 $51 = HEAP32[$6>>2]|0;
 $52 = HEAP32[$26>>2]|0;
 $53 = ($52|0)==(1);
 $54 = $53 ? 13929 : 13934;
 HEAP32[$vararg_buffer7>>2] = $49;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $50;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = $51;
 $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
 HEAP32[$vararg_ptr12>>2] = $54;
 _TraceLog(0,15878,$vararg_buffer7);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$4+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[$4+24>>2]|0;
 STACKTOP = sp;return;
}
function _UnloadMusicStream($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 $1 = ((($0)) + 5896|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$1+20>>2]|0;HEAP32[$$byval_copy+24>>2]=HEAP32[$1+24>>2]|0;
 _CloseAudioStream($$byval_copy);
 $2 = HEAP32[$0>>2]|0;
 switch ($2|0) {
 case 0:  {
  $3 = ((($0)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  _stb_vorbis_close($4);
  _free($0);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $5 = ((($0)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  _jar_xm_free_context($6);
  _free($0);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $7 = ((($0)) + 12|0);
  _jar_mod_unload($7);
  _free($0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _free($0);
  STACKTOP = sp;return;
 }
 }
}
function _CloseAudioStream($0) {
 $0 = $0|0;
 var $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 _alSourceStop(($4|0));
 HEAP32[$1>>2] = 0;
 $5 = HEAP32[$3>>2]|0;
 _alGetSourcei(($5|0),4117,($1|0));
 HEAP32[$2>>2] = 0;
 $$pr = HEAP32[$1>>2]|0;
 $6 = ($$pr|0)>(0);
 if ($6) {
  while(1) {
   $7 = HEAP32[$3>>2]|0;
   _alSourceUnqueueBuffers(($7|0),1,($2|0));
   $8 = HEAP32[$1>>2]|0;
   $9 = (($8) + -1)|0;
   HEAP32[$1>>2] = $9;
   $10 = ($8|0)>(1);
   if (!($10)) {
    break;
   }
  }
 }
 _alDeleteSources(1,($3|0));
 $11 = ((($0)) + 20|0);
 _alDeleteBuffers(2,($11|0));
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $12;
 _TraceLog(0,15943,$vararg_buffer);
 STACKTOP = sp;return;
}
function _PlayMusicStream($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5912|0);
 $2 = HEAP32[$1>>2]|0;
 _alSourcePlay(($2|0));
 return;
}
function _StopMusicStream($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5912|0);
 $2 = HEAP32[$1>>2]|0;
 _alSourceStop(($2|0));
 $3 = HEAP32[$0>>2]|0;
 switch ($3|0) {
 case 0:  {
  $4 = ((($0)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  (_stb_vorbis_seek_start($5)|0);
  break;
 }
 case 3:  {
  $6 = ((($0)) + 12|0);
  _jar_mod_seek_start($6);
  break;
 }
 default: {
 }
 }
 $7 = ((($0)) + 5928|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 5932|0);
 HEAP32[$9>>2] = $8;
 return;
}
function _stb_vorbis_seek_start($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = ((($0)) + 52|0);
  $5 = HEAP32[$4>>2]|0;
  _set_file_offset($0,$5);
  $6 = ((($0)) + 992|0);
  HEAP32[$6>>2] = 0;
  $7 = ((($0)) + 1377|0);
  HEAP8[$7>>0] = 1;
  $8 = ((($0)) + 1380|0);
  HEAP32[$8>>2] = -1;
  $9 = (_vorbis_pump_first_frame($0)|0);
  $$0 = $9;
  return ($$0|0);
 } else {
  _error($0,2);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _UpdateMusicStream($0) {
 $0 = $0|0;
 var $$ = 0, $$04446 = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 5896|0);
 $4 = ((($0)) + 5912|0);
 $5 = HEAP32[$4>>2]|0;
 _alGetSourcei(($5|0),4112,($1|0));
 $6 = HEAP32[$4>>2]|0;
 _alGetSourcei(($6|0),4118,($2|0));
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = ((($0)) + 5900|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << 9;
 $12 = $11 & 536870400;
 $13 = ((($0)) + 5904|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = Math_imul($12, $14)|0;
 $16 = (_calloc($15,1)|0);
 $17 = HEAP32[$2>>2]|0;
 $18 = ($17|0)>(0);
 L4: do {
  if ($18) {
   $19 = ((($0)) + 5932|0);
   $20 = ((($0)) + 4|0);
   $21 = ((($0)) + 8|0);
   $22 = ((($0)) + 12|0);
   $$04446 = 0;
   while(1) {
    $25 = HEAP32[$19>>2]|0;
    $26 = ($25>>>0)<(4096);
    $$ = $26 ? $25 : 4096;
    $27 = HEAP32[$0>>2]|0;
    switch ($27|0) {
    case 0:  {
     $28 = HEAP32[$20>>2]|0;
     $29 = HEAP32[$13>>2]|0;
     $30 = Math_imul($29, $$)|0;
     (_stb_vorbis_get_samples_short_interleaved($28,$29,$16,$30)|0);
     break;
    }
    case 2:  {
     $31 = HEAP32[$21>>2]|0;
     _jar_xm_generate_samples_16bit($31,$16,$$);
     break;
    }
    case 3:  {
     _jar_mod_fillbuffer($22,$16,$$,0);
     break;
    }
    default: {
    }
    }
    ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$3+20>>2]|0;HEAP32[$$byval_copy+24>>2]=HEAP32[$3+24>>2]|0;
    _UpdateAudioStream($$byval_copy,$16,$$);
    $32 = HEAP32[$19>>2]|0;
    $33 = (($32) - ($$))|0;
    HEAP32[$19>>2] = $33;
    $34 = ($33|0)==(0);
    $24 = (($$04446) + 1)|0;
    if ($34) {
     break;
    }
    $23 = ($24|0)<($17|0);
    if ($23) {
     $$04446 = $24;
    } else {
     break L4;
    }
   }
   _free($16);
   _StopMusicStream($0);
   $35 = ((($0)) + 5924|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)>(0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = (($36) + -1)|0;
   HEAP32[$35>>2] = $38;
   _PlayMusicStream($0);
   STACKTOP = sp;return;
  }
 } while(0);
 _free($16);
 $39 = HEAP32[$1>>2]|0;
 $40 = ($39|0)==(4114);
 if ($40) {
  STACKTOP = sp;return;
 }
 _PlayMusicStream($0);
 STACKTOP = sp;return;
}
function _UpdateAudioStream($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = sp + 4|0;
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 _alSourceUnqueueBuffers(($5|0),1,($3|0));
 $6 = (_alGetError()|0);
 $7 = ($6|0)==(40963);
 if ($7) {
  $20 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $20;
  _TraceLog(1,15982,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  $8 = HEAP32[$3>>2]|0;
  $9 = ((($0)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = Math_imul($12, $2)|0;
  $14 = $13 >>> 3;
  $15 = ((($0)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = Math_imul($14, $16)|0;
  $18 = HEAP32[$0>>2]|0;
  _alBufferData(($8|0),($10|0),($1|0),($17|0),($18|0));
  $19 = HEAP32[$4>>2]|0;
  _alSourceQueueBuffers(($19|0),1,($3|0));
  STACKTOP = sp;return;
 }
}
function _SetMusicVolume($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 5912|0);
 $3 = HEAP32[$2>>2]|0;
 _alSourcef(($3|0),4106,(+$1));
 return;
}
function _Vector2Distance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$0>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 - $3;
 $5 = $4 * $4;
 $6 = ((($0)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($1)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 - $9;
 $11 = $10 * $10;
 $12 = $5 + $11;
 $13 = (+Math_sqrt((+$12)));
 return (+$13);
}
function _Vector2Angle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = ((($0)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $3 - $5;
 $7 = +HEAPF32[$1>>2];
 $8 = +HEAPF32[$0>>2];
 $9 = $7 - $8;
 $10 = (+Math_atan2((+$6),(+$9)));
 $11 = $10 * 57.2957763671875;
 $12 = $11 < 0.0;
 $13 = $11 + 360.0;
 $$0 = $12 ? $13 : $11;
 return (+$$0);
}
function _Vector3Zero($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$0>>2] = 0.0;
 $1 = ((($0)) + 4|0);
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($0)) + 8|0);
 HEAPF32[$2>>2] = 0.0;
 return;
}
function _MatrixOrtho($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$sroa$10$0$$sroa_idx24 = 0, $$sroa$11$0$$sroa_idx26 = 0, $$sroa$12$0$$sroa_idx28 = 0, $$sroa$13$0$$sroa_idx30 = 0, $$sroa$14$0$$sroa_idx32 = 0, $$sroa$15$0$$sroa_idx34 = 0, $$sroa$16$0$$sroa_idx36 = 0, $$sroa$17$0$$sroa_idx38 = 0, $$sroa$18$0$$sroa_idx40 = 0, $$sroa$4$0$$sroa_idx12 = 0, $$sroa$5$0$$sroa_idx14 = 0, $$sroa$6$0$$sroa_idx16 = 0, $$sroa$7$0$$sroa_idx18 = 0, $$sroa$8$0$$sroa_idx20 = 0, $$sroa$9$0$$sroa_idx22 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0;
 var $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $7 = $2 - $1;
 $8 = $7;
 $9 = $4 - $3;
 $10 = $9;
 $11 = $6 - $5;
 $12 = $11;
 $13 = 2.0 / $8;
 $14 = 2.0 / $10;
 $15 = -2.0 / $12;
 $16 = $1 + $2;
 $17 = -$16;
 $18 = $8;
 $19 = $17 / $18;
 $20 = $19;
 $21 = $3 + $4;
 $22 = -$21;
 $23 = $10;
 $24 = $22 / $23;
 $25 = $24;
 $26 = $5 + $6;
 $27 = -$26;
 $28 = $12;
 $29 = $27 / $28;
 $30 = $29;
 HEAPF32[$0>>2] = $13;
 $$sroa$4$0$$sroa_idx12 = ((($0)) + 4|0);
 HEAPF32[$$sroa$4$0$$sroa_idx12>>2] = 0.0;
 $$sroa$5$0$$sroa_idx14 = ((($0)) + 8|0);
 HEAPF32[$$sroa$5$0$$sroa_idx14>>2] = 0.0;
 $$sroa$6$0$$sroa_idx16 = ((($0)) + 12|0);
 HEAPF32[$$sroa$6$0$$sroa_idx16>>2] = $20;
 $$sroa$7$0$$sroa_idx18 = ((($0)) + 16|0);
 HEAPF32[$$sroa$7$0$$sroa_idx18>>2] = 0.0;
 $$sroa$8$0$$sroa_idx20 = ((($0)) + 20|0);
 HEAPF32[$$sroa$8$0$$sroa_idx20>>2] = $14;
 $$sroa$9$0$$sroa_idx22 = ((($0)) + 24|0);
 HEAPF32[$$sroa$9$0$$sroa_idx22>>2] = 0.0;
 $$sroa$10$0$$sroa_idx24 = ((($0)) + 28|0);
 HEAPF32[$$sroa$10$0$$sroa_idx24>>2] = $25;
 $$sroa$11$0$$sroa_idx26 = ((($0)) + 32|0);
 HEAPF32[$$sroa$11$0$$sroa_idx26>>2] = 0.0;
 $$sroa$12$0$$sroa_idx28 = ((($0)) + 36|0);
 HEAPF32[$$sroa$12$0$$sroa_idx28>>2] = 0.0;
 $$sroa$13$0$$sroa_idx30 = ((($0)) + 40|0);
 HEAPF32[$$sroa$13$0$$sroa_idx30>>2] = $15;
 $$sroa$14$0$$sroa_idx32 = ((($0)) + 44|0);
 HEAPF32[$$sroa$14$0$$sroa_idx32>>2] = $30;
 $$sroa$15$0$$sroa_idx34 = ((($0)) + 48|0);
 HEAPF32[$$sroa$15$0$$sroa_idx34>>2] = 0.0;
 $$sroa$16$0$$sroa_idx36 = ((($0)) + 52|0);
 HEAPF32[$$sroa$16$0$$sroa_idx36>>2] = 0.0;
 $$sroa$17$0$$sroa_idx38 = ((($0)) + 56|0);
 HEAPF32[$$sroa$17$0$$sroa_idx38>>2] = 0.0;
 $$sroa$18$0$$sroa_idx40 = ((($0)) + 60|0);
 HEAPF32[$$sroa$18$0$$sroa_idx40>>2] = 1.0;
 return;
}
function _IsGestureDetected($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[1271]|0;
 $2 = HEAP32[84849]|0;
 $3 = $2 & $1;
 $4 = ($3|0)==($0|0);
 $$ = $4&1;
 return ($$|0);
}
function _ProcessGestureEvent($0) {
 $0 = $0|0;
 var $$$sink = 0, $$sink = 0, $$sink10 = 0, $$sink11 = 0, $$sink16 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0;
 var $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0;
 var $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0;
 var $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $moveDownPosition$byval_copy11 = 0;
 var $moveDownPosition2$byval_copy12 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $moveDownPosition2$byval_copy12 = sp + 8|0;
 $moveDownPosition$byval_copy11 = sp;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[84850] = $2;
 $3 = ($2|0)<(2);
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(1);
 if (!($3)) {
  if ($5) {
   $88 = ((($0)) + 24|0);
   $89 = $88;
   $90 = $89;
   $91 = HEAP32[$90>>2]|0;
   $92 = (($89) + 4)|0;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $95 = 26216;
   $96 = $95;
   HEAP32[$96>>2] = $91;
   $97 = (($95) + 4)|0;
   $98 = $97;
   HEAP32[$98>>2] = $94;
   $99 = ((($0)) + 32|0);
   $100 = $99;
   $101 = $100;
   $102 = HEAP32[$101>>2]|0;
   $103 = (($100) + 4)|0;
   $104 = $103;
   $105 = HEAP32[$104>>2]|0;
   $106 = 26256;
   $107 = $106;
   HEAP32[$107>>2] = $102;
   $108 = (($106) + 4)|0;
   $109 = $108;
   HEAP32[$109>>2] = $105;
   $110 = +HEAPF32[6564];
   $111 = +HEAPF32[6554];
   $112 = $110 - $111;
   HEAPF32[6566] = $112;
   $113 = +HEAPF32[(26260)>>2];
   $114 = +HEAPF32[(26220)>>2];
   $115 = $113 - $114;
   HEAPF32[(26268)>>2] = $115;
   HEAP32[84849] = 4;
   STACKTOP = sp;return;
  }
  switch ($4|0) {
  case 2:  {
   ;HEAP32[$moveDownPosition$byval_copy11>>2]=HEAP32[26248>>2]|0;HEAP32[$moveDownPosition$byval_copy11+4>>2]=HEAP32[26248+4>>2]|0;
   ;HEAP32[$moveDownPosition2$byval_copy12>>2]=HEAP32[26272>>2]|0;HEAP32[$moveDownPosition2$byval_copy12+4>>2]=HEAP32[26272+4>>2]|0;
   $116 = (+_Vector2Distance($moveDownPosition$byval_copy11,$moveDownPosition2$byval_copy12));
   HEAPF32[84855] = $116;
   $117 = 26248;
   $118 = $117;
   $119 = HEAP32[$118>>2]|0;
   $120 = (($117) + 4)|0;
   $121 = $120;
   $122 = HEAP32[$121>>2]|0;
   $123 = 26216;
   $124 = $123;
   HEAP32[$124>>2] = $119;
   $125 = (($123) + 4)|0;
   $126 = $125;
   HEAP32[$126>>2] = $122;
   $127 = 26272;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (($127) + 4)|0;
   $131 = $130;
   $132 = HEAP32[$131>>2]|0;
   $133 = 26256;
   $134 = $133;
   HEAP32[$134>>2] = $129;
   $135 = (($133) + 4)|0;
   $136 = $135;
   HEAP32[$136>>2] = $132;
   $137 = ((($0)) + 24|0);
   $138 = $137;
   $139 = $138;
   $140 = HEAP32[$139>>2]|0;
   $141 = (($138) + 4)|0;
   $142 = $141;
   $143 = HEAP32[$142>>2]|0;
   $144 = 26248;
   $145 = $144;
   HEAP32[$145>>2] = $140;
   $146 = (($144) + 4)|0;
   $147 = $146;
   HEAP32[$147>>2] = $143;
   $148 = ((($0)) + 32|0);
   $149 = $148;
   $150 = $149;
   $151 = HEAP32[$150>>2]|0;
   $152 = (($149) + 4)|0;
   $153 = $152;
   $154 = HEAP32[$153>>2]|0;
   $155 = 26272;
   $156 = $155;
   HEAP32[$156>>2] = $151;
   $157 = (($155) + 4)|0;
   $158 = $157;
   HEAP32[$158>>2] = $154;
   $159 = +HEAPF32[6568];
   $160 = +HEAPF32[6562];
   $161 = $159 - $160;
   HEAPF32[6566] = $161;
   $162 = +HEAPF32[(26276)>>2];
   $163 = +HEAPF32[(26252)>>2];
   $164 = $162 - $163;
   HEAPF32[(26268)>>2] = $164;
   ;HEAP32[$moveDownPosition$byval_copy11>>2]=HEAP32[26216>>2]|0;HEAP32[$moveDownPosition$byval_copy11+4>>2]=HEAP32[26216+4>>2]|0;
   ;HEAP32[$moveDownPosition2$byval_copy12>>2]=HEAP32[26248>>2]|0;HEAP32[$moveDownPosition2$byval_copy12+4>>2]=HEAP32[26248+4>>2]|0;
   $165 = (+_Vector2Distance($moveDownPosition$byval_copy11,$moveDownPosition2$byval_copy12));
   $166 = !($165 >= 0.004999999888241291);
   if ($166) {
    ;HEAP32[$moveDownPosition$byval_copy11>>2]=HEAP32[26256>>2]|0;HEAP32[$moveDownPosition$byval_copy11+4>>2]=HEAP32[26256+4>>2]|0;
    ;HEAP32[$moveDownPosition2$byval_copy12>>2]=HEAP32[26272>>2]|0;HEAP32[$moveDownPosition2$byval_copy12+4>>2]=HEAP32[26272+4>>2]|0;
    $167 = (+_Vector2Distance($moveDownPosition$byval_copy11,$moveDownPosition2$byval_copy12));
    $168 = !($167 >= 0.004999999888241291);
    if ($168) {
     $$sink16 = 4;
    } else {
     label = 29;
    }
   } else {
    label = 29;
   }
   if ((label|0) == 29) {
    ;HEAP32[$moveDownPosition$byval_copy11>>2]=HEAP32[26248>>2]|0;HEAP32[$moveDownPosition$byval_copy11+4>>2]=HEAP32[26248+4>>2]|0;
    ;HEAP32[$moveDownPosition2$byval_copy12>>2]=HEAP32[26272>>2]|0;HEAP32[$moveDownPosition2$byval_copy12+4>>2]=HEAP32[26272+4>>2]|0;
    $169 = (+_Vector2Distance($moveDownPosition$byval_copy11,$moveDownPosition2$byval_copy12));
    $170 = +HEAPF32[84855];
    $171 = $169 - $170;
    $172 = $171 < 0.0;
    $$sink11 = $172 ? 256 : 512;
    $$sink16 = $$sink11;
   }
   HEAP32[84849] = $$sink16;
   ;HEAP32[$moveDownPosition$byval_copy11>>2]=HEAP32[26248>>2]|0;HEAP32[$moveDownPosition$byval_copy11+4>>2]=HEAP32[26248+4>>2]|0;
   ;HEAP32[$moveDownPosition2$byval_copy12>>2]=HEAP32[26272>>2]|0;HEAP32[$moveDownPosition2$byval_copy12+4>>2]=HEAP32[26272+4>>2]|0;
   $173 = (+_Vector2Angle($moveDownPosition$byval_copy11,$moveDownPosition2$byval_copy12));
   $174 = 360.0 - $173;
   HEAPF32[84856] = $174;
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   HEAPF32[84855] = 0.0;
   HEAPF32[84856] = 0.0;
   HEAPF32[6566] = 0.0;
   HEAPF32[(26268)>>2] = 0.0;
   HEAP32[84850] = 0;
   HEAP32[84849] = 0;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 }
 if ($5) {
  $6 = HEAP32[84851]|0;
  $7 = (($6) + 1)|0;
  HEAP32[84851] = $7;
  $8 = HEAP32[84849]|0;
  $9 = ($8|0)==(0);
  $10 = ($6|0)>(0);
  $or$cond = $10 & $9;
  if ($or$cond) {
   $11 = ((($0)) + 24|0);
   ;HEAP32[$moveDownPosition$byval_copy11>>2]=HEAP32[26216>>2]|0;HEAP32[$moveDownPosition$byval_copy11+4>>2]=HEAP32[26216+4>>2]|0;
   ;HEAP32[$moveDownPosition2$byval_copy12>>2]=HEAP32[$11>>2]|0;HEAP32[$moveDownPosition2$byval_copy12+4>>2]=HEAP32[$11+4>>2]|0;
   $12 = (+_Vector2Distance($moveDownPosition$byval_copy11,$moveDownPosition2$byval_copy12));
   $13 = $12 < 0.029999999329447746;
   if ($13) {
    HEAP32[84849] = 2;
    HEAP32[84851] = 0;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[84851] = 1;
   HEAP32[84849] = 1;
  }
  $14 = ((($0)) + 24|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = 26216;
  $22 = $21;
  HEAP32[$22>>2] = $17;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $20;
  $25 = 26224;
  $26 = $25;
  HEAP32[$26>>2] = $17;
  $27 = (($25) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = $20;
  $29 = 26232;
  $30 = $29;
  HEAP32[$30>>2] = $17;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = $20;
  $33 = ((($0)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  HEAP32[1272] = $34;
  HEAPF32[6560] = 0.0;
  HEAPF32[(26244)>>2] = 0.0;
  STACKTOP = sp;return;
 }
 switch ($4|0) {
 case 0:  {
  $35 = HEAP32[84849]|0;
  $36 = ($35|0)==(8);
  if ($36) {
   $37 = ((($0)) + 24|0);
   $38 = $37;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = 26232;
   $45 = $44;
   HEAP32[$45>>2] = $40;
   $46 = (($44) + 4)|0;
   $47 = $46;
   HEAP32[$47>>2] = $43;
  }
  ;HEAP32[$moveDownPosition$byval_copy11>>2]=HEAP32[26216>>2]|0;HEAP32[$moveDownPosition$byval_copy11+4>>2]=HEAP32[26216+4>>2]|0;
  ;HEAP32[$moveDownPosition2$byval_copy12>>2]=HEAP32[26232>>2]|0;HEAP32[$moveDownPosition2$byval_copy12+4>>2]=HEAP32[26232+4>>2]|0;
  $48 = (+_Vector2Distance($moveDownPosition$byval_copy11,$moveDownPosition2$byval_copy12));
  $49 = $48 / 0.0;
  HEAPF32[84852] = $49;
  HEAP32[84853] = 0;
  $50 = $49 > 5.0000002374872565E-4;
  if ($50) {
   $51 = HEAP32[1272]|0;
   $52 = ((($0)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($51|0)==($53|0);
   if ($54) {
    ;HEAP32[$moveDownPosition$byval_copy11>>2]=HEAP32[26216>>2]|0;HEAP32[$moveDownPosition$byval_copy11+4>>2]=HEAP32[26216+4>>2]|0;
    ;HEAP32[$moveDownPosition2$byval_copy12>>2]=HEAP32[26232>>2]|0;HEAP32[$moveDownPosition2$byval_copy12+4>>2]=HEAP32[26232+4>>2]|0;
    $55 = (+_Vector2Angle($moveDownPosition$byval_copy11,$moveDownPosition2$byval_copy12));
    $56 = 360.0 - $55;
    HEAPF32[84854] = $56;
    $57 = $56 < 30.0;
    $58 = $56 > 330.0;
    $or$cond3 = $57 | $58;
    if ($or$cond3) {
     $$sink10 = 16;
    } else {
     $59 = $56 > 30.0;
     $60 = $56 < 120.0;
     $or$cond5 = $59 & $60;
     if ($or$cond5) {
      $$sink10 = 64;
     } else {
      $61 = $56 > 120.0;
      $62 = $56 < 210.0;
      $or$cond7 = $61 & $62;
      $63 = $56 > 210.0;
      $64 = $56 < 300.0;
      $or$cond9 = $63 & $64;
      $$sink = $or$cond9 ? 128 : 0;
      $$$sink = $or$cond7 ? 32 : $$sink;
      $$sink10 = $$$sink;
     }
    }
   } else {
    label = 16;
   }
  } else {
   label = 16;
  }
  if ((label|0) == 16) {
   HEAPF32[84852] = 0.0;
   HEAPF32[84854] = 0.0;
   $$sink10 = 0;
  }
  HEAP32[84849] = $$sink10;
  HEAPF32[6556] = 0.0;
  HEAPF32[(26228)>>2] = 0.0;
  HEAP32[84850] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $65 = HEAP32[84853]|0;
  $66 = ($65|0)==(0);
  if ($66) {
   HEAP32[84853] = 1;
  }
  $67 = ((($0)) + 24|0);
  $68 = $67;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($68) + 4)|0;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = 26248;
  $75 = $74;
  HEAP32[$75>>2] = $70;
  $76 = (($74) + 4)|0;
  $77 = $76;
  HEAP32[$77>>2] = $73;
  $78 = HEAP32[84849]|0;
  $79 = ($78|0)==(4);
  if ($79) {
   ;HEAP32[$moveDownPosition$byval_copy11>>2]=HEAP32[26216>>2]|0;HEAP32[$moveDownPosition$byval_copy11+4>>2]=HEAP32[26216+4>>2]|0;
   ;HEAP32[$moveDownPosition2$byval_copy12>>2]=HEAP32[26248>>2]|0;HEAP32[$moveDownPosition2$byval_copy12+4>>2]=HEAP32[26248+4>>2]|0;
   $80 = (+_Vector2Distance($moveDownPosition$byval_copy11,$moveDownPosition2$byval_copy12));
   $81 = !($80 >= 0.014999999664723873);
   if (!($81)) {
    HEAP32[84849] = 8;
   }
  }
  $82 = +HEAPF32[6562];
  $83 = +HEAPF32[6556];
  $84 = $82 - $83;
  HEAPF32[6560] = $84;
  $85 = +HEAPF32[(26252)>>2];
  $86 = +HEAPF32[(26228)>>2];
  $87 = $85 - $86;
  HEAPF32[(26244)>>2] = $87;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _UpdateGestures() {
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[84849]|0;
 $$off = (($0) + -1)|0;
 $1 = ($$off>>>0)<(2);
 $2 = HEAP32[84850]|0;
 $3 = ($2|0)<(2);
 $or$cond3 = $1 & $3;
 if ($or$cond3) {
  HEAP32[84849] = 4;
 }
 $4 = HEAP32[84849]|0;
 $5 = (($4) + -16)|0;
 $6 = $5 >>> 4;
 $7 = $5 << 28;
 $8 = $6 | $7;
 switch ($8|0) {
 case 0: case 1: case 3: case 7:  {
  break;
 }
 default: {
  return;
 }
 }
 HEAP32[84849] = 0;
 return;
}
function _GetGestureDetected() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1271]|0;
 $1 = HEAP32[84849]|0;
 $2 = $1 & $0;
 return ($2|0);
}
function _GetMousePosition($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = 26280;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 return;
}
function _InitWindow($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _TraceLog(0,16035,$vararg_buffer);
 HEAP32[84860] = $2;
 _InitGraphicsDevice($0,$1);
 _LoadDefaultFont();
 _InitTimer();
 (_emscripten_set_fullscreenchange_callback((0|0),(0|0),1,(6|0))|0);
 (_emscripten_set_keypress_callback((16064|0),(0|0),1,(7|0))|0);
 (_emscripten_set_click_callback((16064|0),(0|0),1,(8|0))|0);
 (_emscripten_set_touchstart_callback((16064|0),(0|0),1,(9|0))|0);
 (_emscripten_set_touchend_callback((16064|0),(0|0),1,(9|0))|0);
 (_emscripten_set_touchmove_callback((16064|0),(0|0),1,(9|0))|0);
 (_emscripten_set_touchcancel_callback((16064|0),(0|0),1,(9|0))|0);
 (_emscripten_set_gamepadconnected_callback((0|0),1,(10|0))|0);
 (_emscripten_set_gamepaddisconnected_callback((0|0),1,(10|0))|0);
 $3 = HEAP32[84861]|0;
 $4 = (+($3|0));
 $5 = $4 * 0.5;
 HEAPF32[6570] = $5;
 $6 = HEAP32[84862]|0;
 $7 = (+($6|0));
 $8 = $7 * 0.5;
 HEAPF32[(26284)>>2] = $8;
 $9 = HEAP32[84863]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 _SetTargetFPS(60);
 _LogoAnimation();
 STACKTOP = sp;return;
}
function _InitGraphicsDevice($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$015 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr5 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 136|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 72|0;
 $3 = sp + 140|0;
 HEAP32[84861] = $0;
 HEAP32[84862] = $1;
 _MatrixIdentity($2);
 dest=339472; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 (_glfwSetErrorCallback((2|0))|0);
 $4 = (_glfwInit()|0);
 $5 = ($4|0)==(0);
 if ($5) {
  _TraceLog(2,16259,$vararg_buffer);
 }
 $6 = HEAP32[84861]|0;
 HEAP32[84884] = $6;
 $7 = HEAP32[84862]|0;
 HEAP32[84885] = $7;
 _glfwDefaultWindowHints();
 $8 = HEAP8[340464]|0;
 $9 = $8 & 4;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  _glfwWindowHint(131075,0);
 } else {
  _glfwWindowHint(131075,1);
 }
 $11 = HEAP8[340464]|0;
 $12 = $11 & 8;
 $13 = ($12<<24>>24)==(0);
 if (!($13)) {
  _glfwWindowHint(131077,1);
 }
 $14 = HEAP8[340464]|0;
 $15 = $14 & 32;
 $16 = ($15<<24>>24)==(0);
 if (!($16)) {
  _glfwWindowHint(135181,4);
  _TraceLog(0,16285,$vararg_buffer1);
 }
 $17 = (_rlGetVersion()|0);
 $18 = ($17|0)==(2);
 if ($18) {
  _glfwWindowHint(139266,2);
  _glfwWindowHint(139267,1);
 } else {
  $19 = (_rlGetVersion()|0);
  $20 = ($19|0)==(3);
  if ($20) {
   _glfwWindowHint(139266,3);
   _glfwWindowHint(139267,3);
   _glfwWindowHint(139272,204801);
   _glfwWindowHint(139270,0);
  }
 }
 $21 = HEAP32[84886]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  $47 = HEAP32[84861]|0;
  $48 = HEAP32[84862]|0;
  $49 = HEAP32[84860]|0;
  $50 = (_glfwCreateWindow(($47|0),($48|0),($49|0),(0|0),(0|0))|0);
  HEAP32[84858] = $50;
  $51 = HEAP32[84861]|0;
  HEAP32[84887] = $51;
  $52 = HEAP32[84862]|0;
  HEAP32[84888] = $52;
  $54 = $50;
 } else {
  $23 = (_glfwGetPrimaryMonitor()|0);
  $24 = (_glfwGetVideoModes(($23|0),($$byval_copy|0))|0);
  $25 = HEAP32[$$byval_copy>>2]|0;
  $26 = ($25|0)>(0);
  L22: do {
   if ($26) {
    $27 = HEAP32[84861]|0;
    $28 = HEAP32[$$byval_copy>>2]|0;
    $29 = HEAP32[84862]|0;
    $$015 = 0;
    while(1) {
     $30 = (($24) + (($$015*24)|0)|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)<($27|0);
     if (!($32)) {
      $33 = (((($24) + (($$015*24)|0)|0)) + 4|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($34|0)<($29|0);
      if (!($35)) {
       break;
      }
     }
     $36 = (($$015) + 1)|0;
     $37 = ($36|0)<($28|0);
     if ($37) {
      $$015 = $36;
     } else {
      break L22;
     }
    }
    HEAP32[84884] = $31;
    HEAP32[84885] = $34;
   }
  } while(0);
  $38 = HEAP32[84884]|0;
  $39 = HEAP32[84885]|0;
  HEAP32[$vararg_buffer3>>2] = $38;
  $vararg_ptr5 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $39;
  _TraceLog(1,16310,$vararg_buffer3);
  $40 = HEAP32[84884]|0;
  $41 = HEAP32[84885]|0;
  _SetupFramebufferSize($40,$41);
  $42 = HEAP32[84884]|0;
  $43 = HEAP32[84885]|0;
  $44 = HEAP32[84860]|0;
  $45 = (_glfwGetPrimaryMonitor()|0);
  $46 = (_glfwCreateWindow(($42|0),($43|0),($44|0),($45|0),(0|0))|0);
  HEAP32[84858] = $46;
  $54 = $46;
 }
 $53 = ($54|0)==(0|0);
 if ($53) {
  _glfwTerminate();
  _TraceLog(2,16348,$vararg_buffer6);
 } else {
  _TraceLog(0,16381,$vararg_buffer8);
  $55 = HEAP32[84887]|0;
  $56 = HEAP32[84888]|0;
  HEAP32[$vararg_buffer10>>2] = $55;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $56;
  _TraceLog(0,16421,$vararg_buffer10);
  $57 = HEAP32[84861]|0;
  $58 = HEAP32[84862]|0;
  HEAP32[$vararg_buffer14>>2] = $57;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $58;
  _TraceLog(0,16442,$vararg_buffer14);
  $59 = HEAP32[84889]|0;
  $60 = HEAP32[84890]|0;
  HEAP32[$vararg_buffer18>>2] = $59;
  $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
  HEAP32[$vararg_ptr21>>2] = $60;
  _TraceLog(0,16463,$vararg_buffer18);
 }
 $61 = HEAP32[84858]|0;
 (_glfwSetWindowSizeCallback(($61|0),(1|0))|0);
 $62 = HEAP32[84858]|0;
 (_glfwSetCursorEnterCallback(($62|0),(3|0))|0);
 $63 = HEAP32[84858]|0;
 (_glfwSetKeyCallback(($63|0),(1|0))|0);
 $64 = HEAP32[84858]|0;
 (_glfwSetMouseButtonCallback(($64|0),(1|0))|0);
 $65 = HEAP32[84858]|0;
 (_glfwSetCursorPosCallback(($65|0),(1|0))|0);
 $66 = HEAP32[84858]|0;
 (_glfwSetCharCallback(($66|0),(4|0))|0);
 $67 = HEAP32[84858]|0;
 (_glfwSetScrollCallback(($67|0),(2|0))|0);
 $68 = HEAP32[84858]|0;
 (_glfwSetWindowIconifyCallback(($68|0),(5|0))|0);
 $69 = HEAP32[84858]|0;
 _glfwMakeContextCurrent(($69|0));
 _glfwSwapInterval(0);
 $70 = HEAP8[340464]|0;
 $71 = $70 & 64;
 $72 = ($71<<24>>24)==(0);
 if ($72) {
  $73 = HEAP32[84861]|0;
  $74 = HEAP32[84862]|0;
  _rlglInit($73,$74);
  _SetupViewport();
  _rlMatrixMode(5889);
  _rlLoadIdentity();
  $75 = HEAP32[84887]|0;
  $76 = HEAP32[84889]|0;
  $77 = (($75) - ($76))|0;
  $78 = (+($77|0));
  $79 = HEAP32[84888]|0;
  $80 = HEAP32[84890]|0;
  $81 = (($79) - ($80))|0;
  $82 = (+($81|0));
  _rlOrtho(0.0,$78,$82,0.0,0.0,1.0);
  _rlMatrixMode(5888);
  _rlLoadIdentity();
  HEAP8[$3>>0] = -11;
  $83 = ((($3)) + 1|0);
  HEAP8[$83>>0] = -11;
  $84 = ((($3)) + 2|0);
  HEAP8[$84>>0] = -11;
  $85 = ((($3)) + 3|0);
  HEAP8[$85>>0] = -1;
  ;HEAP8[$$byval_copy>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$3+3>>0]|0;
  _ClearBackground($$byval_copy);
  STACKTOP = sp;return;
 }
 _glfwSwapInterval(1);
 _TraceLog(0,16488,$vararg_buffer22);
 $73 = HEAP32[84861]|0;
 $74 = HEAP32[84862]|0;
 _rlglInit($73,$74);
 _SetupViewport();
 _rlMatrixMode(5889);
 _rlLoadIdentity();
 $75 = HEAP32[84887]|0;
 $76 = HEAP32[84889]|0;
 $77 = (($75) - ($76))|0;
 $78 = (+($77|0));
 $79 = HEAP32[84888]|0;
 $80 = HEAP32[84890]|0;
 $81 = (($79) - ($80))|0;
 $82 = (+($81|0));
 _rlOrtho(0.0,$78,$82,0.0,0.0,1.0);
 _rlMatrixMode(5888);
 _rlLoadIdentity();
 HEAP8[$3>>0] = -11;
 $83 = ((($3)) + 1|0);
 HEAP8[$83>>0] = -11;
 $84 = ((($3)) + 2|0);
 HEAP8[$84>>0] = -11;
 $85 = ((($3)) + 3|0);
 HEAP8[$85>>0] = -1;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$3+3>>0]|0;
 _ClearBackground($$byval_copy);
 STACKTOP = sp;return;
}
function _InitTimer() {
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_time((0|0))|0);
 _srand($0);
 $1 = (+_GetTime());
 HEAPF64[3289] = $1;
 return;
}
function _EmscriptenFullscreenChangeCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0);
 $5 = ((($1)) + 264|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 268|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 272|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 276|0);
 $12 = HEAP32[$11>>2]|0;
 if ($4) {
  HEAP32[$vararg_buffer4>>2] = $6;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $8;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $10;
  $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = $12;
  _TraceLog(0,16192,$vararg_buffer4);
  STACKTOP = sp;return 0;
 } else {
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $12;
  _TraceLog(0,16123,$vararg_buffer);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _EmscriptenKeyboardCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(1);
 if (!($3)) {
  return 0;
 }
 $4 = ((($1)) + 32|0);
 $5 = (_strcmp($4,16116)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  return 0;
 }
 (_emscripten_exit_pointerlock()|0);
 return 0;
}
function _EmscriptenMouseCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $3 = sp;
 $4 = ($0|0)==(4);
 $5 = HEAP32[84857]|0;
 $6 = ($5|0)!=(0);
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  STACKTOP = sp;return 0;
 }
 (_emscripten_get_pointerlock_status(($3|0))|0);
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  (_emscripten_request_pointerlock((0|0),1)|0);
 } else {
  (_emscripten_exit_pointerlock()|0);
  (_emscripten_get_pointerlock_status(($3|0))|0);
 }
 HEAP32[84857] = 0;
 STACKTOP = sp;return 0;
}
function _EmscriptenTouchCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$sink = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$03$0$$sroa_idx = 0, $$sroa$2$0$$sroa_idx2 = 0, $$sroa$24$0$$sroa_idx5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 56|0;
 $3 = sp;
 switch ($0|0) {
 case 22:  {
  $$sink = 1;
  label = 4;
  break;
 }
 case 23:  {
  $$sink = 0;
  label = 4;
  break;
 }
 case 24:  {
  $$sink = 2;
  label = 4;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 4) {
  HEAP32[$3>>2] = $$sink;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($3)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($1)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($3)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 72|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($1)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($13|0));
 $15 = ((($1)) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (+($16|0));
 $$sroa$03$0$$sroa_idx = ((($3)) + 24|0);
 HEAPF32[$$sroa$03$0$$sroa_idx>>2] = $14;
 $$sroa$24$0$$sroa_idx5 = ((($3)) + 28|0);
 HEAPF32[$$sroa$24$0$$sroa_idx5>>2] = $17;
 $18 = ((($1)) + 108|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (+($19|0));
 $21 = ((($1)) + 112|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (+($22|0));
 $$sroa$0$0$$sroa_idx = ((($3)) + 32|0);
 HEAPF32[$$sroa$0$0$$sroa_idx>>2] = $20;
 $$sroa$2$0$$sroa_idx2 = ((($3)) + 36|0);
 HEAPF32[$$sroa$2$0$$sroa_idx2>>2] = $23;
 $24 = ((($3)) + 24|0);
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = 26296;
 $32 = $31;
 HEAP32[$32>>2] = $27;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $30;
 $35 = ((($3)) + 32|0);
 $36 = $35;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (26304);
 $43 = $42;
 HEAP32[$43>>2] = $38;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = (_GetScreenWidth()|0);
 $47 = (+($46|0));
 $48 = +HEAPF32[$24>>2];
 $49 = $48 / $47;
 HEAPF32[$24>>2] = $49;
 $50 = (_GetScreenHeight()|0);
 $51 = (+($50|0));
 $52 = +HEAPF32[$$sroa$24$0$$sroa_idx5>>2];
 $53 = $52 / $51;
 HEAPF32[$$sroa$24$0$$sroa_idx5>>2] = $53;
 $54 = (_GetScreenWidth()|0);
 $55 = (+($54|0));
 $56 = +HEAPF32[$35>>2];
 $57 = $56 / $55;
 HEAPF32[$35>>2] = $57;
 $58 = (_GetScreenHeight()|0);
 $59 = (+($58|0));
 $60 = +HEAPF32[$$sroa$2$0$$sroa_idx2>>2];
 $61 = $60 / $59;
 HEAPF32[$$sroa$2$0$$sroa_idx2>>2] = $61;
 dest=$$byval_copy; src=$3; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _ProcessGestureEvent($$byval_copy);
 STACKTOP = sp;return 1;
}
function _EmscriptenGamepadCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 1296|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  label = 3;
 } else {
  $6 = ((($1)) + 1300|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)<(4);
  if ($8) {
   $$sink = 1;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $$sink = 0;
 }
 $9 = ((($1)) + 1300|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (339456 + ($10<<2)|0);
 HEAP32[$11>>2] = $$sink;
 return 0;
}
function _SetTargetFPS($0) {
 $0 = $0|0;
 var $$ = 0.0, $$op = 0.0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ($0|0)<(1);
 $2 = (+($0|0));
 $3 = 1.0 / $2;
 $$ = $1 ? 0.0 : $3;
 HEAPF64[3286] = $$;
 $4 = $3;
 $$op = $4 * 1000.0;
 $5 = $$op;
 $6 = $1 ? 0.0 : $5;
 HEAPF64[$vararg_buffer>>3] = $6;
 _TraceLog(0,16072,$vararg_buffer);
 STACKTOP = sp;return;
}
function _LogoAnimation() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[84863] = 0;
 return;
}
function _GetScreenWidth() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[84861]|0;
 return ($0|0);
}
function _GetScreenHeight() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[84862]|0;
 return ($0|0);
}
function _GetTime() {
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_glfwGetTime());
 return (+$0);
}
function _ErrorCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 _TraceLog(1,20044,$vararg_buffer);
 STACKTOP = sp;return;
}
function _SetupFramebufferSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $or$cond = 0, $roundf = 0.0, $roundf38 = 0.0, $roundf39 = 0.0, $roundf40 = 0.0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 40|0;
 $3 = HEAP32[84861]|0;
 $4 = ($3|0)>($0|0);
 if (!($4)) {
  $5 = HEAP32[84862]|0;
  $6 = ($5|0)>($1|0);
  if (!($6)) {
   $30 = ($3|0)<($0|0);
   $31 = ($5|0)<($1|0);
   $or$cond = $30 | $31;
   if (!($or$cond)) {
    HEAP32[84887] = $3;
    HEAP32[84888] = $5;
    HEAP32[84889] = 0;
    HEAP32[84890] = 0;
    STACKTOP = sp;return;
   }
   HEAP32[$vararg_buffer8>>2] = $3;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $5;
   $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
   HEAP32[$vararg_ptr12>>2] = $0;
   $vararg_ptr13 = ((($vararg_buffer8)) + 12|0);
   HEAP32[$vararg_ptr13>>2] = $1;
   _TraceLog(0,19978,$vararg_buffer8);
   $32 = (+($0|0));
   $33 = (+($1|0));
   $34 = $32 / $33;
   $35 = HEAP32[84861]|0;
   $36 = (+($35|0));
   $37 = HEAP32[84862]|0;
   $38 = (+($37|0));
   $39 = $36 / $38;
   $40 = !($34 <= $39);
   if ($40) {
    $44 = $34 * $38;
    $roundf = (+_roundf((+$44)));
    $45 = (~~(($roundf)));
    HEAP32[84887] = $45;
    HEAP32[84888] = $37;
    $46 = (($45) - ($35))|0;
    HEAP32[84889] = $46;
    $$sink1 = 0;
   } else {
    HEAP32[84887] = $35;
    $41 = $36 / $34;
    $roundf38 = (+_roundf((+$41)));
    $42 = (~~(($roundf38)));
    HEAP32[84888] = $42;
    HEAP32[84889] = 0;
    $43 = (($42) - ($37))|0;
    $$sink1 = $43;
   }
   HEAP32[84890] = $$sink1;
   STACKTOP = sp;return;
  }
 }
 $7 = HEAP32[84862]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $0;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $1;
 _TraceLog(1,19835,$vararg_buffer);
 $8 = (+($0|0));
 $9 = HEAP32[84861]|0;
 $10 = (+($9|0));
 $11 = $8 / $10;
 $12 = (+($1|0));
 $13 = HEAP32[84862]|0;
 $14 = (+($13|0));
 $15 = $12 / $14;
 $16 = !($11 <= $15);
 if ($16) {
  $22 = $10 * $15;
  $roundf39 = (+_roundf((+$22)));
  $23 = (~~(($roundf39)));
  HEAP32[84887] = $23;
  HEAP32[84888] = $1;
  $24 = (($0) - ($23))|0;
  HEAP32[84889] = $24;
  $$sink = 0;
 } else {
  HEAP32[84887] = $0;
  $17 = HEAP32[84862]|0;
  $18 = (+($17|0));
  $19 = $11 * $18;
  $roundf40 = (+_roundf((+$19)));
  $20 = (~~(($roundf40)));
  HEAP32[84888] = $20;
  HEAP32[84889] = 0;
  $21 = (($1) - ($20))|0;
  $$sink = $21;
 }
 HEAP32[84890] = $$sink;
 $25 = HEAP32[84887]|0;
 $26 = (+($25|0));
 $27 = HEAP32[84861]|0;
 $28 = (+($27|0));
 $29 = $26 / $28;
 _MatrixScale($2,$29,$29,$29);
 dest=339472; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[84887] = $0;
 HEAP32[84888] = $1;
 HEAP32[$vararg_buffer4>>2] = $0;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $1;
 _TraceLog(1,19913,$vararg_buffer4);
 STACKTOP = sp;return;
}
function _WindowSizeCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlViewport(0,0,$1,$2);
 _rlMatrixMode(5889);
 _rlLoadIdentity();
 $3 = (+($1|0));
 $4 = (+($2|0));
 _rlOrtho(0.0,$3,$4,0.0,0.0,1.0);
 _rlMatrixMode(5888);
 _rlLoadIdentity();
 _rlClearScreenBuffers();
 HEAP32[84861] = $1;
 HEAP32[84862] = $2;
 HEAP32[84887] = $1;
 HEAP32[84888] = $2;
 return;
}
function _CursorEnterCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _KeyCallback($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[1274]|0;
 $6 = ($5|0)==($1|0);
 $7 = ($3|0)==(1);
 $or$cond = $7 & $6;
 if ($or$cond) {
  _glfwSetWindowShouldClose(($0|0),1);
  return;
 }
 $8 = $3&255;
 $9 = (340471 + ($1)|0);
 HEAP8[$9>>0] = $8;
 if (!($7)) {
  return;
 }
 HEAP32[1273] = $1;
 return;
}
function _MouseButtonCallback($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp + 64|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = $2&255;
 $7 = (340465 + ($1)|0);
 HEAP8[$7>>0] = $6;
 $8 = (_IsMouseButtonPressed(0)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = (_IsMouseButtonReleased(0)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$sink = 0;
   label = 3;
  }
 } else {
  $$sink = 1;
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$4>>2] = $$sink;
 }
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($4)) + 4|0);
 HEAP32[$13>>2] = 1;
 $14 = ((($4)) + 24|0);
 _GetMousePosition($5);
 $15 = $5;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = $14;
 $22 = $21;
 HEAP32[$22>>2] = $17;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $20;
 $25 = (_GetScreenWidth()|0);
 $26 = (+($25|0));
 $27 = +HEAPF32[$14>>2];
 $28 = $27 / $26;
 HEAPF32[$14>>2] = $28;
 $29 = (_GetScreenHeight()|0);
 $30 = (+($29|0));
 $31 = ((($4)) + 28|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $32 / $30;
 HEAPF32[$31>>2] = $33;
 dest=$$byval_copy; src=$4; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _ProcessGestureEvent($$byval_copy);
 STACKTOP = sp;return;
}
function _MouseCursorPosCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$byval_copy = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$2$0$$sroa_idx1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 56|0;
 $3 = sp;
 HEAP32[$3>>2] = 2;
 $4 = ((($3)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($3)) + 4|0);
 HEAP32[$5>>2] = 1;
 $6 = $1;
 $7 = $2;
 $$sroa$0$0$$sroa_idx = ((($3)) + 24|0);
 HEAPF32[$$sroa$0$0$$sroa_idx>>2] = $6;
 $$sroa$2$0$$sroa_idx1 = ((($3)) + 28|0);
 HEAPF32[$$sroa$2$0$$sroa_idx1>>2] = $7;
 $8 = ((($3)) + 24|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = 26296;
 $16 = $15;
 HEAP32[$16>>2] = $11;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $19 = (_GetScreenWidth()|0);
 $20 = (+($19|0));
 $21 = +HEAPF32[$8>>2];
 $22 = $21 / $20;
 HEAPF32[$8>>2] = $22;
 $23 = (_GetScreenHeight()|0);
 $24 = (+($23|0));
 $25 = +HEAPF32[$$sroa$2$0$$sroa_idx1>>2];
 $26 = $25 / $24;
 HEAPF32[$$sroa$2$0$$sroa_idx1>>2] = $26;
 dest=$$byval_copy; src=$3; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _ProcessGestureEvent($$byval_copy);
 STACKTOP = sp;return;
}
function _CharCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[1273] = $1;
 return;
}
function _ScrollCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (~~(($2)));
 HEAP32[84893] = $3;
 return;
}
function _WindowIconifyCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)!=(0);
 $$sink = $2&1;
 HEAP32[84892] = $$sink;
 return;
}
function _rlglInit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06066 = 0, $$06167 = 0, $$06268 = 0, $$063 = 0, $$sink64 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $exitcond = 0, $exitcond70 = 0, $exitcond71 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0;
 var $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer41 = 0, $vararg_buffer7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2528|0);
 $vararg_buffer41 = sp + 2184|0;
 $vararg_buffer39 = sp + 2176|0;
 $vararg_buffer36 = sp + 2168|0;
 $vararg_buffer34 = sp + 2160|0;
 $vararg_buffer31 = sp + 2152|0;
 $vararg_buffer29 = sp + 2144|0;
 $vararg_buffer27 = sp + 2136|0;
 $vararg_buffer25 = sp + 2128|0;
 $vararg_buffer23 = sp + 2120|0;
 $vararg_buffer21 = sp + 2112|0;
 $vararg_buffer19 = sp + 2104|0;
 $vararg_buffer17 = sp + 2096|0;
 $vararg_buffer15 = sp + 2088|0;
 $vararg_buffer13 = sp + 2080|0;
 $vararg_buffer10 = sp + 2072|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 2396|0;
 $3 = sp + 2384|0;
 $4 = sp + 2320|0;
 $5 = sp + 2256|0;
 $6 = sp + 2192|0;
 $7 = (_glGetString(7936)|0);
 HEAP32[$vararg_buffer>>2] = $7;
 _TraceLog(0,16511,$vararg_buffer);
 $8 = (_glGetString(7937)|0);
 HEAP32[$vararg_buffer1>>2] = $8;
 _TraceLog(0,16529,$vararg_buffer1);
 $9 = (_glGetString(7938)|0);
 HEAP32[$vararg_buffer4>>2] = $9;
 _TraceLog(0,16547,$vararg_buffer4);
 $10 = (_glGetString(35724)|0);
 HEAP32[$vararg_buffer7>>2] = $10;
 _TraceLog(0,16565,$vararg_buffer7);
 $11 = (_glGetString(7939)|0);
 $12 = (_strlen($11)|0);
 $13 = (($12) + 1)|0;
 $14 = (_malloc($13)|0);
 _memcpy(($14|0),($11|0),($13|0))|0;
 $$063 = 0;$$sink64 = $14;
 while(1) {
  $15 = (_strtok($$sink64,16583)|0);
  $16 = (($vararg_buffer7) + ($$063<<2)|0);
  HEAP32[$16>>2] = $15;
  $17 = ($15|0)==(0|0);
  $18 = (($$063) + 1)|0;
  if ($17) {
   break;
  } else {
   $$063 = $18;$$sink64 = 0;
  }
 }
 _free($14);
 $19 = (($$063) + -1)|0;
 HEAP32[$vararg_buffer10>>2] = $19;
 _TraceLog(0,16585,$vararg_buffer10);
 $20 = ($$063|0)>(1);
 if ($20) {
  $$06268 = 0;
  while(1) {
   $23 = (($vararg_buffer7) + ($$06268<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (_strcmp($24,16620)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP32[84165] = 1;
    $27 = (_eglGetProcAddress((16647|0))|0);
    HEAP32[84591] = $27;
    $28 = (_eglGetProcAddress((16668|0))|0);
    HEAP32[84166] = $28;
    $29 = (_eglGetProcAddress((16689|0))|0);
    HEAP32[84592] = $29;
   }
   $30 = (_strcmp($24,16713)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    HEAP32[84053] = 1;
   }
   $32 = (_strcmp($24,16733)|0);
   $33 = ($32|0)==(0);
   if ($33) {
    HEAP32[84052] = 1;
   }
   $34 = (_strcmp($24,16751)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    label = 14;
   } else {
    $36 = HEAP32[$23>>2]|0;
    $37 = (_strcmp($36,16783)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     label = 14;
    } else {
     $39 = (_strcmp($36,16816)|0);
     $40 = ($39|0)==(0);
     if ($40) {
      label = 14;
     }
    }
   }
   if ((label|0) == 14) {
    label = 0;
    HEAP32[84047] = 1;
   }
   $41 = HEAP32[$23>>2]|0;
   $42 = (_strcmp($41,16856)|0);
   $43 = ($42|0)==(0);
   if ($43) {
    label = 17;
   } else {
    $44 = (_strcmp($41,16892)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     label = 17;
    }
   }
   if ((label|0) == 17) {
    label = 0;
    HEAP32[84048] = 1;
   }
   $46 = (_strcmp($41,16925)|0);
   $47 = ($46|0)==(0);
   if ($47) {
    HEAP32[84049] = 1;
   }
   $48 = HEAP32[$23>>2]|0;
   $49 = (_strcmp($48,16950)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    HEAP32[84050] = 1;
   }
   $51 = (_strcmp($48,16983)|0);
   $52 = ($51|0)==(0);
   if ($52) {
    HEAP32[84051] = 1;
   }
   $53 = (_strcmp($48,17019)|0);
   $54 = ($53|0)==(0);
   if ($54) {
    HEAP32[84891] = 1;
    _glGetFloatv(34047,(336220|0));
   }
   $55 = (_strcmp($48,17053)|0);
   $56 = ($55|0)==(0);
   if ($56) {
    HEAP32[84054] = 1;
   }
   $57 = (($$06268) + 1)|0;
   $exitcond71 = ($57|0)==($19|0);
   if ($exitcond71) {
    break;
   } else {
    $$06268 = $57;
   }
  }
 }
 $21 = HEAP32[84165]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  _TraceLog(1,17156,$vararg_buffer15);
 } else {
  _TraceLog(0,17081,$vararg_buffer13);
 }
 $58 = HEAP32[84053]|0;
 $59 = ($58|0)==(0);
 if ($59) {
  _TraceLog(1,17292,$vararg_buffer19);
 } else {
  _TraceLog(0,17217,$vararg_buffer17);
 }
 $60 = HEAP32[84047]|0;
 $61 = ($60|0)==(0);
 if (!($61)) {
  _TraceLog(0,17384,$vararg_buffer21);
 }
 $62 = HEAP32[84048]|0;
 $63 = ($62|0)==(0);
 if (!($63)) {
  _TraceLog(0,17430,$vararg_buffer23);
 }
 $64 = HEAP32[84049]|0;
 $65 = ($64|0)==(0);
 if (!($65)) {
  _TraceLog(0,17477,$vararg_buffer25);
 }
 $66 = HEAP32[84050]|0;
 $67 = ($66|0)==(0);
 if (!($67)) {
  _TraceLog(0,17528,$vararg_buffer27);
 }
 $68 = HEAP32[84051]|0;
 $69 = ($68|0)==(0);
 if (!($69)) {
  _TraceLog(0,17575,$vararg_buffer29);
 }
 $70 = HEAP32[84891]|0;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $72 = +HEAPF32[84055];
  $73 = $72;
  HEAPF64[$vararg_buffer31>>3] = $73;
  _TraceLog(0,17622,$vararg_buffer31);
 }
 $74 = HEAP32[84054]|0;
 $75 = ($74|0)==(0);
 if (!($75)) {
  _TraceLog(0,17688,$vararg_buffer34);
 }
 HEAP32[$vararg_buffer10>>2] = -1;
 $76 = (_rlLoadTexture($vararg_buffer10,1,1,7,1)|0);
 HEAP32[84106] = $76;
 $77 = ($76|0)==(0);
 if ($77) {
  _TraceLog(1,17792,$vararg_buffer39);
 } else {
  HEAP32[$vararg_buffer36>>2] = $76;
  _TraceLog(0,17741,$vararg_buffer36);
 }
 _LoadShaderDefault($2);
 _memcpy((338232|0),($2|0),132)|0;
 _memcpy((336528|0),($2|0),132)|0;
 _LoadBuffersDefault();
 $78 = (_malloc(49152)|0);
 HEAP32[84553] = $78;
 $$06167 = 0;
 while(1) {
  $80 = HEAP32[84553]|0;
  $81 = (($80) + (($$06167*12)|0)|0);
  _Vector3Zero($3);
  ;HEAP32[$81>>2]=HEAP32[$3>>2]|0;HEAP32[$81+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$3+8>>2]|0;
  $82 = (($$06167) + 1)|0;
  $exitcond70 = ($82|0)==(4096);
  if ($exitcond70) {
   break;
  } else {
   $$06167 = $82;
  }
 }
 $79 = (_malloc(36864)|0);
 HEAP32[84107] = $79;
 $$06066 = 0;
 while(1) {
  $83 = (((($79) + (($$06066*144)|0)|0)) + 8|0);
  HEAP32[$83>>2] = 0;
  $84 = (($79) + (($$06066*144)|0)|0);
  HEAP32[$84>>2] = 0;
  $85 = (($$06066) + 1)|0;
  $exitcond = ($85|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $$06066 = $85;
  }
 }
 HEAP32[84105] = 1;
 $86 = HEAP32[84106]|0;
 $87 = ((($79)) + 8|0);
 HEAP32[$87>>2] = $86;
 HEAP32[84554] = 4;
 _MatrixIdentity($4);
 dest=337176; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(337240); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(337304); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(337368); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(337432); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(337496); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(337560); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(337624); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(337688); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(337752); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(337816); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(337880); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(337944); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(338008); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(338072); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($4);
 dest=(338136); src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($5);
 dest=336288; src=$5; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($6);
 dest=336352; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[84550] = 336352;
 _glDepthFunc(515);
 _glDisable(2929);
 _glBlendFunc(770,771);
 _glEnable(3042);
 _glCullFace(1029);
 _glFrontFace(2305);
 _glEnable(2884);
 _glClearColor(0.0,0.0,0.0,1.0);
 _glClearDepthf(1.0);
 _glClear(16640);
 HEAP32[84183] = $0;
 HEAP32[84184] = $1;
 _TraceLog(0,17831,$vararg_buffer41);
 STACKTOP = sp;return;
}
function _SetupViewport() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[84889]|0;
 $1 = (($0|0) / 2)&-1;
 $2 = HEAP32[84890]|0;
 $3 = (($2|0) / 2)&-1;
 $4 = HEAP32[84887]|0;
 $5 = (($4) - ($0))|0;
 $6 = HEAP32[84888]|0;
 $7 = (($6) - ($2))|0;
 _rlViewport($1,$3,$5,$7);
 return;
}
function _rlMatrixMode($0) {
 $0 = $0|0;
 var $modelview$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0|0) {
 case 5889:  {
  $modelview$sink = 336288;
  label = 3;
  break;
 }
 case 5888:  {
  $modelview$sink = 336352;
  label = 3;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 3) {
  HEAP32[84550] = $modelview$sink;
 }
 HEAP32[84555] = $0;
 return;
}
function _rlOrtho($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $$byval_copy = 0, $$byval_copy1 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy1 = sp + 192|0;
 $$byval_copy = sp + 128|0;
 $6 = sp + 64|0;
 $7 = sp;
 _MatrixOrtho($6,$0,$1,$2,$3,$4,$5);
 $8 = HEAP32[84550]|0;
 dest=$$byval_copy; src=$8; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy1; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($7,$$byval_copy,$$byval_copy1);
 dest=$8; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _ClearBackground($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ((($0)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($0)) + 2|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ((($0)) + 3|0);
 $7 = HEAP8[$6>>0]|0;
 _rlClearColor($1,$3,$5,$7);
 return;
}
function _rlClearColor($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (+($0&255));
 $5 = $4 / 255.0;
 $6 = (+($1&255));
 $7 = $6 / 255.0;
 $8 = (+($2&255));
 $9 = $8 / 255.0;
 $10 = (+($3&255));
 $11 = $10 / 255.0;
 _glClearColor((+$5),(+$7),(+$9),(+$11));
 return;
}
function _LoadShaderDefault($0) {
 $0 = $0|0;
 var $$sroa$12$0 = 0, $$sroa$12$0$$sroa_idx9 = 0, $$sroa$13$0 = 0, $$sroa$13$0$$sroa_idx11 = 0, $$sroa$14 = 0, $$sroa$14$0$$sroa_idx = 0, $$sroa$1415$0 = 0, $$sroa$1415$0$$sroa_idx16 = 0, $$sroa$15$0 = 0, $$sroa$15$0$$sroa_idx18 = 0, $$sroa$16 = 0, $$sroa$16$0$$sroa_idx = 0, $$sroa$1622$0 = 0, $$sroa$1622$0$$sroa_idx23 = 0, $$sroa$1727$0 = 0, $$sroa$1727$0$$sroa_idx28 = 0, $$sroa$18 = 0, $$sroa$18$0$$sroa_idx = 0, $1 = 0, $10 = 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $$sroa$14 = sp + 96|0;
 $$sroa$16 = sp + 80|0;
 $$sroa$18 = sp + 12|0;
 $1 = sp + 549|0;
 $2 = sp + 108|0;
 _memcpy(($1|0),(18407|0),483)|0;
 _memcpy(($2|0),(18890|0),441)|0;
 $3 = (_LoadShaderProgram($1,$2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[$vararg_buffer1>>2] = $3;
  _TraceLog(1,19445,$vararg_buffer1);
  $$sroa$12$0 = 0;$$sroa$13$0 = 0;$$sroa$1415$0 = 0;$$sroa$15$0 = 0;$$sroa$1622$0 = 0;$$sroa$1727$0 = 0;
 } else {
  HEAP32[$vararg_buffer>>2] = $3;
  _TraceLog(0,19331,$vararg_buffer);
  $5 = (_glGetAttribLocation(($3|0),(19379|0))|0);
  $6 = (_glGetAttribLocation(($3|0),(19394|0))|0);
  $7 = (_glGetAttribLocation(($3|0),(19409|0))|0);
  $8 = (_glGetUniformLocation(($3|0),(19421|0))|0);
  $9 = (_glGetUniformLocation(($3|0),(19425|0))|0);
  $10 = (_glGetUniformLocation(($3|0),(19436|0))|0);
  $$sroa$12$0 = $5;$$sroa$13$0 = $6;$$sroa$1415$0 = $7;$$sroa$15$0 = $8;$$sroa$1622$0 = $9;$$sroa$1727$0 = $10;
 }
 HEAP32[$0>>2] = $3;
 $$sroa$12$0$$sroa_idx9 = ((($0)) + 4|0);
 HEAP32[$$sroa$12$0$$sroa_idx9>>2] = $$sroa$12$0;
 $$sroa$13$0$$sroa_idx11 = ((($0)) + 8|0);
 HEAP32[$$sroa$13$0$$sroa_idx11>>2] = $$sroa$13$0;
 $$sroa$14$0$$sroa_idx = ((($0)) + 12|0);
 ;HEAP32[$$sroa$14$0$$sroa_idx>>2]=HEAP32[$$sroa$14>>2]|0;HEAP32[$$sroa$14$0$$sroa_idx+4>>2]=HEAP32[$$sroa$14+4>>2]|0;HEAP32[$$sroa$14$0$$sroa_idx+8>>2]=HEAP32[$$sroa$14+8>>2]|0;
 $$sroa$1415$0$$sroa_idx16 = ((($0)) + 24|0);
 HEAP32[$$sroa$1415$0$$sroa_idx16>>2] = $$sroa$1415$0;
 $$sroa$15$0$$sroa_idx18 = ((($0)) + 28|0);
 HEAP32[$$sroa$15$0$$sroa_idx18>>2] = $$sroa$15$0;
 $$sroa$16$0$$sroa_idx = ((($0)) + 32|0);
 ;HEAP32[$$sroa$16$0$$sroa_idx>>2]=HEAP32[$$sroa$16>>2]|0;HEAP32[$$sroa$16$0$$sroa_idx+4>>2]=HEAP32[$$sroa$16+4>>2]|0;HEAP32[$$sroa$16$0$$sroa_idx+8>>2]=HEAP32[$$sroa$16+8>>2]|0;HEAP32[$$sroa$16$0$$sroa_idx+12>>2]=HEAP32[$$sroa$16+12>>2]|0;
 $$sroa$1622$0$$sroa_idx23 = ((($0)) + 48|0);
 HEAP32[$$sroa$1622$0$$sroa_idx23>>2] = $$sroa$1622$0;
 $$sroa$1727$0$$sroa_idx28 = ((($0)) + 60|0);
 HEAP32[$$sroa$1727$0$$sroa_idx28>>2] = $$sroa$1727$0;
 $$sroa$18$0$$sroa_idx = ((($0)) + 64|0);
 dest=$$sroa$18$0$$sroa_idx; src=$$sroa$18; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _LoadBuffersDefault() {
 var $$05365 = 0, $$05467 = 0, $$05770 = 0, $$05972 = 0, $$066 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond75 = 0, $exitcond78 = 0, $exitcond80 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_malloc(24576)|0);
 HEAP32[(336444)>>2] = $0;
 $1 = (_malloc(8192)|0);
 HEAP32[(336452)>>2] = $1;
 HEAP32[(336448)>>2] = 0;
 HEAP32[(336456)>>2] = 0;
 _memset(($0|0),0,24576)|0;
 $$05972 = 0;
 while(1) {
  $2 = HEAP32[(336452)>>2]|0;
  $3 = (($2) + ($$05972)|0);
  HEAP8[$3>>0] = 0;
  $4 = (($$05972) + 1)|0;
  $exitcond80 = ($4|0)==(8192);
  if ($exitcond80) {
   break;
  } else {
   $$05972 = $4;
  }
 }
 HEAP32[84108] = 0;
 HEAP32[(336440)>>2] = 0;
 HEAP32[(336436)>>2] = 0;
 $5 = (_malloc(73728)|0);
 HEAP32[(336492)>>2] = $5;
 $6 = (_malloc(24576)|0);
 HEAP32[(336500)>>2] = $6;
 HEAP32[(336496)>>2] = 0;
 HEAP32[(336504)>>2] = 0;
 _memset(($5|0),0,73728)|0;
 $$05770 = 0;
 while(1) {
  $7 = HEAP32[(336500)>>2]|0;
  $8 = (($7) + ($$05770)|0);
  HEAP8[$8>>0] = 0;
  $9 = (($$05770) + 1)|0;
  $exitcond78 = ($9|0)==(24576);
  if ($exitcond78) {
   break;
  } else {
   $$05770 = $9;
  }
 }
 HEAP32[84120] = 0;
 HEAP32[(336488)>>2] = 0;
 HEAP32[(336484)>>2] = 0;
 $10 = (_malloc(49152)|0);
 HEAP32[(336252)>>2] = $10;
 $11 = (_malloc(32768)|0);
 HEAP32[(336256)>>2] = $11;
 $12 = (_malloc(16384)|0);
 HEAP32[(336260)>>2] = $12;
 $13 = (_malloc(12288)|0);
 HEAP32[(336264)>>2] = $13;
 $14 = HEAP32[(336252)>>2]|0;
 _memset(($14|0),0,49152)|0;
 $15 = HEAP32[(336256)>>2]|0;
 _memset(($15|0),0,32768)|0;
 $$05467 = 0;
 while(1) {
  $17 = HEAP32[(336260)>>2]|0;
  $18 = (($17) + ($$05467)|0);
  HEAP8[$18>>0] = 0;
  $19 = (($$05467) + 1)|0;
  $exitcond75 = ($19|0)==(16384);
  if ($exitcond75) {
   break;
  } else {
   $$05467 = $19;
  }
 }
 $16 = HEAP32[(336264)>>2]|0;
 $$05365 = 0;$$066 = 0;
 while(1) {
  $22 = $$05365 << 2;
  $23 = $22&65535;
  $24 = (($16) + ($$066<<1)|0);
  HEAP16[$24>>1] = $23;
  $25 = $22 | 1;
  $26 = $25&65535;
  $27 = $$066 | 1;
  $28 = (($16) + ($27<<1)|0);
  HEAP16[$28>>1] = $26;
  $29 = $22 | 2;
  $30 = $29&65535;
  $31 = (($$066) + 2)|0;
  $32 = (($16) + ($31<<1)|0);
  HEAP16[$32>>1] = $30;
  $33 = (($$066) + 3)|0;
  $34 = (($16) + ($33<<1)|0);
  HEAP16[$34>>1] = $23;
  $35 = (($$066) + 4)|0;
  $36 = (($16) + ($35<<1)|0);
  HEAP16[$36>>1] = $30;
  $37 = $22 | 3;
  $38 = $37&65535;
  $39 = (($$066) + 5)|0;
  $40 = (($16) + ($39<<1)|0);
  HEAP16[$40>>1] = $38;
  $41 = (($$05365) + 1)|0;
  $42 = (($$066) + 6)|0;
  $exitcond = ($41|0)==(1024);
  if ($exitcond) {
   break;
  } else {
   $$05365 = $41;$$066 = $42;
  }
 }
 HEAP32[84060] = 0;
 HEAP32[(336244)>>2] = 0;
 HEAP32[(336248)>>2] = 0;
 _TraceLog(0,17878,$vararg_buffer);
 $20 = HEAP32[84165]|0;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $43 = HEAP32[84591]|0;
  FUNCTION_TABLE_vii[$43 & 63](1,(336460));
  $44 = HEAP32[84166]|0;
  $45 = HEAP32[(336460)>>2]|0;
  FUNCTION_TABLE_vi[$44 & 31]($45);
 }
 _glGenBuffers(2,((336464)|0));
 $46 = HEAP32[(336464)>>2]|0;
 _glBindBuffer(34962,($46|0));
 $47 = HEAP32[(336444)>>2]|0;
 _glBufferData(34962,24576,($47|0),35048);
 $48 = HEAP32[(336532)>>2]|0;
 _glEnableVertexAttribArray(($48|0));
 $49 = HEAP32[(336532)>>2]|0;
 _glVertexAttribPointer(($49|0),3,5126,0,0,(0|0));
 _glGenBuffers(2,((336468)|0));
 $50 = HEAP32[(336468)>>2]|0;
 _glBindBuffer(34962,($50|0));
 $51 = HEAP32[(336452)>>2]|0;
 _glBufferData(34962,8192,($51|0),35048);
 $52 = HEAP32[(336552)>>2]|0;
 _glEnableVertexAttribArray(($52|0));
 $53 = HEAP32[(336552)>>2]|0;
 _glVertexAttribPointer(($53|0),4,5121,1,0,(0|0));
 $54 = HEAP32[84165]|0;
 $55 = ($54|0)==(0);
 if ($55) {
  $57 = HEAP32[(336464)>>2]|0;
  $58 = HEAP32[(336468)>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $57;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $58;
  _TraceLog(0,18016,$vararg_buffer3);
 } else {
  $56 = HEAP32[(336460)>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $56;
  _TraceLog(0,17951,$vararg_buffer1);
 }
 $59 = HEAP32[84165]|0;
 $60 = ($59|0)==(0);
 if (!($60)) {
  $61 = HEAP32[84591]|0;
  FUNCTION_TABLE_vii[$61 & 63](1,(336508));
  $62 = HEAP32[84166]|0;
  $63 = HEAP32[(336508)>>2]|0;
  FUNCTION_TABLE_vi[$62 & 31]($63);
 }
 _glGenBuffers(1,((336512)|0));
 $64 = HEAP32[(336512)>>2]|0;
 _glBindBuffer(34962,($64|0));
 $65 = HEAP32[(336492)>>2]|0;
 _glBufferData(34962,73728,($65|0),35048);
 $66 = HEAP32[(336532)>>2]|0;
 _glEnableVertexAttribArray(($66|0));
 $67 = HEAP32[(336532)>>2]|0;
 _glVertexAttribPointer(($67|0),3,5126,0,0,(0|0));
 _glGenBuffers(1,((336516)|0));
 $68 = HEAP32[(336516)>>2]|0;
 _glBindBuffer(34962,($68|0));
 $69 = HEAP32[(336500)>>2]|0;
 _glBufferData(34962,24576,($69|0),35048);
 $70 = HEAP32[(336552)>>2]|0;
 _glEnableVertexAttribArray(($70|0));
 $71 = HEAP32[(336552)>>2]|0;
 _glVertexAttribPointer(($71|0),4,5121,1,0,(0|0));
 $72 = HEAP32[84165]|0;
 $73 = ($72|0)==(0);
 if ($73) {
  $75 = HEAP32[(336512)>>2]|0;
  $76 = HEAP32[(336516)>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $75;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $76;
  _TraceLog(0,18162,$vararg_buffer10);
 } else {
  $74 = HEAP32[(336508)>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $74;
  _TraceLog(0,18093,$vararg_buffer7);
 }
 $77 = HEAP32[84165]|0;
 $78 = ($77|0)==(0);
 if (!($78)) {
  $79 = HEAP32[84591]|0;
  FUNCTION_TABLE_vii[$79 & 63](1,(336268));
  $80 = HEAP32[84166]|0;
  $81 = HEAP32[(336268)>>2]|0;
  FUNCTION_TABLE_vi[$80 & 31]($81);
 }
 _glGenBuffers(1,((336272)|0));
 $82 = HEAP32[(336272)>>2]|0;
 _glBindBuffer(34962,($82|0));
 $83 = HEAP32[(336252)>>2]|0;
 _glBufferData(34962,49152,($83|0),35048);
 $84 = HEAP32[(336532)>>2]|0;
 _glEnableVertexAttribArray(($84|0));
 $85 = HEAP32[(336532)>>2]|0;
 _glVertexAttribPointer(($85|0),3,5126,0,0,(0|0));
 _glGenBuffers(1,((336276)|0));
 $86 = HEAP32[(336276)>>2]|0;
 _glBindBuffer(34962,($86|0));
 $87 = HEAP32[(336256)>>2]|0;
 _glBufferData(34962,32768,($87|0),35048);
 $88 = HEAP32[(336536)>>2]|0;
 _glEnableVertexAttribArray(($88|0));
 $89 = HEAP32[(336536)>>2]|0;
 _glVertexAttribPointer(($89|0),2,5126,0,0,(0|0));
 _glGenBuffers(1,((336280)|0));
 $90 = HEAP32[(336280)>>2]|0;
 _glBindBuffer(34962,($90|0));
 $91 = HEAP32[(336260)>>2]|0;
 _glBufferData(34962,16384,($91|0),35048);
 $92 = HEAP32[(336552)>>2]|0;
 _glEnableVertexAttribArray(($92|0));
 $93 = HEAP32[(336552)>>2]|0;
 _glVertexAttribPointer(($93|0),4,5121,1,0,(0|0));
 _glGenBuffers(1,((336284)|0));
 $94 = HEAP32[(336284)>>2]|0;
 _glBindBuffer(34963,($94|0));
 $95 = HEAP32[(336264)>>2]|0;
 _glBufferData(34963,12288,($95|0),35044);
 $96 = HEAP32[84165]|0;
 $97 = ($96|0)==(0);
 if ($97) {
  $99 = HEAP32[(336272)>>2]|0;
  $100 = HEAP32[(336276)>>2]|0;
  $101 = HEAP32[(336280)>>2]|0;
  $102 = HEAP32[(336284)>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $99;
  $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
  HEAP32[$vararg_ptr20>>2] = $100;
  $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
  HEAP32[$vararg_ptr21>>2] = $101;
  $vararg_ptr22 = ((($vararg_buffer17)) + 12|0);
  HEAP32[$vararg_ptr22>>2] = $102;
  _TraceLog(0,18308,$vararg_buffer17);
 } else {
  $98 = HEAP32[(336268)>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $98;
  _TraceLog(0,18243,$vararg_buffer14);
 }
 $103 = HEAP32[84165]|0;
 $104 = ($103|0)==(0);
 if ($104) {
  STACKTOP = sp;return;
 }
 $105 = HEAP32[84166]|0;
 FUNCTION_TABLE_vi[$105 & 31](0);
 STACKTOP = sp;return;
}
function _LoadShaderProgram($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$alloca_mul = 0, $$alloca_mul34 = 0, $$alloca_mul36 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 80|0;
 $3 = sp + 76|0;
 $4 = sp + 72|0;
 $5 = sp + 68|0;
 $6 = (_glCreateShader(35633)|0);
 $7 = (_glCreateShader(35632)|0);
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 _glShaderSource(($6|0),1,($2|0),(0|0));
 _glShaderSource(($7|0),1,($3|0),(0|0));
 HEAP32[$4>>2] = 0;
 _glCompileShader(($6|0));
 _glGetShaderiv(($6|0),35713,($4|0));
 $8 = HEAP32[$4>>2]|0;
 $9 = ($8|0)==(1);
 if ($9) {
  HEAP32[$vararg_buffer4>>2] = $6;
  _TraceLog(0,19545,$vararg_buffer4);
 } else {
  HEAP32[$vararg_buffer>>2] = $6;
  _TraceLog(1,19493,$vararg_buffer);
  HEAP32[$vararg_buffer>>2] = 0;
  _glGetShaderiv(($6|0),35716,($vararg_buffer|0));
  $10 = HEAP32[$vararg_buffer>>2]|0;
  $11 = (_llvm_stacksave()|0);
  $$alloca_mul = $10;
  $12 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
  $13 = HEAP32[$vararg_buffer>>2]|0;
  _glGetShaderInfoLog(($6|0),($13|0),($5|0),($12|0));
  HEAP32[$vararg_buffer1>>2] = $12;
  _TraceLog(0,19542,$vararg_buffer1);
  _llvm_stackrestore(($11|0));
 }
 _glCompileShader(($7|0));
 _glGetShaderiv(($7|0),35713,($4|0));
 $14 = HEAP32[$4>>2]|0;
 $15 = ($14|0)==(1);
 if ($15) {
  HEAP32[$vararg_buffer13>>2] = $7;
  _TraceLog(0,19646,$vararg_buffer13);
 } else {
  HEAP32[$vararg_buffer7>>2] = $7;
  _TraceLog(1,19595,$vararg_buffer7);
  HEAP32[$vararg_buffer7>>2] = 0;
  _glGetShaderiv(($7|0),35716,($vararg_buffer7|0));
  $16 = HEAP32[$vararg_buffer7>>2]|0;
  $17 = (_llvm_stacksave()|0);
  $$alloca_mul34 = $16;
  $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul34)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul34)|0)+15)&-16)|0);;
  $19 = HEAP32[$vararg_buffer7>>2]|0;
  _glGetShaderInfoLog(($7|0),($19|0),($5|0),($18|0));
  HEAP32[$vararg_buffer10>>2] = $18;
  _TraceLog(0,19542,$vararg_buffer10);
  _llvm_stackrestore(($17|0));
 }
 $20 = (_glCreateProgram()|0);
 _glAttachShader(($20|0),($6|0));
 _glAttachShader(($20|0),($7|0));
 _glBindAttribLocation(($20|0),0,(19379|0));
 _glBindAttribLocation(($20|0),1,(19394|0));
 _glBindAttribLocation(($20|0),2,(19698|0));
 _glBindAttribLocation(($20|0),3,(19409|0));
 _glBindAttribLocation(($20|0),4,(19711|0));
 _glBindAttribLocation(($20|0),5,(19725|0));
 _glLinkProgram(($20|0));
 _glGetProgramiv(($20|0),35714,($4|0));
 $21 = HEAP32[$4>>2]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  HEAP32[$vararg_buffer16>>2] = $20;
  _TraceLog(1,19741,$vararg_buffer16);
  HEAP32[$vararg_buffer16>>2] = 0;
  _glGetProgramiv(($20|0),35716,($vararg_buffer16|0));
  $23 = HEAP32[$vararg_buffer16>>2]|0;
  $24 = (_llvm_stacksave()|0);
  $$alloca_mul36 = $23;
  $25 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul36)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul36)|0)+15)&-16)|0);;
  $26 = HEAP32[$vararg_buffer16>>2]|0;
  _glGetProgramInfoLog(($20|0),($26|0),($5|0),($25|0));
  HEAP32[$vararg_buffer19>>2] = $25;
  _TraceLog(0,19542,$vararg_buffer19);
  _glDeleteProgram(($20|0));
  _llvm_stackrestore(($24|0));
  $$0 = 0;
  _glDeleteShader(($6|0));
  _glDeleteShader(($7|0));
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer22>>2] = $20;
  _TraceLog(0,19787,$vararg_buffer22);
  $$0 = $20;
  _glDeleteShader(($6|0));
  _glDeleteShader(($7|0));
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _IsMouseButtonPressed($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (340465 + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (340468 + ($0)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($2<<24>>24)!=($4<<24>>24);
 $6 = ($2<<24>>24)==(1);
 $or$cond = $6 & $5;
 $$0 = $or$cond&1;
 return ($$0|0);
}
function _IsMouseButtonReleased($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (340465 + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (340468 + ($0)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($2<<24>>24)!=($4<<24>>24);
 $6 = ($2<<24>>24)==(0);
 $or$cond = $6 & $5;
 $$0 = $or$cond&1;
 return ($$0|0);
}
function _rlClearScreenBuffers() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _glClear(16640);
 return;
}
function _CloseWindow() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _UnloadDefaultFont();
 _rlglClose();
 $0 = HEAP32[84858]|0;
 _glfwDestroyWindow(($0|0));
 _glfwTerminate();
 _TraceLog(0,20082,$vararg_buffer);
 STACKTOP = sp;return;
}
function _rlglClose() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _UnloadShaderDefault();
 _UnloadBuffersDefault();
 _glDeleteTextures(1,(336424|0));
 $0 = HEAP32[84106]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 _TraceLog(0,20109,$vararg_buffer);
 $1 = HEAP32[84107]|0;
 _free($1);
 STACKTOP = sp;return;
}
function _UnloadShaderDefault() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _glUseProgram(0);
 $0 = HEAP32[84558]|0;
 _glDeleteProgram(($0|0));
 return;
}
function _UnloadBuffersDefault() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[84165]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[84166]|0;
  FUNCTION_TABLE_vi[$2 & 31](0);
 }
 _glDisableVertexAttribArray(0);
 _glDisableVertexAttribArray(1);
 _glDisableVertexAttribArray(2);
 _glDisableVertexAttribArray(3);
 _glBindBuffer(34962,0);
 _glBindBuffer(34963,0);
 _glDeleteBuffers(1,((336464)|0));
 _glDeleteBuffers(1,((336468)|0));
 _glDeleteBuffers(1,((336512)|0));
 _glDeleteBuffers(1,((336516)|0));
 _glDeleteBuffers(1,((336272)|0));
 _glDeleteBuffers(1,((336276)|0));
 _glDeleteBuffers(1,((336280)|0));
 _glDeleteBuffers(1,((336284)|0));
 $3 = HEAP32[84165]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = HEAP32[84592]|0;
  FUNCTION_TABLE_vii[$5 & 63](1,(336460));
  $6 = HEAP32[84592]|0;
  FUNCTION_TABLE_vii[$6 & 63](1,(336508));
  $7 = HEAP32[84592]|0;
  FUNCTION_TABLE_vii[$7 & 63](1,(336268));
 }
 $8 = HEAP32[(336444)>>2]|0;
 _free($8);
 $9 = HEAP32[(336452)>>2]|0;
 _free($9);
 $10 = HEAP32[(336492)>>2]|0;
 _free($10);
 $11 = HEAP32[(336500)>>2]|0;
 _free($11);
 $12 = HEAP32[(336252)>>2]|0;
 _free($12);
 $13 = HEAP32[(336256)>>2]|0;
 _free($13);
 $14 = HEAP32[(336260)>>2]|0;
 _free($14);
 $15 = HEAP32[(336264)>>2]|0;
 _free($15);
 return;
}
function _BeginDrawing() {
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $downscaleView$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $downscaleView$byval_copy = sp;
 $0 = (+_GetTime());
 HEAPF64[3290] = $0;
 $1 = +HEAPF64[3289];
 $2 = $0 - $1;
 HEAPF64[3291] = $2;
 HEAPF64[3289] = $0;
 _rlClearScreenBuffers();
 _rlLoadIdentity();
 dest=$downscaleView$byval_copy; src=339472; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 (_MatrixToFloat($downscaleView$byval_copy)|0);
 _rlMultMatrixf(336668);
 STACKTOP = sp;return;
}
function _rlMultMatrixf($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy1 = sp + 192|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 64|0;
 $2 = sp;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $3;
 $4 = ((($1)) + 4|0);
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($1)) + 8|0);
 $8 = ((($0)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($1)) + 12|0);
 $11 = ((($0)) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($1)) + 16|0);
 $14 = ((($0)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$13>>2] = $15;
 $16 = ((($1)) + 20|0);
 $17 = ((($0)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $18;
 $19 = ((($1)) + 24|0);
 $20 = ((($0)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$19>>2] = $21;
 $22 = ((($1)) + 28|0);
 $23 = ((($0)) + 52|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$22>>2] = $24;
 $25 = ((($1)) + 32|0);
 $26 = ((($0)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$25>>2] = $27;
 $28 = ((($1)) + 36|0);
 $29 = ((($0)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$28>>2] = $30;
 $31 = ((($1)) + 40|0);
 $32 = ((($0)) + 40|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$31>>2] = $33;
 $34 = ((($1)) + 44|0);
 $35 = ((($0)) + 56|0);
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($1)) + 48|0);
 $38 = ((($0)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$37>>2] = $39;
 $40 = ((($1)) + 52|0);
 $41 = ((($0)) + 28|0);
 $42 = HEAP32[$41>>2]|0;
 HEAP32[$40>>2] = $42;
 $43 = ((($1)) + 56|0);
 $44 = ((($0)) + 44|0);
 $45 = HEAP32[$44>>2]|0;
 HEAP32[$43>>2] = $45;
 $46 = ((($1)) + 60|0);
 $47 = ((($0)) + 60|0);
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = HEAP32[84550]|0;
 dest=$$byval_copy; src=$49; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy1; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($2,$$byval_copy,$$byval_copy1);
 dest=$49; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _EndDrawing() {
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlglDraw();
 _SwapBuffers();
 _PollInputEvents();
 $0 = (+_GetTime());
 HEAPF64[3290] = $0;
 $1 = +HEAPF64[3289];
 $2 = $0 - $1;
 HEAPF64[3292] = $2;
 HEAPF64[3289] = $0;
 $3 = +HEAPF64[3291];
 $4 = $2 + $3;
 HEAPF64[3276] = $4;
 $5 = +HEAPF64[3286];
 $6 = $4 < $5;
 if (!($6)) {
  return;
 }
 $7 = $5 - $4;
 $8 = $7 * 1000.0;
 $9 = $8;
 _Wait($9);
 $10 = (+_GetTime());
 HEAPF64[3290] = $10;
 $11 = +HEAPF64[3289];
 $12 = $10 - $11;
 HEAPF64[3289] = $10;
 $13 = +HEAPF64[3276];
 $14 = $12 + $13;
 HEAPF64[3276] = $14;
 return;
}
function _SwapBuffers() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[84858]|0;
 _glfwSwapBuffers(($0|0));
 return;
}
function _PollInputEvents() {
 var $$04857 = 0, $$05160 = 0, $$058 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0;
 var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep67 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1456|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1456|0);
 $0 = sp + 1440|0;
 $1 = sp + 1432|0;
 $2 = sp;
 _UpdateGestures();
 HEAP32[1273] = -1;
 HEAP32[1275] = -1;
 HEAP32[84894] = 0;
 $3 = HEAP32[84858]|0;
 _glfwGetCursorPos(($3|0),($0|0),($1|0));
 $4 = +HEAPF64[$0>>3];
 $5 = $4;
 HEAPF32[6570] = $5;
 $6 = +HEAPF64[$1>>3];
 $7 = $6;
 HEAPF32[(26284)>>2] = $7;
 _memcpy((340983|0),(340471|0),512)|0;
 ;HEAP8[340468>>0]=HEAP8[340465>>0]|0;HEAP8[340468+1>>0]=HEAP8[340465+1>>0]|0;HEAP8[340468+2>>0]=HEAP8[340465+2>>0]|0;
 $8 = HEAP32[84893]|0;
 HEAP32[84859] = $8;
 HEAP32[84893] = 0;
 $9 = (_emscripten_get_num_gamepads()|0);
 $10 = ($9|0)>(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = ((($2)) + 12|0);
 $12 = ((($2)) + 8|0);
 $$05160 = 0;
 while(1) {
  $scevgep = (341495 + ($$05160<<5)|0);
  $scevgep67 = (341623 + ($$05160<<5)|0);
  dest=$scevgep; src=$scevgep67; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $13 = (_emscripten_get_gamepad_status(($$05160|0),($2|0))|0);
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = HEAP32[$11>>2]|0;
   $16 = ($15|0)>(0);
   if ($16) {
    $17 = HEAP32[$11>>2]|0;
    $$04857 = 0;
    while(1) {
     $21 = (((($2)) + 1040|0) + ($$04857<<2)|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(1);
     $24 = ((341623 + ($$05160<<5)|0) + ($$04857)|0);
     if ($23) {
      HEAP8[$24>>0] = 1;
      HEAP32[1275] = $$04857;
     } else {
      HEAP8[$24>>0] = 0;
     }
     $25 = (($$04857) + 1)|0;
     $26 = ($25|0)<($17|0);
     $27 = ($25|0)<(32);
     $28 = $27 & $26;
     if ($28) {
      $$04857 = $25;
     } else {
      break;
     }
    }
   }
   $18 = HEAP32[$12>>2]|0;
   $19 = ($18|0)>(0);
   if ($19) {
    $20 = HEAP32[$12>>2]|0;
    $$058 = 0;
    while(1) {
     $29 = (((($2)) + 16|0) + ($$058<<3)|0);
     $30 = +HEAPF64[$29>>3];
     $31 = $30;
     $32 = ((339580 + ($$05160<<5)|0) + ($$058<<2)|0);
     HEAPF32[$32>>2] = $31;
     $33 = (($$058) + 1)|0;
     $34 = ($33|0)<($20|0);
     $35 = ($33|0)<(8);
     $36 = $35 & $34;
     if ($36) {
      $$058 = $33;
     } else {
      $$lcssa = $20;
      break;
     }
    }
   } else {
    $$lcssa = $18;
   }
   HEAP32[84894] = $$lcssa;
  }
  $37 = (($$05160) + 1)|0;
  $38 = ($37|0)<($9|0);
  $39 = ($37|0)<(4);
  $40 = $38 & $39;
  if ($40) {
   $$05160 = $37;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _Wait($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_GetTime());
 $2 = 0.0 - $1;
 $3 = $0 / 1000.0;
 $4 = $3;
 $5 = $2 < $4;
 if (!($5)) {
  return;
 }
 while(1) {
  $6 = (+_GetTime());
  $7 = $6 - $1;
  $8 = $7 < $4;
  if (!($8)) {
   break;
  }
 }
 return;
}
function _Fade($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$0 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 < 0.0;
 if ($3) {
  $$0 = 0.0;
 } else {
  $4 = $2 > 1.0;
  if ($4) {
   $$0 = 1.0;
  } else {
   $$0 = $2;
  }
 }
 $5 = ((($1)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (+($6&255));
 $8 = $$0 * $7;
 $9 = HEAP8[$1>>0]|0;
 HEAP8[$0>>0] = $9;
 $10 = ((($0)) + 1|0);
 $11 = ((($1)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 HEAP8[$10>>0] = $12;
 $13 = ((($0)) + 2|0);
 $14 = ((($1)) + 2|0);
 $15 = HEAP8[$14>>0]|0;
 HEAP8[$13>>0] = $15;
 $16 = ((($0)) + 3|0);
 $17 = (~~(($8))&255);
 HEAP8[$16>>0] = $17;
 return;
}
function _GetTouchPosition($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pn = 0.0, $$pn21 = 0.0, $$sink6 = 0.0, $$sink6$in = 0, $$sink8 = 0, $$sroa$0$0 = 0.0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload10 = 0.0, $$sroa$0$1 = 0.0, $$sroa$9$0 = 0.0, $$sroa$9$0$$sroa_idx14 = 0, $$sroa$9$0$$sroa_idx16 = 0, $$sroa$9$0$copyload15 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = ($1|0)<(2);
 if ($2) {
  $$sroa$0$0$$sroa_idx = (26296 + ($1<<3)|0);
  $$sroa$0$0$copyload10 = +HEAPF32[$$sroa$0$0$$sroa_idx>>2];
  $$sroa$9$0$$sroa_idx14 = (((26296 + ($1<<3)|0)) + 4|0);
  $$sroa$9$0$copyload15 = +HEAPF32[$$sroa$9$0$$sroa_idx14>>2];
  $$sroa$0$0 = $$sroa$0$0$copyload10;$$sroa$9$0 = $$sroa$9$0$copyload15;
 } else {
  HEAP32[$vararg_buffer>>2] = 2;
  _TraceLog(1,20174,$vararg_buffer);
  $$sroa$0$0 = -1.0;$$sroa$9$0 = -1.0;
 }
 $3 = HEAP32[84861]|0;
 $4 = HEAP32[84884]|0;
 $5 = ($3>>>0)>($4>>>0);
 $6 = HEAP32[84889]|0;
 $7 = HEAP32[84885]|0;
 $8 = HEAP32[84862]|0;
 $9 = (($6|0) / 2)&-1;
 $10 = (+($9|0));
 $11 = ($8>>>0)>($7>>>0);
 $or$cond = $5 | $11;
 if ($or$cond) {
  $12 = (+($3|0));
  $13 = (($4) - ($6))|0;
  $14 = (+($13>>>0));
  $15 = $12 / $14;
  $16 = HEAP32[84890]|0;
  $17 = (($7) - ($16))|0;
  $$pn21 = $15;$$sink6$in = $8;$$sink8 = $17;
 } else {
  $18 = HEAP32[84887]|0;
  $19 = (+($18|0));
  $20 = (+($4>>>0));
  $21 = $19 / $20;
  $22 = HEAP32[84888]|0;
  $$pn21 = $21;$$sink6$in = $22;$$sink8 = $7;
 }
 $$pn = $$sroa$0$0 * $$pn21;
 $$sink6 = (+($$sink6$in|0));
 $$sroa$0$1 = $$pn - $10;
 $23 = (+($$sink8>>>0));
 $24 = $$sink6 / $23;
 $25 = $$sroa$9$0 * $24;
 $26 = HEAP32[84890]|0;
 $27 = (($26|0) / 2)&-1;
 $28 = (+($27|0));
 $29 = $25 - $28;
 HEAPF32[$0>>2] = $$sroa$0$1;
 $$sroa$9$0$$sroa_idx16 = ((($0)) + 4|0);
 HEAPF32[$$sroa$9$0$$sroa_idx16>>2] = $29;
 STACKTOP = sp;return;
}
function _LoadText($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (_fopen($0,20231)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = $0;
  _TraceLog(1,20234,$vararg_buffer);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 (_fseek($2,0,2)|0);
 $4 = (_ftell($2)|0);
 _rewind($2);
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = (($4) + 1)|0;
  $7 = (_malloc($6)|0);
  $8 = (_fread($7,1,$4,$2)|0);
  $9 = (($7) + ($8)|0);
  HEAP8[$9>>0] = 0;
  $$0 = $7;
 } else {
  $$0 = 0;
 }
 (_fclose($2)|0);
 $$1 = $$0;
 STACKTOP = sp;return ($$1|0);
}
function _LoadShader($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $5 = sp + 28|0;
 $6 = sp + 24|0;
 $7 = sp + 168|0;
 $8 = sp + 20|0;
 _memset(($3|0),0,132)|0;
 $9 = (_LoadText($1)|0);
 $10 = (_LoadText($2)|0);
 $11 = ($9|0)!=(0|0);
 $12 = ($10|0)!=(0|0);
 $or$cond = $11 & $12;
 if ($or$cond) {
  $13 = (_LoadShaderProgram($9,$10)|0);
  HEAP32[$3>>2] = $13;
  $14 = ($13|0)==(0);
  if (!($14)) {
   _SetShaderDefaultLocations($3);
  }
  _free($9);
  _free($10);
 }
 $15 = HEAP32[$3>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  _TraceLog(1,20269,$vararg_buffer);
  _memcpy(($3|0),(338232|0),132)|0;
 }
 HEAP32[$4>>2] = -1;
 $17 = HEAP32[$3>>2]|0;
 _glGetProgramiv(($17|0),35718,($4|0));
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)>(0);
 if (!($19)) {
  _memcpy(($0|0),($3|0),132)|0;
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$3>>2]|0;
 $$019 = 0;
 while(1) {
  HEAP32[$5>>2] = -1;
  HEAP32[$6>>2] = -1;
  HEAP32[$8>>2] = 0;
  _glGetActiveUniform(($20|0),($$019|0),255,($5|0),($6|0),($8|0),($7|0));
  $21 = HEAP32[$5>>2]|0;
  $22 = (($7) + ($21)|0);
  HEAP8[$22>>0] = 0;
  $23 = (_glGetUniformLocation(($20|0),($7|0))|0);
  HEAP32[$vararg_buffer1>>2] = $20;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $7;
  $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr4>>2] = $23;
  _TraceLog(3,20303,$vararg_buffer1);
  $24 = (($$019) + 1)|0;
  $25 = HEAP32[$4>>2]|0;
  $26 = ($24|0)<($25|0);
  if ($26) {
   $$019 = $24;
  } else {
   break;
  }
 }
 _memcpy(($0|0),($3|0),132)|0;
 STACKTOP = sp;return;
}
function _SetShaderDefaultLocations($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_glGetAttribLocation(($1|0),(19379|0))|0);
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_glGetAttribLocation(($4|0),(19394|0))|0);
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$0>>2]|0;
 $8 = (_glGetAttribLocation(($7|0),(19725|0))|0);
 $9 = ((($0)) + 12|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$0>>2]|0;
 $11 = (_glGetAttribLocation(($10|0),(19698|0))|0);
 $12 = ((($0)) + 16|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$0>>2]|0;
 $14 = (_glGetAttribLocation(($13|0),(19711|0))|0);
 $15 = ((($0)) + 20|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$0>>2]|0;
 $17 = (_glGetAttribLocation(($16|0),(19409|0))|0);
 $18 = ((($0)) + 24|0);
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[$0>>2]|0;
 $20 = (_glGetUniformLocation(($19|0),(19421|0))|0);
 $21 = ((($0)) + 28|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[$0>>2]|0;
 $23 = (_glGetUniformLocation(($22|0),(20356|0))|0);
 $24 = ((($0)) + 40|0);
 HEAP32[$24>>2] = $23;
 $25 = HEAP32[$0>>2]|0;
 $26 = (_glGetUniformLocation(($25|0),(20367|0))|0);
 $27 = ((($0)) + 36|0);
 HEAP32[$27>>2] = $26;
 $28 = HEAP32[$0>>2]|0;
 $29 = (_glGetUniformLocation(($28|0),(19425|0))|0);
 $30 = ((($0)) + 48|0);
 HEAP32[$30>>2] = $29;
 $31 = HEAP32[$0>>2]|0;
 $32 = (_glGetUniformLocation(($31|0),(19436|0))|0);
 $33 = ((($0)) + 60|0);
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$0>>2]|0;
 $35 = (_glGetUniformLocation(($34|0),(20372|0))|0);
 $36 = ((($0)) + 68|0);
 HEAP32[$36>>2] = $35;
 $37 = HEAP32[$0>>2]|0;
 $38 = (_glGetUniformLocation(($37|0),(20381|0))|0);
 $39 = ((($0)) + 64|0);
 HEAP32[$39>>2] = $38;
 return;
}
function _BeginShaderMode($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[84132]|0;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($1|0)==($2|0);
 if ($3) {
  return;
 }
 _rlglDraw();
 _memcpy((336528|0),($0|0),132)|0;
 return;
}
function _EndShaderMode() {
 var $defaultShader$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $defaultShader$byval_copy = sp;
 _memcpy(($defaultShader$byval_copy|0),(338232|0),132)|0;
 _BeginShaderMode($defaultShader$byval_copy);
 STACKTOP = sp;return;
}
function _emscripten_GetProcAddress($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (_strlen($5)|0);
 $7 = (($6) + 1)|0;
 $8 = (_malloc($7)|0);
 HEAP32[$3>>2] = $8;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$2>>2]|0;
 (_strcpy($9,$10)|0);
 $11 = HEAP32[$3>>2]|0;
 $12 = (_strstr($11,20390)|0);
 HEAP32[$4>>2] = $12;
 $13 = HEAP32[$4>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = HEAP32[$4>>2]|0;
  HEAP8[$15>>0] = 0;
 }
 $16 = HEAP32[$3>>2]|0;
 $17 = (_strstr($16,20394)|0);
 HEAP32[$4>>2] = $17;
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = HEAP32[$4>>2]|0;
  HEAP8[$20>>0] = 0;
 }
 $21 = HEAP32[$3>>2]|0;
 $22 = (_strstr($21,20398)|0);
 HEAP32[$4>>2] = $22;
 $23 = HEAP32[$4>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = HEAP32[$4>>2]|0;
  HEAP8[$25>>0] = 0;
 }
 $26 = HEAP32[$3>>2]|0;
 $27 = (_strstr($26,20402)|0);
 HEAP32[$4>>2] = $27;
 $28 = HEAP32[$4>>2]|0;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = HEAP32[$4>>2]|0;
  HEAP8[$30>>0] = 0;
 }
 $31 = HEAP32[$3>>2]|0;
 $32 = (_strcmp($31,20408)|0);
 $33 = ($32|0)!=(0);
 do {
  if ($33) {
   $34 = HEAP32[$3>>2]|0;
   $35 = (_strcmp($34,20446)|0);
   $36 = ($35|0)!=(0);
   if (!($36)) {
    HEAP32[$3>>2] = 20465;
    break;
   }
   $37 = HEAP32[$3>>2]|0;
   $38 = (_strcmp($37,20478)|0);
   $39 = ($38|0)!=(0);
   if (!($39)) {
    HEAP32[$3>>2] = 20499;
    break;
   }
   $40 = HEAP32[$3>>2]|0;
   $41 = (_strcmp($40,20514)|0);
   $42 = ($41|0)!=(0);
   if (!($42)) {
    HEAP32[$3>>2] = 20529;
    break;
   }
   $43 = HEAP32[$3>>2]|0;
   $44 = (_strcmp($43,20544)|0);
   $45 = ($44|0)!=(0);
   if (!($45)) {
    HEAP32[$3>>2] = 20559;
   }
  } else {
   HEAP32[$3>>2] = 20430;
  }
 } while(0);
 $46 = HEAP32[$3>>2]|0;
 $47 = (_strcmp($46,20574)|0);
 $48 = ($47|0)!=(0);
 do {
  if ($48) {
   $49 = HEAP32[$3>>2]|0;
   $50 = (_strcmp($49,20588)|0);
   $51 = ($50|0)!=(0);
   if (!($51)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $52 = HEAP32[$3>>2]|0;
   $53 = (_strcmp($52,20600)|0);
   $54 = ($53|0)!=(0);
   if (!($54)) {
    HEAP32[$1>>2] = 7;
    break;
   }
   $55 = HEAP32[$3>>2]|0;
   $56 = (_strcmp($55,20614)|0);
   $57 = ($56|0)!=(0);
   if (!($57)) {
    HEAP32[$1>>2] = 8;
    break;
   }
   $58 = HEAP32[$3>>2]|0;
   $59 = (_strcmp($58,20626)|0);
   $60 = ($59|0)!=(0);
   if (!($60)) {
    HEAP32[$1>>2] = 9;
    break;
   }
   $61 = HEAP32[$3>>2]|0;
   $62 = (_strcmp($61,20640)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    HEAP32[$1>>2] = 10;
    break;
   }
   $64 = HEAP32[$3>>2]|0;
   $65 = (_strcmp($64,20654)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    HEAP32[$1>>2] = 11;
    break;
   }
   $67 = HEAP32[$3>>2]|0;
   $68 = (_strcmp($67,20671)|0);
   $69 = ($68|0)!=(0);
   if (!($69)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $70 = HEAP32[$3>>2]|0;
   $71 = (_strcmp($70,20694)|0);
   $72 = ($71|0)!=(0);
   if (!($72)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $73 = HEAP32[$3>>2]|0;
   $74 = (_strcmp($73,20720)|0);
   $75 = ($74|0)!=(0);
   if (!($75)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $76 = HEAP32[$3>>2]|0;
   $77 = (_strcmp($76,20733)|0);
   $78 = ($77|0)!=(0);
   if (!($78)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $79 = HEAP32[$3>>2]|0;
   $80 = (_strcmp($79,20749)|0);
   $81 = ($80|0)!=(0);
   if (!($81)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $82 = HEAP32[$3>>2]|0;
   $83 = (_strcmp($82,20762)|0);
   $84 = ($83|0)!=(0);
   if (!($84)) {
    HEAP32[$1>>2] = 12;
    break;
   }
   $85 = HEAP32[$3>>2]|0;
   $86 = (_strcmp($85,20776)|0);
   $87 = ($86|0)!=(0);
   if (!($87)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $88 = HEAP32[$3>>2]|0;
   $89 = (_strcmp($88,20796)|0);
   $90 = ($89|0)!=(0);
   if (!($90)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $91 = HEAP32[$3>>2]|0;
   $92 = (_strcmp($91,20816)|0);
   $93 = ($92|0)!=(0);
   if (!($93)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $94 = HEAP32[$3>>2]|0;
   $95 = (_strcmp($94,20833)|0);
   $96 = ($95|0)!=(0);
   if (!($96)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $97 = HEAP32[$3>>2]|0;
   $98 = (_strcmp($97,20850)|0);
   $99 = ($98|0)!=(0);
   if (!($99)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $100 = HEAP32[$3>>2]|0;
   $101 = (_strcmp($100,20862)|0);
   $102 = ($101|0)!=(0);
   if (!($102)) {
    HEAP32[$1>>2] = 13;
    break;
   }
   $103 = HEAP32[$3>>2]|0;
   $104 = (_strcmp($103,20875)|0);
   $105 = ($104|0)!=(0);
   if (!($105)) {
    HEAP32[$1>>2] = 14;
    break;
   }
   $106 = HEAP32[$3>>2]|0;
   $107 = (_strcmp($106,20891)|0);
   $108 = ($107|0)!=(0);
   if (!($108)) {
    HEAP32[$1>>2] = 6;
    break;
   }
   $109 = HEAP32[$3>>2]|0;
   $110 = (_strcmp($109,20914)|0);
   $111 = ($110|0)!=(0);
   if (!($111)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $112 = HEAP32[$3>>2]|0;
   $113 = (_strcmp($112,20927)|0);
   $114 = ($113|0)!=(0);
   if (!($114)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $115 = HEAP32[$3>>2]|0;
   $116 = (_strcmp($115,20943)|0);
   $117 = ($116|0)!=(0);
   if (!($117)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $118 = HEAP32[$3>>2]|0;
   $119 = (_strcmp($118,20954)|0);
   $120 = ($119|0)!=(0);
   if (!($120)) {
    HEAP32[$1>>2] = 15;
    break;
   }
   $121 = HEAP32[$3>>2]|0;
   $122 = (_strcmp($121,20973)|0);
   $123 = ($122|0)!=(0);
   if (!($123)) {
    HEAP32[$1>>2] = 16;
    break;
   }
   $124 = HEAP32[$3>>2]|0;
   $125 = (_strcmp($124,20995)|0);
   $126 = ($125|0)!=(0);
   if (!($126)) {
    HEAP32[$1>>2] = 17;
    break;
   }
   $127 = HEAP32[$3>>2]|0;
   $128 = (_strcmp($127,21014)|0);
   $129 = ($128|0)!=(0);
   if (!($129)) {
    HEAP32[$1>>2] = 7;
    break;
   }
   $130 = HEAP32[$3>>2]|0;
   $131 = (_strcmp($130,21043)|0);
   $132 = ($131|0)!=(0);
   if (!($132)) {
    HEAP32[$1>>2] = 6;
    break;
   }
   $133 = HEAP32[$3>>2]|0;
   $134 = (_strcmp($133,21060)|0);
   $135 = ($134|0)!=(0);
   if (!($135)) {
    HEAP32[$1>>2] = 8;
    break;
   }
   $136 = HEAP32[$3>>2]|0;
   $137 = (_strcmp($136,21075)|0);
   $138 = ($137|0)!=(0);
   if (!($138)) {
    HEAP32[$1>>2] = 9;
    break;
   }
   $139 = HEAP32[$3>>2]|0;
   $140 = (_strcmp($139,21090)|0);
   $141 = ($140|0)!=(0);
   if (!($141)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $142 = HEAP32[$3>>2]|0;
   $143 = (_strcmp($142,21111)|0);
   $144 = ($143|0)!=(0);
   if (!($144)) {
    HEAP32[$1>>2] = 10;
    break;
   }
   $145 = HEAP32[$3>>2]|0;
   $146 = (_strcmp($145,21131)|0);
   $147 = ($146|0)!=(0);
   if (!($147)) {
    HEAP32[$1>>2] = 11;
    break;
   }
   $148 = HEAP32[$3>>2]|0;
   $149 = (_strcmp($148,21151)|0);
   $150 = ($149|0)!=(0);
   if (!($150)) {
    HEAP32[$1>>2] = 12;
    break;
   }
   $151 = HEAP32[$3>>2]|0;
   $152 = (_strcmp($151,21177)|0);
   $153 = ($152|0)!=(0);
   if (!($153)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $154 = HEAP32[$3>>2]|0;
   $155 = (_strcmp($154,21196)|0);
   $156 = ($155|0)!=(0);
   if (!($156)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $157 = HEAP32[$3>>2]|0;
   $158 = (_strcmp($157,21208)|0);
   $159 = ($158|0)!=(0);
   if (!($159)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $160 = HEAP32[$3>>2]|0;
   $161 = (_strcmp($160,21220)|0);
   $162 = ($161|0)!=(0);
   if (!($162)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $163 = HEAP32[$3>>2]|0;
   $164 = (_strcmp($163,21232)|0);
   $165 = ($164|0)!=(0);
   if (!($165)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $166 = HEAP32[$3>>2]|0;
   $167 = (_strcmp($166,21244)|0);
   $168 = ($167|0)!=(0);
   if (!($168)) {
    HEAP32[$1>>2] = 18;
    break;
   }
   $169 = HEAP32[$3>>2]|0;
   $170 = (_strcmp($169,21256)|0);
   $171 = ($170|0)!=(0);
   if (!($171)) {
    HEAP32[$1>>2] = 13;
    break;
   }
   $172 = HEAP32[$3>>2]|0;
   $173 = (_strcmp($172,21268)|0);
   $174 = ($173|0)!=(0);
   if (!($174)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $175 = HEAP32[$3>>2]|0;
   $176 = (_strcmp($175,21280)|0);
   $177 = ($176|0)!=(0);
   if (!($177)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $178 = HEAP32[$3>>2]|0;
   $179 = (_strcmp($178,21292)|0);
   $180 = ($179|0)!=(0);
   if (!($180)) {
    HEAP32[$1>>2] = 14;
    break;
   }
   $181 = HEAP32[$3>>2]|0;
   $182 = (_strcmp($181,21305)|0);
   $183 = ($182|0)!=(0);
   if (!($183)) {
    HEAP32[$1>>2] = 15;
    break;
   }
   $184 = HEAP32[$3>>2]|0;
   $185 = (_strcmp($184,21318)|0);
   $186 = ($185|0)!=(0);
   if (!($186)) {
    HEAP32[$1>>2] = 16;
    break;
   }
   $187 = HEAP32[$3>>2]|0;
   $188 = (_strcmp($187,21331)|0);
   $189 = ($188|0)!=(0);
   if (!($189)) {
    HEAP32[$1>>2] = 17;
    break;
   }
   $190 = HEAP32[$3>>2]|0;
   $191 = (_strcmp($190,21344)|0);
   $192 = ($191|0)!=(0);
   if (!($192)) {
    HEAP32[$1>>2] = 18;
    break;
   }
   $193 = HEAP32[$3>>2]|0;
   $194 = (_strcmp($193,21357)|0);
   $195 = ($194|0)!=(0);
   if (!($195)) {
    HEAP32[$1>>2] = 19;
    break;
   }
   $196 = HEAP32[$3>>2]|0;
   $197 = (_strcmp($196,21370)|0);
   $198 = ($197|0)!=(0);
   if (!($198)) {
    HEAP32[$1>>2] = 20;
    break;
   }
   $199 = HEAP32[$3>>2]|0;
   $200 = (_strcmp($199,21383)|0);
   $201 = ($200|0)!=(0);
   if (!($201)) {
    HEAP32[$1>>2] = 21;
    break;
   }
   $202 = HEAP32[$3>>2]|0;
   $203 = (_strcmp($202,21396)|0);
   $204 = ($203|0)!=(0);
   if (!($204)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $205 = HEAP32[$3>>2]|0;
   $206 = (_strcmp($205,21415)|0);
   $207 = ($206|0)!=(0);
   if (!($207)) {
    HEAP32[$1>>2] = 6;
    break;
   }
   $208 = HEAP32[$3>>2]|0;
   $209 = (_strcmp($208,21434)|0);
   $210 = ($209|0)!=(0);
   if (!($210)) {
    HEAP32[$1>>2] = 7;
    break;
   }
   $211 = HEAP32[$3>>2]|0;
   $212 = (_strcmp($211,21453)|0);
   $213 = ($212|0)!=(0);
   if (!($213)) {
    HEAP32[$1>>2] = 19;
    break;
   }
   $214 = HEAP32[$3>>2]|0;
   $215 = (_strcmp($214,21466)|0);
   $216 = ($215|0)!=(0);
   if (!($216)) {
    HEAP32[$1>>2] = 20;
    break;
   }
   $217 = HEAP32[$3>>2]|0;
   $218 = (_strcmp($217,21484)|0);
   $219 = ($218|0)!=(0);
   if (!($219)) {
    HEAP32[$1>>2] = 21;
    break;
   }
   $220 = HEAP32[$3>>2]|0;
   $221 = (_strcmp($220,21502)|0);
   $222 = ($221|0)!=(0);
   if (!($222)) {
    HEAP32[$1>>2] = 22;
    break;
   }
   $223 = HEAP32[$3>>2]|0;
   $224 = (_strcmp($223,21520)|0);
   $225 = ($224|0)!=(0);
   if (!($225)) {
    HEAP32[$1>>2] = 23;
    break;
   }
   $226 = HEAP32[$3>>2]|0;
   $227 = (_strcmp($226,21538)|0);
   $228 = ($227|0)!=(0);
   if (!($228)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $229 = HEAP32[$3>>2]|0;
   $230 = (_strcmp($229,21558)|0);
   $231 = ($230|0)!=(0);
   if (!($231)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $232 = HEAP32[$3>>2]|0;
   $233 = (_strcmp($232,20499)|0);
   $234 = ($233|0)!=(0);
   if (!($234)) {
    HEAP32[$1>>2] = 7;
    break;
   }
   $235 = HEAP32[$3>>2]|0;
   $236 = (_strcmp($235,21576)|0);
   $237 = ($236|0)!=(0);
   if (!($237)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $238 = HEAP32[$3>>2]|0;
   $239 = (_strcmp($238,21591)|0);
   $240 = ($239|0)!=(0);
   if (!($240)) {
    HEAP32[$1>>2] = 8;
    break;
   }
   $241 = HEAP32[$3>>2]|0;
   $242 = (_strcmp($241,21612)|0);
   $243 = ($242|0)!=(0);
   if (!($243)) {
    HEAP32[$1>>2] = 9;
    break;
   }
   $244 = HEAP32[$3>>2]|0;
   $245 = (_strcmp($244,21627)|0);
   $246 = ($245|0)!=(0);
   if (!($246)) {
    HEAP32[$1>>2] = 10;
    break;
   }
   $247 = HEAP32[$3>>2]|0;
   $248 = (_strcmp($247,21645)|0);
   $249 = ($248|0)!=(0);
   if (!($249)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $250 = HEAP32[$3>>2]|0;
   $251 = (_strcmp($250,21661)|0);
   $252 = ($251|0)!=(0);
   if (!($252)) {
    HEAP32[$1>>2] = 11;
    break;
   }
   $253 = HEAP32[$3>>2]|0;
   $254 = (_strcmp($253,21680)|0);
   $255 = ($254|0)!=(0);
   if (!($255)) {
    HEAP32[$1>>2] = 22;
    break;
   }
   $256 = HEAP32[$3>>2]|0;
   $257 = (_strcmp($256,21694)|0);
   $258 = ($257|0)!=(0);
   if (!($258)) {
    HEAP32[$1>>2] = 23;
    break;
   }
   $259 = HEAP32[$3>>2]|0;
   $260 = (_strcmp($259,21709)|0);
   $261 = ($260|0)!=(0);
   if (!($261)) {
    HEAP32[$1>>2] = 8;
    break;
   }
   $262 = HEAP32[$3>>2]|0;
   $263 = (_strcmp($262,20430)|0);
   $264 = ($263|0)!=(0);
   if (!($264)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $265 = HEAP32[$3>>2]|0;
   $266 = (_strcmp($265,21720)|0);
   $267 = ($266|0)!=(0);
   if (!($267)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $268 = HEAP32[$3>>2]|0;
   $269 = (_strcmp($268,20529)|0);
   $270 = ($269|0)!=(0);
   if (!($270)) {
    HEAP32[$1>>2] = 24;
    break;
   }
   $271 = HEAP32[$3>>2]|0;
   $272 = (_strcmp($271,20559)|0);
   $273 = ($272|0)!=(0);
   if (!($273)) {
    HEAP32[$1>>2] = 25;
    break;
   }
   $274 = HEAP32[$3>>2]|0;
   $275 = (_strcmp($274,21736)|0);
   $276 = ($275|0)!=(0);
   if (!($276)) {
    HEAP32[$1>>2] = 12;
    break;
   }
   $277 = HEAP32[$3>>2]|0;
   $278 = (_strcmp($277,21763)|0);
   $279 = ($278|0)!=(0);
   if (!($279)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $280 = HEAP32[$3>>2]|0;
   $281 = (_strcmp($280,21777)|0);
   $282 = ($281|0)!=(0);
   if (!($282)) {
    HEAP32[$1>>2] = 13;
    break;
   }
   $283 = HEAP32[$3>>2]|0;
   $284 = (_strcmp($283,20465)|0);
   $285 = ($284|0)!=(0);
   if (!($285)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $286 = HEAP32[$3>>2]|0;
   $287 = (_strcmp($286,21797)|0);
   $288 = ($287|0)!=(0);
   if (!($288)) {
    HEAP32[$1>>2] = 6;
    break;
   }
   $289 = HEAP32[$3>>2]|0;
   $290 = (_strcmp($289,21815)|0);
   $291 = ($290|0)!=(0);
   if (!($291)) {
    HEAP32[$1>>2] = 9;
    break;
   }
   $292 = HEAP32[$3>>2]|0;
   $293 = (_strcmp($292,21827)|0);
   $294 = ($293|0)!=(0);
   if (!($294)) {
    HEAP32[$1>>2] = 24;
    break;
   }
   $295 = HEAP32[$3>>2]|0;
   $296 = (_strcmp($295,21848)|0);
   $297 = ($296|0)!=(0);
   if (!($297)) {
    HEAP32[$1>>2] = 26;
    break;
   }
   $298 = HEAP32[$3>>2]|0;
   $299 = (_strcmp($298,21866)|0);
   $300 = ($299|0)!=(0);
   if (!($300)) {
    HEAP32[$1>>2] = 27;
    break;
   }
   $301 = HEAP32[$3>>2]|0;
   $302 = (_strcmp($301,21884)|0);
   $303 = ($302|0)!=(0);
   if (!($303)) {
    HEAP32[$1>>2] = 28;
    break;
   }
   $304 = HEAP32[$3>>2]|0;
   $305 = (_strcmp($304,21905)|0);
   $306 = ($305|0)!=(0);
   if (!($306)) {
    HEAP32[$1>>2] = 14;
    break;
   }
   $307 = HEAP32[$3>>2]|0;
   $308 = (_strcmp($307,21931)|0);
   $309 = ($308|0)!=(0);
   if (!($309)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $310 = HEAP32[$3>>2]|0;
   $311 = (_strcmp($310,21954)|0);
   $312 = ($311|0)!=(0);
   if (!($312)) {
    HEAP32[$1>>2] = 15;
    break;
   }
   $313 = HEAP32[$3>>2]|0;
   $314 = (_strcmp($313,21992)|0);
   $315 = ($314|0)!=(0);
   if (!($315)) {
    HEAP32[$1>>2] = 10;
    break;
   }
   $316 = HEAP32[$3>>2]|0;
   $317 = (_strcmp($316,22008)|0);
   $318 = ($317|0)!=(0);
   if (!($318)) {
    HEAP32[$1>>2] = 7;
    break;
   }
   $319 = HEAP32[$3>>2]|0;
   $320 = (_strcmp($319,22023)|0);
   $321 = ($320|0)!=(0);
   if (!($321)) {
    HEAP32[$1>>2] = 25;
    break;
   }
   $322 = HEAP32[$3>>2]|0;
   $323 = (_strcmp($322,22046)|0);
   $324 = ($323|0)!=(0);
   if (!($324)) {
    HEAP32[$1>>2] = 16;
    break;
   }
   $325 = HEAP32[$3>>2]|0;
   $326 = (_strcmp($325,22059)|0);
   $327 = ($326|0)!=(0);
   if (!($327)) {
    HEAP32[$1>>2] = 29;
    break;
   }
   $328 = HEAP32[$3>>2]|0;
   $329 = (_strcmp($328,22073)|0);
   $330 = ($329|0)!=(0);
   if (!($330)) {
    HEAP32[$1>>2] = 30;
    break;
   }
   $331 = HEAP32[$3>>2]|0;
   $332 = (_strcmp($331,22087)|0);
   $333 = ($332|0)!=(0);
   if (!($333)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $334 = HEAP32[$3>>2]|0;
   $335 = (_strcmp($334,22107)|0);
   $336 = ($335|0)!=(0);
   if (!($336)) {
    HEAP32[$1>>2] = 8;
    break;
   }
   $337 = HEAP32[$3>>2]|0;
   $338 = (_strcmp($337,22127)|0);
   $339 = ($338|0)!=(0);
   if (!($339)) {
    HEAP32[$1>>2] = 17;
    break;
   }
   $340 = HEAP32[$3>>2]|0;
   $341 = (_strcmp($340,22143)|0);
   $342 = ($341|0)!=(0);
   if (!($342)) {
    HEAP32[$1>>2] = 18;
    break;
   }
   $343 = HEAP32[$3>>2]|0;
   $344 = (_strcmp($343,22161)|0);
   $345 = ($344|0)!=(0);
   if (!($345)) {
    HEAP32[$1>>2] = 26;
    break;
   }
   $346 = HEAP32[$3>>2]|0;
   $347 = (_strcmp($346,22177)|0);
   $348 = ($347|0)!=(0);
   if (!($348)) {
    HEAP32[$1>>2] = 19;
    break;
   }
   $349 = HEAP32[$3>>2]|0;
   $350 = (_strcmp($349,22192)|0);
   $351 = ($350|0)!=(0);
   if (!($351)) {
    HEAP32[$1>>2] = 9;
    break;
   }
   $352 = HEAP32[$3>>2]|0;
   $353 = (_strcmp($352,22214)|0);
   $354 = ($353|0)!=(0);
   if (!($354)) {
    HEAP32[$1>>2] = 31;
    break;
   }
   $355 = HEAP32[$3>>2]|0;
   $356 = (_strcmp($355,22232)|0);
   $357 = ($356|0)!=(0);
   if (!($357)) {
    HEAP32[$1>>2] = 32;
    break;
   }
   $358 = HEAP32[$3>>2]|0;
   $359 = (_strcmp($358,22253)|0);
   $360 = ($359|0)!=(0);
   if (!($360)) {
    HEAP32[$1>>2] = 10;
    break;
   }
   $361 = HEAP32[$3>>2]|0;
   $362 = (_strcmp($361,22271)|0);
   $363 = ($362|0)!=(0);
   if (!($363)) {
    HEAP32[$1>>2] = 11;
    break;
   }
   $364 = HEAP32[$3>>2]|0;
   $365 = (_strcmp($364,22284)|0);
   $366 = ($365|0)!=(0);
   if (!($366)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $367 = HEAP32[$3>>2]|0;
   $368 = (_strcmp($367,22299)|0);
   $369 = ($368|0)!=(0);
   if (!($369)) {
    HEAP32[$1>>2] = 12;
    break;
   }
   $370 = HEAP32[$3>>2]|0;
   $371 = (_strcmp($370,22313)|0);
   $372 = ($371|0)!=(0);
   if (!($372)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $373 = HEAP32[$3>>2]|0;
   $374 = (_strcmp($373,22323)|0);
   $375 = ($374|0)!=(0);
   if (!($375)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $376 = HEAP32[$3>>2]|0;
   $377 = (_strcmp($376,22333)|0);
   $378 = ($377|0)!=(0);
   if (!($378)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $379 = HEAP32[$3>>2]|0;
   $380 = (_strcmp($379,22355)|0);
   $381 = ($380|0)!=(0);
   if (!($381)) {
    HEAP32[$1>>2] = 13;
    break;
   }
   $382 = HEAP32[$3>>2]|0;
   $383 = (_strcmp($382,22381)|0);
   $384 = ($383|0)!=(0);
   if (!($384)) {
    HEAP32[$1>>2] = 14;
    break;
   }
   $385 = HEAP32[$3>>2]|0;
   $386 = (_strcmp($385,22408)|0);
   $387 = ($386|0)!=(0);
   if (!($387)) {
    HEAP32[$1>>2] = 27;
    break;
   }
   $388 = HEAP32[$3>>2]|0;
   $389 = (_strcmp($388,22421)|0);
   $390 = ($389|0)!=(0);
   if (!($390)) {
    HEAP32[$1>>2] = 20;
    break;
   }
   $391 = HEAP32[$3>>2]|0;
   $392 = (_strcmp($391,22436)|0);
   $393 = ($392|0)!=(0);
   if (!($393)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $394 = HEAP32[$3>>2]|0;
   $395 = (_strcmp($394,22451)|0);
   $396 = ($395|0)!=(0);
   if (!($396)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $397 = HEAP32[$3>>2]|0;
   $398 = (_strcmp($397,22475)|0);
   $399 = ($398|0)!=(0);
   if (!($399)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $400 = HEAP32[$3>>2]|0;
   $401 = (_strcmp($400,22486)|0);
   $402 = ($401|0)!=(0);
   if (!($402)) {
    HEAP32[$1>>2] = 33;
    break;
   }
   $403 = HEAP32[$3>>2]|0;
   $404 = (_strcmp($403,22508)|0);
   $405 = ($404|0)!=(0);
   if (!($405)) {
    HEAP32[$1>>2] = 21;
    break;
   }
   $406 = HEAP32[$3>>2]|0;
   $407 = (_strcmp($406,22530)|0);
   $408 = ($407|0)!=(0);
   if (!($408)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $409 = HEAP32[$3>>2]|0;
   $410 = (_strcmp($409,22554)|0);
   $411 = ($410|0)!=(0);
   if (!($411)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $412 = HEAP32[$3>>2]|0;
   $413 = (_strcmp($412,22563)|0);
   $414 = ($413|0)!=(0);
   if (!($414)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $415 = HEAP32[$3>>2]|0;
   $416 = (_strcmp($415,22571)|0);
   $417 = ($416|0)!=(0);
   if (!($417)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $418 = HEAP32[$3>>2]|0;
   $419 = (_strcmp($418,22584)|0);
   $420 = ($419|0)!=(0);
   if (!($420)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $421 = HEAP32[$3>>2]|0;
   $422 = (_strcmp($421,22598)|0);
   $423 = ($422|0)!=(0);
   if (!($423)) {
    HEAP32[$1>>2] = 15;
    break;
   }
   $424 = HEAP32[$3>>2]|0;
   $425 = (_strcmp($424,22610)|0);
   $426 = ($425|0)!=(0);
   if (!($426)) {
    HEAP32[$1>>2] = 16;
    break;
   }
   $427 = HEAP32[$3>>2]|0;
   $428 = (_strcmp($427,22619)|0);
   $429 = ($428|0)!=(0);
   if (!($429)) {
    HEAP32[$1>>2] = 17;
    break;
   }
   $430 = HEAP32[$3>>2]|0;
   $431 = (_strcmp($430,22629)|0);
   $432 = ($431|0)!=(0);
   if (!($432)) {
    HEAP32[$1>>2] = 18;
    break;
   }
   $433 = HEAP32[$3>>2]|0;
   $434 = (_strcmp($433,22641)|0);
   $435 = ($434|0)!=(0);
   if (!($435)) {
    HEAP32[$1>>2] = 19;
    break;
   }
   $436 = HEAP32[$3>>2]|0;
   $437 = (_strcmp($436,22652)|0);
   $438 = ($437|0)!=(0);
   if (!($438)) {
    HEAP32[$1>>2] = 20;
    break;
   }
   $439 = HEAP32[$3>>2]|0;
   $440 = (_strcmp($439,22660)|0);
   $441 = ($440|0)!=(0);
   if (!($441)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $442 = HEAP32[$3>>2]|0;
   $443 = (_strcmp($442,22672)|0);
   $444 = ($443|0)!=(0);
   if (!($444)) {
    HEAP32[$1>>2] = 21;
    break;
   }
   $445 = HEAP32[$3>>2]|0;
   $446 = (_strcmp($445,22687)|0);
   $447 = ($446|0)!=(0);
   if (!($447)) {
    HEAP32[$1>>2] = 22;
    break;
   }
   $448 = HEAP32[$3>>2]|0;
   $449 = (_strcmp($448,22699)|0);
   $450 = ($449|0)!=(0);
   if (!($450)) {
    HEAP32[$1>>2] = 23;
    break;
   }
   $451 = HEAP32[$3>>2]|0;
   $452 = (_strcmp($451,22713)|0);
   $453 = ($452|0)!=(0);
   if (!($453)) {
    HEAP32[$1>>2] = 11;
    break;
   }
   $454 = HEAP32[$3>>2]|0;
   $455 = (_strcmp($454,22738)|0);
   $456 = ($455|0)!=(0);
   if (!($456)) {
    HEAP32[$1>>2] = 24;
    break;
   }
   $457 = HEAP32[$3>>2]|0;
   $458 = (_strcmp($457,22755)|0);
   $459 = ($458|0)!=(0);
   if (!($459)) {
    HEAP32[$1>>2] = 25;
    break;
   }
   $460 = HEAP32[$3>>2]|0;
   $461 = (_strcmp($460,22771)|0);
   $462 = ($461|0)!=(0);
   if (!($462)) {
    HEAP32[$1>>2] = 26;
    break;
   }
   $463 = HEAP32[$3>>2]|0;
   $464 = (_strcmp($463,22787)|0);
   $465 = ($464|0)!=(0);
   if (!($465)) {
    HEAP32[$1>>2] = 12;
    break;
   }
   $466 = HEAP32[$3>>2]|0;
   $467 = (_strcmp($466,22799)|0);
   $468 = ($467|0)!=(0);
   if (!($468)) {
    HEAP32[$1>>2] = 34;
    break;
   }
   $469 = HEAP32[$3>>2]|0;
   $470 = (_strcmp($469,22811)|0);
   $471 = ($470|0)!=(0);
   if (!($471)) {
    HEAP32[$1>>2] = 35;
    break;
   }
   $472 = HEAP32[$3>>2]|0;
   $473 = (_strcmp($472,22835)|0);
   $474 = ($473|0)!=(0);
   if (!($474)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $475 = HEAP32[$3>>2]|0;
   $476 = (_strcmp($475,22848)|0);
   $477 = ($476|0)!=(0);
   if (!($477)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $478 = HEAP32[$3>>2]|0;
   $479 = (_strcmp($478,22862)|0);
   $480 = ($479|0)!=(0);
   if (!($480)) {
    HEAP32[$1>>2] = 36;
    break;
   }
   $481 = HEAP32[$3>>2]|0;
   $482 = (_strcmp($481,22884)|0);
   $483 = ($482|0)!=(0);
   if (!($483)) {
    HEAP32[$1>>2] = 37;
    break;
   }
   $484 = HEAP32[$3>>2]|0;
   $485 = (_strcmp($484,22891)|0);
   $486 = ($485|0)!=(0);
   if (!($486)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $487 = HEAP32[$3>>2]|0;
   $488 = (_strcmp($487,22907)|0);
   $489 = ($488|0)!=(0);
   if (!($489)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $490 = HEAP32[$3>>2]|0;
   $491 = (_strcmp($490,22924)|0);
   $492 = ($491|0)!=(0);
   if (!($492)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $493 = HEAP32[$3>>2]|0;
   $494 = (_strcmp($493,22941)|0);
   $495 = ($494|0)!=(0);
   if (!($495)) {
    HEAP32[$1>>2] = 28;
    break;
   }
   $496 = HEAP32[$3>>2]|0;
   $497 = (_strcmp($496,22957)|0);
   $498 = ($497|0)!=(0);
   if (!($498)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $499 = HEAP32[$3>>2]|0;
   $500 = (_strcmp($499,22973)|0);
   $501 = ($500|0)!=(0);
   if (!($501)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $502 = HEAP32[$3>>2]|0;
   $503 = (_strcmp($502,22990)|0);
   $504 = ($503|0)!=(0);
   if (!($504)) {
    HEAP32[$1>>2] = 29;
    break;
   }
   $505 = HEAP32[$3>>2]|0;
   $506 = (_strcmp($505,23004)|0);
   $507 = ($506|0)!=(0);
   if (!($507)) {
    HEAP32[$1>>2] = 30;
    break;
   }
   $508 = HEAP32[$3>>2]|0;
   $509 = (_strcmp($508,23016)|0);
   $510 = ($509|0)!=(0);
   if (!($510)) {
    HEAP32[$1>>2] = 22;
    break;
   }
   $511 = HEAP32[$3>>2]|0;
   $512 = (_strcmp($511,23027)|0);
   $513 = ($512|0)!=(0);
   if (!($513)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $514 = HEAP32[$3>>2]|0;
   $515 = (_strcmp($514,23040)|0);
   $516 = ($515|0)!=(0);
   if (!($516)) {
    HEAP32[$1>>2] = 23;
    break;
   }
   $517 = HEAP32[$3>>2]|0;
   $518 = (_strcmp($517,23050)|0);
   $519 = ($518|0)!=(0);
   if (!($519)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $520 = HEAP32[$3>>2]|0;
   $521 = (_strcmp($520,23067)|0);
   $522 = ($521|0)!=(0);
   if (!($522)) {
    HEAP32[$1>>2] = 24;
    break;
   }
   $523 = HEAP32[$3>>2]|0;
   $524 = (_strcmp($523,23079)|0);
   $525 = ($524|0)!=(0);
   if (!($525)) {
    HEAP32[$1>>2] = 25;
    break;
   }
   $526 = HEAP32[$3>>2]|0;
   $527 = (_strcmp($526,23101)|0);
   $528 = ($527|0)!=(0);
   if (!($528)) {
    HEAP32[$1>>2] = 26;
    break;
   }
   $529 = HEAP32[$3>>2]|0;
   $530 = (_strcmp($529,23121)|0);
   $531 = ($530|0)!=(0);
   if (!($531)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $532 = HEAP32[$3>>2]|0;
   $533 = (_strcmp($532,23134)|0);
   $534 = ($533|0)!=(0);
   if (!($534)) {
    HEAP32[$1>>2] = 27;
    break;
   }
   $535 = HEAP32[$3>>2]|0;
   $536 = (_strcmp($535,23156)|0);
   $537 = ($536|0)!=(0);
   if (!($537)) {
    HEAP32[$1>>2] = 28;
    break;
   }
   $538 = HEAP32[$3>>2]|0;
   $539 = (_strcmp($538,23176)|0);
   $540 = ($539|0)!=(0);
   if (!($540)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $541 = HEAP32[$3>>2]|0;
   $542 = (_strcmp($541,23193)|0);
   $543 = ($542|0)!=(0);
   if (!($543)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $544 = HEAP32[$3>>2]|0;
   $545 = (_strcmp($544,23210)|0);
   $546 = ($545|0)!=(0);
   if (!($546)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $547 = HEAP32[$3>>2]|0;
   $548 = (_strcmp($547,23230)|0);
   $549 = ($548|0)!=(0);
   if ($549) {
    $550 = HEAP32[$2>>2]|0;
    $551 = HEAP32[$3>>2]|0;
    $552 = _emscripten_asm_const_iii(0, ($550|0), ($551|0))|0;
    HEAP32[$1>>2] = 0;
    break;
   } else {
    HEAP32[$1>>2] = 38;
    break;
   }
  } else {
   HEAP32[$1>>2] = 6;
  }
 } while(0);
 $553 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($553|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4236$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0;
 var $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0;
 var $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0;
 var $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0, $$723948$i = 0, $$749$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i210 = 0, $$pre$i212 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0;
 var $$pre10$i$i = 0, $$sink1$i = 0, $$sink1$i$i = 0, $$sink16$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0, $not$$i$i = 0, $not$$i17$i = 0, $not$$i209 = 0, $not$$i216 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$5$i = 0, $not$7$i$i = 0, $not$8$i = 0, $not$9$i = 0;
 var $or$cond$i = 0, $or$cond$i214 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i215 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[84927]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (339748 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[84927] = $24;
     } else {
      $25 = HEAP32[(339724)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(339716)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (339748 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[84927] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(339724)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(339728)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (339748 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[84927] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(339724)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(339716)>>2] = $84;
     HEAP32[(339728)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(339712)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (340012 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $139 = ((($134)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $not$5$i = ($140|0)==(0|0);
     $$sink16$i = $not$5$i&1;
     $141 = (((($134)) + 16|0) + ($$sink16$i<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==(0|0);
     if ($143) {
      $$0192$lcssa$i = $134;$$0193$lcssa$i = $138;
     } else {
      $$01928$i = $134;$$01937$i = $138;$145 = $142;
      while(1) {
       $144 = ((($145)) + 4|0);
       $146 = HEAP32[$144>>2]|0;
       $147 = $146 & -8;
       $148 = (($147) - ($6))|0;
       $149 = ($148>>>0)<($$01937$i>>>0);
       $$$0193$i = $149 ? $148 : $$01937$i;
       $$$0192$i = $149 ? $145 : $$01928$i;
       $150 = ((($145)) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $not$$i = ($151|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $152 = (((($145)) + 16|0) + ($$sink1$i<<2)|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($153|0)==(0|0);
       if ($154) {
        $$0192$lcssa$i = $$$0192$i;$$0193$lcssa$i = $$$0193$i;
        break;
       } else {
        $$01928$i = $$$0192$i;$$01937$i = $$$0193$i;$145 = $153;
       }
      }
     }
     $155 = HEAP32[(339724)>>2]|0;
     $156 = ($$0192$lcssa$i>>>0)<($155>>>0);
     if ($156) {
      _abort();
      // unreachable;
     }
     $157 = (($$0192$lcssa$i) + ($6)|0);
     $158 = ($$0192$lcssa$i>>>0)<($157>>>0);
     if (!($158)) {
      _abort();
      // unreachable;
     }
     $159 = ((($$0192$lcssa$i)) + 24|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ((($$0192$lcssa$i)) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($162|0)==($$0192$lcssa$i|0);
     do {
      if ($163) {
       $173 = ((($$0192$lcssa$i)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = ((($$0192$lcssa$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $$3$i = 0;
         break;
        } else {
         $$1196$i = $177;$$1198$i = $176;
        }
       } else {
        $$1196$i = $174;$$1198$i = $173;
       }
       while(1) {
        $179 = ((($$1196$i)) + 20|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $$1196$i = $180;$$1198$i = $179;
         continue;
        }
        $182 = ((($$1196$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if ($184) {
         break;
        } else {
         $$1196$i = $183;$$1198$i = $182;
        }
       }
       $185 = ($$1198$i>>>0)<($155>>>0);
       if ($185) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1198$i>>2] = 0;
        $$3$i = $$1196$i;
        break;
       }
      } else {
       $164 = ((($$0192$lcssa$i)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165>>>0)<($155>>>0);
       if ($166) {
        _abort();
        // unreachable;
       }
       $167 = ((($165)) + 12|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==($$0192$lcssa$i|0);
       if (!($169)) {
        _abort();
        // unreachable;
       }
       $170 = ((($162)) + 8|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==($$0192$lcssa$i|0);
       if ($172) {
        HEAP32[$167>>2] = $162;
        HEAP32[$170>>2] = $165;
        $$3$i = $162;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $186 = ($160|0)==(0|0);
     L73: do {
      if (!($186)) {
       $187 = ((($$0192$lcssa$i)) + 28|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = (340012 + ($188<<2)|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = ($$0192$lcssa$i|0)==($190|0);
       do {
        if ($191) {
         HEAP32[$189>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $192 = 1 << $188;
          $193 = $192 ^ -1;
          $194 = $108 & $193;
          HEAP32[(339712)>>2] = $194;
          break L73;
         }
        } else {
         $195 = HEAP32[(339724)>>2]|0;
         $196 = ($160>>>0)<($195>>>0);
         if ($196) {
          _abort();
          // unreachable;
         } else {
          $197 = ((($160)) + 16|0);
          $198 = HEAP32[$197>>2]|0;
          $not$1$i = ($198|0)!=($$0192$lcssa$i|0);
          $$sink2$i = $not$1$i&1;
          $199 = (((($160)) + 16|0) + ($$sink2$i<<2)|0);
          HEAP32[$199>>2] = $$3$i;
          $200 = ($$3$i|0)==(0|0);
          if ($200) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while(0);
       $201 = HEAP32[(339724)>>2]|0;
       $202 = ($$3$i>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       }
       $203 = ((($$3$i)) + 24|0);
       HEAP32[$203>>2] = $160;
       $204 = ((($$0192$lcssa$i)) + 16|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = ($205|0)==(0|0);
       do {
        if (!($206)) {
         $207 = ($205>>>0)<($201>>>0);
         if ($207) {
          _abort();
          // unreachable;
         } else {
          $208 = ((($$3$i)) + 16|0);
          HEAP32[$208>>2] = $205;
          $209 = ((($205)) + 24|0);
          HEAP32[$209>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $210 = ((($$0192$lcssa$i)) + 20|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($211|0)==(0|0);
       if (!($212)) {
        $213 = HEAP32[(339724)>>2]|0;
        $214 = ($211>>>0)<($213>>>0);
        if ($214) {
         _abort();
         // unreachable;
        } else {
         $215 = ((($$3$i)) + 20|0);
         HEAP32[$215>>2] = $211;
         $216 = ((($211)) + 24|0);
         HEAP32[$216>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $217 = ($$0193$lcssa$i>>>0)<(16);
     if ($217) {
      $218 = (($$0193$lcssa$i) + ($6))|0;
      $219 = $218 | 3;
      $220 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$220>>2] = $219;
      $221 = (($$0192$lcssa$i) + ($218)|0);
      $222 = ((($221)) + 4|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = $223 | 1;
      HEAP32[$222>>2] = $224;
     } else {
      $225 = $6 | 3;
      $226 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$226>>2] = $225;
      $227 = $$0193$lcssa$i | 1;
      $228 = ((($157)) + 4|0);
      HEAP32[$228>>2] = $227;
      $229 = (($157) + ($$0193$lcssa$i)|0);
      HEAP32[$229>>2] = $$0193$lcssa$i;
      $230 = ($37|0)==(0);
      if (!($230)) {
       $231 = HEAP32[(339728)>>2]|0;
       $232 = $37 >>> 3;
       $233 = $232 << 1;
       $234 = (339748 + ($233<<2)|0);
       $235 = 1 << $232;
       $236 = $8 & $235;
       $237 = ($236|0)==(0);
       if ($237) {
        $238 = $8 | $235;
        HEAP32[84927] = $238;
        $$pre$i = ((($234)) + 8|0);
        $$0189$i = $234;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $239 = ((($234)) + 8|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = HEAP32[(339724)>>2]|0;
        $242 = ($240>>>0)<($241>>>0);
        if ($242) {
         _abort();
         // unreachable;
        } else {
         $$0189$i = $240;$$pre$phi$iZ2D = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $231;
       $243 = ((($$0189$i)) + 12|0);
       HEAP32[$243>>2] = $231;
       $244 = ((($231)) + 8|0);
       HEAP32[$244>>2] = $$0189$i;
       $245 = ((($231)) + 12|0);
       HEAP32[$245>>2] = $234;
      }
      HEAP32[(339716)>>2] = $$0193$lcssa$i;
      HEAP32[(339728)>>2] = $157;
     }
     $246 = ((($$0192$lcssa$i)) + 8|0);
     $$0 = $246;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $247 = ($0>>>0)>(4294967231);
   if ($247) {
    $$0197 = -1;
   } else {
    $248 = (($0) + 11)|0;
    $249 = $248 & -8;
    $250 = HEAP32[(339712)>>2]|0;
    $251 = ($250|0)==(0);
    if ($251) {
     $$0197 = $249;
    } else {
     $252 = (0 - ($249))|0;
     $253 = $248 >>> 8;
     $254 = ($253|0)==(0);
     if ($254) {
      $$0358$i = 0;
     } else {
      $255 = ($249>>>0)>(16777215);
      if ($255) {
       $$0358$i = 31;
      } else {
       $256 = (($253) + 1048320)|0;
       $257 = $256 >>> 16;
       $258 = $257 & 8;
       $259 = $253 << $258;
       $260 = (($259) + 520192)|0;
       $261 = $260 >>> 16;
       $262 = $261 & 4;
       $263 = $262 | $258;
       $264 = $259 << $262;
       $265 = (($264) + 245760)|0;
       $266 = $265 >>> 16;
       $267 = $266 & 2;
       $268 = $263 | $267;
       $269 = (14 - ($268))|0;
       $270 = $264 << $267;
       $271 = $270 >>> 15;
       $272 = (($269) + ($271))|0;
       $273 = $272 << 1;
       $274 = (($272) + 7)|0;
       $275 = $249 >>> $274;
       $276 = $275 & 1;
       $277 = $276 | $273;
       $$0358$i = $277;
      }
     }
     $278 = (340012 + ($$0358$i<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)==(0|0);
     L117: do {
      if ($280) {
       $$2355$i = 0;$$3$i201 = 0;$$3350$i = $252;
       label = 81;
      } else {
       $281 = ($$0358$i|0)==(31);
       $282 = $$0358$i >>> 1;
       $283 = (25 - ($282))|0;
       $284 = $281 ? 0 : $283;
       $285 = $249 << $284;
       $$0342$i = 0;$$0347$i = $252;$$0353$i = $279;$$0359$i = $285;$$0362$i = 0;
       while(1) {
        $286 = ((($$0353$i)) + 4|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = $287 & -8;
        $289 = (($288) - ($249))|0;
        $290 = ($289>>>0)<($$0347$i>>>0);
        if ($290) {
         $291 = ($289|0)==(0);
         if ($291) {
          $$415$i = $$0353$i;$$435114$i = 0;$$435713$i = $$0353$i;
          label = 85;
          break L117;
         } else {
          $$1343$i = $$0353$i;$$1348$i = $289;
         }
        } else {
         $$1343$i = $$0342$i;$$1348$i = $$0347$i;
        }
        $292 = ((($$0353$i)) + 20|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = $$0359$i >>> 31;
        $295 = (((($$0353$i)) + 16|0) + ($294<<2)|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = ($293|0)==(0|0);
        $298 = ($293|0)==($296|0);
        $or$cond2$i = $297 | $298;
        $$1363$i = $or$cond2$i ? $$0362$i : $293;
        $299 = ($296|0)==(0|0);
        $not$8$i = $299 ^ 1;
        $300 = $not$8$i&1;
        $$0359$$i = $$0359$i << $300;
        if ($299) {
         $$2355$i = $$1363$i;$$3$i201 = $$1343$i;$$3350$i = $$1348$i;
         label = 81;
         break;
        } else {
         $$0342$i = $$1343$i;$$0347$i = $$1348$i;$$0353$i = $296;$$0359$i = $$0359$$i;$$0362$i = $$1363$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 81) {
      $301 = ($$2355$i|0)==(0|0);
      $302 = ($$3$i201|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $$0358$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $250 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $$0197 = $249;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (340012 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $$4$ph$i = 0;$$4357$ph$i = $332;
      } else {
       $$4$ph$i = $$3$i201;$$4357$ph$i = $$2355$i;
      }
      $333 = ($$4357$ph$i|0)==(0|0);
      if ($333) {
       $$4$lcssa$i = $$4$ph$i;$$4351$lcssa$i = $$3350$i;
      } else {
       $$415$i = $$4$ph$i;$$435114$i = $$3350$i;$$435713$i = $$4357$ph$i;
       label = 85;
      }
     }
     if ((label|0) == 85) {
      while(1) {
       label = 0;
       $334 = ((($$435713$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($249))|0;
       $338 = ($337>>>0)<($$435114$i>>>0);
       $$$4351$i = $338 ? $337 : $$435114$i;
       $$4357$$4$i = $338 ? $$435713$i : $$415$i;
       $339 = ((($$435713$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $not$1$i203 = ($340|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $341 = (((($$435713$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = ($342|0)==(0|0);
       if ($343) {
        $$4$lcssa$i = $$4357$$4$i;$$4351$lcssa$i = $$$4351$i;
        break;
       } else {
        $$415$i = $$4357$$4$i;$$435114$i = $$$4351$i;$$435713$i = $342;
        label = 85;
       }
      }
     }
     $344 = ($$4$lcssa$i|0)==(0|0);
     if ($344) {
      $$0197 = $249;
     } else {
      $345 = HEAP32[(339716)>>2]|0;
      $346 = (($345) - ($249))|0;
      $347 = ($$4351$lcssa$i>>>0)<($346>>>0);
      if ($347) {
       $348 = HEAP32[(339724)>>2]|0;
       $349 = ($$4$lcssa$i>>>0)<($348>>>0);
       if ($349) {
        _abort();
        // unreachable;
       }
       $350 = (($$4$lcssa$i) + ($249)|0);
       $351 = ($$4$lcssa$i>>>0)<($350>>>0);
       if (!($351)) {
        _abort();
        // unreachable;
       }
       $352 = ((($$4$lcssa$i)) + 24|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ((($$4$lcssa$i)) + 12|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ($355|0)==($$4$lcssa$i|0);
       do {
        if ($356) {
         $366 = ((($$4$lcssa$i)) + 20|0);
         $367 = HEAP32[$366>>2]|0;
         $368 = ($367|0)==(0|0);
         if ($368) {
          $369 = ((($$4$lcssa$i)) + 16|0);
          $370 = HEAP32[$369>>2]|0;
          $371 = ($370|0)==(0|0);
          if ($371) {
           $$3372$i = 0;
           break;
          } else {
           $$1370$i = $370;$$1374$i = $369;
          }
         } else {
          $$1370$i = $367;$$1374$i = $366;
         }
         while(1) {
          $372 = ((($$1370$i)) + 20|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = ($373|0)==(0|0);
          if (!($374)) {
           $$1370$i = $373;$$1374$i = $372;
           continue;
          }
          $375 = ((($$1370$i)) + 16|0);
          $376 = HEAP32[$375>>2]|0;
          $377 = ($376|0)==(0|0);
          if ($377) {
           break;
          } else {
           $$1370$i = $376;$$1374$i = $375;
          }
         }
         $378 = ($$1374$i>>>0)<($348>>>0);
         if ($378) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1374$i>>2] = 0;
          $$3372$i = $$1370$i;
          break;
         }
        } else {
         $357 = ((($$4$lcssa$i)) + 8|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = ($358>>>0)<($348>>>0);
         if ($359) {
          _abort();
          // unreachable;
         }
         $360 = ((($358)) + 12|0);
         $361 = HEAP32[$360>>2]|0;
         $362 = ($361|0)==($$4$lcssa$i|0);
         if (!($362)) {
          _abort();
          // unreachable;
         }
         $363 = ((($355)) + 8|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==($$4$lcssa$i|0);
         if ($365) {
          HEAP32[$360>>2] = $355;
          HEAP32[$363>>2] = $358;
          $$3372$i = $355;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $379 = ($353|0)==(0|0);
       L164: do {
        if ($379) {
         $470 = $250;
        } else {
         $380 = ((($$4$lcssa$i)) + 28|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = (340012 + ($381<<2)|0);
         $383 = HEAP32[$382>>2]|0;
         $384 = ($$4$lcssa$i|0)==($383|0);
         do {
          if ($384) {
           HEAP32[$382>>2] = $$3372$i;
           $cond$i208 = ($$3372$i|0)==(0|0);
           if ($cond$i208) {
            $385 = 1 << $381;
            $386 = $385 ^ -1;
            $387 = $250 & $386;
            HEAP32[(339712)>>2] = $387;
            $470 = $387;
            break L164;
           }
          } else {
           $388 = HEAP32[(339724)>>2]|0;
           $389 = ($353>>>0)<($388>>>0);
           if ($389) {
            _abort();
            // unreachable;
           } else {
            $390 = ((($353)) + 16|0);
            $391 = HEAP32[$390>>2]|0;
            $not$$i209 = ($391|0)!=($$4$lcssa$i|0);
            $$sink3$i = $not$$i209&1;
            $392 = (((($353)) + 16|0) + ($$sink3$i<<2)|0);
            HEAP32[$392>>2] = $$3372$i;
            $393 = ($$3372$i|0)==(0|0);
            if ($393) {
             $470 = $250;
             break L164;
            } else {
             break;
            }
           }
          }
         } while(0);
         $394 = HEAP32[(339724)>>2]|0;
         $395 = ($$3372$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3372$i)) + 24|0);
         HEAP32[$396>>2] = $353;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3372$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3372$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $250;
         } else {
          $406 = HEAP32[(339724)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3372$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3372$i;
           $470 = $250;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4351$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4351$lcssa$i) + ($249))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $249 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4351$lcssa$i | 1;
         $421 = ((($350)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($350) + ($$4351$lcssa$i)|0);
         HEAP32[$422>>2] = $$4351$lcssa$i;
         $423 = $$4351$lcssa$i >>> 3;
         $424 = ($$4351$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (339748 + ($425<<2)|0);
          $427 = HEAP32[84927]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[84927] = $431;
           $$pre$i210 = ((($426)) + 8|0);
           $$0368$i = $426;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(339724)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0368$i = $433;$$pre$phi$i211Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $350;
          $436 = ((($$0368$i)) + 12|0);
          HEAP32[$436>>2] = $350;
          $437 = ((($350)) + 8|0);
          HEAP32[$437>>2] = $$0368$i;
          $438 = ((($350)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4351$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0361$i = 0;
         } else {
          $441 = ($$4351$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0361$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4351$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0361$i = $463;
          }
         }
         $464 = (340012 + ($$0361$i<<2)|0);
         $465 = ((($350)) + 28|0);
         HEAP32[$465>>2] = $$0361$i;
         $466 = ((($350)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0361$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(339712)>>2] = $472;
          HEAP32[$464>>2] = $350;
          $473 = ((($350)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($350)) + 12|0);
          HEAP32[$474>>2] = $350;
          $475 = ((($350)) + 8|0);
          HEAP32[$475>>2] = $350;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0361$i|0)==(31);
         $478 = $$0361$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4351$lcssa$i << $480;
         $$0344$i = $481;$$0345$i = $476;
         while(1) {
          $482 = ((($$0345$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4351$lcssa$i|0);
          if ($485) {
           label = 139;
           break;
          }
          $486 = $$0344$i >>> 31;
          $487 = (((($$0345$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0344$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 136;
           break;
          } else {
           $$0344$i = $488;$$0345$i = $489;
          }
         }
         if ((label|0) == 136) {
          $491 = HEAP32[(339724)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $350;
           $493 = ((($350)) + 24|0);
           HEAP32[$493>>2] = $$0345$i;
           $494 = ((($350)) + 12|0);
           HEAP32[$494>>2] = $350;
           $495 = ((($350)) + 8|0);
           HEAP32[$495>>2] = $350;
           break;
          }
         }
         else if ((label|0) == 139) {
          $496 = ((($$0345$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(339724)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$9$i = ($$0345$i>>>0)>=($498>>>0);
          $500 = $499 & $not$9$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $350;
           HEAP32[$496>>2] = $350;
           $502 = ((($350)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($350)) + 12|0);
           HEAP32[$503>>2] = $$0345$i;
           $504 = ((($350)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $249;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(339716)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(339728)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(339728)>>2] = $511;
   HEAP32[(339716)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(339716)>>2] = 0;
   HEAP32[(339728)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(339720)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(339720)>>2] = $526;
  $527 = HEAP32[(339732)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(339732)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[85045]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(340188)>>2] = 4096;
  HEAP32[(340184)>>2] = 4096;
  HEAP32[(340192)>>2] = -1;
  HEAP32[(340196)>>2] = -1;
  HEAP32[(340200)>>2] = 0;
  HEAP32[(340152)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[85045] = $538;
  $542 = 4096;
 } else {
  $$pre$i212 = HEAP32[(340188)>>2]|0;
  $542 = $$pre$i212;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(340148)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(340140)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i = $550 | $551;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(340152)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L244: do {
  if ($554) {
   $555 = HEAP32[(339732)>>2]|0;
   $556 = ($555|0)==(0|0);
   L246: do {
    if ($556) {
     label = 163;
    } else {
     $$0$i$i = (340156);
     while(1) {
      $557 = HEAP32[$$0$i$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 163;
       break L246;
      } else {
       $$0$i$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if ($596) {
        $$2234253237$i = $589;
       } else {
        $$723948$i = $589;$$749$i = $591;
        label = 180;
        break L244;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 171;
      }
     } else {
      $$2234253237$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 163) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if ($567) {
      $$2234253237$i = 0;
     } else {
      $568 = $566;
      $569 = HEAP32[(340184)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(340140)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i214 = $580 & $581;
      if ($or$cond$i214) {
       $582 = HEAP32[(340148)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i215 = $584 | $585;
        if ($or$cond2$i215) {
         $$2234253237$i = 0;
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723948$i = $$$i;$$749$i = $566;
        label = 180;
        break L244;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 171;
       }
      } else {
       $$2234253237$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $610 = ($$2247$ph$i|0)==((-1)|0);
      if ($610) {
       $$2234253237$i = 0;
       break;
      } else {
       $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
       label = 180;
       break L244;
      }
     }
     $601 = HEAP32[(340188)>>2]|0;
     $602 = (($540) - ($$2253$ph$i))|0;
     $603 = (($602) + ($601))|0;
     $604 = (0 - ($601))|0;
     $605 = $603 & $604;
     $606 = ($605>>>0)<(2147483647);
     if (!($606)) {
      $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
     $607 = (_sbrk(($605|0))|0);
     $608 = ($607|0)==((-1)|0);
     if ($608) {
      (_sbrk(($597|0))|0);
      $$2234253237$i = 0;
      break;
     } else {
      $609 = (($605) + ($$2253$ph$i))|0;
      $$723948$i = $609;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
    }
   } while(0);
   $611 = HEAP32[(340152)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(340152)>>2] = $612;
   $$4236$i = $$2234253237$i;
   label = 178;
  } else {
   $$4236$i = 0;
   label = 178;
  }
 } while(0);
 if ((label|0) == 178) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   $619 = $615;
   $620 = $614;
   $621 = (($619) - ($620))|0;
   $622 = (($$0197) + 40)|0;
   $623 = ($621>>>0)>($622>>>0);
   $$$4236$i = $623 ? $621 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $624 = ($614|0)==((-1)|0);
   $not$$i216 = $623 ^ 1;
   $625 = $624 | $not$$i216;
   $or$cond50$i = $625 | $or$cond11$not$i;
   if (!($or$cond50$i)) {
    $$723948$i = $$$4236$i;$$749$i = $614;
    label = 180;
   }
  }
 }
 if ((label|0) == 180) {
  $626 = HEAP32[(340140)>>2]|0;
  $627 = (($626) + ($$723948$i))|0;
  HEAP32[(340140)>>2] = $627;
  $628 = HEAP32[(340144)>>2]|0;
  $629 = ($627>>>0)>($628>>>0);
  if ($629) {
   HEAP32[(340144)>>2] = $627;
  }
  $630 = HEAP32[(339732)>>2]|0;
  $631 = ($630|0)==(0|0);
  do {
   if ($631) {
    $632 = HEAP32[(339724)>>2]|0;
    $633 = ($632|0)==(0|0);
    $634 = ($$749$i>>>0)<($632>>>0);
    $or$cond12$i = $633 | $634;
    if ($or$cond12$i) {
     HEAP32[(339724)>>2] = $$749$i;
    }
    HEAP32[(340156)>>2] = $$749$i;
    HEAP32[(340160)>>2] = $$723948$i;
    HEAP32[(340168)>>2] = 0;
    $635 = HEAP32[85045]|0;
    HEAP32[(339744)>>2] = $635;
    HEAP32[(339740)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $636 = $$01$i$i << 1;
     $637 = (339748 + ($636<<2)|0);
     $638 = ((($637)) + 12|0);
     HEAP32[$638>>2] = $637;
     $639 = ((($637)) + 8|0);
     HEAP32[$639>>2] = $637;
     $640 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($640|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $640;
     }
    }
    $641 = (($$723948$i) + -40)|0;
    $642 = ((($$749$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$749$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(339732)>>2] = $649;
    HEAP32[(339720)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($649) + ($650)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(340196)>>2]|0;
    HEAP32[(339736)>>2] = $655;
   } else {
    $$024371$i = (340156);
    while(1) {
     $656 = HEAP32[$$024371$i>>2]|0;
     $657 = ((($$024371$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$749$i|0)==($659|0);
     if ($660) {
      label = 190;
      break;
     }
     $661 = ((($$024371$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024371$i = $662;
     }
    }
    if ((label|0) == 190) {
     $664 = ((($$024371$i)) + 12|0);
     $665 = HEAP32[$664>>2]|0;
     $666 = $665 & 8;
     $667 = ($666|0)==(0);
     if ($667) {
      $668 = ($630>>>0)>=($656>>>0);
      $669 = ($630>>>0)<($$749$i>>>0);
      $or$cond51$i = $669 & $668;
      if ($or$cond51$i) {
       $670 = (($658) + ($$723948$i))|0;
       HEAP32[$657>>2] = $670;
       $671 = HEAP32[(339720)>>2]|0;
       $672 = ((($630)) + 8|0);
       $673 = $672;
       $674 = $673 & 7;
       $675 = ($674|0)==(0);
       $676 = (0 - ($673))|0;
       $677 = $676 & 7;
       $678 = $675 ? 0 : $677;
       $679 = (($630) + ($678)|0);
       $680 = (($$723948$i) - ($678))|0;
       $681 = (($671) + ($680))|0;
       HEAP32[(339732)>>2] = $679;
       HEAP32[(339720)>>2] = $681;
       $682 = $681 | 1;
       $683 = ((($679)) + 4|0);
       HEAP32[$683>>2] = $682;
       $684 = (($679) + ($681)|0);
       $685 = ((($684)) + 4|0);
       HEAP32[$685>>2] = 40;
       $686 = HEAP32[(340196)>>2]|0;
       HEAP32[(339736)>>2] = $686;
       break;
      }
     }
    }
    $687 = HEAP32[(339724)>>2]|0;
    $688 = ($$749$i>>>0)<($687>>>0);
    if ($688) {
     HEAP32[(339724)>>2] = $$749$i;
     $752 = $$749$i;
    } else {
     $752 = $687;
    }
    $689 = (($$749$i) + ($$723948$i)|0);
    $$124470$i = (340156);
    while(1) {
     $690 = HEAP32[$$124470$i>>2]|0;
     $691 = ($690|0)==($689|0);
     if ($691) {
      label = 198;
      break;
     }
     $692 = ((($$124470$i)) + 8|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = ($693|0)==(0|0);
     if ($694) {
      break;
     } else {
      $$124470$i = $693;
     }
    }
    if ((label|0) == 198) {
     $695 = ((($$124470$i)) + 12|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = $696 & 8;
     $698 = ($697|0)==(0);
     if ($698) {
      HEAP32[$$124470$i>>2] = $$749$i;
      $699 = ((($$124470$i)) + 4|0);
      $700 = HEAP32[$699>>2]|0;
      $701 = (($700) + ($$723948$i))|0;
      HEAP32[$699>>2] = $701;
      $702 = ((($$749$i)) + 8|0);
      $703 = $702;
      $704 = $703 & 7;
      $705 = ($704|0)==(0);
      $706 = (0 - ($703))|0;
      $707 = $706 & 7;
      $708 = $705 ? 0 : $707;
      $709 = (($$749$i) + ($708)|0);
      $710 = ((($689)) + 8|0);
      $711 = $710;
      $712 = $711 & 7;
      $713 = ($712|0)==(0);
      $714 = (0 - ($711))|0;
      $715 = $714 & 7;
      $716 = $713 ? 0 : $715;
      $717 = (($689) + ($716)|0);
      $718 = $717;
      $719 = $709;
      $720 = (($718) - ($719))|0;
      $721 = (($709) + ($$0197)|0);
      $722 = (($720) - ($$0197))|0;
      $723 = $$0197 | 3;
      $724 = ((($709)) + 4|0);
      HEAP32[$724>>2] = $723;
      $725 = ($717|0)==($630|0);
      do {
       if ($725) {
        $726 = HEAP32[(339720)>>2]|0;
        $727 = (($726) + ($722))|0;
        HEAP32[(339720)>>2] = $727;
        HEAP32[(339732)>>2] = $721;
        $728 = $727 | 1;
        $729 = ((($721)) + 4|0);
        HEAP32[$729>>2] = $728;
       } else {
        $730 = HEAP32[(339728)>>2]|0;
        $731 = ($717|0)==($730|0);
        if ($731) {
         $732 = HEAP32[(339716)>>2]|0;
         $733 = (($732) + ($722))|0;
         HEAP32[(339716)>>2] = $733;
         HEAP32[(339728)>>2] = $721;
         $734 = $733 | 1;
         $735 = ((($721)) + 4|0);
         HEAP32[$735>>2] = $734;
         $736 = (($721) + ($733)|0);
         HEAP32[$736>>2] = $733;
         break;
        }
        $737 = ((($717)) + 4|0);
        $738 = HEAP32[$737>>2]|0;
        $739 = $738 & 3;
        $740 = ($739|0)==(1);
        if ($740) {
         $741 = $738 & -8;
         $742 = $738 >>> 3;
         $743 = ($738>>>0)<(256);
         L314: do {
          if ($743) {
           $744 = ((($717)) + 8|0);
           $745 = HEAP32[$744>>2]|0;
           $746 = ((($717)) + 12|0);
           $747 = HEAP32[$746>>2]|0;
           $748 = $742 << 1;
           $749 = (339748 + ($748<<2)|0);
           $750 = ($745|0)==($749|0);
           do {
            if (!($750)) {
             $751 = ($745>>>0)<($752>>>0);
             if ($751) {
              _abort();
              // unreachable;
             }
             $753 = ((($745)) + 12|0);
             $754 = HEAP32[$753>>2]|0;
             $755 = ($754|0)==($717|0);
             if ($755) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $756 = ($747|0)==($745|0);
           if ($756) {
            $757 = 1 << $742;
            $758 = $757 ^ -1;
            $759 = HEAP32[84927]|0;
            $760 = $759 & $758;
            HEAP32[84927] = $760;
            break;
           }
           $761 = ($747|0)==($749|0);
           do {
            if ($761) {
             $$pre10$i$i = ((($747)) + 8|0);
             $$pre$phi11$i$iZ2D = $$pre10$i$i;
            } else {
             $762 = ($747>>>0)<($752>>>0);
             if ($762) {
              _abort();
              // unreachable;
             }
             $763 = ((($747)) + 8|0);
             $764 = HEAP32[$763>>2]|0;
             $765 = ($764|0)==($717|0);
             if ($765) {
              $$pre$phi11$i$iZ2D = $763;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $766 = ((($745)) + 12|0);
           HEAP32[$766>>2] = $747;
           HEAP32[$$pre$phi11$i$iZ2D>>2] = $745;
          } else {
           $767 = ((($717)) + 24|0);
           $768 = HEAP32[$767>>2]|0;
           $769 = ((($717)) + 12|0);
           $770 = HEAP32[$769>>2]|0;
           $771 = ($770|0)==($717|0);
           do {
            if ($771) {
             $781 = ((($717)) + 16|0);
             $782 = ((($781)) + 4|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==(0|0);
             if ($784) {
              $785 = HEAP32[$781>>2]|0;
              $786 = ($785|0)==(0|0);
              if ($786) {
               $$3$i$i = 0;
               break;
              } else {
               $$1291$i$i = $785;$$1293$i$i = $781;
              }
             } else {
              $$1291$i$i = $783;$$1293$i$i = $782;
             }
             while(1) {
              $787 = ((($$1291$i$i)) + 20|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if (!($789)) {
               $$1291$i$i = $788;$$1293$i$i = $787;
               continue;
              }
              $790 = ((($$1291$i$i)) + 16|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if ($792) {
               break;
              } else {
               $$1291$i$i = $791;$$1293$i$i = $790;
              }
             }
             $793 = ($$1293$i$i>>>0)<($752>>>0);
             if ($793) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1293$i$i>>2] = 0;
              $$3$i$i = $$1291$i$i;
              break;
             }
            } else {
             $772 = ((($717)) + 8|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773>>>0)<($752>>>0);
             if ($774) {
              _abort();
              // unreachable;
             }
             $775 = ((($773)) + 12|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($717|0);
             if (!($777)) {
              _abort();
              // unreachable;
             }
             $778 = ((($770)) + 8|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($717|0);
             if ($780) {
              HEAP32[$775>>2] = $770;
              HEAP32[$778>>2] = $773;
              $$3$i$i = $770;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $794 = ($768|0)==(0|0);
           if ($794) {
            break;
           }
           $795 = ((($717)) + 28|0);
           $796 = HEAP32[$795>>2]|0;
           $797 = (340012 + ($796<<2)|0);
           $798 = HEAP32[$797>>2]|0;
           $799 = ($717|0)==($798|0);
           do {
            if ($799) {
             HEAP32[$797>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $800 = 1 << $796;
             $801 = $800 ^ -1;
             $802 = HEAP32[(339712)>>2]|0;
             $803 = $802 & $801;
             HEAP32[(339712)>>2] = $803;
             break L314;
            } else {
             $804 = HEAP32[(339724)>>2]|0;
             $805 = ($768>>>0)<($804>>>0);
             if ($805) {
              _abort();
              // unreachable;
             } else {
              $806 = ((($768)) + 16|0);
              $807 = HEAP32[$806>>2]|0;
              $not$$i17$i = ($807|0)!=($717|0);
              $$sink1$i$i = $not$$i17$i&1;
              $808 = (((($768)) + 16|0) + ($$sink1$i$i<<2)|0);
              HEAP32[$808>>2] = $$3$i$i;
              $809 = ($$3$i$i|0)==(0|0);
              if ($809) {
               break L314;
              } else {
               break;
              }
             }
            }
           } while(0);
           $810 = HEAP32[(339724)>>2]|0;
           $811 = ($$3$i$i>>>0)<($810>>>0);
           if ($811) {
            _abort();
            // unreachable;
           }
           $812 = ((($$3$i$i)) + 24|0);
           HEAP32[$812>>2] = $768;
           $813 = ((($717)) + 16|0);
           $814 = HEAP32[$813>>2]|0;
           $815 = ($814|0)==(0|0);
           do {
            if (!($815)) {
             $816 = ($814>>>0)<($810>>>0);
             if ($816) {
              _abort();
              // unreachable;
             } else {
              $817 = ((($$3$i$i)) + 16|0);
              HEAP32[$817>>2] = $814;
              $818 = ((($814)) + 24|0);
              HEAP32[$818>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $819 = ((($813)) + 4|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           if ($821) {
            break;
           }
           $822 = HEAP32[(339724)>>2]|0;
           $823 = ($820>>>0)<($822>>>0);
           if ($823) {
            _abort();
            // unreachable;
           } else {
            $824 = ((($$3$i$i)) + 20|0);
            HEAP32[$824>>2] = $820;
            $825 = ((($820)) + 24|0);
            HEAP32[$825>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $826 = (($717) + ($741)|0);
         $827 = (($741) + ($722))|0;
         $$0$i18$i = $826;$$0287$i$i = $827;
        } else {
         $$0$i18$i = $717;$$0287$i$i = $722;
        }
        $828 = ((($$0$i18$i)) + 4|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = $829 & -2;
        HEAP32[$828>>2] = $830;
        $831 = $$0287$i$i | 1;
        $832 = ((($721)) + 4|0);
        HEAP32[$832>>2] = $831;
        $833 = (($721) + ($$0287$i$i)|0);
        HEAP32[$833>>2] = $$0287$i$i;
        $834 = $$0287$i$i >>> 3;
        $835 = ($$0287$i$i>>>0)<(256);
        if ($835) {
         $836 = $834 << 1;
         $837 = (339748 + ($836<<2)|0);
         $838 = HEAP32[84927]|0;
         $839 = 1 << $834;
         $840 = $838 & $839;
         $841 = ($840|0)==(0);
         do {
          if ($841) {
           $842 = $838 | $839;
           HEAP32[84927] = $842;
           $$pre$i19$i = ((($837)) + 8|0);
           $$0295$i$i = $837;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $843 = ((($837)) + 8|0);
           $844 = HEAP32[$843>>2]|0;
           $845 = HEAP32[(339724)>>2]|0;
           $846 = ($844>>>0)<($845>>>0);
           if (!($846)) {
            $$0295$i$i = $844;$$pre$phi$i20$iZ2D = $843;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $721;
         $847 = ((($$0295$i$i)) + 12|0);
         HEAP32[$847>>2] = $721;
         $848 = ((($721)) + 8|0);
         HEAP32[$848>>2] = $$0295$i$i;
         $849 = ((($721)) + 12|0);
         HEAP32[$849>>2] = $837;
         break;
        }
        $850 = $$0287$i$i >>> 8;
        $851 = ($850|0)==(0);
        do {
         if ($851) {
          $$0296$i$i = 0;
         } else {
          $852 = ($$0287$i$i>>>0)>(16777215);
          if ($852) {
           $$0296$i$i = 31;
           break;
          }
          $853 = (($850) + 1048320)|0;
          $854 = $853 >>> 16;
          $855 = $854 & 8;
          $856 = $850 << $855;
          $857 = (($856) + 520192)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 4;
          $860 = $859 | $855;
          $861 = $856 << $859;
          $862 = (($861) + 245760)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 2;
          $865 = $860 | $864;
          $866 = (14 - ($865))|0;
          $867 = $861 << $864;
          $868 = $867 >>> 15;
          $869 = (($866) + ($868))|0;
          $870 = $869 << 1;
          $871 = (($869) + 7)|0;
          $872 = $$0287$i$i >>> $871;
          $873 = $872 & 1;
          $874 = $873 | $870;
          $$0296$i$i = $874;
         }
        } while(0);
        $875 = (340012 + ($$0296$i$i<<2)|0);
        $876 = ((($721)) + 28|0);
        HEAP32[$876>>2] = $$0296$i$i;
        $877 = ((($721)) + 16|0);
        $878 = ((($877)) + 4|0);
        HEAP32[$878>>2] = 0;
        HEAP32[$877>>2] = 0;
        $879 = HEAP32[(339712)>>2]|0;
        $880 = 1 << $$0296$i$i;
        $881 = $879 & $880;
        $882 = ($881|0)==(0);
        if ($882) {
         $883 = $879 | $880;
         HEAP32[(339712)>>2] = $883;
         HEAP32[$875>>2] = $721;
         $884 = ((($721)) + 24|0);
         HEAP32[$884>>2] = $875;
         $885 = ((($721)) + 12|0);
         HEAP32[$885>>2] = $721;
         $886 = ((($721)) + 8|0);
         HEAP32[$886>>2] = $721;
         break;
        }
        $887 = HEAP32[$875>>2]|0;
        $888 = ($$0296$i$i|0)==(31);
        $889 = $$0296$i$i >>> 1;
        $890 = (25 - ($889))|0;
        $891 = $888 ? 0 : $890;
        $892 = $$0287$i$i << $891;
        $$0288$i$i = $892;$$0289$i$i = $887;
        while(1) {
         $893 = ((($$0289$i$i)) + 4|0);
         $894 = HEAP32[$893>>2]|0;
         $895 = $894 & -8;
         $896 = ($895|0)==($$0287$i$i|0);
         if ($896) {
          label = 265;
          break;
         }
         $897 = $$0288$i$i >>> 31;
         $898 = (((($$0289$i$i)) + 16|0) + ($897<<2)|0);
         $899 = $$0288$i$i << 1;
         $900 = HEAP32[$898>>2]|0;
         $901 = ($900|0)==(0|0);
         if ($901) {
          label = 262;
          break;
         } else {
          $$0288$i$i = $899;$$0289$i$i = $900;
         }
        }
        if ((label|0) == 262) {
         $902 = HEAP32[(339724)>>2]|0;
         $903 = ($898>>>0)<($902>>>0);
         if ($903) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$898>>2] = $721;
          $904 = ((($721)) + 24|0);
          HEAP32[$904>>2] = $$0289$i$i;
          $905 = ((($721)) + 12|0);
          HEAP32[$905>>2] = $721;
          $906 = ((($721)) + 8|0);
          HEAP32[$906>>2] = $721;
          break;
         }
        }
        else if ((label|0) == 265) {
         $907 = ((($$0289$i$i)) + 8|0);
         $908 = HEAP32[$907>>2]|0;
         $909 = HEAP32[(339724)>>2]|0;
         $910 = ($908>>>0)>=($909>>>0);
         $not$7$i$i = ($$0289$i$i>>>0)>=($909>>>0);
         $911 = $910 & $not$7$i$i;
         if ($911) {
          $912 = ((($908)) + 12|0);
          HEAP32[$912>>2] = $721;
          HEAP32[$907>>2] = $721;
          $913 = ((($721)) + 8|0);
          HEAP32[$913>>2] = $908;
          $914 = ((($721)) + 12|0);
          HEAP32[$914>>2] = $$0289$i$i;
          $915 = ((($721)) + 24|0);
          HEAP32[$915>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1047 = ((($709)) + 8|0);
      $$0 = $1047;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (340156);
    while(1) {
     $916 = HEAP32[$$0$i$i$i>>2]|0;
     $917 = ($916>>>0)>($630>>>0);
     if (!($917)) {
      $918 = ((($$0$i$i$i)) + 4|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = (($916) + ($919)|0);
      $921 = ($920>>>0)>($630>>>0);
      if ($921) {
       break;
      }
     }
     $922 = ((($$0$i$i$i)) + 8|0);
     $923 = HEAP32[$922>>2]|0;
     $$0$i$i$i = $923;
    }
    $924 = ((($920)) + -47|0);
    $925 = ((($924)) + 8|0);
    $926 = $925;
    $927 = $926 & 7;
    $928 = ($927|0)==(0);
    $929 = (0 - ($926))|0;
    $930 = $929 & 7;
    $931 = $928 ? 0 : $930;
    $932 = (($924) + ($931)|0);
    $933 = ((($630)) + 16|0);
    $934 = ($932>>>0)<($933>>>0);
    $935 = $934 ? $630 : $932;
    $936 = ((($935)) + 8|0);
    $937 = ((($935)) + 24|0);
    $938 = (($$723948$i) + -40)|0;
    $939 = ((($$749$i)) + 8|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    $943 = (0 - ($940))|0;
    $944 = $943 & 7;
    $945 = $942 ? 0 : $944;
    $946 = (($$749$i) + ($945)|0);
    $947 = (($938) - ($945))|0;
    HEAP32[(339732)>>2] = $946;
    HEAP32[(339720)>>2] = $947;
    $948 = $947 | 1;
    $949 = ((($946)) + 4|0);
    HEAP32[$949>>2] = $948;
    $950 = (($946) + ($947)|0);
    $951 = ((($950)) + 4|0);
    HEAP32[$951>>2] = 40;
    $952 = HEAP32[(340196)>>2]|0;
    HEAP32[(339736)>>2] = $952;
    $953 = ((($935)) + 4|0);
    HEAP32[$953>>2] = 27;
    ;HEAP32[$936>>2]=HEAP32[(340156)>>2]|0;HEAP32[$936+4>>2]=HEAP32[(340156)+4>>2]|0;HEAP32[$936+8>>2]=HEAP32[(340156)+8>>2]|0;HEAP32[$936+12>>2]=HEAP32[(340156)+12>>2]|0;
    HEAP32[(340156)>>2] = $$749$i;
    HEAP32[(340160)>>2] = $$723948$i;
    HEAP32[(340168)>>2] = 0;
    HEAP32[(340164)>>2] = $936;
    $955 = $937;
    while(1) {
     $954 = ((($955)) + 4|0);
     HEAP32[$954>>2] = 7;
     $956 = ((($955)) + 8|0);
     $957 = ($956>>>0)<($920>>>0);
     if ($957) {
      $955 = $954;
     } else {
      break;
     }
    }
    $958 = ($935|0)==($630|0);
    if (!($958)) {
     $959 = $935;
     $960 = $630;
     $961 = (($959) - ($960))|0;
     $962 = HEAP32[$953>>2]|0;
     $963 = $962 & -2;
     HEAP32[$953>>2] = $963;
     $964 = $961 | 1;
     $965 = ((($630)) + 4|0);
     HEAP32[$965>>2] = $964;
     HEAP32[$935>>2] = $961;
     $966 = $961 >>> 3;
     $967 = ($961>>>0)<(256);
     if ($967) {
      $968 = $966 << 1;
      $969 = (339748 + ($968<<2)|0);
      $970 = HEAP32[84927]|0;
      $971 = 1 << $966;
      $972 = $970 & $971;
      $973 = ($972|0)==(0);
      if ($973) {
       $974 = $970 | $971;
       HEAP32[84927] = $974;
       $$pre$i$i = ((($969)) + 8|0);
       $$0211$i$i = $969;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $975 = ((($969)) + 8|0);
       $976 = HEAP32[$975>>2]|0;
       $977 = HEAP32[(339724)>>2]|0;
       $978 = ($976>>>0)<($977>>>0);
       if ($978) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $976;$$pre$phi$i$iZ2D = $975;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $630;
      $979 = ((($$0211$i$i)) + 12|0);
      HEAP32[$979>>2] = $630;
      $980 = ((($630)) + 8|0);
      HEAP32[$980>>2] = $$0211$i$i;
      $981 = ((($630)) + 12|0);
      HEAP32[$981>>2] = $969;
      break;
     }
     $982 = $961 >>> 8;
     $983 = ($982|0)==(0);
     if ($983) {
      $$0212$i$i = 0;
     } else {
      $984 = ($961>>>0)>(16777215);
      if ($984) {
       $$0212$i$i = 31;
      } else {
       $985 = (($982) + 1048320)|0;
       $986 = $985 >>> 16;
       $987 = $986 & 8;
       $988 = $982 << $987;
       $989 = (($988) + 520192)|0;
       $990 = $989 >>> 16;
       $991 = $990 & 4;
       $992 = $991 | $987;
       $993 = $988 << $991;
       $994 = (($993) + 245760)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 2;
       $997 = $992 | $996;
       $998 = (14 - ($997))|0;
       $999 = $993 << $996;
       $1000 = $999 >>> 15;
       $1001 = (($998) + ($1000))|0;
       $1002 = $1001 << 1;
       $1003 = (($1001) + 7)|0;
       $1004 = $961 >>> $1003;
       $1005 = $1004 & 1;
       $1006 = $1005 | $1002;
       $$0212$i$i = $1006;
      }
     }
     $1007 = (340012 + ($$0212$i$i<<2)|0);
     $1008 = ((($630)) + 28|0);
     HEAP32[$1008>>2] = $$0212$i$i;
     $1009 = ((($630)) + 20|0);
     HEAP32[$1009>>2] = 0;
     HEAP32[$933>>2] = 0;
     $1010 = HEAP32[(339712)>>2]|0;
     $1011 = 1 << $$0212$i$i;
     $1012 = $1010 & $1011;
     $1013 = ($1012|0)==(0);
     if ($1013) {
      $1014 = $1010 | $1011;
      HEAP32[(339712)>>2] = $1014;
      HEAP32[$1007>>2] = $630;
      $1015 = ((($630)) + 24|0);
      HEAP32[$1015>>2] = $1007;
      $1016 = ((($630)) + 12|0);
      HEAP32[$1016>>2] = $630;
      $1017 = ((($630)) + 8|0);
      HEAP32[$1017>>2] = $630;
      break;
     }
     $1018 = HEAP32[$1007>>2]|0;
     $1019 = ($$0212$i$i|0)==(31);
     $1020 = $$0212$i$i >>> 1;
     $1021 = (25 - ($1020))|0;
     $1022 = $1019 ? 0 : $1021;
     $1023 = $961 << $1022;
     $$0206$i$i = $1023;$$0207$i$i = $1018;
     while(1) {
      $1024 = ((($$0207$i$i)) + 4|0);
      $1025 = HEAP32[$1024>>2]|0;
      $1026 = $1025 & -8;
      $1027 = ($1026|0)==($961|0);
      if ($1027) {
       label = 292;
       break;
      }
      $1028 = $$0206$i$i >>> 31;
      $1029 = (((($$0207$i$i)) + 16|0) + ($1028<<2)|0);
      $1030 = $$0206$i$i << 1;
      $1031 = HEAP32[$1029>>2]|0;
      $1032 = ($1031|0)==(0|0);
      if ($1032) {
       label = 289;
       break;
      } else {
       $$0206$i$i = $1030;$$0207$i$i = $1031;
      }
     }
     if ((label|0) == 289) {
      $1033 = HEAP32[(339724)>>2]|0;
      $1034 = ($1029>>>0)<($1033>>>0);
      if ($1034) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1029>>2] = $630;
       $1035 = ((($630)) + 24|0);
       HEAP32[$1035>>2] = $$0207$i$i;
       $1036 = ((($630)) + 12|0);
       HEAP32[$1036>>2] = $630;
       $1037 = ((($630)) + 8|0);
       HEAP32[$1037>>2] = $630;
       break;
      }
     }
     else if ((label|0) == 292) {
      $1038 = ((($$0207$i$i)) + 8|0);
      $1039 = HEAP32[$1038>>2]|0;
      $1040 = HEAP32[(339724)>>2]|0;
      $1041 = ($1039>>>0)>=($1040>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1040>>>0);
      $1042 = $1041 & $not$$i$i;
      if ($1042) {
       $1043 = ((($1039)) + 12|0);
       HEAP32[$1043>>2] = $630;
       HEAP32[$1038>>2] = $630;
       $1044 = ((($630)) + 8|0);
       HEAP32[$1044>>2] = $1039;
       $1045 = ((($630)) + 12|0);
       HEAP32[$1045>>2] = $$0207$i$i;
       $1046 = ((($630)) + 24|0);
       HEAP32[$1046>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1048 = HEAP32[(339720)>>2]|0;
  $1049 = ($1048>>>0)>($$0197>>>0);
  if ($1049) {
   $1050 = (($1048) - ($$0197))|0;
   HEAP32[(339720)>>2] = $1050;
   $1051 = HEAP32[(339732)>>2]|0;
   $1052 = (($1051) + ($$0197)|0);
   HEAP32[(339732)>>2] = $1052;
   $1053 = $1050 | 1;
   $1054 = ((($1052)) + 4|0);
   HEAP32[$1054>>2] = $1053;
   $1055 = $$0197 | 3;
   $1056 = ((($1051)) + 4|0);
   HEAP32[$1056>>2] = $1055;
   $1057 = ((($1051)) + 8|0);
   $$0 = $1057;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1058 = (___errno_location()|0);
 HEAP32[$1058>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $$pre442 = 0;
 var $$pre444 = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond421 = 0, $cond422 = 0, $not$ = 0, $not$405 = 0, $not$437 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(339724)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(339728)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $104 = ((($10)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $108 = (($16) + ($17)|0);
    $109 = ((($16)) + 4|0);
    $110 = $17 | 1;
    $111 = $105 & -2;
    HEAP32[(339716)>>2] = $17;
    HEAP32[$104>>2] = $111;
    HEAP32[$109>>2] = $110;
    HEAP32[$108>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (339748 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[84927]|0;
     $38 = $37 & $36;
     HEAP32[84927] = $38;
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre444 = ((($26)) + 8|0);
     $$pre$phi445Z2D = $$pre444;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi445Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi445Z2D>>2] = $24;
    $$1 = $16;$$1382 = $17;$113 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1387 = $63;$$1390 = $59;
      }
     } else {
      $$1387 = $61;$$1390 = $60;
     }
     while(1) {
      $65 = ((($$1387)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1387 = $66;$$1390 = $65;
       continue;
      }
      $68 = ((($$1387)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1387 = $69;$$1390 = $68;
      }
     }
     $71 = ($$1390>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1390>>2] = 0;
      $$3 = $$1387;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1382 = $17;$113 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (340012 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond421 = ($$3|0)==(0|0);
      if ($cond421) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(339712)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(339712)>>2] = $81;
       $$1 = $16;$$1382 = $17;$113 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(339724)>>2]|0;
      $83 = ($46>>>0)<($82>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $not$405 = ($85|0)!=($16|0);
       $$sink3 = $not$405&1;
       $86 = (((($46)) + 16|0) + ($$sink3<<2)|0);
       HEAP32[$86>>2] = $$3;
       $87 = ($$3|0)==(0|0);
       if ($87) {
        $$1 = $16;$$1382 = $17;$113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $88 = HEAP32[(339724)>>2]|0;
    $89 = ($$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($$3)) + 24|0);
    HEAP32[$90>>2] = $46;
    $91 = ((($16)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $$1 = $16;$$1382 = $17;$113 = $16;
    } else {
     $100 = HEAP32[(339724)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $$3;
      $$1 = $16;$$1382 = $17;$113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1382 = $9;$113 = $2;
  }
 } while(0);
 $112 = ($113>>>0)<($10>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(339732)>>2]|0;
  $121 = ($10|0)==($120|0);
  $122 = HEAP32[(339728)>>2]|0;
  if ($121) {
   $123 = HEAP32[(339720)>>2]|0;
   $124 = (($123) + ($$1382))|0;
   HEAP32[(339720)>>2] = $124;
   HEAP32[(339732)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = ($$1|0)==($122|0);
   if (!($127)) {
    return;
   }
   HEAP32[(339728)>>2] = 0;
   HEAP32[(339716)>>2] = 0;
   return;
  }
  $128 = ($10|0)==($122|0);
  if ($128) {
   $129 = HEAP32[(339716)>>2]|0;
   $130 = (($129) + ($$1382))|0;
   HEAP32[(339716)>>2] = $130;
   HEAP32[(339728)>>2] = $113;
   $131 = $130 | 1;
   $132 = ((($$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($113) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $115 & -8;
  $135 = (($134) + ($$1382))|0;
  $136 = $115 >>> 3;
  $137 = ($115>>>0)<(256);
  L108: do {
   if ($137) {
    $138 = ((($10)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($10)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (339748 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(339724)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($10|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[84927]|0;
     $154 = $153 & $152;
     HEAP32[84927] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre442 = ((($141)) + 8|0);
     $$pre$phi443Z2D = $$pre442;
    } else {
     $156 = HEAP32[(339724)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($10|0);
     if ($160) {
      $$pre$phi443Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi443Z2D>>2] = $139;
   } else {
    $162 = ((($10)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($10)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($10|0);
    do {
     if ($166) {
      $177 = ((($10)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $$3400 = 0;
        break;
       } else {
        $$1398 = $181;$$1402 = $177;
       }
      } else {
       $$1398 = $179;$$1402 = $178;
      }
      while(1) {
       $183 = ((($$1398)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $$1398 = $184;$$1402 = $183;
        continue;
       }
       $186 = ((($$1398)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $$1398 = $187;$$1402 = $186;
       }
      }
      $189 = HEAP32[(339724)>>2]|0;
      $190 = ($$1402>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1402>>2] = 0;
       $$3400 = $$1398;
       break;
      }
     } else {
      $167 = ((($10)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(339724)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($10|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($10|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $$3400 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($10)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (340012 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($10|0)==($195|0);
     do {
      if ($196) {
       HEAP32[$194>>2] = $$3400;
       $cond422 = ($$3400|0)==(0|0);
       if ($cond422) {
        $197 = 1 << $193;
        $198 = $197 ^ -1;
        $199 = HEAP32[(339712)>>2]|0;
        $200 = $199 & $198;
        HEAP32[(339712)>>2] = $200;
        break L108;
       }
      } else {
       $201 = HEAP32[(339724)>>2]|0;
       $202 = ($163>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       } else {
        $203 = ((($163)) + 16|0);
        $204 = HEAP32[$203>>2]|0;
        $not$ = ($204|0)!=($10|0);
        $$sink5 = $not$&1;
        $205 = (((($163)) + 16|0) + ($$sink5<<2)|0);
        HEAP32[$205>>2] = $$3400;
        $206 = ($$3400|0)==(0|0);
        if ($206) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while(0);
     $207 = HEAP32[(339724)>>2]|0;
     $208 = ($$3400>>>0)<($207>>>0);
     if ($208) {
      _abort();
      // unreachable;
     }
     $209 = ((($$3400)) + 24|0);
     HEAP32[$209>>2] = $163;
     $210 = ((($10)) + 16|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)==(0|0);
     do {
      if (!($212)) {
       $213 = ($211>>>0)<($207>>>0);
       if ($213) {
        _abort();
        // unreachable;
       } else {
        $214 = ((($$3400)) + 16|0);
        HEAP32[$214>>2] = $211;
        $215 = ((($211)) + 24|0);
        HEAP32[$215>>2] = $$3400;
        break;
       }
      }
     } while(0);
     $216 = ((($210)) + 4|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)==(0|0);
     if (!($218)) {
      $219 = HEAP32[(339724)>>2]|0;
      $220 = ($217>>>0)<($219>>>0);
      if ($220) {
       _abort();
       // unreachable;
      } else {
       $221 = ((($$3400)) + 20|0);
       HEAP32[$221>>2] = $217;
       $222 = ((($217)) + 24|0);
       HEAP32[$222>>2] = $$3400;
       break;
      }
     }
    }
   }
  } while(0);
  $223 = $135 | 1;
  $224 = ((($$1)) + 4|0);
  HEAP32[$224>>2] = $223;
  $225 = (($113) + ($135)|0);
  HEAP32[$225>>2] = $135;
  $226 = HEAP32[(339728)>>2]|0;
  $227 = ($$1|0)==($226|0);
  if ($227) {
   HEAP32[(339716)>>2] = $135;
   return;
  } else {
   $$2 = $135;
  }
 } else {
  $228 = $115 & -2;
  HEAP32[$114>>2] = $228;
  $229 = $$1382 | 1;
  $230 = ((($$1)) + 4|0);
  HEAP32[$230>>2] = $229;
  $231 = (($113) + ($$1382)|0);
  HEAP32[$231>>2] = $$1382;
  $$2 = $$1382;
 }
 $232 = $$2 >>> 3;
 $233 = ($$2>>>0)<(256);
 if ($233) {
  $234 = $232 << 1;
  $235 = (339748 + ($234<<2)|0);
  $236 = HEAP32[84927]|0;
  $237 = 1 << $232;
  $238 = $236 & $237;
  $239 = ($238|0)==(0);
  if ($239) {
   $240 = $236 | $237;
   HEAP32[84927] = $240;
   $$pre = ((($235)) + 8|0);
   $$0403 = $235;$$pre$phiZ2D = $$pre;
  } else {
   $241 = ((($235)) + 8|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = HEAP32[(339724)>>2]|0;
   $244 = ($242>>>0)<($243>>>0);
   if ($244) {
    _abort();
    // unreachable;
   } else {
    $$0403 = $242;$$pre$phiZ2D = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $245 = ((($$0403)) + 12|0);
  HEAP32[$245>>2] = $$1;
  $246 = ((($$1)) + 8|0);
  HEAP32[$246>>2] = $$0403;
  $247 = ((($$1)) + 12|0);
  HEAP32[$247>>2] = $235;
  return;
 }
 $248 = $$2 >>> 8;
 $249 = ($248|0)==(0);
 if ($249) {
  $$0396 = 0;
 } else {
  $250 = ($$2>>>0)>(16777215);
  if ($250) {
   $$0396 = 31;
  } else {
   $251 = (($248) + 1048320)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 8;
   $254 = $248 << $253;
   $255 = (($254) + 520192)|0;
   $256 = $255 >>> 16;
   $257 = $256 & 4;
   $258 = $257 | $253;
   $259 = $254 << $257;
   $260 = (($259) + 245760)|0;
   $261 = $260 >>> 16;
   $262 = $261 & 2;
   $263 = $258 | $262;
   $264 = (14 - ($263))|0;
   $265 = $259 << $262;
   $266 = $265 >>> 15;
   $267 = (($264) + ($266))|0;
   $268 = $267 << 1;
   $269 = (($267) + 7)|0;
   $270 = $$2 >>> $269;
   $271 = $270 & 1;
   $272 = $271 | $268;
   $$0396 = $272;
  }
 }
 $273 = (340012 + ($$0396<<2)|0);
 $274 = ((($$1)) + 28|0);
 HEAP32[$274>>2] = $$0396;
 $275 = ((($$1)) + 16|0);
 $276 = ((($$1)) + 20|0);
 HEAP32[$276>>2] = 0;
 HEAP32[$275>>2] = 0;
 $277 = HEAP32[(339712)>>2]|0;
 $278 = 1 << $$0396;
 $279 = $277 & $278;
 $280 = ($279|0)==(0);
 do {
  if ($280) {
   $281 = $277 | $278;
   HEAP32[(339712)>>2] = $281;
   HEAP32[$273>>2] = $$1;
   $282 = ((($$1)) + 24|0);
   HEAP32[$282>>2] = $273;
   $283 = ((($$1)) + 12|0);
   HEAP32[$283>>2] = $$1;
   $284 = ((($$1)) + 8|0);
   HEAP32[$284>>2] = $$1;
  } else {
   $285 = HEAP32[$273>>2]|0;
   $286 = ($$0396|0)==(31);
   $287 = $$0396 >>> 1;
   $288 = (25 - ($287))|0;
   $289 = $286 ? 0 : $288;
   $290 = $$2 << $289;
   $$0383 = $290;$$0384 = $285;
   while(1) {
    $291 = ((($$0384)) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = $292 & -8;
    $294 = ($293|0)==($$2|0);
    if ($294) {
     label = 124;
     break;
    }
    $295 = $$0383 >>> 31;
    $296 = (((($$0384)) + 16|0) + ($295<<2)|0);
    $297 = $$0383 << 1;
    $298 = HEAP32[$296>>2]|0;
    $299 = ($298|0)==(0|0);
    if ($299) {
     label = 121;
     break;
    } else {
     $$0383 = $297;$$0384 = $298;
    }
   }
   if ((label|0) == 121) {
    $300 = HEAP32[(339724)>>2]|0;
    $301 = ($296>>>0)<($300>>>0);
    if ($301) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$296>>2] = $$1;
     $302 = ((($$1)) + 24|0);
     HEAP32[$302>>2] = $$0384;
     $303 = ((($$1)) + 12|0);
     HEAP32[$303>>2] = $$1;
     $304 = ((($$1)) + 8|0);
     HEAP32[$304>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 124) {
    $305 = ((($$0384)) + 8|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = HEAP32[(339724)>>2]|0;
    $308 = ($306>>>0)>=($307>>>0);
    $not$437 = ($$0384>>>0)>=($307>>>0);
    $309 = $308 & $not$437;
    if ($309) {
     $310 = ((($306)) + 12|0);
     HEAP32[$310>>2] = $$1;
     HEAP32[$305>>2] = $$1;
     $311 = ((($$1)) + 8|0);
     HEAP32[$311>>2] = $306;
     $312 = ((($$1)) + 12|0);
     HEAP32[$312>>2] = $$0384;
     $313 = ((($$1)) + 24|0);
     HEAP32[$313>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $314 = HEAP32[(339740)>>2]|0;
 $315 = (($314) + -1)|0;
 HEAP32[(339740)>>2] = $315;
 $316 = ($315|0)==(0);
 if ($316) {
  $$0212$in$i = (340164);
 } else {
  return;
 }
 while(1) {
  $$0212$i = HEAP32[$$0212$in$i>>2]|0;
  $317 = ($$0212$i|0)==(0|0);
  $318 = ((($$0212$i)) + 8|0);
  if ($317) {
   break;
  } else {
   $$0212$in$i = $318;
  }
 }
 HEAP32[(339740)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(339724)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(340188)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(339732)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(339720)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $41 = $39 | 1;
  $42 = ((($40)) + 4|0);
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2>>2] = $45;
  HEAP32[$42>>2] = $41;
  HEAP32[(339732)>>2] = $40;
  HEAP32[(339720)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(339728)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(339716)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  $53 = $3 & 1;
  if ($52) {
   $54 = (($0) + ($1)|0);
   $55 = (($54) + ($51)|0);
   $56 = $53 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($54)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$55>>2] = $51;
   $60 = ((($55)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $54;$storemerge1 = $51;
  } else {
   $63 = $53 | $49;
   $64 = $63 | 2;
   HEAP32[$2>>2] = $64;
   $65 = (($0) + ($49)|0);
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 | 1;
   HEAP32[$66>>2] = $68;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(339716)>>2] = $storemerge1;
  HEAP32[(339728)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $69 = $10 & 2;
 $70 = ($69|0)==(0);
 if (!($70)) {
  $$2 = 0;
  return ($$2|0);
 }
 $71 = $10 & -8;
 $72 = (($71) + ($4))|0;
 $73 = ($72>>>0)<($1>>>0);
 if ($73) {
  $$2 = 0;
  return ($$2|0);
 }
 $74 = (($72) - ($1))|0;
 $75 = $10 >>> 3;
 $76 = ($10>>>0)<(256);
 L49: do {
  if ($76) {
   $77 = ((($5)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($5)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $75 << 1;
   $82 = (339748 + ($81<<2)|0);
   $83 = ($78|0)==($82|0);
   if (!($83)) {
    $84 = ($78>>>0)<($6>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($78)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)==($5|0);
    if (!($87)) {
     _abort();
     // unreachable;
    }
   }
   $88 = ($80|0)==($78|0);
   if ($88) {
    $89 = 1 << $75;
    $90 = $89 ^ -1;
    $91 = HEAP32[84927]|0;
    $92 = $91 & $90;
    HEAP32[84927] = $92;
    break;
   }
   $93 = ($80|0)==($82|0);
   if ($93) {
    $$pre = ((($80)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $94 = ($80>>>0)<($6>>>0);
    if ($94) {
     _abort();
     // unreachable;
    }
    $95 = ((($80)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==($5|0);
    if ($97) {
     $$pre$phiZ2D = $95;
    } else {
     _abort();
     // unreachable;
    }
   }
   $98 = ((($78)) + 12|0);
   HEAP32[$98>>2] = $80;
   HEAP32[$$pre$phiZ2D>>2] = $78;
  } else {
   $99 = ((($5)) + 24|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($5)) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==($5|0);
   do {
    if ($103) {
     $113 = ((($5)) + 16|0);
     $114 = ((($113)) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)==(0|0);
     if ($116) {
      $117 = HEAP32[$113>>2]|0;
      $118 = ($117|0)==(0|0);
      if ($118) {
       $$3 = 0;
       break;
      } else {
       $$1272 = $117;$$1275 = $113;
      }
     } else {
      $$1272 = $115;$$1275 = $114;
     }
     while(1) {
      $119 = ((($$1272)) + 20|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = ($120|0)==(0|0);
      if (!($121)) {
       $$1272 = $120;$$1275 = $119;
       continue;
      }
      $122 = ((($$1272)) + 16|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ($123|0)==(0|0);
      if ($124) {
       break;
      } else {
       $$1272 = $123;$$1275 = $122;
      }
     }
     $125 = ($$1275>>>0)<($6>>>0);
     if ($125) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1275>>2] = 0;
      $$3 = $$1272;
      break;
     }
    } else {
     $104 = ((($5)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105>>>0)<($6>>>0);
     if ($106) {
      _abort();
      // unreachable;
     }
     $107 = ((($105)) + 12|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($108|0)==($5|0);
     if (!($109)) {
      _abort();
      // unreachable;
     }
     $110 = ((($102)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)==($5|0);
     if ($112) {
      HEAP32[$107>>2] = $102;
      HEAP32[$110>>2] = $105;
      $$3 = $102;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $126 = ($100|0)==(0|0);
   if (!($126)) {
    $127 = ((($5)) + 28|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (340012 + ($128<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($5|0)==($130|0);
    do {
     if ($131) {
      HEAP32[$129>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $132 = 1 << $128;
       $133 = $132 ^ -1;
       $134 = HEAP32[(339712)>>2]|0;
       $135 = $134 & $133;
       HEAP32[(339712)>>2] = $135;
       break L49;
      }
     } else {
      $136 = HEAP32[(339724)>>2]|0;
      $137 = ($100>>>0)<($136>>>0);
      if ($137) {
       _abort();
       // unreachable;
      } else {
       $138 = ((($100)) + 16|0);
       $139 = HEAP32[$138>>2]|0;
       $not$ = ($139|0)!=($5|0);
       $$sink1 = $not$&1;
       $140 = (((($100)) + 16|0) + ($$sink1<<2)|0);
       HEAP32[$140>>2] = $$3;
       $141 = ($$3|0)==(0|0);
       if ($141) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $142 = HEAP32[(339724)>>2]|0;
    $143 = ($$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($$3)) + 24|0);
    HEAP32[$144>>2] = $100;
    $145 = ((($5)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(339724)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($74>>>0)<(16);
 $159 = $3 & 1;
 if ($158) {
  $160 = $72 | $159;
  $161 = $160 | 2;
  HEAP32[$2>>2] = $161;
  $162 = (($0) + ($72)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $$2 = $0;
  return ($$2|0);
 } else {
  $166 = (($0) + ($1)|0);
  $167 = $159 | $1;
  $168 = $167 | 2;
  HEAP32[$2>>2] = $168;
  $169 = ((($166)) + 4|0);
  $170 = $74 | 3;
  HEAP32[$169>>2] = $170;
  $171 = (($166) + ($74)|0);
  $172 = ((($171)) + 4|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $173 | 1;
  HEAP32[$172>>2] = $174;
  _dispose_chunk($166,$74);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $$pre23 = 0, $$pre25 = 0, $$sink2 = 0;
 var $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond17 = 0, $not$ = 0, $not$1 = 0, $not$19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(339724)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(339728)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $100 = ((($2)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$1 = $11;$$1418 = $12;
     break;
    }
    $104 = (($11) + ($12)|0);
    $105 = ((($11)) + 4|0);
    $106 = $12 | 1;
    $107 = $101 & -2;
    HEAP32[(339716)>>2] = $12;
    HEAP32[$100>>2] = $107;
    HEAP32[$105>>2] = $106;
    HEAP32[$104>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (339748 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[84927]|0;
     $34 = $33 & $32;
     HEAP32[84927] = $34;
     $$1 = $11;$$1418 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre25 = ((($22)) + 8|0);
     $$pre$phi26Z2D = $$pre25;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi26Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi26Z2D>>2] = $20;
    $$1 = $11;$$1418 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1426 = $59;$$1429 = $55;
      }
     } else {
      $$1426 = $57;$$1429 = $56;
     }
     while(1) {
      $61 = ((($$1426)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1426 = $62;$$1429 = $61;
       continue;
      }
      $64 = ((($$1426)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1426 = $65;$$1429 = $64;
      }
     }
     $67 = ($$1429>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1429>>2] = 0;
      $$3 = $$1426;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1418 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (340012 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    do {
     if ($73) {
      HEAP32[$71>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[(339712)>>2]|0;
       $77 = $76 & $75;
       HEAP32[(339712)>>2] = $77;
       $$1 = $11;$$1418 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[(339724)>>2]|0;
      $79 = ($42>>>0)<($78>>>0);
      if ($79) {
       _abort();
       // unreachable;
      } else {
       $80 = ((($42)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $not$1 = ($81|0)!=($11|0);
       $$sink2 = $not$1&1;
       $82 = (((($42)) + 16|0) + ($$sink2<<2)|0);
       HEAP32[$82>>2] = $$3;
       $83 = ($$3|0)==(0|0);
       if ($83) {
        $$1 = $11;$$1418 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $84 = HEAP32[(339724)>>2]|0;
    $85 = ($$3>>>0)<($84>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($$3)) + 24|0);
    HEAP32[$86>>2] = $42;
    $87 = ((($11)) + 16|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(0|0);
    do {
     if (!($89)) {
      $90 = ($88>>>0)<($84>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = ((($$3)) + 16|0);
       HEAP32[$91>>2] = $88;
       $92 = ((($88)) + 24|0);
       HEAP32[$92>>2] = $$3;
       break;
      }
     }
    } while(0);
    $93 = ((($87)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$1 = $11;$$1418 = $12;
    } else {
     $96 = HEAP32[(339724)>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = ((($$3)) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = ((($94)) + 24|0);
      HEAP32[$99>>2] = $$3;
      $$1 = $11;$$1418 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1418 = $1;
  }
 } while(0);
 $108 = HEAP32[(339724)>>2]|0;
 $109 = ($2>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $110 = ((($2)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[(339732)>>2]|0;
  $115 = ($2|0)==($114|0);
  $116 = HEAP32[(339728)>>2]|0;
  if ($115) {
   $117 = HEAP32[(339720)>>2]|0;
   $118 = (($117) + ($$1418))|0;
   HEAP32[(339720)>>2] = $118;
   HEAP32[(339732)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = ($$1|0)==($116|0);
   if (!($121)) {
    return;
   }
   HEAP32[(339728)>>2] = 0;
   HEAP32[(339716)>>2] = 0;
   return;
  }
  $122 = ($2|0)==($116|0);
  if ($122) {
   $123 = HEAP32[(339716)>>2]|0;
   $124 = (($123) + ($$1418))|0;
   HEAP32[(339716)>>2] = $124;
   HEAP32[(339728)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $111 & -8;
  $129 = (($128) + ($$1418))|0;
  $130 = $111 >>> 3;
  $131 = ($111>>>0)<(256);
  L96: do {
   if ($131) {
    $132 = ((($2)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($2)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (339748 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($108>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[84927]|0;
     $147 = $146 & $145;
     HEAP32[84927] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre23 = ((($135)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $149 = ($135>>>0)<($108>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($2|0);
     if ($152) {
      $$pre$phi24Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi24Z2D>>2] = $133;
   } else {
    $154 = ((($2)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($2)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($2|0);
    do {
     if ($158) {
      $168 = ((($2)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $$3435 = 0;
        break;
       } else {
        $$1433 = $172;$$1437 = $168;
       }
      } else {
       $$1433 = $170;$$1437 = $169;
      }
      while(1) {
       $174 = ((($$1433)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $$1433 = $175;$$1437 = $174;
        continue;
       }
       $177 = ((($$1433)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        break;
       } else {
        $$1433 = $178;$$1437 = $177;
       }
      }
      $180 = ($$1437>>>0)<($108>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1437>>2] = 0;
       $$3435 = $$1433;
       break;
      }
     } else {
      $159 = ((($2)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($108>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($2|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($2|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $$3435 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($2)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (340012 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($2|0)==($185|0);
     do {
      if ($186) {
       HEAP32[$184>>2] = $$3435;
       $cond17 = ($$3435|0)==(0|0);
       if ($cond17) {
        $187 = 1 << $183;
        $188 = $187 ^ -1;
        $189 = HEAP32[(339712)>>2]|0;
        $190 = $189 & $188;
        HEAP32[(339712)>>2] = $190;
        break L96;
       }
      } else {
       $191 = HEAP32[(339724)>>2]|0;
       $192 = ($155>>>0)<($191>>>0);
       if ($192) {
        _abort();
        // unreachable;
       } else {
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $not$ = ($194|0)!=($2|0);
        $$sink4 = $not$&1;
        $195 = (((($155)) + 16|0) + ($$sink4<<2)|0);
        HEAP32[$195>>2] = $$3435;
        $196 = ($$3435|0)==(0|0);
        if ($196) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while(0);
     $197 = HEAP32[(339724)>>2]|0;
     $198 = ($$3435>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($$3435)) + 24|0);
     HEAP32[$199>>2] = $155;
     $200 = ((($2)) + 16|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($$3435)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $$3435;
        break;
       }
      }
     } while(0);
     $206 = ((($200)) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(339724)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($$3435)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $$3435;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $129 | 1;
  $214 = ((($$1)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$1) + ($129)|0);
  HEAP32[$215>>2] = $129;
  $216 = HEAP32[(339728)>>2]|0;
  $217 = ($$1|0)==($216|0);
  if ($217) {
   HEAP32[(339716)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $218 = $111 & -2;
  HEAP32[$110>>2] = $218;
  $219 = $$1418 | 1;
  $220 = ((($$1)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$1) + ($$1418)|0);
  HEAP32[$221>>2] = $$1418;
  $$2 = $$1418;
 }
 $222 = $$2 >>> 3;
 $223 = ($$2>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (339748 + ($224<<2)|0);
  $226 = HEAP32[84927]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[84927] = $230;
   $$pre = ((($225)) + 8|0);
   $$0438 = $225;$$pre$phiZ2D = $$pre;
  } else {
   $231 = ((($225)) + 8|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(339724)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$0438 = $232;$$pre$phiZ2D = $231;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $235 = ((($$0438)) + 12|0);
  HEAP32[$235>>2] = $$1;
  $236 = ((($$1)) + 8|0);
  HEAP32[$236>>2] = $$0438;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$2 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $$0431 = 0;
 } else {
  $240 = ($$2>>>0)>(16777215);
  if ($240) {
   $$0431 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$2 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $$0431 = $262;
  }
 }
 $263 = (340012 + ($$0431<<2)|0);
 $264 = ((($$1)) + 28|0);
 HEAP32[$264>>2] = $$0431;
 $265 = ((($$1)) + 16|0);
 $266 = ((($$1)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(339712)>>2]|0;
 $268 = 1 << $$0431;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(339712)>>2] = $271;
  HEAP32[$263>>2] = $$1;
  $272 = ((($$1)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$1)) + 12|0);
  HEAP32[$273>>2] = $$1;
  $274 = ((($$1)) + 8|0);
  HEAP32[$274>>2] = $$1;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($$0431|0)==(31);
 $277 = $$0431 >>> 1;
 $278 = (25 - ($277))|0;
 $279 = $276 ? 0 : $278;
 $280 = $$2 << $279;
 $$0419 = $280;$$0420 = $275;
 while(1) {
  $281 = ((($$0420)) + 4|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $282 & -8;
  $284 = ($283|0)==($$2|0);
  if ($284) {
   label = 121;
   break;
  }
  $285 = $$0419 >>> 31;
  $286 = (((($$0420)) + 16|0) + ($285<<2)|0);
  $287 = $$0419 << 1;
  $288 = HEAP32[$286>>2]|0;
  $289 = ($288|0)==(0|0);
  if ($289) {
   label = 118;
   break;
  } else {
   $$0419 = $287;$$0420 = $288;
  }
 }
 if ((label|0) == 118) {
  $290 = HEAP32[(339724)>>2]|0;
  $291 = ($286>>>0)<($290>>>0);
  if ($291) {
   _abort();
   // unreachable;
  }
  HEAP32[$286>>2] = $$1;
  $292 = ((($$1)) + 24|0);
  HEAP32[$292>>2] = $$0420;
  $293 = ((($$1)) + 12|0);
  HEAP32[$293>>2] = $$1;
  $294 = ((($$1)) + 8|0);
  HEAP32[$294>>2] = $$1;
  return;
 }
 else if ((label|0) == 121) {
  $295 = ((($$0420)) + 8|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = HEAP32[(339724)>>2]|0;
  $298 = ($296>>>0)>=($297>>>0);
  $not$19 = ($$0420>>>0)>=($297>>>0);
  $299 = $298 & $not$19;
  if (!($299)) {
   _abort();
   // unreachable;
  }
  $300 = ((($296)) + 12|0);
  HEAP32[$300>>2] = $$1;
  HEAP32[$295>>2] = $$1;
  $301 = ((($$1)) + 8|0);
  HEAP32[$301>>2] = $296;
  $302 = ((($$1)) + 12|0);
  HEAP32[$302>>2] = $$0420;
  $303 = ((($$1)) + 24|0);
  HEAP32[$303>>2] = 0;
  return;
 }
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (340204|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_738($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_108()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_108() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5436|0);
}
function _dummy_738($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = (($27) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($27)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$27>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 2;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strtox_768($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ((($0)) + 108|0);
 HEAP32[$10>>2] = $9;
 $11 = ($1|0)!=(0);
 $12 = ($9|0)>($1|0);
 $or$cond = $11 & $12;
 $13 = (($6) + ($1)|0);
 $$sink = $or$cond ? $13 : $4;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0;
 var $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond187 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((23342) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)!=(0|0);
      if ($54) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if (!($54)) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((23342) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62>>>0)<($$166>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154222 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154222*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$6>>2]|0;
        $76 = HEAP32[$7>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$6>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $$2161$be = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $$2161$be = $81;
        }
        $82 = (($$2161$be) + -48)|0;
        $83 = ($82>>>0)<(10);
        $84 = ($73>>>0)<(429496729);
        $85 = $83 & $84;
        if ($85) {
         $$0154222 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
      } else {
       $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
      }
      $86 = (($$2161$lcssa) + -48)|0;
      $87 = ($86>>>0)<(10);
      if ($87) {
       $$3162215 = $$2161$lcssa;$88 = $291;$89 = $292;$93 = $86;
       while(1) {
        $90 = (___muldi3(($88|0),($89|0),10,0)|0);
        $91 = tempRet0;
        $92 = ($93|0)<(0);
        $94 = $92 << 31 >> 31;
        $95 = $93 ^ -1;
        $96 = $94 ^ -1;
        $97 = ($91>>>0)>($96>>>0);
        $98 = ($90>>>0)>($95>>>0);
        $99 = ($91|0)==($96|0);
        $100 = $99 & $98;
        $101 = $97 | $100;
        if ($101) {
         $$1165167 = 10;$$8 = $$3162215;$293 = $88;$294 = $89;
         label = 72;
         break L43;
        }
        $102 = (_i64Add(($90|0),($91|0),($93|0),($94|0))|0);
        $103 = tempRet0;
        $104 = HEAP32[$6>>2]|0;
        $105 = HEAP32[$7>>2]|0;
        $106 = ($104>>>0)<($105>>>0);
        if ($106) {
         $107 = ((($104)) + 1|0);
         HEAP32[$6>>2] = $107;
         $108 = HEAP8[$104>>0]|0;
         $109 = $108&255;
         $$3162$be = $109;
        } else {
         $110 = (___shgetc($0)|0);
         $$3162$be = $110;
        }
        $111 = (($$3162$be) + -48)|0;
        $112 = ($111>>>0)<(10);
        $113 = ($103>>>0)<(429496729);
        $114 = ($102>>>0)<(2576980378);
        $115 = ($103|0)==(429496729);
        $116 = $115 & $114;
        $117 = $113 | $116;
        $or$cond7 = $112 & $117;
        if ($or$cond7) {
         $$3162215 = $$3162$be;$88 = $102;$89 = $103;$93 = $111;
        } else {
         break;
        }
       }
       $118 = ($111>>>0)>(9);
       if ($118) {
        $$1158 = $$0157;$263 = $103;$265 = $102;
       } else {
        $$1165167 = 10;$$8 = $$3162$be;$293 = $102;$294 = $103;
        label = 72;
       }
      } else {
       $$1158 = $$0157;$263 = $292;$265 = $291;
      }
     } else {
      $$1160169 = $$1160;$$1165168 = $$1165;
      label = 46;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165168) + -1)|0;
     $120 = $119 & $$1165168;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165168*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (23598 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((23342) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134>>>0)<($$1165168>>>0);
      if ($135) {
       $$1155192 = 0;$138 = $134;
       while(1) {
        $136 = $$1155192 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((23342) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148>>>0)<($$1165168>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155192 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$158 = 0;$160 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$158 = 0;$160 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($154>>>0)>=($$1165168>>>0);
      $157 = ($158>>>0)>($153>>>0);
      $159 = ($160>>>0)>($152>>>0);
      $161 = ($158|0)==($153|0);
      $162 = $161 & $159;
      $163 = $157 | $162;
      $or$cond187 = $156 | $163;
      if ($or$cond187) {
       $$1165167 = $$1165168;$$8 = $$4163$lcssa;$293 = $160;$294 = $158;
       label = 72;
       break;
      } else {
       $164 = $160;$165 = $158;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $168 | $166;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((23342) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($180>>>0)>=($$1165168>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;$$8 = $$5$be;$293 = $170;$294 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((23342) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($124>>>0)<($$1165168>>>0);
     if ($125) {
      $$2156210 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156210, $$1165168)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((23342) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($199>>>0)<($$1165168>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156210 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$295 = $188;$296 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$295 = 0;$296 = 0;
     }
     $203 = $204&255;
     $205 = ($203>>>0)<($$1165168>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7198 = $$6$lcssa;$209 = $296;$211 = $295;$218 = $204;
      while(1) {
       $208 = ($209>>>0)>($207>>>0);
       $210 = ($211>>>0)>($206>>>0);
       $212 = ($209|0)==($207|0);
       $213 = $212 & $210;
       $214 = $208 | $213;
       if ($214) {
        $$1165167 = $$1165168;$$8 = $$7198;$293 = $211;$294 = $209;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($211|0),($209|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;$$8 = $$7198;$293 = $211;$294 = $209;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($217|0),0,($215|0),($216|0))|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((23342) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($236>>>0)<($$1165168>>>0);
       if ($237) {
        $$7198 = $$7$be;$209 = $226;$211 = $225;$218 = $235;
       } else {
        $$1165167 = $$1165168;$$8 = $$7$be;$293 = $225;$294 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;$$8 = $$6$lcssa;$293 = $295;$294 = $296;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((23342) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($240>>>0)<($$1165167>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((23342) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($251>>>0)<($$1165167>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$263 = $4;$265 = $3;
    } else {
     $$1158 = $$0157;$263 = $294;$265 = $293;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $262 = ($263>>>0)<($4>>>0);
   $264 = ($265>>>0)<($3>>>0);
   $266 = ($263|0)==($4|0);
   $267 = $266 & $264;
   $268 = $262 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($263>>>0)>($4>>>0);
    $278 = ($265>>>0)>($3>>>0);
    $279 = ($263|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $265 ^ $$1158;
   $286 = $263 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28$phi$trans$insert = 0, $$pre = 0, $$pre$phi34Z2D = 0, $$pre29$pre = 0, $$pre35 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$phi$trans$insert28$phi$trans$insert = ((($0)) + 4|0);
    $$pre29$pre = HEAP32[$$phi$trans$insert28$phi$trans$insert>>2]|0;
    $$pre35 = ((($0)) + 108|0);
    $$pre$phi34Z2D = $$pre35;$$sink = $$pre;$26 = $$pre;$29 = $$pre29$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$pre$phi34Z2D = $17;$$sink = $21;$26 = $21;$29 = $14;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$pre$phi34Z2D = $17;$$sink = $23;$26 = $21;$29 = $14;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $25 = ($26|0)==(0|0);
   if (!($25)) {
    $27 = $26;
    $28 = $29;
    $30 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $31 = (($27) + 1)|0;
    $32 = (($31) - ($28))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$$pre$phi34Z2D>>2] = $33;
   }
   $34 = ((($29)) + -1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)==($7|0);
   if ($37) {
    $$0 = $7;
   } else {
    $38 = $7&255;
    HEAP8[$34>>0] = $38;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 15]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 15]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_768($0,$1,$2,-2147483648,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01824 = 0, $$01926 = 0, $$01926$in = 0, $$020 = 0, $$025 = 0, $$lcssa = 0, $$lcssa22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = $4&255;
  $6 = ($4<<24>>24)==(0);
  $7 = HEAP8[$1>>0]|0;
  $8 = $7&255;
  L3: do {
   if ($6) {
    $$lcssa = $8;$$lcssa22 = $5;
   } else {
    $$01824 = $0;$$01926$in = $2;$$025 = $1;$10 = $7;$13 = $4;$22 = $8;$23 = $5;
    while(1) {
     $$01926 = (($$01926$in) + -1)|0;
     $9 = ($10<<24>>24)!=(0);
     $11 = ($$01926|0)!=(0);
     $or$cond = $11 & $9;
     $12 = ($13<<24>>24)==($10<<24>>24);
     $or$cond21 = $12 & $or$cond;
     if (!($or$cond21)) {
      $$lcssa = $22;$$lcssa22 = $23;
      break L3;
     }
     $14 = ((($$01824)) + 1|0);
     $15 = ((($$025)) + 1|0);
     $16 = HEAP8[$14>>0]|0;
     $17 = $16&255;
     $18 = ($16<<24>>24)==(0);
     $19 = HEAP8[$15>>0]|0;
     $20 = $19&255;
     if ($18) {
      $$lcssa = $20;$$lcssa22 = $17;
      break;
     } else {
      $$01824 = $14;$$01926$in = $$01926;$$025 = $15;$10 = $19;$13 = $16;$22 = $20;$23 = $17;
     }
    }
   }
  } while(0);
  $21 = (($$lcssa22) - ($$lcssa))|0;
  $$020 = $21;
 }
 return ($$020|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=5812; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 15]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249306 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249306;$39 = $27;
      break L12;
     }
     $30 = ((($$0249306)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249306 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$377;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)<(32);
  L24: do {
   if ($49) {
    $$0262311 = 0;$329 = $46;$51 = $48;$storemerge273310 = $storemerge;
    while(1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $$0262$lcssa = $$0262311;$$lcssa295 = $329;$62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = ((($storemerge273310)) + 1|0);
     HEAP32[$5>>2] = $55;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (($57) + -32)|0;
     $59 = ($58>>>0)<(32);
     if ($59) {
      $$0262311 = $54;$329 = $56;$51 = $58;$storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;$$lcssa295 = $56;$62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;$$lcssa295 = $46;$62 = $storemerge;
   }
  } while(0);
  $60 = ($$lcssa295<<24>>24)==(42);
  if ($60) {
   $61 = ((($62)) + 1|0);
   $63 = HEAP8[$61>>0]|0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = (($64) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $65 = ((($62)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66<<24>>24)==(36);
    if ($67) {
     $68 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$68>>2] = 10;
     $69 = HEAP8[$61>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = (($70) + -48)|0;
     $72 = (($3) + ($71<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($62)) + 3|0);
     $$0259 = $75;$$2271 = 1;$storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $80 = ($$1270|0)==(0);
    if (!($80)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $81 = $arglist_current;
     $82 = ((0) + 4|0);
     $expanded4 = $82;
     $expanded = (($expanded4) - 1)|0;
     $83 = (($81) + ($expanded))|0;
     $84 = ((0) + 4|0);
     $expanded8 = $84;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $arglist_next = ((($86)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $87;$$2271 = 0;$storemerge278 = $61;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $61;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $88 = ($$0259|0)<(0);
   $89 = $$0262$lcssa | 8192;
   $90 = (0 - ($$0259))|0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$94 = $storemerge278;
  } else {
   $91 = (_getint($5)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $91;$$1263 = $$0262$lcssa;$$3272 = $$1270;$94 = $$pre346;
  }
  $93 = HEAP8[$94>>0]|0;
  $95 = ($93<<24>>24)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)==(42);
    if (!($98)) {
     $125 = ((($94)) + 1|0);
     HEAP32[$5>>2] = $125;
     $126 = (_getint($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $126;$$pre347 = $$pre347$pre;
     break;
    }
    $99 = ((($94)) + 2|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = (($101) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $102 = ((($94)) + 3|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(36);
     if ($104) {
      $105 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$105>>2] = 10;
      $106 = HEAP8[$99>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + -48)|0;
      $109 = (($3) + ($108<<3)|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($94)) + 4|0);
      HEAP32[$5>>2] = $116;
      $$0254 = $112;$$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272|0)==(0);
    if (!($117)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $118 = $arglist_current2;
     $119 = ((0) + 4|0);
     $expanded11 = $119;
     $expanded10 = (($expanded11) - 1)|0;
     $120 = (($118) + ($expanded10))|0;
     $121 = ((0) + 4|0);
     $expanded15 = $121;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $arglist_next3 = ((($123)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5>>2] = $99;
    $$0254 = $330;$$pre347 = $99;
   } else {
    $$0254 = -1;$$pre347 = $94;
   }
  } while(0);
  $$0252 = 0;$128 = $$pre347;
  while(1) {
   $127 = HEAP8[$128>>0]|0;
   $129 = $127 << 24 >> 24;
   $130 = (($129) + -65)|0;
   $131 = ($130>>>0)>(57);
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = ((($128)) + 1|0);
   HEAP32[$5>>2] = $132;
   $133 = HEAP8[$128>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = (($134) + -65)|0;
   $136 = ((23607 + (($$0252*58)|0)|0) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($138) + -1)|0;
   $140 = ($139>>>0)<(8);
   if ($140) {
    $$0252 = $138;$128 = $132;
   } else {
    break;
   }
  }
  $141 = ($137<<24>>24)==(0);
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = ($137<<24>>24)==(19);
  $143 = ($$0253|0)>(-1);
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = (($4) + ($$0253<<2)|0);
     HEAP32[$144>>2] = $138;
     $145 = (($3) + ($$0253<<3)|0);
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($146) + 4)|0;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153>>2] = $148;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     label = 49;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$138,$2);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252|0)!=(0);
  $159 = $157 & 15;
  $160 = ($159|0)==(3);
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162|0)==(0);
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $171 = HEAP32[$6>>2]|0;
     HEAP32[$171>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 1:  {
     $172 = HEAP32[$6>>2]|0;
     HEAP32[$172>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 2:  {
     $173 = ($$1248|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = HEAP32[$6>>2]|0;
     $176 = $175;
     $177 = $176;
     HEAP32[$177>>2] = $$1248;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 3:  {
     $180 = $$1248&65535;
     $181 = HEAP32[$6>>2]|0;
     HEAP16[$181>>1] = $180;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 4:  {
     $182 = $$1248&255;
     $183 = HEAP32[$6>>2]|0;
     HEAP8[$183>>0] = $182;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 6:  {
     $184 = HEAP32[$6>>2]|0;
     HEAP32[$184>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 7:  {
     $185 = ($$1248|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$6>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $$1248;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $192 = ($$0254>>>0)>(8);
    $193 = $192 ? $$0254 : 8;
    $194 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $193;$$3265 = $194;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 61;
    break;
   }
   case 111:  {
    $210 = $6;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (_fmt_o($212,$215,$11)|0);
    $217 = $$1263$ & 8;
    $218 = ($217|0)==(0);
    $219 = $216;
    $220 = (($12) - ($219))|0;
    $221 = ($$0254|0)>($220|0);
    $222 = (($220) + 1)|0;
    $223 = $218 | $221;
    $$0254$$0254$ = $223 ? $$0254 : $222;
    $$0228 = $216;$$1233 = 0;$$1238 = 24071;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$248 = $212;$250 = $215;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $224 = $6;
    $225 = $224;
    $226 = HEAP32[$225>>2]|0;
    $227 = (($224) + 4)|0;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)<(0);
    if ($230) {
     $231 = (_i64Subtract(0,0,($226|0),($229|0))|0);
     $232 = tempRet0;
     $233 = $6;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $$0232 = 1;$$0237 = 24071;$242 = $231;$243 = $232;
     label = 66;
     break L71;
    } else {
     $237 = $$1263$ & 2048;
     $238 = ($237|0)==(0);
     $239 = $$1263$ & 1;
     $240 = ($239|0)==(0);
     $$ = $240 ? 24071 : (24073);
     $$$ = $238 ? $$ : (24072);
     $241 = $$1263$ & 2049;
     $narrow = ($241|0)!=(0);
     $$284$ = $narrow&1;
     $$0232 = $$284$;$$0237 = $$$;$242 = $226;$243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $165 = $6;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + 4)|0;
    $169 = $168;
    $170 = HEAP32[$169>>2]|0;
    $$0232 = 0;$$0237 = 24071;$242 = $167;$243 = $170;
    label = 66;
    break;
   }
   case 99:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $261&255;
    HEAP8[$13>>0] = $265;
    $$2 = $13;$$2234 = 0;$$2239 = 24071;$$2251 = $11;$$5 = 1;$$6268 = $164;
    break;
   }
   case 109:  {
    $266 = (___errno_location()|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_strerror($267)|0);
    $$1 = $268;
    label = 71;
    break;
   }
   case 115:  {
    $269 = HEAP32[$6>>2]|0;
    $270 = ($269|0)!=(0|0);
    $271 = $270 ? $269 : 24081;
    $$1 = $271;
    label = 71;
    break;
   }
   case 67:  {
    $278 = $6;
    $279 = $278;
    $280 = HEAP32[$279>>2]|0;
    $281 = (($278) + 4)|0;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    HEAP32[$8>>2] = $280;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$331 = $8;
    label = 75;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $284 = ($$0254|0)==(0);
    if ($284) {
     _pad_674($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;$331 = $$pre349;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $306 = +HEAPF64[$6>>3];
    $307 = (_fmt_fp($0,$306,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $307;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 24071;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($195) + 4)|0;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = $$1236 & 32;
    $202 = (_fmt_x($197,$200,$11,$201)|0);
    $203 = ($197|0)==(0);
    $204 = ($200|0)==(0);
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206|0)==(0);
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = (24071 + ($208)|0);
    $$289 = $or$cond283 ? 24071 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;$$1233 = $$290;$$1238 = $$289;$$2256 = $$1255;$$4266 = $$3265;$248 = $197;$250 = $200;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $244 = (_fmt_u($242,$243,$11)|0);
    $$0228 = $244;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$248 = $242;$250 = $243;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $272 = (_memchr($$1,0,$$0254)|0);
    $273 = ($272|0)==(0|0);
    $274 = $272;
    $275 = $$1;
    $276 = (($274) - ($275))|0;
    $277 = (($$1) + ($$0254)|0);
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;$$2234 = 0;$$2239 = 24071;$$2251 = $$1250;$$5 = $$3257;$$6268 = $164;
   }
   else if ((label|0) == 75) {
    label = 0;
    $$0229322 = $331;$$0240321 = 0;$$1244320 = 0;
    while(1) {
     $285 = HEAP32[$$0229322>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      $$0240$lcssa = $$0240321;$$2245 = $$1244320;
      break;
     }
     $287 = (_wctomb($9,$285)|0);
     $288 = ($287|0)<(0);
     $289 = (($$4258355) - ($$0240321))|0;
     $290 = ($287>>>0)>($289>>>0);
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;$$2245 = $287;
      break;
     }
     $291 = ((($$0229322)) + 4|0);
     $292 = (($287) + ($$0240321))|0;
     $293 = ($$4258355>>>0)>($292>>>0);
     if ($293) {
      $$0229322 = $291;$$0240321 = $292;$$1244320 = $287;
     } else {
      $$0240$lcssa = $292;$$2245 = $287;
      break;
     }
    }
    $294 = ($$2245|0)<(0);
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_674($0,32,$$1260,$$0240$lcssa,$$1263$);
    $295 = ($$0240$lcssa|0)==(0);
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;$$1241332 = 0;
     while(1) {
      $296 = HEAP32[$$1230333>>2]|0;
      $297 = ($296|0)==(0);
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = (_wctomb($9,$296)|0);
      $299 = (($298) + ($$1241332))|0;
      $300 = ($299|0)>($$0240$lcssa|0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = ((($$1230333)) + 4|0);
      _out($0,$9,$298);
      $302 = ($299>>>0)<($$0240$lcssa>>>0);
      if ($302) {
       $$1230333 = $301;$$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $245 = ($$2256|0)>(-1);
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $247 = ($248|0)!=(0);
   $249 = ($250|0)!=(0);
   $251 = $247 | $249;
   $252 = ($$2256|0)!=(0);
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = (($12) - ($253))|0;
   $255 = $251 ^ 1;
   $256 = $255&1;
   $257 = (($256) + ($254))|0;
   $258 = ($$2256|0)>($257|0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_674($0,32,$$1260,$$0240$lcssa357,$303);
   $304 = ($$1260|0)>($$0240$lcssa357|0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = (($308) - ($309))|0;
  $311 = ($$5|0)<($310|0);
  $$$5 = $311 ? $310 : $$5;
  $312 = (($$$5) + ($$2234))|0;
  $313 = ($$1260|0)<($312|0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_674($0,32,$$2261,$312,$$6268);
  _out($0,$$2239,$$2234);
  $314 = $$6268 ^ 65536;
  _pad_674($0,48,$$2261,$312,$314);
  _pad_674($0,48,$$$5,$310,0);
  _out($0,$$2,$310);
  $315 = $$6268 ^ 8192;
  _pad_674($0,32,$$2261,$312,$315);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
 }
 L114: do {
  if ((label|0) == 87) {
   $316 = ($0|0)==(0|0);
   if ($316) {
    $317 = ($$0269|0)==(0);
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while(1) {
      $318 = (($4) + ($$2242305<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(0);
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = (($3) + ($$2242305<<3)|0);
      _pop_arg($321,$319,$2);
      $322 = (($$2242305) + 1)|0;
      $323 = ($322|0)<(10);
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while(1) {
      $326 = (($4) + ($$3303<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      $325 = (($$3303) + 1)|0;
      if (!($328)) {
       $$0 = -1;
       break L114;
      }
      $324 = ($325|0)<(10);
      if ($324) {
       $$3303 = $325;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (24119 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_105()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad_674($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_675($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 24088;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (24089) : (24094);
  $$$ = $16 ? $$ : (24091);
  $19 = $4 & 2049;
  $narrow = ($19|0)!=(0);
  $$534$ = $narrow&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_675($$0471)|0);
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = ($21>>>0)<(2146435072);
 $23 = (0)<(0);
 $24 = ($21|0)==(2146435072);
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = (+_frexpl($$0471,$7));
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7>>2]|0;
    $39 = (($38) + -1)|0;
    HEAP32[$7>>2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40|0)==(97);
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42|0)==(0);
    $44 = ((($$0521)) + 9|0);
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = ($3>>>0)>(11);
    $47 = (12 - ($3))|0;
    $48 = ($47|0)==(0);
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;$$1508583 = $47;
      while(1) {
       $50 = (($$1508583) + -1)|0;
       $51 = $$0509582 * 16.0;
       $52 = ($50|0)==(0);
       if ($52) {
        break;
       } else {
        $$0509582 = $51;$$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$>>0]|0;
      $54 = ($53<<24>>24)==(45);
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while(0);
    $61 = HEAP32[$7>>2]|0;
    $62 = ($61|0)<(0);
    $63 = (0 - ($61))|0;
    $64 = $62 ? $63 : $61;
    $65 = ($64|0)<(0);
    $66 = $65 << 31 >> 31;
    $67 = (_fmt_u($64,$66,$11)|0);
    $68 = ($67|0)==($11|0);
    if ($68) {
     $69 = ((($10)) + 11|0);
     HEAP8[$69>>0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = (($71) + 43)|0;
    $73 = $72&255;
    $74 = ((($$0511)) + -1|0);
    HEAP8[$74>>0] = $73;
    $75 = (($5) + 15)|0;
    $76 = $75&255;
    $77 = ((($$0511)) + -2|0);
    HEAP8[$77>>0] = $76;
    $notrhs = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (24119 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $42;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3|0)!=(0);
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = (($98) - ($9))|0;
    $100 = (($97) - ($96))|0;
    $101 = (($99) + -2)|0;
    $102 = ($101|0)<($3|0);
    $or$cond537 = $95 & $102;
    $103 = (($3) + 2)|0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = (($100) + ($45))|0;
    $104 = (($$0525) + ($$pn))|0;
    _pad_674($0,32,$2,$104,$4);
    _out($0,$$0521$,$45);
    $105 = $4 ^ 65536;
    _pad_674($0,48,$2,$104,$105);
    _out($0,$8,$99);
    $106 = (($$pn) - ($99))|0;
    _pad_674($0,48,$106,0,0);
    _out($0,$77,$100);
    $107 = $4 ^ 8192;
    _pad_674($0,32,$2,$104,$107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3|0)<(0);
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7>>2]|0;
    $111 = (($110) + -28)|0;
    HEAP32[$7>>2] = $111;
    $$3 = $109;$$pr = $111;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $36;$$pr = $$pre;
   }
   $112 = ($$pr|0)<(0);
   $113 = ((($6)) + 288|0);
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;$$4 = $$3;
   while(1) {
    $114 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $114;
    $115 = ((($$0498)) + 4|0);
    $116 = (+($114>>>0));
    $117 = $$4 - $116;
    $118 = $117 * 1.0E+9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;$$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr|0)>(0);
   if ($120) {
    $$1482661 = $$556;$$1499660 = $115;$122 = $$pr;
    while(1) {
     $121 = ($122|0)<(29);
     $123 = $121 ? $122 : 29;
     $$0488653 = ((($$1499660)) + -4|0);
     $124 = ($$0488653>>>0)<($$1482661>>>0);
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;$$0497654 = 0;
      while(1) {
       $125 = HEAP32[$$0488655>>2]|0;
       $126 = (_bitshift64Shl(($125|0),0,($123|0))|0);
       $127 = tempRet0;
       $128 = (_i64Add(($126|0),($127|0),($$0497654|0),0)|0);
       $129 = tempRet0;
       $130 = (___uremdi3(($128|0),($129|0),1000000000,0)|0);
       $131 = tempRet0;
       HEAP32[$$0488655>>2] = $130;
       $132 = (___udivdi3(($128|0),($129|0),1000000000,0)|0);
       $133 = tempRet0;
       $$0488 = ((($$0488655)) + -4|0);
       $134 = ($$0488>>>0)<($$1482661>>>0);
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;$$0497654 = $132;
       }
      }
      $135 = ($132|0)==(0);
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = ((($$1482661)) + -4|0);
       HEAP32[$136>>2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while(1) {
      $137 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($137)) {
       break;
      }
      $138 = ((($$2500)) + -4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0);
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7>>2]|0;
     $142 = (($141) - ($123))|0;
     HEAP32[$7>>2] = $142;
     $143 = ($142|0)>(0);
     if ($143) {
      $$1482661 = $$2483$ph;$$1499660 = $$2500;$122 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;$$1499$lcssa = $115;$$pr564 = $$pr;
   }
   $144 = ($$pr564|0)<(0);
   if ($144) {
    $145 = (($$539) + 25)|0;
    $146 = (($145|0) / 9)&-1;
    $147 = (($146) + 1)|0;
    $148 = ($40|0)==(102);
    $$3484648 = $$1482$lcssa;$$3501647 = $$1499$lcssa;$150 = $$pr564;
    while(1) {
     $149 = (0 - ($150))|0;
     $151 = ($149|0)<(9);
     $152 = $151 ? $149 : 9;
     $153 = ($$3484648>>>0)<($$3501647>>>0);
     if ($153) {
      $157 = 1 << $152;
      $158 = (($157) + -1)|0;
      $159 = 1000000000 >>> $152;
      $$0487642 = 0;$$1489641 = $$3484648;
      while(1) {
       $160 = HEAP32[$$1489641>>2]|0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = (($162) + ($$0487642))|0;
       HEAP32[$$1489641>>2] = $163;
       $164 = Math_imul($161, $159)|0;
       $165 = ((($$1489641)) + 4|0);
       $166 = ($165>>>0)<($$3501647>>>0);
       if ($166) {
        $$0487642 = $164;$$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648>>2]|0;
      $168 = ($167|0)==(0);
      $169 = ((($$3484648)) + 4|0);
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164|0)==(0);
      if ($170) {
       $$$3484692 = $$$3484;$$4502 = $$3501647;
      } else {
       $171 = ((($$3501647)) + 4|0);
       HEAP32[$$3501647>>2] = $164;
       $$$3484692 = $$$3484;$$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648>>2]|0;
      $155 = ($154|0)==(0);
      $156 = ((($$3484648)) + 4|0);
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;$$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = $175 >> 2;
     $177 = ($176|0)>($147|0);
     $178 = (($172) + ($147<<2)|0);
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7>>2]|0;
     $180 = (($179) + ($152))|0;
     HEAP32[$7>>2] = $180;
     $181 = ($180|0)<(0);
     if ($181) {
      $$3484648 = $$$3484692;$$3501647 = $$$4502;$150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $182 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = (($183) - ($184))|0;
    $186 = $185 >> 2;
    $187 = ($186*9)|0;
    $188 = HEAP32[$$3484$lcssa>>2]|0;
    $189 = ($188>>>0)<(10);
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;$$0530636 = 10;
     while(1) {
      $190 = ($$0530636*10)|0;
      $191 = (($$0514637) + 1)|0;
      $192 = ($188>>>0)<($190>>>0);
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;$$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40|0)!=(102);
   $194 = $193 ? $$1515 : 0;
   $195 = (($$539) - ($194))|0;
   $196 = ($40|0)==(103);
   $197 = ($$539|0)!=(0);
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = (($195) + ($$neg))|0;
   $200 = $$3501$lcssa;
   $201 = (($200) - ($183))|0;
   $202 = $201 >> 2;
   $203 = ($202*9)|0;
   $204 = (($203) + -9)|0;
   $205 = ($199|0)<($204|0);
   if ($205) {
    $206 = ((($$556)) + 4|0);
    $207 = (($199) + 9216)|0;
    $208 = (($207|0) / 9)&-1;
    $209 = (($208) + -1024)|0;
    $210 = (($206) + ($209<<2)|0);
    $211 = (($207|0) % 9)&-1;
    $$0527629 = (($211) + 1)|0;
    $212 = ($$0527629|0)<(9);
    if ($212) {
     $$0527631 = $$0527629;$$1531630 = 10;
     while(1) {
      $213 = ($$1531630*10)|0;
      $$0527 = (($$0527631) + 1)|0;
      $exitcond = ($$0527|0)==(9);
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;$$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210>>2]|0;
    $215 = (($214>>>0) % ($$1531$lcssa>>>0))&-1;
    $216 = ($215|0)==(0);
    $217 = ((($210)) + 4|0);
    $218 = ($217|0)==($$3501$lcssa|0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $219 = (($214>>>0) / ($$1531$lcssa>>>0))&-1;
     $220 = $219 & 1;
     $221 = ($220|0)==(0);
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = (($$1531$lcssa|0) / 2)&-1;
     $223 = ($215>>>0)<($222>>>0);
     $224 = ($215|0)==($222|0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? 0.5 : $$559;
     $225 = ($$0520|0)==(0);
     if ($225) {
      $$1467 = $$$559;$$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521>>0]|0;
      $227 = ($226<<24>>24)==(45);
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;$$1469 = $$$542;
     }
     $230 = (($214) - ($215))|0;
     HEAP32[$210>>2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = (($230) + ($$1531$lcssa))|0;
      HEAP32[$210>>2] = $233;
      $234 = ($233>>>0)>(999999999);
      if ($234) {
       $$5486623 = $$3484$lcssa;$$sink545622 = $210;
       while(1) {
        $235 = ((($$sink545622)) + -4|0);
        HEAP32[$$sink545622>>2] = 0;
        $236 = ($235>>>0)<($$5486623>>>0);
        if ($236) {
         $237 = ((($$5486623)) + -4|0);
         HEAP32[$237>>2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$235>>2] = $239;
        $240 = ($239>>>0)>(999999999);
        if ($240) {
         $$5486623 = $$6;$$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;$$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = (($183) - ($241))|0;
      $243 = $242 >> 2;
      $244 = ($243*9)|0;
      $245 = HEAP32[$$5486$lcssa>>2]|0;
      $246 = ($245>>>0)<(10);
      if ($246) {
       $$4492 = $$sink545$lcssa;$$4518 = $244;$$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;$$2532617 = 10;
       while(1) {
        $247 = ($$2532617*10)|0;
        $248 = (($$2516618) + 1)|0;
        $249 = ($245>>>0)<($247>>>0);
        if ($249) {
         $$4492 = $$sink545$lcssa;$$4518 = $248;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;$$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $250 = ((($$4492)) + 4|0);
    $251 = ($$3501$lcssa>>>0)>($250>>>0);
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $252 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($252)) {
     $$lcssa673 = 0;
     break;
    }
    $253 = ((($$7505)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ($254|0)==(0);
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = (0 - ($$5519$ph))|0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$&1;
     $$539$ = (($257) + ($$539))|0;
     $258 = ($$539$|0)>($$5519$ph|0);
     $259 = ($$5519$ph|0)>(-5);
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = (($5) + -1)|0;
      $$neg567 = (($$539$) + -1)|0;
      $261 = (($$neg567) - ($$5519$ph))|0;
      $$0479 = $260;$$2476 = $261;
     } else {
      $262 = (($5) + -2)|0;
      $263 = (($$539$) + -1)|0;
      $$0479 = $262;$$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264|0)==(0);
     if ($265) {
      if ($$lcssa673) {
       $266 = ((($$7505)) + -4|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = (($267>>>0) % 10)&-1;
        $270 = ($269|0)==(0);
        if ($270) {
         $$1528614 = 0;$$3533613 = 10;
         while(1) {
          $271 = ($$3533613*10)|0;
          $272 = (($$1528614) + 1)|0;
          $273 = (($267>>>0) % ($271>>>0))&-1;
          $274 = ($273|0)==(0);
          if ($274) {
           $$1528614 = $272;$$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275|0)==(102);
      $277 = $$7505;
      $278 = (($277) - ($183))|0;
      $279 = $278 >> 2;
      $280 = ($279*9)|0;
      $281 = (($280) + -9)|0;
      if ($276) {
       $282 = (($281) - ($$2529))|0;
       $283 = ($282|0)>(0);
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476|0)<($$546|0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;$$3477 = $$2476$$547;$$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = (($281) + ($$5519$ph))|0;
       $286 = (($285) - ($$2529))|0;
       $287 = ($286|0)>(0);
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476|0)<($$548|0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;$$3477 = $$539;$$pre$phi690Z2D = $$pre689;
    }
   } while(0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289|0)!=(0);
   $291 = $290&1;
   $292 = $$1480 | 32;
   $293 = ($292|0)==(102);
   if ($293) {
    $294 = ($$5519$ph|0)>(0);
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;$$pn566 = $295;
   } else {
    $296 = ($$5519$ph|0)<(0);
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297|0)<(0);
    $299 = $298 << 31 >> 31;
    $300 = (_fmt_u($297,$299,$11)|0);
    $301 = $11;
    $302 = $300;
    $303 = (($301) - ($302))|0;
    $304 = ($303|0)<(2);
    if ($304) {
     $$1512607 = $300;
     while(1) {
      $305 = ((($$1512607)) + -1|0);
      HEAP8[$305>>0] = 48;
      $306 = $305;
      $307 = (($301) - ($306))|0;
      $308 = ($307|0)<(2);
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = (($310) + 43)|0;
    $312 = $311&255;
    $313 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$313>>0] = $312;
    $314 = $$1480&255;
    $315 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$315>>0] = $314;
    $316 = $315;
    $317 = (($301) - ($316))|0;
    $$2513 = $315;$$pn566 = $317;
   }
   $318 = (($$0520) + 1)|0;
   $319 = (($318) + ($$3477))|0;
   $$1526 = (($319) + ($291))|0;
   $320 = (($$1526) + ($$pn566))|0;
   _pad_674($0,32,$2,$320,$4);
   _out($0,$$0521,$$0520);
   $321 = $4 ^ 65536;
   _pad_674($0,48,$2,$320,$321);
   if ($293) {
    $322 = ($$9$ph>>>0)>($$556>>>0);
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = ((($8)) + 9|0);
    $324 = $323;
    $325 = ((($8)) + 8|0);
    $$5493597 = $$0496$$9;
    while(1) {
     $326 = HEAP32[$$5493597>>2]|0;
     $327 = (_fmt_u($326,0,$323)|0);
     $328 = ($$5493597|0)==($$0496$$9|0);
     if ($328) {
      $334 = ($327|0)==($323|0);
      if ($334) {
       HEAP8[$325>>0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = ($327>>>0)>($8>>>0);
      if ($329) {
       $330 = $327;
       $331 = (($330) - ($9))|0;
       _memset(($8|0),48,($331|0))|0;
       $$0464594 = $327;
       while(1) {
        $332 = ((($$0464594)) + -1|0);
        $333 = ($332>>>0)>($8>>>0);
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = (($324) - ($335))|0;
     _out($0,$$1465,$336);
     $337 = ((($$5493597)) + 4|0);
     $338 = ($337>>>0)>($$556>>>0);
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289|0)==(0);
    if (!($339)) {
     _out($0,24135,1);
    }
    $340 = ($337>>>0)<($$7505>>>0);
    $341 = ($$3477|0)>(0);
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;$$6494589 = $337;
     while(1) {
      $343 = HEAP32[$$6494589>>2]|0;
      $344 = (_fmt_u($343,0,$323)|0);
      $345 = ($344>>>0)>($8>>>0);
      if ($345) {
       $346 = $344;
       $347 = (($346) - ($9))|0;
       _memset(($8|0),48,($347|0))|0;
       $$0463584 = $344;
       while(1) {
        $348 = ((($$0463584)) + -1|0);
        $349 = ($348>>>0)>($8>>>0);
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590|0)<(9);
      $351 = $350 ? $$4478590 : 9;
      _out($0,$$0463$lcssa,$351);
      $352 = ((($$6494589)) + 4|0);
      $353 = (($$4478590) + -9)|0;
      $354 = ($352>>>0)<($$7505>>>0);
      $355 = ($$4478590|0)>(9);
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;$$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = (($$4478$lcssa) + 9)|0;
    _pad_674($0,48,$357,9,0);
   } else {
    $358 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477|0)>(-1);
    if ($359) {
     $360 = ((($8)) + 9|0);
     $361 = ($$pre$phi690Z2D|0)==(0);
     $362 = $360;
     $363 = (0 - ($9))|0;
     $364 = ((($8)) + 8|0);
     $$5602 = $$3477;$$7495601 = $$9$ph;
     while(1) {
      $365 = HEAP32[$$7495601>>2]|0;
      $366 = (_fmt_u($365,0,$360)|0);
      $367 = ($366|0)==($360|0);
      if ($367) {
       HEAP8[$364>>0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601|0)==($$9$ph|0);
      do {
       if ($368) {
        $372 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $373 = ($$5602|0)<(1);
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out($0,24135,1);
        $$2 = $372;
       } else {
        $369 = ($$0>>>0)>($8>>>0);
        if (!($369)) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = (($$0) + ($363)|0);
        $scevgep684685 = $scevgep684;
        _memset(($8|0),48,($scevgep684685|0))|0;
        $$1598 = $$0;
        while(1) {
         $370 = ((($$1598)) + -1|0);
         $371 = ($370>>>0)>($8>>>0);
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while(0);
      $374 = $$2;
      $375 = (($362) - ($374))|0;
      $376 = ($$5602|0)>($375|0);
      $377 = $376 ? $375 : $$5602;
      _out($0,$$2,$377);
      $378 = (($$5602) - ($375))|0;
      $379 = ((($$7495601)) + 4|0);
      $380 = ($379>>>0)<($$7505$>>>0);
      $381 = ($378|0)>(-1);
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;$$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = (($$5$lcssa) + 18)|0;
    _pad_674($0,48,$383,18,0);
    $384 = $11;
    $385 = $$2513;
    $386 = (($384) - ($385))|0;
    _out($0,$$2513,$386);
   }
   $387 = $4 ^ 8192;
   _pad_674($0,32,$2,$320,$387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 24107 : 24111;
   $30 = ($$0471 != $$0471) | (0.0 != 0.0);
   $31 = $28 ? 26038 : 24115;
   $$0510 = $30 ? $31 : $29;
   $32 = (($$0520) + 3)|0;
   $33 = $4 & -65537;
   _pad_674($0,32,$2,$32,$33);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $34 = $4 ^ 8192;
   _pad_674($0,32,$2,$32,$34);
   $$sink562 = $32;
  }
 } while(0);
 $388 = ($$sink562|0)<($2|0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;return ($$555|0);
}
function ___DOUBLE_BITS_675($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_448()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_448() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_105() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (24137 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 24225;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 24225;
  } else {
   $$01214 = 24225;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 15]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 15]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($14) + ($18)|0);
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = (($4) - ($7))|0;
 $9 = ($8>>>0)>($2>>>0);
 $$ = $9 ? $2 : $8;
 _memcpy(($6|0),($1|0),($$|0))|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = (($10) + ($$)|0);
 HEAP32[$5>>2] = $11;
 return ($2|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$2 = 0, $$pre$pre = 0, $$pre76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 L1: do {
  if (!($11)) {
   $12 = (0 - ($2))|0;
   $13 = ((($4)) + 4|0);
   HEAP32[$13>>2] = $2;
   HEAP32[$4>>2] = $2;
   $$0 = 2;$15 = $2;$17 = $2;
   while(1) {
    $14 = (($15) + ($2))|0;
    $16 = (($14) + ($17))|0;
    $18 = (($4) + ($$0<<2)|0);
    HEAP32[$18>>2] = $16;
    $19 = ($16>>>0)<($6>>>0);
    $20 = (($$0) + 1)|0;
    if ($19) {
     $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
    } else {
     break;
    }
   }
   $21 = (($0) + ($6)|0);
   $22 = (($21) + ($12)|0);
   $23 = ($22>>>0)>($0>>>0);
   if ($23) {
    $24 = $22;
    $$06772 = 1;$$06871 = $0;$26 = 1;
    while(1) {
     $25 = $26 & 3;
     $27 = ($25|0)==(3);
     do {
      if ($27) {
       _sift($$06871,$2,$3,$$06772,$4);
       _shr($5,2);
       $28 = (($$06772) + 2)|0;
       $$1 = $28;
      } else {
       $29 = (($$06772) + -1)|0;
       $30 = (($4) + ($29<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $$06871;
       $33 = (($24) - ($32))|0;
       $34 = ($31>>>0)<($33>>>0);
       if ($34) {
        _sift($$06871,$2,$3,$$06772,$4);
       } else {
        _trinkle($$06871,$2,$3,$5,$$06772,0,$4);
       }
       $35 = ($$06772|0)==(1);
       if ($35) {
        _shl($5,1);
        $$1 = 0;
        break;
       } else {
        _shl($5,$29);
        $$1 = 1;
        break;
       }
      }
     } while(0);
     $36 = HEAP32[$5>>2]|0;
     $37 = $36 | 1;
     HEAP32[$5>>2] = $37;
     $38 = (($$06871) + ($2)|0);
     $39 = ($38>>>0)<($22>>>0);
     if ($39) {
      $$06772 = $$1;$$06871 = $38;$26 = $37;
     } else {
      $$067$lcssa = $$1;$$068$lcssa = $38;$61 = $37;
      break;
     }
    }
   } else {
    $$067$lcssa = 1;$$068$lcssa = $0;$61 = 1;
   }
   _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
   $40 = ((($5)) + 4|0);
   $$169 = $$068$lcssa;$$2 = $$067$lcssa;$43 = $61;
   while(1) {
    $41 = ($$2|0)==(1);
    $42 = ($43|0)==(1);
    $or$cond = $41 & $42;
    if ($or$cond) {
     $44 = HEAP32[$40>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      break L1;
     }
    } else {
     $46 = ($$2|0)<(2);
     if (!($46)) {
      _shl($5,2);
      $49 = (($$2) + -2)|0;
      $50 = HEAP32[$5>>2]|0;
      $51 = $50 ^ 7;
      HEAP32[$5>>2] = $51;
      _shr($5,1);
      $52 = (($4) + ($49<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (0 - ($53))|0;
      $55 = (($$169) + ($54)|0);
      $56 = (($55) + ($12)|0);
      $57 = (($$2) + -1)|0;
      _trinkle($56,$2,$3,$5,$57,1,$4);
      _shl($5,1);
      $58 = HEAP32[$5>>2]|0;
      $59 = $58 | 1;
      HEAP32[$5>>2] = $59;
      $60 = (($$169) + ($12)|0);
      _trinkle($60,$2,$3,$5,$49,1,$4);
      $$169 = $60;$$2 = $49;$43 = $59;
      continue;
     }
    }
    $47 = (_pntz($5)|0);
    _shr($5,$47);
    $48 = (($47) + ($$2))|0;
    $$pre$pre = HEAP32[$5>>2]|0;
    $$pre76 = (($$169) + ($12)|0);
    $$169 = $$pre76;$$2 = $48;$43 = $$pre$pre;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$029$be = 0, $$02932 = 0, $$030$be = 0, $$03031 = 0, $$033 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02932 = $0;$$03031 = $3;$$033 = 1;$14 = $0;
   while(1) {
    $8 = (($$02932) + ($7)|0);
    $9 = (($$03031) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 7]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 7]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$033;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 7]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($$033) + 1)|0;
    $22 = (($5) + ($$033<<2)|0);
    if ($20) {
     HEAP32[$22>>2] = $13;
     $23 = (($$03031) + -1)|0;
     $$029$be = $13;$$030$be = $23;
    } else {
     HEAP32[$22>>2] = $8;
     $$029$be = $8;$$030$be = $9;
    }
    $24 = ($$030$be|0)>(1);
    if (!($24)) {
     $$0$lcssa = $21;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02932 = $$029$be;$$03031 = $$030$be;$$033 = $21;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _shr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $5;
  HEAP32[$3>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$0>>2]|0;
  $$pre11 = HEAP32[$3>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 >>> $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 << $8;
 $11 = $9 | $6;
 HEAP32[$0>>2] = $11;
 $12 = $10 >>> $$0;
 HEAP32[$3>>2] = $12;
 return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp + 232|0;
 $8 = sp;
 $9 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$8>>2] = $0;
 $13 = ($9|0)!=(1);
 $14 = ($11|0)!=(0);
 $15 = $13 | $14;
 L1: do {
  if ($15) {
   $16 = (0 - ($1))|0;
   $17 = (($6) + ($4<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (0 - ($18))|0;
   $20 = (($0) + ($19)|0);
   $21 = (FUNCTION_TABLE_iii[$2 & 7]($20,$0)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 9;
   } else {
    $phitmp = ($5|0)==(0);
    $$0455780 = 1;$$0465681 = $4;$$0475582 = $phitmp;$$05879 = $0;$28 = $20;
    while(1) {
     $23 = ($$0465681|0)>(1);
     $or$cond = $$0475582 & $23;
     if ($or$cond) {
      $24 = (($$05879) + ($16)|0);
      $25 = (($$0465681) + -2)|0;
      $26 = (($6) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $29 = (FUNCTION_TABLE_iii[$2 & 7]($24,$28)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
      $31 = (0 - ($27))|0;
      $32 = (($24) + ($31)|0);
      $33 = (FUNCTION_TABLE_iii[$2 & 7]($32,$28)|0);
      $34 = ($33|0)>(-1);
      if ($34) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
     }
     $35 = (($$0455780) + 1)|0;
     $36 = (($8) + ($$0455780<<2)|0);
     HEAP32[$36>>2] = $28;
     $37 = (_pntz($7)|0);
     _shr($7,$37);
     $38 = (($37) + ($$0465681))|0;
     $39 = HEAP32[$7>>2]|0;
     $40 = ($39|0)!=(1);
     $41 = HEAP32[$12>>2]|0;
     $42 = ($41|0)!=(0);
     $43 = $40 | $42;
     if (!($43)) {
      $$04551 = $35;$$04653 = $38;$$049 = $28;
      label = 10;
      break L1;
     }
     $$pre = HEAP32[$8>>2]|0;
     $44 = (($6) + ($38<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (0 - ($45))|0;
     $47 = (($28) + ($46)|0);
     $48 = (FUNCTION_TABLE_iii[$2 & 7]($47,$$pre)|0);
     $49 = ($48|0)<(1);
     if ($49) {
      $$0$lcssa = $28;$$045$lcssa = $35;$$046$lcssa = $38;$$047$lcssa = 0;
      label = 9;
      break;
     } else {
      $$05879$phi = $28;$$0455780 = $35;$$0465681 = $38;$$0475582 = 1;$28 = $47;$$05879 = $$05879$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $50 = ($$047$lcssa|0)==(0);
  if ($50) {
   $$04551 = $$045$lcssa;$$04653 = $$046$lcssa;$$049 = $$0$lcssa;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  _cycle($1,$8,$$04551);
  _sift($$049,$1,$2,$$04653,$6);
 }
 STACKTOP = sp;return;
}
function _shl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$3>>2] = $5;
  HEAP32[$0>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $$pre11 = HEAP32[$0>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 << $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 >>> $8;
 $11 = $9 | $6;
 HEAP32[$3>>2] = $11;
 $12 = $10 << $$0;
 HEAP32[$0>>2] = $12;
 return;
}
function _pntz($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (_a_ctz_l_763($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_a_ctz_l_763($6)|0);
  $8 = (($7) + 32)|0;
  $9 = ($7|0)==(0);
  $$ = $9 ? 0 : $8;
  return ($$|0);
 } else {
  return ($3|0);
 }
 return (0)|0;
}
function _a_ctz_l_763($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $5 & 1;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)<(256);
     $8 = $7 ? $$02527 : 256;
     $9 = HEAP32[$1>>2]|0;
     _memcpy(($10|0),($9|0),($8|0))|0;
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      _memcpy(($12|0),($15|0),($8|0))|0;
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$old8 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0113 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0113 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0113 = 1;
    }
    }
   } while(0);
   $$0107127 = 0;$$1128 = $$0;
   while(1) {
    $26 = $$1128 | 32;
    $27 = (26029 + ($$0107127)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$0107$lcssa = $$0107127;$$1$lcssa = $$1128;
     break;
    }
    $31 = ($$0107127>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1128;
     }
    } while(0);
    $39 = (($$0107127) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0107127 = $39;$$1128 = $$2;
    } else {
     $$0107$lcssa = $39;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($$0107$lcssa>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($$0107$lcssa|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $56 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($56) {
       $$2109125 = 0;$$3126 = $$1$lcssa;
       while(1) {
        $57 = $$3126 | 32;
        $58 = (26038 + ($$2109125)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = $59 << 24 >> 24;
        $61 = ($57|0)==($60|0);
        if (!($61)) {
         $$3110 = $$2109125;$$5 = $$3126;
         break L34;
        }
        $62 = ($$2109125>>>0)<(2);
        do {
         if ($62) {
          $63 = HEAP32[$3>>2]|0;
          $64 = HEAP32[$4>>2]|0;
          $65 = ($63>>>0)<($64>>>0);
          if ($65) {
           $66 = ((($63)) + 1|0);
           HEAP32[$3>>2] = $66;
           $67 = HEAP8[$63>>0]|0;
           $68 = $67&255;
           $$4 = $68;
           break;
          } else {
           $69 = (___shgetc($0)|0);
           $$4 = $69;
           break;
          }
         } else {
          $$4 = $$3126;
         }
        } while(0);
        $70 = (($$2109125) + 1)|0;
        $71 = ($70>>>0)<(3);
        if ($71) {
         $$2109125 = $70;$$3126 = $$4;
        } else {
         $$3110 = $70;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $72 = HEAP32[$3>>2]|0;
      $73 = HEAP32[$4>>2]|0;
      $74 = ($72>>>0)<($73>>>0);
      if ($74) {
       $75 = ((($72)) + 1|0);
       HEAP32[$3>>2] = $75;
       $76 = HEAP8[$72>>0]|0;
       $77 = $76&255;
       $80 = $77;
      } else {
       $78 = (___shgetc($0)|0);
       $80 = $78;
      }
      $79 = ($80|0)==(40);
      if ($79) {
       $$4111 = 1;
      } else {
       $81 = HEAP32[$4>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        $$0114 = nan;
        break L4;
       }
       $83 = HEAP32[$3>>2]|0;
       $84 = ((($83)) + -1|0);
       HEAP32[$3>>2] = $84;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $85 = HEAP32[$3>>2]|0;
       $86 = HEAP32[$4>>2]|0;
       $87 = ($85>>>0)<($86>>>0);
       if ($87) {
        $88 = ((($85)) + 1|0);
        HEAP32[$3>>2] = $88;
        $89 = HEAP8[$85>>0]|0;
        $90 = $89&255;
        $93 = $90;
       } else {
        $91 = (___shgetc($0)|0);
        $93 = $91;
       }
       $92 = (($93) + -48)|0;
       $94 = ($92>>>0)<(10);
       $95 = (($93) + -65)|0;
       $96 = ($95>>>0)<(26);
       $or$cond = $94 | $96;
       if (!($or$cond)) {
        $97 = (($93) + -97)|0;
        $98 = ($97>>>0)<(26);
        $99 = ($93|0)==(95);
        $or$cond7 = $99 | $98;
        if (!($or$cond7)) {
         break;
        }
       }
       $111 = (($$4111) + 1)|0;
       $$4111 = $111;
      }
      $100 = ($93|0)==(41);
      if ($100) {
       $$0114 = nan;
       break L4;
      }
      $101 = HEAP32[$4>>2]|0;
      $102 = ($101|0)==(0|0);
      if (!($102)) {
       $103 = HEAP32[$3>>2]|0;
       $104 = ((($103)) + -1|0);
       HEAP32[$3>>2] = $104;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $105 = ($$4111|0)==(0);
      if ($105) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $107 = (($$in) + -1)|0;
       if (!($102)) {
        $108 = HEAP32[$3>>2]|0;
        $109 = ((($108)) + -1|0);
        HEAP32[$3>>2] = $109;
       }
       $110 = ($107|0)==(0);
       if ($110) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $107;
       }
      }
      break;
     }
     case 0:  {
      $117 = ($$5|0)==(48);
      if ($117) {
       $118 = HEAP32[$3>>2]|0;
       $119 = HEAP32[$4>>2]|0;
       $120 = ($118>>>0)<($119>>>0);
       if ($120) {
        $121 = ((($118)) + 1|0);
        HEAP32[$3>>2] = $121;
        $122 = HEAP8[$118>>0]|0;
        $123 = $122&255;
        $126 = $123;
       } else {
        $124 = (___shgetc($0)|0);
        $126 = $124;
       }
       $125 = $126 | 32;
       $127 = ($125|0)==(120);
       if ($127) {
        $128 = (+_hexfloat($0,$$0106$ph,$$0105$ph,$$0113,$2));
        $$0114 = $128;
        break L4;
       }
       $129 = HEAP32[$4>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$6 = 48;
       } else {
        $131 = HEAP32[$3>>2]|0;
        $132 = ((($131)) + -1|0);
        HEAP32[$3>>2] = $132;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $133 = (+_decfloat($0,$$6,$$0106$ph,$$0105$ph,$$0113,$2));
      $$0114 = $133;
      break L4;
      break;
     }
     default: {
      $112 = HEAP32[$4>>2]|0;
      $113 = ($112|0)==(0|0);
      if (!($113)) {
       $114 = HEAP32[$3>>2]|0;
       $115 = ((($114)) + -1|0);
       HEAP32[$3>>2] = $115;
      }
      $116 = (___errno_location()|0);
      HEAP32[$116>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $48 & $49;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1108) + -1)|0;
      $$old8 = ($52>>>0)>(3);
      if ($$old8) {
       $$1108 = $52;
      } else {
       break;
      }
     }
    }
   }
   $53 = (+($$0113|0));
   $54 = $53 * inf;
   $55 = $54;
   $$0114 = $55;
  }
 } while(0);
 return (+$$0114);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0148$ = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0155$ = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0;
 var $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5 = 0.0, $$5164 = 0, $$6 = 0, $$pn = 0.0;
 var $$pre = 0.0, $$pre$phiZ2D = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond168 = 0, $or$cond206 = 0, $or$cond4 = 0;
 var $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0 = $12;$$0142 = 0;
 } else {
  $13 = (___shgetc($0)|0);
  $$0 = $13;$$0142 = 0;
 }
 L4: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 8;
   break L4;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0146 = 0;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$0;$$2144 = $$0142;$101 = 0;$53 = 0;$55 = 0;$99 = 0;
   break L4;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0 = $19;$$0142 = 1;
   continue;
  } else {
   $20 = (___shgetc($0)|0);
   $$0 = $20;$$0142 = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $$1$ph = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $$1$ph = $27;
  }
  $28 = ($$1$ph|0)==(48);
  if ($28) {
   $36 = 0;$37 = 0;
   while(1) {
    $29 = HEAP32[$5>>2]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$5>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $41 = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $41 = $35;
    }
    $38 = (_i64Add(($36|0),($37|0),-1,-1)|0);
    $39 = tempRet0;
    $40 = ($41|0)==(48);
    if ($40) {
     $36 = $38;$37 = $39;
    } else {
     $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $41;$$2144 = 1;$101 = $39;$53 = 0;$55 = 0;$99 = $38;
     break;
    }
   }
  } else {
   $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$1$ph;$$2144 = $$0142;$101 = 0;$53 = 0;$55 = 0;$99 = 0;
  }
 }
 while(1) {
  $42 = (($$2) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($$2|0)==(46);
  if (!($43)) {
   $45 = $$2 | 32;
   $46 = (($45) + -97)|0;
   $47 = ($46>>>0)<(6);
   $or$cond6 = $44 | $47;
   if (!($or$cond6)) {
    $$2$lcssa = $$2;
    break;
   }
  }
  if ($44) {
   $48 = ($$0146|0)==(0);
   if ($48) {
    $$1147 = 1;$$2150 = $$0148;$$2154 = $$0152;$$2157 = $$0155;$$2161 = $$0159;$$3145 = $$2144;$214 = $55;$215 = $53;$216 = $55;$217 = $53;
   } else {
    $$2$lcssa = 46;
    break;
   }
  } else {
   $49 = ($$2|0)>(57);
   $50 = $$2 | 32;
   $51 = (($50) + -87)|0;
   $$0133 = $49 ? $51 : $42;
   $52 = ($53|0)<(0);
   $54 = ($55>>>0)<(8);
   $56 = ($53|0)==(0);
   $57 = $56 & $54;
   $58 = $52 | $57;
   do {
    if ($58) {
     $59 = $$0159 << 4;
     $60 = (($$0133) + ($59))|0;
     $$1149 = $$0148;$$1153 = $$0152;$$1156 = $$0155;$$1160 = $60;
    } else {
     $61 = ($53|0)<(0);
     $62 = ($55>>>0)<(14);
     $63 = ($53|0)==(0);
     $64 = $63 & $62;
     $65 = $61 | $64;
     if ($65) {
      $66 = (+($$0133|0));
      $67 = $$0152 * 0.0625;
      $68 = $67 * $66;
      $69 = $$0155 + $68;
      $$1149 = $$0148;$$1153 = $67;$$1156 = $69;$$1160 = $$0159;
      break;
     } else {
      $70 = ($$0133|0)==(0);
      $71 = ($$0148|0)!=(0);
      $or$cond = $71 | $70;
      $72 = $$0152 * 0.5;
      $73 = $$0155 + $72;
      $$0155$ = $or$cond ? $$0155 : $73;
      $$0148$ = $or$cond ? $$0148 : 1;
      $$1149 = $$0148$;$$1153 = $$0152;$$1156 = $$0155$;$$1160 = $$0159;
      break;
     }
    }
   } while(0);
   $74 = (_i64Add(($55|0),($53|0),1,0)|0);
   $75 = tempRet0;
   $$1147 = $$0146;$$2150 = $$1149;$$2154 = $$1153;$$2157 = $$1156;$$2161 = $$1160;$$3145 = 1;$214 = $99;$215 = $101;$216 = $74;$217 = $75;
  }
  $76 = HEAP32[$5>>2]|0;
  $77 = HEAP32[$7>>2]|0;
  $78 = ($76>>>0)<($77>>>0);
  if ($78) {
   $79 = ((($76)) + 1|0);
   HEAP32[$5>>2] = $79;
   $80 = HEAP8[$76>>0]|0;
   $81 = $80&255;
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $81;$$2144 = $$3145;$101 = $215;$53 = $217;$55 = $216;$99 = $214;
   continue;
  } else {
   $82 = (___shgetc($0)|0);
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $82;$$2144 = $$3145;$101 = $215;$53 = $217;$55 = $216;$99 = $214;
   continue;
  }
 }
 $83 = ($$2144|0)==(0);
 do {
  if ($83) {
   $84 = HEAP32[$7>>2]|0;
   $85 = ($84|0)!=(0|0);
   if ($85) {
    $86 = HEAP32[$5>>2]|0;
    $87 = ((($86)) + -1|0);
    HEAP32[$5>>2] = $87;
   }
   $88 = ($4|0)==(0);
   if ($88) {
    ___shlim($0,0);
   } else {
    if ($85) {
     $89 = HEAP32[$5>>2]|0;
     $90 = ((($89)) + -1|0);
     HEAP32[$5>>2] = $90;
    }
    $91 = ($$0146|0)==(0);
    $92 = ($84|0)==(0|0);
    $or$cond206 = $91 | $92;
    if (!($or$cond206)) {
     $93 = HEAP32[$5>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$5>>2] = $94;
    }
   }
   $95 = (+($3|0));
   $96 = $95 * 0.0;
   $$0165 = $96;
  } else {
   $97 = ($$0146|0)==(0);
   $98 = $97 ? $55 : $99;
   $100 = $97 ? $53 : $101;
   $102 = ($53|0)<(0);
   $103 = ($55>>>0)<(8);
   $104 = ($53|0)==(0);
   $105 = $104 & $103;
   $106 = $102 | $105;
   if ($106) {
    $$3162183 = $$0159;$108 = $55;$109 = $53;
    while(1) {
     $107 = $$3162183 << 4;
     $110 = (_i64Add(($108|0),($109|0),1,0)|0);
     $111 = tempRet0;
     $112 = ($111|0)<(0);
     $113 = ($110>>>0)<(8);
     $114 = ($111|0)==(0);
     $115 = $114 & $113;
     $116 = $112 | $115;
     if ($116) {
      $$3162183 = $107;$108 = $110;$109 = $111;
     } else {
      $$3162$lcssa = $107;
      break;
     }
    }
   } else {
    $$3162$lcssa = $$0159;
   }
   $117 = $$2$lcssa | 32;
   $118 = ($117|0)==(112);
   if ($118) {
    $119 = (_scanexp($0,$4)|0);
    $120 = tempRet0;
    $121 = ($119|0)==(0);
    $122 = ($120|0)==(-2147483648);
    $123 = $121 & $122;
    if ($123) {
     $124 = ($4|0)==(0);
     if ($124) {
      ___shlim($0,0);
      $$0165 = 0.0;
      break;
     }
     $125 = HEAP32[$7>>2]|0;
     $126 = ($125|0)==(0|0);
     if ($126) {
      $137 = 0;$138 = 0;
     } else {
      $127 = HEAP32[$5>>2]|0;
      $128 = ((($127)) + -1|0);
      HEAP32[$5>>2] = $128;
      $137 = 0;$138 = 0;
     }
    } else {
     $137 = $119;$138 = $120;
    }
   } else {
    $129 = HEAP32[$7>>2]|0;
    $130 = ($129|0)==(0|0);
    if ($130) {
     $137 = 0;$138 = 0;
    } else {
     $131 = HEAP32[$5>>2]|0;
     $132 = ((($131)) + -1|0);
     HEAP32[$5>>2] = $132;
     $137 = 0;$138 = 0;
    }
   }
   $133 = (_bitshift64Shl(($98|0),($100|0),2)|0);
   $134 = tempRet0;
   $135 = (_i64Add(($133|0),($134|0),-32,-1)|0);
   $136 = tempRet0;
   $139 = (_i64Add(($135|0),($136|0),($137|0),($138|0))|0);
   $140 = tempRet0;
   $141 = ($$3162$lcssa|0)==(0);
   if ($141) {
    $142 = (+($3|0));
    $143 = $142 * 0.0;
    $$0165 = $143;
    break;
   }
   $144 = (0 - ($2))|0;
   $145 = ($144|0)<(0);
   $146 = $145 << 31 >> 31;
   $147 = ($140|0)>($146|0);
   $148 = ($139>>>0)>($144>>>0);
   $149 = ($140|0)==($146|0);
   $150 = $149 & $148;
   $151 = $147 | $150;
   if ($151) {
    $152 = (___errno_location()|0);
    HEAP32[$152>>2] = 34;
    $153 = (+($3|0));
    $154 = $153 * 1.7976931348623157E+308;
    $155 = $154 * 1.7976931348623157E+308;
    $$0165 = $155;
    break;
   }
   $156 = (($2) + -106)|0;
   $157 = ($156|0)<(0);
   $158 = $157 << 31 >> 31;
   $159 = ($140|0)<($158|0);
   $160 = ($139>>>0)<($156>>>0);
   $161 = ($140|0)==($158|0);
   $162 = $161 & $160;
   $163 = $159 | $162;
   if ($163) {
    $165 = (___errno_location()|0);
    HEAP32[$165>>2] = 34;
    $166 = (+($3|0));
    $167 = $166 * 2.2250738585072014E-308;
    $168 = $167 * 2.2250738585072014E-308;
    $$0165 = $168;
    break;
   }
   $164 = ($$3162$lcssa|0)>(-1);
   if ($164) {
    $$3158179 = $$0155;$$4163178 = $$3162$lcssa;$173 = $139;$174 = $140;
    while(1) {
     $169 = !($$3158179 >= 0.5);
     $170 = $$4163178 << 1;
     $171 = $$3158179 + -1.0;
     $not$ = $169 ^ 1;
     $172 = $not$&1;
     $$5164 = $170 | $172;
     $$pn = $169 ? $$3158179 : $171;
     $$4 = $$3158179 + $$pn;
     $175 = (_i64Add(($173|0),($174|0),-1,-1)|0);
     $176 = tempRet0;
     $177 = ($$5164|0)>(-1);
     if ($177) {
      $$3158179 = $$4;$$4163178 = $$5164;$173 = $175;$174 = $176;
     } else {
      $$3158$lcssa = $$4;$$4163$lcssa = $$5164;$184 = $175;$185 = $176;
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155;$$4163$lcssa = $$3162$lcssa;$184 = $139;$185 = $140;
   }
   $178 = ($1|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = ($2|0)<(0);
   $181 = $180 << 31 >> 31;
   $182 = (_i64Subtract(32,0,($2|0),($181|0))|0);
   $183 = tempRet0;
   $186 = (_i64Add(($182|0),($183|0),($184|0),($185|0))|0);
   $187 = tempRet0;
   $188 = ($179|0)>($187|0);
   $189 = ($1>>>0)>($186>>>0);
   $190 = ($179|0)==($187|0);
   $191 = $190 & $189;
   $192 = $188 | $191;
   if ($192) {
    $193 = ($186|0)>(0);
    if ($193) {
     $$0166 = $186;
     label = 59;
    } else {
     $$0166170 = 0;$197 = 84;
     label = 61;
    }
   } else {
    $$0166 = $1;
    label = 59;
   }
   if ((label|0) == 59) {
    $194 = ($$0166|0)<(53);
    $195 = (84 - ($$0166))|0;
    if ($194) {
     $$0166170 = $$0166;$197 = $195;
     label = 61;
    } else {
     $$pre = (+($3|0));
     $$0151 = 0.0;$$0166169 = $$0166;$$pre$phiZ2D = $$pre;
    }
   }
   if ((label|0) == 61) {
    $196 = (+($3|0));
    $198 = (+_scalbn(1.0,$197));
    $199 = (+_copysignl($198,$196));
    $$0151 = $199;$$0166169 = $$0166170;$$pre$phiZ2D = $196;
   }
   $200 = ($$0166169|0)<(32);
   $201 = $$3158$lcssa != 0.0;
   $or$cond4 = $201 & $200;
   $202 = $$4163$lcssa & 1;
   $203 = ($202|0)==(0);
   $or$cond168 = $203 & $or$cond4;
   $204 = $or$cond168&1;
   $$6 = (($204) + ($$4163$lcssa))|0;
   $$5 = $or$cond168 ? 0.0 : $$3158$lcssa;
   $205 = (+($$6>>>0));
   $206 = $$pre$phiZ2D * $205;
   $207 = $$0151 + $206;
   $208 = $$pre$phiZ2D * $$5;
   $209 = $208 + $207;
   $210 = $209 - $$0151;
   $211 = $210 != 0.0;
   if (!($211)) {
    $212 = (___errno_location()|0);
    HEAP32[$212>>2] = 34;
   }
   $213 = (+_scalbnl($210,$184));
   $$0165 = $213;
  }
 } while(0);
 return (+$$0165);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$0345 = 0, $$$0350 = 0, $$$0385 = 0, $$$0401 = 0, $$$5355 = 0, $$$5390 = 0, $$0329 = 0, $$0332490 = 0, $$0333 = 0, $$0334 = 0, $$0336486 = 0, $$0340496 = 0, $$0341$lcssa = 0, $$0341463 = 0, $$0341464 = 0, $$0341465 = 0, $$0341513 = 0, $$0345$lcssa = 0, $$0345467 = 0;
 var $$0345468 = 0, $$0345469 = 0, $$0345512 = 0, $$0350$lcssa554 = 0, $$0350494 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365484 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa553 = 0, $$0385493 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401473 = 0, $$0401474 = 0, $$0401475 = 0, $$0401509 = 0;
 var $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph448 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph558 = 0, $$1394$lcssa = 0, $$1394511 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph449 = 0, $$2367 = 0.0;
 var $$2371$v = 0, $$2374 = 0, $$2387$ph447 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344503 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3375 = 0, $$3383 = 0, $$3399$lcssa = 0, $$3399510 = 0, $$3514 = 0, $$413 = 0, $$425 = 0, $$4349495 = 0;
 var $$4354 = 0, $$4354$ph = 0, $$4354$ph559 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph445 = 0, $$4400 = 0, $$4485 = 0, $$5 = 0, $$5$in = 0, $$5355488 = 0, $$5390487 = 0, $$6378$ph = 0, $$6489 = 0, $$9483 = 0, $$neg442 = 0, $$neg443 = 0, $$pre = 0, $$promoted = 0;
 var $$sink = 0, $$sink421$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0;
 var $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $exitcond551 = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond415 = 0, $or$cond417 = 0, $or$cond419 = 0, $or$cond420 = 0, $or$cond422 = 0, $or$cond422$not = 0, $or$cond423 = 0, $or$cond426 = 0, $or$cond5 = 0, $sum = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $sum = (($3) + ($2))|0;
 $7 = (0 - ($sum))|0;
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 100|0);
 $$0329 = $1;$$0396 = 0;
 L1: while(1) {
  switch ($$0329|0) {
  case 46:  {
   label = 6;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0393 = 0;$$2 = $$0329;$$2398 = $$0396;$366 = 0;$367 = 0;
   break L1;
  }
  }
  $10 = HEAP32[$8>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($10)) + 1|0);
   HEAP32[$8>>2] = $13;
   $14 = HEAP8[$10>>0]|0;
   $15 = $14&255;
   $$0329 = $15;$$0396 = 1;
   continue;
  } else {
   $16 = (___shgetc($0)|0);
   $$0329 = $16;$$0396 = 1;
   continue;
  }
 }
 if ((label|0) == 6) {
  $17 = HEAP32[$8>>2]|0;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $20 = ((($17)) + 1|0);
   HEAP32[$8>>2] = $20;
   $21 = HEAP8[$17>>0]|0;
   $22 = $21&255;
   $$1330$ph = $22;
  } else {
   $23 = (___shgetc($0)|0);
   $$1330$ph = $23;
  }
  $24 = ($$1330$ph|0)==(48);
  if ($24) {
   $25 = 0;$26 = 0;
   while(1) {
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    $29 = HEAP32[$8>>2]|0;
    $30 = HEAP32[$9>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$8>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $$1330$be = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $$1330$be = $35;
    }
    $36 = ($$1330$be|0)==(48);
    if ($36) {
     $25 = $27;$26 = $28;
    } else {
     $$0393 = 1;$$2 = $$1330$be;$$2398 = 1;$366 = $27;$367 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;$$2 = $$1330$ph;$$2398 = $$0396;$366 = 0;$367 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $37 = (($$2) + -48)|0;
 $38 = ($37>>>0)<(10);
 $39 = ($$2|0)==(46);
 $40 = $39 | $38;
 L20: do {
  if ($40) {
   $41 = ((($6)) + 496|0);
   $$0341513 = 0;$$0345512 = 0;$$0401509 = 0;$$1394511 = $$0393;$$3399510 = $$2398;$$3514 = $$2;$368 = $39;$369 = $37;$370 = $366;$371 = $367;$44 = 0;$45 = 0;
   L22: while(1) {
    do {
     if ($368) {
      $cond = ($$1394511|0)==(0);
      if ($cond) {
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = 1;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $44;$373 = $45;$374 = $44;$375 = $45;
      } else {
       break L22;
      }
     } else {
      $43 = ($$0345512|0)<(125);
      $46 = (_i64Add(($44|0),($45|0),1,0)|0);
      $47 = tempRet0;
      $48 = ($$3514|0)!=(48);
      if (!($43)) {
       if (!($48)) {
        $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
        break;
       }
       $57 = HEAP32[$41>>2]|0;
       $58 = $57 | 1;
       HEAP32[$41>>2] = $58;
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
       break;
      }
      $$$0401 = $48 ? $46 : $$0401509;
      $49 = ($$0341513|0)==(0);
      $$pre = (($6) + ($$0345512<<2)|0);
      if ($49) {
       $$sink = $369;
      } else {
       $50 = HEAP32[$$pre>>2]|0;
       $51 = ($50*10)|0;
       $52 = (($$3514) + -48)|0;
       $53 = (($52) + ($51))|0;
       $$sink = $53;
      }
      HEAP32[$$pre>>2] = $$sink;
      $54 = (($$0341513) + 1)|0;
      $55 = ($54|0)==(9);
      $56 = $55&1;
      $$$0345 = (($56) + ($$0345512))|0;
      $$413 = $55 ? 0 : $54;
      $$2343 = $$413;$$2347 = $$$0345;$$2395 = $$1394511;$$2403 = $$$0401;$$4400 = 1;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
     }
    } while(0);
    $59 = HEAP32[$8>>2]|0;
    $60 = HEAP32[$9>>2]|0;
    $61 = ($59>>>0)<($60>>>0);
    if ($61) {
     $62 = ((($59)) + 1|0);
     HEAP32[$8>>2] = $62;
     $63 = HEAP8[$59>>0]|0;
     $64 = $63&255;
     $$3$be = $64;
    } else {
     $65 = (___shgetc($0)|0);
     $$3$be = $65;
    }
    $66 = (($$3$be) + -48)|0;
    $67 = ($66>>>0)<(10);
    $68 = ($$3$be|0)==(46);
    $69 = $68 | $67;
    if ($69) {
     $$0341513 = $$2343;$$0345512 = $$2347;$$0401509 = $$2403;$$1394511 = $$2395;$$3399510 = $$4400;$$3514 = $$3$be;$368 = $68;$369 = $66;$370 = $372;$371 = $373;$44 = $374;$45 = $375;
    } else {
     $$0341$lcssa = $$2343;$$0345$lcssa = $$2347;$$0401$lcssa = $$2403;$$1394$lcssa = $$2395;$$3$lcssa = $$3$be;$$3399$lcssa = $$4400;$72 = $372;$73 = $374;$75 = $373;$76 = $375;
     label = 29;
     break L20;
    }
   }
   $42 = ($$3399510|0)!=(0);
   $$0341465 = $$0341513;$$0345469 = $$0345512;$$0401475 = $$0401509;$376 = $44;$377 = $45;$378 = $370;$379 = $371;$380 = $42;
   label = 37;
  } else {
   $$0341$lcssa = 0;$$0345$lcssa = 0;$$0401$lcssa = 0;$$1394$lcssa = $$0393;$$3$lcssa = $$2;$$3399$lcssa = $$2398;$72 = $366;$73 = 0;$75 = $367;$76 = 0;
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $70 = ($$1394$lcssa|0)==(0);
   $71 = $70 ? $73 : $72;
   $74 = $70 ? $76 : $75;
   $77 = ($$3399$lcssa|0)!=(0);
   $78 = $$3$lcssa | 32;
   $79 = ($78|0)==(101);
   $or$cond415 = $77 & $79;
   if (!($or$cond415)) {
    $94 = ($$3$lcssa|0)>(-1);
    if ($94) {
     $$0341465 = $$0341$lcssa;$$0345469 = $$0345$lcssa;$$0401475 = $$0401$lcssa;$376 = $73;$377 = $76;$378 = $71;$379 = $74;$380 = $77;
     label = 37;
     break;
    } else {
     $$0341464 = $$0341$lcssa;$$0345468 = $$0345$lcssa;$$0401474 = $$0401$lcssa;$381 = $73;$382 = $76;$383 = $77;$384 = $71;$385 = $74;
     label = 39;
     break;
    }
   }
   $80 = (_scanexp($0,$5)|0);
   $81 = tempRet0;
   $82 = ($80|0)==(0);
   $83 = ($81|0)==(-2147483648);
   $84 = $82 & $83;
   if ($84) {
    $85 = ($5|0)==(0);
    if ($85) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $86 = HEAP32[$9>>2]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     $90 = 0;$91 = 0;
    } else {
     $88 = HEAP32[$8>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$8>>2] = $89;
     $90 = 0;$91 = 0;
    }
   } else {
    $90 = $80;$91 = $81;
   }
   $92 = (_i64Add(($90|0),($91|0),($71|0),($74|0))|0);
   $93 = tempRet0;
   $$0341463 = $$0341$lcssa;$$0345467 = $$0345$lcssa;$$0401473 = $$0401$lcssa;$105 = $92;$106 = $73;$108 = $93;$109 = $76;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $95 = HEAP32[$9>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $$0341464 = $$0341465;$$0345468 = $$0345469;$$0401474 = $$0401475;$381 = $376;$382 = $377;$383 = $380;$384 = $378;$385 = $379;
   label = 39;
  } else {
   $97 = HEAP32[$8>>2]|0;
   $98 = ((($97)) + -1|0);
   HEAP32[$8>>2] = $98;
   if ($380) {
    $$0341463 = $$0341465;$$0345467 = $$0345469;$$0401473 = $$0401475;$105 = $378;$106 = $376;$108 = $379;$109 = $377;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($383) {
   $$0341463 = $$0341464;$$0345467 = $$0345468;$$0401473 = $$0401474;$105 = $384;$106 = $381;$108 = $385;$109 = $382;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   $99 = (___errno_location()|0);
   HEAP32[$99>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $100 = HEAP32[$6>>2]|0;
   $101 = ($100|0)==(0);
   if ($101) {
    $102 = (+($4|0));
    $103 = $102 * 0.0;
    $$1 = $103;
    break;
   }
   $104 = ($105|0)==($106|0);
   $107 = ($108|0)==($109|0);
   $110 = $104 & $107;
   $111 = ($109|0)<(0);
   $112 = ($106>>>0)<(10);
   $113 = ($109|0)==(0);
   $114 = $113 & $112;
   $115 = $111 | $114;
   $or$cond = $115 & $110;
   if ($or$cond) {
    $116 = ($2|0)>(30);
    $117 = $100 >>> $2;
    $118 = ($117|0)==(0);
    $or$cond417 = $116 | $118;
    if ($or$cond417) {
     $119 = (+($4|0));
     $120 = (+($100>>>0));
     $121 = $119 * $120;
     $$1 = $121;
     break;
    }
   }
   $122 = (($3|0) / -2)&-1;
   $123 = ($122|0)<(0);
   $124 = $123 << 31 >> 31;
   $125 = ($108|0)>($124|0);
   $126 = ($105>>>0)>($122>>>0);
   $127 = ($108|0)==($124|0);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    $130 = (___errno_location()|0);
    HEAP32[$130>>2] = 34;
    $131 = (+($4|0));
    $132 = $131 * 1.7976931348623157E+308;
    $133 = $132 * 1.7976931348623157E+308;
    $$1 = $133;
    break;
   }
   $134 = (($3) + -106)|0;
   $135 = ($134|0)<(0);
   $136 = $135 << 31 >> 31;
   $137 = ($108|0)<($136|0);
   $138 = ($105>>>0)<($134>>>0);
   $139 = ($108|0)==($136|0);
   $140 = $139 & $138;
   $141 = $137 | $140;
   if ($141) {
    $142 = (___errno_location()|0);
    HEAP32[$142>>2] = 34;
    $143 = (+($4|0));
    $144 = $143 * 2.2250738585072014E-308;
    $145 = $144 * 2.2250738585072014E-308;
    $$1 = $145;
    break;
   }
   $146 = ($$0341463|0)==(0);
   if ($146) {
    $$3348 = $$0345467;
   } else {
    $147 = ($$0341463|0)<(9);
    if ($147) {
     $148 = (($6) + ($$0345467<<2)|0);
     $$promoted = HEAP32[$148>>2]|0;
     $$3344503 = $$0341463;$150 = $$promoted;
     while(1) {
      $149 = ($150*10)|0;
      $151 = (($$3344503) + 1)|0;
      $exitcond551 = ($151|0)==(9);
      if ($exitcond551) {
       break;
      } else {
       $$3344503 = $151;$150 = $149;
      }
     }
     HEAP32[$148>>2] = $149;
    }
    $152 = (($$0345467) + 1)|0;
    $$3348 = $152;
   }
   $153 = ($$0401473|0)<(9);
   if ($153) {
    $154 = ($$0401473|0)<=($105|0);
    $155 = ($105|0)<(18);
    $or$cond5 = $154 & $155;
    if ($or$cond5) {
     $156 = ($105|0)==(9);
     $157 = HEAP32[$6>>2]|0;
     if ($156) {
      $158 = (+($4|0));
      $159 = (+($157>>>0));
      $160 = $158 * $159;
      $$1 = $160;
      break;
     }
     $161 = ($105|0)<(9);
     if ($161) {
      $162 = (+($4|0));
      $163 = (+($157>>>0));
      $164 = $162 * $163;
      $165 = (8 - ($105))|0;
      $166 = (5936 + ($165<<2)|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (+($167|0));
      $169 = $164 / $168;
      $$1 = $169;
      break;
     }
     $$neg442 = Math_imul($105, -3)|0;
     $$neg443 = (($2) + 27)|0;
     $170 = (($$neg443) + ($$neg442))|0;
     $171 = ($170|0)>(30);
     $172 = $157 >>> $170;
     $173 = ($172|0)==(0);
     $or$cond419 = $171 | $173;
     if ($or$cond419) {
      $174 = (($105) + -10)|0;
      $175 = (5936 + ($174<<2)|0);
      $176 = (+($4|0));
      $177 = (+($157>>>0));
      $178 = $176 * $177;
      $179 = HEAP32[$175>>2]|0;
      $180 = (+($179|0));
      $181 = $178 * $180;
      $$1 = $181;
      break;
     }
    }
   }
   $182 = (($105|0) % 9)&-1;
   $183 = ($182|0)==(0);
   if ($183) {
    $$0380$ph = 0;$$1373$ph448 = $$3348;$$2352$ph449 = 0;$$2387$ph447 = $105;
   } else {
    $184 = ($105|0)>(-1);
    $185 = (($182) + 9)|0;
    $186 = $184 ? $182 : $185;
    $187 = (8 - ($186))|0;
    $188 = (5936 + ($187<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($$3348|0)==(0);
    if ($190) {
     $$0350$lcssa554 = 0;$$0372 = 0;$$0385$lcssa553 = $105;
    } else {
     $191 = (1000000000 / ($189|0))&-1;
     $$0340496 = 0;$$0350494 = 0;$$0385493 = $105;$$4349495 = 0;
     while(1) {
      $192 = (($6) + ($$4349495<<2)|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193>>>0) % ($189>>>0))&-1;
      $195 = (($193>>>0) / ($189>>>0))&-1;
      $196 = (($195) + ($$0340496))|0;
      HEAP32[$192>>2] = $196;
      $197 = Math_imul($191, $194)|0;
      $198 = ($$4349495|0)==($$0350494|0);
      $199 = ($196|0)==(0);
      $or$cond420 = $198 & $199;
      $200 = (($$0350494) + 1)|0;
      $201 = $200 & 127;
      $202 = (($$0385493) + -9)|0;
      $$$0385 = $or$cond420 ? $202 : $$0385493;
      $$$0350 = $or$cond420 ? $201 : $$0350494;
      $203 = (($$4349495) + 1)|0;
      $204 = ($203|0)==($$3348|0);
      if ($204) {
       break;
      } else {
       $$0340496 = $197;$$0350494 = $$$0350;$$0385493 = $$$0385;$$4349495 = $203;
      }
     }
     $205 = ($197|0)==(0);
     if ($205) {
      $$0350$lcssa554 = $$$0350;$$0372 = $$3348;$$0385$lcssa553 = $$$0385;
     } else {
      $206 = (($6) + ($$3348<<2)|0);
      $207 = (($$3348) + 1)|0;
      HEAP32[$206>>2] = $197;
      $$0350$lcssa554 = $$$0350;$$0372 = $207;$$0385$lcssa553 = $$$0385;
     }
    }
    $208 = (9 - ($186))|0;
    $209 = (($208) + ($$0385$lcssa553))|0;
    $$0380$ph = 0;$$1373$ph448 = $$0372;$$2352$ph449 = $$0350$lcssa554;$$2387$ph447 = $209;
   }
   L101: while(1) {
    $210 = ($$2387$ph447|0)<(18);
    $211 = ($$2387$ph447|0)==(18);
    $212 = (($6) + ($$2352$ph449<<2)|0);
    $$0380 = $$0380$ph;$$1373 = $$1373$ph448;
    while(1) {
     if (!($210)) {
      if (!($211)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = $$2387$ph447;$$6378$ph = $$1373;
       break L101;
      }
      $213 = HEAP32[$212>>2]|0;
      $214 = ($213>>>0)<(9007199);
      if (!($214)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = 18;$$6378$ph = $$1373;
       break L101;
      }
     }
     $215 = (($$1373) + 127)|0;
     $$0334 = 0;$$2374 = $$1373;$$5$in = $215;
     while(1) {
      $$5 = $$5$in & 127;
      $216 = (($6) + ($$5<<2)|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = (_bitshift64Shl(($217|0),0,29)|0);
      $219 = tempRet0;
      $220 = (_i64Add(($218|0),($219|0),($$0334|0),0)|0);
      $221 = tempRet0;
      $222 = ($221>>>0)>(0);
      $223 = ($220>>>0)>(1000000000);
      $224 = ($221|0)==(0);
      $225 = $224 & $223;
      $226 = $222 | $225;
      if ($226) {
       $227 = (___udivdi3(($220|0),($221|0),1000000000,0)|0);
       $228 = tempRet0;
       $229 = (___uremdi3(($220|0),($221|0),1000000000,0)|0);
       $230 = tempRet0;
       $$1335 = $227;$$sink421$off0 = $229;
      } else {
       $$1335 = 0;$$sink421$off0 = $220;
      }
      HEAP32[$216>>2] = $$sink421$off0;
      $231 = (($$2374) + 127)|0;
      $232 = $231 & 127;
      $233 = ($$5|0)!=($232|0);
      $234 = ($$5|0)==($$2352$ph449|0);
      $or$cond422 = $233 | $234;
      $or$cond422$not = $or$cond422 ^ 1;
      $235 = ($$sink421$off0|0)==(0);
      $or$cond423 = $235 & $or$cond422$not;
      $$3375 = $or$cond423 ? $$5 : $$2374;
      $236 = (($$5) + -1)|0;
      if ($234) {
       break;
      } else {
       $$0334 = $$1335;$$2374 = $$3375;$$5$in = $236;
      }
     }
     $237 = (($$0380) + -29)|0;
     $238 = ($$1335|0)==(0);
     if ($238) {
      $$0380 = $237;$$1373 = $$3375;
     } else {
      break;
     }
    }
    $239 = (($$2387$ph447) + 9)|0;
    $240 = (($$2352$ph449) + 127)|0;
    $241 = $240 & 127;
    $242 = ($241|0)==($$3375|0);
    $243 = (($$3375) + 127)|0;
    $244 = $243 & 127;
    $245 = (($$3375) + 126)|0;
    $246 = $245 & 127;
    $247 = (($6) + ($246<<2)|0);
    if ($242) {
     $248 = (($6) + ($244<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = HEAP32[$247>>2]|0;
     $251 = $250 | $249;
     HEAP32[$247>>2] = $251;
     $$4376 = $244;
    } else {
     $$4376 = $$3375;
    }
    $252 = (($6) + ($241<<2)|0);
    HEAP32[$252>>2] = $$1335;
    $$0380$ph = $237;$$1373$ph448 = $$4376;$$2352$ph449 = $241;$$2387$ph447 = $239;
   }
   L119: while(1) {
    $289 = (($$6378$ph) + 1)|0;
    $287 = $289 & 127;
    $290 = (($$6378$ph) + 127)|0;
    $291 = $290 & 127;
    $292 = (($6) + ($291<<2)|0);
    $$1381$ph558 = $$1381$ph;$$4354$ph559 = $$4354$ph;$$4389$ph = $$4389$ph445;
    while(1) {
     $265 = ($$4389$ph|0)==(18);
     $293 = ($$4389$ph|0)>(27);
     $$425 = $293 ? 9 : 1;
     $$1381 = $$1381$ph558;$$4354 = $$4354$ph559;
     while(1) {
      $$0336486 = 0;
      while(1) {
       $253 = (($$0336486) + ($$4354))|0;
       $254 = $253 & 127;
       $255 = ($254|0)==($$6378$ph|0);
       if ($255) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $256 = (($6) + ($254<<2)|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = (5968 + ($$0336486<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = ($257>>>0)<($259>>>0);
       if ($260) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $261 = ($257>>>0)>($259>>>0);
       if ($261) {
        break;
       }
       $262 = (($$0336486) + 1)|0;
       $263 = ($262|0)<(2);
       if ($263) {
        $$0336486 = $262;
       } else {
        $$1337 = $262;
        label = 88;
        break;
       }
      }
      if ((label|0) == 88) {
       label = 0;
       $264 = ($$1337|0)==(2);
       $or$cond11 = $265 & $264;
       if ($or$cond11) {
        $$0365484 = 0.0;$$4485 = 0;$$9483 = $$6378$ph;
        break L119;
       }
      }
      $266 = (($$425) + ($$1381))|0;
      $267 = ($$4354|0)==($$6378$ph|0);
      if ($267) {
       $$1381 = $266;$$4354 = $$6378$ph;
      } else {
       break;
      }
     }
     $268 = 1 << $$425;
     $269 = (($268) + -1)|0;
     $270 = 1000000000 >>> $$425;
     $$0332490 = 0;$$5355488 = $$4354;$$5390487 = $$4389$ph;$$6489 = $$4354;
     while(1) {
      $271 = (($6) + ($$6489<<2)|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = $272 & $269;
      $274 = $272 >>> $$425;
      $275 = (($274) + ($$0332490))|0;
      HEAP32[$271>>2] = $275;
      $276 = Math_imul($273, $270)|0;
      $277 = ($$6489|0)==($$5355488|0);
      $278 = ($275|0)==(0);
      $or$cond426 = $277 & $278;
      $279 = (($$5355488) + 1)|0;
      $280 = $279 & 127;
      $281 = (($$5390487) + -9)|0;
      $$$5390 = $or$cond426 ? $281 : $$5390487;
      $$$5355 = $or$cond426 ? $280 : $$5355488;
      $282 = (($$6489) + 1)|0;
      $283 = $282 & 127;
      $284 = ($283|0)==($$6378$ph|0);
      if ($284) {
       break;
      } else {
       $$0332490 = $276;$$5355488 = $$$5355;$$5390487 = $$$5390;$$6489 = $283;
      }
     }
     $285 = ($276|0)==(0);
     if ($285) {
      $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
      continue;
     }
     $286 = ($287|0)==($$$5355|0);
     if (!($286)) {
      break;
     }
     $294 = HEAP32[$292>>2]|0;
     $295 = $294 | 1;
     HEAP32[$292>>2] = $295;
     $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
    }
    $288 = (($6) + ($$6378$ph<<2)|0);
    HEAP32[$288>>2] = $276;
    $$1381$ph = $266;$$4354$ph = $$$5355;$$4389$ph445 = $$$5390;$$6378$ph = $287;
   }
   while(1) {
    $296 = (($$4485) + ($$4354))|0;
    $297 = $296 & 127;
    $298 = ($297|0)==($$9483|0);
    $299 = (($$9483) + 1)|0;
    $300 = $299 & 127;
    if ($298) {
     $301 = (($300) + -1)|0;
     $302 = (($6) + ($301<<2)|0);
     HEAP32[$302>>2] = 0;
     $$10 = $300;
    } else {
     $$10 = $$9483;
    }
    $303 = $$0365484 * 1.0E+9;
    $304 = (($6) + ($297<<2)|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = (+($305>>>0));
    $307 = $303 + $306;
    $308 = (($$4485) + 1)|0;
    $exitcond = ($308|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0365484 = $307;$$4485 = $308;$$9483 = $$10;
    }
   }
   $309 = (+($4|0));
   $310 = $309 * $307;
   $311 = (($$1381) + 53)|0;
   $312 = (($311) - ($3))|0;
   $313 = ($312|0)<($2|0);
   $314 = ($312|0)>(0);
   $$ = $314 ? $312 : 0;
   $$0333 = $313 ? $$ : $2;
   $315 = ($$0333|0)<(53);
   if ($315) {
    $316 = (105 - ($$0333))|0;
    $317 = (+_scalbn(1.0,$316));
    $318 = (+_copysignl($317,$310));
    $319 = (53 - ($$0333))|0;
    $320 = (+_scalbn(1.0,$319));
    $321 = (+_fmodl($310,$320));
    $322 = $310 - $321;
    $323 = $318 + $322;
    $$0360 = $318;$$0361 = $321;$$1366 = $323;
   } else {
    $$0360 = 0.0;$$0361 = 0.0;$$1366 = $310;
   }
   $324 = (($$4354) + 2)|0;
   $325 = $324 & 127;
   $326 = ($325|0)==($$10|0);
   if ($326) {
    $$3364 = $$0361;
   } else {
    $327 = (($6) + ($325<<2)|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = ($328>>>0)<(500000000);
    do {
     if ($329) {
      $330 = ($328|0)==(0);
      if ($330) {
       $331 = (($$4354) + 3)|0;
       $332 = $331 & 127;
       $333 = ($332|0)==($$10|0);
       if ($333) {
        $$1362 = $$0361;
        break;
       }
      }
      $334 = $309 * 0.25;
      $335 = $334 + $$0361;
      $$1362 = $335;
     } else {
      $336 = ($328|0)==(500000000);
      if (!($336)) {
       $337 = $309 * 0.75;
       $338 = $337 + $$0361;
       $$1362 = $338;
       break;
      }
      $339 = (($$4354) + 3)|0;
      $340 = $339 & 127;
      $341 = ($340|0)==($$10|0);
      if ($341) {
       $342 = $309 * 0.5;
       $343 = $342 + $$0361;
       $$1362 = $343;
       break;
      } else {
       $344 = $309 * 0.75;
       $345 = $344 + $$0361;
       $$1362 = $345;
       break;
      }
     }
    } while(0);
    $346 = (53 - ($$0333))|0;
    $347 = ($346|0)>(1);
    if ($347) {
     $348 = (+_fmodl($$1362,1.0));
     $349 = $348 != 0.0;
     if ($349) {
      $$3364 = $$1362;
     } else {
      $350 = $$1362 + 1.0;
      $$3364 = $350;
     }
    } else {
     $$3364 = $$1362;
    }
   }
   $351 = $$1366 + $$3364;
   $352 = $351 - $$0360;
   $353 = $311 & 2147483647;
   $354 = (-2 - ($sum))|0;
   $355 = ($353|0)>($354|0);
   do {
    if ($355) {
     $356 = (+Math_abs((+$352)));
     $357 = !($356 >= 9007199254740992.0);
     $358 = $352 * 0.5;
     $not$ = $357 ^ 1;
     $359 = $not$&1;
     $$3383 = (($359) + ($$1381))|0;
     $$2367 = $357 ? $352 : $358;
     $360 = (($$3383) + 50)|0;
     $361 = ($360|0)>($7|0);
     if (!($361)) {
      $362 = ($$0333|0)!=($312|0);
      $narrow = $362 | $357;
      $$2371$v = $313 & $narrow;
      $363 = $$3364 != 0.0;
      $or$cond14 = $363 & $$2371$v;
      if (!($or$cond14)) {
       $$3368 = $$2367;$$4384 = $$3383;
       break;
      }
     }
     $364 = (___errno_location()|0);
     HEAP32[$364>>2] = 34;
     $$3368 = $$2367;$$4384 = $$3383;
    } else {
     $$3368 = $352;$$4384 = $$1381;
    }
   } while(0);
   $365 = (+_scalbnl($$3368,$$4384));
   $$1 = $365;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04861 = 0, $$049 = 0, $$1$be = 0, $$160 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $$lcssa = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04861 = 0;$$160 = $$049;
  while(1) {
   $35 = ($$04861*10)|0;
   $36 = (($$160) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04861 = $37;$$160 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$56 = $37;$57 = $50;
   while(1) {
    $58 = (___muldi3(($56|0),($57|0),10,0)|0);
    $59 = tempRet0;
    $60 = ($$254|0)<(0);
    $61 = $60 << 31 >> 31;
    $62 = (_i64Add(($$254|0),($61|0),-48,-1)|0);
    $63 = tempRet0;
    $64 = (_i64Add(($62|0),($63|0),($58|0),($59|0))|0);
    $65 = tempRet0;
    $66 = HEAP32[$2>>2]|0;
    $67 = HEAP32[$4>>2]|0;
    $68 = ($66>>>0)<($67>>>0);
    if ($68) {
     $69 = ((($66)) + 1|0);
     HEAP32[$2>>2] = $69;
     $70 = HEAP8[$66>>0]|0;
     $71 = $70&255;
     $$2$be = $71;
    } else {
     $72 = (___shgetc($0)|0);
     $$2$be = $72;
    }
    $73 = (($$2$be) + -48)|0;
    $74 = ($73>>>0)<(10);
    $75 = ($65|0)<(21474836);
    $76 = ($64>>>0)<(2061584302);
    $77 = ($65|0)==(21474836);
    $78 = $77 & $76;
    $79 = $75 | $78;
    $80 = $74 & $79;
    if ($80) {
     $$254 = $$2$be;$56 = $64;$57 = $65;
    } else {
     $$2$lcssa = $$2$be;$94 = $64;$95 = $65;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  $55 = HEAP32[$4>>2]|0;
  if ($54) {
   $83 = $55;
   while(1) {
    $81 = HEAP32[$2>>2]|0;
    $82 = ($81>>>0)<($83>>>0);
    if ($82) {
     $84 = ((($81)) + 1|0);
     HEAP32[$2>>2] = $84;
     $85 = HEAP8[$81>>0]|0;
     $86 = $85&255;
     $$3$be = $86;$102 = $83;
    } else {
     $87 = (___shgetc($0)|0);
     $$pre = HEAP32[$4>>2]|0;
     $$3$be = $87;$102 = $$pre;
    }
    $88 = (($$3$be) + -48)|0;
    $89 = ($88>>>0)<(10);
    if ($89) {
     $83 = $102;
    } else {
     $$lcssa = $102;
     break;
    }
   }
  } else {
   $$lcssa = $55;
  }
  $90 = ($$lcssa|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_272($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $$ = $38 ? $39 : $0;
     return (+$$);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172$ph = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172$ph = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172$ph|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L23: do {
     if ($86) {
      $$27586 = $$174;$101 = $92;$156 = $97;$157 = $87;$158 = $88;$99 = $91;
      while(1) {
       if ($156) {
        $98 = ($99|0)==(0);
        $100 = ($101|0)==(0);
        $102 = $98 & $100;
        if ($102) {
         break;
        } else {
         $104 = $99;$105 = $101;
        }
       } else {
        $104 = $157;$105 = $158;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27586) + -1)|0;
       $109 = ($108|0)>($$172$ph|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27586 = $108;$101 = $111;$156 = $116;$157 = $106;$158 = $107;$99 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$118 = $110;$120 = $111;$159 = $106;$160 = $107;
        break L23;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$118 = $91;$120 = $92;$159 = $87;$160 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $117 = ($118|0)==(0);
     $119 = ($120|0)==(0);
     $121 = $117 & $119;
     if ($121) {
      $129 = $0 * 0.0;
      $$070 = $129;
      break;
     } else {
      $123 = $120;$125 = $118;
     }
    } else {
     $123 = $160;$125 = $159;
    }
    $122 = ($123>>>0)<(1048576);
    $124 = ($125>>>0)<(0);
    $126 = ($123|0)==(1048576);
    $127 = $126 & $124;
    $128 = $122 | $127;
    if ($128) {
     $$37683 = $$275$lcssa;$130 = $125;$131 = $123;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37683) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37683 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $125;$142 = $123;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_272($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $$ = $5 ? 340268 : $3;
 $6 = HEAP32[$$>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 17;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $$47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$$47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_439()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $not$ = ($20|0)==(0|0);
     $21 = HEAP8[$1>>0]|0;
     if ($not$) {
      $22 = $21 << 24 >> 24;
      $23 = $22 & 57343;
      HEAP32[$$47>>2] = $23;
      $$0 = 1;
      break;
     }
     $24 = $21&255;
     $25 = (($24) + -194)|0;
     $26 = ($25>>>0)>(50);
     if ($26) {
      label = 17;
      break;
     }
     $27 = ((($1)) + 1|0);
     $28 = (5104 + ($25<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($2) + -1)|0;
     $31 = ($30|0)==(0);
     if ($31) {
      $$2 = $29;
     } else {
      $$03952 = $27;$$04051 = $29;$$04350 = $30;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $32 = HEAP8[$$03952>>0]|0;
      $33 = $32&255;
      $34 = $33 >>> 3;
      $35 = (($34) + -16)|0;
      $36 = $$04051 >> 26;
      $37 = (($34) + ($36))|0;
      $38 = $35 | $37;
      $39 = ($38>>>0)>(7);
      if ($39) {
       label = 17;
       break L1;
      } else {
       $$1 = $$03952;$$141 = $$04051;$$144 = $$04350;$43 = $32;
      }
      while(1) {
       $40 = $$141 << 6;
       $41 = ((($$1)) + 1|0);
       $42 = $43&255;
       $44 = (($42) + -128)|0;
       $45 = $44 | $40;
       $46 = (($$144) + -1)|0;
       $47 = ($45|0)<(0);
       if (!($47)) {
        break;
       }
       $49 = ($46|0)==(0);
       if ($49) {
        $$2 = $45;
        break L14;
       }
       $50 = HEAP8[$41>>0]|0;
       $51 = $50 & -64;
       $52 = ($51<<24>>24)==(-128);
       if ($52) {
        $$1 = $41;$$141 = $45;$$144 = $46;$43 = $50;
       } else {
        label = 17;
        break L1;
       }
      }
      HEAP32[$$>>2] = 0;
      HEAP32[$$47>>2] = $45;
      $48 = (($2) - ($46))|0;
      $$0 = $48;
      break L1;
     }
    } while(0);
    HEAP32[$$>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  HEAP32[$$>>2] = 0;
  $53 = (___errno_location()|0);
  HEAP32[$53>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_439() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _ldexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $13 = $11;
  } else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $13 = $9;
 }
 $12 = ($13|0)==($4|0);
 if ($12) {
  $15 = $$;
 } else {
  $14 = (($13>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $7 = HEAP32[$$pre>>2]|0;
   $8 = ((($5)) + 112|0);
   HEAP32[$8>>2] = $7;
  }
  $9 = HEAP32[$$pre>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $12 = (___pthread_self_607()|0);
   $13 = ((($12)) + 232|0);
   $$sink = $13;
  } else {
   $11 = ((($9)) + 116|0);
   $$sink = $11;
  }
  HEAP32[$$sink>>2] = $5;
 }
 return;
}
function ___pthread_self_607() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(26042,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(26042,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $16 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $16 = $$pre;
   }
   $15 = ($16<<24>>24)==(97);
   if ($15) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 11;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 2;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 3;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 2;
   $38 = HEAP32[(340208)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    HEAP32[$40>>2] = -1;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((340272|0));
 return (340280|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((340272|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($15)) + 52|0);
   HEAP32[$17>>2] = $12;
  }
  $18 = HEAP32[$8>>2]|0;
  $19 = ($18|0)==($0|0);
  if ($19) {
   HEAP32[$8>>2] = $15;
  }
  ___ofl_unlock();
 }
 $20 = (_fflush($0)|0);
 $21 = ((($0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 15]($0)|0);
 $24 = $23 | $20;
 $25 = ((($0)) + 92|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _free($26);
 }
 if ($7) {
  $28 = ($29|0)==(0);
  if (!($28)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($24|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1452]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[1452]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 15]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 15]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$06266 = 0, $$063 = 0, $$064 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $17 = $6;
 } else {
  $17 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 $9 = ($7|0)!=(0);
 if ($8) {
  $10 = ((($2)) + 74|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (($12) + 255)|0;
  $14 = $13 | $12;
  $15 = $14&255;
  HEAP8[$10>>0] = $15;
  $16 = ($17|0)==(0);
  if (!($16)) {
   ___unlockfile($2);
  }
  if ($9) {
   $$0 = 0;
  } else {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  }
 } else {
  L11: do {
   if ($9) {
    $18 = ((($2)) + 4|0);
    $19 = ((($2)) + 8|0);
    $$063 = $7;$$064 = $0;
    while(1) {
     $20 = HEAP32[$18>>2]|0;
     $21 = HEAP32[$19>>2]|0;
     $22 = $20;
     $23 = (($21) - ($22))|0;
     $24 = (_memchr($20,10,$23)|0);
     $25 = ($24|0)==(0|0);
     $26 = $24;
     $27 = (1 - ($22))|0;
     $28 = (($27) + ($26))|0;
     $29 = $25 ? $23 : $28;
     $30 = ($29>>>0)<($$063>>>0);
     $31 = $30 ? $29 : $$063;
     _memcpy(($$064|0),($20|0),($31|0))|0;
     $32 = HEAP32[$18>>2]|0;
     $33 = (($32) + ($31)|0);
     HEAP32[$18>>2] = $33;
     $34 = (($$064) + ($31)|0);
     $35 = (($$063) - ($31))|0;
     $36 = ($35|0)!=(0);
     $or$cond = $25 & $36;
     if (!($or$cond)) {
      $$1 = $34;
      label = 17;
      break L11;
     }
     $37 = HEAP32[$19>>2]|0;
     $38 = ($33>>>0)<($37>>>0);
     if ($38) {
      $39 = ((($33)) + 1|0);
      HEAP32[$18>>2] = $39;
      $40 = HEAP8[$33>>0]|0;
      $41 = $40&255;
      $50 = $41;
     } else {
      $42 = (___uflow($2)|0);
      $43 = ($42|0)<(0);
      if ($43) {
       break;
      } else {
       $50 = $42;
      }
     }
     $48 = (($35) + -1)|0;
     $49 = $50&255;
     $51 = ((($34)) + 1|0);
     HEAP8[$34>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)!=(10);
     $53 = ($48|0)!=(0);
     $or$cond3 = $53 & $52;
     if ($or$cond3) {
      $$063 = $48;$$064 = $51;
     } else {
      $$1 = $51;
      label = 17;
      break L11;
     }
    }
    $44 = ($34|0)==($0|0);
    if ($44) {
     $$06266 = 0;
    } else {
     $45 = HEAP32[$2>>2]|0;
     $46 = $45 & 16;
     $47 = ($46|0)==(0);
     if ($47) {
      $$06266 = 0;
     } else {
      $$1 = $34;
      label = 17;
     }
    }
   } else {
    $$1 = $0;
    label = 17;
   }
  } while(0);
  if ((label|0) == 17) {
   $54 = ($0|0)==(0|0);
   if ($54) {
    $$06266 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$06266 = $0;
   }
  }
  $55 = ($17|0)==(0);
  if ($55) {
   $$0 = $$06266;
  } else {
   ___unlockfile($2);
   $$0 = $$06266;
  }
 }
 return ($$0|0);
}
function _feof($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 4;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   ___unlockfile($0);
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 4;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 12;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$$0305 = 0, $$$3 = 0, $$0266$lcssa = 0, $$0266417 = 0, $$0268 = 0, $$0272 = 0, $$0273429 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283428 = 0, $$0286420 = 0, $$0288$ = 0, $$0288425 = 0, $$0292 = 0, $$0293 = 0;
 var $$0305423 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$319 = 0;
 var $$320 = 0, $$321 = 0, $$322 = 0, $$327 = 0, $$328$le439 = 0, $$328$le441 = 0, $$3281 = 0, $$3291 = 0, $$3416 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0;
 var $$8313 = 0, $$9 = 0, $$9314 = 0, $$9314$ph = 0, $$lcssa355 = 0, $$not = 0, $$old4 = 0, $$ph = 0, $$ph353 = 0, $$pre = 0, $$pre$phi516Z2D = 0, $$pre507 = 0, $$pre509 = 0, $$pre511 = 0, $$pre512 = 0, $$pre513 = 0, $$pre514 = 0, $$pre515 = 0, $$sink443 = 0, $$sroa$2$0$$sroa_idx13 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor331 = 0, $isdigit = 0;
 var $isdigit316 = 0, $isdigit316415 = 0, $isdigittmp = 0, $isdigittmp315 = 0, $isdigittmp315414 = 0, $narrow = 0, $narrow469 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond318 = 0, $or$cond5 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 8|0;
 $4 = sp + 17|0;
 $5 = sp;
 $6 = sp + 16|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $306 = $10;
 } else {
  $306 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3291 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 100|0);
   $15 = ((($0)) + 108|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $19 = ((($4)) + 46|0);
   $20 = ((($4)) + 94|0);
   $21 = ((($4)) + 1|0);
   $22 = ((($4)) + 1|0);
   $$0273429 = $1;$$0283428 = 0;$$0288425 = 0;$$0305423 = 0;$102 = 0;$24 = $11;
   L6: while(1) {
    $23 = $24&255;
    $25 = (_isspace($23)|0);
    $26 = ($25|0)==(0);
    L8: do {
     if ($26) {
      $53 = ($24<<24>>24)==(37);
      L10: do {
       if ($53) {
        $54 = ((($$0273429)) + 1|0);
        $55 = HEAP8[$54>>0]|0;
        L12: do {
         switch ($55<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $76 = ((($$0273429)) + 2|0);
          $$0293 = 0;$$2275 = $76;
          break;
         }
         default: {
          $77 = $55&255;
          $isdigittmp = (($77) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $78 = ((($$0273429)) + 2|0);
           $79 = HEAP8[$78>>0]|0;
           $80 = ($79<<24>>24)==(36);
           if ($80) {
            $81 = (_arg_n($2,$isdigittmp)|0);
            $82 = ((($$0273429)) + 3|0);
            $$0293 = $81;$$2275 = $82;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $83 = $arglist_current;
          $84 = ((0) + 4|0);
          $expanded1 = $84;
          $expanded = (($expanded1) - 1)|0;
          $85 = (($83) + ($expanded))|0;
          $86 = ((0) + 4|0);
          $expanded5 = $86;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $87 = $85 & $expanded3;
          $88 = $87;
          $89 = HEAP32[$88>>2]|0;
          $arglist_next = ((($88)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0293 = $89;$$2275 = $54;
         }
         }
        } while(0);
        $90 = HEAP8[$$2275>>0]|0;
        $91 = $90&255;
        $isdigittmp315414 = (($91) + -48)|0;
        $isdigit316415 = ($isdigittmp315414>>>0)<(10);
        if ($isdigit316415) {
         $$0266417 = 0;$$3416 = $$2275;$95 = $91;
         while(1) {
          $92 = ($$0266417*10)|0;
          $93 = (($92) + -48)|0;
          $94 = (($93) + ($95))|0;
          $96 = ((($$3416)) + 1|0);
          $97 = HEAP8[$96>>0]|0;
          $98 = $97&255;
          $isdigittmp315 = (($98) + -48)|0;
          $isdigit316 = ($isdigittmp315>>>0)<(10);
          if ($isdigit316) {
           $$0266417 = $94;$$3416 = $96;$95 = $98;
          } else {
           $$0266$lcssa = $94;$$3$lcssa = $96;$$lcssa355 = $97;
           break;
          }
         }
        } else {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;$$lcssa355 = $90;
        }
        $99 = ($$lcssa355<<24>>24)==(109);
        $100 = ($$0293|0)!=(0|0);
        $101 = ((($$3$lcssa)) + 1|0);
        $$$0305 = $99 ? 0 : $$0305423;
        $$327 = $99 ? 0 : $102;
        $$$3 = $99 ? $101 : $$3$lcssa;
        $narrow = $100 & $99;
        $103 = ((($$$3)) + 1|0);
        $104 = HEAP8[$$$3>>0]|0;
        switch ($104<<24>>24) {
        case 104:  {
         $105 = HEAP8[$103>>0]|0;
         $106 = ($105<<24>>24)==(104);
         $107 = ((($$$3)) + 2|0);
         $$319 = $106 ? $107 : $103;
         $$320 = $106 ? -2 : -1;
         $$0268 = $$320;$$5 = $$319;
         break;
        }
        case 108:  {
         $108 = HEAP8[$103>>0]|0;
         $109 = ($108<<24>>24)==(108);
         $110 = ((($$$3)) + 2|0);
         $$321 = $109 ? $110 : $103;
         $$322 = $109 ? 3 : 1;
         $$0268 = $$322;$$5 = $$321;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $103;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $103;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $103;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$$3;
         break;
        }
        default: {
         $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
         label = 137;
         break L6;
        }
        }
        $111 = HEAP8[$$5>>0]|0;
        $112 = $111&255;
        $113 = $112 & 47;
        $114 = ($113|0)==(3);
        $115 = $112 | 32;
        $$ = $114 ? $115 : $112;
        $$$0268 = $114 ? 1 : $$0268;
        $trunc = $$&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $116 = ($$0266$lcssa|0)>(1);
         $$$0266 = $116 ? $$0266$lcssa : 1;
         $$1267 = $$$0266;$$1284 = $$0283428;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1284 = $$0283428;
         break;
        }
        case 110:  {
         $117 = ($$0283428|0)<(0);
         $118 = $117 << 31 >> 31;
         _store_int($$0293,$$$0268,$$0283428,$118);
         $$11 = $$5;$$1289 = $$0288425;$$2285 = $$0283428;$$6311 = $$$0305;$307 = $$327;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $119 = HEAP32[$13>>2]|0;
          $120 = HEAP32[$14>>2]|0;
          $121 = ($119>>>0)<($120>>>0);
          if ($121) {
           $122 = ((($119)) + 1|0);
           HEAP32[$13>>2] = $122;
           $123 = HEAP8[$119>>0]|0;
           $124 = $123&255;
           $126 = $124;
          } else {
           $125 = (___shgetc($0)|0);
           $126 = $125;
          }
          $127 = (_isspace($126)|0);
          $128 = ($127|0)==(0);
          if ($128) {
           break;
          }
         }
         $129 = HEAP32[$14>>2]|0;
         $130 = ($129|0)==(0|0);
         if ($130) {
          $$pre507 = HEAP32[$13>>2]|0;
          $138 = $$pre507;
         } else {
          $131 = HEAP32[$13>>2]|0;
          $132 = ((($131)) + -1|0);
          HEAP32[$13>>2] = $132;
          $133 = $132;
          $138 = $133;
         }
         $134 = HEAP32[$15>>2]|0;
         $135 = HEAP32[$16>>2]|0;
         $136 = (($134) + ($$0283428))|0;
         $137 = (($136) + ($138))|0;
         $139 = (($137) - ($135))|0;
         $$1267 = $$0266$lcssa;$$1284 = $139;
        }
        }
        ___shlim($0,$$1267);
        $140 = HEAP32[$13>>2]|0;
        $141 = HEAP32[$14>>2]|0;
        $142 = ($140>>>0)<($141>>>0);
        if ($142) {
         $143 = ((($140)) + 1|0);
         HEAP32[$13>>2] = $143;
         $147 = $141;
        } else {
         $144 = (___shgetc($0)|0);
         $145 = ($144|0)<(0);
         if ($145) {
          $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
          label = 137;
          break L6;
         }
         $$pre509 = HEAP32[$14>>2]|0;
         $147 = $$pre509;
        }
        $146 = ($147|0)==(0|0);
        if (!($146)) {
         $148 = HEAP32[$13>>2]|0;
         $149 = ((($148)) + -1|0);
         HEAP32[$13>>2] = $149;
        }
        L55: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $150 = ($$|0)==(99);
          $151 = $$ | 16;
          $152 = ($151|0)==(115);
          L57: do {
           if ($152) {
            $153 = ($$|0)==(115);
            _memset(($21|0),-1,256)|0;
            HEAP8[$4>>0] = 0;
            if ($153) {
             HEAP8[$18>>0] = 0;
             ;HEAP8[$17>>0]=0|0;HEAP8[$17+1>>0]=0|0;HEAP8[$17+2>>0]=0|0;HEAP8[$17+3>>0]=0|0;HEAP8[$17+4>>0]=0|0;
             $$9 = $$5;
            } else {
             $$9 = $$5;
            }
           } else {
            $154 = ((($$5)) + 1|0);
            $155 = HEAP8[$154>>0]|0;
            $156 = ($155<<24>>24)==(94);
            $157 = ((($$5)) + 2|0);
            $$0292 = $156&1;
            $$6 = $156 ? $157 : $154;
            $158 = $156&1;
            _memset(($22|0),($158|0),256)|0;
            HEAP8[$4>>0] = 0;
            $159 = HEAP8[$$6>>0]|0;
            switch ($159<<24>>24) {
            case 45:  {
             $$sink443 = $19;
             label = 64;
             break;
            }
            case 93:  {
             $$sink443 = $20;
             label = 64;
             break;
            }
            default: {
             $$pre514 = $$0292 ^ 1;
             $$pre515 = $$pre514&255;
             $$7$ph = $$6;$$pre$phi516Z2D = $$pre515;
            }
            }
            if ((label|0) == 64) {
             label = 0;
             $160 = ((($$6)) + 1|0);
             $161 = $$0292 ^ 1;
             $162 = $161&255;
             HEAP8[$$sink443>>0] = $162;
             $$7$ph = $160;$$pre$phi516Z2D = $162;
            }
            $$7 = $$7$ph;
            while(1) {
             $163 = HEAP8[$$7>>0]|0;
             L69: do {
              switch ($163<<24>>24) {
              case 0:  {
               $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
               label = 137;
               break L6;
               break;
              }
              case 93:  {
               $$9 = $$7;
               break L57;
               break;
              }
              case 45:  {
               $164 = ((($$7)) + 1|0);
               $165 = HEAP8[$164>>0]|0;
               switch ($165<<24>>24) {
               case 93: case 0:  {
                $$8 = $$7;$176 = 45;
                break L69;
                break;
               }
               default: {
               }
               }
               $166 = ((($$7)) + -1|0);
               $167 = HEAP8[$166>>0]|0;
               $168 = ($167&255)<($165&255);
               if ($168) {
                $169 = $167&255;
                $$0286420 = $169;
                while(1) {
                 $170 = (($$0286420) + 1)|0;
                 $171 = (($4) + ($170)|0);
                 HEAP8[$171>>0] = $$pre$phi516Z2D;
                 $172 = HEAP8[$164>>0]|0;
                 $173 = $172&255;
                 $174 = ($170|0)<($173|0);
                 if ($174) {
                  $$0286420 = $170;
                 } else {
                  $$8 = $164;$176 = $172;
                  break;
                 }
                }
               } else {
                $$8 = $164;$176 = $165;
               }
               break;
              }
              default: {
               $$8 = $$7;$176 = $163;
              }
              }
             } while(0);
             $175 = $176&255;
             $177 = (($175) + 1)|0;
             $178 = (($4) + ($177)|0);
             HEAP8[$178>>0] = $$pre$phi516Z2D;
             $179 = ((($$8)) + 1|0);
             $$7 = $179;
            }
           }
          } while(0);
          $180 = (($$1267) + 1)|0;
          $181 = $150 ? $180 : 31;
          $182 = ($$$0268|0)==(1);
          L77: do {
           if ($182) {
            if ($narrow) {
             $183 = $181 << 2;
             $184 = (_malloc($183)|0);
             $185 = ($184|0)==(0|0);
             if ($185) {
              $$7312 = 0;$309 = 0;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $311 = $184;
             }
            } else {
             $311 = $$0293;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph = $181;$$0278$ph = 0;$$ph = $311;
            L82: while(1) {
             $186 = ($$ph|0)==(0|0);
             $$0278$ph336 = $$0278$ph;
             while(1) {
              L86: while(1) {
               $187 = HEAP32[$13>>2]|0;
               $188 = HEAP32[$14>>2]|0;
               $189 = ($187>>>0)<($188>>>0);
               if ($189) {
                $190 = ((($187)) + 1|0);
                HEAP32[$13>>2] = $190;
                $191 = HEAP8[$187>>0]|0;
                $192 = $191&255;
                $195 = $192;
               } else {
                $193 = (___shgetc($0)|0);
                $195 = $193;
               }
               $194 = (($195) + 1)|0;
               $196 = (($4) + ($194)|0);
               $197 = HEAP8[$196>>0]|0;
               $198 = ($197<<24>>24)==(0);
               if ($198) {
                break L82;
               }
               $199 = $195&255;
               HEAP8[$6>>0] = $199;
               $200 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($200|0) {
               case -1:  {
                $$7312 = 0;$309 = $$ph;$narrow469 = $narrow;
                label = 137;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L86;
               }
               }
              }
              if ($186) {
               $$1279 = $$0278$ph336;
              } else {
               $201 = (($$ph) + ($$0278$ph336<<2)|0);
               $202 = (($$0278$ph336) + 1)|0;
               $203 = HEAP32[$5>>2]|0;
               HEAP32[$201>>2] = $203;
               $$1279 = $202;
              }
              $204 = ($$1279|0)==($$0276$ph|0);
              $or$cond = $narrow & $204;
              if ($or$cond) {
               break;
              } else {
               $$0278$ph336 = $$1279;
              }
             }
             $factor331 = $$0276$ph << 1;
             $205 = $factor331 | 1;
             $206 = $205 << 2;
             $207 = (_realloc($$ph,$206)|0);
             $208 = ($207|0)==(0|0);
             if ($208) {
              $$7312 = 0;$309 = $$ph;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $$0278$ph$phi = $$0276$ph;$$0276$ph = $205;$$ph = $207;$$0278$ph = $$0278$ph$phi;
             }
            }
            $209 = (_mbsinit($3)|0);
            $210 = ($209|0)==(0);
            if ($210) {
             $$7312 = 0;$309 = $$ph;$narrow469 = $narrow;
             label = 137;
             break L6;
            } else {
             $$4282 = $$0278$ph336;$$4309 = 0;$$5299 = $$ph;$312 = $$ph;
            }
           } else {
            if ($narrow) {
             $211 = (_malloc($181)|0);
             $212 = ($211|0)==(0|0);
             if ($212) {
              $$7312 = 0;$309 = 0;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $$1277$ph = $181;$$2280$ph = 0;$$2307$ph = $211;
             }
             while(1) {
              $$2280 = $$2280$ph;
              while(1) {
               $213 = HEAP32[$13>>2]|0;
               $214 = HEAP32[$14>>2]|0;
               $215 = ($213>>>0)<($214>>>0);
               if ($215) {
                $216 = ((($213)) + 1|0);
                HEAP32[$13>>2] = $216;
                $217 = HEAP8[$213>>0]|0;
                $218 = $217&255;
                $221 = $218;
               } else {
                $219 = (___shgetc($0)|0);
                $221 = $219;
               }
               $220 = (($221) + 1)|0;
               $222 = (($4) + ($220)|0);
               $223 = HEAP8[$222>>0]|0;
               $224 = ($223<<24>>24)==(0);
               if ($224) {
                $$4282 = $$2280;$$4309 = $$2307$ph;$$5299 = 0;$312 = 0;
                break L77;
               }
               $225 = $221&255;
               $226 = (($$2280) + 1)|0;
               $227 = (($$2307$ph) + ($$2280)|0);
               HEAP8[$227>>0] = $225;
               $228 = ($226|0)==($$1277$ph|0);
               if ($228) {
                break;
               } else {
                $$2280 = $226;
               }
              }
              $factor = $$1277$ph << 1;
              $229 = $factor | 1;
              $230 = (_realloc($$2307$ph,$229)|0);
              $231 = ($230|0)==(0|0);
              if ($231) {
               $$7312 = $$2307$ph;$309 = 0;$narrow469 = 1;
               label = 137;
               break L6;
              } else {
               $$2280$ph$phi = $$1277$ph;$$1277$ph = $229;$$2307$ph = $230;$$2280$ph = $$2280$ph$phi;
              }
             }
            }
            $232 = ($$0293|0)==(0|0);
            if ($232) {
             $250 = $147;
             while(1) {
              $248 = HEAP32[$13>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$13>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($0)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($4) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $$4282 = 0;$$4309 = 0;$$5299 = 0;$312 = 0;
               break L77;
              }
              $$pre512 = HEAP32[$14>>2]|0;
              $250 = $$pre512;
             }
            } else {
             $$3281 = 0;$235 = $147;
             while(1) {
              $233 = HEAP32[$13>>2]|0;
              $234 = ($233>>>0)<($235>>>0);
              if ($234) {
               $236 = ((($233)) + 1|0);
               HEAP32[$13>>2] = $236;
               $237 = HEAP8[$233>>0]|0;
               $238 = $237&255;
               $241 = $238;
              } else {
               $239 = (___shgetc($0)|0);
               $241 = $239;
              }
              $240 = (($241) + 1)|0;
              $242 = (($4) + ($240)|0);
              $243 = HEAP8[$242>>0]|0;
              $244 = ($243<<24>>24)==(0);
              if ($244) {
               $$4282 = $$3281;$$4309 = $$0293;$$5299 = 0;$312 = 0;
               break L77;
              }
              $245 = $241&255;
              $246 = (($$3281) + 1)|0;
              $247 = (($$0293) + ($$3281)|0);
              HEAP8[$247>>0] = $245;
              $$pre511 = HEAP32[$14>>2]|0;
              $$3281 = $246;$235 = $$pre511;
             }
            }
           }
          } while(0);
          $260 = HEAP32[$14>>2]|0;
          $261 = ($260|0)==(0|0);
          if ($261) {
           $$pre513 = HEAP32[$13>>2]|0;
           $268 = $$pre513;
          } else {
           $262 = HEAP32[$13>>2]|0;
           $263 = ((($262)) + -1|0);
           HEAP32[$13>>2] = $263;
           $264 = $263;
           $268 = $264;
          }
          $265 = HEAP32[$15>>2]|0;
          $266 = HEAP32[$16>>2]|0;
          $267 = (($268) - ($266))|0;
          $269 = (($267) + ($265))|0;
          $270 = ($269|0)==(0);
          if ($270) {
           $$9314$ph = $$4309;$$ph353 = $312;
           label = 139;
           break L6;
          }
          $$not = $150 ^ 1;
          $271 = ($269|0)==($$1267|0);
          $or$cond318 = $271 | $$not;
          if (!($or$cond318)) {
           $$9314$ph = $$4309;$$ph353 = $312;
           label = 139;
           break L6;
          }
          do {
           if ($narrow) {
            if ($182) {
             HEAP32[$$0293>>2] = $$5299;
             break;
            } else {
             HEAP32[$$0293>>2] = $$4309;
             break;
            }
           }
          } while(0);
          if ($150) {
           $$10 = $$9;$$5310 = $$4309;$310 = $312;
          } else {
           $272 = ($$5299|0)==(0|0);
           if (!($272)) {
            $273 = (($$5299) + ($$4282<<2)|0);
            HEAP32[$273>>2] = 0;
           }
           $274 = ($$4309|0)==(0|0);
           if ($274) {
            $$10 = $$9;$$5310 = 0;$310 = $312;
            break L55;
           }
           $275 = (($$4309) + ($$4282)|0);
           HEAP8[$275>>0] = 0;
           $$10 = $$9;$$5310 = $$4309;$310 = $312;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 125;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 125;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 125;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 125;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $285 = (+___floatscan($0,$$$0268,0));
          $286 = HEAP32[$15>>2]|0;
          $287 = HEAP32[$13>>2]|0;
          $288 = HEAP32[$16>>2]|0;
          $289 = (($288) - ($287))|0;
          $290 = ($286|0)==($289|0);
          if ($290) {
           $$9314$ph = $$$0305;$$ph353 = $$327;
           label = 139;
           break L6;
          }
          $291 = ($$0293|0)==(0|0);
          if ($291) {
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
          } else {
           switch ($$$0268|0) {
           case 0:  {
            $292 = $285;
            HEAPF32[$$0293>>2] = $292;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           case 1:  {
            HEAPF64[$$0293>>3] = $285;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           case 2:  {
            HEAPF64[$$0293>>3] = $285;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
           }
           }
          }
          break;
         }
         default: {
          $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
         }
         }
        } while(0);
        do {
         if ((label|0) == 125) {
          label = 0;
          $276 = (___intscan($0,$$0272,0,-1,-1)|0);
          $277 = tempRet0;
          $278 = HEAP32[$15>>2]|0;
          $279 = HEAP32[$13>>2]|0;
          $280 = HEAP32[$16>>2]|0;
          $281 = (($280) - ($279))|0;
          $282 = ($278|0)==($281|0);
          if ($282) {
           $$9314$ph = $$$0305;$$ph353 = $$327;
           label = 139;
           break L6;
          }
          $283 = ($$|0)==(112);
          $or$cond3 = $100 & $283;
          if ($or$cond3) {
           $284 = $276;
           HEAP32[$$0293>>2] = $284;
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
           break;
          } else {
           _store_int($$0293,$$$0268,$276,$277);
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
           break;
          }
         }
        } while(0);
        $293 = HEAP32[$15>>2]|0;
        $294 = HEAP32[$13>>2]|0;
        $295 = HEAP32[$16>>2]|0;
        $296 = (($293) + ($$1284))|0;
        $297 = (($296) + ($294))|0;
        $298 = (($297) - ($295))|0;
        $299 = $100&1;
        $$0288$ = (($299) + ($$0288425))|0;
        $$11 = $$10;$$1289 = $$0288$;$$2285 = $298;$$6311 = $$5310;$307 = $310;
        break L8;
       }
      } while(0);
      $56 = $53&1;
      $57 = (($$0273429) + ($56)|0);
      ___shlim($0,0);
      $58 = HEAP32[$13>>2]|0;
      $59 = HEAP32[$14>>2]|0;
      $60 = ($58>>>0)<($59>>>0);
      if ($60) {
       $61 = ((($58)) + 1|0);
       HEAP32[$13>>2] = $61;
       $62 = HEAP8[$58>>0]|0;
       $63 = $62&255;
       $68 = $63;
      } else {
       $64 = (___shgetc($0)|0);
       $68 = $64;
      }
      $65 = HEAP8[$57>>0]|0;
      $66 = $65&255;
      $67 = ($68|0)==($66|0);
      if (!($67)) {
       label = 22;
       break L6;
      }
      $75 = (($$0283428) + 1)|0;
      $$11 = $57;$$1289 = $$0288425;$$2285 = $75;$$6311 = $$0305423;$307 = $102;
     } else {
      $$1274 = $$0273429;
      while(1) {
       $27 = ((($$1274)) + 1|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = $28&255;
       $30 = (_isspace($29)|0);
       $31 = ($30|0)==(0);
       if ($31) {
        break;
       } else {
        $$1274 = $27;
       }
      }
      ___shlim($0,0);
      while(1) {
       $32 = HEAP32[$13>>2]|0;
       $33 = HEAP32[$14>>2]|0;
       $34 = ($32>>>0)<($33>>>0);
       if ($34) {
        $35 = ((($32)) + 1|0);
        HEAP32[$13>>2] = $35;
        $36 = HEAP8[$32>>0]|0;
        $37 = $36&255;
        $39 = $37;
       } else {
        $38 = (___shgetc($0)|0);
        $39 = $38;
       }
       $40 = (_isspace($39)|0);
       $41 = ($40|0)==(0);
       if ($41) {
        break;
       }
      }
      $42 = HEAP32[$14>>2]|0;
      $43 = ($42|0)==(0|0);
      if ($43) {
       $$pre = HEAP32[$13>>2]|0;
       $51 = $$pre;
      } else {
       $44 = HEAP32[$13>>2]|0;
       $45 = ((($44)) + -1|0);
       HEAP32[$13>>2] = $45;
       $46 = $45;
       $51 = $46;
      }
      $47 = HEAP32[$15>>2]|0;
      $48 = HEAP32[$16>>2]|0;
      $49 = (($47) + ($$0283428))|0;
      $50 = (($49) + ($51))|0;
      $52 = (($50) - ($48))|0;
      $$11 = $$1274;$$1289 = $$0288425;$$2285 = $52;$$6311 = $$0305423;$307 = $102;
     }
    } while(0);
    $300 = ((($$11)) + 1|0);
    $301 = HEAP8[$300>>0]|0;
    $302 = ($301<<24>>24)==(0);
    if ($302) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273429 = $300;$$0283428 = $$2285;$$0288425 = $$1289;$$0305423 = $$6311;$102 = $307;$24 = $301;
    }
   }
   if ((label|0) == 22) {
    $69 = HEAP32[$14>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = HEAP32[$13>>2]|0;
     $72 = ((($71)) + -1|0);
     HEAP32[$13>>2] = $72;
    }
    $73 = ($68|0)>(-1);
    $74 = ($$0288425|0)!=(0);
    $or$cond5 = $74 | $73;
    if ($or$cond5) {
     $$3291 = $$0288425;
     break;
    } else {
     $$1271 = 0;$$8313 = $$0305423;$308 = $102;
     label = 138;
    }
   }
   else if ((label|0) == 137) {
    $$328$le441 = $narrow469&1;
    $$old4 = ($$0288425|0)==(0);
    if ($$old4) {
     $$1271 = $$328$le441;$$8313 = $$7312;$308 = $309;
     label = 138;
    } else {
     $$2 = $$328$le441;$$2290 = $$0288425;$$9314 = $$7312;$304 = $309;
    }
   }
   else if ((label|0) == 139) {
    $$328$le439 = $narrow&1;
    $$2 = $$328$le439;$$2290 = $$0288425;$$9314 = $$9314$ph;$304 = $$ph353;
   }
   if ((label|0) == 138) {
    $$2 = $$1271;$$2290 = -1;$$9314 = $$8313;$304 = $308;
   }
   $303 = ($$2|0)==(0);
   if ($303) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($304);
    $$3291 = $$2290;
   }
  }
 } while(0);
 $305 = ($306|0)==(0);
 if (!($305)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3291|0);
}
function _arg_n($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $$027$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $$027$ = $11 ? $$027 : $2;
 _memcpy(($1|0),($4|0),($$027$|0))|0;
 $12 = (($4) + ($$027$)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($$027$|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 15]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 15]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $$0 = $0;
  } else {
   $4 = $2 << 24 >> 24;
   $5 = (_strchr($0,$4)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0 = 0;
   } else {
    $7 = ((($1)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $$0 = $5;
    } else {
     $10 = ((($5)) + 1|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$0 = 0;
     } else {
      $13 = ((($1)) + 2|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)==(0);
      if ($15) {
       $16 = (_twobyte_strstr($5,$1)|0);
       $$0 = $16;
       break;
      }
      $17 = ((($5)) + 2|0);
      $18 = HEAP8[$17>>0]|0;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       $$0 = 0;
      } else {
       $20 = ((($1)) + 3|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = ($21<<24>>24)==(0);
       if ($22) {
        $23 = (_threebyte_strstr($5,$1)|0);
        $$0 = $23;
        break;
       }
       $24 = ((($5)) + 3|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(0);
       if ($26) {
        $$0 = 0;
       } else {
        $27 = ((($1)) + 4|0);
        $28 = HEAP8[$27>>0]|0;
        $29 = ($28<<24>>24)==(0);
        if ($29) {
         $30 = (_fourbyte_strstr($5,$1)|0);
         $$0 = $30;
         break;
        } else {
         $31 = (_twoway_strstr($5,$1)|0);
         $$0 = $31;
         break;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _twobyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $$sink = 0, $$sink$in = 0, $$sink$masked = 0, $$sink17$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 8;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $4 | $7;
 $9 = HEAP8[$0>>0]|0;
 $10 = $9&255;
 $$sink$in = $10;$$sink17$sink = $0;
 while(1) {
  $11 = ((($$sink17$sink)) + 1|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   $$lcssa = 0;
   break;
  }
  $$sink = $$sink$in << 8;
  $14 = $12&255;
  $$sink$masked = $$sink & 65280;
  $15 = $14 | $$sink$masked;
  $16 = ($15|0)==($8|0);
  if ($16) {
   $$lcssa = $$sink17$sink;
   break;
  } else {
   $$sink$in = $15;$$sink17$sink = $11;
  }
 }
 return ($$lcssa|0);
}
function _threebyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016$lcssa = 0, $$01619 = 0, $$020 = 0, $$lcssa = 0, $$not = 0, $$not17 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($1)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = HEAP8[$0>>0]|0;
 $16 = $15&255;
 $17 = $16 << 24;
 $18 = ((($0)) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 16;
 $22 = $21 | $17;
 $23 = ((($0)) + 2|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 8;
 $27 = $22 | $26;
 $28 = ($24<<24>>24)!=(0);
 $$not17 = $28 ^ 1;
 $29 = ($27|0)==($14|0);
 $or$cond18 = $29 | $$not17;
 if ($or$cond18) {
  $$016$lcssa = $23;$$lcssa = $28;
 } else {
  $$01619 = $23;$$020 = $27;
  while(1) {
   $30 = ((($$01619)) + 1|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $32 | $$020;
   $34 = $33 << 8;
   $35 = ($31<<24>>24)!=(0);
   $$not = $35 ^ 1;
   $36 = ($34|0)==($14|0);
   $or$cond = $36 | $$not;
   if ($or$cond) {
    $$016$lcssa = $30;$$lcssa = $35;
    break;
   } else {
    $$01619 = $30;$$020 = $34;
   }
  }
 }
 $37 = ((($$016$lcssa)) + -2|0);
 $38 = $$lcssa ? $37 : 0;
 return ($38|0);
}
function _fourbyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $$not = 0, $$not22 = 0, $$sink21$lcssa = 0, $$sink2124 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($1)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = ((($1)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 | $17;
 $19 = HEAP8[$0>>0]|0;
 $20 = $19&255;
 $21 = $20 << 24;
 $22 = ((($0)) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 16;
 $26 = $25 | $21;
 $27 = ((($0)) + 2|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 8;
 $31 = $26 | $30;
 $32 = ((($0)) + 3|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 | $31;
 $36 = ($33<<24>>24)!=(0);
 $$not22 = $36 ^ 1;
 $37 = ($35|0)==($18|0);
 $or$cond23 = $37 | $$not22;
 if ($or$cond23) {
  $$lcssa = $36;$$sink21$lcssa = $32;
 } else {
  $$sink2124 = $32;$39 = $35;
  while(1) {
   $38 = $39 << 8;
   $40 = ((($$sink2124)) + 1|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = $42 | $38;
   $44 = ($41<<24>>24)!=(0);
   $$not = $44 ^ 1;
   $45 = ($43|0)==($18|0);
   $or$cond = $45 | $$not;
   if ($or$cond) {
    $$lcssa = $44;$$sink21$lcssa = $40;
    break;
   } else {
    $$sink2124 = $40;$39 = $43;
   }
  }
 }
 $46 = ((($$sink21$lcssa)) + -3|0);
 $47 = $$lcssa ? $46 : 0;
 return ($47|0);
}
function _twoway_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa220 = 0, $$0175$ph$ph$lcssa220323 = 0, $$0175$ph$ph256 = 0, $$0179244 = 0, $$0183$ph200$ph255 = 0, $$0183$ph200250 = 0, $$0183$ph262 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa322 = 0, $$0185$ph261 = 0, $$0187$lcssa320321 = 0, $$0187266 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa211 = 0, $$1176$ph$ph235 = 0;
 var $$1180224 = 0, $$1184$ph196$ph234 = 0, $$1184$ph196229 = 0, $$1184$ph241 = 0, $$1186$$0185 = 0, $$1186$$0185$ = 0, $$1186$ph$lcssa = 0, $$1186$ph240 = 0, $$2181 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182223 = 0, $$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond191 = 0, $cond191222 = 0, $cond265 = 0, $div = 0, $div188 = 0, $or$cond = 0, $or$cond190 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $2 = sp + 1024|0;
 $3 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $4 = HEAP8[$1>>0]|0;
 $cond265 = ($4<<24>>24)==(0);
 L1: do {
  if ($cond265) {
   $$0175$ph$ph$lcssa220323 = 1;$$0185$ph$lcssa322 = -1;$$0187$lcssa320321 = 0;$$1176$ph$ph$lcssa211 = 1;$$1186$ph$lcssa = -1;
   label = 27;
  } else {
   $5 = $4&255;
   $$0187266 = 0;$12 = $4;$20 = $5;
   while(1) {
    $8 = (($0) + ($$0187266)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $$3 = 0;
     break L1;
    }
    $11 = $12 & 31;
    $13 = $11&255;
    $14 = 1 << $13;
    $div188 = ($12&255) >>> 5;
    $15 = $div188&255;
    $16 = (($2) + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 | $14;
    HEAP32[$16>>2] = $18;
    $7 = (($$0187266) + 1)|0;
    $19 = (($3) + ($20<<2)|0);
    HEAP32[$19>>2] = $7;
    $21 = (($1) + ($7)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $cond = ($22<<24>>24)==(0);
    if ($cond) {
     break;
    } else {
     $$0187266 = $7;$12 = $22;$20 = $23;
    }
   }
   $6 = ($7>>>0)>(1);
   if ($6) {
    $$0183$ph262 = 0;$$0185$ph261 = -1;$129 = 1;
    L7: while(1) {
     $$0175$ph$ph256 = 1;$$0183$ph200$ph255 = $$0183$ph262;$132 = $129;
     while(1) {
      $$0183$ph200250 = $$0183$ph200$ph255;$131 = $132;
      L11: while(1) {
       $$0179244 = 1;$31 = $131;
       while(1) {
        $27 = (($$0179244) + ($$0185$ph261))|0;
        $28 = (($1) + ($27)|0);
        $29 = HEAP8[$28>>0]|0;
        $30 = (($1) + ($31)|0);
        $32 = HEAP8[$30>>0]|0;
        $33 = ($29<<24>>24)==($32<<24>>24);
        if (!($33)) {
         break L11;
        }
        $34 = ($$0179244|0)==($$0175$ph$ph256|0);
        $25 = (($$0179244) + 1)|0;
        if ($34) {
         break;
        }
        $24 = (($25) + ($$0183$ph200250))|0;
        $26 = ($24>>>0)<($7>>>0);
        if ($26) {
         $$0179244 = $25;$31 = $24;
        } else {
         $$0175$ph$ph$lcssa220 = $$0175$ph$ph256;$$0185$ph$lcssa = $$0185$ph261;
         break L7;
        }
       }
       $35 = (($$0175$ph$ph256) + ($$0183$ph200250))|0;
       $36 = (($35) + 1)|0;
       $37 = ($36>>>0)<($7>>>0);
       if ($37) {
        $$0183$ph200250 = $35;$131 = $36;
       } else {
        $$0175$ph$ph$lcssa220 = $$0175$ph$ph256;$$0185$ph$lcssa = $$0185$ph261;
        break L7;
       }
      }
      $38 = ($29&255)>($32&255);
      $39 = (($31) - ($$0185$ph261))|0;
      if (!($38)) {
       break;
      }
      $43 = (($31) + 1)|0;
      $44 = ($43>>>0)<($7>>>0);
      if ($44) {
       $$0175$ph$ph256 = $39;$$0183$ph200$ph255 = $31;$132 = $43;
      } else {
       $$0175$ph$ph$lcssa220 = $39;$$0185$ph$lcssa = $$0185$ph261;
       break L7;
      }
     }
     $40 = (($$0183$ph200250) + 1)|0;
     $41 = (($$0183$ph200250) + 2)|0;
     $42 = ($41>>>0)<($7>>>0);
     if ($42) {
      $$0183$ph262 = $40;$$0185$ph261 = $$0183$ph200250;$129 = $41;
     } else {
      $$0175$ph$ph$lcssa220 = 1;$$0185$ph$lcssa = $$0183$ph200250;
      break;
     }
    }
    if ($6) {
     $$1184$ph241 = 0;$$1186$ph240 = -1;$130 = 1;
     while(1) {
      $$1176$ph$ph235 = 1;$$1184$ph196$ph234 = $$1184$ph241;$134 = $130;
      while(1) {
       $$1184$ph196229 = $$1184$ph196$ph234;$133 = $134;
       L26: while(1) {
        $$1180224 = 1;$52 = $133;
        while(1) {
         $48 = (($$1180224) + ($$1186$ph240))|0;
         $49 = (($1) + ($48)|0);
         $50 = HEAP8[$49>>0]|0;
         $51 = (($1) + ($52)|0);
         $53 = HEAP8[$51>>0]|0;
         $54 = ($50<<24>>24)==($53<<24>>24);
         if (!($54)) {
          break L26;
         }
         $55 = ($$1180224|0)==($$1176$ph$ph235|0);
         $46 = (($$1180224) + 1)|0;
         if ($55) {
          break;
         }
         $45 = (($46) + ($$1184$ph196229))|0;
         $47 = ($45>>>0)<($7>>>0);
         if ($47) {
          $$1180224 = $46;$52 = $45;
         } else {
          $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $7;$$1176$ph$ph$lcssa211 = $$1176$ph$ph235;$$1186$ph$lcssa = $$1186$ph240;
          label = 27;
          break L1;
         }
        }
        $56 = (($$1176$ph$ph235) + ($$1184$ph196229))|0;
        $57 = (($56) + 1)|0;
        $58 = ($57>>>0)<($7>>>0);
        if ($58) {
         $$1184$ph196229 = $56;$133 = $57;
        } else {
         $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $7;$$1176$ph$ph$lcssa211 = $$1176$ph$ph235;$$1186$ph$lcssa = $$1186$ph240;
         label = 27;
         break L1;
        }
       }
       $59 = ($50&255)<($53&255);
       $60 = (($52) - ($$1186$ph240))|0;
       if (!($59)) {
        break;
       }
       $64 = (($52) + 1)|0;
       $65 = ($64>>>0)<($7>>>0);
       if ($65) {
        $$1176$ph$ph235 = $60;$$1184$ph196$ph234 = $52;$134 = $64;
       } else {
        $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $7;$$1176$ph$ph$lcssa211 = $60;$$1186$ph$lcssa = $$1186$ph240;
        label = 27;
        break L1;
       }
      }
      $61 = (($$1184$ph196229) + 1)|0;
      $62 = (($$1184$ph196229) + 2)|0;
      $63 = ($62>>>0)<($7>>>0);
      if ($63) {
       $$1184$ph241 = $61;$$1186$ph240 = $$1184$ph196229;$130 = $62;
      } else {
       $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $7;$$1176$ph$ph$lcssa211 = 1;$$1186$ph$lcssa = $$1184$ph196229;
       label = 27;
       break;
      }
     }
    } else {
     $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $7;$$1176$ph$ph$lcssa211 = 1;$$1186$ph$lcssa = -1;
     label = 27;
    }
   } else {
    $$0175$ph$ph$lcssa220323 = 1;$$0185$ph$lcssa322 = -1;$$0187$lcssa320321 = $7;$$1176$ph$ph$lcssa211 = 1;$$1186$ph$lcssa = -1;
    label = 27;
   }
  }
 } while(0);
 L36: do {
  if ((label|0) == 27) {
   $66 = (($$1186$ph$lcssa) + 1)|0;
   $67 = (($$0185$ph$lcssa322) + 1)|0;
   $68 = ($66>>>0)>($67>>>0);
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa211 : $$0175$ph$ph$lcssa220323;
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa322;
   $69 = (($1) + ($$1176$$0175)|0);
   $70 = (($$1186$$0185) + 1)|0;
   $71 = (_memcmp($1,$69,$70)|0);
   $72 = ($71|0)==(0);
   if ($72) {
    $77 = (($$0187$lcssa320321) - ($$1176$$0175))|0;
    $$0168 = $77;$$3178 = $$1176$$0175;
   } else {
    $73 = (($$0187$lcssa320321) - ($$1186$$0185))|0;
    $74 = (($73) + -1)|0;
    $75 = ($$1186$$0185>>>0)>($74>>>0);
    $$1186$$0185$ = $75 ? $$1186$$0185 : $74;
    $76 = (($$1186$$0185$) + 1)|0;
    $$0168 = 0;$$3178 = $76;
   }
   $78 = $$0187$lcssa320321 | 63;
   $79 = (($$0187$lcssa320321) + -1)|0;
   $80 = ($$0168|0)!=(0);
   $81 = (($$0187$lcssa320321) - ($$3178))|0;
   $$0166 = $0;$$0169 = 0;$$0170 = $0;
   while(1) {
    $82 = $$0170;
    $83 = $$0166;
    $84 = (($82) - ($83))|0;
    $85 = ($84>>>0)<($$0187$lcssa320321>>>0);
    do {
     if ($85) {
      $86 = (_memchr($$0170,0,$78)|0);
      $87 = ($86|0)==(0|0);
      if ($87) {
       $91 = (($$0170) + ($78)|0);
       $$3173 = $91;
       break;
      } else {
       $88 = $86;
       $89 = (($88) - ($83))|0;
       $90 = ($89>>>0)<($$0187$lcssa320321>>>0);
       if ($90) {
        $$3 = 0;
        break L36;
       } else {
        $$3173 = $86;
        break;
       }
      }
     } else {
      $$3173 = $$0170;
     }
    } while(0);
    $92 = (($$0166) + ($79)|0);
    $93 = HEAP8[$92>>0]|0;
    $div = ($93&255) >>> 5;
    $94 = $div&255;
    $95 = (($2) + ($94<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $93 & 31;
    $98 = $97&255;
    $99 = 1 << $98;
    $100 = $99 & $96;
    $101 = ($100|0)==(0);
    L50: do {
     if ($101) {
      $$0169$be = 0;$$2181$sink = $$0187$lcssa320321;
     } else {
      $102 = $93&255;
      $103 = (($3) + ($102<<2)|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = (($$0187$lcssa320321) - ($104))|0;
      $106 = ($105|0)==(0);
      if (!($106)) {
       $107 = ($$0169|0)!=(0);
       $or$cond = $80 & $107;
       $108 = ($105>>>0)<($$3178>>>0);
       $or$cond190 = $or$cond & $108;
       $$2181 = $or$cond190 ? $81 : $105;
       $$0169$be = 0;$$2181$sink = $$2181;
       break;
      }
      $110 = ($70>>>0)>($$0169>>>0);
      $111 = $110 ? $70 : $$0169;
      $112 = (($1) + ($111)|0);
      $113 = HEAP8[$112>>0]|0;
      $cond191222 = ($113<<24>>24)==(0);
      L55: do {
       if ($cond191222) {
        $$4 = $70;
       } else {
        $$3182223 = $111;$117 = $113;
        while(1) {
         $114 = (($$0166) + ($$3182223)|0);
         $115 = HEAP8[$114>>0]|0;
         $116 = ($117<<24>>24)==($115<<24>>24);
         if (!($116)) {
          break;
         }
         $118 = (($$3182223) + 1)|0;
         $119 = (($1) + ($118)|0);
         $120 = HEAP8[$119>>0]|0;
         $cond191 = ($120<<24>>24)==(0);
         if ($cond191) {
          $$4 = $70;
          break L55;
         } else {
          $$3182223 = $118;$117 = $120;
         }
        }
        $121 = (($$3182223) - ($$1186$$0185))|0;
        $$0169$be = 0;$$2181$sink = $121;
        break L50;
       }
      } while(0);
      while(1) {
       $122 = ($$4>>>0)>($$0169>>>0);
       if (!($122)) {
        $$3 = $$0166;
        break L36;
       }
       $123 = (($$4) + -1)|0;
       $124 = (($1) + ($123)|0);
       $125 = HEAP8[$124>>0]|0;
       $126 = (($$0166) + ($123)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = ($125<<24>>24)==($127<<24>>24);
       if ($128) {
        $$4 = $123;
       } else {
        $$0169$be = $$0168;$$2181$sink = $$3178;
        break;
       }
      }
     }
    } while(0);
    $109 = (($$0166) + ($$2181$sink)|0);
    $$0166 = $109;$$0169 = $$0169$be;$$0170 = $$3173;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $$09 = $2;
 while(1) {
  $4 = (($$09) + -1)|0;
  $5 = ($$09|0)==(0);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = (($0) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==($3<<24>>24);
  if ($8) {
   $$0 = $6;
   break;
  } else {
   $$09 = $4;
  }
 }
 return ($$0|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0;
 var $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   L3: do {
    if ($or$cond63) {
     $$03866 = $2;$$03965 = $1;$$04164 = $0;
     while(1) {
      $11 = HEAP8[$$03965>>0]|0;
      HEAP8[$$04164>>0] = $11;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$038$lcssa79 = $$03866;$$039$lcssa78 = $$03965;$$041$lcssa77 = $$04164;
       break L3;
      }
      $13 = (($$03866) + -1)|0;
      $14 = ((($$03965)) + 1|0);
      $15 = ((($$04164)) + 1|0);
      $16 = $14;
      $17 = $16 & 3;
      $18 = ($17|0)!=(0);
      $19 = ($13|0)!=(0);
      $or$cond = $19 & $18;
      if ($or$cond) {
       $$03866 = $13;$$03965 = $14;$$04164 = $15;
      } else {
       $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
       label = 5;
       break;
      }
     }
    } else {
     $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$038$lcssa79 = $$038$lcssa;$$039$lcssa78 = $$039$lcssa;$$041$lcssa77 = $$041$lcssa;
    } else {
     $$243 = $$041$lcssa;$$3 = 0;
     break;
    }
   }
   $20 = HEAP8[$$039$lcssa78>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $$243 = $$041$lcssa77;$$3 = $$038$lcssa79;
   } else {
    $22 = ($$038$lcssa79>>>0)>(3);
    L11: do {
     if ($22) {
      $$03753 = $$041$lcssa77;$$054 = $$039$lcssa78;$$152 = $$038$lcssa79;
      while(1) {
       $23 = HEAP32[$$054>>2]|0;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
        break L11;
       }
       HEAP32[$$03753>>2] = $23;
       $29 = (($$152) + -4)|0;
       $30 = ((($$054)) + 4|0);
       $31 = ((($$03753)) + 4|0);
       $32 = ($29>>>0)>(3);
       if ($32) {
        $$03753 = $31;$$054 = $30;$$152 = $29;
       } else {
        $$0$lcssa = $30;$$037$lcssa = $31;$$1$lcssa = $29;
        break;
       }
      }
     } else {
      $$0$lcssa = $$039$lcssa78;$$037$lcssa = $$041$lcssa77;$$1$lcssa = $$038$lcssa79;
     }
    } while(0);
    $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $33 = ($$2$ph|0)==(0);
   if ($33) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $34 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $34;
     $35 = ($34<<24>>24)==(0);
     if ($35) {
      $$243 = $$14245;$$3 = $$247;
      break L16;
     }
     $36 = (($$247) + -1)|0;
     $37 = ((($$14046)) + 1|0);
     $38 = ((($$14245)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $$243 = $38;$$3 = 0;
      break;
     } else {
      $$14046 = $37;$$14245 = $38;$$247 = $36;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function _strspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01925 = 0, $$020 = 0, $$1$lcssa = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $div21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $$020 = $0;
    while(1) {
     $8 = HEAP8[$$020>>0]|0;
     $9 = ($8<<24>>24)==($3<<24>>24);
     $10 = ((($$020)) + 1|0);
     if ($9) {
      $$020 = $10;
     } else {
      break;
     }
    }
    $11 = $$020;
    $12 = $0;
    $13 = (($11) - ($12))|0;
    $$0 = $13;
    break;
   } else {
    $$01925 = $1;$17 = $3;
   }
   while(1) {
    $16 = $17 & 31;
    $18 = $16&255;
    $19 = 1 << $18;
    $div21 = ($17&255) >>> 5;
    $20 = $div21&255;
    $21 = (($2) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 | $19;
    HEAP32[$21>>2] = $23;
    $24 = ((($$01925)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)==(0);
    if ($26) {
     break;
    } else {
     $$01925 = $24;$17 = $25;
    }
   }
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(0);
   L10: do {
    if ($15) {
     $$1$lcssa = $0;
    } else {
     $$123 = $0;$27 = $14;
     while(1) {
      $div = ($27&255) >>> 5;
      $28 = $div&255;
      $29 = (($2) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $27 & 31;
      $32 = $31&255;
      $33 = 1 << $32;
      $34 = $30 & $33;
      $35 = ($34|0)==(0);
      if ($35) {
       $$1$lcssa = $$123;
       break L10;
      }
      $36 = ((($$123)) + 1|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(0);
      if ($38) {
       $$1$lcssa = $36;
       break;
      } else {
       $$123 = $36;$27 = $37;
      }
     }
    }
   } while(0);
   $39 = $$1$lcssa;
   $40 = $0;
   $41 = (($39) - ($40))|0;
   $$0 = $41;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _srand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -1)|0;
 $2 = 26344;
 $3 = $2;
 HEAP32[$3>>2] = $1;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 26344;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 26344;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function _fgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   ___unlockfile($0);
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($0);
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 15]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19;
 $21 = (($17) - ($20))|0;
 $22 = ($21|0)>(0);
 $23 = ($21>>>0)<($4>>>0);
 $$57 = $23 ? $21 : $4;
 if ($22) {
  $24 = (($4) - ($$57))|0;
  $25 = (($0) + ($$57)|0);
  _memcpy(($0|0),($19|0),($$57|0))|0;
  $26 = (($19) + ($$57)|0);
  HEAP32[$18>>2] = $26;
  $$054$ph = $24;$$056$ph = $25;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $27 = ($$054$ph|0)==(0);
 L7: do {
  if ($27) {
   label = 13;
  } else {
   $28 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $29 = (___toread($3)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     break;
    }
    $31 = HEAP32[$28>>2]|0;
    $32 = (FUNCTION_TABLE_iiii[$31 & 15]($3,$$05659,$$05460)|0);
    $33 = (($32) + 1)|0;
    $34 = ($33>>>0)<(2);
    if ($34) {
     break;
    }
    $39 = (($$05460) - ($32))|0;
    $40 = (($$05659) + ($32)|0);
    $41 = ($39|0)==(0);
    if ($41) {
     label = 13;
     break L7;
    } else {
     $$05460 = $39;$$05659 = $40;
    }
   }
   $35 = ($36|0)==(0);
   if (!($35)) {
    ___unlockfile($3);
   }
   $37 = (($4) - ($$05460))|0;
   $38 = (($37>>>0) / ($1>>>0))&-1;
   $$0 = $38;
  }
 } while(0);
 if ((label|0) == 13) {
  $42 = ($36|0)==(0);
  if ($42) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function _rewind($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  (___fseeko_unlocked($0,0,0)|0);
  $5 = HEAP32[$0>>2]|0;
  $6 = $5 & -33;
  HEAP32[$0>>2] = $6;
  if (!($phitmp)) {
   ___unlockfile($0);
  }
 } else {
  (___fseeko_unlocked($0,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 & -33;
  HEAP32[$0>>2] = $8;
 }
 return;
}
function _vprintf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[1420]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 return ($3|0);
}
function _strcspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0;
 var $div20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if ($4) {
   label = 3;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 3;
   } else {
    ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
    $$01824 = $1;$13 = $3;
    while(1) {
     $12 = $13 & 31;
     $14 = $12&255;
     $15 = 1 << $14;
     $div20 = ($13&255) >>> 5;
     $16 = $div20&255;
     $17 = (($2) + ($16<<2)|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $18 | $15;
     HEAP32[$17>>2] = $19;
     $20 = ((($$01824)) + 1|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      break;
     } else {
      $$01824 = $20;$13 = $21;
     }
    }
    $10 = HEAP8[$0>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$019$sink = $0;
    } else {
     $$01922 = $0;$23 = $10;
     while(1) {
      $div = ($23&255) >>> 5;
      $24 = $div&255;
      $25 = (($2) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $23 & 31;
      $28 = $27&255;
      $29 = 1 << $28;
      $30 = $26 & $29;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $$019$sink = $$01922;
       break L1;
      }
      $32 = ((($$01922)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$019$sink = $32;
       break;
      } else {
       $$01922 = $32;$23 = $33;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $8 = $3 << 24 >> 24;
  $9 = (___strchrnul($0,$8)|0);
  $$019$sink = $9;
 }
 $35 = $$019$sink;
 $36 = $0;
 $37 = (($35) - ($36))|0;
 STACKTOP = sp;return ($37|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _strncat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01013 = 0, $$01112 = 0, $$014 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strlen($0)|0);
 $4 = (($0) + ($3)|0);
 $5 = ($2|0)==(0);
 L1: do {
  if ($5) {
   $$0$lcssa = $4;
  } else {
   $$01013 = $2;$$01112 = $1;$$014 = $4;
   while(1) {
    $6 = HEAP8[$$01112>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0$lcssa = $$014;
     break L1;
    }
    $8 = (($$01013) + -1)|0;
    $9 = ((($$01112)) + 1|0);
    $10 = ((($$014)) + 1|0);
    HEAP8[$$014>>0] = $6;
    $11 = ($8|0)==(0);
    if ($11) {
     $$0$lcssa = $10;
     break;
    } else {
     $$01013 = $8;$$01112 = $9;$$014 = $10;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa>>0] = 0;
 return ($0|0);
}
function _strtok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$010 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = HEAP32[85071]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $$010 = $3;
   label = 3;
  }
 } else {
  $$010 = $0;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $5 = (_strspn($$010,$1)|0);
   $6 = (($$010) + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    HEAP32[85071] = 0;
    $$0 = 0;
    break;
   }
   $9 = (_strcspn($6,$1)|0);
   $10 = (($6) + ($9)|0);
   HEAP32[85071] = $10;
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    HEAP32[85071] = 0;
    $$0 = $6;
    break;
   } else {
    $13 = ((($10)) + 1|0);
    HEAP32[85071] = $13;
    HEAP8[$10>>0] = 0;
    $$0 = $6;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function runPostSets() {
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _roundf(f) {
    f = +f;
    return f >= +0 ? +Math_floor(f + +0.5) : +Math_ceil(f - +0.5); // TODO: use fround?
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}

  
function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vd(index,a1) {
  index = index|0;
  a1=+a1;
  FUNCTION_TABLE_vd[index&3](+a1);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&3](a1|0,+a2);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&15](a1|0)|0;
}


function dynCall_viddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viddd[index&3](a1|0,+a2,+a3,+a4);
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&7](a1|0,+a2,+a3);
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function dynCall_vidddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  FUNCTION_TABLE_vidddd[index&3](a1|0,+a2,+a3,+a4,+a5);
}


function dynCall_vdi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  FUNCTION_TABLE_vdi[index&1](+a1,a2|0);
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&7](a1|0,a2|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&3]()|0;
}


function dynCall_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6;
  FUNCTION_TABLE_vdddddd[index&1](+a1,+a2,+a3,+a4,+a5,+a6);
}


function dynCall_vdddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_vdddd[index&3](+a1,+a2,+a3,+a4);
}


function dynCall_vdd(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=+a2;
  FUNCTION_TABLE_vdd[index&3](+a1,+a2);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&7]();
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&1](a1|0,a2|0,+a3);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(0);
}
function _emscripten_glUniform4i__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glUniform4i(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glFramebufferTexture2D__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glFramebufferTexture2D(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glShaderBinary__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glShaderBinary(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glDrawElementsInstanced__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glDrawElementsInstanced(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function b1(p0) {
 p0 = +p0; nullFunc_vd(1);
}
function _emscripten_glClearDepth__wrapper(p0) {
 p0 = +p0; _emscripten_glClearDepth(+p0);
}
function _emscripten_glClearDepthf__wrapper(p0) {
 p0 = +p0; _emscripten_glClearDepthf(+p0);
}
function _emscripten_glLineWidth__wrapper(p0) {
 p0 = +p0; _emscripten_glLineWidth(+p0);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(2);
}
function _emscripten_glUniform1f__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; _emscripten_glUniform1f(p0|0,+p1);
}
function _emscripten_glVertexAttrib1f__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; _emscripten_glVertexAttrib1f(p0|0,+p1);
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function _emscripten_glDeleteShader__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteShader(p0|0);
}
function _emscripten_glCompileShader__wrapper(p0) {
 p0 = p0|0; _emscripten_glCompileShader(p0|0);
}
function _emscripten_glDeleteProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteProgram(p0|0);
}
function _emscripten_glLinkProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glLinkProgram(p0|0);
}
function _emscripten_glUseProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glUseProgram(p0|0);
}
function _emscripten_glValidateProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glValidateProgram(p0|0);
}
function _emscripten_glDeleteObjectARB__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteObjectARB(p0|0);
}
function _emscripten_glEnableClientState__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnableClientState(p0|0);
}
function _emscripten_glClientActiveTexture__wrapper(p0) {
 p0 = p0|0; _emscripten_glClientActiveTexture(p0|0);
}
function _emscripten_glBindVertexArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glBindVertexArray(p0|0);
}
function _emscripten_glMatrixMode__wrapper(p0) {
 p0 = p0|0; _emscripten_glMatrixMode(p0|0);
}
function _emscripten_glLoadMatrixf__wrapper(p0) {
 p0 = p0|0; _emscripten_glLoadMatrixf(p0|0);
}
function _emscripten_glEnableVertexAttribArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnableVertexAttribArray(p0|0);
}
function _emscripten_glDisableVertexAttribArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glDisableVertexAttribArray(p0|0);
}
function _emscripten_glDepthFunc__wrapper(p0) {
 p0 = p0|0; _emscripten_glDepthFunc(p0|0);
}
function _emscripten_glEnable__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnable(p0|0);
}
function _emscripten_glDisable__wrapper(p0) {
 p0 = p0|0; _emscripten_glDisable(p0|0);
}
function _emscripten_glFrontFace__wrapper(p0) {
 p0 = p0|0; _emscripten_glFrontFace(p0|0);
}
function _emscripten_glCullFace__wrapper(p0) {
 p0 = p0|0; _emscripten_glCullFace(p0|0);
}
function _emscripten_glClear__wrapper(p0) {
 p0 = p0|0; _emscripten_glClear(p0|0);
}
function _emscripten_glClearStencil__wrapper(p0) {
 p0 = p0|0; _emscripten_glClearStencil(p0|0);
}
function _emscripten_glDepthMask__wrapper(p0) {
 p0 = p0|0; _emscripten_glDepthMask(p0|0);
}
function _emscripten_glStencilMask__wrapper(p0) {
 p0 = p0|0; _emscripten_glStencilMask(p0|0);
}
function _emscripten_glGenerateMipmap__wrapper(p0) {
 p0 = p0|0; _emscripten_glGenerateMipmap(p0|0);
}
function _emscripten_glActiveTexture__wrapper(p0) {
 p0 = p0|0; _emscripten_glActiveTexture(p0|0);
}
function _emscripten_glBlendEquation__wrapper(p0) {
 p0 = p0|0; _emscripten_glBlendEquation(p0|0);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function _emscripten_glPixelStorei__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glPixelStorei(p0|0,p1|0);
}
function _emscripten_glGetIntegerv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetIntegerv(p0|0,p1|0);
}
function _emscripten_glGetFloatv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetFloatv(p0|0,p1|0);
}
function _emscripten_glGetBooleanv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetBooleanv(p0|0,p1|0);
}
function _emscripten_glGenTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenTextures(p0|0,p1|0);
}
function _emscripten_glDeleteTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteTextures(p0|0,p1|0);
}
function _emscripten_glBindTexture__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindTexture(p0|0,p1|0);
}
function _emscripten_glGenBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenBuffers(p0|0,p1|0);
}
function _emscripten_glDeleteBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteBuffers(p0|0,p1|0);
}
function _emscripten_glGenRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenRenderbuffers(p0|0,p1|0);
}
function _emscripten_glDeleteRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteRenderbuffers(p0|0,p1|0);
}
function _emscripten_glBindRenderbuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindRenderbuffer(p0|0,p1|0);
}
function _emscripten_glUniform1i__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glUniform1i(p0|0,p1|0);
}
function _emscripten_glBindBuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindBuffer(p0|0,p1|0);
}
function _emscripten_glVertexAttrib1fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib1fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib2fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib2fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib3fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib3fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib4fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib4fv(p0|0,p1|0);
}
function _emscripten_glAttachShader__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glAttachShader(p0|0,p1|0);
}
function _emscripten_glDetachShader__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDetachShader(p0|0,p1|0);
}
function _emscripten_glBindFramebuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindFramebuffer(p0|0,p1|0);
}
function _emscripten_glGenFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenFramebuffers(p0|0,p1|0);
}
function _emscripten_glDeleteFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteFramebuffers(p0|0,p1|0);
}
function _emscripten_glBindProgramARB__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindProgramARB(p0|0,p1|0);
}
function _emscripten_glGetPointerv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetPointerv(p0|0,p1|0);
}
function _emscripten_glGenVertexArrays__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenVertexArrays(p0|0,p1|0);
}
function _emscripten_glDeleteVertexArrays__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteVertexArrays(p0|0,p1|0);
}
function _emscripten_glVertexAttribDivisor__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttribDivisor(p0|0,p1|0);
}
function _emscripten_glBlendFunc__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBlendFunc(p0|0,p1|0);
}
function _emscripten_glBlendEquationSeparate__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBlendEquationSeparate(p0|0,p1|0);
}
function _emscripten_glStencilMaskSeparate__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glStencilMaskSeparate(p0|0,p1|0);
}
function _emscripten_glHint__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glHint(p0|0,p1|0);
}
function _emscripten_glDrawBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDrawBuffers(p0|0,p1|0);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function _emscripten_glGetString__wrapper(p0) {
 p0 = p0|0; return _emscripten_glGetString(p0|0)|0;
}
function _emscripten_glIsTexture__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsTexture(p0|0)|0;
}
function _emscripten_glIsBuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsBuffer(p0|0)|0;
}
function _emscripten_glIsRenderbuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsRenderbuffer(p0|0)|0;
}
function _emscripten_glCreateShader__wrapper(p0) {
 p0 = p0|0; return _emscripten_glCreateShader(p0|0)|0;
}
function _emscripten_glIsShader__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsShader(p0|0)|0;
}
function _emscripten_glIsProgram__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsProgram(p0|0)|0;
}
function _emscripten_glIsFramebuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsFramebuffer(p0|0)|0;
}
function _emscripten_glCheckFramebufferStatus__wrapper(p0) {
 p0 = p0|0; return _emscripten_glCheckFramebufferStatus(p0|0)|0;
}
function _emscripten_glIsEnabled__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsEnabled(p0|0)|0;
}
function b6(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_viddd(6);
}
function _emscripten_glUniform3f__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glUniform3f(p0|0,+p1,+p2,+p3);
}
function _emscripten_glVertexAttrib3f__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glVertexAttrib3f(p0|0,+p1,+p2,+p3);
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(7);
}
function _emscripten_glUniform2f__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glUniform2f(p0|0,+p1,+p2);
}
function _emscripten_glVertexAttrib2f__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glVertexAttrib2f(p0|0,+p1,+p2);
}
function b8(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(9);
}
function _emscripten_glCompressedTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCompressedTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function _emscripten_glCopyTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function _emscripten_glCopyTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function _emscripten_glDrawRangeElements__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glDrawRangeElements(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function _emscripten_glVertexAttribPointer__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glVertexAttribPointer(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function b11(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(11);
}
function _emscripten_glGetTexParameterfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameterfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetTexParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameterfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameterfv(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetBufferParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetBufferParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetRenderbufferParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetRenderbufferParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetUniformfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetUniformiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribPointerv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribPointerv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2i__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2i(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform1iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform3iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform4iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform1fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform3fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform4fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4fv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetShaderiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetShaderiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetProgramiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetProgramiv(p0|0,p1|0,p2|0);
}
function _emscripten_glBindAttribLocation__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glBindAttribLocation(p0|0,p1|0,p2|0);
}
function _emscripten_glGetObjectParameterivARB__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetObjectParameterivARB(p0|0,p1|0,p2|0);
}
function _emscripten_glNormalPointer__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glNormalPointer(p0|0,p1|0,p2|0);
}
function _emscripten_glDrawArrays__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glDrawArrays(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameteri__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteri(p0|0,p1|0,p2|0);
}
function _emscripten_glStencilFunc__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilFunc(p0|0,p1|0,p2|0);
}
function _emscripten_glStencilOp__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilOp(p0|0,p1|0,p2|0);
}
function b12(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_vidddd(12);
}
function _emscripten_glUniform4f__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glUniform4f(p0|0,+p1,+p2,+p3,+p4);
}
function _emscripten_glVertexAttrib4f__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glVertexAttrib4f(p0|0,+p1,+p2,+p3,+p4);
}
function b13(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_vdi(13);
}
function _emscripten_glSampleCoverage__wrapper(p0,p1) {
 p0 = +p0;p1 = p1|0; _emscripten_glSampleCoverage(+p0,p1|0);
}
function b14(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(14);
}
function _emscripten_glReadPixels__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glReadPixels(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function _emscripten_glGetActiveUniform__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveUniform(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function _emscripten_glGetActiveAttrib__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveAttrib(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function b15(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(15);
}
function _emscripten_glCompressedTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glCompressedTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function _emscripten_glTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function _emscripten_glTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function b16(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(16);return 0;
}
function _emscripten_glGetUniformLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _emscripten_glGetUniformLocation(p0|0,p1|0)|0;
}
function _emscripten_glGetAttribLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _emscripten_glGetAttribLocation(p0|0,p1|0)|0;
}
function b17() {
 ; nullFunc_i(17);return 0;
}
function _emscripten_glCreateProgram__wrapper() {
 ; return _emscripten_glCreateProgram()|0;
}
function _emscripten_glGetError__wrapper() {
 ; return _emscripten_glGetError()|0;
}
function b18(p0,p1,p2,p3,p4,p5) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_vdddddd(18);
}
function _emscripten_glFrustum__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; _emscripten_glFrustum(+p0,+p1,+p2,+p3,+p4,+p5);
}
function b19(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_vdddd(19);
}
function _emscripten_glRotatef__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glRotatef(+p0,+p1,+p2,+p3);
}
function _emscripten_glClearColor__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glClearColor(+p0,+p1,+p2,+p3);
}
function _emscripten_glBlendColor__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glBlendColor(+p0,+p1,+p2,+p3);
}
function b20(p0,p1) {
 p0 = +p0;p1 = +p1; nullFunc_vdd(20);
}
function _emscripten_glDepthRange__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glDepthRange(+p0,+p1);
}
function _emscripten_glDepthRangef__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glDepthRangef(+p0,+p1);
}
function _emscripten_glPolygonOffset__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glPolygonOffset(+p0,+p1);
}
function b21() {
 ; nullFunc_v(21);
}
function _emscripten_glLoadIdentity__wrapper() {
 ; _emscripten_glLoadIdentity();
}
function _emscripten_glReleaseShaderCompiler__wrapper() {
 ; _emscripten_glReleaseShaderCompiler();
}
function _emscripten_glFinish__wrapper() {
 ; _emscripten_glFinish();
}
function _emscripten_glFlush__wrapper() {
 ; _emscripten_glFlush();
}
function b22(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(22);
}
function _emscripten_glTexParameterf__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; _emscripten_glTexParameterf(p0|0,p1|0,+p2);
}
function b23(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(23);
}
function _emscripten_glBufferData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferData(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glBufferSubData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferSubData(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniform3i__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniform3i(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix2fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix2fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix3fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix3fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix4fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix4fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetAttachedShaders__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetAttachedShaders(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glShaderSource(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderSource(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderPrecisionFormat__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderPrecisionFormat(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetProgramInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetProgramInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glFramebufferRenderbuffer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glFramebufferRenderbuffer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetFramebufferAttachmentParameteriv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetFramebufferAttachmentParameteriv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetInfoLogARB__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetInfoLogARB(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glVertexPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glVertexPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glTexCoordPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glTexCoordPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glColorPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glDrawElements__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawElements(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glDrawArraysInstanced__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawArraysInstanced(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glViewport__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glViewport(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glScissor__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glScissor(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glColorMask__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorMask(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glRenderbufferStorage__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glRenderbufferStorage(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glBlendFuncSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBlendFuncSeparate(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glStencilFuncSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilFuncSeparate(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glStencilOpSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilOpSeparate(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_viiiii = [b0,_KeyCallback,_emscripten_glUniform4i__wrapper,_emscripten_glFramebufferTexture2D__wrapper,_emscripten_glShaderBinary__wrapper,_emscripten_glDrawElementsInstanced__wrapper,b0,b0];
var FUNCTION_TABLE_vd = [b1,_emscripten_glClearDepth__wrapper,_emscripten_glClearDepthf__wrapper,_emscripten_glLineWidth__wrapper];
var FUNCTION_TABLE_vid = [b2,_emscripten_glUniform1f__wrapper,_emscripten_glVertexAttrib1f__wrapper,b2];
var FUNCTION_TABLE_vi = [b3,_emscripten_glDeleteShader__wrapper,_emscripten_glCompileShader__wrapper,_emscripten_glDeleteProgram__wrapper,_emscripten_glLinkProgram__wrapper,_emscripten_glUseProgram__wrapper,_emscripten_glValidateProgram__wrapper,_emscripten_glDeleteObjectARB__wrapper,_emscripten_glEnableClientState__wrapper,_emscripten_glClientActiveTexture__wrapper,_emscripten_glBindVertexArray__wrapper,_emscripten_glMatrixMode__wrapper,_emscripten_glLoadMatrixf__wrapper,_emscripten_glEnableVertexAttribArray__wrapper,_emscripten_glDisableVertexAttribArray__wrapper,_emscripten_glDepthFunc__wrapper,_emscripten_glEnable__wrapper,_emscripten_glDisable__wrapper,_emscripten_glFrontFace__wrapper,_emscripten_glCullFace__wrapper,_emscripten_glClear__wrapper,_emscripten_glClearStencil__wrapper,_emscripten_glDepthMask__wrapper,_emscripten_glStencilMask__wrapper,_emscripten_glGenerateMipmap__wrapper,_emscripten_glActiveTexture__wrapper,_emscripten_glBlendEquation__wrapper,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,_stbi__stdio_skip,_ErrorCallback,_CursorEnterCallback,_CharCallback,_WindowIconifyCallback,_emscripten_glPixelStorei__wrapper,_emscripten_glGetIntegerv__wrapper,_emscripten_glGetFloatv__wrapper,_emscripten_glGetBooleanv__wrapper,_emscripten_glGenTextures__wrapper,_emscripten_glDeleteTextures__wrapper,_emscripten_glBindTexture__wrapper,_emscripten_glGenBuffers__wrapper,_emscripten_glDeleteBuffers__wrapper,_emscripten_glGenRenderbuffers__wrapper,_emscripten_glDeleteRenderbuffers__wrapper,_emscripten_glBindRenderbuffer__wrapper,_emscripten_glUniform1i__wrapper,_emscripten_glBindBuffer__wrapper,_emscripten_glVertexAttrib1fv__wrapper,_emscripten_glVertexAttrib2fv__wrapper,_emscripten_glVertexAttrib3fv__wrapper,_emscripten_glVertexAttrib4fv__wrapper,_emscripten_glAttachShader__wrapper,_emscripten_glDetachShader__wrapper,_emscripten_glBindFramebuffer__wrapper,_emscripten_glGenFramebuffers__wrapper,_emscripten_glDeleteFramebuffers__wrapper,_emscripten_glBindProgramARB__wrapper,_emscripten_glGetPointerv__wrapper,_emscripten_glGenVertexArrays__wrapper,_emscripten_glDeleteVertexArrays__wrapper,_emscripten_glVertexAttribDivisor__wrapper,_emscripten_glBlendFunc__wrapper,_emscripten_glBlendEquationSeparate__wrapper,_emscripten_glStencilMaskSeparate__wrapper,_emscripten_glHint__wrapper,_emscripten_glDrawBuffers__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,_stbi__stdio_eof,___stdio_close,_emscripten_glGetString__wrapper,_emscripten_glIsTexture__wrapper,_emscripten_glIsBuffer__wrapper,_emscripten_glIsRenderbuffer__wrapper,_emscripten_glCreateShader__wrapper,_emscripten_glIsShader__wrapper,_emscripten_glIsProgram__wrapper,_emscripten_glIsFramebuffer__wrapper,_emscripten_glCheckFramebufferStatus__wrapper,_emscripten_glIsEnabled__wrapper,b5,b5,b5];
var FUNCTION_TABLE_viddd = [b6,_emscripten_glUniform3f__wrapper,_emscripten_glVertexAttrib3f__wrapper,b6];
var FUNCTION_TABLE_vidd = [b7,_MouseCursorPosCallback,_ScrollCallback,_emscripten_glUniform2f__wrapper,_emscripten_glVertexAttrib2f__wrapper,b7,b7,b7];
var FUNCTION_TABLE_iiii = [b8,_stbi__stdio_read,___stdio_write,___stdio_seek,___stdout_write,_sn_write,_EmscriptenFullscreenChangeCallback,_EmscriptenKeyboardCallback,_EmscriptenMouseCallback,_EmscriptenTouchCallback,_EmscriptenGamepadCallback,___stdio_read,_do_read,b8,b8,b8];
var FUNCTION_TABLE_viiiiiiii = [b9,_emscripten_glCompressedTexImage2D__wrapper,_emscripten_glCopyTexImage2D__wrapper,_emscripten_glCopyTexSubImage2D__wrapper];
var FUNCTION_TABLE_viiiiii = [b10,_emscripten_glDrawRangeElements__wrapper,_emscripten_glVertexAttribPointer__wrapper,b10];
var FUNCTION_TABLE_viii = [b11,_WindowSizeCallback,_emscripten_glGetTexParameterfv__wrapper,_emscripten_glGetTexParameteriv__wrapper,_emscripten_glTexParameterfv__wrapper,_emscripten_glTexParameteriv__wrapper,_emscripten_glGetBufferParameteriv__wrapper,_emscripten_glGetRenderbufferParameteriv__wrapper,_emscripten_glGetUniformfv__wrapper,_emscripten_glGetUniformiv__wrapper,_emscripten_glGetVertexAttribfv__wrapper,_emscripten_glGetVertexAttribiv__wrapper,_emscripten_glGetVertexAttribPointerv__wrapper,_emscripten_glUniform2i__wrapper,_emscripten_glUniform1iv__wrapper,_emscripten_glUniform2iv__wrapper,_emscripten_glUniform3iv__wrapper,_emscripten_glUniform4iv__wrapper,_emscripten_glUniform1fv__wrapper,_emscripten_glUniform2fv__wrapper,_emscripten_glUniform3fv__wrapper,_emscripten_glUniform4fv__wrapper,_emscripten_glGetShaderiv__wrapper,_emscripten_glGetProgramiv__wrapper,_emscripten_glBindAttribLocation__wrapper,_emscripten_glGetObjectParameterivARB__wrapper,_emscripten_glNormalPointer__wrapper,_emscripten_glDrawArrays__wrapper,_emscripten_glTexParameteri__wrapper,_emscripten_glStencilFunc__wrapper,_emscripten_glStencilOp__wrapper,b11];
var FUNCTION_TABLE_vidddd = [b12,_emscripten_glUniform4f__wrapper,_emscripten_glVertexAttrib4f__wrapper,b12];
var FUNCTION_TABLE_vdi = [b13,_emscripten_glSampleCoverage__wrapper];
var FUNCTION_TABLE_viiiiiii = [b14,_emscripten_glReadPixels__wrapper,_emscripten_glGetActiveUniform__wrapper,_emscripten_glGetActiveAttrib__wrapper];
var FUNCTION_TABLE_viiiiiiiii = [b15,_emscripten_glCompressedTexSubImage2D__wrapper,_emscripten_glTexImage2D__wrapper,_emscripten_glTexSubImage2D__wrapper];
var FUNCTION_TABLE_iii = [b16,_point_compare,_uint32_compare,_emscripten_glGetUniformLocation__wrapper,_emscripten_glGetAttribLocation__wrapper,b16,b16,b16];
var FUNCTION_TABLE_i = [b17,_emscripten_glCreateProgram__wrapper,_emscripten_glGetError__wrapper,b17];
var FUNCTION_TABLE_vdddddd = [b18,_emscripten_glFrustum__wrapper];
var FUNCTION_TABLE_vdddd = [b19,_emscripten_glRotatef__wrapper,_emscripten_glClearColor__wrapper,_emscripten_glBlendColor__wrapper];
var FUNCTION_TABLE_vdd = [b20,_emscripten_glDepthRange__wrapper,_emscripten_glDepthRangef__wrapper,_emscripten_glPolygonOffset__wrapper];
var FUNCTION_TABLE_v = [b21,_UpdateDrawFrame,_emscripten_glLoadIdentity__wrapper,_emscripten_glReleaseShaderCompiler__wrapper,_emscripten_glFinish__wrapper,_emscripten_glFlush__wrapper,b21,b21];
var FUNCTION_TABLE_viid = [b22,_emscripten_glTexParameterf__wrapper];
var FUNCTION_TABLE_viiii = [b23,_MouseButtonCallback,_emscripten_glBufferData__wrapper,_emscripten_glBufferSubData__wrapper,_emscripten_glUniform3i__wrapper,_emscripten_glUniformMatrix2fv__wrapper,_emscripten_glUniformMatrix3fv__wrapper,_emscripten_glUniformMatrix4fv__wrapper,_emscripten_glGetAttachedShaders__wrapper,_emscripten_glShaderSource__wrapper,_emscripten_glGetShaderSource__wrapper,_emscripten_glGetShaderInfoLog__wrapper,_emscripten_glGetShaderPrecisionFormat__wrapper,_emscripten_glGetProgramInfoLog__wrapper,_emscripten_glFramebufferRenderbuffer__wrapper,_emscripten_glGetFramebufferAttachmentParameteriv__wrapper,_emscripten_glGetInfoLogARB__wrapper,_emscripten_glVertexPointer__wrapper,_emscripten_glTexCoordPointer__wrapper,_emscripten_glColorPointer__wrapper,_emscripten_glDrawElements__wrapper,_emscripten_glDrawArraysInstanced__wrapper,_emscripten_glViewport__wrapper,_emscripten_glScissor__wrapper,_emscripten_glColorMask__wrapper,_emscripten_glRenderbufferStorage__wrapper,_emscripten_glBlendFuncSeparate__wrapper,_emscripten_glStencilFuncSeparate__wrapper,_emscripten_glStencilOpSeparate__wrapper,b23,b23,b23];

  return { _llvm_bswap_i32: _llvm_bswap_i32, _roundf: _roundf, _main: _main, dynCall_i: dynCall_i, stackSave: stackSave, _i64Subtract: _i64Subtract, ___udivdi3: ___udivdi3, dynCall_vidddd: dynCall_vidddd, setThrew: setThrew, dynCall_viii: dynCall_viii, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, dynCall_iii: dynCall_iii, _memset: _memset, _sbrk: _sbrk, _memcpy: _memcpy, stackAlloc: stackAlloc, ___muldi3: ___muldi3, dynCall_vd: dynCall_vd, dynCall_vdi: dynCall_vdi, dynCall_vii: dynCall_vii, ___uremdi3: ___uremdi3, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_viiiiiii: dynCall_viiiiiii, getTempRet0: getTempRet0, setTempRet0: setTempRet0, _i64Add: _i64Add, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_iiii: dynCall_iiii, _emscripten_get_global_libc: _emscripten_get_global_libc, dynCall_viid: dynCall_viid, dynCall_ii: dynCall_ii, _emscripten_GetProcAddress: _emscripten_GetProcAddress, dynCall_viiii: dynCall_viiii, ___errno_location: ___errno_location, dynCall_viiiii: dynCall_viiiii, dynCall_viddd: dynCall_viddd, dynCall_vidd: dynCall_vidd, _free: _free, runPostSets: runPostSets, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, _memmove: _memmove, _strstr: _strstr, stackRestore: stackRestore, _malloc: _malloc, _emscripten_replace_memory: _emscripten_replace_memory, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_vdd: dynCall_vdd, dynCall_v: dynCall_v, dynCall_vdddddd: dynCall_vdddddd, dynCall_vdddd: dynCall_vdddd };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__roundf = asm["_roundf"]; asm["_roundf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__roundf.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real__emscripten_GetProcAddress = asm["_emscripten_GetProcAddress"]; asm["_emscripten_GetProcAddress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_GetProcAddress.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__strstr = asm["_strstr"]; asm["_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strstr.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};
var _roundf = Module["_roundf"] = asm["_roundf"];
var _main = Module["_main"] = asm["_main"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = asm["_emscripten_GetProcAddress"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strstr = Module["_strstr"] = asm["_strstr"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vd = Module["dynCall_vd"] = asm["dynCall_vd"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_vdi = Module["dynCall_vdi"] = asm["dynCall_vdi"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vdddddd = Module["dynCall_vdddddd"] = asm["dynCall_vdddddd"];
var dynCall_vdddd = Module["dynCall_vdddd"] = asm["dynCall_vdddd"];
var dynCall_vdd = Module["dynCall_vdd"] = asm["dynCall_vdd"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;






/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



